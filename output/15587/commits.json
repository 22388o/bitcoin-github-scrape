[
  {
    "sha": "fa3da91df9362ea0ef56e004debe1432d70c1ef0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTNkYTkxZGY5MzYyZWEwZWY1NmUwMDRkZWJlMTQzMmQ3MGMxZWYw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-10T21:27:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T03:02:45Z"
      },
      "message": "scripted-diff: wallet: Rename pcoin to wtx\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/const CWalletTx ?\\* ?pcoin = &/const CWalletTx\\& wtx = /g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin->/wtx./g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin\\>/\\&wtx/g' src/wallet/wallet.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "781529f35690a278714a26b903dd86521ec7cf45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/781529f35690a278714a26b903dd86521ec7cf45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3da91df9362ea0ef56e004debe1432d70c1ef0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJciHLVAAoJEM4rdWl+aaVI+ZYL/09VmEQi7yHvciIfXOl/aN8w\nL+0qN/F037gQbyrywYl5yT7/4mRQfurq8WzfgIQLNwS2MpdcsB3T7qC+dUyeZBfs\ntOb3+3+4t90AV2XbZyzD1Acmh0VDmV1yvRyt5nG4v6qVFSHzJ9gLpiAND3EJJWJS\nkutbdyxSvhoz4gvvbnMVQvmGL2mVL+1gEe0OUIGl91iFqu/ehPvIUZ/IDgHkejYm\n1fyS60lSQ9+gyyV8gN0WwxxcMXKmtR4n4nmSBJQqdsNERf1ZmsArBXktpGz3gryW\nr/okUpt08DVvjhpWfL/UtOL6F4vL8ulvs+Cnp8cYc4+6dquUHpjBJwcfihxgIZQP\nxtSyxhRBHNiNdG9cadTJgYhGASe9estpuqTEg8fT3+mHF8W5lxksGW17m8SZYLUm\nSO3XL5rrLRDKqsr3nQktjXToAyQfr6bubu4VEnZdOm49k8jBY4I6EpcU/k7lrJME\n9yLatDiS7mAFnRWRHIg4qltZRIvNDHgsdHyVNjtyYw==\n=Kdah\n-----END PGP SIGNATURE-----",
        "payload": "tree 781529f35690a278714a26b903dd86521ec7cf45\nparent 887f57eb727643eb1f37999a022f3817aaab6d00\nauthor MarcoFalke <falke.marco@gmail.com> 1552253226 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1552446165 -0400\n\nscripted-diff: wallet: Rename pcoin to wtx\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/const CWalletTx ?\\* ?pcoin = &/const CWalletTx\\& wtx = /g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin->/wtx./g' src/wallet/wallet.cpp\nsed -i -e 's/\\<pcoin\\>/\\&wtx/g' src/wallet/wallet.cpp\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3da91df9362ea0ef56e004debe1432d70c1ef0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3da91df9362ea0ef56e004debe1432d70c1ef0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3da91df9362ea0ef56e004debe1432d70c1ef0/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "887f57eb727643eb1f37999a022f3817aaab6d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/887f57eb727643eb1f37999a022f3817aaab6d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/887f57eb727643eb1f37999a022f3817aaab6d00"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 45,
      "deletions": 45
    },
    "files": [
      {
        "sha": "cd1a37e3e9a1241b92d9800b616d35526a0c6ce5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3da91df9362ea0ef56e004debe1432d70c1ef0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3da91df9362ea0ef56e004debe1432d70c1ef0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa3da91df9362ea0ef56e004debe1432d70c1ef0",
        "patch": "@@ -2180,9 +2180,9 @@ CAmount CWallet::GetBalance(const isminefilter& filter, const int min_depth) con\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) >= min_depth) {\n-                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, filter);\n+            const CWalletTx& wtx = entry.second;\n+            if (wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) >= min_depth) {\n+                nTotal += wtx.GetAvailableCredit(*locked_chain, true, filter);\n             }\n         }\n     }\n@@ -2198,9 +2198,9 @@ CAmount CWallet::GetUnconfirmedBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit(*locked_chain);\n+            const CWalletTx& wtx = entry.second;\n+            if (!wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) == 0 && wtx.InMempool())\n+                nTotal += wtx.GetAvailableCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2214,8 +2214,8 @@ CAmount CWallet::GetImmatureBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureCredit(*locked_chain);\n+            const CWalletTx& wtx = entry.second;\n+            nTotal += wtx.GetImmatureCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2229,9 +2229,9 @@ CAmount CWallet::GetUnconfirmedWatchOnlyBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            if (!pcoin->IsTrusted(*locked_chain) && pcoin->GetDepthInMainChain(*locked_chain) == 0 && pcoin->InMempool())\n-                nTotal += pcoin->GetAvailableCredit(*locked_chain, true, ISMINE_WATCH_ONLY);\n+            const CWalletTx& wtx = entry.second;\n+            if (!wtx.IsTrusted(*locked_chain) && wtx.GetDepthInMainChain(*locked_chain) == 0 && wtx.InMempool())\n+                nTotal += wtx.GetAvailableCredit(*locked_chain, true, ISMINE_WATCH_ONLY);\n         }\n     }\n     return nTotal;\n@@ -2245,8 +2245,8 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n         LOCK(cs_wallet);\n         for (const auto& entry : mapWallet)\n         {\n-            const CWalletTx* pcoin = &entry.second;\n-            nTotal += pcoin->GetImmatureWatchOnlyCredit(*locked_chain);\n+            const CWalletTx& wtx = entry.second;\n+            nTotal += wtx.GetImmatureWatchOnlyCredit(*locked_chain);\n         }\n     }\n     return nTotal;\n@@ -2319,25 +2319,25 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n     for (const auto& entry : mapWallet)\n     {\n         const uint256& wtxid = entry.first;\n-        const CWalletTx* pcoin = &entry.second;\n+        const CWalletTx& wtx = entry.second;\n \n-        if (!locked_chain.checkFinalTx(*pcoin->tx)) {\n+        if (!locked_chain.checkFinalTx(*wtx.tx)) {\n             continue;\n         }\n \n-        if (pcoin->IsImmatureCoinBase(locked_chain))\n+        if (wtx.IsImmatureCoinBase(locked_chain))\n             continue;\n \n-        int nDepth = pcoin->GetDepthInMainChain(locked_chain);\n+        int nDepth = wtx.GetDepthInMainChain(locked_chain);\n         if (nDepth < 0)\n             continue;\n \n         // We should not consider coins which aren't at least in our mempool\n         // It's possible for these to be conflicted via ancestors which we may never be able to detect\n-        if (nDepth == 0 && !pcoin->InMempool())\n+        if (nDepth == 0 && !wtx.InMempool())\n             continue;\n \n-        bool safeTx = pcoin->IsTrusted(locked_chain);\n+        bool safeTx = wtx.IsTrusted(locked_chain);\n \n         // We should not consider coins from transactions that are replacing\n         // other transactions.\n@@ -2354,7 +2354,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         // be a 1-block reorg away from the chain where transactions A and C\n         // were accepted to another chain where B, B', and C were all\n         // accepted.\n-        if (nDepth == 0 && pcoin->mapValue.count(\"replaces_txid\")) {\n+        if (nDepth == 0 && wtx.mapValue.count(\"replaces_txid\")) {\n             safeTx = false;\n         }\n \n@@ -2366,7 +2366,7 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         // intending to replace A', but potentially resulting in a scenario\n         // where A, A', and D could all be accepted (instead of just B and\n         // D, or just A and A' like the user would want).\n-        if (nDepth == 0 && pcoin->mapValue.count(\"replaced_by_txid\")) {\n+        if (nDepth == 0 && wtx.mapValue.count(\"replaced_by_txid\")) {\n             safeTx = false;\n         }\n \n@@ -2377,8 +2377,8 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n         if (nDepth < nMinDepth || nDepth > nMaxDepth)\n             continue;\n \n-        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++) {\n-            if (pcoin->tx->vout[i].nValue < nMinimumAmount || pcoin->tx->vout[i].nValue > nMaximumAmount)\n+        for (unsigned int i = 0; i < wtx.tx->vout.size(); i++) {\n+            if (wtx.tx->vout[i].nValue < nMinimumAmount || wtx.tx->vout[i].nValue > nMaximumAmount)\n                 continue;\n \n             if (coinControl && coinControl->HasSelected() && !coinControl->fAllowOtherInputs && !coinControl->IsSelected(COutPoint(entry.first, i)))\n@@ -2390,20 +2390,20 @@ void CWallet::AvailableCoins(interfaces::Chain::Lock& locked_chain, std::vector<\n             if (IsSpent(locked_chain, wtxid, i))\n                 continue;\n \n-            isminetype mine = IsMine(pcoin->tx->vout[i]);\n+            isminetype mine = IsMine(wtx.tx->vout[i]);\n \n             if (mine == ISMINE_NO) {\n                 continue;\n             }\n \n-            bool solvable = IsSolvable(*this, pcoin->tx->vout[i].scriptPubKey);\n+            bool solvable = IsSolvable(*this, wtx.tx->vout[i].scriptPubKey);\n             bool spendable = ((mine & ISMINE_SPENDABLE) != ISMINE_NO) || (((mine & ISMINE_WATCH_ONLY) != ISMINE_NO) && (coinControl && coinControl->fAllowWatchOnly && solvable));\n \n-            vCoins.push_back(COutput(pcoin, i, nDepth, spendable, solvable, safeTx, (coinControl && coinControl->fAllowWatchOnly)));\n+            vCoins.push_back(COutput(&wtx, i, nDepth, spendable, solvable, safeTx, (coinControl && coinControl->fAllowWatchOnly)));\n \n             // Checks the sum amount of all UTXO's.\n             if (nMinimumSumAmount != MAX_MONEY) {\n-                nTotal += pcoin->tx->vout[i].nValue;\n+                nTotal += wtx.tx->vout[i].nValue;\n \n                 if (nTotal >= nMinimumSumAmount) {\n                     return;\n@@ -2562,13 +2562,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         std::map<uint256, CWalletTx>::const_iterator it = mapWallet.find(outpoint.hash);\n         if (it != mapWallet.end())\n         {\n-            const CWalletTx* pcoin = &it->second;\n+            const CWalletTx& wtx = it->second;\n             // Clearly invalid input, fail\n-            if (pcoin->tx->vout.size() <= outpoint.n)\n+            if (wtx.tx->vout.size() <= outpoint.n)\n                 return false;\n             // Just to calculate the marginal byte size\n-            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n-            setPresetCoins.insert(CInputCoin(pcoin->tx, outpoint.n));\n+            nValueFromPresetInputs += wtx.tx->vout[outpoint.n].nValue;\n+            setPresetCoins.insert(CInputCoin(wtx.tx, outpoint.n));\n         } else\n             return false; // TODO: Allow non-wallet inputs\n     }\n@@ -3606,27 +3606,27 @@ std::map<CTxDestination, CAmount> CWallet::GetAddressBalances(interfaces::Chain:\n         LOCK(cs_wallet);\n         for (const auto& walletEntry : mapWallet)\n         {\n-            const CWalletTx *pcoin = &walletEntry.second;\n+            const CWalletTx& wtx = walletEntry.second;\n \n-            if (!pcoin->IsTrusted(locked_chain))\n+            if (!wtx.IsTrusted(locked_chain))\n                 continue;\n \n-            if (pcoin->IsImmatureCoinBase(locked_chain))\n+            if (wtx.IsImmatureCoinBase(locked_chain))\n                 continue;\n \n-            int nDepth = pcoin->GetDepthInMainChain(locked_chain);\n-            if (nDepth < (pcoin->IsFromMe(ISMINE_ALL) ? 0 : 1))\n+            int nDepth = wtx.GetDepthInMainChain(locked_chain);\n+            if (nDepth < (wtx.IsFromMe(ISMINE_ALL) ? 0 : 1))\n                 continue;\n \n-            for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++)\n+            for (unsigned int i = 0; i < wtx.tx->vout.size(); i++)\n             {\n                 CTxDestination addr;\n-                if (!IsMine(pcoin->tx->vout[i]))\n+                if (!IsMine(wtx.tx->vout[i]))\n                     continue;\n-                if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, addr))\n+                if(!ExtractDestination(wtx.tx->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                CAmount n = IsSpent(locked_chain, walletEntry.first, i) ? 0 : pcoin->tx->vout[i].nValue;\n+                CAmount n = IsSpent(locked_chain, walletEntry.first, i) ? 0 : wtx.tx->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;\n@@ -3646,13 +3646,13 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n \n     for (const auto& walletEntry : mapWallet)\n     {\n-        const CWalletTx *pcoin = &walletEntry.second;\n+        const CWalletTx& wtx = walletEntry.second;\n \n-        if (pcoin->tx->vin.size() > 0)\n+        if (wtx.tx->vin.size() > 0)\n         {\n             bool any_mine = false;\n             // group all input addresses with each other\n-            for (const CTxIn& txin : pcoin->tx->vin)\n+            for (const CTxIn& txin : wtx.tx->vin)\n             {\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n@@ -3666,7 +3666,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n             // group change with input addresses\n             if (any_mine)\n             {\n-               for (const CTxOut& txout : pcoin->tx->vout)\n+               for (const CTxOut& txout : wtx.tx->vout)\n                    if (IsChange(txout))\n                    {\n                        CTxDestination txoutAddr;\n@@ -3683,7 +3683,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         }\n \n         // group lone addrs by themselves\n-        for (const auto& txout : pcoin->tx->vout)\n+        for (const auto& txout : wtx.tx->vout)\n             if (IsMine(txout))\n             {\n                 CTxDestination address;"
      }
    ]
  },
  {
    "sha": "5555aa43c7a13ca38724cad324093790e85e1437",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NTU1YWE0M2M3YTEzY2EzODcyNGNhZDMyNDA5Mzc5MGU4NWUxNDM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T03:03:33Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-13T03:05:22Z"
      },
      "message": "wallet: Remove GetLegacyBalance",
      "tree": {
        "sha": "2e92071f5bf8193c2770b815f89c0c86f65768ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e92071f5bf8193c2770b815f89c0c86f65768ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5555aa43c7a13ca38724cad324093790e85e1437",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJciHNyAAoJEM4rdWl+aaVI6H8MAKfEA0RMPAJC9V7NJRGVZDho\n9JehenAU/qAMUdAybqzM7iUYXIRLNiEcpg+jDhf6Hbb2Rmo2vEoi50QCwSGDJ7Sh\n+1b+X0LhBQvN+yNkQQil1bHAuG6cfUlWzqKAsXDYtm2CXxby+2RKkY8pUYUfmmPO\nxUxldwNPgnQSEMG0p8EOQaXXE8FV3/EKX0OtQwaM1gF1nnNZntACVORHEIaUSIiC\nnJGm7bWWsAU0287YnZQIzh7x8jvXk+dFX7UZv8df8gyW1u422azlKvhRw+sM6bq9\nox/fRwTv3vgNi/YWhcE5YwAIKLcQoLJl0yEfgFJ8d90ZyRTJN/4J+c42Rpwbr8Gz\n//yuQ3z9ggOHOxPQGtAwRWWJ4MQsC0e63dgYTxZNX+KHiHwHCFbBHatt4kExStxo\nV+pMJ4XVAdFUvpO4iQKf9oAkxCoEJaCoB//fysPPhtP6RK86KfMBUoddaaQgZ5nk\n6BkmdU19oRz/MHzb4EcbGlZX9PKjDBq2l2tJa91JnA==\n=CwTA\n-----END PGP SIGNATURE-----",
        "payload": "tree 2e92071f5bf8193c2770b815f89c0c86f65768ac\nparent fa3da91df9362ea0ef56e004debe1432d70c1ef0\nauthor MarcoFalke <falke.marco@gmail.com> 1552446213 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1552446322 -0400\n\nwallet: Remove GetLegacyBalance\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5555aa43c7a13ca38724cad324093790e85e1437",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5555aa43c7a13ca38724cad324093790e85e1437",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5555aa43c7a13ca38724cad324093790e85e1437/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa3da91df9362ea0ef56e004debe1432d70c1ef0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3da91df9362ea0ef56e004debe1432d70c1ef0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3da91df9362ea0ef56e004debe1432d70c1ef0"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 0,
      "deletions": 46
    },
    "files": [
      {
        "sha": "dbb22355c10654d629aea3b81a033c923e279616",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5555aa43c7a13ca38724cad324093790e85e1437/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5555aa43c7a13ca38724cad324093790e85e1437/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5555aa43c7a13ca38724cad324093790e85e1437",
        "patch": "@@ -929,11 +929,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n     EnsureWalletIsUnlocked(pwallet);\n \n-    // Check funds\n-    if (totalAmount > pwallet->GetLegacyBalance(ISMINE_SPENDABLE, nMinDepth)) {\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Wallet has insufficient funds\");\n-    }\n-\n     // Shuffle recipient list\n     std::shuffle(vecSend.begin(), vecSend.end(), FastRandomContext());\n "
      },
      {
        "sha": "c0a650f8786e4c73be4c18be9dea3b4fed4be12d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 40,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5555aa43c7a13ca38724cad324093790e85e1437/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5555aa43c7a13ca38724cad324093790e85e1437/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5555aa43c7a13ca38724cad324093790e85e1437",
        "patch": "@@ -2252,46 +2252,6 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-// Calculate total balance in a different way from GetBalance. The biggest\n-// difference is that GetBalance sums up all unspent TxOuts paying to the\n-// wallet, while this sums up both spent and unspent TxOuts paying to the\n-// wallet, and then subtracts the values of TxIns spending from the wallet. This\n-// also has fewer restrictions on which unconfirmed transactions are considered\n-// trusted.\n-CAmount CWallet::GetLegacyBalance(const isminefilter& filter, int minDepth) const\n-{\n-    auto locked_chain = chain().lock();\n-    LOCK(cs_wallet);\n-\n-    CAmount balance = 0;\n-    for (const auto& entry : mapWallet) {\n-        const CWalletTx& wtx = entry.second;\n-        const int depth = wtx.GetDepthInMainChain(*locked_chain);\n-        if (depth < 0 || !locked_chain->checkFinalTx(*wtx.tx) || wtx.IsImmatureCoinBase(*locked_chain)) {\n-            continue;\n-        }\n-\n-        // Loop through tx outputs and add incoming payments. For outgoing txs,\n-        // treat change outputs specially, as part of the amount debited.\n-        CAmount debit = wtx.GetDebit(filter);\n-        const bool outgoing = debit > 0;\n-        for (const CTxOut& out : wtx.tx->vout) {\n-            if (outgoing && IsChange(out)) {\n-                debit -= out.nValue;\n-            } else if (IsMine(out) & filter && depth >= minDepth) {\n-                balance += out.nValue;\n-            }\n-        }\n-\n-        // For outgoing txs, subtract amount debited.\n-        if (outgoing) {\n-            balance -= debit;\n-        }\n-    }\n-\n-    return balance;\n-}\n-\n CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n {\n     auto locked_chain = chain().lock();"
      },
      {
        "sha": "4eedf37da7aa92e8bc4c13cb4ac4be8517ed56d8",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5555aa43c7a13ca38724cad324093790e85e1437/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5555aa43c7a13ca38724cad324093790e85e1437/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=5555aa43c7a13ca38724cad324093790e85e1437",
        "patch": "@@ -950,7 +950,6 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetImmatureBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n-    CAmount GetLegacyBalance(const isminefilter& filter, int minDepth) const;\n     CAmount GetAvailableBalance(const CCoinControl* coinControl = nullptr) const;\n \n     OutputType TransactionChangeType(OutputType change_type, const std::vector<CRecipient>& vecSend);"
      }
    ]
  }
]