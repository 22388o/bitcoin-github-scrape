[
  {
    "sha": "28b80e6065fb3ada78a6ea49faf2912beb59ca27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOGI4MGU2MDY1ZmIzYWRhNzhhNmVhNDlmYWYyOTEyYmViNTljYTI3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-18T17:16:39Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-18T17:16:39Z"
      },
      "message": "Send transactions after a CMerkleBlock when asked for it in an inv.\n\nThis actually simplifies some SPV code, as they can keep track of\na filtered block and its txn before accepting both in one step.\nThe previous argument was that SPV nodes should handle the txn the\nsame as any other free txn and then mark them as connected to a\nblock when they get the filtered block itself.  However, it now\nappears that SPV nodes will need to put in more effort to verify\nloose txn than they would to verify txn in blocks, thus making it\nmore approriate to send the txn after the filtered block.",
      "tree": {
        "sha": "65e2f2915f4d3f6453e81948f98c39556f7d5322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65e2f2915f4d3f6453e81948f98c39556f7d5322"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/28b80e6065fb3ada78a6ea49faf2912beb59ca27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b80e6065fb3ada78a6ea49faf2912beb59ca27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/28b80e6065fb3ada78a6ea49faf2912beb59ca27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b80e6065fb3ada78a6ea49faf2912beb59ca27/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c7847349d5d4b1f3e8480c5137c2e8f3e2a5f5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c7847349d5d4b1f3e8480c5137c2e8f3e2a5f5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c7847349d5d4b1f3e8480c5137c2e8f3e2a5f5c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9fa6ebf2420e90e083a68634d2907e44e57b5c4b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/28b80e6065fb3ada78a6ea49faf2912beb59ca27/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/28b80e6065fb3ada78a6ea49faf2912beb59ca27/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=28b80e6065fb3ada78a6ea49faf2912beb59ca27",
        "patch": "@@ -3267,6 +3267,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                         if (pfrom->pfilter)\n                         {\n                             CMerkleBlock merkleBlock(block, *pfrom->pfilter);\n+                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n                             // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see \n                             // This avoids hurting performance by pointlessly requiring a round-trip\n                             // Note that there is currently no way for a node to request any single transactions we didnt send here -\n@@ -3277,7 +3278,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                             BOOST_FOREACH(PairType& pair, merkleBlock.vMatchedTxn)\n                                 if (!pfrom->setInventoryKnown.count(CInv(MSG_TX, pair.second)))\n                                     pfrom->PushMessage(\"tx\", block.vtx[pair.first]);\n-                            pfrom->PushMessage(\"merkleblock\", merkleBlock);\n                         }\n                         // else\n                             // no response"
      }
    ]
  },
  {
    "sha": "192cc910ec7cade1d0dce7f3b111e7fc7720e607",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTJjYzkxMGVjN2NhZGUxZDBkY2U3ZjNiMTExZTdmYzc3MjBlNjA3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-18T18:55:18Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2013-01-18T18:55:18Z"
      },
      "message": "Replace 520 constant with MAX_SCRIPT_ELEMENT_SIZE",
      "tree": {
        "sha": "80ec8fa7dccf8c48f17f5ef0edd6ab4d81be742a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80ec8fa7dccf8c48f17f5ef0edd6ab4d81be742a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/192cc910ec7cade1d0dce7f3b111e7fc7720e607",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192cc910ec7cade1d0dce7f3b111e7fc7720e607",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/192cc910ec7cade1d0dce7f3b111e7fc7720e607",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/192cc910ec7cade1d0dce7f3b111e7fc7720e607/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28b80e6065fb3ada78a6ea49faf2912beb59ca27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28b80e6065fb3ada78a6ea49faf2912beb59ca27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28b80e6065fb3ada78a6ea49faf2912beb59ca27"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4febf332db95283e5ee9c08960a4f175a548219d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192cc910ec7cade1d0dce7f3b111e7fc7720e607/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192cc910ec7cade1d0dce7f3b111e7fc7720e607/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=192cc910ec7cade1d0dce7f3b111e7fc7720e607",
        "patch": "@@ -3588,7 +3588,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Nodes must NEVER send a data item > 520 bytes (the max size for a script data object,\n         // and thus, the maximum size any matched object can have) in a filteradd message\n-        if (vData.size() > 520)\n+        if (vData.size() > MAX_SCRIPT_ELEMENT_SIZE)\n         {\n             pfrom->Misbehaving(100);\n         } else {"
      },
      {
        "sha": "45ac8335dc64becac2307560515bfff4ba5249b3",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192cc910ec7cade1d0dce7f3b111e7fc7720e607/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192cc910ec7cade1d0dce7f3b111e7fc7720e607/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=192cc910ec7cade1d0dce7f3b111e7fc7720e607",
        "patch": "@@ -340,7 +340,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n             //\n             if (!script.GetOp(pc, opcode, vchPushValue))\n                 return false;\n-            if (vchPushValue.size() > 520)\n+            if (vchPushValue.size() > MAX_SCRIPT_ELEMENT_SIZE)\n                 return false;\n             if (opcode > OP_16 && ++nOpCount > 201)\n                 return false;\n@@ -670,7 +670,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     valtype& vch2 = stacktop(-1);\n                     vch1.insert(vch1.end(), vch2.begin(), vch2.end());\n                     popstack(stack);\n-                    if (stacktop(-1).size() > 520)\n+                    if (stacktop(-1).size() > MAX_SCRIPT_ELEMENT_SIZE)\n                         return false;\n                 }\n                 break;"
      },
      {
        "sha": "4b29f6273c9f066a2bf924f5cb79e29cf9e39d9c",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/192cc910ec7cade1d0dce7f3b111e7fc7720e607/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/192cc910ec7cade1d0dce7f3b111e7fc7720e607/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=192cc910ec7cade1d0dce7f3b111e7fc7720e607",
        "patch": "@@ -17,6 +17,8 @@\n class CCoins;\n class CTransaction;\n \n+static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n+\n /** Signature hash types/flags */\n enum\n {"
      }
    ]
  }
]