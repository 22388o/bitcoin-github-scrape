MarcoFalke,2021-06-23 06:11:00,Nice catch. Concept ACK,https://github.com/bitcoin/bitcoin/pull/22310#issuecomment-866557620,866557620,
DrahtBot,2021-06-23 20:11:58,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22310#issuecomment-867125974,867125974,
ariard,2021-06-30 22:58:48,"@MarcoFalke, Fair point, updated at c4ddee6 with MiniWallet and hopefully binding comment, thanks for the code snippet! IMHO, I prefer to use the low-level test framework API to illustrate etchy, confusing case of our mempool logic but I understand for maintainability the usage of the higher API is better.\n\nNote to reviewers, hopefully the following diff should let you exercise the new test co",https://github.com/bitcoin/bitcoin/pull/22310#issuecomment-871779358,871779358,
MarcoFalke,2021-07-01 16:35:59,"cr ACK c4ddee64c7f80eee05a95116ef1b1dc8a7601183\n",https://github.com/bitcoin/bitcoin/pull/22310#issuecomment-872391970,872391970,
MarcoFalke,2021-07-01 16:41:22,https://marcofalke.github.io/btc_cov/total.coverage/src/validation.cpp.gcov.html#907 should be green in about 24 hours,https://github.com/bitcoin/bitcoin/pull/22310#issuecomment-872395314,872395314,
MarcoFalke,2021-06-22 17:31:28,"any reason to change the reject string? This will just cause a headache for downstream project (if they use the reject string) and might even be controversial due to the change ""fee"" -> ""penalty"".",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656436783,656436783,src/validation.cpp
MarcoFalke,2021-06-22 17:33:35,"Also the commit title is wrong? Mentions rule 5, but this is rule 4?",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656438260,656438260,src/validation.cpp
ariard,2021-06-22 17:47:18,"Pushed new commit, updating to rule 4.\n\nW.r.t to headache for downstream project, it's motivated by the fact that this same reject reason is already used L897 for the ""higher fee"" check and L833 for the ""higher feerate"" check.\n\nDo we want to dissipate the confusion ? I would say it's better but can just drop it if you think it's too bothering for downstream.",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656447759,656447759,src/validation.cpp
MarcoFalke,2021-06-22 17:50:16,"If you really want to change it, a separate pull request with clear rationale to motivate the change (and the hassle it causes)  would be better. Bundling it with a change that is adding a test might not be the best approach.",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656449884,656449884,src/validation.cpp
MarcoFalke,2021-06-22 17:55:14,"Obviously it needs release notes etc. Though, I'd rather avoid breaking downstream via reject reasons, which might break silently because they are not an enum. https://github.com/bitcoin/bitcoin/pull/19339#issuecomment-704894759",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656454211,656454211,src/validation.cpp
ariard,2021-06-22 18:10:42,"Ah okay, well I'll let the confusion for now and just happy to have test coverage. Updated the branch.",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656466188,656466188,src/validation.cpp
MarcoFalke,2021-06-22 18:23:24,how is this test different from the one above? `# Should fail because we haven't changed the fee`,https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656476166,656476166,test/functional/feature_rbf.py
darosior,2021-06-22 18:32:05,The fee and fee per KB are lower though?,https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656482528,656482528,test/functional/feature_rbf.py
MarcoFalke,2021-06-23 06:10:45,It is different because the newly added test adds coverage for previously uncovered code https://marcofalke.github.io/btc_cov/total.coverage/src/validation.cpp.gcov.html,https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656787526,656787526,test/functional/feature_rbf.py
MarcoFalke,2021-06-23 06:11:35,"any reason to not use miniwallet, like in the previous test?",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r656787868,656787868,test/functional/feature_rbf.py
ariard,2021-06-23 16:29:46,"I think the `replacement_transaction` output value is `CTxOut(int(1 * COIN - 1))` so it has a higher fee/fee per KB, as everything else is constant.\n\nYou can verify with the following diff :\n```\n@@ -892,6 +894,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // The replacement must pay greater fees than the transactions it\n         // replaces - if we did the ",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r657274540,657274540,test/functional/feature_rbf.py
ariard,2021-06-23 16:31:45,Well I think it makes the test a bit longer because it doesn't give you an outpoint but an utxo ? Though I took it anyway.,https://github.com/bitcoin/bitcoin/pull/22310#discussion_r657276192,657276192,test/functional/feature_rbf.py
MarcoFalke,2021-06-23 16:38:08,"heh, the point is to create the tx with the miniwallet. In that case the test should be three lines or so.",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r657280941,657280941,test/functional/feature_rbf.py
darosior,2021-06-23 16:44:53,"Sorry, brainfart.",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r657285823,657285823,test/functional/feature_rbf.py
darosior,2021-06-23 16:58:30,"So now this is the very same test as in `test_simple_doublespend`:\nhttps://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/test/functional/feature_rbf.py#L133-L148\n\nI think (untested) it would be caught in:\nhttps://github.com/bitcoin/bitcoin/blob/7317e14a44c6efc545e6fb9bcedee7174e93a8fa/src/validation.cpp#L830-L838\nWhich is already a covered branch.\n\nYou need",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r657295787,657295787,test/functional/feature_rbf.py
ariard,2021-06-24 16:06:56,"> You need to keep the lower feerate to get to the yet-uncovered branch of:\n\nOh yes effectively, do you mean the higher feerate ? \n\nAt 58cdabe6, feerates are the following:\n\n```\n node0 2021-06-24T15:51:23.735515Z [httpworker.0] [validation.cpp:831] [PreChecks] newFeeRate 583.33333345 BTC/kvB \n node0 2021-06-24T15:51:23.735525Z [httpworker.0] [validation.cpp:832] [PreChecks] oldFeeR",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r658086853,658086853,test/functional/feature_rbf.py
ariard,2021-06-24 16:10:50,Okay I did drop the miniwallet usage as AFAICT its `fee_rate` argument doesn't allow the feerate granularity (sat per KvB) required to hit the yet-uncovered branch ? Or at least without modifying node's default `incrementalrelayfee`,https://github.com/bitcoin/bitcoin/pull/22310#discussion_r658089767,658089767,test/functional/feature_rbf.py
MarcoFalke,2021-06-25 11:55:45,"Is is ""equal fee"" if the fee is increased?\n\nAgain, I'd recommend to use MiniWallet, which will simplify this test a lot:\n\n```py\n    def test_replacement_relay_fee(self):\n        wallet = MiniWallet(self.nodes[0])\n        wallet.scan_blocks(start=77, num=1)\n        tx = wallet.send_self_transfer(from_node=self.nodes[0])['tx']\n        tx.vout[0].nValue -= 1\n        assert_raises_",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r658707305,658707305,test/functional/feature_rbf.py
ariard,2021-06-30 22:59:49,"Ooops, leftover from the multiple updates of this PR with the converation [here](https://github.com/bitcoin/bitcoin/pull/22310#discussion_r657295787).",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r661863529,661863529,test/functional/feature_rbf.py
glozow,2021-07-01 13:48:43,"(nit) was slightly surprised that 1 was parsed as 1 satoshi and that the tx didn't need a new signature\n\n```suggestion\n        # Increase the fee by 1 satoshi. Same signature works because it is an anyone-can-spend.\n        tx.vout[0].nValue -= Decimal(""0.00000001"")\n```",https://github.com/bitcoin/bitcoin/pull/22310#discussion_r662306137,662306137,test/functional/feature_rbf.py
MarcoFalke,2021-07-01 16:35:08,The test wouldn't pass with the suggestion applied,https://github.com/bitcoin/bitcoin/pull/22310#discussion_r662438952,662438952,test/functional/feature_rbf.py
