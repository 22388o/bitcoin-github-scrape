[
  {
    "sha": "22016c5d4deafba1295e1a7196a89e8714a5627d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjAxNmM1ZDRkZWFmYmExMjk1ZTFhNzE5NmE4OWU4NzE0YTU2Mjdk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-13T23:01:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-13T23:02:43Z"
      },
      "message": "Don't allow uncompressed pubkeys if signing with segwit\n\nWhen signing, if the sigversion is WITNESS_V0, check that all public\nkeys are compressed public keys before any kind of signature is made",
      "tree": {
        "sha": "ea9fe90e83c96077d0e685a3c3e8141ba05b90e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea9fe90e83c96077d0e685a3c3e8141ba05b90e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/22016c5d4deafba1295e1a7196a89e8714a5627d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22016c5d4deafba1295e1a7196a89e8714a5627d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/22016c5d4deafba1295e1a7196a89e8714a5627d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22016c5d4deafba1295e1a7196a89e8714a5627d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "667a8617418d837092de5b37568d60b372519462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/667a8617418d837092de5b37568d60b372519462",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/667a8617418d837092de5b37568d60b372519462"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1cb5ea2336329de957ebd9f31ec41ed1a48da01e",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/22016c5d4deafba1295e1a7196a89e8714a5627d/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/22016c5d4deafba1295e1a7196a89e8714a5627d/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=22016c5d4deafba1295e1a7196a89e8714a5627d",
        "patch": "@@ -68,6 +68,10 @@ static bool GetPubKey(const SigningProvider& provider, const SignatureData& sigd\n \n static bool CreateSig(const BaseSignatureCreator& creator, SignatureData& sigdata, const SigningProvider& provider, std::vector<unsigned char>& sig_out, const CPubKey& pubkey, const CScript& scriptcode, SigVersion sigversion)\n {\n+    // Signing with uncompressed keys is disabled in witness scripts\n+    if (sigversion == SigVersion::WITNESS_V0 && !pubkey.IsCompressed()) {\n+        return false;\n+    }\n     CKeyID keyid = pubkey.GetID();\n     const auto it = sigdata.signatures.find(keyid);\n     if (it != sigdata.signatures.end()) {\n@@ -143,6 +147,10 @@ static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n         for (size_t i = 1; i < vSolutions.size() - 1; ++i) {\n             CPubKey pubkey = CPubKey(vSolutions[i]);\n+            // Signing with uncompressed keys is disabled in witness scripts\n+            if (sigversion == SigVersion::WITNESS_V0 && !pubkey.IsCompressed()) {\n+                return false;\n+            }\n             if (ret.size() < required + 1 && CreateSig(creator, sigdata, provider, sig, pubkey, scriptPubKey, sigversion)) {\n                 ret.push_back(std::move(sig));\n             }"
      }
    ]
  },
  {
    "sha": "6a935a570a8e0c2aba7d5be3fe39a86a16376531",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTkzNWE1NzBhOGUwYzJhYmE3ZDViZTNmZTM5YTg2YTE2Mzc2NTMx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-13T23:23:09Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-13T23:23:09Z"
      },
      "message": "Test that multisigs with mixed compressed and uncompressed keys are legacy",
      "tree": {
        "sha": "18f767333c0bbec8b4c627a5b1dad14ff73bc851",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/18f767333c0bbec8b4c627a5b1dad14ff73bc851"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a935a570a8e0c2aba7d5be3fe39a86a16376531",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a935a570a8e0c2aba7d5be3fe39a86a16376531",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a935a570a8e0c2aba7d5be3fe39a86a16376531",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a935a570a8e0c2aba7d5be3fe39a86a16376531/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22016c5d4deafba1295e1a7196a89e8714a5627d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22016c5d4deafba1295e1a7196a89e8714a5627d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22016c5d4deafba1295e1a7196a89e8714a5627d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 29,
      "deletions": 1
    },
    "files": [
      {
        "sha": "58010f7c2e69ae81e40a3f00166e026f7653d058",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a935a570a8e0c2aba7d5be3fe39a86a16376531/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a935a570a8e0c2aba7d5be3fe39a86a16376531/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=6a935a570a8e0c2aba7d5be3fe39a86a16376531",
        "patch": "@@ -7,9 +7,13 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n+    assert_equal,\n )\n-import decimal\n+from test_framework.key import ECPubKey\n \n+import binascii\n+import decimal\n+import itertools\n \n class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -44,6 +48,30 @@ def run_test(self):\n \n         self.checkbalances()\n \n+        # Test mixed compressed and uncompressed pubkeys\n+        self.log.info('Mixed compressed and uncompressed multisigs are not allowed')\n+        pk0 = node0.getaddressinfo(node0.getnewaddress())['pubkey']\n+        pk1 = node1.getaddressinfo(node1.getnewaddress())['pubkey']\n+        pk2 = node2.getaddressinfo(node2.getnewaddress())['pubkey']\n+\n+        # decompress pk2\n+        pk_obj = ECPubKey()\n+        pk_obj.set(binascii.unhexlify(pk2))\n+        pk_obj.compressed = False\n+        pk2 = binascii.hexlify(pk_obj.get_bytes()).decode()\n+\n+        # Check all permutations of keys because order matters apparently\n+        for keys in itertools.permutations([pk0, pk1, pk2]):\n+            # Results should be the same as this legacy one\n+            legacy_addr = node0.createmultisig(2, keys, 'legacy')['address']\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'legacy')['address'])\n+\n+            # Generate addresses with the segwit types. These should all make legacy addresses\n+            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'bech32')['address'])\n+            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'p2sh-segwit')['address'])\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'bech32')['address'])\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'p2sh-segwit')['address'])\n+\n     def check_addmultisigaddress_errors(self):\n         self.log.info('Check that addmultisigaddress fails when the private keys are missing')\n         addresses = [self.nodes[1].getnewaddress(address_type='legacy') for _ in range(2)]"
      }
    ]
  }
]