[
  {
    "sha": "05cae8aefd160ed83206a6d0f15cc29fd8653755",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWNhZThhZWZkMTYwZWQ4MzIwNmE2ZDBmMTVjYzI5ZmQ4NjUzNzU1",
    "commit": {
      "author": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-07-20T09:32:47Z"
      },
      "committer": {
        "name": "Marko Bencun",
        "email": "marko.bencun@monetas.net",
        "date": "2017-09-12T07:11:22Z"
      },
      "message": "range-based loops and const qualifications in net.cpp\n\nPlus a use of std::copy() instead of manual copying.",
      "tree": {
        "sha": "fcf8db05b3da3ecb5fb98549021cb7796b48d231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcf8db05b3da3ecb5fb98549021cb7796b48d231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05cae8aefd160ed83206a6d0f15cc29fd8653755",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05cae8aefd160ed83206a6d0f15cc29fd8653755",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05cae8aefd160ed83206a6d0f15cc29fd8653755",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05cae8aefd160ed83206a6d0f15cc29fd8653755/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "16e41844e7d6c5876d2caaeef6010656950c6ec5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e41844e7d6c5876d2caaeef6010656950c6ec5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16e41844e7d6c5876d2caaeef6010656950c6ec5"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "cfc544de1a85a284eb6f4b95202d3d3a9bcdf218",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 34,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05cae8aefd160ed83206a6d0f15cc29fd8653755/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05cae8aefd160ed83206a6d0f15cc29fd8653755/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=05cae8aefd160ed83206a6d0f15cc29fd8653755",
        "patch": "@@ -135,11 +135,10 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n     const int64_t nOneWeek = 7*24*60*60;\n     std::vector<CAddress> vSeedsOut;\n     vSeedsOut.reserve(vSeedsIn.size());\n-    for (std::vector<SeedSpec6>::const_iterator i(vSeedsIn.begin()); i != vSeedsIn.end(); ++i)\n-    {\n+    for (const auto& seed_in : vSeedsIn) {\n         struct in6_addr ip;\n-        memcpy(&ip, i->addr, sizeof(ip));\n-        CAddress addr(CService(ip, i->port), NODE_NETWORK);\n+        memcpy(&ip, seed_in.addr, sizeof(ip));\n+        CAddress addr(CService(ip, seed_in.port), NODE_NETWORK);\n         addr.nTime = GetTime() - GetRand(nOneWeek) - nOneWeek;\n         vSeedsOut.push_back(addr);\n     }\n@@ -299,18 +298,22 @@ bool IsReachable(const CNetAddr& addr)\n CNode* CConnman::FindNode(const CNetAddr& ip)\n {\n     LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes)\n-        if ((CNetAddr)pnode->addr == ip)\n-            return (pnode);\n+    for (CNode* pnode : vNodes) {\n+        if ((CNetAddr)pnode->addr == ip) {\n+            return pnode;\n+        }\n+    }\n     return nullptr;\n }\n \n CNode* CConnman::FindNode(const CSubNet& subNet)\n {\n     LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes)\n-    if (subNet.Match((CNetAddr)pnode->addr))\n-        return (pnode);\n+    for (CNode* pnode : vNodes) {\n+        if (subNet.Match((CNetAddr)pnode->addr)) {\n+            return pnode;\n+        }\n+    }\n     return nullptr;\n }\n \n@@ -319,7 +322,7 @@ CNode* CConnman::FindNode(const std::string& addrName)\n     LOCK(cs_vNodes);\n     for (CNode* pnode : vNodes) {\n         if (pnode->GetAddrName() == addrName) {\n-            return (pnode);\n+            return pnode;\n         }\n     }\n     return nullptr;\n@@ -328,9 +331,11 @@ CNode* CConnman::FindNode(const std::string& addrName)\n CNode* CConnman::FindNode(const CService& addr)\n {\n     LOCK(cs_vNodes);\n-    for (CNode* pnode : vNodes)\n-        if ((CService)pnode->addr == addr)\n-            return (pnode);\n+    for (CNode* pnode : vNodes) {\n+        if ((CService)pnode->addr == addr) {\n+            return pnode;\n+        }\n+    }\n     return nullptr;\n }\n \n@@ -474,10 +479,9 @@ void CConnman::ClearBanned()\n bool CConnman::IsBanned(CNetAddr ip)\n {\n     LOCK(cs_setBanned);\n-    for (banmap_t::iterator it = setBanned.begin(); it != setBanned.end(); it++)\n-    {\n-        CSubNet subNet = (*it).first;\n-        CBanEntry banEntry = (*it).second;\n+    for (const auto& it : setBanned) {\n+        CSubNet subNet = it.first;\n+        CBanEntry banEntry = it.second;\n \n         if (subNet.Match(ip) && GetTime() < banEntry.nBanUntil) {\n             return true;\n@@ -952,7 +956,7 @@ bool CConnman::AttemptToEvictConnection()\n     {\n         LOCK(cs_vNodes);\n \n-        for (CNode *node : vNodes) {\n+        for (const CNode* node : vNodes) {\n             if (node->fWhitelisted)\n                 continue;\n             if (!node->fInbound)\n@@ -1030,9 +1034,9 @@ bool CConnman::AttemptToEvictConnection()\n     // Disconnect from the network group with the most connections\n     NodeId evicted = vEvictionCandidates.front().id;\n     LOCK(cs_vNodes);\n-    for(std::vector<CNode*>::const_iterator it(vNodes.begin()); it != vNodes.end(); ++it) {\n-        if ((*it)->GetId() == evicted) {\n-            (*it)->fDisconnect = true;\n+    for (CNode* pnode : vNodes) {\n+        if (pnode->GetId() == evicted) {\n+            pnode->fDisconnect = true;\n             return true;\n         }\n     }\n@@ -1056,9 +1060,9 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     bool whitelisted = hListenSocket.whitelisted || IsWhitelistedRange(addr);\n     {\n         LOCK(cs_vNodes);\n-        for (CNode* pnode : vNodes)\n-            if (pnode->fInbound)\n-                nInbound++;\n+        for (const CNode* pnode : vNodes) {\n+            if (pnode->fInbound) nInbound++;\n+        }\n     }\n \n     if (hSocket == INVALID_SOCKET)\n@@ -1850,8 +1854,7 @@ std::vector<AddedNodeInfo> CConnman::GetAddedNodeInfo()\n     {\n         LOCK(cs_vAddedNodes);\n         ret.reserve(vAddedNodes.size());\n-        for (const std::string& strAddNode : vAddedNodes)\n-            lAddresses.push_back(strAddNode);\n+        std::copy(vAddedNodes.cbegin(), vAddedNodes.cend(), std::back_inserter(lAddresses));\n     }\n \n \n@@ -2488,9 +2491,8 @@ std::vector<CAddress> CConnman::GetAddresses()\n bool CConnman::AddNode(const std::string& strNode)\n {\n     LOCK(cs_vAddedNodes);\n-    for(std::vector<std::string>::const_iterator it = vAddedNodes.begin(); it != vAddedNodes.end(); ++it) {\n-        if (strNode == *it)\n-            return false;\n+    for (const std::string& it : vAddedNodes) {\n+        if (strNode == it) return false;\n     }\n \n     vAddedNodes.push_back(strNode);\n@@ -2516,9 +2518,11 @@ size_t CConnman::GetNodeCount(NumConnections flags)\n         return vNodes.size();\n \n     int nNum = 0;\n-    for(std::vector<CNode*>::const_iterator it = vNodes.begin(); it != vNodes.end(); ++it)\n-        if (flags & ((*it)->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT))\n+    for (const auto& pnode : vNodes) {\n+        if (flags & (pnode->fInbound ? CONNECTIONS_IN : CONNECTIONS_OUT)) {\n             nNum++;\n+        }\n+    }\n \n     return nNum;\n }\n@@ -2528,8 +2532,7 @@ void CConnman::GetNodeStats(std::vector<CNodeStats>& vstats)\n     vstats.clear();\n     LOCK(cs_vNodes);\n     vstats.reserve(vNodes.size());\n-    for(std::vector<CNode*>::iterator it = vNodes.begin(); it != vNodes.end(); ++it) {\n-        CNode* pnode = *it;\n+    for (CNode* pnode : vNodes) {\n         vstats.emplace_back();\n         pnode->copyStats(vstats.back());\n     }"
      }
    ]
  }
]