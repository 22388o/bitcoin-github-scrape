dcousens,2015-11-05T20:47:04Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154185478,154185478,
laanwj,2015-11-05T21:30:56Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154198556,154198556,
MarcoFalke,2015-11-05T22:12:53Z,Concept ACK\n\n```\n$ ./contrib/devtools/git-subtree-check.sh src/secp256k1\nsrc/secp256k1 in HEAD was last updated to upstream commit 2bfb82b10edf0f0b0e366a12f94c8b21a914159d (tree 7a74d5de4d518bc5165feeeb75edb0ac4e8c5bea)\nsrc/secp256k1 in HEAD currently refers to tree 7a74d5de4d518bc5165feeeb75edb0ac4e8c5bea\nGOOD\n```\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154211737,154211737,
fanquake,2015-11-06T02:35:17Z,Concept ACK. Will start testing shortly.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154265694,154265694,
jonasschnelli,2015-11-06T07:26:20Z,"Concept ACK.\n\nAwesome work! Many thanks to all contributors, especially @sipa and @gmaxwell.\nStarted testing now.\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154333453,154333453,
paveljanik,2015-11-06T07:53:42Z,"In the build process, you run `gen_context`:\n\n```\ngcc -I./ -g -O2 -Wall -Wextra -Wno-unused-function -c src/gen_context.c -o gen_context.o\ngcc gen_context.o -o gen_context\n./gen_context\n```\n\nIs this compatible with our gitian/crossbuild processes?\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154338772,154338772,
jonasschnelli,2015-11-06T07:56:27Z,@paveljanik: Yes. It is. I also tested a gitian build: https://bitcoin.jonasschnelli.ch/pulls/6954/\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154339113,154339113,
jgarzik,2015-11-06T12:42:12Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154399284,154399284,
jonasschnelli,2015-11-06T16:58:15Z,"Just synced a fresh node with this branch with `-debug=bench`. It took ~9h.\nStandard parameters (i didn't change `dbcache`).\nDebug log is here: https://bitcoin.jonasschnelli.ch/secp/debug.log (>300MB!).\n\nSystem: Quad Core Intel(R) Xeon(R) CPU E31245 @ 3.30GHz, 16GB Ram, 7200rpm disk.\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154471932,154471932,
CodeShark,2015-11-06T22:59:20Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154569565,154569565,
gmaxwell,2015-11-06T23:27:18Z,"ACK.  I provided some nits, I consider them super minor and not blockers.\n\nAlso tested IBD w/ no checkpoints, reindex, reindex in valgrind, signmessage/verify message. Could not test derive, because we don't actually expose it.  \n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154575674,154575674,
jonasschnelli,2015-11-07T19:20:54Z,Unrepresentative non-scientific trivial IBD comparison with standard parameters:\nSystem Ressources see comment above. 1000MBit internet connection (server data center).\n\n**Current Master:**\n\n```\n2015-11-06 16:54:46 Bitcoin version v0.11.99.0-4ee149a (2015-11-05 23:39:48 +0100)\n--- snip ---\n2015-11-07 04:53:00 UpdateTip: new best=00000000000000000b48452a4825f7a171b7dcc4a4e63db523a39b9b33536,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154741052,154741052,
gmaxwell,2015-11-08T19:12:35Z,"> Will do the same now with -dbcache=3000.\n\nFWIW, you need a coinscache around 5500 MB to actually have the UTXO in ram.  In that configuration with this patch _and checkpoints disabled_ I performed an IBD off the network in about three and a half hours:\n\n```\n2015-11-06 01:25:11 Bitcoin version v0.11.99.0-66c5214 (2015-11-05 21:19:41 +0100)\n...\n2015-11-06 05:04:32 UpdateTip: new best=000000",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154858821,154858821,
jonasschnelli,2015-11-08T19:16:22Z,`-dbache=3000` benchmark:\n\n**current master**:\n2015-11-07 19:21:43 Bitcoin version v0.11.99.0-4ee149a (2015-11-05 23:39:48 +0100)\n2015-11-08 03:58:51 UpdateTip: new best=000000000000000009641f7a3734cfb9fe861c20a1aa77e8d1d6780913728bfe  height=382556 \n**Total: ~7h37'**\n\n**This PR**\n2015-11-08 12:06:24 Bitcoin version v0.11.99.0-332a5b0 (2015-11-06 08:30:43 +0100)\n2015-11-08 15:54:21 Update,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154859033,154859033,
jonasschnelli,2015-11-09T08:17:14Z,`-dbcache=6000` with this PR:\n\n```\n2015-11-08 19:17:23 Bitcoin version v0.11.99.0-332a5b0 (2015-11-06 08:30:43 +0100)\n2015-11-08 22:39:21 UpdateTip: new best=000000000000000009641f7a3734cfb9fe861c20a1aa77e8d1d6780913728bfe  height=382556 \n```\n\n**Total: 3h22**\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-154993958,154993958,
jonasschnelli,2015-11-09T15:17:51Z,"Just encountered a possible issue:\n\nThe node running this PR is stuck on height 382748.\n\n```\n  {\n    ""height"": 382761,\n    ""hash"": ""00000000000000000a017d90eaf3bcffdc106a4606ab7e94880a506b1b7ca8a4"",\n    ""branchlen"": 13,\n    ""status"": ""headers-only""\n  }, \n  {\n    ""height"": 382748,\n    ""hash"": ""00000000000000001043ada919c3851e17876deca67acc19f365fab4a79bd59d"",\n    ""branchlen"": 0,\n    ",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155093019,155093019,
morcos,2015-11-09T19:02:50Z,"I'm very in favor of this being merged, however I can't say I have reviewed this code or done specific testing.  I have however been using it over the last several months and never encountered a problem.\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155156869,155156869,
petertodd,2015-11-09T19:21:12Z,"Re: libsecp256k1 testing, awesome work!\n\nIs there a document anywhere describing that process a bit more formally? It'd be good to have that to point people too. (particularly if you have enough time to make it repeatable by others)\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155163735,155163735,
jonasschnelli,2015-11-10T08:08:12Z,"F.Y.I:\nThe problem above (https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155093019) could be cured – as expected – with a bitcoind restart.\nI have bootstrapped another fresh mainnet node with this PR and `-dbcache=6000` and it didn't happen again.\nAnyways, the problem is/was very likely unrelated to this PR.\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155353027,155353027,
jonasschnelli,2015-11-10T10:44:14Z,**Tested & Code-Review ACK.**\n\nDid serval IBD's and running nodes with this PR since 3 days without problems (expect the one that is not related to this PR). Attached my OSX leaks detector during IBD and -verifyblocks=288 phase (can only collect the BDB leaks).\n\n+1 for next step to fully remove the openssl dependency by replacing `RandAddSeed()` and co. with something like #5885 (wallet AES co,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155385800,155385800,
laanwj,2015-11-10T14:42:51Z,"Reindex up to block 380912 w/ dbcache=8000 took 3.2 hours with this patch, 8.0 hours without.\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155438100,155438100,
jtimon,2015-11-10T16:18:14Z,Concept ACK. I've been waiting for this.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155470311,155470311,
gmaxwell,2015-11-11T01:30:59Z,This needs more people to review the integration code before it can be merged. (Enough benchmarks.)\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155625688,155625688,
sipa,2015-11-11T06:11:04Z,Rebased on top of #6983 and nits addressed.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155678941,155678941,
jonasschnelli,2015-11-11T08:34:07Z,The DIFF is huge because of the squashes libsecp256k1 git subtree. The integration code (first couple of files in the diff) can be reviewed with a fair amount of effort. One shouldn't be discourage because of the large diff.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155703318,155703318,
sipa,2015-11-11T08:35:41Z,@jonasschnelli Or just look at the individual commits.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-155703646,155703646,
sipa,2015-11-13T15:55:58Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-156471843,156471843,
laanwj,2015-11-13T17:08:50Z,Code review ACK\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-156490315,156490315,
gmaxwell,2015-11-13T20:02:19Z,"This pull could write the release notes too, see comments for benchmark numbers. :)\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-156542635,156542635,
gmaxwell,2015-11-14T05:58:43Z,I can also confirm this makes Bitcoin work on unmodified RHEL7.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-156641327,156641327,
jtimon,2015-11-15T12:46:28Z,"I cannot give an utACK because I'm not trying to understand everything that is done here.\nBut I reviewed the parts is easy for me to understand and I would utACK those parts (modulo my ""put secp256k1_context_verify inside ECCVerifyHandle"" nit).\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-156809318,156809318,
sipa,2015-11-15T14:58:24Z,Addressed some nits.\n,https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-156816215,156816215,
laanwj,2015-11-16T12:24:19Z,"Bikeshedding over different (but semantically equivalent) syntax can happen later. I'd like to move forward with this, to make sure it ends up in 0.12 and to save @sipa the work of rebasing this every time.\n\nFurther testing and review will probably only happen anyway when this is merged.\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-157012126,157012126,
jtimon,2015-11-16T14:18:01Z,"Sure, my non-addressed suggestion was too disruptive to make this happen fast and it's not a priority.\nI'm glad that this got merged like this, but I'm also glad that my suggestion doesn't seem crazy either.\n",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-157044176,157044176,
Aquentus,2015-12-23T21:52:24Z,"Is there proper and academic documentation for these proposed changes and is there a BIP?\n\nThis isn't solely a code change, in my opinion. New algorithms are being proposed towards some of the most fundamental aspects of bitcoin - signature validation. As we all know, things can go terribly wrong in this space and unfortunately it is not even knowable what can go wrong. \n\nCertain experts have ",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-166998024,166998024,
luke-jr,2015-12-24T01:18:46Z,"@Aquentus While I agree with your concerns, I am not sure this needs a BIP beyond BIP 66. The review of libsecp256k1 (which included comparison of results with the current consensus-protocol OpenSSL verification) turned up serious consensus-failure bugs in OpenSSL which BIP 66 solved. When review of the new code has fixed de facto problems in the old code, I think it demonstrates a clear higher st",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-167018158,167018158,
sipa,2015-12-24T15:31:38Z,"I disagree with a need for a BIP. None of the consensus rules are intended\nto change.\n\nI do agree that better visibility of the algorithms used is useful.\n\nOne thing that is planned before final release is an explanation of the\ntest procedures and formal verification mechanisms used.\n\nA small summary of the optimizations used in signature verification, and are not used by OpenSSL:\n- A spe",https://github.com/bitcoin/bitcoin/pull/6954#issuecomment-167126321,167126321,
jonasschnelli,2015-11-10T10:16:26Z,nit: it would be nice if we could print a log entry similar to L1005 about the usage of libsecp256k1 for verification (maybe with a version number [in future]). It might be helpful when analyzing a debug.log coming out of self-compiled bitcoin-core versions.\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44389687,44389687,src/init.cpp
laanwj,2015-11-13T16:21:18Z,Users have to hold a ECCVerifyHandle. Maybe we should make them pass it in to make sure of that? :-)\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44800952,44800952,src/pubkey.h
laanwj,2015-11-13T16:23:03Z,Happy to see this code in red.\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44801186,44801186,src/ecwrapper.cpp
laanwj,2015-11-13T16:24:55Z,"Nice to see this has an explicit lifecycle, instead of the OpenSSL global init object\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44801474,44801474,src/init.cpp
laanwj,2015-11-13T16:27:31Z,Does this need synchronization?\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44801790,44801790,src/pubkey.cpp
sipa,2015-11-13T16:33:20Z,"Only the secp256k1_context_randomize (not used in this module) and secp256k1_context_destroy (obviously) functions need exclusive access, so no, as long as all uses happen after the context is guaranteed to be constructed.\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44802579,44802579,src/pubkey.cpp
sipa,2015-11-13T16:34:13Z,"I've considered that, but it would be a mess to pass it down all the way from libconsensus' main function through all validation and script code to pubkey.cpp...\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44802713,44802713,src/pubkey.h
laanwj,2015-11-13T16:37:03Z,Agree\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44803093,44803093,src/pubkey.h
laanwj,2015-11-13T16:39:27Z,"Ok. But verify_refcount is not updated atomically, so multiple threads creating/destroying ECCVerifyHandles at the same time can cause problems. Maybe that's not supposed to happen though.\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44803410,44803410,src/pubkey.cpp
laanwj,2015-11-13T17:10:56Z,"Looks like another ""Hack to initialize sig with a correctly-parsed but invalid signature""? We already did this in the beginning (not that it can hurt to do it again)\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44807335,44807335,src/pubkey.cpp
sipa,2015-11-13T17:14:54Z,"The other call to secp256k1_ecdsa_signature_parse_compact above may have overwritten the result in sig, but still have returned overflow.\n\nNote that this function is (at this point) a literal copy from the src/secp256k1/contrib directory, where it is well-tested. It's however copied as the code in contrib carries no real guarantees of providing the exact same behaviour in the long run, and this ",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44807792,44807792,src/pubkey.cpp
sipa,2015-11-13T17:21:10Z,"That's indeed ugly, but it isn't supposed to happen: all but one instance of ECCVerifyHandle are global (and global initializers are guaranteed to not run in parallel), and the one other is in init.cpp, before any parallel code runs. I've considered putting a lock around it, but it would make libconsensus depend on boost again (until c++11). \n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44808520,44808520,src/pubkey.cpp
sipa,2015-11-13T17:26:17Z,Perhaps that can use a comment to explain that constraint.\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44809104,44809104,src/pubkey.cpp
laanwj,2015-11-13T17:33:06Z,Yes let's just document it\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44809861,44809861,src/pubkey.cpp
laanwj,2015-11-14T06:59:46Z,Ouch. That one is subtle. I'd suggest adding a comment so that other people don't have the same dumb thought as me.\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44855973,44855973,src/pubkey.cpp
jtimon,2015-11-14T12:29:07Z,"Yes, please don't put synchronization in libbitcoinconsensus, at least until we decide for either C++11 or C for the long term language trend for libconsensus. Last time I checked in IRC, it seems I wasn't alone in preferring a libconsensus that eventually is only C over one that is eventually C++11. Although that decision shouldn't affect this PR or even libconsensus' encapsulation completion, I ",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44858054,44858054,src/pubkey.cpp
jtimon,2015-11-15T12:36:13Z,bike-shedding: s/verify_handle/globalVerifyHandle or something of the short to make its scope clearer.\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44871184,44871184,src/init.cpp
jtimon,2015-11-15T12:40:59Z,"@laanwj wrote:\n\n> Users have to hold a ECCVerifyHandle. Maybe we should make them pass it in to make sure of that? :-)\n\nI agree. It may look weird because it doesn't appear to be used.\nBut if secp256k1_context_verify and verify_refcount were static attributes of ECCVerifyHandle, we would see much clearly which functions/methods need to take the ECCVerifyHandle as parameter.\nI suggest doing b",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44871214,44871214,src/pubkey.h
jtimon,2015-11-15T12:57:28Z,"In fact, can't the consensus code that needs it simply take the secp256k1_context_verify explicitly?\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44871361,44871361,src/pubkey.h
sipa,2015-11-15T13:06:44Z,"Yes, if we pass it through main, consensus, script interpreter, and\npubkey... which is possible but annoyingly much code for something that's\njust an immutable blob initialized at startup and usable from all threads.\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44871511,44871511,src/pubkey.h
sipa,2015-11-15T13:19:54Z,"That would be highly inefficient. Not every user needs his own context. The\npurpose of ECCVerifyHandle is to ensure that the single global context\nvariable is always initialized while someone is using it. You can't have a\nrefcount variable per user, you need a single refcount for all users.\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44871668,44871668,src/pubkey.h
sipa,2015-11-15T13:48:40Z,"Oh, static attributes! I missed that... that's possible.\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44871995,44871995,src/pubkey.h
sipa,2015-11-15T14:58:02Z,"Done. Only for the refcount though, as the context variable is needed outside of the class (for obvious reasons).\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44872736,44872736,src/pubkey.h
sipa,2015-11-15T14:58:08Z,Done.\n,https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44872738,44872738,src/init.cpp
jtimon,2015-11-15T18:47:11Z,"Yes, I guess passing secp256k1_context_verify explicitly explicitly would be too disruptive. Could we document somewhere that it would be ideal but we just don't want to do it right now? Maybe an example doing it ""the right way"" (a static getter or something) would be useful too.\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44875740,44875740,src/pubkey.h
sipa,2015-11-15T21:48:59Z,"In C++11 I would just use once initializers which guarantee it's\ninitialized exactly once, atomically, upon first use.\n",https://github.com/bitcoin/bitcoin/pull/6954#discussion_r44878032,44878032,src/pubkey.h
