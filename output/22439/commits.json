[
  {
    "sha": "44fb9c77c05d00b6a5915975dc467289292d45ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NGZiOWM3N2MwNWQwMGI2YTU5MTU5NzVkYzQ2NzI4OTI5MmQ0NWVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-11T17:51:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-28T18:24:59Z"
      },
      "message": "Add gitian descriptors for guix building in gitian",
      "tree": {
        "sha": "846585450bdcd7392a82951ec99793dfd4403c99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/846585450bdcd7392a82951ec99793dfd4403c99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/44fb9c77c05d00b6a5915975dc467289292d45ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44fb9c77c05d00b6a5915975dc467289292d45ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/44fb9c77c05d00b6a5915975dc467289292d45ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44fb9c77c05d00b6a5915975dc467289292d45ef/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df2b5dadfb2dc21b05e5a60b71987fb5b96201f5"
      }
    ],
    "stats": {
      "total": 475,
      "additions": 475,
      "deletions": 0
    },
    "files": [
      {
        "sha": "15dadbfc012f0b4a5b842c16c4acf65b8b32c019",
        "filename": "contrib/gitian-descriptors/gitian-guix-linux-win.yml",
        "status": "added",
        "additions": 113,
        "deletions": 0,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-linux-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-linux-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-guix-linux-win.yml?ref=44fb9c77c05d00b6a5915975dc467289292d45ef",
        "patch": "@@ -0,0 +1,113 @@\n+---\n+name: \"bitcoin-core-guix-linux-win\"\n+enable_cache: true\n+sudo: true\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"ca-certificates\"\n+- \"curl\"\n+- \"gnupg\"\n+- \"netbase\"\n+- \"wget\"\n+remotes:\n+- \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n+  \"dir\": \"bitcoin\"\n+files: []\n+script: |\n+  set -e -o pipefail\n+\n+  export TZ=\"UTC\"\n+  export BUILD_DIR=\"$PWD\"\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n+    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n+    mkdir -p \"${BASE_CACHE}\" \"${SOURCES_PATH}\"\n+    GUIX_CACHE=\"${GBUILD_COMMON_CACHE}/guix\"\n+\n+    GUIX_SCRIPT=\"${GUIX_CACHE}/guix-install.sh\"\n+    if [[ -f \"${GUIX_SCRIPT}\" ]]; then\n+      cp \"${GUIX_SCRIPT}\" \"${BUILD_DIR}\"\n+    fi\n+    GUIX_TARBALL=\"${GUIX_CACHE}/guix-install-tarball-x86_64-linux.tar.gz\"\n+    if [[ -f \"${GUIX_TARBALL}\" ]]; then\n+      export GUIX_BINARY_FILE_NAME=${GUIX_TARBALL}\n+    fi\n+    GUIX_CACHE_TARBALL=\"${GUIX_CACHE}/cache-guix.tar.gz\"\n+    if [[ -f \"${GUIX_CACHE_TARBALL}\" ]]; then\n+      mkdir -p ~/.cache/guix\n+      tar -xf \"${GUIX_CACHE_TARBALL}\" -C ~/.cache/guix/\n+    fi\n+  fi\n+  export JOBS=${NUM_PROCS}\n+\n+  # Install guix with the installer script\n+  if [[ ! -f \"guix-install.sh\" ]]; then\n+    wget -nc -O \"guix-install.sh\" \"https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh?h=version-1.3.0&id=aa34d4d28dfe25ba47d5800d05000fb7221788c0\"\n+  fi\n+  echo \"bcdeaa757cd42d2c9de4791272737e9ee0d518398403955f113611f4a893380a  guix-install.sh\" | sha256sum -c -\n+  # Remove /tmp cleanup from guix-install.sh\n+  # shellcheck disable=SC2016\n+  sed 's/rm -r \"${tmp_path}\"//g' guix-install.sh > our-guix-install.sh\n+  chmod +x our-guix-install.sh\n+  # We don't want SIGPIPE from running `yes`, so temporarily remove pipefail\n+  set +o pipefail\n+  yes | sudo -E ./our-guix-install.sh\n+  set -o pipefail\n+  if [[ -z \"${GUIX_BINARY_FILE_NAME}\" ]]; then\n+    cp guix-install.sh \"${GUIX_SCRIPT}\"\n+    GUIX_ORIG_TARBALL=$(sudo find /tmp -name \"guix-binary-*.x86_64-linux.tar.xz\")\n+    sudo mv \"${GUIX_ORIG_TARBALL}\" \"${GUIX_TARBALL}\"\n+  fi\n+\n+  # Check guix-daemon is running\n+  if ! guix gc --list-failures > /dev/null; then\n+    # Not running, try starting it\n+    # Not all virtualization methods have systemd available, so start guix-daemon manually\n+    sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"&\n+  fi\n+\n+  # Import guix cache\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    mkdir -p \"${GUIX_CACHE}\"\n+    KEYFILE=\"${GUIX_CACHE}/signing-key.pub\"\n+    STORE_FILE=\"${GUIX_CACHE}/guix_store.nar\"\n+    if [[ -f \"$KEYFILE\" && -f \"$STORE_FILE\" ]]; then\n+      # shellcheck disable=SC2024\n+      sudo -i guix archive --authorize < \"${KEYFILE}\"\n+      guix archive --import < \"${STORE_FILE}\"\n+    fi\n+  fi\n+\n+  # Prep for build\n+  cd bitcoin\n+\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  # shellcheck disable=SC2034\n+  source contrib/gitian-descriptors/assign_DISTNAME\n+\n+  # Do the build\n+  export HOSTS=\"x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu x86_64-w64-mingw32\"\n+  ./contrib/guix/guix-build\n+\n+  # Move all of the guix output to our output dir\n+  mv \"guix-build-${VERSION}/output/\"* \"${OUTDIR}\"\n+\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    cd \"${BUILD_DIR}\"\n+\n+    # Find all of the items in the guix store and export them to the cache\n+    STORE_FILES=$(find /gnu/store -maxdepth 1 -mindepth 1 -type d -not -name \".links\" | sort)\n+    sudo -i guix archive --generate-key\n+    sudo cp /etc/guix/signing-key.pub \"${KEYFILE}\"\n+    guix archive --export --recursive $STORE_FILES > \"${STORE_FILE}\"\n+\n+    # Cache guix cache\n+    pushd ~/.cache/guix\n+    tar -czf \"${GUIX_CACHE_TARBALL}\" ./*\n+    popd\n+  fi"
      },
      {
        "sha": "2dceb325f8def803a4ba58ccb8524525db9e6114",
        "filename": "contrib/gitian-descriptors/gitian-guix-mac-signer.yml",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-mac-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-mac-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-guix-mac-signer.yml?ref=44fb9c77c05d00b6a5915975dc467289292d45ef",
        "patch": "@@ -0,0 +1,122 @@\n+---\n+name: \"bitcoin-core-guix-mac-signer\"\n+enable_cache: true\n+sudo: true\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"ca-certificates\"\n+- \"curl\"\n+- \"gnupg\"\n+- \"netbase\"\n+- \"wget\"\n+remotes:\n+- \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n+  \"dir\": \"bitcoin\"\n+- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n+  \"dir\": \"signature\"\n+files:\n+- \"bitcoin-osx-unsigned.tar.gz\"\n+script: |\n+  set -e -o pipefail\n+\n+  export TZ=\"UTC\"\n+  export BUILD_DIR=\"$PWD\"\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n+    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n+    mkdir -p \"${BASE_CACHE}\" \"${SOURCES_PATH}\"\n+    GUIX_CACHE=\"${GBUILD_COMMON_CACHE}/guix\"\n+\n+    GUIX_SCRIPT=\"${GUIX_CACHE}/guix-install.sh\"\n+    if [[ -f \"${GUIX_SCRIPT}\" ]]; then\n+      cp \"${GUIX_SCRIPT}\" \"${BUILD_DIR}\"\n+    fi\n+    GUIX_TARBALL=\"${GUIX_CACHE}/guix-install-tarball-x86_64-linux.tar.gz\"\n+    if [[ -f \"${GUIX_TARBALL}\" ]]; then\n+      export GUIX_BINARY_FILE_NAME=${GUIX_TARBALL}\n+    fi\n+    GUIX_CACHE_TARBALL=\"${GUIX_CACHE}/cache-guix.tar.gz\"\n+    if [[ -f \"${GUIX_CACHE_TARBALL}\" ]]; then\n+      mkdir -p ~/.cache/guix\n+      tar -xf \"${GUIX_CACHE_TARBALL}\" -C ~/.cache/guix/\n+    fi\n+  fi\n+  export JOBS=${NUM_PROCS}\n+\n+  # Install guix with the installer script\n+  if [[ ! -f \"guix-install.sh\" ]]; then\n+    wget -nc -O \"guix-install.sh\" \"https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh?h=version-1.3.0&id=aa34d4d28dfe25ba47d5800d05000fb7221788c0\"\n+  fi\n+  echo \"bcdeaa757cd42d2c9de4791272737e9ee0d518398403955f113611f4a893380a  guix-install.sh\" | sha256sum -c -\n+  # Remove /tmp cleanup from guix-install.sh\n+  # shellcheck disable=SC2016\n+  sed 's/rm -r \"${tmp_path}\"//g' guix-install.sh > our-guix-install.sh\n+  chmod +x our-guix-install.sh\n+  # We don't want SIGPIPE from running `yes`, so temporarily remove pipefail\n+  set +o pipefail\n+  yes | sudo -E ./our-guix-install.sh\n+  set -o pipefail\n+  if [[ -z \"${GUIX_BINARY_FILE_NAME}\" ]]; then\n+    cp guix-install.sh \"${GUIX_SCRIPT}\"\n+    GUIX_ORIG_TARBALL=$(sudo find /tmp -name \"guix-binary-*.x86_64-linux.tar.xz\")\n+    sudo mv \"${GUIX_ORIG_TARBALL}\" \"${GUIX_TARBALL}\"\n+  fi\n+\n+  # Check guix-daemon is running\n+  if ! guix gc --list-failures > /dev/null; then\n+    # Not running, try starting it\n+    # Not all virtualization methods have systemd available, so start guix-daemon manually\n+    sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"&\n+  fi\n+\n+  # Import guix cache\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    mkdir -p \"${GUIX_CACHE}\"\n+    KEYFILE=\"${GUIX_CACHE}/signing-key.pub\"\n+    STORE_FILE=\"${GUIX_CACHE}/guix_store.nar\"\n+    if [[ -f \"$KEYFILE\" && -f \"$STORE_FILE\" ]]; then\n+      # shellcheck disable=SC2024\n+      sudo -i guix archive --authorize < \"${KEYFILE}\"\n+      guix archive --import < \"${STORE_FILE}\"\n+    fi\n+  fi\n+\n+  # Prep for build\n+  cd bitcoin\n+  export HOSTS=\"x86_64-apple-darwin18\"\n+\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  # shellcheck disable=SC2034\n+  source contrib/gitian-descriptors/assign_DISTNAME\n+\n+  # Prepare the unsigned tarball for codesigning\n+  mkdir -p \"guix-build-${VERSION}/output/${HOSTS}\"\n+  mkdir -p \"guix-build-${VERSION}/var/profiles\"\n+  mv \"${BUILD_DIR}/bitcoin-osx-unsigned.tar.gz\" \"guix-build-${VERSION}/output/${HOSTS}/bitcoin-${VERSION}-osx-unsigned.tar.gz\"\n+\n+  # Do the build\n+  export DETACHED_SIGS_REPO=\"${BUILD_DIR}/signature\"\n+  ./contrib/guix/guix-codesign\n+\n+  # Move all of the guix output to our output dir\n+  mv \"guix-build-${VERSION}/output/${HOSTS}-codesigned\" \"${OUTDIR}\"\n+\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    cd \"${BUILD_DIR}\"\n+\n+    # Find all of the items in the guix store and export them to the cache\n+    STORE_FILES=$(find /gnu/store -maxdepth 1 -mindepth 1 -type d -not -name \".links\" | sort)\n+    sudo -i guix archive --generate-key\n+    sudo cp /etc/guix/signing-key.pub \"${KEYFILE}\"\n+    guix archive --export --recursive $STORE_FILES > \"${STORE_FILE}\"\n+\n+    # Cache guix cache\n+    pushd ~/.cache/guix\n+    tar -czf \"${GUIX_CACHE_TARBALL}\" ./*\n+    popd\n+  fi"
      },
      {
        "sha": "86147ffe440efdfac1aa434e46a1ac490f1d0baf",
        "filename": "contrib/gitian-descriptors/gitian-guix-mac.yml",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-mac.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-mac.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-guix-mac.yml?ref=44fb9c77c05d00b6a5915975dc467289292d45ef",
        "patch": "@@ -0,0 +1,118 @@\n+---\n+name: \"bitcoin-core-guix-mac\"\n+enable_cache: true\n+sudo: true\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"ca-certificates\"\n+- \"curl\"\n+- \"gnupg\"\n+- \"netbase\"\n+- \"wget\"\n+remotes:\n+- \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n+  \"dir\": \"bitcoin\"\n+files:\n+- \"Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz\"\n+script: |\n+  set -e -o pipefail\n+\n+  export TZ=\"UTC\"\n+  export BUILD_DIR=\"$PWD\"\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n+    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n+    mkdir -p \"${BASE_CACHE}\" \"${SOURCES_PATH}\"\n+    GUIX_CACHE=\"${GBUILD_COMMON_CACHE}/guix\"\n+\n+    GUIX_SCRIPT=${GUIX_CACHE}/guix-install.sh\n+    if [[ -f \"${GUIX_SCRIPT}\" ]]; then\n+      cp \"${GUIX_SCRIPT}\" \"${BUILD_DIR}\"\n+    fi\n+    GUIX_TARBALL=\"${GUIX_CACHE}/guix-install-tarball-x86_64-linux.tar.gz\"\n+    if [[ -f \"${GUIX_TARBALL}\" ]]; then\n+      export GUIX_BINARY_FILE_NAME=${GUIX_TARBALL}\n+    fi\n+    GUIX_CACHE_TARBALL=\"${GUIX_CACHE}/cache-guix.tar.gz\"\n+    if [[ -f \"${GUIX_CACHE_TARBALL}\" ]]; then\n+      mkdir -p ~/.cache/guix\n+      tar -xf \"${GUIX_CACHE_TARBALL}\" -C ~/.cache/guix/\n+    fi\n+  fi\n+  export JOBS=${NUM_PROCS}\n+\n+  # Install guix with the installer script\n+  if [[ ! -f \"guix-install.sh\" ]]; then\n+    wget -nc -O \"guix-install.sh\" \"https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh?h=version-1.3.0&id=aa34d4d28dfe25ba47d5800d05000fb7221788c0\"\n+  fi\n+  echo \"bcdeaa757cd42d2c9de4791272737e9ee0d518398403955f113611f4a893380a  guix-install.sh\" | sha256sum -c -\n+  # Remove /tmp cleanup from guix-install.sh\n+  # shellcheck disable=SC2016\n+  sed 's/rm -r \"${tmp_path}\"//g' guix-install.sh > our-guix-install.sh\n+  chmod +x our-guix-install.sh\n+  # We don't want SIGPIPE from running `yes`, so temporarily remove pipefail\n+  set +o pipefail\n+  yes | sudo -E ./our-guix-install.sh\n+  set -o pipefail\n+  if [[ -z \"${GUIX_BINARY_FILE_NAME}\" ]]; then\n+    cp guix-install.sh \"${GUIX_SCRIPT}\"\n+    GUIX_ORIG_TARBALL=$(sudo find /tmp -name \"guix-binary-*.x86_64-linux.tar.xz\")\n+    sudo mv \"${GUIX_ORIG_TARBALL}\" \"${GUIX_TARBALL}\"\n+  fi\n+\n+  # Check guix-daemon is running\n+  if ! guix gc --list-failures > /dev/null; then\n+    # Not running, try starting it\n+    # Not all virtualization methods have systemd available, so start guix-daemon manually\n+    sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"&\n+  fi\n+\n+  # Import guix cache\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    mkdir -p \"${GUIX_CACHE}\"\n+    KEYFILE=\"${GUIX_CACHE}/signing-key.pub\"\n+    STORE_FILE=\"${GUIX_CACHE}/guix_store.nar\"\n+    if [[ -f \"$KEYFILE\" && -f \"$STORE_FILE\" ]]; then\n+      # shellcheck disable=SC2024\n+      sudo -i guix archive --authorize < \"${KEYFILE}\"\n+      guix archive --import < \"${STORE_FILE}\"\n+    fi\n+  fi\n+\n+  # Prep for build\n+  cd bitcoin\n+  BASEPREFIX=\"${PWD}/depends\"\n+\n+  mkdir -p \"${BASEPREFIX}/SDKs\"\n+  tar -C \"${BASEPREFIX}/SDKs\" -xf \"${BUILD_DIR}/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz\"\n+  export HOSTS=\"x86_64-apple-darwin18\"\n+\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  # shellcheck disable=SC2034\n+  source contrib/gitian-descriptors/assign_DISTNAME\n+\n+  # Do the build\n+  ./contrib/guix/guix-build\n+\n+  # Move all of the guix output to our output dir\n+  mv \"guix-build-${VERSION}/output/${HOSTS}\" \"${OUTDIR}\"\n+\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    cd \"${BUILD_DIR}\"\n+\n+    # Find all of the items in the guix store and export them to the cache\n+    STORE_FILES=$(find /gnu/store -maxdepth 1 -mindepth 1 -type d -not -name \".links\" | sort)\n+    sudo -i guix archive --generate-key\n+    sudo cp /etc/guix/signing-key.pub \"${KEYFILE}\"\n+    guix archive --export --recursive $STORE_FILES > \"${STORE_FILE}\"\n+\n+    # Cache guix cache\n+    pushd ~/.cache/guix\n+    tar -czf \"${GUIX_CACHE_TARBALL}\" ./*\n+    popd\n+  fi"
      },
      {
        "sha": "3b8dd629966b2d11c2c45d200b543a9393cc0dd6",
        "filename": "contrib/gitian-descriptors/gitian-guix-win-signer.yml",
        "status": "added",
        "additions": 122,
        "deletions": 0,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/44fb9c77c05d00b6a5915975dc467289292d45ef/contrib/gitian-descriptors/gitian-guix-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-guix-win-signer.yml?ref=44fb9c77c05d00b6a5915975dc467289292d45ef",
        "patch": "@@ -0,0 +1,122 @@\n+---\n+name: \"bitcoin-core-guix-win-signer\"\n+enable_cache: true\n+sudo: true\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"ca-certificates\"\n+- \"curl\"\n+- \"gnupg\"\n+- \"netbase\"\n+- \"wget\"\n+remotes:\n+- \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n+  \"dir\": \"bitcoin\"\n+- \"url\": \"https://github.com/bitcoin-core/bitcoin-detached-sigs.git\"\n+  \"dir\": \"signature\"\n+files:\n+- \"bitcoin-win-unsigned.tar.gz\"\n+script: |\n+  set -e -o pipefail\n+\n+  export TZ=\"UTC\"\n+  export BUILD_DIR=\"$PWD\"\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n+    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n+    mkdir -p \"${BASE_CACHE}\" \"${SOURCES_PATH}\"\n+    GUIX_CACHE=\"${GBUILD_COMMON_CACHE}/guix\"\n+\n+    GUIX_SCRIPT=\"${GUIX_CACHE}/guix-install.sh\"\n+    if [[ -f \"${GUIX_SCRIPT}\" ]]; then\n+      cp \"${GUIX_SCRIPT}\" \"${BUILD_DIR}\"\n+    fi\n+    GUIX_TARBALL=\"${GUIX_CACHE}/guix-install-tarball-x86_64-linux.tar.gz\"\n+    if [[ -f \"${GUIX_TARBALL}\" ]]; then\n+      export GUIX_BINARY_FILE_NAME=${GUIX_TARBALL}\n+    fi\n+    GUIX_CACHE_TARBALL=\"${GUIX_CACHE}/cache-guix.tar.gz\"\n+    if [[ -f \"${GUIX_CACHE_TARBALL}\" ]]; then\n+      mkdir -p ~/.cache/guix\n+      tar -xf \"${GUIX_CACHE_TARBALL}\" -C ~/.cache/guix/\n+    fi\n+  fi\n+  export JOBS=${NUM_PROCS}\n+\n+  # Install guix with the installer script\n+  if [[ ! -f \"guix-install.sh\" ]]; then\n+    wget -nc -O \"guix-install.sh\" \"https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh?h=version-1.3.0&id=aa34d4d28dfe25ba47d5800d05000fb7221788c0\"\n+  fi\n+  echo \"bcdeaa757cd42d2c9de4791272737e9ee0d518398403955f113611f4a893380a  guix-install.sh\" | sha256sum -c -\n+  # Remove /tmp cleanup from guix-install.sh\n+  # shellcheck disable=SC2016\n+  sed 's/rm -r \"${tmp_path}\"//g' guix-install.sh > our-guix-install.sh\n+  chmod +x our-guix-install.sh\n+  # We don't want SIGPIPE from running `yes`, so temporarily remove pipefail\n+  set +o pipefail\n+  yes | sudo -E ./our-guix-install.sh\n+  set -o pipefail\n+  if [[ -z \"${GUIX_BINARY_FILE_NAME}\" ]]; then\n+    cp guix-install.sh \"${GUIX_SCRIPT}\"\n+    GUIX_ORIG_TARBALL=$(sudo find /tmp -name \"guix-binary-*.x86_64-linux.tar.xz\")\n+    sudo mv \"${GUIX_ORIG_TARBALL}\" \"${GUIX_TARBALL}\"\n+  fi\n+\n+  # Check guix-daemon is running\n+  if ! guix gc --list-failures > /dev/null; then\n+    # Not running, try starting it\n+    # Not all virtualization methods have systemd available, so start guix-daemon manually\n+    sudo /var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"&\n+  fi\n+\n+  # Import guix cache\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    mkdir -p \"${GUIX_CACHE}\"\n+    KEYFILE=\"${GUIX_CACHE}/signing-key.pub\"\n+    STORE_FILE=\"${GUIX_CACHE}/guix_store.nar\"\n+    if [[ -f \"$KEYFILE\" && -f \"$STORE_FILE\" ]]; then\n+      # shellcheck disable=SC2024\n+      sudo guix archive --authorize < \"${KEYFILE}\"\n+      guix archive --import < \"${STORE_FILE}\"\n+    fi\n+  fi\n+\n+  # Prep for build\n+  cd bitcoin\n+  export HOSTS=\"x86_64-w64-mingw32\"\n+\n+  # Define DISTNAME variable.\n+  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME\n+  # shellcheck disable=SC2034\n+  source contrib/gitian-descriptors/assign_DISTNAME\n+\n+  # Prepare the unsigned tarball for codesigning\n+  mkdir -p \"guix-build-${VERSION}/output/${HOSTS}\"\n+  mkdir -p \"guix-build-${VERSION}/var/profiles\"\n+  mv \"${BUILD_DIR}/bitcoin-win-unsigned.tar.gz\" \"guix-build-${VERSION}/output/${HOSTS}/bitcoin-${VERSION}-win-unsigned.tar.gz\"\n+\n+  # Do the build\n+  export DETACHED_SIGS_REPO=\"${BUILD_DIR}/signature\"\n+  ./contrib/guix/guix-codesign\n+\n+  # Move all of the guix output to our output dir\n+  mv \"guix-build-${VERSION}/output/${HOSTS}-codesigned\" \"${OUTDIR}\"\n+\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    cd \"${BUILD_DIR}\"\n+\n+    # Find all of the items in the guix store and export them to the cache\n+    STORE_FILES=$(find /gnu/store -maxdepth 1 -mindepth 1 -type d -not -name \".links\" | sort)\n+    sudo -i guix archive --generate-key\n+    sudo cp /etc/guix/signing-key.pub \"${KEYFILE}\"\n+    guix archive --export --recursive $STORE_FILES > \"${STORE_FILE}\"\n+\n+    # Cache guix cache\n+    pushd ~/.cache/guix\n+    tar -czf \"${GUIX_CACHE_TARBALL}\" ./*\n+    popd\n+  fi"
      }
    ]
  },
  {
    "sha": "ebda04637488ea33bedccfd2f9b67ee8b17eff9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmRhMDQ2Mzc0ODhlYTMzYmVkY2NmZDJmOWI2N2VlOGIxN2VmZjlm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-12T01:45:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-07-28T18:24:59Z"
      },
      "message": "Add instructions for gitian in guix",
      "tree": {
        "sha": "52e6130580a76431c7b82afa0a6c480e9dd54475",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52e6130580a76431c7b82afa0a6c480e9dd54475"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebda04637488ea33bedccfd2f9b67ee8b17eff9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebda04637488ea33bedccfd2f9b67ee8b17eff9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebda04637488ea33bedccfd2f9b67ee8b17eff9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebda04637488ea33bedccfd2f9b67ee8b17eff9f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "44fb9c77c05d00b6a5915975dc467289292d45ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/44fb9c77c05d00b6a5915975dc467289292d45ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/44fb9c77c05d00b6a5915975dc467289292d45ef"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 80,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2fc5d48e5d645bf6bef77b29542b98d72f632eeb",
        "filename": "contrib/gitian-descriptors/README.md",
        "status": "added",
        "additions": 80,
        "deletions": 0,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebda04637488ea33bedccfd2f9b67ee8b17eff9f/contrib/gitian-descriptors/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebda04637488ea33bedccfd2f9b67ee8b17eff9f/contrib/gitian-descriptors/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/README.md?ref=ebda04637488ea33bedccfd2f9b67ee8b17eff9f",
        "patch": "@@ -0,0 +1,80 @@\n+# Gitian\n+\n+Prior to Bitcoin Core 22.0, gitian was the build system used to create reproducible builds.\n+Guix has been used since 22.0.\n+In order to ease the transition to guix, the gitian descriptors have been replaced with ones which setup and run guix inside of the gitian virtual machines.\n+This is not the recommended method for making Bitcoin Core release builds; new builders should setup and use guix directly.\n+\n+## Security Model\n+\n+Guix allows users to select their own security model, but these gitian descriptors do not give builders that option.\n+The security model implemented is the most trusting one - the guix installation script is used (which uses the prebuilt binaries) and packages are installed from the substitute servers when available.\n+Note that this security model is largely the same as the previous gitian builds as required packages are downloaded from third parties.\n+If this security model is insufficient, then we recommend that you install and use guix directly rather than these gitian descriptors.\n+\n+## Usage\n+\n+As these gitian descriptors are intended for existing gitian builders, we assume that the necessary repos have already been cloned at that builders are already familiar with the setup and build process.\n+However because the actual build system used is guix, the process is slightly different.\n+\n+### Virtualization Notes\n+\n+Guix uses some kernel features which are not always available with all of the virtualization methods supported by gitian.\n+These have been tested only with the Docker and KVM virtualization methods.\n+No changes are necessary to work with KVM.\n+For builders using Docker, [gitian-builder#251](https://github.com/devrandom/gitian-builder/pull/251) is required and the `GITIAN_ALLOW_PRIVILEGED=1` must be set:\n+```\n+export GITIAN_ALLOW_PRIVILEGED=1\n+```\n+\n+### Prepare gitian-builder\n+\n+1. Checkout [`guix.sigs`](https://github.com/bitcoin-core/guix.sigs)\n+2. Checkout [`gitian-builder`](https://github.com/devrandom/gitian-builder) and make sure it contains commit `9e97a4d5038cd61215f5243a37c06fa1734a276e`.\n+3. Install all of the prerequisites as per gitian's instructions.\n+4. Create a Ubuntu 18.04 base vm with `bin/make-base-vm --suite bionic --arch amd64` (include virtualization arguments as needed)\n+\n+### Build\n+\n+A build can be performed with (from the gitian-builder root):\n+\n+```\n+bin/gbuild --commit bitcoin=<version> --allow-sudo ../bitcoin/guix-in-gitian/contrib/gitian-descriptors/gitian-guix-linux-win.yml\n+bin/gbuild --commit bitcoin=<version> --allow-sudo ../bitcoin/guix-in-gitian/contrib/gitian-descriptors/gitian-guix-mac.yml\n+```\n+\n+Note that this comamnd includes `--allow-sudo`.\n+This is required in order for guix to work inside of the container.\n+\n+### Attesting (signing)\n+\n+With gitian, the binaries would be commited to (signed) using `gsign`.\n+However this is no longer necessary with guix.\n+The `guix-attest` script is used for making and signing the sha256 hashes of the build results.\n+This script does not require guix, and should be run on the build host.\n+\n+1. Copy the build results to a safe location. This is necessary as these binaries are needed for attestation after codesigning and gitian will delete them if they remain in gitian's output directory (from the gitian-builder root):\n+```\n+mv build/out/* ../bitcoin-binaries/<version>/\n+```\n+2. Make the attestation (from bitcoin repo root):\n+```\n+env GUIX_SIGS_REPO=<path/to/sigs/repo> SIGNER=<name> OUTDIR_BASE=../bitcoin-binaries/<version> contrib/guix/guix-attest\n+```\n+\n+### Codesign\n+\n+Once detached code signatures have been pushed to the `bitcoin-detached-sigs` repo, the code signature can be attached.\n+\n+1. Copy unsigned tarballs to gitian builder inputs (from the gitian-builder root):\n+```\n+cp build/out/x86_64-w64-mingw32/bitcoin-<version>-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n+cp build/out/x86_64-apple-darwin18/bitcoin-<version>-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+```\n+2. Run the code signature builds (from the gitian-builder root):\n+```\n+bin/gbuild --commit bitcoin=<version>,signature=<version> --allow-sudo ../bitcoin/guix-in-gitian/contrib/gitian-descriptors/gitian-guix-win-signer.yml\n+bin/gbuild --commit bitcoin=<version>,signature=<version> --allow-sudo ../bitcoin/guix-in-gitian/contrib/gitian-descriptors/gitian-guix-mac-signer.yml\n+```\n+3. Copy the results to the same safe location as done previously.\n+4. Attest the results as done previously."
      }
    ]
  }
]