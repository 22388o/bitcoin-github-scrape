[
  {
    "sha": "224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjRlNmViMDg5YTBmNDk3N2QyMmYzODAzZmMyN2U0NGI1ZTdlZWE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T16:36:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-21T19:57:34Z"
      },
      "message": "util: Specific GetOSRandom for Linux/FreeBSD/OpenBSD\n\nThese are available in sandboxes without access to files or\ndevices. Also [they are safer and more straightforward](https://en.wikipedia.org/wiki/Entropy-supplying_system_calls)\nto use than `/dev/urandom` as reading from a file has quite a few edge\ncases:\n\n- Linux: `getrandom(buf, buflen, 0)`. [getrandom(2)](http://man7.org/linux/man-pages/man2/getrandom.2.html)\n  was introduced in version 3.17 of the Linux kernel.\n- OpenBSD: `getentropy(buf, buflen)`. The [getentropy(2)](http://man.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man2/getentropy.2)\n  function appeared in OpenBSD 5.6.\n- FreeBSD and NetBSD: `sysctl(KERN_ARND)`. Not sure when this was added\n  but it has existed for quite a while.\n\nAlternatives:\n\n- Linux has sysctl `CTL_KERN` / `KERN_RANDOM` / `RANDOM_UUID`\n  which gives 16 bytes of randomness. This may be available\n  on older kernels, however [sysctl is deprecated on Linux](https://lwn.net/Articles/605392/)\n  and even removed in some distros so we shouldn't use it.\n\nAdd tests for `GetOSRand()`:\n\n- Test that no error happens (otherwise `RandFailure()` which aborts)\n- Test that all 32 bytes are overwritten (initialize with zeros, try multiple times)\n\nDiscussion:\n\n- When to use these? Currently they are always used when available.\n  Another option would be to use them only when `/dev/urandom` is not\n  available. But this would mean these code paths receive less testing,\n  and I'm not sure there is any reason to prefer `/dev/urandom`.\n\nCloses: #9676",
      "tree": {
        "sha": "4bbac190c5858510347bc40f825d514a594c1d35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bbac190c5858510347bc40f825d514a594c1d35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f0556d0326bf6f4d34f7e8b9ada7bbb09cb1df2"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 132,
      "deletions": 6
    },
    "files": [
      {
        "sha": "e454c15f04dc93212869b2d8be5900d422962418",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
        "patch": "@@ -558,6 +558,33 @@ AC_LINK_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n+# Check for different ways of gathering OS randomness\n+AC_MSG_CHECKING(for Linux getrandom syscall)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n+  #include <sys/syscall.h>\n+  #include <linux/random.h>]],\n+ [[ syscall(SYS_getrandom, nullptr, 32, 0); ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYS_GETRANDOM, 1,[Define this symbol if the Linux getrandom system call is available]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+AC_MSG_CHECKING(for getentropy)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n+ [[ getentropy(nullptr, 32) ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_GETENTROPY, 1,[Define this symbol if the BSD getentropy system call is available]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+AC_MSG_CHECKING(for sysctl KERN_ARND)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n+  #include <sys/sysctl.h>]],\n+ [[ static const int name[2] = {CTL_KERN, KERN_ARND};\n+    sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL_ARND, 1,[Define this symbol if the BSD sysctl(KERN_ARND) is available]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n+# Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n   AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n   [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])"
      },
      {
        "sha": "55a587cf87dc9e7d6d7ee2586b8cbb84b80cdbdd",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
        "patch": "@@ -110,6 +110,7 @@ BITCOIN_TESTS =\\\n   test/policyestimator_tests.cpp \\\n   test/pow_tests.cpp \\\n   test/prevector_tests.cpp \\\n+  test/random_tests.cpp \\\n   test/raii_event_tests.cpp \\\n   test/reverselock_tests.cpp \\\n   test/rpc_tests.cpp \\"
      },
      {
        "sha": "5774e9a3c21f3a8b11ea6d6de1e4a5b46ec105ea",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 6,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
        "patch": "@@ -21,6 +21,17 @@\n #include <sys/time.h>\n #endif\n \n+#ifdef HAVE_SYS_GETRANDOM\n+#include <sys/syscall.h>\n+#include <linux/random.h>\n+#endif\n+#ifdef HAVE_GETENTROPY\n+#include <unistd.h>\n+#endif\n+#ifdef HAVE_SYSCTL_ARND\n+#include <sys/sysctl.h>\n+#endif\n+\n #include <openssl/err.h>\n #include <openssl/rand.h>\n \n@@ -92,32 +103,65 @@ static void RandAddSeedPerfmon()\n }\n \n /** Get 32 bytes of system entropy. */\n-static void GetOSRand(unsigned char *ent32)\n+void GetOSRand(unsigned char *ent32)\n {\n-#ifdef WIN32\n+#if defined(WIN32)\n     HCRYPTPROV hProvider;\n     int ret = CryptAcquireContextW(&hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);\n     if (!ret) {\n         RandFailure();\n     }\n-    ret = CryptGenRandom(hProvider, 32, ent32);\n+    ret = CryptGenRandom(hProvider, NUM_OS_RANDOM_BYTES, ent32);\n     if (!ret) {\n         RandFailure();\n     }\n     CryptReleaseContext(hProvider, 0);\n+#elif defined(HAVE_SYS_GETRANDOM)\n+    /* Linux. From the getrandom(2) man page:\n+     * \"If the urandom source has been initialized, reads of up to 256 bytes\n+     * will always return as many bytes as requested and will not be\n+     * interrupted by signals.\"\n+     */\n+    if (syscall(SYS_getrandom, ent32, NUM_OS_RANDOM_BYTES, 0) != NUM_OS_RANDOM_BYTES) {\n+        RandFailure();\n+    }\n+#elif defined(HAVE_GETENTROPY)\n+    /* On OpenBSD this can return up to 256 bytes of entropy, will return an\n+     * error if more are requested.\n+     * The call cannot return less than the requested number of bytes.\n+     */\n+    if (getentropy(ent32, NUM_OS_RANDOM_BYTES) != 0) {\n+        RandFailure();\n+    }\n+#elif defined(HAVE_SYSCTL_ARND)\n+    /* FreeBSD and similar. It is possible for the call to return less\n+     * bytes than requested, so need to read in a loop.\n+     */\n+    static const int name[2] = {CTL_KERN, KERN_ARND};\n+    int have = 0;\n+    do {\n+        size_t len = NUM_OS_RANDOM_BYTES - have;\n+        if (sysctl(name, ARRAYLEN(name), ent32 + have, &len, NULL, 0) != 0) {\n+            RandFailure();\n+        }\n+        have += len;\n+    } while (have < NUM_OS_RANDOM_BYTES);\n #else\n+    /* Fall back to /dev/urandom if there is no specific method implemented to\n+     * get system entropy for this OS.\n+     */\n     int f = open(\"/dev/urandom\", O_RDONLY);\n     if (f == -1) {\n         RandFailure();\n     }\n     int have = 0;\n     do {\n-        ssize_t n = read(f, ent32 + have, 32 - have);\n-        if (n <= 0 || n + have > 32) {\n+        ssize_t n = read(f, ent32 + have, NUM_OS_RANDOM_BYTES - have);\n+        if (n <= 0 || n + have > NUM_OS_RANDOM_BYTES) {\n             RandFailure();\n         }\n         have += n;\n-    } while (have < 32);\n+    } while (have < NUM_OS_RANDOM_BYTES);\n     close(f);\n #endif\n }"
      },
      {
        "sha": "0e8bb27176e4b38f0b033eaa06932b3b6064c224",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
        "patch": "@@ -46,4 +46,12 @@ class FastRandomContext {\n     uint32_t Rw;\n };\n \n+/* Number of random bytes returned by GetOSRand */\n+static const ssize_t NUM_OS_RANDOM_BYTES = 32;\n+\n+/** Get 32 bytes of system entropy. Do not use this in application code: use\n+ * GetStrongRandBytes instead.\n+ */\n+void GetOSRand(unsigned char *ent32);\n+\n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "4f67415c7c583dcdcace9de3da284f4bc86600de",
        "filename": "src/test/random_tests.cpp",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/224e6eb089a0f4977d22f3803fc27e44b5e7eea5/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
        "patch": "@@ -0,0 +1,46 @@\n+// Copyright (c) 2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"random.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(random_tests, BasicTestingSetup)\n+\n+static const ssize_t MAX_TRIES = 1024;\n+\n+BOOST_AUTO_TEST_CASE(osrandom_tests)\n+{\n+    /* This does not measure the quality of randomness, but it does test that\n+     * OSRandom() overwrites all 32 bytes of the output given a maximum\n+     * number of tries.\n+     */\n+    uint8_t data[NUM_OS_RANDOM_BYTES];\n+    bool overwritten[NUM_OS_RANDOM_BYTES] = {}; /* Tracks which bytes have been overwritten at least once */\n+    int num_overwritten;\n+    int tries = 0;\n+    /* Loop until all bytes have been overwritten at least once */\n+    do {\n+        memset(data, 0, NUM_OS_RANDOM_BYTES);\n+        GetOSRand(data);\n+        for (int x=0; x < NUM_OS_RANDOM_BYTES; ++x) {\n+            overwritten[x] |= (data[x] != 0);\n+        }\n+\n+        num_overwritten = 0;\n+        for (int x=0; x < NUM_OS_RANDOM_BYTES; ++x) {\n+            if (overwritten[x]) {\n+                num_overwritten += 1;\n+            }\n+        }\n+\n+        tries += 1;\n+    } while (num_overwritten < NUM_OS_RANDOM_BYTES && tries < MAX_TRIES);\n+    BOOST_CHECK(num_overwritten == NUM_OS_RANDOM_BYTES); /* If this failed, bailed out after too many tries */\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()\n+"
      }
    ]
  },
  {
    "sha": "aa09ccbb74ea9febd83ce3362238ac5339069909",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTA5Y2NiYjc0ZWE5ZmViZDgzY2UzMzYyMjM4YWM1MzM5MDY5OTA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T06:38:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T06:38:42Z"
      },
      "message": "squashme: comment that NUM_OS_RANDOM_BYTES should not be changed lightly",
      "tree": {
        "sha": "4a8ea8517910e15a3a89d12dce57e1663eb190d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a8ea8517910e15a3a89d12dce57e1663eb190d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa09ccbb74ea9febd83ce3362238ac5339069909",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa09ccbb74ea9febd83ce3362238ac5339069909",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa09ccbb74ea9febd83ce3362238ac5339069909",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa09ccbb74ea9febd83ce3362238ac5339069909/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/224e6eb089a0f4977d22f3803fc27e44b5e7eea5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "29de5873125107fa232fdb60fecf819181c75e02",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa09ccbb74ea9febd83ce3362238ac5339069909/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa09ccbb74ea9febd83ce3362238ac5339069909/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=aa09ccbb74ea9febd83ce3362238ac5339069909",
        "patch": "@@ -46,7 +46,11 @@ class FastRandomContext {\n     uint32_t Rw;\n };\n \n-/* Number of random bytes returned by GetOSRand */\n+/* Number of random bytes returned by GetOSRand.\n+ * When changing this constant make sure to change all call sites, and make\n+ * sure that the underlying OS APIs for all platforms support the number.\n+ * (many cap out at 256 bytes).\n+ */\n static const ssize_t NUM_OS_RANDOM_BYTES = 32;\n \n /** Get 32 bytes of system entropy. Do not use this in application code: use"
      }
    ]
  },
  {
    "sha": "7cad84929907c4294f07377453aa77887911b486",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3Y2FkODQ5Mjk5MDdjNDI5NGYwNzM3NzQ1M2FhNzc4ODc5MTFiNDg2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T07:02:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T07:02:50Z"
      },
      "message": "sanity: Move OS random to sanity check function\n\nMove the OS random test to a sanity check function that is called every\ntime bitcoind is initialized.\n\nKeep `src/test/random_tests.cpp` for the case that later random tests\nare added, and keep a rudimentary test that just calls the sanity check.",
      "tree": {
        "sha": "a364b2912656b00dac9e397f767d6df1fd91e821",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a364b2912656b00dac9e397f767d6df1fd91e821"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7cad84929907c4294f07377453aa77887911b486",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cad84929907c4294f07377453aa77887911b486",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7cad84929907c4294f07377453aa77887911b486",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cad84929907c4294f07377453aa77887911b486/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aa09ccbb74ea9febd83ce3362238ac5339069909",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa09ccbb74ea9febd83ce3362238ac5339069909",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa09ccbb74ea9febd83ce3362238ac5339069909"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 42,
      "deletions": 28
    },
    "files": [
      {
        "sha": "6409e92ebcc846741a632ca802e6e615abb030b1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cad84929907c4294f07377453aa77887911b486/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cad84929907c4294f07377453aa77887911b486/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7cad84929907c4294f07377453aa77887911b486",
        "patch": "@@ -687,9 +687,15 @@ bool InitSanityCheck(void)\n         InitError(\"Elliptic curve cryptography sanity check failure. Aborting.\");\n         return false;\n     }\n+\n     if (!glibc_sanity_test() || !glibcxx_sanity_test())\n         return false;\n \n+    if (!Random_SanityCheck()) {\n+        InitError(\"OS cryptographic RNG sanity check failure. Aborting.\");\n+        return false;\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "7fdada7525fa4295ff8574c79edeaabfd2dfaef1",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cad84929907c4294f07377453aa77887911b486/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cad84929907c4294f07377453aa77887911b486/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=7cad84929907c4294f07377453aa77887911b486",
        "patch": "@@ -239,3 +239,33 @@ FastRandomContext::FastRandomContext(bool fDeterministic)\n     }\n }\n \n+bool Random_SanityCheck()\n+{\n+    /* This does not measure the quality of randomness, but it does test that\n+     * OSRandom() overwrites all 32 bytes of the output given a maximum\n+     * number of tries.\n+     */\n+    static const ssize_t MAX_TRIES = 1024;\n+    uint8_t data[NUM_OS_RANDOM_BYTES];\n+    bool overwritten[NUM_OS_RANDOM_BYTES] = {}; /* Tracks which bytes have been overwritten at least once */\n+    int num_overwritten;\n+    int tries = 0;\n+    /* Loop until all bytes have been overwritten at least once, or max number tries reached */\n+    do {\n+        memset(data, 0, NUM_OS_RANDOM_BYTES);\n+        GetOSRand(data);\n+        for (int x=0; x < NUM_OS_RANDOM_BYTES; ++x) {\n+            overwritten[x] |= (data[x] != 0);\n+        }\n+\n+        num_overwritten = 0;\n+        for (int x=0; x < NUM_OS_RANDOM_BYTES; ++x) {\n+            if (overwritten[x]) {\n+                num_overwritten += 1;\n+            }\n+        }\n+\n+        tries += 1;\n+    } while (num_overwritten < NUM_OS_RANDOM_BYTES && tries < MAX_TRIES);\n+    return (num_overwritten == NUM_OS_RANDOM_BYTES); /* If this failed, bailed out after too many tries */\n+}"
      },
      {
        "sha": "0464bdce147f1274e6335f9e492dd00ec646b109",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cad84929907c4294f07377453aa77887911b486/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cad84929907c4294f07377453aa77887911b486/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=7cad84929907c4294f07377453aa77887911b486",
        "patch": "@@ -58,4 +58,9 @@ static const ssize_t NUM_OS_RANDOM_BYTES = 32;\n  */\n void GetOSRand(unsigned char *ent32);\n \n+/** Check that OS randomness is available and returning the requested number\n+ * of bytes.\n+ */\n+bool Random_SanityCheck();\n+\n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "d2c46c0daabc357b49cdff21bcea70bcfc8aec6f",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 28,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7cad84929907c4294f07377453aa77887911b486/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7cad84929907c4294f07377453aa77887911b486/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=7cad84929907c4294f07377453aa77887911b486",
        "patch": "@@ -10,36 +10,9 @@\n \n BOOST_FIXTURE_TEST_SUITE(random_tests, BasicTestingSetup)\n \n-static const ssize_t MAX_TRIES = 1024;\n-\n BOOST_AUTO_TEST_CASE(osrandom_tests)\n {\n-    /* This does not measure the quality of randomness, but it does test that\n-     * OSRandom() overwrites all 32 bytes of the output given a maximum\n-     * number of tries.\n-     */\n-    uint8_t data[NUM_OS_RANDOM_BYTES];\n-    bool overwritten[NUM_OS_RANDOM_BYTES] = {}; /* Tracks which bytes have been overwritten at least once */\n-    int num_overwritten;\n-    int tries = 0;\n-    /* Loop until all bytes have been overwritten at least once */\n-    do {\n-        memset(data, 0, NUM_OS_RANDOM_BYTES);\n-        GetOSRand(data);\n-        for (int x=0; x < NUM_OS_RANDOM_BYTES; ++x) {\n-            overwritten[x] |= (data[x] != 0);\n-        }\n-\n-        num_overwritten = 0;\n-        for (int x=0; x < NUM_OS_RANDOM_BYTES; ++x) {\n-            if (overwritten[x]) {\n-                num_overwritten += 1;\n-            }\n-        }\n-\n-        tries += 1;\n-    } while (num_overwritten < NUM_OS_RANDOM_BYTES && tries < MAX_TRIES);\n-    BOOST_CHECK(num_overwritten == NUM_OS_RANDOM_BYTES); /* If this failed, bailed out after too many tries */\n+    BOOST_CHECK(Random_SanityCheck());\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "7e6dcd9995b99e894b8017f09016c405b066ca36",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTZkY2Q5OTk1Yjk5ZTg5NGI4MDE3ZjA5MDE2YzQwNWIwNjZjYTM2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T07:51:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-22T07:51:26Z"
      },
      "message": "random: Add fallback if getrandom syscall not available\n\nIf the code was compiled with newer (>=3.17) kernel headers but executed\non a system without the system call, every use of random would crash the\nprogram. Add a fallback for that case.",
      "tree": {
        "sha": "4a7b37b6c622abe872d141918375cb90d378f4c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a7b37b6c622abe872d141918375cb90d378f4c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e6dcd9995b99e894b8017f09016c405b066ca36",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6dcd9995b99e894b8017f09016c405b066ca36",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e6dcd9995b99e894b8017f09016c405b066ca36",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6dcd9995b99e894b8017f09016c405b066ca36/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7cad84929907c4294f07377453aa77887911b486",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7cad84929907c4294f07377453aa77887911b486",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7cad84929907c4294f07377453aa77887911b486"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 34,
      "deletions": 15
    },
    "files": [
      {
        "sha": "8284f457c914676bd334cf435a11f8663add3dc4",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 15,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6dcd9995b99e894b8017f09016c405b066ca36/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6dcd9995b99e894b8017f09016c405b066ca36/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=7e6dcd9995b99e894b8017f09016c405b066ca36",
        "patch": "@@ -102,6 +102,28 @@ static void RandAddSeedPerfmon()\n #endif\n }\n \n+#ifndef WIN32\n+/** Fallback: get 32 bytes of system entropy from /dev/urandom. The most\n+ * compatible way to get cryptographic randomness on UNIX-ish platforms.\n+ */\n+void GetDevURandom(unsigned char *ent32)\n+{\n+    int f = open(\"/dev/urandom\", O_RDONLY);\n+    if (f == -1) {\n+        RandFailure();\n+    }\n+    int have = 0;\n+    do {\n+        ssize_t n = read(f, ent32 + have, NUM_OS_RANDOM_BYTES - have);\n+        if (n <= 0 || n + have > NUM_OS_RANDOM_BYTES) {\n+            RandFailure();\n+        }\n+        have += n;\n+    } while (have < NUM_OS_RANDOM_BYTES);\n+    close(f);\n+}\n+#endif\n+\n /** Get 32 bytes of system entropy. */\n void GetOSRand(unsigned char *ent32)\n {\n@@ -122,8 +144,17 @@ void GetOSRand(unsigned char *ent32)\n      * will always return as many bytes as requested and will not be\n      * interrupted by signals.\"\n      */\n-    if (syscall(SYS_getrandom, ent32, NUM_OS_RANDOM_BYTES, 0) != NUM_OS_RANDOM_BYTES) {\n-        RandFailure();\n+    int rv = syscall(SYS_getrandom, ent32, NUM_OS_RANDOM_BYTES, 0);\n+    if (rv != NUM_OS_RANDOM_BYTES) {\n+        if (rv < 0 && errno == ENOSYS) {\n+            /* Fallback for kernel <3.17: the return value will be -1 and errno\n+             * ENOSYS if the syscall is not available, in that case fall back\n+             * to /dev/urandom.\n+             */\n+            GetDevURandom(ent32);\n+        } else {\n+            RandFailure();\n+        }\n     }\n #elif defined(HAVE_GETENTROPY)\n     /* On OpenBSD this can return up to 256 bytes of entropy, will return an\n@@ -150,19 +181,7 @@ void GetOSRand(unsigned char *ent32)\n     /* Fall back to /dev/urandom if there is no specific method implemented to\n      * get system entropy for this OS.\n      */\n-    int f = open(\"/dev/urandom\", O_RDONLY);\n-    if (f == -1) {\n-        RandFailure();\n-    }\n-    int have = 0;\n-    do {\n-        ssize_t n = read(f, ent32 + have, NUM_OS_RANDOM_BYTES - have);\n-        if (n <= 0 || n + have > NUM_OS_RANDOM_BYTES) {\n-            RandFailure();\n-        }\n-        have += n;\n-    } while (have < NUM_OS_RANDOM_BYTES);\n-    close(f);\n+    GetDevURandom(ent32);\n #endif\n }\n "
      }
    ]
  }
]