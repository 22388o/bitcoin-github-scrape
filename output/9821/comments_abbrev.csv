gmaxwell,2017-02-21T20:11:00Z,"Concept ACK.  I think this should use a runtime test case at init, not just a boost testcase-- code may be built on a system where it works but run elsewhere and this is too important to mess up. :)",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281465447,281465447,
laanwj,2017-02-21T20:12:41Z,"I'm OK with adding this to the sanity checks, but in all fairness we don't check that for `/dev/urandom` either, we used to not even have a boost testcase for this code path. Also a failure while reading randomness will already always trigger a fatal abort.",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281465909,281465909,
sipa,2017-02-21T20:20:29Z,"I think `getrandom` if available should be preferred over using /dev/urandom. While a local root access can both replace /dev/urandom with something else or intercept `getrandom` calls, I expect the latter to require more invasive/detectable changes.",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281467995,281467995,
sipa,2017-02-21T20:56:08Z,"~Two questions:~\n* ~What if you're using a 2.25 or later glibc (which has the `getrandom` function), but your Linux kernel is pre-3.17 (which does not have the syscall)? I have a hard time fnding information about this in the glibc documentation. Either it simulates it by reading /dev/urandom instead, or it fails. If the actual behavior is to fail, we should probably fall back to reading /dev/ur",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281477450,281477450,
gmaxwell,2017-02-21T21:01:11Z,">  but in all fairness we don't check that for /dev/urandom either, \n\nYes but we don't have an issue there where there are older kernels that don't have the functionality... (Also, I would be of the view that we should have a runtime test currently too-- but I didn't want to bloat up the original PR that added this.)\n",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281478836,281478836,
theuni,2017-02-21T22:40:56Z,Concept ACK. utACK on the build changes in particular.,https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281506061,281506061,
laanwj,2017-02-22T06:22:23Z,"> Nevermind, it seems you're using the syscall directly.\n\nWell it still makes sense. On Linux, syscalls that are not implemented will predictably return an error w/ errno `ENOSYS`. We want to support older kernels (3.16 isn't that old - 2014) so need to handle this and fall back to `/dev/urandom`. Currently it will crash with a ""randomness error"" on those platforms [but only if compiled with k",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281580757,281580757,
sipa,2017-02-23T23:45:07Z,"~@laanwj It seems that Debian Jessie (stable) ships with Linux kernel 3.16, right before 3.17 which introduced `getrandom()`. That means that a binary compiled on a system with a >=3.17 kernel won't run on Jessie anymore, at all. I think we should prefer trying to call `getrandom()`, but if it fails, fall back to reading `/dev/urandom`.~\n\nIt seems I'm consistently commenting on old states of t",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282158731,282158731,
sipa,2017-02-24T03:42:36Z,"utACK 7e6dcd9995b99e894b8017f09016c405b066ca36\n\nIt seems none of the new methods are available on OSX (or at least in the build environment in Travis), but a new method can be added later.",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282195897,282195897,
laanwj,2017-02-24T07:36:48Z,"> It seems none of the new methods are available on OSX (or at least in the build environment in Travis), but a new method can be added later.\n\nIt may well be that OSX has no way to read kernel randomness besides `/dev/urandom`. We checked and their own frameworks use that, and nothing else. But yes someone with more knowledge about OSX could take a look at that later.",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282224832,282224832,
jameshilliard,2017-02-25T19:18:47Z,Libressl has [getentropy emulation](https://github.com/libressl-portable/openbsd/tree/master/src/lib/libcrypto/arc4random) for a number of different OS's that may be useful as a reference.,https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282505882,282505882,
laanwj,2017-03-01T11:41:47Z,"> Libressl has getentropy emulation for a number of different OS's that may be useful as a reference.\n\nThanks. That source confirms that there is no other way besides using /dev/urandom in OSX.",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-283318888,283318888,
laanwj,2017-04-01T18:00:36Z,"> Thanks. That source confirms that there is no other way besides using /dev/urandom in OSX.\n\nWhile digging around I found that OSX 10.12+ does have `getentropy`, however it seems to be defined in `sys/random.h` instead of `unistd.h` as in OpenBSD:\n```c++\n__OSX_AVAILABLE(10.12) __IOS_AVAILABLE(10.0) __TVOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0)\nint getentropy(void* buffer, size_t size)",https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-290936636,290936636,
theuni,2017-02-21T22:46:15Z,"Does this not need the GRND_BLOCK flag? I think we want this blocking rather than returning /dev/random data, no?",https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102338966,102338966,src/random.cpp
laanwj,2017-02-22T06:27:47Z,"According to the man page there is no GRND_BLOCK flag, just a GRND_NONBLOCK flag, which is only significant when passing GRND_RANDOM (which selects `/dev/random`) too. In that mode, it means EAGAIN can be returned if there is not enough entropy.\n\nIn `/dev/urandom` mode it will never block. When requesting <= 256 bytes it will not even be interruptable by a signal.",https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102391790,102391790,src/random.cpp
theuni,2017-02-22T06:50:15Z,"Thanks for clarifying. When I searched for the kernel implementation, I landed on https://lwn.net/Articles/605828/, which I guess was an early draft of getrandom with the flag reversed. Carry on :)",https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102394221,102394221,src/random.cpp
