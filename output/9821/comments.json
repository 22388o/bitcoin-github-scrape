[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281465447",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281465447",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 281465447,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ2NTQ0Nw==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-21T20:11:00Z",
    "updated_at": "2017-02-21T20:11:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK.  I think this should use a runtime test case at init, not just a boost testcase-- code may be built on a system where it works but run elsewhere and this is too important to mess up. :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281465447/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281465909",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281465909",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 281465909,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ2NTkwOQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-21T20:12:41Z",
    "updated_at": "2017-02-21T20:15:23Z",
    "author_association": "MEMBER",
    "body": "I'm OK with adding this to the sanity checks, but in all fairness we don't check that for `/dev/urandom` either, we used to not even have a boost testcase for this code path. Also a failure while reading randomness will already always trigger a fatal abort.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281465909/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281467995",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281467995",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 281467995,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ2Nzk5NQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-21T20:20:29Z",
    "updated_at": "2017-02-21T20:20:49Z",
    "author_association": "MEMBER",
    "body": "I think `getrandom` if available should be preferred over using /dev/urandom. While a local root access can both replace /dev/urandom with something else or intercept `getrandom` calls, I expect the latter to require more invasive/detectable changes.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281467995/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281477450",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281477450",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 281477450,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ3NzQ1MA==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-21T20:56:08Z",
    "updated_at": "2017-02-21T21:07:19Z",
    "author_association": "MEMBER",
    "body": "~Two questions:~\r\n* ~What if you're using a 2.25 or later glibc (which has the `getrandom` function), but your Linux kernel is pre-3.17 (which does not have the syscall)? I have a hard time fnding information about this in the glibc documentation. Either it simulates it by reading /dev/urandom instead, or it fails. If the actual behavior is to fail, we should probably fall back to reading /dev/urandom at runtime rather than at compile time.~\r\n* ~Given that our release binaries should probably not be required to work only on post-2.25 glibc, with this patch we can't compile release binaries against a post-2.25 glibc...~\r\n\r\nNevermind, it seems you're using the syscall directly.\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281477450/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281478836",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281478836",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 281478836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTQ3ODgzNg==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-21T21:01:11Z",
    "updated_at": "2017-02-21T21:01:11Z",
    "author_association": "CONTRIBUTOR",
    "body": ">  but in all fairness we don't check that for /dev/urandom either, \r\n\r\nYes but we don't have an issue there where there are older kernels that don't have the functionality... (Also, I would be of the view that we should have a runtime test currently too-- but I didn't want to bloat up the original PR that added this.)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281478836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281506061",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281506061",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 281506061,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTUwNjA2MQ==",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-21T22:40:56Z",
    "updated_at": "2017-02-21T22:40:56Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. utACK on the build changes in particular.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281506061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281580757",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-281580757",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 281580757,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MTU4MDc1Nw==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-22T06:22:23Z",
    "updated_at": "2017-02-22T07:54:35Z",
    "author_association": "MEMBER",
    "body": "> Nevermind, it seems you're using the syscall directly.\r\n\r\nWell it still makes sense. On Linux, syscalls that are not implemented will predictably return an error w/ errno `ENOSYS`. We want to support older kernels (3.16 isn't that old - 2014) so need to handle this and fall back to `/dev/urandom`. Currently it will crash with a \"randomness error\" on those platforms [but only if compiled with kernel headers that did have the syscall].\r\nEdit: added",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/281580757/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282158731",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282158731",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 282158731,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjE1ODczMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-23T23:45:07Z",
    "updated_at": "2017-02-23T23:47:16Z",
    "author_association": "MEMBER",
    "body": "~@laanwj It seems that Debian Jessie (stable) ships with Linux kernel 3.16, right before 3.17 which introduced `getrandom()`. That means that a binary compiled on a system with a >=3.17 kernel won't run on Jessie anymore, at all. I think we should prefer trying to call `getrandom()`, but if it fails, fall back to reading `/dev/urandom`.~\r\n\r\nIt seems I'm consistently commenting on old states of this PR.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282158731/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282195897",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282195897",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 282195897,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjE5NTg5Nw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-24T03:42:36Z",
    "updated_at": "2017-02-24T03:42:36Z",
    "author_association": "MEMBER",
    "body": "utACK 7e6dcd9995b99e894b8017f09016c405b066ca36\r\n\r\nIt seems none of the new methods are available on OSX (or at least in the build environment in Travis), but a new method can be added later.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282195897/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282224832",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282224832",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 282224832,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjIyNDgzMg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-24T07:36:48Z",
    "updated_at": "2017-02-24T07:36:48Z",
    "author_association": "MEMBER",
    "body": "> It seems none of the new methods are available on OSX (or at least in the build environment in Travis), but a new method can be added later.\r\n\r\nIt may well be that OSX has no way to read kernel randomness besides `/dev/urandom`. We checked and their own frameworks use that, and nothing else. But yes someone with more knowledge about OSX could take a look at that later.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282224832/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282505882",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-282505882",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 282505882,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MjUwNTg4Mg==",
    "user": {
      "login": "jameshilliard",
      "id": 3298484,
      "node_id": "MDQ6VXNlcjMyOTg0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3298484?u=1b426d2927bced4f00fbbd8282d72ee032374b88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jameshilliard",
      "html_url": "https://github.com/jameshilliard",
      "followers_url": "https://api.github.com/users/jameshilliard/followers",
      "following_url": "https://api.github.com/users/jameshilliard/following{/other_user}",
      "gists_url": "https://api.github.com/users/jameshilliard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jameshilliard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jameshilliard/subscriptions",
      "organizations_url": "https://api.github.com/users/jameshilliard/orgs",
      "repos_url": "https://api.github.com/users/jameshilliard/repos",
      "events_url": "https://api.github.com/users/jameshilliard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jameshilliard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-02-25T19:18:47Z",
    "updated_at": "2017-02-25T19:18:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "Libressl has [getentropy emulation](https://github.com/libressl-portable/openbsd/tree/master/src/lib/libcrypto/arc4random) for a number of different OS's that may be useful as a reference.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/282505882/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283318888",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-283318888",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 283318888,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI4MzMxODg4OA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-03-01T11:41:47Z",
    "updated_at": "2017-03-01T11:41:47Z",
    "author_association": "MEMBER",
    "body": "> Libressl has getentropy emulation for a number of different OS's that may be useful as a reference.\r\n\r\nThanks. That source confirms that there is no other way besides using /dev/urandom in OSX.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/283318888/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/290936636",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#issuecomment-290936636",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9821",
    "id": 290936636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI5MDkzNjYzNg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2017-04-01T18:00:36Z",
    "updated_at": "2017-04-01T18:00:36Z",
    "author_association": "MEMBER",
    "body": "> Thanks. That source confirms that there is no other way besides using /dev/urandom in OSX.\r\n\r\nWhile digging around I found that OSX 10.12+ does have `getentropy`, however it seems to be defined in `sys/random.h` instead of `unistd.h` as in OpenBSD:\r\n```c++\r\n__OSX_AVAILABLE(10.12) __IOS_AVAILABLE(10.0) __TVOS_AVAILABLE(10.0) __WATCHOS_AVAILABLE(3.0)\r\nint getentropy(void* buffer, size_t size);\r\n```\r\n\r\nExample:\r\n```c++\r\n#include <stdlib.h>\r\n#include <unistd.h>\r\n#include <sys/random.h>\r\n\r\nint main()\r\n{\r\n    unsigned char buf[32];\r\n    if (getentropy(buf, sizeof(buf)) < 0) {\r\n        return 1;\r\n    }\r\n    write(STDOUT_FILENO, buf, sizeof(buf));\r\n    return 0;\r\n}\r\n```\r\n\r\nI'm not sure how to make autoconf detect something that may be in different headers.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/290936636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102338966",
    "pull_request_review_id": 23092665,
    "id": 102338966,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjMzODk2Ng==",
    "diff_hunk": "@@ -92,32 +103,65 @@ static void RandAddSeedPerfmon()\n }\n \n /** Get 32 bytes of system entropy. */\n-static void GetOSRand(unsigned char *ent32)\n+void GetOSRand(unsigned char *ent32)\n {\n-#ifdef WIN32\n+#if defined(WIN32)\n     HCRYPTPROV hProvider;\n     int ret = CryptAcquireContextW(&hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);\n     if (!ret) {\n         RandFailure();\n     }\n-    ret = CryptGenRandom(hProvider, 32, ent32);\n+    ret = CryptGenRandom(hProvider, NUM_OS_RANDOM_BYTES, ent32);\n     if (!ret) {\n         RandFailure();\n     }\n     CryptReleaseContext(hProvider, 0);\n+#elif defined(HAVE_SYS_GETRANDOM)\n+    /* Linux. From the getrandom(2) man page:\n+     * \"If the urandom source has been initialized, reads of up to 256 bytes\n+     * will always return as many bytes as requested and will not be\n+     * interrupted by signals.\"\n+     */\n+    if (syscall(SYS_getrandom, ent32, NUM_OS_RANDOM_BYTES, 0) != NUM_OS_RANDOM_BYTES) {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "7e6dcd9995b99e894b8017f09016c405b066ca36",
    "original_commit_id": "224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Does this not need the GRND_BLOCK flag? I think we want this blocking rather than returning /dev/random data, no?",
    "created_at": "2017-02-21T22:46:15Z",
    "updated_at": "2017-02-22T07:52:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102338966",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9821",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102338966"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102338966"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9821"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102338966/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102391790",
    "pull_request_review_id": 23144801,
    "id": 102391790,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjM5MTc5MA==",
    "diff_hunk": "@@ -92,32 +103,65 @@ static void RandAddSeedPerfmon()\n }\n \n /** Get 32 bytes of system entropy. */\n-static void GetOSRand(unsigned char *ent32)\n+void GetOSRand(unsigned char *ent32)\n {\n-#ifdef WIN32\n+#if defined(WIN32)\n     HCRYPTPROV hProvider;\n     int ret = CryptAcquireContextW(&hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);\n     if (!ret) {\n         RandFailure();\n     }\n-    ret = CryptGenRandom(hProvider, 32, ent32);\n+    ret = CryptGenRandom(hProvider, NUM_OS_RANDOM_BYTES, ent32);\n     if (!ret) {\n         RandFailure();\n     }\n     CryptReleaseContext(hProvider, 0);\n+#elif defined(HAVE_SYS_GETRANDOM)\n+    /* Linux. From the getrandom(2) man page:\n+     * \"If the urandom source has been initialized, reads of up to 256 bytes\n+     * will always return as many bytes as requested and will not be\n+     * interrupted by signals.\"\n+     */\n+    if (syscall(SYS_getrandom, ent32, NUM_OS_RANDOM_BYTES, 0) != NUM_OS_RANDOM_BYTES) {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "7e6dcd9995b99e894b8017f09016c405b066ca36",
    "original_commit_id": "224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "According to the man page there is no GRND_BLOCK flag, just a GRND_NONBLOCK flag, which is only significant when passing GRND_RANDOM (which selects `/dev/random`) too. In that mode, it means EAGAIN can be returned if there is not enough entropy.\r\n\r\nIn `/dev/urandom` mode it will never block. When requesting <= 256 bytes it will not even be interruptable by a signal.",
    "created_at": "2017-02-22T06:27:47Z",
    "updated_at": "2017-02-22T07:52:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102391790",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9821",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102391790"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102391790"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9821"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102391790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 102338966
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102394221",
    "pull_request_review_id": 23147083,
    "id": 102394221,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEwMjM5NDIyMQ==",
    "diff_hunk": "@@ -92,32 +103,65 @@ static void RandAddSeedPerfmon()\n }\n \n /** Get 32 bytes of system entropy. */\n-static void GetOSRand(unsigned char *ent32)\n+void GetOSRand(unsigned char *ent32)\n {\n-#ifdef WIN32\n+#if defined(WIN32)\n     HCRYPTPROV hProvider;\n     int ret = CryptAcquireContextW(&hProvider, NULL, NULL, PROV_RSA_FULL, CRYPT_VERIFYCONTEXT);\n     if (!ret) {\n         RandFailure();\n     }\n-    ret = CryptGenRandom(hProvider, 32, ent32);\n+    ret = CryptGenRandom(hProvider, NUM_OS_RANDOM_BYTES, ent32);\n     if (!ret) {\n         RandFailure();\n     }\n     CryptReleaseContext(hProvider, 0);\n+#elif defined(HAVE_SYS_GETRANDOM)\n+    /* Linux. From the getrandom(2) man page:\n+     * \"If the urandom source has been initialized, reads of up to 256 bytes\n+     * will always return as many bytes as requested and will not be\n+     * interrupted by signals.\"\n+     */\n+    if (syscall(SYS_getrandom, ent32, NUM_OS_RANDOM_BYTES, 0) != NUM_OS_RANDOM_BYTES) {",
    "path": "src/random.cpp",
    "position": null,
    "original_position": 44,
    "commit_id": "7e6dcd9995b99e894b8017f09016c405b066ca36",
    "original_commit_id": "224e6eb089a0f4977d22f3803fc27e44b5e7eea5",
    "user": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for clarifying. When I searched for the kernel implementation, I landed on https://lwn.net/Articles/605828/, which I guess was an early draft of getrandom with the flag reversed. Carry on :)",
    "created_at": "2017-02-22T06:50:15Z",
    "updated_at": "2017-02-22T07:52:44Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102394221",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9821",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102394221"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9821#discussion_r102394221"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9821"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/102394221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 125,
    "side": "RIGHT",
    "in_reply_to_id": 102338966
  }
]