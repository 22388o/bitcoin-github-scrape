[
  {
    "sha": "d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDdmMGIxZmFmNmEyYjcwYzk2MzMzNWNiZGNkZWM0MDA0N2I3ZDg3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-03T13:27:41Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-28T16:32:52Z"
      },
      "message": "Remove unused return value from LoadExternalBlockFile(...)",
      "tree": {
        "sha": "366d2a7568a0144e0a822877abafbed375ac4c8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/366d2a7568a0144e0a822877abafbed375ac4c8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d47f0b1faf6a2b70c963335cbdcdec40047b7d87/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1e2f2a85962c1664e4e55471061af0eaa798d40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1e2f2a85962c1664e4e55471061af0eaa798d40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1e2f2a85962c1664e4e55471061af0eaa798d40"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "69aa046767fe8bbbacde7eda38a21d71ac215542",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d47f0b1faf6a2b70c963335cbdcdec40047b7d87/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d47f0b1faf6a2b70c963335cbdcdec40047b7d87/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
        "patch": "@@ -4344,7 +4344,7 @@ bool LoadGenesisBlock(const CChainParams& chainparams)\n     return g_chainstate.LoadGenesisBlock(chainparams);\n }\n \n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n+void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp)\n {\n     // Map of disk positions for blocks with unknown parent (only used for reindex)\n     static std::multimap<uint256, CDiskBlockPos> mapBlocksUnknownParent;\n@@ -4463,7 +4463,6 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n     }\n     if (nLoaded > 0)\n         LogPrintf(\"Loaded %i blocks from external file in %dms\\n\", nLoaded, GetTimeMillis() - nStart);\n-    return nLoaded > 0;\n }\n \n void CChainState::CheckBlockIndex(const Consensus::Params& consensusParams)"
      },
      {
        "sha": "c5eca957ceec64efead62b3ca735c7895c9a66cc",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d47f0b1faf6a2b70c963335cbdcdec40047b7d87/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d47f0b1faf6a2b70c963335cbdcdec40047b7d87/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
        "patch": "@@ -250,7 +250,7 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n-bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n+void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,"
      }
    ]
  },
  {
    "sha": "4e8b3a19dc15598982e39cbd0ea574c699580f46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZThiM2ExOWRjMTU1OTg5ODJlMzljYmQwZWE1NzRjNjk5NTgwZjQ2",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-03T13:37:19Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-28T16:32:52Z"
      },
      "message": "Remove unused return value from LoadMempool(...)",
      "tree": {
        "sha": "7c0334d88a890c561b4c095537e9da82be4ede4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c0334d88a890c561b4c095537e9da82be4ede4b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e8b3a19dc15598982e39cbd0ea574c699580f46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e8b3a19dc15598982e39cbd0ea574c699580f46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e8b3a19dc15598982e39cbd0ea574c699580f46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e8b3a19dc15598982e39cbd0ea574c699580f46/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d47f0b1faf6a2b70c963335cbdcdec40047b7d87",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d47f0b1faf6a2b70c963335cbdcdec40047b7d87"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "5cdcbe94322fb0888100141a11631f6c9657d421",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e8b3a19dc15598982e39cbd0ea574c699580f46/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e8b3a19dc15598982e39cbd0ea574c699580f46/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4e8b3a19dc15598982e39cbd0ea574c699580f46",
        "patch": "@@ -4681,15 +4681,15 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n \n static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n \n-bool LoadMempool()\n+void LoadMempool()\n {\n     const CChainParams& chainparams = Params();\n     int64_t nExpiryTimeout = gArgs.GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n     FILE* filestr = fsbridge::fopen(GetDataDir() / \"mempool.dat\", \"rb\");\n     CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n     if (file.IsNull()) {\n         LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n-        return false;\n+        return;\n     }\n \n     int64_t count = 0;\n@@ -4702,7 +4702,7 @@ bool LoadMempool()\n         uint64_t version;\n         file >> version;\n         if (version != MEMPOOL_DUMP_VERSION) {\n-            return false;\n+            return;\n         }\n         uint64_t num;\n         file >> num;\n@@ -4741,7 +4741,7 @@ bool LoadMempool()\n                 ++expired;\n             }\n             if (ShutdownRequested())\n-                return false;\n+                return;\n         }\n         std::map<uint256, CAmount> mapDeltas;\n         file >> mapDeltas;\n@@ -4751,11 +4751,10 @@ bool LoadMempool()\n         }\n     } catch (const std::exception& e) {\n         LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n-        return false;\n+        return;\n     }\n \n     LogPrintf(\"Imported mempool transactions from disk: %i succeeded, %i failed, %i expired, %i already there\\n\", count, failed, expired, already_there);\n-    return true;\n }\n \n bool DumpMempool()"
      },
      {
        "sha": "15f7025f61dbac882a3ac3e2038eeadbb8fc210e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e8b3a19dc15598982e39cbd0ea574c699580f46/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e8b3a19dc15598982e39cbd0ea574c699580f46/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=4e8b3a19dc15598982e39cbd0ea574c699580f46",
        "patch": "@@ -492,7 +492,7 @@ CBlockFileInfo* GetBlockFileInfo(size_t n);\n bool DumpMempool();\n \n /** Load the mempool from disk. */\n-bool LoadMempool();\n+void LoadMempool();\n \n //! Check whether the block associated with this index entry is pruned or not.\n inline bool IsBlockPruned(const CBlockIndex* pblockindex)"
      }
    ]
  },
  {
    "sha": "da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTM5NWI5NTAwMjFjZGE3MGU2YzA0OGZmYjNiZGJkOGNkODZlN2Vi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-03T13:14:13Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-28T16:32:52Z"
      },
      "message": "Document where we are intentionally ignoring the return value from bool returning functions from validation.{cpp,h} that modify state",
      "tree": {
        "sha": "27550f5bd846f94066bd9a5fd0e95c62ce11c586",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/27550f5bd846f94066bd9a5fd0e95c62ce11c586"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e8b3a19dc15598982e39cbd0ea574c699580f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e8b3a19dc15598982e39cbd0ea574c699580f46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e8b3a19dc15598982e39cbd0ea574c699580f46"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 20,
      "deletions": 20
    },
    "files": [
      {
        "sha": "9d69fc3b67df49490103e994175dcd037da5b581",
        "filename": "src/bench/block_assemble.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/bench/block_assemble.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/bench/block_assemble.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/block_assemble.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -79,9 +79,9 @@ static void AssembleBlock(benchmark::State& state)\n         const CChainParams& chainparams = Params();\n         thread_group.create_thread(boost::bind(&CScheduler::serviceQueue, &scheduler));\n         GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n-        LoadGenesisBlock(chainparams);\n+        (void) LoadGenesisBlock(chainparams);\n         CValidationState state;\n-        ActivateBestChain(state, chainparams);\n+        (void) ActivateBestChain(state, chainparams);\n         assert(::chainActive.Tip() != nullptr);\n         const bool witness_enabled{IsWitnessEnabled(::chainActive.Tip(), chainparams.GetConsensus())};\n         assert(witness_enabled);"
      },
      {
        "sha": "6468f3350fb574a7b30963f55e9c9ef29e3e6d38",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -631,14 +631,14 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n             if (!file)\n                 break; // This error is logged in OpenBlockFile\n             LogPrintf(\"Reindexing block file blk%05u.dat...\\n\", (unsigned int)nFile);\n-            LoadExternalBlockFile(chainparams, file, &pos);\n+            (void) LoadExternalBlockFile(chainparams, file, &pos);\n             nFile++;\n         }\n         pblocktree->WriteReindexing(false);\n         fReindex = false;\n         LogPrintf(\"Reindexing finished\\n\");\n         // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-        LoadGenesisBlock(chainparams);\n+        (void) LoadGenesisBlock(chainparams);\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n@@ -648,7 +648,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n         if (file) {\n             fs::path pathBootstrapOld = GetDataDir() / \"bootstrap.dat.old\";\n             LogPrintf(\"Importing bootstrap.dat...\\n\");\n-            LoadExternalBlockFile(chainparams, file);\n+            (void) LoadExternalBlockFile(chainparams, file);\n             RenameOver(pathBootstrap, pathBootstrapOld);\n         } else {\n             LogPrintf(\"Warning: Could not open bootstrap file %s\\n\", pathBootstrap.string());\n@@ -660,7 +660,7 @@ static void ThreadImport(std::vector<fs::path> vImportFiles)\n         FILE *file = fsbridge::fopen(path, \"rb\");\n         if (file) {\n             LogPrintf(\"Importing blocks file %s...\\n\", path.string());\n-            LoadExternalBlockFile(chainparams, file);\n+            (void) LoadExternalBlockFile(chainparams, file);\n         } else {\n             LogPrintf(\"Warning: Could not open blocks file %s\\n\", path.string());\n         }"
      },
      {
        "sha": "46a5c06f1d86779af6db29e36ba36497eebabbb3",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -2576,7 +2576,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // we have a chain with at least nMinimumChainWork), and we ignore\n             // compact blocks with less work than our tip, it is safe to treat\n             // reconstructed compact blocks as having been requested.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            (void) ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2659,7 +2659,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             // disk-space attacks), but this should be safe due to the\n             // protections in the compact block handler -- see related comment\n             // in compact block optimistic reconstruction handling.\n-            ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n+            (void) ProcessNewBlock(chainparams, pblock, /*fForceProcessing=*/true, &fNewBlock);\n             if (fNewBlock) {\n                 pfrom->nLastBlockTime = GetTime();\n             } else {\n@@ -2714,7 +2714,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             mapBlockSource.emplace(hash, std::make_pair(pfrom->GetId(), true));\n         }\n         bool fNewBlock = false;\n-        ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n+        (void) ProcessNewBlock(chainparams, pblock, forceProcessing, &fNewBlock);\n         if (fNewBlock) {\n             pfrom->nLastBlockTime = GetTime();\n         } else {"
      },
      {
        "sha": "941f2481214fd92ed86326d0294fa62abea8b60b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -1474,7 +1474,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n     }\n \n     CValidationState state;\n-    PreciousBlock(state, Params(), pblockindex);\n+    (void) PreciousBlock(state, Params(), pblockindex);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));\n@@ -1507,11 +1507,11 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n \n-        InvalidateBlock(state, Params(), pblockindex);\n+        (void) InvalidateBlock(state, Params(), pblockindex);\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params());\n+        (void) ActivateBestChain(state, Params());\n     }\n \n     if (!state.IsValid()) {\n@@ -1549,7 +1549,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n     }\n \n     CValidationState state;\n-    ActivateBestChain(state, Params());\n+    (void) ActivateBestChain(state, Params());\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, FormatStateMessage(state));"
      },
      {
        "sha": "2b7a210c47bf5a216829d53fffbe8be22031665c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -413,7 +413,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             if (block.hashPrevBlock != pindexPrev->GetBlockHash())\n                 return \"inconclusive-not-best-prevblk\";\n             CValidationState state;\n-            TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n+            (void) TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n \n@@ -790,7 +790,7 @@ static UniValue submitheader(const JSONRPCRequest& request)\n     }\n \n     CValidationState state;\n-    ProcessNewBlockHeaders({h}, state, Params(), /* ppindex */ nullptr, /* first_invalid */ nullptr);\n+    (void) ProcessNewBlockHeaders({h}, state, Params(), /* ppindex */ nullptr, /* first_invalid */ nullptr);\n     if (state.IsValid()) return NullUniValue;\n     if (state.IsError()) {\n         throw JSONRPCError(RPC_VERIFY_ERROR, FormatStateMessage(state));"
      },
      {
        "sha": "6c95304f20d683b487c02ea3607be2f599b84dd3",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -168,7 +168,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     std::shared_ptr<const CBlock> shared_pblock = std::make_shared<const CBlock>(block);\n-    ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n+    (void) ProcessNewBlock(chainparams, shared_pblock, true, nullptr);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "1e7404610351533a14575cfe18574395a92358b4",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -137,7 +137,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     BOOST_CHECK(ProcessNewBlockHeaders(headers, state, Params()));\n \n     // Connect the genesis block and drain any outstanding events\n-    ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored);\n+    (void) ProcessNewBlock(Params(), std::make_shared<CBlock>(Params().GenesisBlock()), true, &ignored);\n     SyncWithValidationInterfaceQueue();\n \n     // subscribe to events (this subscriber will validate event ordering)\n@@ -158,7 +158,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             bool ignored;\n             for (int i = 0; i < 1000; i++) {\n                 auto block = blocks[GetRand(blocks.size() - 1)];\n-                ProcessNewBlock(Params(), block, true, &ignored);\n+                (void) ProcessNewBlock(Params(), block, true, &ignored);\n             }\n \n             // to make sure that eventually we process the full chain - do it here"
      },
      {
        "sha": "aa80c97aa8b6d51663c9cfcc59f55bec549caea7",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da395b950021cda70e6c048ffb3bdbd8cd86e7eb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "patch": "@@ -3517,7 +3517,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CVali\n         return AbortNode(state, std::string(\"System error: \") + e.what());\n     }\n \n-    FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n+    (void) FlushStateToDisk(chainparams, state, FlushStateMode::NONE);\n \n     CheckBlockIndex(chainparams.GetConsensus());\n \n@@ -4721,7 +4721,7 @@ void LoadMempool()\n             CValidationState state;\n             if (nTime + nExpiryTimeout > nNow) {\n                 LOCK(cs_main);\n-                AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n+                (void) AcceptToMemoryPoolWithTime(chainparams, mempool, state, tx, nullptr /* pfMissingInputs */, nTime,\n                                            nullptr /* plTxnReplaced */, false /* bypass_limits */, 0 /* nAbsurdFee */,\n                                            false /* test_accept */);\n                 if (state.IsValid()) {"
      }
    ]
  },
  {
    "sha": "b272348d802f38482dd1a4727af1e137e442b1d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjcyMzQ4ZDgwMmYzODQ4MmRkMWE0NzI3YWYxZTEzN2U0NDJiMWQz",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-02T16:02:19Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-28T16:32:52Z"
      },
      "message": "Add #define NODISCARD",
      "tree": {
        "sha": "43eb894f69801ccbf24052dde27335ec38c3d757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/43eb894f69801ccbf24052dde27335ec38c3d757"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b272348d802f38482dd1a4727af1e137e442b1d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b272348d802f38482dd1a4727af1e137e442b1d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b272348d802f38482dd1a4727af1e137e442b1d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b272348d802f38482dd1a4727af1e137e442b1d3/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da395b950021cda70e6c048ffb3bdbd8cd86e7eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da395b950021cda70e6c048ffb3bdbd8cd86e7eb"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 18,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d4c913e706e9cc8a57f63b8d74c962543c0a0cee",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b272348d802f38482dd1a4727af1e137e442b1d3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b272348d802f38482dd1a4727af1e137e442b1d3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b272348d802f38482dd1a4727af1e137e442b1d3",
        "patch": "@@ -95,6 +95,7 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  attributes.h \\\n   base58.h \\\n   bech32.h \\\n   bloom.h \\"
      },
      {
        "sha": "6e1fb9744a9408345abca463d7372ce2e744abf9",
        "filename": "src/attributes.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b272348d802f38482dd1a4727af1e137e442b1d3/src/attributes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b272348d802f38482dd1a4727af1e137e442b1d3/src/attributes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/attributes.h?ref=b272348d802f38482dd1a4727af1e137e442b1d3",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ATTRIBUTES_H\n+#define BITCOIN_ATTRIBUTES_H\n+\n+#if defined(__has_cpp_attribute) && __has_cpp_attribute(nodiscard)\n+#  define NODISCARD [[nodiscard]]\n+#elif defined(_MSC_VER) && _MSC_VER >= 1700\n+#  define NODISCARD _Check_return_\n+#else\n+#  define NODISCARD __attribute__((warn_unused_result))\n+#endif\n+\n+#endif // BITCOIN_ATTRIBUTES_H"
      }
    ]
  },
  {
    "sha": "71e5ce54a9b65d8f1bcfadbb64039d32c388b157",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MWU1Y2U1NGE5YjY1ZDhmMWJjZmFkYmI2NDAzOWQzMmMzODhiMTU3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-08-03T13:14:25Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-10-28T16:33:16Z"
      },
      "message": "Mark functions whose bool return value should not be discarded with NODISCARD",
      "tree": {
        "sha": "a1b1a27c717c5565532a0bf822e946a98a429431",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1b1a27c717c5565532a0bf822e946a98a429431"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71e5ce54a9b65d8f1bcfadbb64039d32c388b157",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e5ce54a9b65d8f1bcfadbb64039d32c388b157",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71e5ce54a9b65d8f1bcfadbb64039d32c388b157",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71e5ce54a9b65d8f1bcfadbb64039d32c388b157/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b272348d802f38482dd1a4727af1e137e442b1d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b272348d802f38482dd1a4727af1e137e442b1d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b272348d802f38482dd1a4727af1e137e442b1d3"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 42,
      "deletions": 41
    },
    "files": [
      {
        "sha": "d6b56b6b7795718fe0ff82df17b6b427b8c14b86",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e5ce54a9b65d8f1bcfadbb64039d32c388b157/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e5ce54a9b65d8f1bcfadbb64039d32c388b157/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=71e5ce54a9b65d8f1bcfadbb64039d32c388b157",
        "patch": "@@ -164,16 +164,16 @@ class CChainState {\n      * If a block header hasn't already been seen, call CheckBlockHeader on it, ensure\n      * that it doesn't descend from an invalid block, and then add it to mapBlockIndex.\n      */\n-    bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    NODISCARD bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    NODISCARD bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block (dis)connection on a given view:\n     DisconnectResult DisconnectBlock(const CBlock& block, const CBlockIndex* pindex, CCoinsViewCache& view);\n-    bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n+    NODISCARD bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n                       CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     // Block disconnection on our pcoinsTip:\n-    bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n+    NODISCARD bool DisconnectTip(CValidationState& state, const CChainParams& chainparams, DisconnectedBlockTransactions *disconnectpool);\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex* pindex) LOCKS_EXCLUDED(cs_main);\n@@ -189,8 +189,8 @@ class CChainState {\n     void UnloadBlockIndex();\n \n private:\n-    bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-    bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    NODISCARD bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    NODISCARD bool ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     CBlockIndex* AddToBlockIndex(const CBlockHeader& block) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Create a new block index entry for a given block hash */\n@@ -523,7 +523,7 @@ static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool,\n \n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n-static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n+NODISCARD static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n                  unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n@@ -557,7 +557,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n     return CheckInputs(tx, state, view, true, flags, cacheSigStore, true, txdata);\n }\n \n-static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n+NODISCARD static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                               bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n@@ -966,7 +966,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n }\n \n /** (try to) add transaction to memory pool with a specified acceptance time **/\n-static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n+NODISCARD static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n@@ -1043,7 +1043,7 @@ bool GetTransaction(const uint256& hash, CTransactionRef& txOut, const Consensus\n // CBlock and CBlockIndex\n //\n \n-static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n+NODISCARD static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1368,7 +1368,7 @@ void InitScriptExecutionCache() {\n  *\n  * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+NODISCARD bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1453,7 +1453,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n \n namespace {\n \n-bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n+NODISCARD bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint256& hashBlock, const CMessageHeader::MessageStartChars& messageStart)\n {\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n@@ -1480,7 +1480,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     return true;\n }\n \n-static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n+NODISCARD static bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex *pindex)\n {\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull()) {\n@@ -1654,7 +1654,7 @@ void static FlushBlockFile(bool fFinalize = false)\n \n static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize);\n \n-static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n+NODISCARD static bool WriteUndoDataForBlock(const CBlockUndo& blockundo, CValidationState& state, CBlockIndex* pindex, const CChainParams& chainparams)\n {\n     // Write undo information to disk\n     if (pindex->GetUndoPos().IsNull()) {\n@@ -2086,7 +2086,7 @@ bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBl\n  * If FlushStateMode::NONE is used, then FlushStateToDisk(...) won't do anything\n  * besides checking if we need to prune.\n  */\n-bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {\n+NODISCARD bool static FlushStateToDisk(const CChainParams& chainparams, CValidationState &state, FlushStateMode mode, int nManualPruneHeight) {\n     int64_t nMempoolUsage = mempool.DynamicMemoryUsage();\n     LOCK(cs_main);\n     static int64_t nLastWrite = 0;\n@@ -2980,7 +2980,7 @@ void CChainState::ReceivedBlockTransactions(const CBlock& block, CBlockIndex* pi\n     }\n }\n \n-static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n+NODISCARD static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     LOCK(cs_LastBlockFile);\n \n@@ -3037,7 +3037,7 @@ static bool FindBlockPos(CDiskBlockPos &pos, unsigned int nAddSize, unsigned int\n     return true;\n }\n \n-static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)\n+NODISCARD static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigned int nAddSize)\n {\n     pos.nFile = nFile;\n \n@@ -3068,7 +3068,7 @@ static bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos,\n     return true;\n }\n \n-static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)\n+NODISCARD static bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true)\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n@@ -3217,7 +3217,7 @@ std::vector<unsigned char> GenerateCoinbaseCommitment(CBlock& block, const CBloc\n  *  in ConnectBlock().\n  *  Note that -reindex-chainstate skips the validation that happens here!\n  */\n-static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n+NODISCARD static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& params, const CBlockIndex* pindexPrev, int64_t nAdjustedTime)\n {\n     assert(pindexPrev != nullptr);\n     const int nHeight = pindexPrev->nHeight + 1;\n@@ -3262,7 +3262,7 @@ static bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationSta\n  *  in ConnectBlock().\n  *  Note that -reindex-chainstate skips the validation that happens here!\n  */\n-static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n+NODISCARD static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, const CBlockIndex* pindexPrev)\n {\n     const int nHeight = pindexPrev == nullptr ? 0 : pindexPrev->nHeight + 1;\n \n@@ -4057,7 +4057,7 @@ bool CVerifyDB::VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview,\n }\n \n /** Apply the effects of a block on the utxo cache, ignoring that it may already have been applied. */\n-bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n+NODISCARD bool CChainState::RollforwardBlock(const CBlockIndex* pindex, CCoinsViewCache& inputs, const CChainParams& params)\n {\n     // TODO: merge with ConnectBlock\n     CBlock block;"
      },
      {
        "sha": "5fb9f3da63674561b7d184573a77512f2e6d65fa",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 21,
        "deletions": 20,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71e5ce54a9b65d8f1bcfadbb64039d32c388b157/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71e5ce54a9b65d8f1bcfadbb64039d32c388b157/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=71e5ce54a9b65d8f1bcfadbb64039d32c388b157",
        "patch": "@@ -11,6 +11,7 @@\n #endif\n \n #include <amount.h>\n+#include <attributes.h>\n #include <coins.h>\n #include <fs.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n@@ -227,7 +228,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+NODISCARD bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers.\n@@ -241,7 +242,7 @@ bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<cons\n  * @param[out] ppindex If set, the pointer will be set to point to the last new block index object for the given headers\n  * @param[out] first_invalid First header that fails validation, if one exists\n  */\n-bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n+NODISCARD bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationState& state, const CChainParams& chainparams, const CBlockIndex** ppindex = nullptr, CBlockHeader* first_invalid = nullptr) LOCKS_EXCLUDED(cs_main);\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n@@ -252,27 +253,27 @@ fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n void LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */\n-bool LoadGenesisBlock(const CChainParams& chainparams);\n+NODISCARD bool LoadGenesisBlock(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk,\n  * initializing state if we're running with -reindex. */\n-bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+NODISCARD bool LoadBlockIndex(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Update the chain tip based on database information. */\n-bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+NODISCARD bool LoadChainTip(const CChainParams& chainparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n-bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n+NODISCARD bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n /**\n  * Find the best known block, and make it the tip of the block chain\n  *\n  * May not be called with cs_main held. May not be called in a\n  * validationinterface callback.\n  */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n+NODISCARD bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n@@ -300,7 +301,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n+NODISCARD bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n                         bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -347,7 +348,7 @@ bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_mai\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+NODISCARD bool CheckSequenceLocks(const CTxMemPool& pool, const CTransaction& tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Closure representing one script verification\n@@ -389,18 +390,18 @@ void InitScriptExecutionCache();\n \n \n /** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n+NODISCARD bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+NODISCARD bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n+NODISCARD bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n+NODISCARD bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n \n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n-bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+NODISCARD bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+NODISCARD bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n@@ -409,7 +410,7 @@ bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& pa\n bool IsNullDummyEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n \n /** When there are blocks in the active chain with missing data, rewind the chainstate and remove them from the block index */\n-bool RewindBlockIndex(const CChainParams& params);\n+NODISCARD bool RewindBlockIndex(const CChainParams& params);\n \n /** Update uncommitted block structures (currently: only the witness reserved value). This is safe for submitted blocks. */\n void UpdateUncommittedBlockStructures(CBlock& block, const CBlockIndex* pindexPrev, const Consensus::Params& consensusParams);\n@@ -422,11 +423,11 @@ class CVerifyDB {\n public:\n     CVerifyDB();\n     ~CVerifyDB();\n-    bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n+    NODISCARD bool VerifyDB(const CChainParams& chainparams, CCoinsView *coinsview, int nCheckLevel, int nCheckDepth);\n };\n \n /** Replay blocks that aren't fully applied to the database. */\n-bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n+NODISCARD bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n {\n@@ -443,10 +444,10 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n  * May not be called in a\n  * validationinterface callback.\n  */\n-bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);\n+NODISCARD bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex) LOCKS_EXCLUDED(cs_main);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+NODISCARD bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  }
]