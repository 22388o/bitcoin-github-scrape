[
  {
    "sha": "de41f72b4a751e08b56fddb66c88c8829418073e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZTQxZjcyYjRhNzUxZTA4YjU2ZmRkYjY2Yzg4Yzg4Mjk0MTgwNzNl",
    "commit": {
      "author": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2018-12-03T11:38:41Z"
      },
      "committer": {
        "name": "Akio Nakamura",
        "email": "nakamura@dgtechnologies.co.jp",
        "date": "2020-08-06T13:56:24Z"
      },
      "message": "util: Improve evaluation of includeconf lines\n\nImprove property evaluation way in bitcoin.conf\n\nThis PR intends to make it easy to understand how the configuration\nfiles are interpreted.\n\n1. Evaluate \"includeconf\" at the position described in the config file\n(like #include directive in C/C++), rather than at the end.\n\n2. If once a section is specified with square brackets like [main],\nthe only way to configure another network is to use square brackets\nagain, e.g. [test].\n\n3. In the \"included\" config file, the section is taken over from\nthe \"including\" file. If no sections are specified yet, using square\nbrackets or section prefix is still possible in the \"included\" file.\n\n4. Changing the section in the \"included\" config file does not affects\nthe including file. The section of the including file is kept.\n\n5. If the \"included\" config file is included after the section has been\nspecified by using square brackets or if they are included by using\nsection prefix, any square brackets can not be used in that file.\n\nex) With Following 3 files, the properties are read as:\nport=8444, main.port=8445, test.port=8442, regtest.port: undefined\n\nbitcoin.conf\n---\ntest.includeconf=inc1.conf\nincludeconf=inc2.conf\nport=8441   # ignored (2nd appearance of w/o section)\n\ninc1.conf\n---\nport=8442   # test\n[regtest]\nport=8443   # ignored\n\ninc2.conf\n---\nport=8444   # w/o section\n[main]\nport=8445   # main\n[regtest]",
      "tree": {
        "sha": "2f0a376a24d6ec145ff8d91f046c1f3733705956",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2f0a376a24d6ec145ff8d91f046c1f3733705956"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/de41f72b4a751e08b56fddb66c88c8829418073e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de41f72b4a751e08b56fddb66c88c8829418073e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/de41f72b4a751e08b56fddb66c88c8829418073e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/de41f72b4a751e08b56fddb66c88c8829418073e/comments",
    "author": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "AkioNak",
      "id": 24285095,
      "node_id": "MDQ6VXNlcjI0Mjg1MDk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/24285095?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AkioNak",
      "html_url": "https://github.com/AkioNak",
      "followers_url": "https://api.github.com/users/AkioNak/followers",
      "following_url": "https://api.github.com/users/AkioNak/following{/other_user}",
      "gists_url": "https://api.github.com/users/AkioNak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AkioNak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AkioNak/subscriptions",
      "organizations_url": "https://api.github.com/users/AkioNak/orgs",
      "repos_url": "https://api.github.com/users/AkioNak/repos",
      "events_url": "https://api.github.com/users/AkioNak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AkioNak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82127d27c9001eee3eb28df67ce2e6eace620423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82127d27c9001eee3eb28df67ce2e6eace620423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82127d27c9001eee3eb28df67ce2e6eace620423"
      }
    ],
    "stats": {
      "total": 212,
      "additions": 133,
      "deletions": 79
    },
    "files": [
      {
        "sha": "5e8d9c2aa2d4675cd734e2bddf9bd065c401414a",
        "filename": "doc/release-notes-14866.md",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de41f72b4a751e08b56fddb66c88c8829418073e/doc/release-notes-14866.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de41f72b4a751e08b56fddb66c88c8829418073e/doc/release-notes-14866.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-14866.md?ref=de41f72b4a751e08b56fddb66c88c8829418073e",
        "patch": "@@ -0,0 +1,7 @@\n+Updated settings\n+----------------\n+\n+- Included configurations from includeconf lines in [main] [test] and [regtest]\n+  sections of the config file are now evaluated in context of that section and\n+  not treated like top-level includes. Config files included within a section\n+  are also now disallowed from changing settings in other sections. (#14866)"
      },
      {
        "sha": "117b6e006ded7e7d4a183837a38cfa702943bbf3",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 67,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de41f72b4a751e08b56fddb66c88c8829418073e/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de41f72b4a751e08b56fddb66c88c8829418073e/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=de41f72b4a751e08b56fddb66c88c8829418073e",
        "patch": "@@ -15,7 +15,6 @@\n #include <util/string.h>\n #include <util/translation.h>\n \n-\n #if (defined(__FreeBSD__) || defined(__OpenBSD__) || defined(__DragonFly__))\n #include <pthread.h>\n #include <pthread_np.h>\n@@ -750,11 +749,14 @@ fs::path GetConfigFile(const std::string& confPath)\n     return AbsPathForConfigVal(fs::path(confPath), false);\n }\n \n-static bool GetConfigOptions(std::istream& stream, const std::string& filepath, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections)\n+static bool GetConfigOptions(std::istream& stream, const std::string& filepath, const std::string& initial_section, std::string& error, std::vector<std::pair<std::string, std::string>>& options, std::list<SectionInfo>& sections, int depth)\n {\n-    std::string str, prefix;\n+    static const int MAX_INCLUDECONF_DEPTH = 1;\n+    std::string str;\n     std::string::size_type pos;\n     int linenr = 1;\n+    bool have_initial_section = !initial_section.empty();\n+    std::string section = initial_section;\n     while (std::getline(stream, str)) {\n         bool used_hash = false;\n         if ((pos = str.find('#')) != std::string::npos) {\n@@ -765,25 +767,69 @@ static bool GetConfigOptions(std::istream& stream, const std::string& filepath,\n         str = TrimString(str, pattern);\n         if (!str.empty()) {\n             if (*str.begin() == '[' && *str.rbegin() == ']') {\n-                const std::string section = str.substr(1, str.size() - 2);\n+                std::string tmp_section = str.substr(1, str.size() - 2);\n+                if (tmp_section.empty()) {\n+                    error = strprintf(\"parse error on %s:%i, empty section name should not be used\", filepath, linenr);\n+                    return false;\n+                }\n+                if (have_initial_section && section != tmp_section) {\n+                    tfm::format(std::cerr, \"Warning: %s:%i: square bracket should not use here to start a section, rest of this file are ignored\\n\", filepath, linenr);\n+                    return true;\n+                }\n+                section = tmp_section;\n                 sections.emplace_back(SectionInfo{section, filepath, linenr});\n-                prefix = section + '.';\n             } else if (*str.begin() == '-') {\n-                error = strprintf(\"parse error on line %i: %s, options in configuration file must be specified without leading -\", linenr, str);\n+                error = strprintf(\"parse error on %s:%i: %s, options in configuration file must be specified without leading -\", filepath, linenr, str);\n                 return false;\n             } else if ((pos = str.find('=')) != std::string::npos) {\n-                std::string name = prefix + TrimString(str.substr(0, pos), pattern);\n+                std::string tmp_section;\n+                std::string key = TrimString(str.substr(0, pos), pattern);\n+                std::string::size_type separator_pos;\n+                bool simple_arg = true;\n+                if ((separator_pos = key.rfind('.')) == std::string::npos) {\n+                    tmp_section = section;\n+                } else {\n+                    simple_arg = false;\n+                    tmp_section = key.substr(0, separator_pos);\n+                    if (tmp_section.empty()) {\n+                        error = strprintf(\"parse error on %s:%i, empty section name should not be used\", filepath, linenr);\n+                        return false;\n+                    }\n+                    if (!section.empty() && section != tmp_section) {\n+                        tfm::format(std::cerr, \"Warning: %s:%i: period should not use here to specify a section\\n\", filepath, linenr);\n+                        ++linenr;\n+                        continue;\n+                    }\n+                    sections.emplace_back(SectionInfo{tmp_section, filepath, linenr});\n+                    key = key.substr(separator_pos + 1);\n+                }\n                 std::string value = TrimString(str.substr(pos + 1), pattern);\n-                if (used_hash && name.find(\"rpcpassword\") != std::string::npos) {\n-                    error = strprintf(\"parse error on line %i, using # in rpcpassword can be ambiguous and should be avoided\", linenr);\n+                if (used_hash && key == \"rpcpassword\") {\n+                    error = strprintf(\"parse error on %s:%i, using # in rpcpassword can be ambiguous and should be avoided\", filepath, linenr);\n                     return false;\n                 }\n-                options.emplace_back(name, value);\n-                if ((pos = name.rfind('.')) != std::string::npos && prefix.length() <= pos) {\n-                    sections.emplace_back(SectionInfo{name.substr(0, pos), filepath, linenr});\n+                options.emplace_back(tmp_section.empty() ? key : tmp_section + '.' + key, value);\n+                if (key == \"includeconf\") {\n+                    if (depth < 0) {\n+                        continue;\n+                    }\n+                    if (depth < MAX_INCLUDECONF_DEPTH) {\n+                        fsbridge::ifstream include_config(GetConfigFile(value));\n+                        if (include_config.good()) {\n+                            if (!GetConfigOptions(include_config, value, tmp_section, error, options, sections, depth + 1)) {\n+                                return false;\n+                            }\n+                            LogPrintf(\"Included configuration file %s\\n\", value);\n+                        } else {\n+                            error = \"Failed to include configuration file \" + value;\n+                            return false;\n+                        }\n+                    } else {\n+                        tfm::format(std::cerr, \"Warning: %s:%i: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", filepath, linenr, value);\n+                    }\n                 }\n             } else {\n-                error = strprintf(\"parse error on line %i: %s\", linenr, str);\n+                error = strprintf(\"parse error on %s:%i: %s\", filepath, linenr, str);\n                 if (str.size() >= 2 && str.substr(0, 2) == \"no\") {\n                     error += strprintf(\", if you intended to specify a negated option, use %s=1 instead\", str);\n                 }\n@@ -795,13 +841,16 @@ static bool GetConfigOptions(std::istream& stream, const std::string& filepath,\n     return true;\n }\n \n-bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys)\n+bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys, bool includeconf_enabled)\n {\n-    LOCK(cs_args);\n     std::vector<std::pair<std::string, std::string>> options;\n-    if (!GetConfigOptions(stream, filepath, error, options, m_config_sections)) {\n+    std::string initial_section;\n+    std::list<SectionInfo> sections = std::list<SectionInfo>();\n+    if (!GetConfigOptions(stream, filepath, initial_section, error, options, sections, includeconf_enabled ? 0 : -1)) {\n         return false;\n     }\n+    LOCK(cs_args);\n+    m_config_sections = sections;\n     for (const std::pair<std::string, std::string>& option : options) {\n         std::string section;\n         std::string key = option.first;\n@@ -837,9 +886,6 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n \n     // ok to not have a config file\n     if (stream.good()) {\n-        if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys)) {\n-            return false;\n-        }\n         // `-includeconf` cannot be included in the command line arguments except\n         // as `-noincludeconf` (which indicates that no included conf file should be used).\n         bool use_conf_file{true};\n@@ -851,54 +897,8 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n                 use_conf_file = false;\n             }\n         }\n-        if (use_conf_file) {\n-            std::string chain_id = GetChainName();\n-            std::vector<std::string> conf_file_names;\n-\n-            auto add_includes = [&](const std::string& network, size_t skip = 0) {\n-                size_t num_values = 0;\n-                LOCK(cs_args);\n-                if (auto* section = util::FindKey(m_settings.ro_config, network)) {\n-                    if (auto* values = util::FindKey(*section, \"includeconf\")) {\n-                        for (size_t i = std::max(skip, util::SettingsSpan(*values).negated()); i < values->size(); ++i) {\n-                            conf_file_names.push_back((*values)[i].get_str());\n-                        }\n-                        num_values = values->size();\n-                    }\n-                }\n-                return num_values;\n-            };\n-\n-            // We haven't set m_network yet (that happens in SelectParams()), so manually check\n-            // for network.includeconf args.\n-            const size_t chain_includes = add_includes(chain_id);\n-            const size_t default_includes = add_includes({});\n-\n-            for (const std::string& conf_file_name : conf_file_names) {\n-                fsbridge::ifstream conf_file_stream(GetConfigFile(conf_file_name));\n-                if (conf_file_stream.good()) {\n-                    if (!ReadConfigStream(conf_file_stream, conf_file_name, error, ignore_invalid_keys)) {\n-                        return false;\n-                    }\n-                    LogPrintf(\"Included configuration file %s\\n\", conf_file_name);\n-                } else {\n-                    error = \"Failed to include configuration file \" + conf_file_name;\n-                    return false;\n-                }\n-            }\n-\n-            // Warn about recursive -includeconf\n-            conf_file_names.clear();\n-            add_includes(chain_id, /* skip= */ chain_includes);\n-            add_includes({}, /* skip= */ default_includes);\n-            std::string chain_id_final = GetChainName();\n-            if (chain_id_final != chain_id) {\n-                // Also warn about recursive includeconf for the chain that was specified in one of the includeconfs\n-                add_includes(chain_id_final);\n-            }\n-            for (const std::string& conf_file_name : conf_file_names) {\n-                tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", conf_file_name);\n-            }\n+        if (!ReadConfigStream(stream, confPath, error, ignore_invalid_keys, use_conf_file)) {\n+            return false;\n         }\n     }\n "
      },
      {
        "sha": "3cbcd5392bd8f74c3e59f1a44daf6acc9e1de81a",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de41f72b4a751e08b56fddb66c88c8829418073e/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de41f72b4a751e08b56fddb66c88c8829418073e/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=de41f72b4a751e08b56fddb66c88c8829418073e",
        "patch": "@@ -188,7 +188,7 @@ class ArgsManager\n     std::map<OptionsCategory, std::map<std::string, Arg>> m_available_args GUARDED_BY(cs_args);\n     std::list<SectionInfo> m_config_sections GUARDED_BY(cs_args);\n \n-    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false);\n+    NODISCARD bool ReadConfigStream(std::istream& stream, const std::string& filepath, std::string& error, bool ignore_invalid_keys = false, bool includeconf_enabled = true);\n \n     /**\n      * Returns true if settings values from the default section should be used,"
      },
      {
        "sha": "c1bb9cc52c23d962f4353c0ada6c5a5554f01471",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 57,
        "deletions": 10,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de41f72b4a751e08b56fddb66c88c8829418073e/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de41f72b4a751e08b56fddb66c88c8829418073e/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=de41f72b4a751e08b56fddb66c88c8829418073e",
        "patch": "@@ -19,8 +19,11 @@ def test_config_file_parser(self):\n         # Assume node is stopped\n \n         inc_conf_file_path = os.path.join(self.nodes[0].datadir, 'include.conf')\n-        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+        conf_base_path = os.path.join(self.nodes[0].datadir, 'bitcoin.conf')\n+        conf_base_contents = open(conf_base_path, encoding='utf-8').read()\n+        with open(conf_base_path, 'w', encoding='utf-8') as conf:\n             conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n+            conf.write(conf_base_contents)\n \n         self.nodes[0].assert_start_raises_init_error(\n             expected_msg='Error: Error parsing command line arguments: Invalid parameter -dash_cli=1',\n@@ -34,7 +37,7 @@ def test_config_file_parser(self):\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('-dash=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 1: -dash=1, options in configuration file must be specified without leading -')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on ' + inc_conf_file_path + ':1: -dash=1, options in configuration file must be specified without leading -')\n \n         if self.is_wallet_compiled():\n             with open(inc_conf_file_path, 'w', encoding='utf8') as conf:\n@@ -44,27 +47,44 @@ def test_config_file_parser(self):\n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('regtest=0\\n') # mainnet\n             conf.write('acceptnonstdtxn=1\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: acceptnonstdtxn is not currently supported for main chain')\n+        self.nodes[0].assert_start_raises_init_error(\n+            expected_msg='Error: acceptnonstdtxn is not currently supported for main chain',\n+            extra_args=['-conf={}'.format(inc_conf_file_path)],\n+        )\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('nono\\n')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 1: nono, if you intended to specify a negated option, use nono=1 instead')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on ' + inc_conf_file_path + ':1: nono, if you intended to specify a negated option, use nono=1 instead')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('server=1\\nrpcuser=someuser\\nrpcpassword=some#pass')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on ' + inc_conf_file_path + ':3, using # in rpcpassword can be ambiguous and should be avoided')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('server=1\\nrpcuser=someuser\\nmain.rpcpassword=some#pass')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 3, using # in rpcpassword can be ambiguous and should be avoided')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on ' + inc_conf_file_path + ':3, using # in rpcpassword can be ambiguous and should be avoided')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('server=1\\nrpcuser=someuser\\n[main]\\nrpcpassword=some#pass')\n-        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on line 4, using # in rpcpassword can be ambiguous and should be avoided')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on ' + inc_conf_file_path + ':4, using # in rpcpassword can be ambiguous and should be avoided')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('[]')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on ' + inc_conf_file_path + ':1, empty section name should not be used')\n+\n+        with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n+            conf.write('.foo=1')\n+        self.nodes[0].assert_start_raises_init_error(expected_msg='Error: Error reading configuration file: parse error on ' + inc_conf_file_path + ':1, empty section name should not be used')\n \n         inc_conf_file2_path = os.path.join(self.nodes[0].datadir, 'include2.conf')\n-        with open(os.path.join(self.nodes[0].datadir, 'bitcoin.conf'), 'a', encoding='utf-8') as conf:\n+        inc_conf_file3_path = os.path.join(self.nodes[0].datadir, 'include3.conf')\n+        open(inc_conf_file2_path, 'w', encoding='utf-8').close() # create empty file\n+        open(inc_conf_file3_path, 'w', encoding='utf-8').close() # create empty file\n+        with open(conf_base_path, 'w', encoding='utf-8') as conf:\n+            conf.write('regtest=1\\nregtest.includeconf={}\\n'.format(inc_conf_file3_path))\n+            conf.write('includeconf={}\\n'.format(inc_conf_file_path))\n             conf.write('includeconf={}\\n'.format(inc_conf_file2_path))\n+            conf.write(conf_base_contents)\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n             conf.write('testnot.datadir=1\\n')\n@@ -74,9 +94,36 @@ def test_config_file_parser(self):\n         self.nodes[0].stop_node(expected_stderr='Warning: ' + inc_conf_file_path + ':1 Section [testnot] is not recognized.' + os.linesep + inc_conf_file2_path + ':1 Section [testnet] is not recognized.')\n \n         with open(inc_conf_file_path, 'w', encoding='utf-8') as conf:\n-            conf.write('')  # clear\n+            conf.write('uacomment=s0\\n'\n+                'regtest.uacomment=s1\\n'\n+                '[regtest]\\n'\n+                'uacomment=s2\\n')\n         with open(inc_conf_file2_path, 'w', encoding='utf-8') as conf:\n-            conf.write('')  # clear\n+            conf.write( 'uacomment=s3\\n'\n+                'regtest.uacomment=s4\\n'\n+                'test.uacomment=s5\\n'\n+                '[regtest]\\n'\n+                'uacomment=s6\\n'\n+                '[test]\\n'\n+                'uacomment=s7\\n')\n+        with open(inc_conf_file3_path, 'w', encoding='utf-8') as conf:\n+            conf.write( 'uacomment=s8\\n'\n+                'regtest.uacomment=s9\\n'\n+                'test.uacomment=sa\\n'\n+                '[regtest]\\n'\n+                'uacomment=sb\\n'\n+                '[test]\\n'\n+                'uacomment=sc\\n')\n+        self.nodes[0].wait_until_stopped()\n+        self.start_node(0)\n+        subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n+        assert subversion.endswith(\"s8; s9; sb; s1; s2; s4; s6; s0; s3)/\")\n+        self.nodes[0].stop_node(expected_stderr=\n+            'Warning: ' + inc_conf_file3_path + ':3: period should not use here to specify a section' + os.linesep +\n+            'Warning: ' + inc_conf_file3_path + ':6: square bracket should not use here to start a section, rest of this file are ignored')\n+\n+        with open(conf_base_path, 'w', encoding='utf-8') as conf:\n+            conf.write(conf_base_contents)\n \n     def test_log_buffer(self):\n         with self.nodes[0].assert_debug_log(expected_msgs=['Warning: parsed potentially confusing double-negative -connect=0\\n']):"
      },
      {
        "sha": "234cdb377e403d708afb247efbbcd3a5cf2488fa",
        "filename": "test/functional/feature_includeconf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/de41f72b4a751e08b56fddb66c88c8829418073e/test/functional/feature_includeconf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/de41f72b4a751e08b56fddb66c88c8829418073e/test/functional/feature_includeconf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_includeconf.py?ref=de41f72b4a751e08b56fddb66c88c8829418073e",
        "patch": "@@ -52,7 +52,7 @@ def run_test(self):\n \n         subversion = self.nodes[0].getnetworkinfo()[\"subversion\"]\n         assert subversion.endswith(\"main; relative)/\")\n-        self.stop_node(0, expected_stderr=\"warning: -includeconf cannot be used from included files; ignoring -includeconf=relative2.conf\")\n+        self.stop_node(0, expected_stderr=\"Warning: relative.conf:2: -includeconf cannot be used from included files; ignoring -includeconf=relative2.conf\")\n \n         self.log.info(\"-includeconf cannot contain invalid arg\")\n "
      }
    ]
  }
]