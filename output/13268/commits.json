[
  {
    "sha": "8689a1ec80bf026d58789d54d7c29651ca6373b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Njg5YTFlYzgwYmYwMjZkNTg3ODlkNTRkN2MyOTY1MWNhNjM3M2I5",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-17T20:56:25Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-30T00:15:26Z"
      },
      "message": "Prefer bounds-checked vin/vout lookup to assert",
      "tree": {
        "sha": "c214014c3fb18168ea18f355d646fa543fb4e8de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c214014c3fb18168ea18f355d646fa543fb4e8de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8689a1ec80bf026d58789d54d7c29651ca6373b9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbXlieAAoJEG7l83hfeLNFAQ0H/jiSOMyIVdQvPF0b3NbCEuYy\nXNkHc2fqDgBxYmJBmqs6rKd+n2dDXkoWDU0VPVQEJ+Cqv/CZtxsGE2D4cDwmkULG\n7lIApbQRbja00eYebWGodjtdm7U8ki12O8OF2yKnHptHzhGiB3hGsawmkq7heoOl\nVPnOCkdRbFxRVrgdVHtE79AmdetD+6PyzMiYknB/i+nbNeUg0JrbQWhJeiyxjgKI\ngAiZqxw0CQp1E0Q3vMwueHQCezrfxhjJnVD2v1wmNPQd/hbxDwTNCdy++ev6x0R0\nm42cTkWtm1OVwxZd/YNkGZpvnUSOQxm9xr3frDcTvAGeR6LMfCVBvTf/CiORH7o=\n=5EJl\n-----END PGP SIGNATURE-----",
        "payload": "tree c214014c3fb18168ea18f355d646fa543fb4e8de\nparent 222e627322ce4de3292259a4868d23983f2a5394\nauthor Ben Woosley <ben.woosley@gmail.com> 1526590585 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1532909726 -0400\n\nPrefer bounds-checked vin/vout lookup to assert\n\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8689a1ec80bf026d58789d54d7c29651ca6373b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8689a1ec80bf026d58789d54d7c29651ca6373b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8689a1ec80bf026d58789d54d7c29651ca6373b9/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "222e627322ce4de3292259a4868d23983f2a5394",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/222e627322ce4de3292259a4868d23983f2a5394",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/222e627322ce4de3292259a4868d23983f2a5394"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 11,
      "deletions": 15
    },
    "files": [
      {
        "sha": "339ca8c2cd6a84a69730a05cd43a296c2ac925cf",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=8689a1ec80bf026d58789d54d7c29651ca6373b9",
        "patch": "@@ -1233,7 +1233,7 @@ template PrecomputedTransactionData::PrecomputedTransactionData(const CMutableTr\n template <class T>\n uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn, int nHashType, const CAmount& amount, SigVersion sigversion, const PrecomputedTransactionData* cache)\n {\n-    assert(nIn < txTo.vin.size());\n+    const CTxIn& txin = txTo.vin.at(nIn);\n \n     if (sigversion == SigVersion::WITNESS_V0) {\n         uint256 hashPrevouts;\n@@ -1267,10 +1267,10 @@ uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn\n         // The input being signed (replacing the scriptSig with scriptCode + amount)\n         // The prevout may already be contained in hashPrevout, and the nSequence\n         // may already be contain in hashSequence.\n-        ss << txTo.vin[nIn].prevout;\n+        ss << txin.prevout;\n         ss << scriptCode;\n         ss << amount;\n-        ss << txTo.vin[nIn].nSequence;\n+        ss << txin.nSequence;\n         // Outputs (none/one/all, depending on flags)\n         ss << hashOutputs;\n         // Locktime"
      },
      {
        "sha": "3b7066892d3b44de40cb2106ce4e78f1358c3059",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=8689a1ec80bf026d58789d54d7c29651ca6373b9",
        "patch": "@@ -300,9 +300,9 @@ struct Stacks\n SignatureData DataFromTransaction(const CMutableTransaction& tx, unsigned int nIn, const CTxOut& txout)\n {\n     SignatureData data;\n-    assert(tx.vin.size() > nIn);\n-    data.scriptSig = tx.vin[nIn].scriptSig;\n-    data.scriptWitness = tx.vin[nIn].scriptWitness;\n+    const CTxIn& txin = tx.vin.at(nIn);\n+    data.scriptSig = txin.scriptSig;\n+    data.scriptWitness = txin.scriptWitness;\n     Stacks stack(data);\n \n     // Get signatures\n@@ -399,10 +399,8 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n \n bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n {\n-    assert(nIn < txTo.vin.size());\n-    CTxIn& txin = txTo.vin[nIn];\n-    assert(txin.prevout.n < txFrom.vout.size());\n-    const CTxOut& txout = txFrom.vout[txin.prevout.n];\n+    CTxIn& txin = txTo.vin.at(nIn);\n+    const CTxOut& txout = txFrom.vout.at(txin.prevout.n);\n \n     return SignSignature(provider, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n }"
      },
      {
        "sha": "6071d452692b1c6f744b3e38e0548531059bf531",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8689a1ec80bf026d58789d54d7c29651ca6373b9",
        "patch": "@@ -650,7 +650,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n             if (it2 != mapTx.end()) {\n                 const CTransaction& tx2 = it2->GetTx();\n-                assert(tx2.vout.size() > txin.prevout.n && !tx2.vout[txin.prevout.n].IsNull());\n+                assert(!tx2.vout.at(txin.prevout.n).IsNull());\n                 fDependsWait = true;\n                 if (setParentCheck.insert(it2).second) {\n                     parentSizes += it2->GetTxSize();"
      },
      {
        "sha": "23d7d06599281f17c160440678290fc8e1541cd5",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=8689a1ec80bf026d58789d54d7c29651ca6373b9",
        "patch": "@@ -545,8 +545,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n         const CTransactionRef& txFrom = pool.get(txin.prevout.hash);\n         if (txFrom) {\n             assert(txFrom->GetHash() == txin.prevout.hash);\n-            assert(txFrom->vout.size() > txin.prevout.n);\n-            assert(txFrom->vout[txin.prevout.n] == coin.out);\n+            assert(txFrom->vout.at(txin.prevout.n) == coin.out);\n         } else {\n             const Coin& coinFromDisk = pcoinsTip->AccessCoin(txin.prevout);\n             assert(!coinFromDisk.IsSpent());"
      },
      {
        "sha": "91a2ea89221946bf0ca55c650c4defaeb8a95d88",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8689a1ec80bf026d58789d54d7c29651ca6373b9/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8689a1ec80bf026d58789d54d7c29651ca6373b9",
        "patch": "@@ -1573,8 +1573,7 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wall\n         if (mi == wallet->mapWallet.end()) {\n             return -1;\n         }\n-        assert(input.prevout.n < mi->second.tx->vout.size());\n-        txouts.emplace_back(mi->second.tx->vout[input.prevout.n]);\n+        txouts.emplace_back(mi->second.tx->vout.at(input.prevout.n));\n     }\n     return CalculateMaximumSignedTxSize(tx, wallet, txouts);\n }"
      }
    ]
  },
  {
    "sha": "4e6baa07a0632ebfce48c4992c37374178d37cf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTZiYWEwN2EwNjMyZWJmY2U0OGM0OTkyYzM3Mzc0MTc4ZDM3Y2Y1",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-17T22:12:45Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-30T00:16:41Z"
      },
      "message": "Perform bounds checking on vout/vin access\n\nThis adds bounds checking to any access where bounds checking was\nnot already locally ensured.\n\nMost of the remaining unchecked access is in the context of a loop over\nvalid indexes, so already safe.",
      "tree": {
        "sha": "d35c779d0f3a08a29cde2db4eabf0ed439a8b355",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d35c779d0f3a08a29cde2db4eabf0ed439a8b355"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e6baa07a0632ebfce48c4992c37374178d37cf5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbXljpAAoJEG7l83hfeLNFPO8H/iyrVpoS6HayYUedIhowrm9H\n2ef44MIIaJBRFEChQ+pdV9+hRpLpMMdLVTQA6w0usNe/KMAN0aEC9h0KvieltXpE\n4L+WYaymQaUlAeh9lUpTs0nfOaK+X7AwuVz/9Ns8JAPbGuYDf9Yrouejh4jZiCJb\nfrRXMaAs5JQ2NF6KSoelYfcjpxiqqaWU7c8DUIW+NFpWlkkmkQ+sLu8KaBLD35wF\nmpMyDZS9cupEqzmAmnsgkLB/LRgbUpS/VdiaLgg8OwFRGa3QPYdTQsn+KW788mmq\nLyElAGcQEsYz4rdRzzwrHLxowpZvQ2yN+ercN0ZpXh5lK/Ow1kaah5KIHvdMOkw=\n=FXLW\n-----END PGP SIGNATURE-----",
        "payload": "tree d35c779d0f3a08a29cde2db4eabf0ed439a8b355\nparent 8689a1ec80bf026d58789d54d7c29651ca6373b9\nauthor Ben Woosley <ben.woosley@gmail.com> 1526595165 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1532909801 -0400\n\nPerform bounds checking on vout/vin access\n\nThis adds bounds checking to any access where bounds checking was\nnot already locally ensured.\n\nMost of the remaining unchecked access is in the context of a loop over\nvalid indexes, so already safe."
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e6baa07a0632ebfce48c4992c37374178d37cf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e6baa07a0632ebfce48c4992c37374178d37cf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e6baa07a0632ebfce48c4992c37374178d37cf5/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8689a1ec80bf026d58789d54d7c29651ca6373b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8689a1ec80bf026d58789d54d7c29651ca6373b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8689a1ec80bf026d58789d54d7c29651ca6373b9"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 26,
      "deletions": 29
    },
    "files": [
      {
        "sha": "d17a4bd21f17ea27df6cd31e828a54286631848a",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -107,7 +107,7 @@ WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n {\n     WalletTxOut result;\n-    result.txout = wtx.tx->vout[n];\n+    result.txout = wtx.tx->vout.at(n);\n     result.time = wtx.GetTxTime();\n     result.depth_in_main_chain = depth;\n     result.is_spent = wallet.IsSpent(wtx.GetHash(), n);"
      },
      {
        "sha": "1d0b5c59f559394f09d96494ccee9b8e09ebe149",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -56,7 +56,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n                 if (out.amount() <= 0) continue;\n                 if (i == nChangePosRet)\n                     i++;\n-                subtotal += walletTransaction->vout[i].nValue;\n+                subtotal += walletTransaction->vout.at(i).nValue;\n                 i++;\n             }\n             rcp.amount = subtotal;\n@@ -65,7 +65,7 @@ void WalletModelTransaction::reassignAmounts(int nChangePosRet)\n         {\n             if (i == nChangePosRet)\n                 i++;\n-            rcp.amount = walletTransaction->vout[i].nValue;\n+            rcp.amount = walletTransaction->vout.at(i).nValue;\n             i++;\n         }\n     }"
      },
      {
        "sha": "dbdcabbb740638d9ae52f94bb10fe43a6c33c51c",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -1137,7 +1137,7 @@ class CTransactionSignatureSerializer\n         if (fAnyoneCanPay)\n             nInput = nIn;\n         // Serialize the prevout\n-        ::Serialize(s, txTo.vin[nInput].prevout);\n+        ::Serialize(s, txTo.vin.at(nInput).prevout);\n         // Serialize the script\n         if (nInput != nIn)\n             // Blank out other inputs' signatures\n@@ -1149,7 +1149,7 @@ class CTransactionSignatureSerializer\n             // let the others update at will\n             ::Serialize(s, (int)0);\n         else\n-            ::Serialize(s, txTo.vin[nInput].nSequence);\n+            ::Serialize(s, txTo.vin.at(nInput).nSequence);\n     }\n \n     /** Serialize an output of txTo */\n@@ -1159,7 +1159,7 @@ class CTransactionSignatureSerializer\n             // Do not lock-in the txout payee at other indices as txin\n             ::Serialize(s, CTxOut());\n         else\n-            ::Serialize(s, txTo.vout[nOutput]);\n+            ::Serialize(s, txTo.vout.at(nOutput));\n     }\n \n     /** Serialize txTo */\n@@ -1359,7 +1359,7 @@ bool GenericTransactionSignatureChecker<T>::CheckLockTime(const CScriptNum& nLoc\n     // prevent this condition. Alternatively we could test all\n     // inputs, but testing just this input minimizes the data\n     // required to prove correct CHECKLOCKTIMEVERIFY execution.\n-    if (CTxIn::SEQUENCE_FINAL == txTo->vin[nIn].nSequence)\n+    if (CTxIn::SEQUENCE_FINAL == txTo->vin.at(nIn).nSequence)\n         return false;\n \n     return true;\n@@ -1370,7 +1370,7 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n {\n     // Relative lock times are supported by comparing the passed\n     // in operand to the sequence number of the input.\n-    const int64_t txToSequence = (int64_t)txTo->vin[nIn].nSequence;\n+    const int64_t txToSequence = (int64_t)txTo->vin.at(nIn).nSequence;\n \n     // Fail if the transaction's version number is not set high\n     // enough to trigger BIP 68 rules."
      },
      {
        "sha": "9a1a0030a61adbf819fdc54fbf5b76ee6e2c0714",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -1352,9 +1352,8 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight)\n }\n \n bool CScriptCheck::operator()() {\n-    const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n-    const CScriptWitness *witness = &ptxTo->vin[nIn].scriptWitness;\n-    return VerifyScript(scriptSig, m_tx_out.scriptPubKey, witness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n+    const CTxIn txin = ptxTo->vin.at(nIn);\n+    return VerifyScript(txin.scriptSig, m_tx_out.scriptPubKey, &txin.scriptWitness, nFlags, CachingTransactionSignatureChecker(ptxTo, nIn, m_tx_out.nValue, cacheStore, *txdata), &error);\n }\n \n int GetSpendHeight(const CCoinsViewCache& inputs)\n@@ -3336,7 +3335,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-witness-nonce-size\", true, strprintf(\"%s : invalid witness reserved value size\", __func__));\n             }\n             CHash256().Write(hashWitness.begin(), 32).Write(&block.vtx[0]->vin[0].scriptWitness.stack[0][0], 32).Finalize(hashWitness.begin());\n-            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout[commitpos].scriptPubKey[6], 32)) {\n+            if (memcmp(hashWitness.begin(), &block.vtx[0]->vout.at(commitpos).scriptPubKey[6], 32)) {\n                 return state.DoS(100, false, REJECT_INVALID, \"bad-witness-merkle-match\", true, strprintf(\"%s : witness merkle commitment mismatch\", __func__));\n             }\n             fHaveWitness = true;"
      },
      {
        "sha": "80b71698d159147ce6ecace0c5a175ed24556c4e",
        "filename": "src/wallet/coinselection.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/coinselection.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/coinselection.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coinselection.h?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -20,11 +20,9 @@ class CInputCoin {\n     {\n         if (!tx)\n             throw std::invalid_argument(\"tx should not be null\");\n-        if (i >= tx->vout.size())\n-            throw std::out_of_range(\"The output index is out of range\");\n \n         outpoint = COutPoint(tx->GetHash(), i);\n-        txout = tx->vout[i];\n+        txout = tx->vout.at(i);\n         effective_value = txout.nValue;\n     }\n "
      },
      {
        "sha": "42c3eec28501e580a9a8430c9da80242496d798a",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -186,7 +186,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n     CAmount nDelta = new_fee - old_fee;\n     assert(nDelta > 0);\n     mtx = CMutableTransaction{*wtx.tx};\n-    CTxOut* poutput = &(mtx.vout[nOutput]);\n+    CTxOut* poutput = &(mtx.vout.at(nOutput));\n     if (poutput->nValue < nDelta) {\n         errors.push_back(\"Change output is too small to bump the fee\");\n         return Result::WALLET_ERROR;"
      },
      {
        "sha": "3016e80ad5b3d861561f310950cc80ab568d187d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -3410,8 +3410,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n \n     for (const COutput& out : vecOutputs) {\n         CTxDestination address;\n-        const CScript& scriptPubKey = out.tx->tx->vout[out.i].scriptPubKey;\n-        bool fValidAddress = ExtractDestination(scriptPubKey, address);\n+        const CTxOut& txout = out.tx->tx->vout.at(out.i);\n+        bool fValidAddress = ExtractDestination(txout.scriptPubKey, address);\n \n         if (destinations.size() && (!fValidAddress || !destinations.count(address)))\n             continue;\n@@ -3431,7 +3431,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 }\n             }\n \n-            if (scriptPubKey.IsPayToScriptHash()) {\n+            if (txout.scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n@@ -3440,8 +3440,8 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             }\n         }\n \n-        entry.pushKV(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end()));\n-        entry.pushKV(\"amount\", ValueFromAmount(out.tx->tx->vout[out.i].nValue));\n+        entry.pushKV(\"scriptPubKey\", HexStr(txout.scriptPubKey.begin(), txout.scriptPubKey.end()));\n+        entry.pushKV(\"amount\", ValueFromAmount(txout.nValue));\n         entry.pushKV(\"confirmations\", out.nDepth);\n         entry.pushKV(\"spendable\", out.fSpendable);\n         entry.pushKV(\"solvable\", out.fSolvable);"
      },
      {
        "sha": "18dd64063db354ac09333e7682700edd43178e3a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -99,7 +99,7 @@ const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"00000000000000000000000000000000\n \n std::string COutput::ToString() const\n {\n-    return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout[i].nValue));\n+    return strprintf(\"COutput(%s, %d, %d) [%s]\", tx->GetHash().ToString(), i, nDepth, FormatMoney(tx->tx->vout.at(i).nValue));\n }\n \n class CAffectedKeysVisitor : public boost::static_visitor<void> {\n@@ -1553,7 +1553,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     int nIn = 0;\n     for (const auto& txout : txouts)\n     {\n-        if (!DummySignInput(txNew.vin[nIn], txout)) {\n+        if (!DummySignInput(txNew.vin.at(nIn), txout)) {\n             return false;\n         }\n \n@@ -2023,7 +2023,7 @@ bool CWalletTx::IsTrusted() const\n         const CWalletTx* parent = pwallet->GetWalletTx(txin.prevout.hash);\n         if (parent == nullptr)\n             return false;\n-        const CTxOut& parentOut = parent->tx->vout[txin.prevout.n];\n+        const CTxOut& parentOut = parent->tx->vout.at(txin.prevout.n);\n         if (pwallet->IsMine(parentOut) != ISMINE_SPENDABLE)\n             return false;\n     }\n@@ -2225,7 +2225,7 @@ CAmount CWallet::GetAvailableBalance(const CCoinControl* coinControl) const\n     AvailableCoins(vCoins, true, coinControl);\n     for (const COutput& out : vCoins) {\n         if (out.fSpendable) {\n-            balance += out.tx->tx->vout[out.i].nValue;\n+            balance += out.tx->tx->vout.at(out.i).nValue;\n         }\n     }\n     return balance;\n@@ -2471,7 +2471,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         {\n             if (!out.fSpendable)\n                  continue;\n-            nValueRet += out.tx->tx->vout[out.i].nValue;\n+            nValueRet += out.tx->tx->vout.at(out.i).nValue;\n             setCoinsRet.insert(out.GetInputCoin());\n         }\n         return (nValueRet >= nTargetValue);\n@@ -2589,7 +2589,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     }\n \n     if (nChangePosInOut != -1) {\n-        tx.vout.insert(tx.vout.begin() + nChangePosInOut, tx_new->vout[nChangePosInOut]);\n+        tx.vout.insert(tx.vout.begin() + nChangePosInOut, tx_new->vout.at(nChangePosInOut));\n         // We don't have the normal Create/Commit cycle, and don't want to risk\n         // reusing change, so just remove the key from the keypool here.\n         reservekey.KeepKey();\n@@ -3555,7 +3555,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n                 CTxDestination address;\n                 if(!IsMine(txin)) /* If this input isn't mine, ignore it */\n                     continue;\n-                if(!ExtractDestination(mapWallet.at(txin.prevout.hash).tx->vout[txin.prevout.n].scriptPubKey, address))\n+                if(!ExtractDestination(mapWallet.at(txin.prevout.hash).tx->vout.at(txin.prevout.n).scriptPubKey, address))\n                     continue;\n                 grouping.insert(address);\n                 any_mine = true;"
      },
      {
        "sha": "d54208abbc525d8198ea70cc8b5086c519fb5d55",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e6baa07a0632ebfce48c4992c37374178d37cf5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "patch": "@@ -463,7 +463,7 @@ class CWalletTx : public CMerkleTx\n     // Get the marginal bytes if spending the specified output from this transaction\n     int GetSpendSize(unsigned int out) const\n     {\n-        return CalculateMaximumSignedInputSize(tx->vout[out], pwallet);\n+        return CalculateMaximumSignedInputSize(tx->vout.at(out), pwallet);\n     }\n \n     void GetAmounts(std::list<COutputEntry>& listReceived,"
      }
    ]
  },
  {
    "sha": "47ef1a52d6f2b0720c54547767d9fa004391e37a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2VmMWE1MmQ2ZjJiMDcyMGM1NDU0Nzc2N2Q5ZmEwMDQzOTFlMzdh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-05-17T18:58:00Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-07-30T00:18:13Z"
      },
      "message": "Throw on out of range prevout indexes in CWallet & CCoinsViewMemPool\n\n* CWallet::GetDebit, SignTransaction, IsMine, IsAllFromMe\n* CCoinsViewMemPool::GetCoin\n\nAn out of range transaction output is invalid / an error condition, so let's\nblow up rather than skip the output or default.\n\nComment the exception: that SIGHASH single with out of bounds index is valid\n\nNotes:\n* `at` does range checking.\n* `COutpoint.n` is not guaranteed to be valid - e.g.its default value\nis -1.",
      "tree": {
        "sha": "98b8b7db13d6bfadf0d57cc87ec0356c4dc18a95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98b8b7db13d6bfadf0d57cc87ec0356c4dc18a95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ef1a52d6f2b0720c54547767d9fa004391e37a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJbXllFAAoJEG7l83hfeLNFJlQIAJOv8sLxvolUVP+g6U5DBmrX\nwM5l1H1VFsyrzkikkUYpLbCvurBNj01mU6ixDKUzyReD6jIoYKExXg0FNu6K4AYq\ntBY7ZZh+fSA35H99nm+ngO6mn5aJOngBVy+aX6EZ6mV4ioKMYGiiB3UAP0ZytEUH\n+e0UJHH5PL5Z+50EXsfLcGbIJi9Fx2zkki9uAt5qz+3nVMkvQCB3w+a6ARy1SvMu\nDa79ZT+AGe+NluqO5sWe97SqTxYQ++4Z2skr16i1Juqv+coF2C2K1oGXTBCEQVQI\nhSqNThPWj4NBl57oeWqXuACSQg/rpalaB4TNxOoi7E7eaVjwC7NaYI7iqS8rooI=\n=+/HE\n-----END PGP SIGNATURE-----",
        "payload": "tree 98b8b7db13d6bfadf0d57cc87ec0356c4dc18a95\nparent 4e6baa07a0632ebfce48c4992c37374178d37cf5\nauthor Ben Woosley <ben.woosley@gmail.com> 1526583480 -0700\ncommitter Ben Woosley <ben.woosley@gmail.com> 1532909893 -0400\n\nThrow on out of range prevout indexes in CWallet & CCoinsViewMemPool\n\n* CWallet::GetDebit, SignTransaction, IsMine, IsAllFromMe\n* CCoinsViewMemPool::GetCoin\n\nAn out of range transaction output is invalid / an error condition, so let's\nblow up rather than skip the output or default.\n\nComment the exception: that SIGHASH single with out of bounds index is valid\n\nNotes:\n* `at` does range checking.\n* `COutpoint.n` is not guaranteed to be valid - e.g.its default value\nis -1.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ef1a52d6f2b0720c54547767d9fa004391e37a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ef1a52d6f2b0720c54547767d9fa004391e37a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ef1a52d6f2b0720c54547767d9fa004391e37a/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e6baa07a0632ebfce48c4992c37374178d37cf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4e6baa07a0632ebfce48c4992c37374178d37cf5"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 17,
      "deletions": 29
    },
    "files": [
      {
        "sha": "afa53203c06d4d2a1e62e5ef052148c0428e674e",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ef1a52d6f2b0720c54547767d9fa004391e37a/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ef1a52d6f2b0720c54547767d9fa004391e37a/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=47ef1a52d6f2b0720c54547767d9fa004391e37a",
        "patch": "@@ -1253,6 +1253,8 @@ uint256 SignatureHash(const CScript& scriptCode, const T& txTo, unsigned int nIn\n         if ((nHashType & 0x1f) != SIGHASH_SINGLE && (nHashType & 0x1f) != SIGHASH_NONE) {\n             hashOutputs = cacheready ? cache->hashOutputs : GetOutputsHash(txTo);\n         } else if ((nHashType & 0x1f) == SIGHASH_SINGLE && nIn < txTo.vout.size()) {\n+            // Note that witness SIGHASH_SINGLE with output out of bound is explicitly\n+            // interprested as valid despite out of bounds, see tx_valid.json\n             CHashWriter ss(SER_GETHASH, 0);\n             ss << txTo.vout[nIn];\n             hashOutputs = ss.GetHash();"
      },
      {
        "sha": "8b2f39a1a4a0350e19a83b67fc279d21914bb41f",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ef1a52d6f2b0720c54547767d9fa004391e37a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ef1a52d6f2b0720c54547767d9fa004391e37a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=47ef1a52d6f2b0720c54547767d9fa004391e37a",
        "patch": "@@ -891,12 +891,8 @@ bool CCoinsViewMemPool::GetCoin(const COutPoint &outpoint, Coin &coin) const {\n     // transactions. First checking the underlying cache risks returning a pruned entry instead.\n     CTransactionRef ptx = mempool.get(outpoint.hash);\n     if (ptx) {\n-        if (outpoint.n < ptx->vout.size()) {\n-            coin = Coin(ptx->vout[outpoint.n], MEMPOOL_HEIGHT, false);\n-            return true;\n-        } else {\n-            return false;\n-        }\n+        coin = Coin(ptx->vout.at(outpoint.n), MEMPOOL_HEIGHT, false);\n+        return true;\n     }\n     return base->GetCoin(outpoint, coin);\n }"
      },
      {
        "sha": "ada0bbe535ac53266181913bf52fa19183669538",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 23,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ef1a52d6f2b0720c54547767d9fa004391e37a/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ef1a52d6f2b0720c54547767d9fa004391e37a/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=47ef1a52d6f2b0720c54547767d9fa004391e37a",
        "patch": "@@ -1299,8 +1299,8 @@ isminetype CWallet::IsMine(const CTxIn &txin) const\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n-            if (txin.prevout.n < prev.tx->vout.size())\n-                return IsMine(prev.tx->vout[txin.prevout.n]);\n+            const CTxOut& prevout = prev.tx->vout.at(txin.prevout.n);\n+            return IsMine(prevout);\n         }\n     }\n     return ISMINE_NO;\n@@ -1316,9 +1316,9 @@ CAmount CWallet::GetDebit(const CTxIn &txin, const isminefilter& filter) const\n         if (mi != mapWallet.end())\n         {\n             const CWalletTx& prev = (*mi).second;\n-            if (txin.prevout.n < prev.tx->vout.size())\n-                if (IsMine(prev.tx->vout[txin.prevout.n]) & filter)\n-                    return prev.tx->vout[txin.prevout.n].nValue;\n+            const CTxOut& prevout = prev.tx->vout.at(txin.prevout.n);\n+            if (IsMine(prevout) & filter)\n+                return prevout.nValue;\n         }\n     }\n     return 0;\n@@ -1401,11 +1401,7 @@ bool CWallet::IsAllFromMe(const CTransaction& tx, const isminefilter& filter) co\n             return false; // any unknown inputs can't be from us\n \n         const CWalletTx& prev = (*mi).second;\n-\n-        if (txin.prevout.n >= prev.tx->vout.size())\n-            return false; // invalid input!\n-\n-        if (!(IsMine(prev.tx->vout[txin.prevout.n]) & filter))\n+        if (!(IsMine(prev.tx->vout.at(txin.prevout.n)) & filter))\n             return false;\n     }\n     return true;\n@@ -2372,8 +2368,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n         auto it = mapWallet.find(output.hash);\n         if (it != mapWallet.end()) {\n             int depth = it->second.GetDepthInMainChain();\n-            if (depth >= 0 && output.n < it->second.tx->vout.size() &&\n-                IsMine(it->second.tx->vout[output.n]) == ISMINE_SPENDABLE) {\n+            if (depth >= 0 && IsMine(it->second.tx->vout.at(output.n)) == ISMINE_SPENDABLE) {\n                 CTxDestination address;\n                 if (ExtractDestination(FindNonChangeParentOutput(*it->second.tx, output.n).scriptPubKey, address)) {\n                     result[address].emplace_back(\n@@ -2390,11 +2385,10 @@ const CTxOut& CWallet::FindNonChangeParentOutput(const CTransaction& tx, int out\n {\n     const CTransaction* ptx = &tx;\n     int n = output;\n-    while (IsChange(ptx->vout[n]) && ptx->vin.size() > 0) {\n+    while (IsChange(ptx->vout.at(n)) && ptx->vin.size() > 0) {\n         const COutPoint& prevout = ptx->vin[0].prevout;\n         auto it = mapWallet.find(prevout.hash);\n-        if (it == mapWallet.end() || it->second.tx->vout.size() <= prevout.n ||\n-            !IsMine(it->second.tx->vout[prevout.n])) {\n+        if (it == mapWallet.end() || !IsMine(it->second.tx->vout.at(prevout.n))) {\n             break;\n         }\n         ptx = it->second.tx.get();\n@@ -2493,11 +2487,8 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         if (it != mapWallet.end())\n         {\n             const CWalletTx* pcoin = &it->second;\n-            // Clearly invalid input, fail\n-            if (pcoin->tx->vout.size() <= outpoint.n)\n-                return false;\n             // Just to calculate the marginal byte size\n-            nValueFromPresetInputs += pcoin->tx->vout[outpoint.n].nValue;\n+            nValueFromPresetInputs += pcoin->tx->vout.at(outpoint.n).nValue;\n             setPresetCoins.insert(CInputCoin(pcoin->tx, outpoint.n));\n         } else\n             return false; // TODO: Allow non-wallet inputs\n@@ -2546,13 +2537,12 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     int nIn = 0;\n     for (auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n-        if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n+        if (mi == mapWallet.end()) {\n             return false;\n         }\n-        const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n-        const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n+        const CTxOut& prevout = mi->second.tx->vout.at(input.prevout.n);\n         SignatureData sigdata;\n-        if (!ProduceSignature(*this, MutableTransactionSignatureCreator(&tx, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+        if (!ProduceSignature(*this, MutableTransactionSignatureCreator(&tx, nIn, prevout.nValue, SIGHASH_ALL), prevout.scriptPubKey, sigdata)) {\n             return false;\n         }\n         UpdateInput(input, sigdata);"
      }
    ]
  }
]