practicalswift,2020-03-26 16:06:12,"@pierreN \n\nThanks for tackling this.\n\nConsider throwing a `std::ios_base::failure` instead of silently truncating in case of serialization/deserialization errors.\n\nThat is the pattern used generally in the serialization/deserialisation code.",https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604518371,604518371,
practicalswift,2020-03-26 18:10:17,"@pierreN \n\nFWIW, this is what I use in my local tree to avoid hitting the signed integer overflow when fuzzing:\n\n```diff\ndiff --git a/src/coins.h b/src/coins.h\nindex e71c8a47b..2be607207 100644\n--- a/src/coins.h\n+++ b/src/coins.h\n@@ -59,7 +59,7 @@ public:\n     template<typename Stream>\n     void Serialize(Stream &s) const {\n         assert(!IsSpent());\n-        uint32_t c",https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604590388,604590388,
sipa,2020-03-26 22:35:19,Agree with throwing an error when the value is out of range.,https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604722360,604722360,
pierreN,2020-03-27 02:33:48,"OK, thanks.\n\nNote that strictly speaking, as long as [`unsigned int`](https://github.com/bitcoin/bitcoin/blob/e3154aacf444a29f9f5642b6c937e875ab9a2c13/src/undo.h#L37) and `uint32_t` are 32b long, in the code posted by @practicalswift only the `uint32_t{2}` are necessary for the fuzzer exemples (to the compiler this is equivalent to the `static_cast` in this PR which didn't truncate them - sorr",https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-604783508,604783508,
MarcoFalke,2020-03-27 18:07:31,"ACK 21379af7537c71181dab0e9de3af5459a0f4a00e üìÄ\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 21379af7537c71181dab0e9de3af5459a0f4a00e üìÄ\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUj3qwv7BGTYcciiJxr/pawLmVnsWE3zYTUPkpxF6yHvtWRJUaXA7ZfPs9",https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605177055,605177055,
practicalswift,2020-03-27 21:18:17,"ACK 21379af7537c71181dab0e9de3af5459a0f4a00e\n\nWould be nice to have this merged to avoid having UBSan hitting the signed integer overflow over and over when fuzzing :)",https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605319288,605319288,
pierreN,2020-03-27 23:42:19,"Thanks for the reviews, I removed the ternary operator on `fCoinBase` as requested. \nIn the same spirit, I also changed the `nCode / 2` into `nCode >> 1` to match `undo.h` and `coins.h`.",https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605358378,605358378,
MarcoFalke,2020-03-28 00:49:37,"re-ACK e980214bc4fd49530e8d50fe0a6657b8583bc6b5 üéë\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nre-ACK e980214bc4fd49530e8d50fe0a6657b8583bc6b5 üéë\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgKLgv+MDL+1GuBwP8B6du9vzoVuuWIcYe1V6tmN4/0EnM5llvY",https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605370227,605370227,
sipa,2020-03-28 01:16:08,utACK e980214bc4fd49530e8d50fe0a6657b8583bc6b5,https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605373565,605373565,
practicalswift,2020-03-29 12:22:43,ACK e980214bc4fd49530e8d50fe0a6657b8583bc6b5 -- patch looks correct,https://github.com/bitcoin/bitcoin/pull/18433#issuecomment-605627918,605627918,
ryanofsky,2020-03-27 19:37:49,"Can someone confirm whether I'm undertanding this correctly?\n\nPreviously `nHeight` operand was a 31 bit integer, `fCoinBase` operand was a 1-bit integer, and `2` operand was a 2+ bit integer with actual width being platform specific but at least 2.\n\nUndefined behavior could occur on an imaginary platform where all the operations were done in 31 bits and overflowed, causing the high order b",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399498186,399498186,src/coins.h
ryanofsky,2020-03-27 19:52:20,"Fix here seems basically identical to the fix in Coin::Serialize and I guess works the same way.\n\nOnly difference is `fCoinBase` from the other expression is `txout.fCoinBase ? 1u : 0u` here. It's a little more verbose but effectively the same thing since fCoinBase is 1-bit.\n",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399505008,399505008,src/undo.h
ryanofsky,2020-03-27 20:05:07,"Again, not sure if I understand this correctly.\n\nThe undefined behavior happens because standard only says `unsigned int nCode` has to be 16+ bits.\n\n If `nCode` is 32 bits everything works perfectly. Any serialized VarInt value that is 2**32 or more will trigger ""ReadVarInt(): size too large"" exception, and any smaller values will be broken up into height and fcoinbase correctly.\n\nIf `",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399511023,399511023,src/undo.h
sipa,2020-03-27 21:11:54,"I believe we're in fact already assuming that short is 16 bits, and int is 32 bits (see src/compat/assumptions.h). Maybe should just make those assumptions more explicit (asserting that the range of int matches that of int32_t, etc., ...).",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399540058,399540058,src/coins.h
MarcoFalke,2020-03-27 21:42:37,"> 2 operand was a 2+ bit integer with actual width being platform specific but at least 2.\n\nNot sure, but I think you got this wrong. `2` should be an `int`, which should be promoted to `uint32_t`, if I read [this](https://en.cppreference.com/w/cpp/language/operator_arithmetic#Conversions) right. (""if the unsigned operand's conversion rank is greater or equal to the conversion rank of the sign",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399551704,399551704,src/coins.h
MarcoFalke,2020-03-27 21:44:01,"```suggestion\n        ::Serialize(s, VARINT(txout.nHeight * uint32_t{2} + txout.fCoinBase));\n```\n\nIt could make sense to change this for symmetry with the implementation in `Coin::Serialize`?",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399552237,399552237,src/undo.h
MarcoFalke,2020-03-27 21:46:05,"> The undefined behavior happens because standard only says unsigned int nCode has to be 16+ bits.\n\nI don't think any undefined behavior has been observed here. This has just been changed for clarity and should also not result in a change in the compiled code.",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399552921,399552921,src/undo.h
pierreN,2020-03-27 22:49:34,"Yes this is mostly for the sake of clarity. I'm struggling to see bitcoin run on platforms where `unsigned int` is different than 32 bits but who knows.\n\n> If nCode is less than 32 bits, ReadVarInt() exceptions will be triggered unnecessarily.\n\nIf on an imaginary platform `unsigned int` is 16 bits, then yes `nCode` have to be less than `2**16/(6*24*365)<2 years` so this code would already ",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399572201,399572201,src/undo.h
pierreN,2020-03-27 22:58:28,This looks like a great idea. I'm double checking it.,https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399574604,399574604,src/undo.h
pierreN,2020-03-27 22:59:34,"Yes, TBH I was unsure why the ternary operator was used.",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399574912,399574912,src/undo.h
pierreN,2020-03-27 23:13:30,"> I believe we're in fact already assuming that short is 16 bits, and int is 32 bits (see src/compat/assumptions.h).\n\nOw, thank you, I hadn't see this file. Those are great assumptions.\n\n> As a side note, the boolean is converted to int in a first step. See here. Then promoted to unsigned for the same reason I mentioned above.\n\nYes, my basic understanding was that `2` was being underst",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399578207,399578207,src/coins.h
ryanofsky,2020-03-27 23:15:07,"re: https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399551704\n\n> > 2 operand was a 2+ bit integer with actual width being platform specific but at least 2.\n> \n> Not sure, but I think you got this wrong. `2` should be an `int`, which should be promoted to `uint32_t`\n\nOh you're right it must be a 16+ bit signed int: https://en.cppreference.com/w/cpp/language/integer_literal#The",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399578579,399578579,src/coins.h
ryanofsky,2020-03-27 23:15:37,"re: https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399552921\n\n> I don't think any undefined behavior has been observed here. This has just been changed for clarity and should also not result in a change in the compiled code.\n\nGood to know. Any I don't think it was right for me to call it ""undefined behavior"", more like ""platform specific behavior"" only on a theoretical platform ",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399578693,399578693,src/undo.h
promag,2020-03-30 00:39:00,Why this change?,https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399878654,399878654,src/undo.h
pierreN,2020-03-30 01:00:55,"> In the same spirit, I also changed the nCode / 2 into nCode >> 1 to match undo.h and coins.h.\n\nTo match the code in `undo.h` and `coins.h` (as it is done with `fCoinBase`). Can remove it if people prefer ?",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399881849,399881849,src/undo.h
promag,2020-03-30 01:03:08,ü§∑‚Äç‚ôÇ don't make a case for me.,https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399882169,399882169,src/undo.h
pierreN,2020-03-30 01:22:13,"Sorry, unsure how to read this. Waiting for a second person opinion to remove it I guess ?",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r399885225,399885225,src/undo.h
practicalswift,2020-03-30 13:43:01,Agree with @promag.,https://github.com/bitcoin/bitcoin/pull/18433#discussion_r400201305,400201305,src/undo.h
MarcoFalke,2020-03-30 13:49:55,This pull request has 5 ACKs. Let's please not invalidate all the review and fight about style changes at this point.,https://github.com/bitcoin/bitcoin/pull/18433#discussion_r400206552,400206552,src/undo.h
promag,2020-03-30 14:01:19,"Yeah, I wasn't trying to invalidate existing reviews, I also gave my ACK. I was trying to understand the reason behind this change. I think it's good practice to not include unrelated changes.",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r400215385,400215385,src/undo.h
MarcoFalke,2020-03-30 14:16:06,"I think it is fine to do style-changes in code that reviewers have to look at anyway. It could have been better if it was in different commits or in the same commit, but with explanation in the commit message why each change is made.\nLet's just keep it in mind for the future.",https://github.com/bitcoin/bitcoin/pull/18433#discussion_r400226458,400226458,src/undo.h
pierreN,2020-03-31 00:30:00,My bad - I just though the change was related enough to be included here. I'll do this in a separate commit in the future. Thanks.,https://github.com/bitcoin/bitcoin/pull/18433#discussion_r400573563,400573563,src/undo.h
