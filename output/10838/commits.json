[
  {
    "sha": "aece8a4637f0d097e4be497bc82d59b37244d245",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWNlOGE0NjM3ZjBkMDk3ZTRiZTQ5N2JjODJkNTliMzcyNDRkMjQ1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-16T23:29:08Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-09-06T23:10:04Z"
      },
      "message": "(finally) remove getinfo in favor of more module-specific infos",
      "tree": {
        "sha": "11567fae24b604ce4eb35f0704d51c7081e231ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/11567fae24b604ce4eb35f0704d51c7081e231ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aece8a4637f0d097e4be497bc82d59b37244d245",
      "comment_count": 2,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aece8a4637f0d097e4be497bc82d59b37244d245",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aece8a4637f0d097e4be497bc82d59b37244d245",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aece8a4637f0d097e4be497bc82d59b37244d245/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "961901f77e55aa07d5048000d57bcd218ae74b08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/961901f77e55aa07d5048000d57bcd218ae74b08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/961901f77e55aa07d5048000d57bcd218ae74b08"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 15,
      "deletions": 101
    },
    "files": [
      {
        "sha": "8fdae25340026d0bc466247bbc70f3a6cc8eb33c",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aece8a4637f0d097e4be497bc82d59b37244d245/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aece8a4637f0d097e4be497bc82d59b37244d245/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=aece8a4637f0d097e4be497bc82d59b37244d245",
        "patch": "@@ -613,8 +613,8 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n     from there.\n \n - A RPC method must either be a wallet method or a non-wallet method. Do not\n-  introduce new methods such as `getinfo` and `signrawtransaction` that differ\n-  in behavior based on presence of a wallet.\n+  introduce new methods such as `signrawtransaction` that differ in behavior\n+  based on presence of a wallet.\n \n   - *Rationale*: as well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be"
      },
      {
        "sha": "2037ebe3c47d80dc9f153e517e4fdbaeb6c9f9bb",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 89,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aece8a4637f0d097e4be497bc82d59b37244d245/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aece8a4637f0d097e4be497bc82d59b37244d245/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=aece8a4637f0d097e4be497bc82d59b37244d245",
        "patch": "@@ -31,94 +31,6 @@\n \n #include <univalue.h>\n \n-/**\n- * @note Do not add or change anything in the information returned by this\n- * method. `getinfo` exists for backwards-compatibility only. It combines\n- * information from wildly different sources in the program, which is a mess,\n- * and is thus planned to be deprecated eventually.\n- *\n- * Based on the source of the information, new information should be added to:\n- * - `getblockchaininfo`,\n- * - `getnetworkinfo` or\n- * - `getwalletinfo`\n- *\n- * Or alternatively, create a specific query method for the information.\n- **/\n-UniValue getinfo(const JSONRPCRequest& request)\n-{\n-    if (request.fHelp || request.params.size() != 0)\n-        throw std::runtime_error(\n-            \"getinfo\\n\"\n-            \"\\nDEPRECATED. Returns an object containing various state info.\\n\"\n-            \"\\nResult:\\n\"\n-            \"{\\n\"\n-            \"  \\\"deprecation-warning\\\": \\\"...\\\" (string) warning that the getinfo command is deprecated and will be removed in 0.16\\n\"\n-            \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n-            \"  \\\"protocolversion\\\": xxxxx,   (numeric) the protocol version\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,     (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,         (numeric) the total bitcoin balance of the wallet\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,           (numeric) the current number of blocks processed in the server\\n\"\n-            \"  \\\"timeoffset\\\": xxxxx,        (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\": xxxxx,       (numeric) the number of connections\\n\"\n-            \"  \\\"proxy\\\": \\\"host:port\\\",       (string, optional) the proxy used by the server\\n\"\n-            \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n-            \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"relayfee\\\": x.xxxx,         (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"errors\\\": \\\"...\\\"             (string) any error messages\\n\"\n-            \"}\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getinfo\", \"\")\n-            + HelpExampleRpc(\"getinfo\", \"\")\n-        );\n-\n-#ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n-    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : nullptr);\n-#else\n-    LOCK(cs_main);\n-#endif\n-\n-    proxyType proxy;\n-    GetProxy(NET_IPV4, proxy);\n-\n-    UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"deprecation-warning\", \"WARNING: getinfo is deprecated and will be fully removed in 0.16.\"\n-        \" Projects should transition to using getblockchaininfo, getnetworkinfo, and getwalletinfo before upgrading to 0.16\"));\n-    obj.push_back(Pair(\"version\", CLIENT_VERSION));\n-    obj.push_back(Pair(\"protocolversion\", PROTOCOL_VERSION));\n-#ifdef ENABLE_WALLET\n-    if (pwallet) {\n-        obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n-        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n-    }\n-#endif\n-    obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n-    obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n-    if(g_connman)\n-        obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n-    obj.push_back(Pair(\"proxy\",         (proxy.IsValid() ? proxy.proxy.ToStringIPPort() : std::string())));\n-    obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       Params().NetworkIDString() == CBaseChainParams::TESTNET));\n-#ifdef ENABLE_WALLET\n-    if (pwallet) {\n-        obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n-        obj.push_back(Pair(\"keypoolsize\",   (int)pwallet->GetKeyPoolSize()));\n-    }\n-    if (pwallet && pwallet->IsCrypted()) {\n-        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n-    }\n-    obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n-#endif\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n-    obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n-    return obj;\n-}\n-\n #ifdef ENABLE_WALLET\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n@@ -651,7 +563,6 @@ UniValue echo(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"control\",            \"getinfo\",                &getinfo,                {} }, /* uses wallet if enabled */\n     { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          {\"mode\"} },\n     { \"util\",               \"validateaddress\",        &validateaddress,        {\"address\"} }, /* uses wallet if enabled */\n     { \"util\",               \"createmultisig\",         &createmultisig,         {\"nrequired\",\"keys\"} },"
      },
      {
        "sha": "51abe2b25f0be2f144299df3a65d84a658c7ab13",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aece8a4637f0d097e4be497bc82d59b37244d245/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aece8a4637f0d097e4be497bc82d59b37244d245/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=aece8a4637f0d097e4be497bc82d59b37244d245",
        "patch": "@@ -87,7 +87,7 @@ enum class FeeEstimateMode;\n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n {\n-    FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getinfo's clientversion output)\n+    FEATURE_BASE = 10500, // the earliest version new wallets supports (only useful for getwalletinfo's clientversion output)\n \n     FEATURE_WALLETCRYPT = 40000, // wallet encryption\n     FEATURE_COMPRPUBKEY = 60000, // compressed public keys"
      },
      {
        "sha": "04847252eb3b2a4c0666dad01a8878f9e12b128d",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aece8a4637f0d097e4be497bc82d59b37244d245/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aece8a4637f0d097e4be497bc82d59b37244d245/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=aece8a4637f0d097e4be497bc82d59b37244d245",
        "patch": "@@ -15,9 +15,15 @@ def set_test_params(self):\n     def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n-        self.log.info(\"Compare responses from getinfo RPC and `bitcoin-cli getinfo`\")\n-        cli_get_info = self.nodes[0].cli.getinfo()\n-        rpc_get_info = self.nodes[0].getinfo()\n+        self.log.info(\"Compare responses from gewalletinfo RPC and `bitcoin-cli getwalletinfo`\")\n+        cli_get_info = self.nodes[0].cli.getwalletinfo()\n+        rpc_get_info = self.nodes[0].getwalletinfo()\n+\n+        assert_equal(cli_get_info, rpc_get_info)\n+\n+        self.log.info(\"Compare responses from getblockchaininfo RPC and `bitcoin-cli getblockchaininfo`\")\n+        cli_get_info = self.nodes[0].cli.getblockchaininfo()\n+        rpc_get_info = self.nodes[0].getblockchaininfo()\n \n         assert_equal(cli_get_info, rpc_get_info)\n "
      },
      {
        "sha": "0848fcde64b1824bcad4be2085e83979f07de17a",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aece8a4637f0d097e4be497bc82d59b37244d245/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aece8a4637f0d097e4be497bc82d59b37244d245/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=aece8a4637f0d097e4be497bc82d59b37244d245",
        "patch": "@@ -87,7 +87,6 @@ def run_test(self):\n         self.nodes[0].generate(VB_PERIOD - VB_THRESHOLD + 1)\n         # Check that we're not getting any versionbit-related errors in\n         # get*info()\n-        assert(not VB_PATTERN.match(self.nodes[0].getinfo()[\"errors\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getmininginfo()[\"errors\"]))\n         assert(not VB_PATTERN.match(self.nodes[0].getnetworkinfo()[\"warnings\"]))\n \n@@ -99,7 +98,6 @@ def run_test(self):\n         # have gotten a different alert due to more than 51/100 blocks\n         # being of unexpected version.\n         # Check that get*info() shows some kind of error.\n-        assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getinfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getmininginfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_MINED in self.nodes[0].getnetworkinfo()[\"warnings\"])\n \n@@ -115,7 +113,6 @@ def run_test(self):\n \n         # Connecting one block should be enough to generate an error.\n         self.nodes[0].generate(1)\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getinfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n         self.stop_nodes()"
      },
      {
        "sha": "b3cc681dad7849c3a0156012f60a4d22e8742bf0",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aece8a4637f0d097e4be497bc82d59b37244d245/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aece8a4637f0d097e4be497bc82d59b37244d245/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=aece8a4637f0d097e4be497bc82d59b37244d245",
        "patch": "@@ -16,10 +16,10 @@ def set_test_params(self):\n \n     def run_test(self):\n         node = self.nodes[0]\n-        h = node.help(command='getinfo')\n-        assert(h.startswith('getinfo\\n'))\n+        h = node.help(command='getblockchaininfo')\n+        assert(h.startswith('getblockchaininfo\\n'))\n \n-        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n+        assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n \n         h = node.getblockhash(height=0)\n         node.getblock(blockhash=h)"
      }
    ]
  }
]