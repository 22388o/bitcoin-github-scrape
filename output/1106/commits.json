[
  {
    "sha": "ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjlkYzc1YTE4M2M3YTQ2ZTM4ZTk1N2VlMzE5MmQ1ZmViY2NjYjNj",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T20:47:24Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T20:47:24Z"
      },
      "message": "The string class returns string::npos, when find() fails.\n\nNoticed when sign-comparison warnings were enabled.",
      "tree": {
        "sha": "4af4074d5ef5859ce780af39f483cb02f5da5da2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4af4074d5ef5859ce780af39f483cb02f5da5da2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab9dc75a183c7a46e38e957ee3192d5febcccb3c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "5a701eb7ea16b87b56263996ee8e98ec89e2a3d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a701eb7ea16b87b56263996ee8e98ec89e2a3d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a701eb7ea16b87b56263996ee8e98ec89e2a3d8"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "f0d27fad99576997bd19272639a02779f45a84e8",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9dc75a183c7a46e38e957ee3192d5febcccb3c/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9dc75a183c7a46e38e957ee3192d5febcccb3c/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
        "patch": "@@ -201,7 +201,7 @@ Value help(const Array& params, bool fHelp)\n             // Help text is returned in an exception\n             string strHelp = string(e.what());\n             if (strCommand == \"\")\n-                if (strHelp.find('\\n') != -1)\n+                if (strHelp.find('\\n') != string::npos)\n                     strHelp = strHelp.substr(0, strHelp.find('\\n'));\n             strRet += strHelp + \"\\n\";\n         }"
      },
      {
        "sha": "d535f59c4c9e65b154dd0628e7d2bdf16610b50f",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9dc75a183c7a46e38e957ee3192d5febcccb3c/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9dc75a183c7a46e38e957ee3192d5febcccb3c/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
        "patch": "@@ -108,13 +108,13 @@ int RecvUntil(SOCKET hSocket, const char* psz1, const char* psz2=NULL, const cha\n         if (!RecvLineIRC(hSocket, strLine))\n             return 0;\n         printf(\"IRC %s\\n\", strLine.c_str());\n-        if (psz1 && strLine.find(psz1) != -1)\n+        if (psz1 && strLine.find(psz1) != string::npos)\n             return 1;\n-        if (psz2 && strLine.find(psz2) != -1)\n+        if (psz2 && strLine.find(psz2) != string::npos)\n             return 2;\n-        if (psz3 && strLine.find(psz3) != -1)\n+        if (psz3 && strLine.find(psz3) != string::npos)\n             return 3;\n-        if (psz4 && strLine.find(psz4) != -1)\n+        if (psz4 && strLine.find(psz4) != string::npos)\n             return 4;\n     }\n }"
      },
      {
        "sha": "fb88891ad2bb792e3b169b3aa1f9ec81af547217",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab9dc75a183c7a46e38e957ee3192d5febcccb3c/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab9dc75a183c7a46e38e957ee3192d5febcccb3c/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
        "patch": "@@ -162,14 +162,14 @@ bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const cha\n                 }\n                 if (pszKeyword == NULL)\n                     break;\n-                if (strLine.find(pszKeyword) != -1)\n+                if (strLine.find(pszKeyword) != string::npos)\n                 {\n                     strLine = strLine.substr(strLine.find(pszKeyword) + strlen(pszKeyword));\n                     break;\n                 }\n             }\n             closesocket(hSocket);\n-            if (strLine.find(\"<\") != -1)\n+            if (strLine.find(\"<\") != string::npos)\n                 strLine = strLine.substr(0, strLine.find(\"<\"));\n             strLine = strLine.substr(strspn(strLine.c_str(), \" \\t\\n\\r\"));\n             while (strLine.size() > 0 && isspace(strLine[strLine.size()-1]))"
      }
    ]
  },
  {
    "sha": "c376ac359ec8551823b4ee14c85d85a49f2d3436",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzc2YWMzNTllYzg1NTE4MjNiNGVlMTRjODVkODVhNDlmMmQzNDM2",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T20:52:09Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T20:52:09Z"
      },
      "message": "Fix loop index var types, fixing many minor sign comparison warnings\n\nfoo.size() typically returns an unsigned integral type; make loop variables\nmatch those types' signedness.",
      "tree": {
        "sha": "121093f97279ca969a424f3792e64c41f8a05b48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/121093f97279ca969a424f3792e64c41f8a05b48"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c376ac359ec8551823b4ee14c85d85a49f2d3436",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c376ac359ec8551823b4ee14c85d85a49f2d3436",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c376ac359ec8551823b4ee14c85d85a49f2d3436",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c376ac359ec8551823b4ee14c85d85a49f2d3436/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab9dc75a183c7a46e38e957ee3192d5febcccb3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab9dc75a183c7a46e38e957ee3192d5febcccb3c"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 44,
      "deletions": 44
    },
    "files": [
      {
        "sha": "11dd2a7b7dfcea62e07a179aea99243d737b4262",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -124,7 +124,7 @@ int CAddrMan::SelectTried(int nKBucket)\n     // random shuffle the first few elements (using the entire list)\n     // find the least recently tried among them\n     int64 nOldest = -1;\n-    for (int i=0; i<ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT && i<vTried.size(); i++)\n+    for (unsigned int i = 0; i < ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT && i < vTried.size(); i++)\n     {\n         int nPos = GetRandInt(vTried.size() - i) + i;\n         int nTemp = vTried[nPos];\n@@ -270,7 +270,7 @@ void CAddrMan::Good_(const CService &addr, int64 nTime)\n     // find a bucket it is in now\n     int nRnd = GetRandInt(vvNew.size());\n     int nUBucket = -1;\n-    for (int n = 0; n < vvNew.size(); n++)\n+    for (unsigned int n = 0; n < vvNew.size(); n++)\n     {\n         int nB = (n+nRnd) % vvNew.size();\n         std::set<int> &vNew = vvNew[nB];"
      },
      {
        "sha": "9fafee320b8c115c9530344a9c4a14d3595df4b4",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -1000,7 +1000,7 @@ Value addmultisigaddress(const Array& params, bool fHelp)\n                       \"(got %d, need at least %d)\", keys.size(), nRequired));\n     std::vector<CKey> pubkeys;\n     pubkeys.resize(keys.size());\n-    for (int i = 0; i < keys.size(); i++)\n+    for (unsigned int i = 0; i < keys.size(); i++)\n     {\n         const std::string& ks = keys[i].get_str();\n "
      },
      {
        "sha": "5e5433ae35621fb6311b9df2f8fba6c5e6d2d2b7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -288,7 +288,7 @@ bool CTransaction::AreInputsStandard(const MapPrevTx& mapInputs) const\n     if (IsCoinBase())\n         return true; // Coinbases don't use vin normally\n \n-    for (int i = 0; i < vin.size(); i++)\n+    for (unsigned int i = 0; i < vin.size(); i++)\n     {\n         const CTxOut& prev = GetOutputFor(vin[i], mapInputs);\n \n@@ -484,7 +484,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n \n     // Check for conflicts with in-memory transactions\n     CTransaction* ptxOld = NULL;\n-    for (int i = 0; i < vin.size(); i++)\n+    for (unsigned int i = 0; i < vin.size(); i++)\n     {\n         COutPoint outpoint = vin[i].prevout;\n         if (mapNextTx.count(outpoint))\n@@ -500,7 +500,7 @@ bool CTransaction::AcceptToMemoryPool(CTxDB& txdb, bool fCheckInputs, bool* pfMi\n                 return false;\n             if (!IsNewerThan(*ptxOld))\n                 return false;\n-            for (int i = 0; i < vin.size(); i++)\n+            for (unsigned int i = 0; i < vin.size(); i++)\n             {\n                 COutPoint outpoint = vin[i].prevout;\n                 if (!mapNextTx.count(outpoint) || mapNextTx[outpoint].ptx != ptxOld)\n@@ -603,7 +603,7 @@ bool CTransaction::AddToMemoryPoolUnchecked()\n         LOCK(cs_mapTransactions);\n         uint256 hash = GetHash();\n         mapTransactions[hash] = *this;\n-        for (int i = 0; i < vin.size(); i++)\n+        for (unsigned int i = 0; i < vin.size(); i++)\n             mapNextTx[vin[i].prevout] = CInPoint(&mapTransactions[hash], i);\n         nTransactionsUpdated++;\n         ++nPooledTx;\n@@ -989,7 +989,7 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n     if (IsCoinBase())\n         return true; // Coinbase transactions have no inputs to fetch.\n \n-    for (int i = 0; i < vin.size(); i++)\n+    for (unsigned int i = 0; i < vin.size(); i++)\n     {\n         COutPoint prevout = vin[i].prevout;\n         if (inputsRet.count(prevout.hash))\n@@ -1034,7 +1034,7 @@ bool CTransaction::FetchInputs(CTxDB& txdb, const map<uint256, CTxIndex>& mapTes\n     }\n \n     // Make sure all prevout.n's are valid:\n-    for (int i = 0; i < vin.size(); i++)\n+    for (unsigned int i = 0; i < vin.size(); i++)\n     {\n         const COutPoint prevout = vin[i].prevout;\n         assert(inputsRet.count(prevout.hash) != 0);\n@@ -1071,7 +1071,7 @@ int64 CTransaction::GetValueIn(const MapPrevTx& inputs) const\n         return 0;\n \n     int64 nResult = 0;\n-    for (int i = 0; i < vin.size(); i++)\n+    for (unsigned int i = 0; i < vin.size(); i++)\n     {\n         nResult += GetOutputFor(vin[i], inputs).nValue;\n     }\n@@ -1085,7 +1085,7 @@ int CTransaction::GetP2SHSigOpCount(const MapPrevTx& inputs) const\n         return 0;\n \n     int nSigOps = 0;\n-    for (int i = 0; i < vin.size(); i++)\n+    for (unsigned int i = 0; i < vin.size(); i++)\n     {\n         const CTxOut& prevout = GetOutputFor(vin[i], inputs);\n         if (prevout.scriptPubKey.IsPayToScriptHash())\n@@ -1106,7 +1106,7 @@ bool CTransaction::ConnectInputs(MapPrevTx inputs,\n     {\n         int64 nValueIn = 0;\n         int64 nFees = 0;\n-        for (int i = 0; i < vin.size(); i++)\n+        for (unsigned int i = 0; i < vin.size(); i++)\n         {\n             COutPoint prevout = vin[i].prevout;\n             assert(inputs.count(prevout.hash) > 0);\n@@ -1185,7 +1185,7 @@ bool CTransaction::ClientConnectInputs()\n     {\n         LOCK(cs_mapTransactions);\n         int64 nValueIn = 0;\n-        for (int i = 0; i < vin.size(); i++)\n+        for (unsigned int i = 0; i < vin.size(); i++)\n         {\n             // Get prev tx from single transactions in memory\n             COutPoint prevout = vin[i].prevout;\n@@ -1396,7 +1396,7 @@ bool static Reorganize(CTxDB& txdb, CBlockIndex* pindexNew)\n \n     // Connect longer branch\n     vector<CTransaction> vDelete;\n-    for (int i = 0; i < vConnect.size(); i++)\n+    for (unsigned int i = 0; i < vConnect.size(); i++)\n     {\n         CBlockIndex* pindex = vConnect[i];\n         CBlock block;\n@@ -1635,7 +1635,7 @@ bool CBlock::CheckBlock() const\n     // First transaction must be coinbase, the rest must not be\n     if (vtx.empty() || !vtx[0].IsCoinBase())\n         return DoS(100, error(\"CheckBlock() : first tx is not coinbase\"));\n-    for (int i = 1; i < vtx.size(); i++)\n+    for (unsigned int i = 1; i < vtx.size(); i++)\n         if (vtx[i].IsCoinBase())\n             return DoS(100, error(\"CheckBlock() : more than one coinbase\"));\n \n@@ -1771,7 +1771,7 @@ bool ProcessBlock(CNode* pfrom, CBlock* pblock)\n     // Recursively process any orphan blocks that depended on this one\n     vector<uint256> vWorkQueue;\n     vWorkQueue.push_back(hash);\n-    for (int i = 0; i < vWorkQueue.size(); i++)\n+    for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n     {\n         uint256 hashPrev = vWorkQueue[i];\n         for (multimap<uint256, CBlock*>::iterator mi = mapOrphanBlocksByPrev.lower_bound(hashPrev);\n@@ -1995,7 +1995,7 @@ void PrintBlockTree()\n \n         // put the main timechain first\n         vector<CBlockIndex*>& vNext = mapNext[pindex];\n-        for (int i = 0; i < vNext.size(); i++)\n+        for (unsigned int i = 0; i < vNext.size(); i++)\n         {\n             if (vNext[i]->pnext)\n             {\n@@ -2005,7 +2005,7 @@ void PrintBlockTree()\n         }\n \n         // iterate children\n-        for (int i = 0; i < vNext.size(); i++)\n+        for (unsigned int i = 0; i < vNext.size(); i++)\n             vStack.push_back(make_pair(nCol+i, vNext[i]));\n     }\n }\n@@ -2360,7 +2360,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n \n         CTxDB txdb(\"r\");\n-        for (int nInv = 0; nInv < vInv.size(); nInv++)\n+        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n         {\n             const CInv &inv = vInv[nInv];\n \n@@ -2536,7 +2536,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             vWorkQueue.push_back(inv.hash);\n \n             // Recursively process any orphan transactions that depended on this one\n-            for (int i = 0; i < vWorkQueue.size(); i++)\n+            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n             {\n                 uint256 hashPrev = vWorkQueue[i];\n                 for (multimap<uint256, CDataStream*>::iterator mi = mapOrphanTransactionsByPrev.lower_bound(hashPrev);\n@@ -3294,7 +3294,7 @@ void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash\n     FormatHashBlocks(&tmp.hash1, sizeof(tmp.hash1));\n \n     // Byte swap all the input buffer\n-    for (int i = 0; i < sizeof(tmp)/4; i++)\n+    for (unsigned int i = 0; i < sizeof(tmp)/4; i++)\n         ((unsigned int*)&tmp)[i] = ByteReverse(((unsigned int*)&tmp)[i]);\n \n     // Precalc the first half of the first hash, which stays constant\n@@ -3419,7 +3419,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Check if something found\n             if (nNonceFound != -1)\n             {\n-                for (int i = 0; i < sizeof(hash)/4; i++)\n+                for (unsigned int i = 0; i < sizeof(hash)/4; i++)\n                     ((unsigned int*)&hash)[i] = ByteReverse(((unsigned int*)&hash)[i]);\n \n                 if (hash <= hashTarget)"
      },
      {
        "sha": "c48252fbc47b7ff9f0c05fc04b2f86376db07aa8",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -457,13 +457,13 @@ class CTransaction\n     {\n         if (vin.size() != old.vin.size())\n             return false;\n-        for (int i = 0; i < vin.size(); i++)\n+        for (unsigned int i = 0; i < vin.size(); i++)\n             if (vin[i].prevout != old.vin[i].prevout)\n                 return false;\n \n         bool fNewer = false;\n         unsigned int nLowest = std::numeric_limits<unsigned int>::max();\n-        for (int i = 0; i < vin.size(); i++)\n+        for (unsigned int i = 0; i < vin.size(); i++)\n         {\n             if (vin[i].nSequence != old.vin[i].nSequence)\n             {\n@@ -637,9 +637,9 @@ class CTransaction\n             vin.size(),\n             vout.size(),\n             nLockTime);\n-        for (int i = 0; i < vin.size(); i++)\n+        for (unsigned int i = 0; i < vin.size(); i++)\n             str += \"    \" + vin[i].ToString() + \"\\n\";\n-        for (int i = 0; i < vout.size(); i++)\n+        for (unsigned int i = 0; i < vout.size(); i++)\n             str += \"    \" + vout[i].ToString() + \"\\n\";\n         return str;\n     }\n@@ -1006,13 +1006,13 @@ class CBlock\n             hashMerkleRoot.ToString().substr(0,10).c_str(),\n             nTime, nBits, nNonce,\n             vtx.size());\n-        for (int i = 0; i < vtx.size(); i++)\n+        for (unsigned int i = 0; i < vtx.size(); i++)\n         {\n             printf(\"  \");\n             vtx[i].print();\n         }\n         printf(\"  vMerkleTree: \");\n-        for (int i = 0; i < vMerkleTree.size(); i++)\n+        for (unsigned int i = 0; i < vMerkleTree.size(); i++)\n             printf(\"%s \", vMerkleTree[i].ToString().substr(0,10).c_str());\n         printf(\"\\n\");\n     }"
      },
      {
        "sha": "7d621ac5949bec0f7b191a347751d96f14abe924",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -624,7 +624,7 @@ void ThreadSocketHandler2(void* parg)\n             if (hSocketMax > -1)\n             {\n                 printf(\"socket select error %d\\n\", nErr);\n-                for (int i = 0; i <= hSocketMax; i++)\n+                for (unsigned int i = 0; i <= hSocketMax; i++)\n                     FD_SET(i, &fdsetRecv);\n             }\n             FD_ZERO(&fdsetSend);\n@@ -1024,7 +1024,7 @@ void ThreadDNSAddressSeed2(void* parg)\n     {\n         printf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n \n-        for (int seed_idx = 0; seed_idx < ARRAYLEN(strDNSSeed); seed_idx++) {\n+        for (unsigned int seed_idx = 0; seed_idx < ARRAYLEN(strDNSSeed); seed_idx++) {\n             vector<CNetAddr> vaddr;\n             vector<CAddress> vAdd;\n             if (LookupHost(strDNSSeed[seed_idx][1], vaddr))\n@@ -1238,7 +1238,7 @@ void ThreadOpenConnections2(void* parg)\n         if (addrman.size()==0 && (GetTime() - nStart > 60 || fTOR) && !fTestNet)\n         {\n             std::vector<CAddress> vAdd;\n-            for (int i = 0; i < ARRAYLEN(pnSeed); i++)\n+            for (unsigned int i = 0; i < ARRAYLEN(pnSeed); i++)\n             {\n                 // It'll only connect to one or two seed nodes because once it connects,\n                 // it'll get a pile of addresses with newer timestamps."
      },
      {
        "sha": "45fdca571fb370046932921619ad63968ef0d897",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -136,7 +136,7 @@ bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault,\n     if (!fRet)\n         return false;\n     vAddr.resize(vIP.size());\n-    for (int i = 0; i < vIP.size(); i++)\n+    for (unsigned int i = 0; i < vIP.size(); i++)\n         vAddr[i] = CService(vIP[i], port);\n     return true;\n }"
      },
      {
        "sha": "06306cf8e1e97c87179046ccc24808749f06de58",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -107,7 +107,7 @@ CInv::CInv(int typeIn, const uint256& hashIn)\n \n CInv::CInv(const std::string& strType, const uint256& hashIn)\n {\n-    int i;\n+    unsigned int i;\n     for (i = 1; i < ARRAYLEN(ppszTypeName); i++)\n     {\n         if (strType == ppszTypeName[i])"
      },
      {
        "sha": "309c1f7995dd6fec1e048f9a8bee66f983f5b9bd",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -287,7 +287,7 @@ class base_uint\n     std::string GetHex() const\n     {\n         char psz[sizeof(pn)*2 + 1];\n-        for (int i = 0; i < sizeof(pn); i++)\n+        for (unsigned int i = 0; i < sizeof(pn); i++)\n             sprintf(psz + i*2, \"%02x\", ((unsigned char*)pn)[sizeof(pn) - i - 1]);\n         return std::string(psz, psz + sizeof(pn)*2);\n     }"
      },
      {
        "sha": "9f531082a9576487c36829cd8029305b00586fd9",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -615,7 +615,7 @@ void CWalletTx::AddSupportingTransactions(CTxDB& txdb)\n             LOCK(pwallet->cs_wallet);\n             map<uint256, const CMerkleTx*> mapWalletPrev;\n             set<uint256> setAlreadyDone;\n-            for (int i = 0; i < vWorkQueue.size(); i++)\n+            for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n             {\n                 uint256 hash = vWorkQueue[i];\n                 if (setAlreadyDone.count(hash))\n@@ -723,7 +723,7 @@ void CWallet::ReacceptWalletTransactions()\n                     printf(\"ERROR: ReacceptWalletTransactions() : txindex.vSpent.size() %d != wtx.vout.size() %d\\n\", txindex.vSpent.size(), wtx.vout.size());\n                     continue;\n                 }\n-                for (int i = 0; i < txindex.vSpent.size(); i++)\n+                for (unsigned int i = 0; i < txindex.vSpent.size(); i++)\n                 {\n                     if (wtx.IsSpent(i))\n                         continue;\n@@ -902,7 +902,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n             if (nDepth < (pcoin->IsFromMe() ? nConfMine : nConfTheirs))\n                 continue;\n \n-            for (int i = 0; i < pcoin->vout.size(); i++)\n+            for (unsigned int i = 0; i < pcoin->vout.size(); i++)\n             {\n                 if (pcoin->IsSpent(i) || !IsMine(pcoin->vout[i]))\n                     continue;\n@@ -935,7 +935,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n \n     if (nTotalLower == nTargetValue || nTotalLower == nTargetValue + CENT)\n     {\n-        for (int i = 0; i < vValue.size(); ++i)\n+        for (unsigned int i = 0; i < vValue.size(); ++i)\n         {\n             setCoinsRet.insert(vValue[i].second);\n             nValueRet += vValue[i].first;\n@@ -968,7 +968,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n-            for (int i = 0; i < vValue.size(); i++)\n+            for (unsigned int i = 0; i < vValue.size(); i++)\n             {\n                 if (nPass == 0 ? rand() % 2 : !vfIncluded[i])\n                 {\n@@ -997,7 +997,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n         nValueRet += coinLowestLarger.first;\n     }\n     else {\n-        for (int i = 0; i < vValue.size(); i++)\n+        for (unsigned int i = 0; i < vValue.size(); i++)\n             if (vfBest[i])\n             {\n                 setCoinsRet.insert(vValue[i].second);\n@@ -1006,7 +1006,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n \n         //// debug print\n         printf(\"SelectCoins() best subset: \");\n-        for (int i = 0; i < vValue.size(); i++)\n+        for (unsigned int i = 0; i < vValue.size(); i++)\n             if (vfBest[i])\n                 printf(\"%s \", FormatMoney(vValue[i].first).c_str());\n         printf(\"total %s\\n\", FormatMoney(nBest).c_str());"
      },
      {
        "sha": "b1ee40ab905f953babab0eae88c3a63b692dc351",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c376ac359ec8551823b4ee14c85d85a49f2d3436/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "patch": "@@ -402,7 +402,7 @@ class CWalletTx : public CMerkleTx\n     bool UpdateSpent(const std::vector<char>& vfNewSpent)\n     {\n         bool fReturn = false;\n-        for (int i=0; i < vfNewSpent.size(); i++)\n+        for (unsigned int i = 0; i < vfNewSpent.size(); i++)\n         {\n             if (i == vfSpent.size())\n                 break;\n@@ -488,7 +488,7 @@ class CWalletTx : public CMerkleTx\n             return nAvailableCreditCached;\n \n         int64 nCredit = 0;\n-        for (int i = 0; i < vout.size(); i++)\n+        for (unsigned int i = 0; i < vout.size(); i++)\n         {\n             if (!IsSpent(i))\n             {\n@@ -541,7 +541,7 @@ class CWalletTx : public CMerkleTx\n         std::vector<const CMerkleTx*> vWorkQueue;\n         vWorkQueue.reserve(vtxPrev.size()+1);\n         vWorkQueue.push_back(this);\n-        for (int i = 0; i < vWorkQueue.size(); i++)\n+        for (unsigned int i = 0; i < vWorkQueue.size(); i++)\n         {\n             const CMerkleTx* ptx = vWorkQueue[i];\n "
      }
    ]
  },
  {
    "sha": "3a78f82a783af22b82646365acc56d297a33e2b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTc4ZjgyYTc4M2FmMjJiODI2NDYzNjVhY2M1NmQyOTdhMzNlMmI1",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T20:58:32Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T20:58:32Z"
      },
      "message": "Fix sign-compare warnings: netbase's Lookup* max-solutions may be unsigned",
      "tree": {
        "sha": "d4cbae3066154e7ca03338d1be92d24a05bd2382",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d4cbae3066154e7ca03338d1be92d24a05bd2382"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a78f82a783af22b82646365acc56d297a33e2b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a78f82a783af22b82646365acc56d297a33e2b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a78f82a783af22b82646365acc56d297a33e2b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a78f82a783af22b82646365acc56d297a33e2b5/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c376ac359ec8551823b4ee14c85d85a49f2d3436",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c376ac359ec8551823b4ee14c85d85a49f2d3436"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8b30ffc140e18fce7b3dd89a4b50f88cedfb76d8",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a78f82a783af22b82646365acc56d297a33e2b5/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a78f82a783af22b82646365acc56d297a33e2b5/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=3a78f82a783af22b82646365acc56d297a33e2b5",
        "patch": "@@ -22,7 +22,7 @@ int nConnectTimeout = 5000;\n \n static const unsigned char pchIPv4[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff };\n \n-bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, int nMaxSolutions, bool fAllowLookup)\n+bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     vIP.clear();\n     struct addrinfo aiHint;\n@@ -77,7 +77,7 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, int nM\n     return (vIP.size() > 0);\n }\n \n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, int nMaxSolutions, bool fAllowLookup)\n+bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions, bool fAllowLookup)\n {\n     if (pszName[0] == 0)\n         return false;\n@@ -93,12 +93,12 @@ bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, int nMaxSolutio\n     return LookupIntern(pszHost, vIP, nMaxSolutions, fAllowLookup);\n }\n \n-bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, int nMaxSolutions)\n+bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions)\n {\n     return LookupHost(pszName, vIP, nMaxSolutions, false);\n }\n \n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, int nMaxSolutions)\n+bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault, bool fAllowLookup, unsigned int nMaxSolutions)\n {\n     if (pszName[0] == 0)\n         return false;"
      },
      {
        "sha": "6a257cf9fa5fb853a1351d4881830c0a521c96dd",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a78f82a783af22b82646365acc56d297a33e2b5/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a78f82a783af22b82646365acc56d297a33e2b5/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=3a78f82a783af22b82646365acc56d297a33e2b5",
        "patch": "@@ -134,10 +134,10 @@ class CService : public CNetAddr\n             )\n };\n \n-bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, int nMaxSolutions = 0, bool fAllowLookup = true);\n-bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, int nMaxSolutions = 0);\n+bool LookupHost(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions = 0, bool fAllowLookup = true);\n+bool LookupHostNumeric(const char *pszName, std::vector<CNetAddr>& vIP, unsigned int nMaxSolutions = 0);\n bool Lookup(const char *pszName, CService& addr, int portDefault = 0, bool fAllowLookup = true);\n-bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault = 0, bool fAllowLookup = true, int nMaxSolutions = 0);\n+bool Lookup(const char *pszName, std::vector<CService>& vAddr, int portDefault = 0, bool fAllowLookup = true, unsigned int nMaxSolutions = 0);\n bool LookupNumeric(const char *pszName, CService& addr, int portDefault = 0);\n bool ConnectSocket(const CService &addr, SOCKET& hSocketRet, int nTimeout = nConnectTimeout);\n "
      }
    ]
  },
  {
    "sha": "c3fad8350b5d2596be62399e1ffefc808f328083",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2ZhZDgzNTBiNWQyNTk2YmU2MjM5OWUxZmZlZmM4MDhmMzI4MDgz",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T20:59:09Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T20:59:09Z"
      },
      "message": "serialize.h: CAutoFile's read and write may take size_t nSize",
      "tree": {
        "sha": "f6b296dae1fad816b2015d5d9af4a5c5f333e417",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6b296dae1fad816b2015d5d9af4a5c5f333e417"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3fad8350b5d2596be62399e1ffefc808f328083",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3fad8350b5d2596be62399e1ffefc808f328083",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3fad8350b5d2596be62399e1ffefc808f328083",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3fad8350b5d2596be62399e1ffefc808f328083/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "3a78f82a783af22b82646365acc56d297a33e2b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a78f82a783af22b82646365acc56d297a33e2b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a78f82a783af22b82646365acc56d297a33e2b5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5fb3aa688840c0acb709cbdd9d062d1b79119ecd",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3fad8350b5d2596be62399e1ffefc808f328083/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3fad8350b5d2596be62399e1ffefc808f328083/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=c3fad8350b5d2596be62399e1ffefc808f328083",
        "patch": "@@ -1190,7 +1190,7 @@ class CAutoFile\n     void ReadVersion()           { *this >> nVersion; }\n     void WriteVersion()          { *this << nVersion; }\n \n-    CAutoFile& read(char* pch, int nSize)\n+    CAutoFile& read(char* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n@@ -1199,7 +1199,7 @@ class CAutoFile\n         return (*this);\n     }\n \n-    CAutoFile& write(const char* pch, int nSize)\n+    CAutoFile& write(const char* pch, size_t nSize)\n     {\n         if (!file)\n             throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");"
      }
    ]
  },
  {
    "sha": "0dd710acb6ae14bb88b33a9f86c549bdbb4b6975",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGQ3MTBhY2I2YWUxNGJiODhiMzNhOWY4NmM1NDliZGJiNGI2OTc1",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T20:59:48Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T20:59:48Z"
      },
      "message": "CNode's nHeaderStart may be negative, so change its type",
      "tree": {
        "sha": "e8a0b1bcfd7236e06794a74ff68e87e7380a9dbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8a0b1bcfd7236e06794a74ff68e87e7380a9dbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c3fad8350b5d2596be62399e1ffefc808f328083",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3fad8350b5d2596be62399e1ffefc808f328083",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3fad8350b5d2596be62399e1ffefc808f328083"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "343e77a7827150fd0794c3d9bc5d9287d6f2a866",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=0dd710acb6ae14bb88b33a9f86c549bdbb4b6975",
        "patch": "@@ -117,7 +117,7 @@ class CNode\n     int64 nLastRecv;\n     int64 nLastSendEmpty;\n     int64 nTimeConnected;\n-    unsigned int nHeaderStart;\n+    int nHeaderStart;\n     unsigned int nMessageStart;\n     CAddress addr;\n     int nVersion;\n@@ -299,7 +299,7 @@ class CNode\n \n     void AbortMessage()\n     {\n-        if (nHeaderStart == -1)\n+        if (nHeaderStart < 0)\n             return;\n         vSend.resize(nHeaderStart);\n         nHeaderStart = -1;\n@@ -319,7 +319,7 @@ class CNode\n             return;\n         }\n \n-        if (nHeaderStart == -1)\n+        if (nHeaderStart < 0)\n             return;\n \n         // Set the size\n@@ -344,7 +344,7 @@ class CNode\n \n     void EndMessageAbortIfEmpty()\n     {\n-        if (nHeaderStart == -1)\n+        if (nHeaderStart < 0)\n             return;\n         int nSize = vSend.size() - nMessageStart;\n         if (nSize > 0)"
      }
    ]
  },
  {
    "sha": "9fb89c26f3a3991d197b207f44ef79b1d16c26fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmI4OWMyNmYzYTM5OTFkMTk3YjIwN2Y0NGVmNzliMWQxNmMyNmZj",
    "commit": {
      "author": {
        "name": "Jeff Garzik",
        "email": "jeff@garzik.org",
        "date": "2012-04-15T21:00:20Z"
      },
      "committer": {
        "name": "Jeff Garzik",
        "email": "jgarzik@redhat.com",
        "date": "2012-04-15T21:00:20Z"
      },
      "message": "Fix misc. minor sign-comparison warnings",
      "tree": {
        "sha": "fdb5e70ffc5dc058955f76c51648e364f054444a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fdb5e70ffc5dc058955f76c51648e364f054444a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fb89c26f3a3991d197b207f44ef79b1d16c26fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb89c26f3a3991d197b207f44ef79b1d16c26fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fb89c26f3a3991d197b207f44ef79b1d16c26fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fb89c26f3a3991d197b207f44ef79b1d16c26fc/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0dd710acb6ae14bb88b33a9f86c549bdbb4b6975",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dd710acb6ae14bb88b33a9f86c549bdbb4b6975"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "90ce34b05b50c7d700d314b6c51e9338bc0ea016",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fb89c26f3a3991d197b207f44ef79b1d16c26fc/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fb89c26f3a3991d197b207f44ef79b1d16c26fc/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=9fb89c26f3a3991d197b207f44ef79b1d16c26fc",
        "patch": "@@ -288,7 +288,7 @@ class CBitcoinAddress : public CBase58Data\n \n     bool IsValid() const\n     {\n-        int nExpectedSize = 20;\n+        unsigned int nExpectedSize = 20;\n         bool fExpectTestNet = false;\n         switch(nVersion)\n         {"
      },
      {
        "sha": "2501305edc2b3ba55b9f08fe0b2a8c9b9d6165cf",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fb89c26f3a3991d197b207f44ef79b1d16c26fc/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fb89c26f3a3991d197b207f44ef79b1d16c26fc/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=9fb89c26f3a3991d197b207f44ef79b1d16c26fc",
        "patch": "@@ -31,7 +31,7 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n         i = EVP_BytesToKey(EVP_aes_256_cbc(), EVP_sha512(), &chSalt[0],\n                           (unsigned char *)&strKeyData[0], strKeyData.size(), nRounds, chKey, chIV);\n \n-    if (i != WALLET_CRYPTO_KEY_SIZE)\n+    if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {\n         memset(&chKey, 0, sizeof chKey);\n         memset(&chIV, 0, sizeof chIV);"
      },
      {
        "sha": "8f220f1c753d7766ebd8290fbaca6440e6776eb9",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fb89c26f3a3991d197b207f44ef79b1d16c26fc/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fb89c26f3a3991d197b207f44ef79b1d16c26fc/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=9fb89c26f3a3991d197b207f44ef79b1d16c26fc",
        "patch": "@@ -173,7 +173,7 @@ class CKey\n \n     CPrivKey GetPrivKey() const\n     {\n-        unsigned int nSize = i2d_ECPrivateKey(pkey, NULL);\n+        int nSize = i2d_ECPrivateKey(pkey, NULL);\n         if (!nSize)\n             throw key_error(\"CKey::GetPrivKey() : i2d_ECPrivateKey failed\");\n         CPrivKey vchPrivKey(nSize, 0);\n@@ -196,7 +196,7 @@ class CKey\n \n     std::vector<unsigned char> GetPubKey() const\n     {\n-        unsigned int nSize = i2o_ECPublicKey(pkey, NULL);\n+        int nSize = i2o_ECPublicKey(pkey, NULL);\n         if (!nSize)\n             throw key_error(\"CKey::GetPubKey() : i2o_ECPublicKey failed\");\n         std::vector<unsigned char> vchPubKey(nSize, 0);"
      }
    ]
  }
]