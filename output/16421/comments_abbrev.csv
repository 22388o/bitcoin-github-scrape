DrahtBot,2019-07-18 23:28:35,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16400](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16400.html) (refactor: Rewrite AcceptToMemoryPoolWorker(",https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-513031077,513031077,
jnewbery,2019-07-22 21:34:22,Please rebase so this only contains the single commit for this PR.,https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-513963835,513963835,
TheBlueMatt,2019-07-23 20:08:50,Rebased. Now just one commit + master.,https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-514364535,514364535,
TheBlueMatt,2019-07-29 18:36:09,"Rebased after #16471. Also, @sdaftuar noted that I (a) misunderstood the meaning of setConflicts so the description in the comment was wrong in a few ways, and also we were allowing an RBF transaction to get in via the carve-out even when it shouldn't be allowed to (ie when it has more than one mempool ancestor). Sadly, after talking through it it doesn't seem like we'll be able to get away with n",https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-516111698,516111698,
TheBlueMatt,2019-07-30 18:46:50,"Rewrote the comment at the top of the new block to now be a Mega Comment (tm). Hopefully its sufficient, though I can break it up and move it to corresponding code if you really want @sdaftuar, I just didn't bother cause its easy to rewrite without.",https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-516545624,516545624,
MarcoFalke,2019-07-30 21:06:06,"Concept ACK, though I'd prefer if this was solved for all mempool txs and not only for a special case of lightning txs.",https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-516595758,516595758,
TheBlueMatt,2019-07-31 21:07:41,"@MarcoFalke This isn't *completely* targeted only at lightning/carve-out/contract applications, though it obviously ensures that carve-out transactions are a supported use-case. Mostly trying to implement this in the general case is Hard (tm), but this does work for any only-directly-conflicts-with-1-transaction tx.",https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-517021531,517021531,
ajtowns,2019-09-02 04:27:30,"ACK b9dc087c99d327aaa194de31282fedde864b7740 ; changes since last ack are comments and dropping the ""no new ancestors"" check for this carve out; code review, checked compiled and tests pass.\n\nDropping the checks seems correct -- the original behaviour when conflicting with one tx should have been:\n\n```\nif (!has_new_ancestors && desc > LimitDesc+1) Invalid();\nif (has_new_ancestors && de",https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-526996994,526996994,
TheBlueMatt,2019-09-04 19:54:55,Tweaked the increment to use GetSizeWithDescendants() instead and updated the comment (with some slight readability tweaks @instagibbs may appreciate).,https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-528059466,528059466,
instagibbs,2019-09-04 19:58:01,"re-ACK https://github.com/bitcoin/bitcoin/pull/16421/commits/5ce822efbe45513ce3517c1ca731ac6d6a0c3b54\n\ncomment clarification and `GetSizeWithDescendants` change only.",https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-528060551,528060551,
ajtowns,2019-09-05 01:16:56,ACK 5ce822efbe45513ce3517c1ca731ac6d6a0c3b54 ; GetSizeWithDescendants is only change and makes sense,https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-528154120,528154120,
sipa,2019-09-06 18:25:51,Code review ACK 5ce822efbe45513ce3517c1ca731ac6d6a0c3b54. I haven't thought hard about the effect on potential DoS issues this policy change may have.,https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-528963361,528963361,
sdaftuar,2019-09-09 19:53:09,post-merge utACK,https://github.com/bitcoin/bitcoin/pull/16421#issuecomment-529638952,529638952,
sdaftuar,2019-07-29 18:53:41,"Can we just use `GetMemPoolParents(conflict)` and grab the hashes from there, instead of iterating all the inputs?",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308384647,308384647,src/validation.cpp
sdaftuar,2019-07-29 18:56:11,"Similarly, if you hadn't cleared out setAncestors() a few lines up, I think you could skip having to walk all the inputs again here.  Perhaps save that and then compare setAncestors to the mempool parents of conflictTx?",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308385882,308385882,src/validation.cpp
sdaftuar,2019-07-29 18:59:40,"I think a comment would be helpful here to explain exactly what we're doing:\n * No need to bump ancestor sizes/limits (since those are only tested on the transaction itself and are unaffected by the presence of conflicting transactions)\n * Descendant size / count are bumped by conflict tx size and 1, to account for the removal of that transaction from all the ancestors of the new transaction. ",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308387438,308387438,src/validation.cpp
sdaftuar,2019-07-29 19:01:39,"Another comment would be helpful here, to explain that if we failed to RBF due to the package limit, we'll give it one more try using the carve-out rules.  So we use the same ancestor limits that the carve-out provision requires, but bump the descendant limits to account for the to-be-removed transaction.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388243,308388243,src/validation.cpp
sdaftuar,2019-07-29 19:02:07,"It looks like you're not clearing setAncestors before this call.  I think that's actually fine, but maybe better practice to clear it out to avoid confusion?",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388398,308388398,src/validation.cpp
sdaftuar,2019-07-29 19:03:30,"This whole section could probably use a clearer comment that lays out the problem we have with evaluating package limits in the presence of RBF transactions, to help future readers of this code.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308388970,308388970,src/validation.cpp
TheBlueMatt,2019-07-30 17:57:57,"No, GetMemPoolParents just returns the parents set, which isn't actually filled until the very last step in addUnchecked.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308860203,308860203,src/validation.cpp
TheBlueMatt,2019-07-30 18:00:39,"Right, but doesn't CalculateMemPoolAncestors return early if we hit a limit? I didn't want to start introducing some ""if we return early, X is initialized, but Y is not"" kind of invariants in CalculateMemPoolAncestors. If you think its worth it, though...",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308861464,308861464,src/validation.cpp
sdaftuar,2019-07-30 18:06:18,"Oh right, never mind.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308864741,308864741,src/validation.cpp
sdaftuar,2019-07-30 18:11:02,"The conflict tx is already in the mempool, so shouldnâ€™t that work fine?",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r308866818,308866818,src/validation.cpp
TheBlueMatt,2019-07-31 21:05:25,"Oh right, was looking at the wrong line and thought you meant the new entry. Will fix.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r309431618,309431618,src/validation.cpp
ajtowns,2019-08-15 03:53:03,"Rather than doing this test after the initial CalculateMemPoolAncestors(), would it make sense to work out if the limits can be relaxed first, and then start calling CalculateMemPoolAncestors? ie\n\n```c++\nint bump_desc = 0;\nint bump_desc_size = 0;\nif (setConflicts.size() == 1) {\n auto conflict = *setIterConflicting.begin();\n if (tx_only_uses_unconfirmed_inputs_from_conflicting_tx) {\",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r314166682,314166682,src/validation.cpp
ajtowns,2019-08-15 03:55:28,"I wonder if extensive comments like this wouldn't be better as an informative BIP? Also it's probably a lost cause, but wrapping the comments at 80 columns or less rather than ~120 would be nice :)",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r314166985,314166985,src/validation.cpp
instagibbs,2019-08-19 14:07:52,"too many commas :) `s/very realistic, either/very realistic either/`",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315229807,315229807,src/validation.cpp
instagibbs,2019-08-19 14:18:12,"for readers of the comments, this has (attempted) to be addressed",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315235160,315235160,src/validation.cpp
instagibbs,2019-08-19 14:21:40,"> the subset of RBF transactions which we allow despite conflicts\n\nAren't RBF transactions conflicting by definition?",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315237028,315237028,src/validation.cpp
instagibbs,2019-08-19 14:28:58,"This check appears to be identical to https://github.com/bitcoin/bitcoin/blob/master/src/validation.cpp#L733\n\nwhich would at least be good to point out, or how it's different, if it's not the same. I could see the other check being relaxed in the future but this kept in place.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315240852,315240852,src/validation.cpp
instagibbs,2019-08-19 14:30:46,you should probably label the thing you're calling `carve-out` for those not reading git history.,https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315241877,315241877,src/validation.cpp
instagibbs,2019-08-19 14:33:36,"Having real trouble parsing this last paragraph.\n\nLots of different things being referenced, ""above"", ""below"", ""corresponding"", unsure exactly what it's referring to.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315243438,315243438,src/validation.cpp
TheBlueMatt,2019-08-19 21:52:11,"Ah, indeed, nice call, done.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315428075,315428075,src/validation.cpp
TheBlueMatt,2019-08-19 21:53:01,"80 chars is....very antiquated. I dunno anyone who is left coding on a 80x60 terminal :p.\n\nStill, I don't think this deserves a BIP if only cause we hopefully can extend it further in the future.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315428337,315428337,src/validation.cpp
TheBlueMatt,2019-08-19 22:23:30,Is this a bit more readable given the changes made for https://github.com/bitcoin/bitcoin/pull/16421#pullrequestreview-275251295 ?,https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315437310,315437310,src/validation.cpp
ajtowns,2019-08-20 01:19:31,"`setIterConflicting.size()` could theoretically be zero if the conflicting hash from `setConflicts` isn't in the mempool somehow. That shouldn't be possible because we've held a lock on `cs_main` and `pool.cs` since we populated `setConflicts`, so this assertion should be correct.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315472937,315472937,src/validation.cpp
ajtowns,2019-08-20 01:19:37,"""Contracting"" with a t? :)\n",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315472953,315472953,src/validation.cpp
TheBlueMatt,2019-08-20 03:57:20,No one ever warned me I'd need to know how to spell to write code :(,https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315497691,315497691,src/validation.cpp
TheBlueMatt,2019-08-20 18:47:24,"Indeed! Good call. I removes the entire block of code wholesale, but added extra comments to ensure if the BIP 125 rules are relaxed we know to re-add the checks here.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r315847891,315847891,src/validation.cpp
instagibbs,2019-08-30 17:58:09,named args would make this more obvious what's going on without a comment,https://github.com/bitcoin/bitcoin/pull/16421#discussion_r319618828,319618828,test/functional/mempool_package_onemore.py
sdaftuar,2019-09-03 18:57:33,"s/dependant/descendant/g\ns/parents'/parent's/",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r320427716,320427716,src/validation.cpp
sdaftuar,2019-09-04 15:52:57,"I believe we can make this `conflict->GetSizeWithDescendants()` and still respect our mempool limits.\n\nWithout the size of the descendants, it's possible that an attempt to RBF a single transaction could fail if there are descendants of that transaction in the mempool, due to the mempool limits (even though those child transactions would be replaced as well).  By accounting for the size of tho",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r320838962,320838962,src/validation.cpp
instagibbs,2019-09-04 18:32:18,note the comment above would have to change too https://github.com/bitcoin/bitcoin/pull/16421/files#diff-24efdb00bfbe56b140fb006b562cc70bR641,https://github.com/bitcoin/bitcoin/pull/16421#discussion_r320911079,320911079,src/validation.cpp
TheBlueMatt,2019-09-04 19:53:27,Done! good idea.,https://github.com/bitcoin/bitcoin/pull/16421#discussion_r320944986,320944986,src/validation.cpp
ajtowns,2019-09-05 01:15:03,"Can't we actually cope with merging packages this way too though? If you've got a tx that has parents A, B, C; and that conflicts with tx's X (parent A) and Y (parent B), then beforehand you had:\n\n```\n..., A, X, [children X]\n..., B, Y, [children Y]\n```\n\n(maybe some tx's were descendants of both X and Y, but it's worse if there weren't any like that) and afterwards you have:\n\n```",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r321038978,321038978,src/validation.cpp
TheBlueMatt,2019-09-05 18:01:38,"I agree there's lots we can do in the future to improve things (not actually 100% sure on this one, these things are complicated...) lets try to land this as-is first, though, cause I do really want it for 0.19 still.",https://github.com/bitcoin/bitcoin/pull/16421#discussion_r321404523,321404523,src/validation.cpp
