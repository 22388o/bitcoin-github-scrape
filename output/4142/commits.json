[
  {
    "sha": "0a0cd345520382bd726fef50c62864715b03f164",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTBjZDM0NTUyMDM4MmJkNzI2ZmVmNTBjNjI4NjQ3MTViMDNmMTY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-07T07:09:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-12T07:30:46Z"
      },
      "message": "rpc: pass errors from async_accept\n\nAccording to the [boost::asio documentation](http://www.boost.org/doc/libs/1_55_0/doc/html/boost_asio/reference/basic_socket_acceptor/async_accept/overload2.html),\nthe function signature of the handler must be:\n\n    void handler(\n      const boost::system::error_code& error // Result of operation.\n    );\n\nWe were binding *all* the arguments, instead of all but the error,\nresulting in nullary function that never got the error. Fix this\nby adding an input argument substitution.",
      "tree": {
        "sha": "aeb8a42d8fa0adae4e336d8f7488fa0aff65b568",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aeb8a42d8fa0adae4e336d8f7488fa0aff65b568"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a0cd345520382bd726fef50c62864715b03f164",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0cd345520382bd726fef50c62864715b03f164",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a0cd345520382bd726fef50c62864715b03f164",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0cd345520382bd726fef50c62864715b03f164/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e2f6855df83a8b1b3d155e8bf2c1d55e4fee4a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e2f6855df83a8b1b3d155e8bf2c1d55e4fee4a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e2f6855df83a8b1b3d155e8bf2c1d55e4fee4a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "44f329dd155dc5f9c33ba36dbcb988696c9ce530",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a0cd345520382bd726fef50c62864715b03f164/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a0cd345520382bd726fef50c62864715b03f164/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=0a0cd345520382bd726fef50c62864715b03f164",
        "patch": "@@ -466,7 +466,7 @@ static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketA\n                 boost::ref(context),\n                 fUseSSL,\n                 conn,\n-                boost::asio::placeholders::error));\n+                _1));\n }\n \n \n@@ -490,6 +490,8 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n     if (error)\n     {\n         delete conn;\n+        // TODO: Actually handle errors\n+        LogPrintf(\"%s: Error: %s\\n\", __func__, error.message());\n     }\n \n     // Restrict callers by IP.  It is important to"
      }
    ]
  },
  {
    "sha": "1a445225f6638839dec7cfc8822f1218c74c974f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTQ0NTIyNWY2NjM4ODM5ZGVjN2NmYzg4MjJmMTIxOGM3NGM5NzRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-07T07:24:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-12T07:30:46Z"
      },
      "message": "rpc: Make sure conn object is always cleaned up\n\nMake sure conn object always gets cleaned up by using a\n`boost::shared_ptr`.\n\nThis makes valgrind happy - before this commit, one connection object\nalways leaked at shutdown, as well as can avoid other leaks, when\nfor example an exception happens.\n\nAlso add an explicit Close() to the !ClientAllowed path to make it similar\nto the normal path (I'm not sure whether it is needed, but it\ncan't hurt).",
      "tree": {
        "sha": "f962af26337c8d0c7578fc765dfab8e1a3a69d4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f962af26337c8d0c7578fc765dfab8e1a3a69d4a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a445225f6638839dec7cfc8822f1218c74c974f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a445225f6638839dec7cfc8822f1218c74c974f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a445225f6638839dec7cfc8822f1218c74c974f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a445225f6638839dec7cfc8822f1218c74c974f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a0cd345520382bd726fef50c62864715b03f164",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a0cd345520382bd726fef50c62864715b03f164",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a0cd345520382bd726fef50c62864715b03f164"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 6,
      "deletions": 10
    },
    "files": [
      {
        "sha": "442bf5c9cbdf6000cd9a5e4074f58df38feb13c4",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a445225f6638839dec7cfc8822f1218c74c974f/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a445225f6638839dec7cfc8822f1218c74c974f/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=1a445225f6638839dec7cfc8822f1218c74c974f",
        "patch": "@@ -444,7 +444,7 @@ template <typename Protocol, typename SocketAcceptorService>\n static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n                              ssl::context& context,\n                              bool fUseSSL,\n-                             AcceptedConnection* conn,\n+                             boost::shared_ptr< AcceptedConnection > conn,\n                              const boost::system::error_code& error);\n \n /**\n@@ -456,7 +456,7 @@ static void RPCListen(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketA\n                    const bool fUseSSL)\n {\n     // Accept connection\n-    AcceptedConnectionImpl<Protocol>* conn = new AcceptedConnectionImpl<Protocol>(acceptor->get_io_service(), context, fUseSSL);\n+    boost::shared_ptr< AcceptedConnectionImpl<Protocol> > conn(new AcceptedConnectionImpl<Protocol>(acceptor->get_io_service(), context, fUseSSL));\n \n     acceptor->async_accept(\n             conn->sslStream.lowest_layer(),\n@@ -477,23 +477,20 @@ template <typename Protocol, typename SocketAcceptorService>\n static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol, SocketAcceptorService> > acceptor,\n                              ssl::context& context,\n                              const bool fUseSSL,\n-                             AcceptedConnection* conn,\n+                             boost::shared_ptr< AcceptedConnection > conn,\n                              const boost::system::error_code& error)\n {\n     // Immediately start accepting new connections, except when we're cancelled or our socket is closed.\n     if (error != asio::error::operation_aborted && acceptor->is_open())\n         RPCListen(acceptor, context, fUseSSL);\n \n-    AcceptedConnectionImpl<ip::tcp>* tcp_conn = dynamic_cast< AcceptedConnectionImpl<ip::tcp>* >(conn);\n+    AcceptedConnectionImpl<ip::tcp>* tcp_conn = dynamic_cast< AcceptedConnectionImpl<ip::tcp>* >(conn.get());\n \n-    // TODO: Actually handle errors\n     if (error)\n     {\n-        delete conn;\n         // TODO: Actually handle errors\n         LogPrintf(\"%s: Error: %s\\n\", __func__, error.message());\n     }\n-\n     // Restrict callers by IP.  It is important to\n     // do this before starting client thread, to filter out\n     // certain DoS and misbehaving clients.\n@@ -502,12 +499,11 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n         // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n         if (!fUseSSL)\n             conn->stream() << HTTPReply(HTTP_FORBIDDEN, \"\", false) << std::flush;\n-        delete conn;\n+        conn->close();\n     }\n     else {\n-        ServiceConnection(conn);\n+        ServiceConnection(conn.get());\n         conn->close();\n-        delete conn;\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "381b25dfde013efae4e0360f82cd34e27662e743",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODFiMjVkZmRlMDEzZWZhZTRlMDM2MGY4MmNkMzRlMjc2NjJlNzQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-07T09:47:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-12T07:30:46Z"
      },
      "message": "doc: remove mention of `-rpctimeout` from man page\n\nThat option hasn't existed for a long time.",
      "tree": {
        "sha": "5e94103aa7d4a18485b559aba484320546d37b89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e94103aa7d4a18485b559aba484320546d37b89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/381b25dfde013efae4e0360f82cd34e27662e743",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381b25dfde013efae4e0360f82cd34e27662e743",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/381b25dfde013efae4e0360f82cd34e27662e743",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381b25dfde013efae4e0360f82cd34e27662e743/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a445225f6638839dec7cfc8822f1218c74c974f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a445225f6638839dec7cfc8822f1218c74c974f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a445225f6638839dec7cfc8822f1218c74c974f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 0,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7438b4b66ad7f3c91e887ccec37caf8632f62b3b",
        "filename": "contrib/debian/manpages/bitcoin.conf.5",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/381b25dfde013efae4e0360f82cd34e27662e743/contrib/debian/manpages/bitcoin.conf.5",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/381b25dfde013efae4e0360f82cd34e27662e743/contrib/debian/manpages/bitcoin.conf.5",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin.conf.5?ref=381b25dfde013efae4e0360f82cd34e27662e743",
        "patch": "@@ -37,9 +37,6 @@ You must set *rpcuser* to secure the JSON-RPC api.\n \\fBrpcpassword=\\fR\\fI'password'\\fR\n You must set *rpcpassword* to secure the JSON-RPC api.\n .TP\n-\\fBrpctimeout=\\fR\\fI'30'\\fR\n-How many seconds *bitcoin* will wait for a complete RPC HTTP request, after the HTTP connection is established.\n-.TP\n \\fBrpcallowip=\\fR\\fI'192.168.1.*'\\fR\n By default, only RPC connections from localhost are allowed. Specify as many *rpcallowip=* settings as you like to allow connections from other hosts (and you may use * as a wildcard character).\n .TP"
      }
    ]
  },
  {
    "sha": "cef44941e798c33f7334bf90a2dd531f9bada8c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWY0NDk0MWU3OThjMzNmNzMzNGJmOTBhMmRkNTMxZjliYWRhOGMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-09T08:01:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-12T07:31:06Z"
      },
      "message": "rpc: keep track of acceptors, and cancel them in StopRPCThreads\n\nFixes #4156.\n\nThe problem is that the boost::asio::io_service destructor\nwaits for the acceptors to finish (on windows, and boost 1.55).\n\nFix this by keeping track of the acceptors and cancelling them before\nstopping the event loops.",
      "tree": {
        "sha": "56c6bed50357f680454a968434db6f12ca38340c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56c6bed50357f680454a968434db6f12ca38340c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cef44941e798c33f7334bf90a2dd531f9bada8c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef44941e798c33f7334bf90a2dd531f9bada8c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cef44941e798c33f7334bf90a2dd531f9bada8c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cef44941e798c33f7334bf90a2dd531f9bada8c3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "381b25dfde013efae4e0360f82cd34e27662e743",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/381b25dfde013efae4e0360f82cd34e27662e743",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/381b25dfde013efae4e0360f82cd34e27662e743"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 14,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d4a229b092d972da7102e47a8c3bf4edee60b85f",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 3,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cef44941e798c33f7334bf90a2dd531f9bada8c3/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cef44941e798c33f7334bf90a2dd531f9bada8c3/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=cef44941e798c33f7334bf90a2dd531f9bada8c3",
        "patch": "@@ -39,6 +39,7 @@ static ssl::context* rpc_ssl_context = NULL;\n static boost::thread_group* rpc_worker_group = NULL;\n static boost::asio::io_service::work *rpc_dummy_work = NULL;\n static std::vector<CSubNet> rpc_allow_subnets; //!< List of subnets to allow RPC connections from\n+static std::vector< boost::shared_ptr<ip::tcp::acceptor> > rpc_acceptors;\n \n void RPCTypeCheck(const Array& params,\n                   const list<Value_type>& typesExpected,\n@@ -593,12 +594,13 @@ void StartRPCThreads()\n     asio::ip::address bindAddress = loopback ? asio::ip::address_v6::loopback() : asio::ip::address_v6::any();\n     ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", Params().RPCPort()));\n     boost::system::error_code v6_only_error;\n-    boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n \n     bool fListening = false;\n     std::string strerr;\n     try\n     {\n+        boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n+        rpc_acceptors.push_back(acceptor);\n         acceptor->open(endpoint.protocol());\n         acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n \n@@ -616,15 +618,15 @@ void StartRPCThreads()\n     {\n         strerr = strprintf(_(\"An error occurred while setting up the RPC port %u for listening on IPv6, falling back to IPv4: %s\"), endpoint.port(), e.what());\n     }\n-\n     try {\n         // If dual IPv6/IPv4 failed (or we're opening loopback interfaces only), open IPv4 separately\n         if (!fListening || loopback || v6_only_error)\n         {\n             bindAddress = loopback ? asio::ip::address_v4::loopback() : asio::ip::address_v4::any();\n             endpoint.address(bindAddress);\n \n-            acceptor.reset(new ip::tcp::acceptor(*rpc_io_service));\n+            boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n+            rpc_acceptors.push_back(acceptor);\n             acceptor->open(endpoint.protocol());\n             acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n             acceptor->bind(endpoint);\n@@ -668,7 +670,16 @@ void StopRPCThreads()\n {\n     if (rpc_io_service == NULL) return;\n \n+    // First, cancel all timers and acceptors\n+    // This is not done automatically by ->stop(), and in some cases the destructor of\n+    // asio::io_service can hang if this is skipped.\n+    BOOST_FOREACH(const boost::shared_ptr<ip::tcp::acceptor> &acceptor, rpc_acceptors)\n+        acceptor->cancel();\n+    rpc_acceptors.clear();\n+    BOOST_FOREACH(const PAIRTYPE(std::string, boost::shared_ptr<deadline_timer>) &timer, deadlineTimers)\n+        timer.second->cancel();\n     deadlineTimers.clear();\n+\n     rpc_io_service->stop();\n     if (rpc_worker_group != NULL)\n         rpc_worker_group->join_all();"
      }
    ]
  }
]