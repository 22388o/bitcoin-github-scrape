[
  {
    "sha": "49fa26e12230310ab84e26d5775a4a7c7818cd54",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWZhMjZlMTIyMzAzMTBhYjg0ZTI2ZDU3NzVhNGE3Yzc4MThjZDU0",
    "commit": {
      "author": {
        "name": "Bohdan Vanieiev",
        "email": "warchantua@gmail.com",
        "date": "2020-08-06T21:09:59Z"
      },
      "committer": {
        "name": "Bohdan Vanieiev",
        "email": "warchantua@gmail.com",
        "date": "2020-08-06T21:09:59Z"
      },
      "message": "Run clang-tidy -*,performance-*\n\nTo reproduce changes:\n\n1. Install, then find run-clang-tidy.py\n$ find /usr -type f -name run-clang-tidy.py\n/usr/share/clang/run-clang-tidy.py\n\n2. You need to create compile_commands.json file.\nRun autogen, configure, then\n$ compiledb -n make\n\n3. Run clang-tidy with checks:\n$ cd src\n$ /usr/share/clang/run-clang-tidy.py -checks='-*,performance-*' -p .. -fix",
      "tree": {
        "sha": "4c1d455af968f6d91591b4a79069e2546ec163fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c1d455af968f6d91591b4a79069e2546ec163fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49fa26e12230310ab84e26d5775a4a7c7818cd54",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fa26e12230310ab84e26d5775a4a7c7818cd54",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49fa26e12230310ab84e26d5775a4a7c7818cd54",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fa26e12230310ab84e26d5775a4a7c7818cd54/comments",
    "author": {
      "login": "Warchant",
      "id": 1867551,
      "node_id": "MDQ6VXNlcjE4Njc1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1867551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Warchant",
      "html_url": "https://github.com/Warchant",
      "followers_url": "https://api.github.com/users/Warchant/followers",
      "following_url": "https://api.github.com/users/Warchant/following{/other_user}",
      "gists_url": "https://api.github.com/users/Warchant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Warchant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Warchant/subscriptions",
      "organizations_url": "https://api.github.com/users/Warchant/orgs",
      "repos_url": "https://api.github.com/users/Warchant/repos",
      "events_url": "https://api.github.com/users/Warchant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Warchant/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Warchant",
      "id": 1867551,
      "node_id": "MDQ6VXNlcjE4Njc1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1867551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Warchant",
      "html_url": "https://github.com/Warchant",
      "followers_url": "https://api.github.com/users/Warchant/followers",
      "following_url": "https://api.github.com/users/Warchant/following{/other_user}",
      "gists_url": "https://api.github.com/users/Warchant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Warchant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Warchant/subscriptions",
      "organizations_url": "https://api.github.com/users/Warchant/orgs",
      "repos_url": "https://api.github.com/users/Warchant/repos",
      "events_url": "https://api.github.com/users/Warchant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Warchant/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82127d27c9001eee3eb28df67ce2e6eace620423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82127d27c9001eee3eb28df67ce2e6eace620423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82127d27c9001eee3eb28df67ce2e6eace620423"
      }
    ],
    "stats": {
      "total": 320,
      "additions": 173,
      "deletions": 147
    },
    "files": [
      {
        "sha": "ef2c27162f1a2c894978a96bfbdab36349fbe4f2",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -624,7 +624,7 @@ CAddrInfo CAddrMan::SelectTriedCollision_()\n     return mapInfo[id_old];\n }\n \n-std::vector<bool> CAddrMan::DecodeAsmap(fs::path path)\n+std::vector<bool> CAddrMan::DecodeAsmap(const fs::path& path)\n {\n     std::vector<bool> bits;\n     FILE *filestr = fsbridge::fopen(path, \"rb\");"
      },
      {
        "sha": "58949f2adbdb9413e234535084b8792d9b1e25f4",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -287,7 +287,7 @@ friend class CAddrManTest;\n     std::vector<bool> m_asmap;\n \n     // Read asmap from provided binary file\n-    static std::vector<bool> DecodeAsmap(fs::path path);\n+    static std::vector<bool> DecodeAsmap(const fs::path& path);\n \n \n     /**"
      },
      {
        "sha": "5e8aafa2872b427a216ae935d95fe02317aaad40",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -524,7 +524,7 @@ static void GetWalletBalances(UniValue& result)\n \n     UniValue balances(UniValue::VOBJ);\n     for (const UniValue& wallet : wallets.getValues()) {\n-        const std::string wallet_name = wallet.get_str();\n+        const std::string& wallet_name = wallet.get_str();\n         const UniValue getbalances = ConnectAndCallRPC(&rh, \"getbalances\", /* args=*/{}, wallet_name);\n         const UniValue& balance = find_value(getbalances, \"result\")[\"mine\"][\"trusted\"];\n         balances.pushKV(wallet_name, balance);"
      },
      {
        "sha": "d62ab33a77114400060b48d1a16a7424bf592258",
        "filename": "src/blockfilter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/blockfilter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/blockfilter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockfilter.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -198,7 +198,7 @@ const std::set<BlockFilterType>& AllBlockFilterTypes()\n \n     static std::once_flag flag;\n     std::call_once(flag, []() {\n-            for (auto entry : g_filter_types) {\n+            for (const auto& entry : g_filter_types) {\n                 types.insert(entry.first);\n             }\n         });\n@@ -214,7 +214,7 @@ const std::string& ListBlockFilterTypes()\n     std::call_once(flag, []() {\n             std::stringstream ret;\n             bool first = true;\n-            for (auto entry : g_filter_types) {\n+            for (const auto& entry : g_filter_types) {\n                 if (!first) ret << \", \";\n                 ret << entry.second;\n                 first = false;"
      },
      {
        "sha": "24b40b4dd975408fa60f44b9b2c8874fe8896d6e",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -271,7 +271,7 @@ bool CCoinsViewErrorCatcher::GetCoin(const COutPoint &outpoint, Coin &coin) cons\n     try {\n         return CCoinsViewBacked::GetCoin(outpoint, coin);\n     } catch(const std::runtime_error& e) {\n-        for (auto f : m_err_callbacks) {\n+        for (const auto& f : m_err_callbacks) {\n             f();\n         }\n         LogPrintf(\"Error reading from database: %s\\n\", e.what());"
      },
      {
        "sha": "77a062b4104937d29f40e9c3984f604559c89825",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -214,7 +214,7 @@ int ParseSighashString(const UniValue& sighash)\n             {std::string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n             {std::string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n         };\n-        std::string strHashType = sighash.get_str();\n+        const std::string& strHashType = sighash.get_str();\n         const auto& it = map_sighash_values.find(strHashType);\n         if (it != map_sighash_values.end()) {\n             hash_type = it->second;"
      },
      {
        "sha": "8fabf2809de89a4a69b3d93d5404c15b20b0d020",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -91,7 +91,7 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n \n //This function checks username and password against -rpcauth\n //entries from config file.\n-static bool multiUserAuthorized(std::string strUserPass)\n+static bool multiUserAuthorized(const std::string& strUserPass)\n {\n     if (strUserPass.find(':') == std::string::npos) {\n         return false;"
      },
      {
        "sha": "5a8c4c8d3cc3a4195349de5f58007d72bb9151e9",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -21,6 +21,8 @@\n #include <stdio.h>\n #include <stdlib.h>\n #include <string>\n+#include <utility>\n+\n \n #include <sys/types.h>\n #include <sys/stat.h>\n@@ -127,7 +129,7 @@ class WorkQueue\n struct HTTPPathHandler\n {\n     HTTPPathHandler(std::string _prefix, bool _exactMatch, HTTPRequestHandler _handler):\n-        prefix(_prefix), exactMatch(_exactMatch), handler(_handler)\n+        prefix(std::move(_prefix)), exactMatch(_exactMatch), handler(std::move(_handler))\n     {\n     }\n     std::string prefix;"
      },
      {
        "sha": "7aa82ffcdcaed5abb8bd5eeafdc34723347dc2eb",
        "filename": "src/index/blockfilterindex.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/index/blockfilterindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/index/blockfilterindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -270,7 +270,7 @@ static bool CopyHeightIndexToHashIndex(CDBIterator& db_it, CDBBatch& batch,\n                          __func__, index_name, DB_BLOCK_HEIGHT, height);\n         }\n \n-        batch.Write(DBHashKey(value.first), std::move(value.second));\n+        batch.Write(DBHashKey(value.first), value.second);\n \n         db_it.Next();\n     }\n@@ -309,7 +309,7 @@ static bool LookupOne(const CDBWrapper& db, const CBlockIndex* block_index, DBVa\n         return false;\n     }\n     if (read_out.first == block_index->GetBlockHash()) {\n-        result = std::move(read_out.second);\n+        result = read_out.second;\n         return true;\n     }\n \n@@ -360,7 +360,7 @@ static bool LookupRange(CDBWrapper& db, const std::string& index_name, int start\n \n         size_t i = static_cast<size_t>(block_index->nHeight - start_height);\n         if (block_hash == values[i].first) {\n-            results[i] = std::move(values[i].second);\n+            results[i] = values[i].second;\n             continue;\n         }\n \n@@ -456,7 +456,7 @@ BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type)\n     return it != g_filter_indexes.end() ? &it->second : nullptr;\n }\n \n-void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn)\n+void ForEachBlockFilterIndex(const std::function<void (BlockFilterIndex&)>& fn)\n {\n     for (auto& entry : g_filter_indexes) fn(entry.second);\n }"
      },
      {
        "sha": "cb345ea787cccb03e8a1cfb890591bfe5fce5d1d",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -84,7 +84,7 @@ class BlockFilterIndex final : public BaseIndex\n BlockFilterIndex* GetBlockFilterIndex(BlockFilterType filter_type);\n \n /** Iterate over all running block filter indexes, invoking fn on each. */\n-void ForEachBlockFilterIndex(std::function<void (BlockFilterIndex&)> fn);\n+void ForEachBlockFilterIndex(const std::function<void (BlockFilterIndex&)>& fn);\n \n /**\n  * Initialize a block filter index for the given type if one does not already exist. Returns true if"
      },
      {
        "sha": "7dfcc3451b03b2ac8ccfd682b76d36f902347fa9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -656,7 +656,7 @@ static void CleanupBlockRevFiles()\n     // Remove the rev files immediately and insert the blk file paths into an\n     // ordered map keyed by block file index.\n     LogPrintf(\"Removing unusable blk?????.dat and rev?????.dat files for -reindex with -prune\\n\");\n-    fs::path blocksdir = GetBlocksDir();\n+    const fs::path& blocksdir = GetBlocksDir();\n     for (fs::directory_iterator it(blocksdir); it != fs::directory_iterator(); it++) {\n         if (fs::is_regular_file(*it) &&\n             it->path().filename().string().length() == 12 &&\n@@ -683,7 +683,7 @@ static void CleanupBlockRevFiles()\n     }\n }\n \n-static void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFiles)\n+static void ThreadImport(ChainstateManager& chainman, const std::vector<fs::path>& vImportFiles)\n {\n     const CChainParams& chainparams = Params();\n     ScheduleBatchPriority();\n@@ -1048,7 +1048,7 @@ bool AppInitParameterInteraction()\n         const std::vector<std::string> categories = gArgs.GetArgs(\"-debug\");\n \n         if (std::none_of(categories.begin(), categories.end(),\n-            [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n+            [](const std::string& cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n                 if (!LogInstance().EnableCategory(cat)) {\n                     InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n@@ -1199,7 +1199,7 @@ bool AppInitParameterInteraction()\n static bool LockDataDirectory(bool probeOnly)\n {\n     // Make sure only a single Bitcoin process is using the data directory.\n-    fs::path datadir = GetDataDir();\n+    const fs::path& datadir = GetDataDir();\n     if (!DirIsWritable(datadir)) {\n         return InitError(strprintf(_(\"Cannot write to data directory '%s'; check permissions.\"), datadir.string()));\n     }"
      },
      {
        "sha": "8bef804541b57c4e901096c891b54c82c4b92bf2",
        "filename": "src/leveldb/db/log_writer.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/leveldb/db/log_writer.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/leveldb/db/log_writer.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_writer.cc?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -29,7 +29,7 @@ Writer::Writer(WritableFile* dest, uint64_t dest_length)\n   InitTypeCrc(type_crc_);\n }\n \n-Writer::~Writer() = default;\n+\n \n Status Writer::AddRecord(const Slice& slice) {\n   const char* ptr = slice.data();"
      },
      {
        "sha": "e3b028e8c231af31832405e34d03b443d4cc1cae",
        "filename": "src/leveldb/db/log_writer.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/leveldb/db/log_writer.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/leveldb/db/log_writer.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/db/log_writer.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -32,7 +32,7 @@ class Writer {\n   Writer(const Writer&) = delete;\n   Writer& operator=(const Writer&) = delete;\n \n-  ~Writer();\n+  ~Writer() = default;\n \n   Status AddRecord(const Slice& slice);\n "
      },
      {
        "sha": "83bc34473251849f93b13ec57c9cd94322aefec4",
        "filename": "src/leveldb/util/env_posix.cc",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/leveldb/util/env_posix.cc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/leveldb/util/env_posix.cc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldb/util/env_posix.cc?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -108,7 +108,7 @@ class Limiter {\n class PosixSequentialFile final : public SequentialFile {\n  public:\n   PosixSequentialFile(std::string filename, int fd)\n-      : fd_(fd), filename_(filename) {}\n+      : fd_(fd), filename_(std::move(filename)) {}\n   ~PosixSequentialFile() override { close(fd_); }\n \n   Status Read(size_t n, Slice* result, char* scratch) override {"
      },
      {
        "sha": "6da475eb725431b804b58f08387d8add532c15a4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -1248,7 +1248,7 @@ void CConnman::SocketEvents(std::set<SOCKET> &recv_set, std::set<SOCKET> &send_s\n     std::vector<struct pollfd> vpollfds;\n     vpollfds.reserve(pollfds.size());\n     for (auto it : pollfds) {\n-        vpollfds.push_back(std::move(it.second));\n+        vpollfds.push_back(it.second);\n     }\n \n     if (poll(vpollfds.data(), vpollfds.size(), SELECT_TIMEOUT_MILLISECONDS) < 0) return;\n@@ -1775,7 +1775,7 @@ int CConnman::GetExtraOutboundCount()\n     return std::max(nOutbound - m_max_outbound_full_relay - m_max_outbound_block_relay, 0);\n }\n \n-void CConnman::ThreadOpenConnections(const std::vector<std::string> connect)\n+void CConnman::ThreadOpenConnections(const std::vector<std::string>& connect)\n {\n     // Connect to specific addresses\n     if (!connect.empty())\n@@ -2844,7 +2844,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         RecordBytesSent(nBytesSent);\n }\n \n-bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n+bool CConnman::ForNode(NodeId id, const std::function<bool(CNode* pnode)>& func)\n {\n     CNode* found = nullptr;\n     LOCK(cs_vNodes);"
      },
      {
        "sha": "0e090e0ac65c93bddaef733565b16801e6b63419",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -204,7 +204,7 @@ class CConnman\n     void OpenNetworkConnection(const CAddress& addrConnect, bool fCountFailure, CSemaphoreGrant *grantOutbound = nullptr, const char *strDest = nullptr, bool fOneShot = false, bool fFeeler = false, bool manual_connection = false, bool block_relay_only = false);\n     bool CheckIncomingNonce(uint64_t nonce);\n \n-    bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n+    bool ForNode(NodeId id, const std::function<bool(CNode* pnode)>& func);\n \n     void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n \n@@ -353,7 +353,7 @@ class CConnman\n     void ThreadOpenAddedConnections();\n     void AddOneShot(const std::string& strDest);\n     void ProcessOneShot();\n-    void ThreadOpenConnections(std::vector<std::string> connect);\n+    void ThreadOpenConnections(const std::vector<std::string>& connect);\n     void ThreadMessageHandler();\n     void AcceptConnection(const ListenSocket& hListenSocket);\n     void DisconnectNodes();"
      },
      {
        "sha": "a1c439f561141ac535dea1e574dad0cec5a75556",
        "filename": "src/net_permissions.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net_permissions.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net_permissions.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -21,7 +21,7 @@ const std::vector<std::string> NET_PERMISSIONS_DOC{\n namespace {\n \n // The parse the following format \"perm1,perm2@xxxxxx\"\n-bool TryParsePermissionFlags(const std::string str, NetPermissionFlags& output, size_t& readen, bilingual_str& error)\n+bool TryParsePermissionFlags(const std::string& str, NetPermissionFlags& output, size_t& readen, bilingual_str& error)\n {\n     NetPermissionFlags flags = PF_NONE;\n     const auto atSeparator = str.find('@');\n@@ -81,7 +81,7 @@ std::vector<std::string> NetPermissions::ToStrings(NetPermissionFlags flags)\n     return strings;\n }\n \n-bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermissions& output, bilingual_str& error)\n+bool NetWhitebindPermissions::TryParse(const std::string& str, NetWhitebindPermissions& output, bilingual_str& error)\n {\n     NetPermissionFlags flags;\n     size_t offset;\n@@ -104,7 +104,7 @@ bool NetWhitebindPermissions::TryParse(const std::string str, NetWhitebindPermis\n     return true;\n }\n \n-bool NetWhitelistPermissions::TryParse(const std::string str, NetWhitelistPermissions& output, bilingual_str& error)\n+bool NetWhitelistPermissions::TryParse(const std::string& str, NetWhitelistPermissions& output, bilingual_str& error)\n {\n     NetPermissionFlags flags;\n     size_t offset;"
      },
      {
        "sha": "ab8f51362630bcc5a4d8c315cd66a9eb6e224a26",
        "filename": "src/net_permissions.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net_permissions.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/net_permissions.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_permissions.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -59,14 +59,14 @@ class NetPermissions\n class NetWhitebindPermissions : public NetPermissions\n {\n public:\n-    static bool TryParse(const std::string str, NetWhitebindPermissions& output, bilingual_str& error);\n+    static bool TryParse(const std::string& str, NetWhitebindPermissions& output, bilingual_str& error);\n     CService m_service;\n };\n \n class NetWhitelistPermissions : public NetPermissions\n {\n public:\n-    static bool TryParse(const std::string str, NetWhitelistPermissions& output, bilingual_str& error);\n+    static bool TryParse(const std::string& str, NetWhitelistPermissions& output, bilingual_str& error);\n     CSubNet m_subnet;\n };\n "
      },
      {
        "sha": "e907c618b8cd8fb3a14ad47b85e94035d2d0139f",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -13,7 +13,7 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n     // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n@@ -38,7 +38,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     if (!node.mempool->exists(hashTx)) {\n         // Transaction is not already in the mempool. Submit it.\n         TxValidationState state;\n-        if (!AcceptToMemoryPool(*node.mempool, state, std::move(tx),\n+        if (!AcceptToMemoryPool(*node.mempool, state, tx,\n                 nullptr /* plTxnReplaced */, false /* bypass_limits */, max_tx_fee)) {\n             err_string = state.ToString();\n             if (state.IsInvalid()) {"
      },
      {
        "sha": "b768fad406bc4ccd5da2ddc35e3371bba93063b4",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -36,6 +36,6 @@ static const CFeeRate DEFAULT_MAX_RAW_TX_FEE_RATE{COIN / 10};\n  * @param[in]  wait_callback wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+NODISCARD TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "32e5530568e3c166ac92f87a9bcfefb694373f63",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -11,6 +11,10 @@\n \n #include <assert.h>\n \n+\n+#include <utility>\n+\n+\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10), n);\n@@ -19,14 +23,14 @@ std::string COutPoint::ToString() const\n CTxIn::CTxIn(COutPoint prevoutIn, CScript scriptSigIn, uint32_t nSequenceIn)\n {\n     prevout = prevoutIn;\n-    scriptSig = scriptSigIn;\n+    scriptSig = std::move(scriptSigIn);\n     nSequence = nSequenceIn;\n }\n \n CTxIn::CTxIn(uint256 hashPrevTx, uint32_t nOut, CScript scriptSigIn, uint32_t nSequenceIn)\n {\n     prevout = COutPoint(hashPrevTx, nOut);\n-    scriptSig = scriptSigIn;\n+    scriptSig = std::move(scriptSigIn);\n     nSequence = nSequenceIn;\n }\n \n@@ -48,7 +52,7 @@ std::string CTxIn::ToString() const\n CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n {\n     nValue = nValueIn;\n-    scriptPubKey = scriptPubKeyIn;\n+    scriptPubKey = std::move(scriptPubKeyIn);\n }\n \n std::string CTxOut::ToString() const"
      },
      {
        "sha": "a47c1aa23a330eaf4a75e5128e3f33f8df3c9371",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -568,11 +568,11 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level) noexcept\n     }\n \n     // Combine with and update state\n-    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+    if (!rng.MixExtract(out, num, hasher, false)) {\n         // On the first invocation, also seed with SeedStartup().\n         CSHA512 startup_hasher;\n         SeedStartup(startup_hasher, rng);\n-        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+        rng.MixExtract(out, num, startup_hasher, true);\n     }\n }\n \n@@ -674,7 +674,7 @@ bool Random_SanityCheck()\n     CSHA512 to_add;\n     to_add.Write((const unsigned char*)&start, sizeof(start));\n     to_add.Write((const unsigned char*)&stop, sizeof(stop));\n-    GetRNGState().MixExtract(nullptr, 0, std::move(to_add), false);\n+    GetRNGState().MixExtract(nullptr, 0, to_add, false);\n \n     return true;\n }"
      },
      {
        "sha": "e51423ceab9364b41600ceb39138d90b70ee0a01",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -60,7 +60,7 @@ struct CCoin {\n     }\n };\n \n-static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, std::string message)\n+static bool RESTERR(HTTPRequest* req, enum HTTPStatusCode status, const std::string& message)\n {\n     req->WriteHeader(\"Content-Type\", \"text/plain\");\n     req->WriteReply(status, message + \"\\r\\n\");"
      },
      {
        "sha": "31a31758d58a51f661f64d7e3f28b7181f0d0f4c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -2131,7 +2131,7 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n             for (const auto& script : scripts) {\n                 std::string inferred = InferDescriptor(script, provider)->ToString();\n                 needles.emplace(script);\n-                descriptors.emplace(std::move(script), std::move(inferred));\n+                descriptors.emplace(script, std::move(inferred));\n             }\n         }\n "
      },
      {
        "sha": "05ca837dde66cd2c8bb7b38d9d37f72bf210ee45",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -112,7 +112,7 @@ static bool GenerateBlock(ChainstateManager& chainman, CBlock& block, uint64_t&\n         IncrementExtraNonce(&block, ::ChainActive().Tip(), extra_nonce);\n     }\n \n-    CChainParams chainparams(Params());\n+    const CChainParams& chainparams(Params());\n \n     while (max_tries > 0 && block.nNonce < std::numeric_limits<uint32_t>::max() && !CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus()) && !ShutdownRequested()) {\n         ++block.nNonce;\n@@ -339,7 +339,7 @@ static UniValue generateblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    CChainParams chainparams(Params());\n+    const CChainParams& chainparams(Params());\n     CBlock block;\n \n     {\n@@ -660,7 +660,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n         if (lpval.isStr())\n         {\n             // Format: <hashBestChain><nTransactionsUpdatedLast>\n-            std::string lpstr = lpval.get_str();\n+            const std::string& lpstr = lpval.get_str();\n \n             hashWatchedChain = ParseHashV(lpstr.substr(0, 64), \"longpollid\");\n             nTransactionsUpdatedLastLP = atoi64(lpstr.substr(64));"
      },
      {
        "sha": "0fead3ce1a70c8532ac1da5eb04b74b22b5b01a5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -926,7 +926,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n     bool test_accept_res;\n     {\n         LOCK(cs_main);\n-        test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n+        test_accept_res = AcceptToMemoryPool(mempool, state, tx,\n             nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n@@ -942,7 +942,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n         }\n     }\n \n-    result.push_back(std::move(result_0));\n+    result.push_back(result_0);\n     return result;\n }\n \n@@ -1080,7 +1080,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n \n     // Unknown data\n     UniValue unknowns(UniValue::VOBJ);\n-    for (auto entry : psbtx.unknown) {\n+    for (const auto& entry : psbtx.unknown) {\n         unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n     }\n     result.pushKV(\"unknown\", unknowns);\n@@ -1187,7 +1187,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n         // Unknown data\n         if (input.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);\n-            for (auto entry : input.unknown) {\n+            for (const auto& entry : input.unknown) {\n                 unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n             }\n             in.pushKV(\"unknown\", unknowns);\n@@ -1231,7 +1231,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n         // Unknown data\n         if (output.unknown.size() > 0) {\n             UniValue unknowns(UniValue::VOBJ);\n-            for (auto entry : output.unknown) {\n+            for (const auto& entry : output.unknown) {\n                 unknowns.pushKV(HexStr(entry.first), HexStr(entry.second));\n             }\n             out.pushKV(\"unknown\", unknowns);"
      },
      {
        "sha": "0dd26736750ba6c588acd0835a1c3404bb5f2241",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -24,7 +24,7 @@ CMutableTransaction ConstructTransaction(const UniValue& inputs_in, const UniVal\n     if (inputs_in.isNull() || outputs_in.isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n-    UniValue inputs = inputs_in.get_array();\n+    const UniValue& inputs = inputs_in.get_array();\n     const bool outputs_is_obj = outputs_in.isObject();\n     UniValue outputs = outputs_is_obj ? outputs_in.get_obj() : outputs_in.get_array();\n \n@@ -150,14 +150,14 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n void ParsePrevouts(const UniValue& prevTxsUnival, FillableSigningProvider* keystore, std::map<COutPoint, Coin>& coins)\n {\n     if (!prevTxsUnival.isNull()) {\n-        UniValue prevTxs = prevTxsUnival.get_array();\n+        const UniValue& prevTxs = prevTxsUnival.get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); ++idx) {\n             const UniValue& p = prevTxs[idx];\n             if (!p.isObject()) {\n                 throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"expected object with {\\\"txid'\\\",\\\"vout\\\",\\\"scriptPubKey\\\"}\");\n             }\n \n-            UniValue prevOut = p.get_obj();\n+            const UniValue& prevOut = p.get_obj();\n \n             RPCTypeCheckObj(prevOut,\n                 {"
      },
      {
        "sha": "7db60d1f7b86e7e162775ca70ca8026e55bfdae1",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -66,12 +66,12 @@ static struct CRPCSignals\n     boost::signals2::signal<void ()> Stopped;\n } g_rpcSignals;\n \n-void RPCServer::OnStarted(std::function<void ()> slot)\n+void RPCServer::OnStarted(const std::function<void ()>& slot)\n {\n     g_rpcSignals.Started.connect(slot);\n }\n \n-void RPCServer::OnStopped(std::function<void ()> slot)\n+void RPCServer::OnStopped(const std::function<void ()>& slot)\n {\n     g_rpcSignals.Stopped.connect(slot);\n }"
      },
      {
        "sha": "ec692fb239cbb1e039d41511395de1c58690ffae",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -23,8 +23,8 @@ class CRPCCommand;\n \n namespace RPCServer\n {\n-    void OnStarted(std::function<void ()> slot);\n-    void OnStopped(std::function<void ()> slot);\n+    void OnStarted(const std::function<void ()>& slot);\n+    void OnStopped(const std::function<void ()>& slot);\n }\n \n /** Query whether RPC is running */"
      },
      {
        "sha": "8aa155d9b07f03c5ab483eb90b56f6376c83c15e",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -86,20 +86,20 @@ CAmount AmountFromValue(const UniValue& value)\n     return amount;\n }\n \n-uint256 ParseHashV(const UniValue& v, std::string strName)\n+uint256 ParseHashV(const UniValue& v, const std::string& strName)\n {\n-    std::string strHex(v.get_str());\n+    const std::string& strHex(v.get_str());\n     if (64 != strHex.length())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d, for '%s')\", strName, 64, strHex.length(), strHex));\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n     return uint256S(strHex);\n }\n-uint256 ParseHashO(const UniValue& o, std::string strKey)\n+uint256 ParseHashO(const UniValue& o, const std::string& strKey)\n {\n     return ParseHashV(find_value(o, strKey), strKey);\n }\n-std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)\n+std::vector<unsigned char> ParseHexV(const UniValue& v, const std::string& strName)\n {\n     std::string strHex;\n     if (v.isStr())\n@@ -108,7 +108,7 @@ std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName)\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n     return ParseHex(strHex);\n }\n-std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey)\n+std::vector<unsigned char> ParseHexO(const UniValue& o, const std::string& strKey)\n {\n     return ParseHexV(find_value(o, strKey), strKey);\n }\n@@ -118,7 +118,7 @@ CoinStatsHashType ParseHashType(const UniValue& param, const CoinStatsHashType d\n     if (param.isNull()) {\n         return default_type;\n     } else {\n-        std::string hash_type_input = param.get_str();\n+        const std::string& hash_type_input = param.get_str();\n \n         if (hash_type_input == \"hash_serialized_2\") {\n             return CoinStatsHashType::HASH_SERIALIZED;\n@@ -550,12 +550,12 @@ std::string RPCHelpMan::ToString() const\n \n std::string RPCArg::GetFirstName() const\n {\n-    return m_names.substr(0, m_names.find(\"|\"));\n+    return m_names.substr(0, m_names.find('|'));\n }\n \n std::string RPCArg::GetName() const\n {\n-    CHECK_NONFATAL(std::string::npos == m_names.find(\"|\"));\n+    CHECK_NONFATAL(std::string::npos == m_names.find('|'));\n     return m_names;\n }\n "
      },
      {
        "sha": "153ace34c92127dc56575e93df4beac039e33408",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -73,10 +73,10 @@ void RPCTypeCheckObj(const UniValue& o,\n  * Utilities: convert hex-encoded Values\n  * (throws error if not hex).\n  */\n-extern uint256 ParseHashV(const UniValue& v, std::string strName);\n-extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n-extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n-extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n+extern uint256 ParseHashV(const UniValue& v, const std::string& strName);\n+extern uint256 ParseHashO(const UniValue& o, const std::string& strKey);\n+extern std::vector<unsigned char> ParseHexV(const UniValue& v, const std::string& strName);\n+extern std::vector<unsigned char> ParseHexO(const UniValue& o, const std::string& strKey);\n \n CoinStatsHashType ParseHashType(const UniValue& param, const CoinStatsHashType default_type);\n "
      },
      {
        "sha": "1196926c50f619ca8a980101172ce3ed1d4c583a",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -68,7 +68,7 @@ void CScheduler::serviceQueue()\n     newTaskScheduled.notify_one();\n }\n \n-void CScheduler::schedule(CScheduler::Function f, std::chrono::system_clock::time_point t)\n+void CScheduler::schedule(const CScheduler::Function& f, std::chrono::system_clock::time_point t)\n {\n     {\n         LOCK(newTaskMutex);\n@@ -99,13 +99,13 @@ void CScheduler::MockForward(std::chrono::seconds delta_seconds)\n     newTaskScheduled.notify_one();\n }\n \n-static void Repeat(CScheduler& s, CScheduler::Function f, std::chrono::milliseconds delta)\n+static void Repeat(CScheduler& s, const CScheduler::Function& f, std::chrono::milliseconds delta)\n {\n     f();\n     s.scheduleFromNow([=, &s] { Repeat(s, f, delta); }, delta);\n }\n \n-void CScheduler::scheduleEvery(CScheduler::Function f, std::chrono::milliseconds delta)\n+void CScheduler::scheduleEvery(const CScheduler::Function& f, std::chrono::milliseconds delta)\n {\n     scheduleFromNow([=] { Repeat(*this, f, delta); }, delta);\n }"
      },
      {
        "sha": "f22bb6b86641a009a6dff2ea6b463bde35e566c4",
        "filename": "src/scheduler.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/scheduler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/scheduler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -38,7 +38,7 @@ class CScheduler\n     typedef std::function<void()> Function;\n \n     /** Call func at/after time t */\n-    void schedule(Function f, std::chrono::system_clock::time_point t);\n+    void schedule(const Function& f, std::chrono::system_clock::time_point t);\n \n     /** Call f once after the delta has passed */\n     void scheduleFromNow(Function f, std::chrono::milliseconds delta)\n@@ -52,7 +52,7 @@ class CScheduler\n      * The timing is not exact: Every time f is finished, it is rescheduled to run again after delta. If you need more\n      * accurate scheduling, don't use this method.\n      */\n-    void scheduleEvery(Function f, std::chrono::milliseconds delta);\n+    void scheduleEvery(const Function& f, std::chrono::milliseconds delta);\n \n     /**\n      * Mock the scheduler to fast forward in time."
      },
      {
        "sha": "9f099e58402b30f3331e2c1d917ae1b5e5cc8c3a",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -462,13 +462,13 @@ class DescriptorImpl : public Descriptor\n             } else {\n                 tmp = pubkey->ToString();\n             }\n-            ret += std::move(tmp);\n+            ret += tmp;\n         }\n         if (m_subdescriptor_arg) {\n             if (pos++) ret += \",\";\n             std::string tmp;\n             if (!m_subdescriptor_arg->ToStringHelper(arg, tmp, priv)) return false;\n-            ret += std::move(tmp);\n+            ret += tmp;\n         }\n         out = std::move(ret) + \")\";\n         return true;"
      },
      {
        "sha": "d7262648efeaf59fa2c782992a8816598ab2854a",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -75,7 +75,9 @@ BOOST_AUTO_TEST_CASE(arena_tests)\n     b.walk();\n #endif\n     // Sweeping allocate all memory\n-    for (int x=0; x<1024; ++x)\n+    addr.reserve(1024);\n+\n+for (int x=0; x<1024; ++x)\n         addr.push_back(b.alloc(1024));\n     BOOST_CHECK(b.stats().free == 0);\n     BOOST_CHECK(b.alloc(1024) == nullptr); // memory is full, this must return nullptr"
      },
      {
        "sha": "9d22fc7cf0d6ffa8d3f7d9687e21156fcaa5358f",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -12,6 +12,8 @@\n #include <util/strencodings.h>\n \n #include <string>\n+#include <utility>\n+\n #include <vector>\n \n struct TestDerivation {\n@@ -24,13 +26,13 @@ struct TestVector {\n     std::string strHexMaster;\n     std::vector<TestDerivation> vDerive;\n \n-    explicit TestVector(std::string strHexMasterIn) : strHexMaster(strHexMasterIn) {}\n+    explicit TestVector(std::string strHexMasterIn) : strHexMaster(std::move(strHexMasterIn)) {}\n \n     TestVector& operator()(std::string pub, std::string prv, unsigned int nChild) {\n         vDerive.push_back(TestDerivation());\n         TestDerivation &der = vDerive.back();\n-        der.pub = pub;\n-        der.prv = prv;\n+        der.pub = std::move(pub);\n+        der.prv = std::move(prv);\n         der.nChild = nChild;\n         return *this;\n     }"
      },
      {
        "sha": "2deea2fed46f79ced021231bb7cf971f56c0f1bc",
        "filename": "src/test/checkqueue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/checkqueue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/checkqueue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkqueue_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -145,7 +145,7 @@ typedef CCheckQueue<FrozenCleanupCheck> FrozenCleanup_Queue;\n /** This test case checks that the CCheckQueue works properly\n  * with each specified size_t Checks pushed.\n  */\n-static void Correct_Queue_range(std::vector<size_t> range)\n+static void Correct_Queue_range(const std::vector<size_t>& range)\n {\n     auto small_queue = MakeUnique<Correct_Queue>(QUEUE_BATCH_SIZE);\n     boost::thread_group tg;"
      },
      {
        "sha": "cef2c0917791a279a0497955b7abf427d089612d",
        "filename": "src/test/flatfile_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/flatfile_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/flatfile_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/flatfile_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -14,7 +14,7 @@ BOOST_FIXTURE_TEST_SUITE(flatfile_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(flatfile_filename)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto& data_dir = GetDataDir();\n \n     FlatFilePos pos(456, 789);\n \n@@ -27,7 +27,7 @@ BOOST_AUTO_TEST_CASE(flatfile_filename)\n \n BOOST_AUTO_TEST_CASE(flatfile_open)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto& data_dir = GetDataDir();\n     FlatFileSeq seq(data_dir, \"a\", 16 * 1024);\n \n     std::string line1(\"A purely peer-to-peer version of electronic cash would allow online \"\n@@ -88,7 +88,7 @@ BOOST_AUTO_TEST_CASE(flatfile_open)\n \n BOOST_AUTO_TEST_CASE(flatfile_allocate)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto& data_dir = GetDataDir();\n     FlatFileSeq seq(data_dir, \"a\", 100);\n \n     bool out_of_space;\n@@ -108,7 +108,7 @@ BOOST_AUTO_TEST_CASE(flatfile_allocate)\n \n BOOST_AUTO_TEST_CASE(flatfile_flush)\n {\n-    const auto data_dir = GetDataDir();\n+    const auto& data_dir = GetDataDir();\n     FlatFileSeq seq(data_dir, \"a\", 100);\n \n     bool out_of_space;"
      },
      {
        "sha": "d59e59bdd23ecba074e544b690a3ef661ad360b9",
        "filename": "src/test/fs_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/fs_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/fs_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fs_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -12,7 +12,7 @@ BOOST_FIXTURE_TEST_SUITE(fs_tests, BasicTestingSetup)\n \n BOOST_AUTO_TEST_CASE(fsbridge_fstream)\n {\n-    fs::path tmpfolder = GetDataDir();\n+    const fs::path& tmpfolder = GetDataDir();\n     // tmpfile1 should be the same as tmpfile2\n     fs::path tmpfile1 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";\n     fs::path tmpfile2 = tmpfolder / \"fs_tests_\u20bf_\ud83c\udfc3\";"
      },
      {
        "sha": "5e8906fa58af2d8a418362491258dd954113e890",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -35,7 +35,9 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n \n     // Convert to char*:\n     std::vector<const char*> vecChar;\n-    for (const std::string& s : vecArg)\n+    vecChar.reserve(vecArg.size());\n+\n+for (const std::string& s : vecArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;"
      },
      {
        "sha": "7f50f8bad81a5b314e274ba4739e40326f093fe2",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -11,6 +11,8 @@\n #include <string>\n \n #include <boost/test/unit_test.hpp>\n+#include <utility>\n+\n \n BOOST_FIXTURE_TEST_SUITE(netbase_tests, BasicTestingSetup)\n \n@@ -77,11 +79,11 @@ BOOST_AUTO_TEST_CASE(netbase_properties)\n \n }\n \n-bool static TestSplitHost(std::string test, std::string host, int port)\n+bool static TestSplitHost(std::string test, const std::string& host, int port)\n {\n     std::string hostOut;\n     int portOut = -1;\n-    SplitHostPort(test, portOut, hostOut);\n+    SplitHostPort(std::move(test), portOut, hostOut);\n     return hostOut == host && port == portOut;\n }\n \n@@ -104,7 +106,7 @@ BOOST_AUTO_TEST_CASE(netbase_splithost)\n     BOOST_CHECK(TestSplitHost(\"\", \"\", -1));\n }\n \n-bool static TestParse(std::string src, std::string canon)\n+bool static TestParse(const std::string& src, const std::string& canon)\n {\n     CService addr(LookupNumeric(src, 65535));\n     return canon == addr.ToString();"
      },
      {
        "sha": "352a3532ee4d3681af889d3b2db88ff25051248f",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -25,7 +25,9 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     std::vector<CAmount> feeV;\n \n     // Populate vectors of increasing fees\n-    for (int j = 0; j < 10; j++) {\n+    feeV.reserve(10);\n+\n+for (int j = 0; j < 10; j++) {\n         feeV.push_back(basefee * (j+1));\n     }\n "
      },
      {
        "sha": "4ea61b4c6bfae8ad8cc91b2974931f70d5037f98",
        "filename": "src/test/script_p2sh_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/script_p2sh_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/script_p2sh_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_p2sh_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -274,7 +274,9 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n         key[i].MakeNewKey(true);\n         BOOST_CHECK(keystore.AddKey(key[i]));\n     }\n-    for (int i = 0; i < 3; i++)\n+    keys.reserve(3);\n+\n+for (int i = 0; i < 3; i++)\n         keys.push_back(key[i].GetPubKey());\n \n     CMutableTransaction txFrom;"
      },
      {
        "sha": "dca932f00884fc567820d116fdbdd056b14d7cd3",
        "filename": "src/test/torcontrol_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/torcontrol_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/torcontrol_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/torcontrol_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -17,7 +17,7 @@ std::map<std::string, std::string> ParseTorReplyMapping(const std::string& s);\n \n BOOST_FIXTURE_TEST_SUITE(torcontrol_tests, BasicTestingSetup)\n \n-static void CheckSplitTorReplyLine(std::string input, std::string command, std::string args)\n+static void CheckSplitTorReplyLine(const std::string& input, const std::string& command, const std::string& args)\n {\n     auto ret = SplitTorReplyLine(input);\n     BOOST_CHECK_EQUAL(ret.first, command);\n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(util_SplitTorReplyLine)\n     CheckSplitTorReplyLine(\"COMMAND   EVEN+more  ARGS\", \"COMMAND\", \"  EVEN+more  ARGS\");\n }\n \n-static void CheckParseTorReplyMapping(std::string input, std::map<std::string,std::string> expected)\n+static void CheckParseTorReplyMapping(const std::string& input, std::map<std::string,std::string> expected)\n {\n     auto ret = ParseTorReplyMapping(input);\n     BOOST_CHECK_EQUAL(ret.size(), expected.size());"
      },
      {
        "sha": "8c45f33093b41d6e1e9170a5625af41b12a809dc",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -184,7 +184,7 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Date)\n struct TestArgsManager : public ArgsManager\n {\n     TestArgsManager() { m_network_only_args.clear(); }\n-    void ReadConfigString(const std::string str_config)\n+    void ReadConfigString(const std::string& str_config)\n     {\n         std::istringstream streamConfig(str_config);\n         {\n@@ -195,7 +195,7 @@ struct TestArgsManager : public ArgsManager\n         std::string error;\n         BOOST_REQUIRE(ReadConfigStream(streamConfig, \"\", error));\n     }\n-    void SetNetworkOnlyArg(const std::string arg)\n+    void SetNetworkOnlyArg(const std::string& arg)\n     {\n         LOCK(cs_args);\n         m_network_only_args.insert(arg);\n@@ -1673,15 +1673,15 @@ BOOST_AUTO_TEST_CASE(test_ParseFixedPoint)\n \n static void TestOtherThread(fs::path dirname, std::string lockname, bool *result)\n {\n-    *result = LockDirectory(dirname, lockname);\n+    *result = LockDirectory(dirname, std::move(lockname));\n }\n \n #ifndef WIN32 // Cannot do this test on WIN32 due to lack of fork()\n static constexpr char LockCommand = 'L';\n static constexpr char UnlockCommand = 'U';\n static constexpr char ExitCommand = 'X';\n \n-static void TestOtherProcess(fs::path dirname, std::string lockname, int fd)\n+static void TestOtherProcess(const fs::path& dirname, const std::string& lockname, int fd)\n {\n     char ch;\n     while (true) {"
      },
      {
        "sha": "0d0d31b262d160710195af51f53b31fa16874fcb",
        "filename": "src/test/util_threadnames_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/util_threadnames_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/util_threadnames_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_threadnames_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -38,7 +38,9 @@ std::set<std::string> RenameEnMasse(int num_threads)\n         names.insert(util::ThreadGetInternalName());\n     };\n \n-    for (int i = 0; i < num_threads; ++i) {\n+    threads.reserve(num_threads);\n+\n+for (int i = 0; i < num_threads; ++i) {\n         threads.push_back(std::thread(RenameThisThread, i));\n     }\n "
      },
      {
        "sha": "d8670f8aa44bf9c2d48ca221ffdfb17161e8f7eb",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -17,6 +17,8 @@\n #include <validationinterface.h>\n \n #include <thread>\n+#include <utility>\n+\n \n static const std::vector<unsigned char> V_OP_TRUE{OP_TRUE};\n \n@@ -160,7 +162,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     bool ignored;\n     BlockValidationState state;\n     std::vector<CBlockHeader> headers;\n-    std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](std::shared_ptr<const CBlock> b) { return b->GetBlockHeader(); });\n+    std::transform(blocks.begin(), blocks.end(), std::back_inserter(headers), [](const std::shared_ptr<const CBlock>& b) { return b->GetBlockHeader(); });\n \n     // Process all the headers so we understand the toplogy of the chain\n     BOOST_CHECK(Assert(m_node.chainman)->ProcessNewBlockHeaders(headers, state, Params()));\n@@ -182,7 +184,9 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     // this will create parallelism and randomness inside validation - the ValidationInterface\n     // will subscribe to events generated during block validation and assert on ordering invariance\n     std::vector<std::thread> threads;\n-    for (int i = 0; i < 10; i++) {\n+    threads.reserve(10);\n+\n+for (int i = 0; i < 10; i++) {\n         threads.emplace_back([&]() {\n             bool ignored;\n             FastRandomContext insecure;\n@@ -192,7 +196,7 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n             }\n \n             // to make sure that eventually we process the full chain - do it here\n-            for (auto block : blocks) {\n+            for (const auto& block : blocks) {\n                 if (block->vtx.size() == 1) {\n                     bool processed = Assert(m_node.chainman)->ProcessNewBlock(Params(), block, true, &ignored);\n                     assert(processed);\n@@ -233,7 +237,7 @@ BOOST_AUTO_TEST_CASE(mempool_locks_reorg)\n {\n     bool ignored;\n     auto ProcessBlock = [&](std::shared_ptr<const CBlock> block) -> bool {\n-        return Assert(m_node.chainman)->ProcessNewBlock(Params(), block, /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n+        return Assert(m_node.chainman)->ProcessNewBlock(Params(), std::move(block), /* fForceProcessing */ true, /* fNewBlock */ &ignored);\n     };\n \n     // Process all mined blocks"
      },
      {
        "sha": "46b878b7947a48d238a9927437719109682b1898",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -40,7 +40,7 @@ struct CoinEntry {\n \n }\n \n-CCoinsViewDB::CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, bool fWipe) :\n+CCoinsViewDB::CCoinsViewDB(const fs::path& ldb_path, size_t nCacheSize, bool fMemory, bool fWipe) :\n     m_db(MakeUnique<CDBWrapper>(ldb_path, nCacheSize, fMemory, fWipe, true)),\n     m_ldb_path(ldb_path),\n     m_is_memory(fMemory) { }\n@@ -243,7 +243,7 @@ bool CBlockTreeDB::ReadFlag(const std::string &name, bool &fValue) {\n     return true;\n }\n \n-bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex)\n+bool CBlockTreeDB::LoadBlockIndexGuts(const Consensus::Params& consensusParams, const std::function<CBlockIndex*(const uint256&)>& insertBlockIndex)\n {\n     std::unique_ptr<CDBIterator> pcursor(NewIterator());\n "
      },
      {
        "sha": "572e076d06b53a9d823ee323fea440699b4a32ee",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -53,7 +53,7 @@ class CCoinsViewDB final : public CCoinsView\n     /**\n      * @param[in] ldb_path    Location in the filesystem where leveldb data will be stored.\n      */\n-    explicit CCoinsViewDB(fs::path ldb_path, size_t nCacheSize, bool fMemory, bool fWipe);\n+    explicit CCoinsViewDB(const fs::path& ldb_path, size_t nCacheSize, bool fMemory, bool fWipe);\n \n     bool GetCoin(const COutPoint &outpoint, Coin &coin) const override;\n     bool HaveCoin(const COutPoint &outpoint) const override;\n@@ -105,7 +105,7 @@ class CBlockTreeDB : public CDBWrapper\n     void ReadReindexing(bool &fReindexing);\n     bool WriteFlag(const std::string &name, bool fValue);\n     bool ReadFlag(const std::string &name, bool &fValue);\n-    bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, std::function<CBlockIndex*(const uint256&)> insertBlockIndex);\n+    bool LoadBlockIndexGuts(const Consensus::Params& consensusParams, const std::function<CBlockIndex*(const uint256&)>& insertBlockIndex);\n };\n \n #endif // BITCOIN_TXDB_H"
      },
      {
        "sha": "77bdab5e376ea71a3ecbb1d8c2c72ce864a22e7a",
        "filename": "src/util/bip32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -24,7 +24,7 @@ bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypa\n         }\n         // Finds whether it is hardened\n         uint32_t path = 0;\n-        size_t pos = item.find(\"'\");\n+        size_t pos = item.find(''');\n         if (pos != std::string::npos) {\n             // The hardened tick can only be in the last index of the string\n             if (pos != item.size() - 1) {"
      },
      {
        "sha": "0790d058584e1119952b76e969fbbc95c0943bc8",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -90,7 +90,7 @@ static Mutex cs_dir_locks;\n  */\n static std::map<std::string, std::unique_ptr<fsbridge::FileLock>> dir_locks GUARDED_BY(cs_dir_locks);\n \n-bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only)\n+bool LockDirectory(const fs::path& directory, const std::string& lockfile_name, bool probe_only)\n {\n     LOCK(cs_dir_locks);\n     fs::path pathLockFile = directory / lockfile_name;\n@@ -407,7 +407,7 @@ bool ArgsManager::GetSettingsPath(fs::path* filepath, bool temp) const\n     return true;\n }\n \n-static void SaveErrors(const std::vector<std::string> errors, std::vector<std::string>* error_out)\n+static void SaveErrors(const std::vector<std::string>& errors, std::vector<std::string>* error_out)\n {\n     for (const auto& error : errors) {\n         if (error_out) {\n@@ -982,7 +982,7 @@ void ArgsManager::LogArgs() const\n     logArgsPrefix(\"Command-line arg:\", \"\", m_settings.command_line_options);\n }\n \n-bool RenameOver(fs::path src, fs::path dest)\n+bool RenameOver(const fs::path& src, const fs::path& dest)\n {\n #ifdef WIN32\n     return MoveFileExW(src.wstring().c_str(), dest.wstring().c_str(),"
      },
      {
        "sha": "2bd3d3075f6b8824c22067cd0abd42b85d7ed278",
        "filename": "src/util/system.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/util/system.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/util/system.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -60,8 +60,8 @@ bool FileCommit(FILE *file);\n bool TruncateFile(FILE *file, unsigned int length);\n int RaiseFileDescriptorLimit(int nMinFD);\n void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length);\n-bool RenameOver(fs::path src, fs::path dest);\n-bool LockDirectory(const fs::path& directory, const std::string lockfile_name, bool probe_only=false);\n+bool RenameOver(const fs::path& src, const fs::path& dest);\n+bool LockDirectory(const fs::path& directory, const std::string& lockfile_name, bool probe_only=false);\n void UnlockDirectory(const fs::path& directory, const std::string& lockfile_name);\n bool DirIsWritable(const fs::path& directory);\n bool CheckDiskSpace(const fs::path& dir, uint64_t additional_bytes = 0);"
      },
      {
        "sha": "afa70389836808de130aa1abddea616eabe0ddcc",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -2840,7 +2840,7 @@ static void LimitValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main) {\n     }\n }\n \n-bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock) {\n+bool CChainState::ActivateBestChain(BlockValidationState &state, const CChainParams& chainparams, const std::shared_ptr<const CBlock>& pblock) {\n     // Note that while we're often called here from ProcessNewBlock, this is\n     // far from a guarantee. Things in the P2P/RPC will often end up calling\n     // us in the middle of ProcessNewBlock - do not assume pblock is set\n@@ -3827,7 +3827,7 @@ bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, Block\n     return true;\n }\n \n-bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock)\n+bool ChainstateManager::ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& pblock, bool fForceProcessing, bool* fNewBlock)\n {\n     AssertLockNotHeld(cs_main);\n "
      },
      {
        "sha": "ae3e4579e53affe1f3d6c65cc2d153405725c719",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -632,7 +632,7 @@ class CChainState {\n     bool ActivateBestChain(\n         BlockValidationState& state,\n         const CChainParams& chainparams,\n-        std::shared_ptr<const CBlock> pblock) LOCKS_EXCLUDED(cs_main);\n+        const std::shared_ptr<const CBlock>& pblock) LOCKS_EXCLUDED(cs_main);\n \n     bool AcceptBlock(const std::shared_ptr<const CBlock>& pblock, BlockValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const FlatFilePos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -877,7 +877,7 @@ class ChainstateManager\n      * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n      * @returns     If the block was processed, independently of block validity\n      */\n-    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n+    bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock>& pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n     /**\n      * Process incoming block headers."
      },
      {
        "sha": "61d193180f59007cf932f64fd236e3871e98a737",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -132,7 +132,7 @@ void RegisterValidationInterface(CValidationInterface* callbacks)\n     RegisterSharedValidationInterface({callbacks, [](CValidationInterface*){}});\n }\n \n-void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n+void UnregisterSharedValidationInterface(const std::shared_ptr<CValidationInterface>& callbacks)\n {\n     UnregisterValidationInterface(callbacks.get());\n }"
      },
      {
        "sha": "f4ca8a06b79b9bec859f8c8b83fb59e7296bdc59",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -37,7 +37,7 @@ void UnregisterAllValidationInterfaces();\n /** Register subscriber */\n void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n /** Unregister subscriber */\n-void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n+void UnregisterSharedValidationInterface(const std::shared_ptr<CValidationInterface>& callbacks);\n \n /**\n  * Pushes a function to callback onto the notification queue, guaranteeing any"
      },
      {
        "sha": "76fe2c37f88b76313621feef143720ac011b634d",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -452,7 +452,7 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     });\n \n     std::vector<std::string> filenames;\n-    for (auto it : m_databases) {\n+    for (const auto& it : m_databases) {\n         filenames.push_back(it.first);\n     }\n     // Close the individual Db's"
      },
      {
        "sha": "feaf8460e3e0528c19c484011c2ec2ad48dad752",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -603,7 +603,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n             const CKey& key = std::get<0>(key_tuple);\n             int64_t time = std::get<1>(key_tuple);\n             bool has_label = std::get<2>(key_tuple);\n-            std::string label = std::get<3>(key_tuple);\n+            const std::string& label = std::get<3>(key_tuple);\n \n             CPubKey pubkey = key.GetPubKey();\n             CHECK_NONFATAL(key.VerifyPubKey(pubkey));\n@@ -757,7 +757,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n-    for (const auto& entry : mapKeyBirth) {\n+    vKeyBirth.reserve(mapKeyBirth.size());\n+\n+for (const auto& entry : mapKeyBirth) {\n         vKeyBirth.push_back(std::make_pair(entry.second, entry.first));\n     }\n     mapKeyBirth.clear();\n@@ -1415,7 +1417,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n                                       \"and -rescan options).\",\n                                 GetImportTimestamp(request, now), scannedTime - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n-                    response.push_back(std::move(result));\n+                    response.push_back(result);\n                 }\n                 ++i;\n             }\n@@ -1706,7 +1708,7 @@ UniValue importdescriptors(const JSONRPCRequest& main_request)\n                                       \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n                                       \"and -rescan options).\",\n                                 GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n-                    response.push_back(std::move(result));\n+                    response.push_back(result);\n                 }\n             }\n         }"
      },
      {
        "sha": "252fab70e81ce5ebd99345c8a22ffddf41014d79",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -2914,7 +2914,7 @@ static UniValue listunspent(const JSONRPCRequest& request)\n     return results;\n }\n \n-void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, UniValue options, CCoinControl& coinControl)\n+void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& fee_out, int& change_position, const UniValue& options, CCoinControl& coinControl)\n {\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -3496,7 +3496,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n             subobj.pushKV(\"scriptPubKey\", HexStr(subscript));\n             // Always report the pubkey at the top level, so that `getnewaddress()['pubkey']` always works.\n             if (subobj.exists(\"pubkey\")) obj.pushKV(\"pubkey\", subobj[\"pubkey\"]);\n-            obj.pushKV(\"embedded\", std::move(subobj));\n+            obj.pushKV(\"embedded\", subobj);\n         } else if (which_type == TxoutType::MULTISIG) {\n             // Also report some information on multisig scripts (which do not have a corresponding address).\n             // TODO: abstract out the common functionality between this logic and ExtractDestinations.\n@@ -3506,7 +3506,7 @@ class DescribeWalletAddressVisitor : public boost::static_visitor<UniValue>\n                 CPubKey key(solutions_data[i].begin(), solutions_data[i].end());\n                 pubkeys.push_back(HexStr(key));\n             }\n-            obj.pushKV(\"pubkeys\", std::move(pubkeys));\n+            obj.pushKV(\"pubkeys\", pubkeys);\n         }\n     }\n \n@@ -3703,7 +3703,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n     if (address_book_entry) {\n         labels.push_back(address_book_entry->GetLabel());\n     }\n-    ret.pushKV(\"labels\", std::move(labels));\n+    ret.pushKV(\"labels\", labels);\n \n     return ret;\n }"
      },
      {
        "sha": "0ff50d04204f8e6a880e76c017ddd6354e76b9c9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -1479,7 +1479,7 @@ bool LegacyScriptPubKeyMan::AddKeyOriginWithDB(WalletBatch& batch, const CPubKey\n     return batch.WriteKeyMetadata(mapKeyMetadata[pubkey.GetID()], pubkey, true);\n }\n \n-bool LegacyScriptPubKeyMan::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n+bool LegacyScriptPubKeyMan::ImportScripts(const std::set<CScript>& scripts, int64_t timestamp)\n {\n     WalletBatch batch(m_storage.GetDatabase());\n     for (const auto& entry : scripts) {\n@@ -1719,7 +1719,7 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     AssertLockHeld(cs_desc_man);\n     if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n         KeyMap keys;\n-        for (auto key_pair : m_map_crypted_keys) {\n+        for (const auto& key_pair : m_map_crypted_keys) {\n             const CPubKey& pubkey = key_pair.second.first;\n             const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n             CKey key;"
      },
      {
        "sha": "82f6cbaf46d370831bb37df34c38fd1cb6cb7a0a",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -454,7 +454,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n     bool NewKeyPool();\n     void MarkPreSplitKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n-    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n+    bool ImportScripts(const std::set<CScript>& scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n     bool ImportScriptPubKeys(const std::set<CScript>& script_pub_keys, const bool have_solving_data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);"
      },
      {
        "sha": "1fbbabd8398b4e3cd09a92971c5c4741d69da1f6",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -92,7 +92,7 @@ static void empty_wallet(void)\n     balance = 0;\n }\n \n-static bool equal_sets(CoinSet a, CoinSet b)\n+static bool equal_sets(const CoinSet& a, const CoinSet& b)\n {\n     std::pair<CoinSet::iterator, CoinSet::iterator> ret = mismatch(a.begin(), a.end(), b.begin());\n     return ret.first == a.end() && ret.second == b.end();"
      },
      {
        "sha": "3acbe25aa6d459855c882a727e9bddd0d80c5c83",
        "filename": "src/wallet/test/db_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/test/db_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/test/db_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/db_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -16,7 +16,7 @@ BOOST_FIXTURE_TEST_SUITE(db_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(getwalletenv_file)\n {\n     std::string test_name = \"test_name.dat\";\n-    const fs::path datadir = GetDataDir();\n+    const fs::path& datadir = GetDataDir();\n     fs::path file_path = datadir / test_name;\n     std::ofstream f(file_path.BOOST_FILESYSTEM_C_STR);\n     f.close();\n@@ -30,7 +30,7 @@ BOOST_AUTO_TEST_CASE(getwalletenv_file)\n BOOST_AUTO_TEST_CASE(getwalletenv_directory)\n {\n     std::string expected_name = \"wallet.dat\";\n-    const fs::path datadir = GetDataDir();\n+    const fs::path& datadir = GetDataDir();\n \n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(datadir, filename);"
      },
      {
        "sha": "a592cf660df2fdd5e4ec93aaee7b45ef7e5c2946",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -514,7 +514,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         wallet.reset();\n     }\n \n-    CWalletTx& AddTx(CRecipient recipient)\n+    CWalletTx& AddTx(const CRecipient& recipient)\n     {\n         CTransactionRef tx;\n         CAmount fee;\n@@ -663,7 +663,7 @@ BOOST_FIXTURE_TEST_CASE(dummy_input_size_test, TestChain100Setup)\n     BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(true), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n }\n \n-bool malformed_descriptor(std::ios_base::failure e)\n+bool malformed_descriptor(const std::ios_base::failure& e)\n {\n     std::string s(e.what());\n     return s.find(\"Missing checksum\") != std::string::npos;"
      },
      {
        "sha": "59aee4ba230550125595b66ae16abe65924dfad0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -1494,7 +1494,7 @@ bool CWallet::DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut>\n     return true;\n }\n \n-bool CWallet::ImportScripts(const std::set<CScript> scripts, int64_t timestamp)\n+bool CWallet::ImportScripts(const std::set<CScript>& scripts, int64_t timestamp)\n {\n     auto spk_man = GetLegacyScriptPubKeyMan();\n     if (!spk_man) {\n@@ -2254,7 +2254,7 @@ std::map<CTxDestination, std::vector<COutput>> CWallet::ListCoins() const\n         CTxDestination address;\n         if ((coin.fSpendable || (IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && coin.fSolvable)) &&\n             ExtractDestination(FindNonChangeParentOutput(*coin.tx->tx, coin.i).scriptPubKey, address)) {\n-            result[address].emplace_back(std::move(coin));\n+            result[address].emplace_back(coin);\n         }\n     }\n \n@@ -3061,7 +3061,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     return true;\n }\n \n-void CWallet::CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm)\n+void CWallet::CommitTransaction(const CTransactionRef& tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm)\n {\n     LOCK(cs_wallet);\n     WalletLogPrintf(\"CommitTransaction:\\n%s\", tx->ToString()); /* Continued */\n@@ -3265,7 +3265,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n     return res;\n }\n \n-bool CWallet::GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error)\n+bool CWallet::GetNewDestination(const OutputType type, const std::string& label, CTxDestination& dest, std::string& error)\n {\n     LOCK(cs_wallet);\n     error.clear();\n@@ -3423,7 +3423,7 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings() const\n \n     std::set< std::set<CTxDestination>* > uniqueGroupings; // a set of pointers to groups of addresses\n     std::map< CTxDestination, std::set<CTxDestination>* > setmap;  // map addresses to the unique group containing it\n-    for (std::set<CTxDestination> _grouping : groupings)\n+    for (const std::set<CTxDestination>& _grouping : groupings)\n     {\n         // make a set of all the groups hit by this new group\n         std::set< std::set<CTxDestination>* > hits;"
      },
      {
        "sha": "213d835ad8f4311182a872b7b24f46c6b1fa6de5",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -979,7 +979,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * @param[in] mapValue key-values to be set on the transaction.\n      * @param[in] orderForm BIP 70 / BIP 21 order form details to be set on the transaction.\n      */\n-    void CommitTransaction(CTransactionRef tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm);\n+    void CommitTransaction(const CTransactionRef& tx, mapValue_t mapValue, std::vector<std::pair<std::string, std::string>> orderForm);\n \n     bool DummySignTx(CMutableTransaction &txNew, const std::set<CTxOut> &txouts, bool use_max_sig = false) const\n     {\n@@ -990,7 +990,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts, bool use_max_sig = false) const;\n     bool DummySignInput(CTxIn &tx_in, const CTxOut &txout, bool use_max_sig = false) const;\n \n-    bool ImportScripts(const std::set<CScript> scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool ImportScripts(const std::set<CScript>& scripts, int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPrivKeys(const std::map<CKeyID, CKey>& privkey_map, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportPubKeys(const std::vector<CKeyID>& ordered_pubkeys, const std::map<CKeyID, CPubKey>& pubkey_map, const std::map<CKeyID, std::pair<CPubKey, KeyOriginInfo>>& key_origins, const bool add_keypool, const bool internal, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool ImportScriptPubKeys(const std::string& label, const std::set<CScript>& script_pub_keys, const bool have_solving_data, const bool apply_label, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n@@ -1035,7 +1035,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     void MarkDestinationsDirty(const std::set<CTxDestination>& destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    bool GetNewDestination(const OutputType type, const std::string label, CTxDestination& dest, std::string& error);\n+    bool GetNewDestination(const OutputType type, const std::string& label, CTxDestination& dest, std::string& error);\n     bool GetNewChangeDestination(const OutputType type, CTxDestination& dest, std::string& error);\n \n     isminetype IsMine(const CTxDestination& dest) const;"
      },
      {
        "sha": "ae21175e6e88c73e0d415b1b84862b853c0296c6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49fa26e12230310ab84e26d5775a4a7c7818cd54/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "patch": "@@ -756,18 +756,18 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     }\n \n     // Set the descriptor caches\n-    for (auto desc_cache_pair : wss.m_descriptor_caches) {\n+    for (const auto& desc_cache_pair : wss.m_descriptor_caches) {\n         auto spk_man = pwallet->GetScriptPubKeyMan(desc_cache_pair.first);\n         assert(spk_man);\n         ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);\n     }\n \n     // Set the descriptor keys\n-    for (auto desc_key_pair : wss.m_descriptor_keys) {\n+    for (const auto& desc_key_pair : wss.m_descriptor_keys) {\n         auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n         ((DescriptorScriptPubKeyMan*)spk_man)->AddKey(desc_key_pair.first.second, desc_key_pair.second);\n     }\n-    for (auto desc_key_pair : wss.m_descriptor_crypt_keys) {\n+    for (const auto& desc_key_pair : wss.m_descriptor_crypt_keys) {\n         auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n         ((DescriptorScriptPubKeyMan*)spk_man)->AddCryptedKey(desc_key_pair.first.second, desc_key_pair.second.first, desc_key_pair.second.second);\n     }"
      }
    ]
  },
  {
    "sha": "ef99aafe381b6da001ab281e2532a9dc00932fa4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjk5YWFmZTM4MWI2ZGEwMDFhYjI4MWUyNTMyYTlkYzAwOTMyZmE0",
    "commit": {
      "author": {
        "name": "Bohdan Vanieiev",
        "email": "warchantua@gmail.com",
        "date": "2020-08-06T21:16:48Z"
      },
      "committer": {
        "name": "Bohdan Vanieiev",
        "email": "warchantua@gmail.com",
        "date": "2020-08-06T21:16:48Z"
      },
      "message": "Fix false-positives, add NOLINTNEXTLINE",
      "tree": {
        "sha": "4b872befb3d57a5321e4a6de1ba5af2bb4c49efc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b872befb3d57a5321e4a6de1ba5af2bb4c49efc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef99aafe381b6da001ab281e2532a9dc00932fa4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef99aafe381b6da001ab281e2532a9dc00932fa4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef99aafe381b6da001ab281e2532a9dc00932fa4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef99aafe381b6da001ab281e2532a9dc00932fa4/comments",
    "author": {
      "login": "Warchant",
      "id": 1867551,
      "node_id": "MDQ6VXNlcjE4Njc1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1867551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Warchant",
      "html_url": "https://github.com/Warchant",
      "followers_url": "https://api.github.com/users/Warchant/followers",
      "following_url": "https://api.github.com/users/Warchant/following{/other_user}",
      "gists_url": "https://api.github.com/users/Warchant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Warchant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Warchant/subscriptions",
      "organizations_url": "https://api.github.com/users/Warchant/orgs",
      "repos_url": "https://api.github.com/users/Warchant/repos",
      "events_url": "https://api.github.com/users/Warchant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Warchant/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Warchant",
      "id": 1867551,
      "node_id": "MDQ6VXNlcjE4Njc1NTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1867551?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Warchant",
      "html_url": "https://github.com/Warchant",
      "followers_url": "https://api.github.com/users/Warchant/followers",
      "following_url": "https://api.github.com/users/Warchant/following{/other_user}",
      "gists_url": "https://api.github.com/users/Warchant/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Warchant/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Warchant/subscriptions",
      "organizations_url": "https://api.github.com/users/Warchant/orgs",
      "repos_url": "https://api.github.com/users/Warchant/repos",
      "events_url": "https://api.github.com/users/Warchant/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Warchant/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49fa26e12230310ab84e26d5775a4a7c7818cd54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49fa26e12230310ab84e26d5775a4a7c7818cd54"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 7,
      "deletions": 4
    },
    "files": [
      {
        "sha": "84716b3324e0d2768fb559a8f2362a141c881f3f",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef99aafe381b6da001ab281e2532a9dc00932fa4/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef99aafe381b6da001ab281e2532a9dc00932fa4/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=ef99aafe381b6da001ab281e2532a9dc00932fa4",
        "patch": "@@ -568,11 +568,13 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level) noexcept\n     }\n \n     // Combine with and update state\n-    if (!rng.MixExtract(out, num, hasher, false)) {\n+    // NOLINTNEXTLINE\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n         // On the first invocation, also seed with SeedStartup().\n         CSHA512 startup_hasher;\n         SeedStartup(startup_hasher, rng);\n-        rng.MixExtract(out, num, startup_hasher, true);\n+        // NOLINTNEXTLINE\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n     }\n }\n \n@@ -674,7 +676,8 @@ bool Random_SanityCheck()\n     CSHA512 to_add;\n     to_add.Write((const unsigned char*)&start, sizeof(start));\n     to_add.Write((const unsigned char*)&stop, sizeof(stop));\n-    GetRNGState().MixExtract(nullptr, 0, to_add, false);\n+    // NOLINTNEXTLINE\n+    GetRNGState().MixExtract(nullptr, 0, std::move(to_add), false);\n \n     return true;\n }"
      },
      {
        "sha": "3e6325d0eb2637a74e20fce23511852456a4f35d",
        "filename": "src/util/bip32.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef99aafe381b6da001ab281e2532a9dc00932fa4/src/util/bip32.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef99aafe381b6da001ab281e2532a9dc00932fa4/src/util/bip32.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/bip32.cpp?ref=ef99aafe381b6da001ab281e2532a9dc00932fa4",
        "patch": "@@ -24,7 +24,7 @@ bool ParseHDKeypath(const std::string& keypath_str, std::vector<uint32_t>& keypa\n         }\n         // Finds whether it is hardened\n         uint32_t path = 0;\n-        size_t pos = item.find(''');\n+        size_t pos = item.find('\\'');\n         if (pos != std::string::npos) {\n             // The hardened tick can only be in the last index of the string\n             if (pos != item.size() - 1) {"
      }
    ]
  }
]