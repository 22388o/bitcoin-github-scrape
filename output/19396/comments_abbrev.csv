achow101,2020-06-28 04:42:28,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-650694746,650694746,
DrahtBot,2020-06-28 15:47:42,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Use shared pointers only in validation interface by bvbfan)\n\nIf you consider this pull request important, please",https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-650784020,650784020,
promag,2020-07-01 09:55:11,"Code review ACK fa37f9ae6d908a30affcfefda24e44ff3000207d.\n\nTend to agree with @Sjors in https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448235196.",https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-652319471,652319471,
achow101,2020-07-01 18:22:03,ACK fa37f9ae6d908a30affcfefda24e44ff3000207d,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-652575861,652575861,
achow101,2020-07-01 21:04:45,ACK fabcf5fc9d126cba8d5637b1cf7a4e9c6047ce1b,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-652646035,652646035,
MarcoFalke,2020-07-01 22:05:43,Fixed @promag's feedback,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-652669228,652669228,
promag,2020-07-01 22:39:38,Code review ACK fa927ff884ae373c676deed63180a8d238872cdc.,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-652680607,652680607,
luke-jr,2020-07-02 02:02:27,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-652735438,652735438,
laanwj,2020-07-02 14:08:33,Code review ACK fa927ff884ae373c676deed63180a8d238872cdc,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-653027762,653027762,
Sjors,2020-07-02 17:00:09,Post merge utACK,https://github.com/bitcoin/bitcoin/pull/19396#issuecomment-653120902,653120902,
Sjors,2020-07-01 09:19:44,I guess it's non-trivial to expand our c++17 `std::optional` substitute with [std::optional<T>::value](https://en.cppreference.com/w/cpp/utility/optional/value)?,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448232294,448232294,src/wallet/wallet.cpp
Sjors,2020-07-01 09:24:53,I'm not a fan of this assignment inside an `if` statement. See more (maybe overkill) verbose suggestion below.,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448235196,448235196,src/wallet/wallet.cpp
Sjors,2020-07-01 09:34:48,"```suggestion\n     if (!gArgs.GetArg(""-changetype"", """").empty()) {\n        OutputType default_change_type;\n        if (ParseOutputType(gArgs.GetArg(""-changetype"", """"), default_change_type)) {\n            walletInstance->m_default_change_type.emplace(default_change_type);\n        } else {\n            error = strprintf(_(""Unknown change type '%s'""), gArgs.GetArg(""-changetype"", """"));\n  ",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448240663,448240663,src/wallet/wallet.cpp
MarcoFalke,2020-07-01 11:56:13,"`ParseOutputType` assigns a new value to the argument, so why can't the argument itself not be initialized?\n\nNote that with C++17, we can use `walletInstance->m_default_change_type.emplace()` instead. \n\n```suggestion\n    if (!gArgs.GetArg(""-changetype"", """").empty() && !ParseOutputType(gArgs.GetArg(""-changetype"", """"), *walletInstance->m_default_change_type.emplace())) {\n```\n\nI am ha",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448312073,448312073,src/wallet/wallet.cpp
MarcoFalke,2020-07-01 11:57:25,Sorry I don't follow. https://en.cppreference.com/w/cpp/utility/optional/operator* exists in C++17,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448312673,448312673,src/wallet/wallet.cpp
Sjors,2020-07-01 17:36:47,"So you can use `change_type->value()` which looks prettier imo, and - more importantly - raises an exception if `change_type` isn't set.",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448517155,448517155,src/wallet/wallet.cpp
Sjors,2020-07-01 17:53:43,"I don't think it's bad, but the line is hard to read. Another approach could be to initialise `m_default_change_type` in `wallet.h`; that doesn't seem unreasonable for an Optional. \n\n_Update:_ no that doesn't work. The key here is to initialize with nonsense so that you can dereference the optional and pass it into `ParseOutputType`. I find that yuck :-)\n\nIt seems cleaner to either pass a ",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448525964,448525964,src/wallet/wallet.cpp
achow101,2020-07-01 18:22:13,Agree that this is a bit hard to read.,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448540327,448540327,src/wallet/wallet.cpp
MarcoFalke,2020-07-01 20:22:46,"change_type can never be unset in this line because the line is preceded by a check to see if it is set, so I'd rather not annotate this function to throw an exception when in reality it can not throw an exception.",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448596534,448596534,src/wallet/wallet.cpp
MarcoFalke,2020-07-01 20:47:48,thx changed,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448607965,448607965,src/wallet/wallet.cpp
MarcoFalke,2020-07-01 20:47:59,thx changed,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448608049,448608049,src/wallet/wallet.cpp
promag,2020-07-01 21:31:32,"fa078530bc3824d7d5a1cc4f39b617054b08d77e\n\nnit, I'd rather ditch the above, declare a `OutputType change_type` in this scope, and assign to `walletInstance->m_default_change_type` if parse succeeds. Not really relevant but this approach changes `m_default_change_type` for no good reason if parse fails.",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448627061,448627061,src/wallet/wallet.cpp
promag,2020-07-01 21:31:41,"fa078530bc3824d7d5a1cc4f39b617054b08d77e\n\nnit, I think you can use `value_or()` which is available in boost and std.",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448627139,448627139,src/wallet/rpcwallet.cpp
promag,2020-07-01 21:32:53,"fa078530bc3824d7d5a1cc4f39b617054b08d77e\n\nnit, same as https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448627061, use temporary.",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448627658,448627658,src/wallet/rpcwallet.cpp
MarcoFalke,2020-07-01 22:04:43,Ah good point,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448640131,448640131,src/wallet/rpcwallet.cpp
MarcoFalke,2020-07-01 22:05:17,"It doesn't matter here, but I changed it as a belt-and-suspenders measure",https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448640330,448640330,src/wallet/wallet.cpp
MarcoFalke,2020-07-01 22:05:32,changed for same reason,https://github.com/bitcoin/bitcoin/pull/19396#discussion_r448640428,448640428,src/wallet/rpcwallet.cpp
