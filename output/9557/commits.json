[
  {
    "sha": "5da3f42c75985bf828459a5efc1e1e85787e4601",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGEzZjQyYzc1OTg1YmY4Mjg0NTlhNWVmYzFlMWU4NTc4N2U0NjAx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-21T11:23:04Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-01-21T11:23:04Z"
      },
      "message": "Prefer (int)a over int(a)",
      "tree": {
        "sha": "af0c6a7bd4497064f9523b82e7b39d668a788cdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af0c6a7bd4497064f9523b82e7b39d668a788cdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5da3f42c75985bf828459a5efc1e1e85787e4601",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da3f42c75985bf828459a5efc1e1e85787e4601",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5da3f42c75985bf828459a5efc1e1e85787e4601",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da3f42c75985bf828459a5efc1e1e85787e4601/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02e5308c1b9f3771bbe49bc5036215fa2bd66aa9"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 40,
      "deletions": 40
    },
    "files": [
      {
        "sha": "185bc876836dae3ccb00c7feeb0f06e5f1b16fd5",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -328,7 +328,7 @@ static void MutateTxAddOutMultiSig(CMutableTransaction& tx, const std::string& s\n \n     // extract and validate PUBKEYs\n     std::vector<CPubKey> pubkeys;\n-    for(int pos = 1; pos <= int(numkeys); pos++) {\n+    for(int pos = 1; pos <= (int)numkeys; pos++) {\n         CPubKey pubkey(ParseHex(vStrInputParts[pos + 2]));\n         if (!pubkey.IsFullyValid())\n             throw std::runtime_error(\"invalid TX output pubkey\");"
      },
      {
        "sha": "f622da95bb0655fd5e526c843a18a2368a21e90e",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -651,7 +651,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     result.push_back(Pair(\"version\", pblock->nVersion));\n     result.push_back(Pair(\"rules\", aRules));\n     result.push_back(Pair(\"vbavailable\", vbavailable));\n-    result.push_back(Pair(\"vbrequired\", int(0)));\n+    result.push_back(Pair(\"vbrequired\", (int)0));\n \n     if (nMaxVersionPreVB >= 2) {\n         // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here"
      },
      {
        "sha": "1a7bdf754bbef297f4aaee75aef4f99dbd724420",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -795,12 +795,12 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     if (request.params.size() > 3 && !request.params[3].isNull()) {\n         static map<string, int> mapSigHashValues =\n             boost::assign::map_list_of\n-            (string(\"ALL\"), int(SIGHASH_ALL))\n-            (string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY))\n-            (string(\"NONE\"), int(SIGHASH_NONE))\n-            (string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY))\n-            (string(\"SINGLE\"), int(SIGHASH_SINGLE))\n-            (string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n+            (string(\"ALL\"), (int)SIGHASH_ALL)\n+            (string(\"ALL|ANYONECANPAY\"), (int)(SIGHASH_ALL|SIGHASH_ANYONECANPAY))\n+            (string(\"NONE\"), (int)SIGHASH_NONE)\n+            (string(\"NONE|ANYONECANPAY\"), (int)(SIGHASH_NONE|SIGHASH_ANYONECANPAY))\n+            (string(\"SINGLE\"), (int)SIGHASH_SINGLE)\n+            (string(\"SINGLE|ANYONECANPAY\"), (int)(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n             ;\n         string strHashType = request.params[3].get_str();\n         if (mapSigHashValues.count(strHashType))"
      },
      {
        "sha": "3eaada1735d7a75a521c06ba76e7aa3a6260f8fe",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -510,8 +510,8 @@ const static char DIRTY = CCoinsCacheEntry::DIRTY;\n const static char FRESH = CCoinsCacheEntry::FRESH;\n const static char NO_ENTRY = -1;\n \n-const static auto FLAGS = {char(0), FRESH, DIRTY, char(DIRTY | FRESH)};\n-const static auto CLEAN_FLAGS = {char(0), FRESH};\n+const static auto FLAGS = {(char)0, FRESH, DIRTY, (char)(DIRTY | FRESH)};\n+const static auto CLEAN_FLAGS = {(char)0, FRESH};\n const static auto ABSENT_FLAGS = {NO_ENTRY};\n \n void SetCoinsValue(CAmount value, CCoins& coins)"
      },
      {
        "sha": "0167d289d820da44c13d305927023b20d3da828a",
        "filename": "src/test/cuckoocache_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/test/cuckoocache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/test/cuckoocache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/cuckoocache_tests.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -191,9 +191,9 @@ void test_cache_erase(size_t megabytes)\n     for (uint32_t i = (n_insert / 2); i < n_insert; ++i)\n         count_fresh += set.contains(hashes[i], false);\n \n-    double hit_rate_erased_but_contained = double(count_erased_but_contained) / (double(n_insert) / 4.0);\n-    double hit_rate_stale = double(count_stale) / (double(n_insert) / 4.0);\n-    double hit_rate_fresh = double(count_fresh) / (double(n_insert) / 2.0);\n+    double hit_rate_erased_but_contained = (double)count_erased_but_contained / ((double)n_insert / 4.0);\n+    double hit_rate_stale = (double)count_stale / ((double)n_insert / 4.0);\n+    double hit_rate_fresh = (double)count_fresh / ((double)n_insert / 2.0);\n \n     // Check that our hit_rate_fresh is perfect\n     BOOST_CHECK_EQUAL(hit_rate_fresh, 1.0);"
      },
      {
        "sha": "cd14d947bcae0cc0d88f95be7535824c5159efb2",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -59,33 +59,33 @@ class CSerializeMethodsTestMany : public CSerializeMethodsTestSingle\n \n BOOST_AUTO_TEST_CASE(sizes)\n {\n-    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(char(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize(int8_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize(uint8_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize(int16_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize(uint16_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize(int32_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize(uint32_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize(int64_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize(uint64_t(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize(float(0), 0));\n-    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize(double(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize((char)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(int8_t), GetSerializeSize((int8_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint8_t), GetSerializeSize((uint8_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(int16_t), GetSerializeSize((int16_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint16_t), GetSerializeSize((uint16_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(int32_t), GetSerializeSize((int32_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint32_t), GetSerializeSize((uint32_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(int64_t), GetSerializeSize((int64_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(uint64_t), GetSerializeSize((uint64_t)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(float), GetSerializeSize((float)0, 0));\n+    BOOST_CHECK_EQUAL(sizeof(double), GetSerializeSize((double)0, 0));\n     // Bool is serialized as char\n-    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize(bool(0), 0));\n+    BOOST_CHECK_EQUAL(sizeof(char), GetSerializeSize((bool)0, 0));\n \n     // Sanity-check GetSerializeSize and c++ type matching\n-    BOOST_CHECK_EQUAL(GetSerializeSize(char(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int8_t(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint8_t(0), 0), 1);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int16_t(0), 0), 2);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint16_t(0), 0), 2);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int32_t(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint32_t(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(int64_t(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(uint64_t(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(float(0), 0), 4);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(double(0), 0), 8);\n-    BOOST_CHECK_EQUAL(GetSerializeSize(bool(0), 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((char)0, 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((int8_t)0, 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((uint8_t)0, 0), 1);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((int16_t)0, 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((uint16_t)0, 0), 2);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((int32_t)0, 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((uint32_t)0, 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((int64_t)0, 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((uint64_t)0, 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((float)0, 0), 4);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((double)0, 0), 8);\n+    BOOST_CHECK_EQUAL(GetSerializeSize((bool)0, 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(floats_conversion)"
      },
      {
        "sha": "6ea77a11c97cdb61effec1b66519dd9396ac4b41",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -345,7 +345,7 @@ void CTxMemPoolEntry::UpdateAncestorState(int64_t modifySize, CAmount modifyFee,\n     nCountWithAncestors += modifyCount;\n     assert(int64_t(nCountWithAncestors) > 0);\n     nSigOpCostWithAncestors += modifySigOps;\n-    assert(int(nSigOpCostWithAncestors) >= 0);\n+    assert((int)nSigOpCostWithAncestors >= 0);\n }\n \n CTxMemPool::CTxMemPool(const CFeeRate& _minReasonableRelayFee) :"
      },
      {
        "sha": "d33e397e67411f618e663b4dd7fd6caccecd094d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -3092,7 +3092,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     // blocks which are too close in height to the tip.  Apply this test\n     // regardless of whether pruning is enabled; it should generally be safe to\n     // not process unrequested blocks.\n-    bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n+    bool fTooFarAhead = (pindex->nHeight > (int)(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n     // TODO: Decouple this function from the block download logic by removing fRequested\n     // This requires some new chain datastructure to efficiently look up if a"
      },
      {
        "sha": "6f16fefbeb07de96e644478b3652ff3cf1c7d397",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da3f42c75985bf828459a5efc1e1e85787e4601/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da3f42c75985bf828459a5efc1e1e85787e4601/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=5da3f42c75985bf828459a5efc1e1e85787e4601",
        "patch": "@@ -2600,7 +2600,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, duplicated position: %d\", pos));\n         if (pos < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, negative position: %d\", pos));\n-        if (pos >= int(tx.vout.size()))\n+        if (pos >= (int)(tx.vout.size()))\n             throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid parameter, position too large: %d\", pos));\n         setSubtractFeeFromOutputs.insert(pos);\n     }"
      }
    ]
  }
]