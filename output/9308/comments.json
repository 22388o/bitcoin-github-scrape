[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266985899",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-266985899",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
    "id": 266985899,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2Njk4NTg5OQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-14T09:29:32Z",
    "updated_at": "2016-12-14T09:29:32Z",
    "author_association": "MEMBER",
    "body": "utACK https://github.com/bitcoin/bitcoin/pull/9308/commits/03ffa4cfff29d8273859edb030bc0eb823b26e7b, thanks for adding tests for this important system\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/266985899/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267007755",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-267007755",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
    "id": 267007755,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2NzAwNzc1NQ==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-14T11:09:51Z",
    "updated_at": "2016-12-14T11:09:51Z",
    "author_association": "MEMBER",
    "body": "Concept ACK 03ffa4cfff29d8273859edb030bc0eb823b26e7b",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/267007755/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/268057323",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-268057323",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
    "id": 268057323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2ODA1NzMyMw==",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?u=b7dd63827227d69794b5fe28797b1bd107b930dd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-19T19:36:45Z",
    "updated_at": "2016-12-19T19:36:45Z",
    "author_association": "MEMBER",
    "body": "ACK (left a couple of comments to slightly increase test coverage)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/268057323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269309163",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-269309163",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
    "id": 269309163,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTMwOTE2Mw==",
    "user": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-27T10:43:56Z",
    "updated_at": "2016-12-27T10:43:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "@ryanofsky What about this warning?\r\n```\r\ntest/coins_tests.cpp:432:19: warning: unused variable 'DIRTY_FLAGS' [-Wunused-const-variable]\r\n```\r\n\r\nDo you plan to use it or can it be removed?\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269309163/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269321047",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#issuecomment-269321047",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/9308",
    "id": 269321047,
    "node_id": "MDEyOklzc3VlQ29tbWVudDI2OTMyMTA0Nw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2016-12-27T12:42:03Z",
    "updated_at": "2016-12-27T12:42:03Z",
    "author_association": "CONTRIBUTOR",
    "body": "I do have some debug code using it, which I might make a PR from later, but its better to remove for now since it's causing this warning. Created to #9435 to remove.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/269321047/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93085954",
    "pull_request_review_id": 13607529,
    "id": 93085954,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMDg1OTU0",
    "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 220,
    "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
    "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe loop over possibilities for base values",
    "created_at": "2016-12-19T18:06:30Z",
    "updated_at": "2016-12-19T20:04:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93085954",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93085954"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93085954"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93085954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 627,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93103417",
    "pull_request_review_id": 13625355,
    "id": 93103417,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTAzNDE3",
    "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyNewCoins(TXID, coinbase));\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify_new)\n+{\n+    /* Check ModifyNewCoin behavior, requesting a new coin from a cache view,\n+     * writing a modification to the coin, and then checking the resulting\n+     * entry in the cache after the modification. Verify behavior with the\n+     * with the ModifyNewCoin coinbase argument set to false, and to true.\n+     *\n+     *                  Cache   Write   Result  Cache        Result     Coinbase\n+     *                  Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyNewCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   , false);\n+    CheckModifyNewCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+}\n+\n+void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(ABSENT, parent_value, parent_flags);\n+    WriteCoinsViewEntry(test.cache, child_value, child_flags);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_write)",
    "path": "src/test/coins_tests.cpp",
    "position": 309,
    "original_position": 291,
    "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
    "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
    "user": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Maybe try a loop of these tests with Child Flags not DIRTY as well",
    "created_at": "2016-12-19T19:36:03Z",
    "updated_at": "2016-12-19T20:04:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93103417",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93103417"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93103417"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93103417/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 716,
    "original_line": 698,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109618",
    "pull_request_review_id": 13631701,
    "id": 93109618,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTA5NjE4",
    "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);",
    "path": "src/test/coins_tests.cpp",
    "position": null,
    "original_position": 220,
    "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
    "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added.",
    "created_at": "2016-12-19T20:09:42Z",
    "updated_at": "2016-12-19T20:09:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109618",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109618"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109618"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109618/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 627,
    "side": "RIGHT",
    "in_reply_to_id": 93085954
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109642",
    "pull_request_review_id": 13631723,
    "id": 93109642,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDkzMTA5NjQy",
    "diff_hunk": "@@ -415,4 +417,338 @@ BOOST_AUTO_TEST_CASE(ccoins_serialization)\n     }\n }\n \n+const static uint256 TXID;\n+const static CAmount PRUNED = -1;\n+const static CAmount ABSENT = -2;\n+const static CAmount VALUE1 = 100;\n+const static CAmount VALUE2 = 200;\n+const static CAmount VALUE3 = 300;\n+const static char DIRTY = CCoinsCacheEntry::DIRTY;\n+const static char FRESH = CCoinsCacheEntry::FRESH;\n+const static char NO_ENTRY = -1;\n+\n+void SetCoinsValue(CAmount value, CCoins& coins)\n+{\n+    coins.Clear();\n+    assert(coins.IsPruned());\n+    if (value != PRUNED) {\n+        coins.vout.emplace_back();\n+        coins.vout.back().nValue = value;\n+        assert(!coins.IsPruned());\n+    }\n+}\n+\n+size_t InsertCoinsMapEntry(CCoinsMap& map, CAmount value, char flags)\n+{\n+    if (value == ABSENT) {\n+        assert(flags == NO_ENTRY);\n+        return 0;\n+    }\n+    assert(flags != NO_ENTRY);\n+    CCoinsCacheEntry entry;\n+    entry.flags = flags;\n+    SetCoinsValue(value, entry.coins);\n+    auto inserted = map.emplace(TXID, std::move(entry));\n+    assert(inserted.second);\n+    return inserted.first->second.coins.DynamicMemoryUsage();\n+}\n+\n+void GetCoinsMapEntry(const CCoinsMap& map, CAmount& value, char& flags)\n+{\n+    auto it = map.find(TXID);\n+    if (it == map.end()) {\n+        value = ABSENT;\n+        flags = NO_ENTRY;\n+    } else {\n+        if (it->second.coins.IsPruned()) {\n+            assert(it->second.coins.vout.size() == 0);\n+            value = PRUNED;\n+        } else {\n+            assert(it->second.coins.vout.size() == 1);\n+            value = it->second.coins.vout[0].nValue;\n+        }\n+        flags = it->second.flags;\n+        assert(flags != NO_ENTRY);\n+    }\n+}\n+\n+void WriteCoinsViewEntry(CCoinsView& view, CAmount value, char flags)\n+{\n+    CCoinsMap map;\n+    InsertCoinsMapEntry(map, value, flags);\n+    view.BatchWrite(map, {});\n+}\n+\n+class SingleEntryCacheTest\n+{\n+public:\n+    SingleEntryCacheTest(CAmount base_value, CAmount cache_value, char cache_flags)\n+    {\n+        WriteCoinsViewEntry(base, base_value, base_value == ABSENT ? NO_ENTRY : DIRTY);\n+        cache.usage() += InsertCoinsMapEntry(cache.map(), cache_value, cache_flags);\n+    }\n+\n+    CCoinsView root;\n+    CCoinsViewCacheTest base{&root};\n+    CCoinsViewCacheTest cache{&base};\n+};\n+\n+void CheckAccessCoins(CAmount base_value, CAmount cache_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    test.cache.AccessCoins(TXID);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_access)\n+{\n+    /* Check AccessCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, and checking the resulting entry in the cache after\n+     * the access.\n+     *\n+     *               Base    Cache   Result  Cache        Result\n+     *               Value   Value   Value   Flags        Flags\n+     */\n+    CheckAccessCoins(ABSENT, ABSENT, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(ABSENT, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, ABSENT, PRUNED, NO_ENTRY   , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, ABSENT, VALUE1, NO_ENTRY   , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, 0          , 0          );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, PRUNED, PRUNED, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, 0          , 0          );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, FRESH      , FRESH      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      );\n+    CheckAccessCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyCoins(CAmount base_value, CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(base_value, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyCoins(TXID));\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+};\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify)\n+{\n+    /* Check ModifyCoin behavior, requesting a coin from a cache view layered on\n+     * top of a base view, writing a modification to the coin, and then checking\n+     * the resulting entry in the cache after the modification.\n+     *\n+     *               Base    Cache   Write   Result  Cache        Result\n+     *               Value   Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyCoins(ABSENT, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(ABSENT, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(PRUNED, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, ABSENT, VALUE3, VALUE3, NO_ENTRY   , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, PRUNED, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, FRESH      , NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, PRUNED, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, 0          , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, FRESH      , DIRTY|FRESH);\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY      , DIRTY      );\n+    CheckModifyCoins(VALUE1, VALUE2, VALUE3, VALUE3, DIRTY|FRESH, DIRTY|FRESH);\n+}\n+\n+void CheckModifyNewCoins(CAmount cache_value, CAmount modify_value, CAmount expected_value, char cache_flags, char expected_flags, bool coinbase)\n+{\n+    SingleEntryCacheTest test(ABSENT, cache_value, cache_flags);\n+    SetCoinsValue(modify_value, *test.cache.ModifyNewCoins(TXID, coinbase));\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_modify_new)\n+{\n+    /* Check ModifyNewCoin behavior, requesting a new coin from a cache view,\n+     * writing a modification to the coin, and then checking the resulting\n+     * entry in the cache after the modification. Verify behavior with the\n+     * with the ModifyNewCoin coinbase argument set to false, and to true.\n+     *\n+     *                  Cache   Write   Result  Cache        Result     Coinbase\n+     *                  Value   Value   Value   Flags        Flags\n+     */\n+    CheckModifyNewCoins(ABSENT, PRUNED, ABSENT, NO_ENTRY   , NO_ENTRY   , false);\n+    CheckModifyNewCoins(ABSENT, PRUNED, PRUNED, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(ABSENT, VALUE2, VALUE2, NO_ENTRY   , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(PRUNED, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(PRUNED, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, 0          , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, FRESH      , NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY      , NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, PRUNED, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , false);\n+    CheckModifyNewCoins(VALUE1, PRUNED, ABSENT, DIRTY|FRESH, NO_ENTRY   , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, 0          , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, FRESH      , DIRTY|FRESH, true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY      , DIRTY      , true );\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, false);\n+    CheckModifyNewCoins(VALUE1, VALUE2, VALUE2, DIRTY|FRESH, DIRTY|FRESH, true );\n+}\n+\n+void CheckWriteCoins(CAmount parent_value, CAmount child_value, CAmount expected_value, char parent_flags, char child_flags, char expected_flags)\n+{\n+    SingleEntryCacheTest test(ABSENT, parent_value, parent_flags);\n+    WriteCoinsViewEntry(test.cache, child_value, child_flags);\n+    test.cache.SelfTest();\n+\n+    CAmount result_value;\n+    char result_flags;\n+    GetCoinsMapEntry(test.cache.map(), result_value, result_flags);\n+    BOOST_CHECK_EQUAL(result_value, expected_value);\n+    BOOST_CHECK_EQUAL(result_flags, expected_flags);\n+}\n+\n+BOOST_AUTO_TEST_CASE(ccoins_write)",
    "path": "src/test/coins_tests.cpp",
    "position": 309,
    "original_position": 291,
    "commit_id": "07df40babb0231b2e8a2f42341805b4bbcc4e284",
    "original_commit_id": "03ffa4cfff29d8273859edb030bc0eb823b26e7b",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Added.",
    "created_at": "2016-12-19T20:09:49Z",
    "updated_at": "2016-12-19T20:09:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109642",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109642"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/9308#discussion_r93109642"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/9308"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/93109642/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 716,
    "original_line": 698,
    "side": "RIGHT",
    "in_reply_to_id": 93103417
  }
]