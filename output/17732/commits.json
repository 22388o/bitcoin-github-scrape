[
  {
    "sha": "98d03f0346ec8856987dda37ab3d99a9f886f409",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGQwM2YwMzQ2ZWM4ODU2OTg3ZGRhMzdhYjNkOTlhOWY4ODZmNDA5",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2019-12-12T20:40:03Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-10T07:40:05Z"
      },
      "message": "test: check for valgrind presence and set appropriate exit flags",
      "tree": {
        "sha": "5aa4123bb0391cf6e2ab4637d7756f597318e95b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5aa4123bb0391cf6e2ab4637d7756f597318e95b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98d03f0346ec8856987dda37ab3d99a9f886f409",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl63r9UACgkQJiaFvHjt\nEfuwzgf/V5xlDR8FzC3OKNSEdMWQYGpwTvSmeJeNRBshCscpoH+INhGtmpKFzzlW\njp+lP3CKM32ABeFXdLHcPG6aRSwHDe2nk1HvJqNIfdy1dmvcFeHx4qrjd+tQ/3dj\nOSx3MaDWOaYdbHMbbJb4A4iCMZQlGTETM9EcaiAZ68236yGAhBnZNo0tihvie9LM\nXbK0r96psXZkvygHcssG/DKvYT16JOqO2Xe1Mk32ngFC56EpkqgBFRzzumIRhWx4\nd1TkbedxUGsqKFhYwkMmc6BSCX3yEs03YyoLfSfXSqyNMsLbbFtFfmXRzobpUrD7\neX9YaFB7zeVhwE3aLdvCxIY0NZrcAQ==\n=dWKP\n-----END PGP SIGNATURE-----",
        "payload": "tree 5aa4123bb0391cf6e2ab4637d7756f597318e95b\nparent 88d8b4e182bfc75e8496f7046af7aab93307b9d0\nauthor Harris <brakmic@gmail.com> 1576183203 +0100\ncommitter Harris <brakmic@gmail.com> 1589096405 +0200\n\ntest: check for valgrind presence and set appropriate exit flags\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98d03f0346ec8856987dda37ab3d99a9f886f409",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98d03f0346ec8856987dda37ab3d99a9f886f409",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98d03f0346ec8856987dda37ab3d99a9f886f409/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 30,
      "deletions": 7
    },
    "files": [
      {
        "sha": "a79f70badacf65df26a5b667a5b4880eea458ce3",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 30,
        "deletions": 7,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98d03f0346ec8856987dda37ab3d99a9f886f409/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98d03f0346ec8856987dda37ab3d99a9f886f409/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=98d03f0346ec8856987dda37ab3d99a9f886f409",
        "patch": "@@ -19,6 +19,7 @@\n import urllib.parse\n import collections\n import shlex\n+import shutil\n import sys\n \n from .authproxy import JSONRPCException\n@@ -36,7 +37,7 @@\n )\n \n BITCOIND_PROC_WAIT_TIMEOUT = 60\n-\n+MIN_VALGRIND_VERSION_EARLY_EXIT = (3, 14)\n \n class FailedToStartError(Exception):\n     \"\"\"Raised when a node fails to start correctly.\"\"\"\n@@ -101,14 +102,22 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, factor, bitcoind, bi\n             \"-uacomment=testnode%d\" % i,\n         ]\n         if use_valgrind:\n+            valgrind_version = self.get_valgrind_version()\n+            if not valgrind_version:\n+                raise Exception('Valgrind not present')\n             default_suppressions_file = os.path.join(\n-                os.path.dirname(os.path.realpath(__file__)),\n-                \"..\", \"..\", \"..\", \"contrib\", \"valgrind.supp\")\n+                    os.path.dirname(os.path.realpath(__file__)),\n+                    \"..\", \"..\", \"..\", \"contrib\", \"valgrind.supp\")\n             suppressions_file = os.getenv(\"VALGRIND_SUPPRESSIONS_FILE\",\n-                                          default_suppressions_file)\n-            self.args = [\"valgrind\", \"--suppressions={}\".format(suppressions_file),\n-                         \"--gen-suppressions=all\", \"--exit-on-first-error=yes\",\n-                         \"--error-exitcode=1\", \"--quiet\"] + self.args\n+                default_suppressions_file)\n+            self.args = [\n+                \"valgrind\",\n+                \"--suppressions={}\".format(suppressions_file),\n+                \"--gen-suppressions=all\",\n+                self.valgrind_early_exit(valgrind_version),\n+                \"--error-exitcode=1\",\n+                \"--quiet\"\n+            ] + self.args\n \n         if self.version_is_at_least(190000):\n             self.args.append(\"-logthreadnames\")\n@@ -147,6 +156,20 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, factor, bitcoind, bi\n             AddressKeyPair('mzRe8QZMfGi58KyWCse2exxEFry2sfF2Y7', 'cPiRWE8KMjTRxH1MWkPerhfoHFn5iHPWVK5aPqjW8NxmdwenFinJ'),\n     ]\n \n+    def get_valgrind_version(self):\n+        \"\"\"Return valgrind version (major, minor) in a tuple or None if not found\"\"\"\n+        if not shutil.which(\"valgrind\"):\n+            return None\n+        version = (\n+            subprocess.run([\"valgrind\", \"--version\"], stdout=subprocess.PIPE)\n+            .stdout.decode(\"utf-8\")\n+            .rstrip()\n+            .split(\"valgrind-\")[1:][0])\n+        return tuple(int(i) for i in version.split(\".\")[:2])\n+\n+    def valgrind_early_exit(self, version):\n+        return \"--exit-on-first-error=yes\" if version >= MIN_VALGRIND_VERSION_EARLY_EXIT else \"\"\n+\n     def get_deterministic_priv_key(self):\n         \"\"\"Return a deterministic priv key in base58, that only depends on the node's index\"\"\"\n         assert len(self.PRIV_KEYS) == MAX_NODES"
      }
    ]
  }
]