[
  {
    "sha": "9bc48eebf85c1d15f446cad1f92afb22b3a39bea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmM0OGVlYmY4NWMxZDE1ZjQ0NmNhZDFmOTJhZmIyMmIzYTM5YmVh",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-08-02T14:50:11Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-08-02T14:50:11Z"
      },
      "message": "Added RPC method for dumping wallet addresses without the private keys.",
      "tree": {
        "sha": "e0d48e4809e3cc0692bc592c8e04a5c89dd3d284",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0d48e4809e3cc0692bc592c8e04a5c89dd3d284"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bc48eebf85c1d15f446cad1f92afb22b3a39bea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc48eebf85c1d15f446cad1f92afb22b3a39bea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc48eebf85c1d15f446cad1f92afb22b3a39bea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc48eebf85c1d15f446cad1f92afb22b3a39bea/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d89611c3aaa85798c4d70d20e35e6bcb7bdd5c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d89611c3aaa85798c4d70d20e35e6bcb7bdd5c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d89611c3aaa85798c4d70d20e35e6bcb7bdd5c0"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 52,
      "deletions": 0
    },
    "files": [
      {
        "sha": "40cc3fd28bdd6ab8fb172c823ffa9be1eff7fc6c",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bc48eebf85c1d15f446cad1f92afb22b3a39bea/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bc48eebf85c1d15f446cad1f92afb22b3a39bea/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=9bc48eebf85c1d15f446cad1f92afb22b3a39bea",
        "patch": "@@ -245,6 +245,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"listsinceblock\",         &listsinceblock,         false,     false },\n     { \"dumpprivkey\",            &dumpprivkey,            true,      false },\n     { \"dumpwallet\",             &dumpwallet,             true,      false },\n+    { \"dumpaddresses\",          &dumpaddresses,          true,      false },          \n     { \"importprivkey\",          &importprivkey,          false,     false },\n     { \"importwallet\",           &importwallet,           false,     false },\n     { \"listunspent\",            &listunspent,            false,     false },"
      },
      {
        "sha": "880a97a724135e66e318bd058d2ed66c4d7a455a",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bc48eebf85c1d15f446cad1f92afb22b3a39bea/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bc48eebf85c1d15f446cad1f92afb22b3a39bea/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=9bc48eebf85c1d15f446cad1f92afb22b3a39bea",
        "patch": "@@ -150,6 +150,7 @@ extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHe\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value dumpaddresses(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "98641f6178e9902ff9885e3ee30888ee446f7c09",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bc48eebf85c1d15f446cad1f92afb22b3a39bea/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bc48eebf85c1d15f446cad1f92afb22b3a39bea/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=9bc48eebf85c1d15f446cad1f92afb22b3a39bea",
        "patch": "@@ -268,3 +268,53 @@ Value dumpwallet(const Array& params, bool fHelp)\n     file.close();\n     return Value::null;\n }\n+\n+Value dumpaddresses(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"dumpaddresses <filename>\\n\"\n+            \"Dumps all wallet addresses to a text file.\");\n+\n+    ofstream file;\n+    file.open(params[0].get_str().c_str());\n+    if (!file.is_open())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open address dump file\");\n+\n+    std::map<CKeyID, int64> mapKeyBirth;\n+    std::set<CKeyID> setKeyPool;\n+    pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n+    pwalletMain->GetAllReserveKeys(setKeyPool);\n+\n+    // sort time/key pairs\n+    std::vector<std::pair<int64, CKeyID> > vKeyBirth;\n+    for (std::map<CKeyID, int64>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    }\n+    mapKeyBirth.clear();\n+    std::sort(vKeyBirth.begin(), vKeyBirth.end());\n+\n+    // produce output\n+    file << strprintf(\"# Wallet address dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD.c_str(), CLIENT_DATE.c_str());\n+    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()).c_str());\n+    file << strprintf(\"# * Best block at time of dump was %i (%s),\\n\", nBestHeight, hashBestChain.ToString().c_str());\n+    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(pindexBest->nTime).c_str());\n+    file << \"\\n\";\n+    for (std::vector<std::pair<int64, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+        const CKeyID &keyid = it->second;\n+        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strAddr = CBitcoinAddress(keyid).ToString();\n+        if (pwalletMain->mapAddressBook.count(keyid)) {\n+            file << strprintf(\"%s label=%s # addr=%s\\n\", strTime.c_str(), EncodeDumpString(pwalletMain->mapAddressBook[keyid]).c_str(), strAddr.c_str());\n+        } else if (setKeyPool.count(keyid)) {\n+            file << strprintf(\"%s reserve=1 # addr=%s\\n\", strTime.c_str(), strAddr.c_str());\n+        } else {\n+            file << strprintf(\"%s change=1 # addr=%s\\n\", strTime.c_str(), strAddr.c_str());\n+        }\n+    }\n+    file << \"\\n\";\n+    file << \"# End of dump\\n\";\n+    file.close();\n+    return Value::null;\n+}\n+"
      }
    ]
  }
]