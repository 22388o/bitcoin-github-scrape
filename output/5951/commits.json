[
  {
    "sha": "6f252627b2843ff5072cb702b47e241f4ffbed92",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjI1MjYyN2IyODQzZmY1MDcyY2I3MDJiNDdlMjQxZjRmZmJlZDky",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-03-27T09:34:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-04-01T11:03:39Z"
      },
      "message": "wallet: make it possible to disable transaction broadcast\n\nThis is an advanced feature which will disable any kind of automatic\ntransaction broadcasting in the wallet. This gives the user full control\nof how the transaction is sent.\n\nFor example they can broadcast new transactions through some other\nmechanism themselves, after getting the transaction hex through `gettransaction`.\n\nThis just adds the option `-walletbroadcast=<0,1>`. Right now these\ntransactions will get the status\n\n    Status: conflicted, has not been successfully broadcast yet\n\nThey shouldn't be shown as conflicted at all (`walletconflicts` is empty). This status\nwill go away when the transaction is received through the network.",
      "tree": {
        "sha": "a9898b0f2db439fadd759f5b3b3b99456128f49d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a9898b0f2db439fadd759f5b3b3b99456128f49d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f252627b2843ff5072cb702b47e241f4ffbed92",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f252627b2843ff5072cb702b47e241f4ffbed92",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f252627b2843ff5072cb702b47e241f4ffbed92",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f252627b2843ff5072cb702b47e241f4ffbed92/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41113e33ad62333d99fd8cc6bf717c0794681d86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41113e33ad62333d99fd8cc6bf717c0794681d86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41113e33ad62333d99fd8cc6bf717c0794681d86"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 23,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9445e2fa10f23086fa0416b5177f96ea1a44ac1e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f252627b2843ff5072cb702b47e241f4ffbed92/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f252627b2843ff5072cb702b47e241f4ffbed92/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f252627b2843ff5072cb702b47e241f4ffbed92",
        "patch": "@@ -337,6 +337,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         FormatMoney(maxTxFee)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), true));\n     strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n     strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n         \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n@@ -1242,6 +1243,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n                 }\n             }\n         }\n+        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", true));\n     } // (!fDisableWallet)\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet compiled in!\\n\");"
      },
      {
        "sha": "2566b2712bd1cd737f66fa4b885e81e55ed5f405",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f252627b2843ff5072cb702b47e241f4ffbed92/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f252627b2843ff5072cb702b47e241f4ffbed92/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6f252627b2843ff5072cb702b47e241f4ffbed92",
        "patch": "@@ -1096,6 +1096,9 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n \n void CWallet::ReacceptWalletTransactions()\n {\n+    // If transcations aren't broadcasted, don't let them into local mempool either\n+    if (!fBroadcastTransactions)\n+        return;\n     LOCK2(cs_main, cs_wallet);\n     BOOST_FOREACH(PAIRTYPE(const uint256, CWalletTx)& item, mapWallet)\n     {\n@@ -1116,6 +1119,7 @@ void CWallet::ReacceptWalletTransactions()\n \n bool CWalletTx::RelayWalletTransaction()\n {\n+    assert(pwallet->GetBroadcastTransactions());\n     if (!IsCoinBase())\n     {\n         if (GetDepthInMainChain() == 0) {\n@@ -1354,7 +1358,7 @@ void CWallet::ResendWalletTransactions(int64_t nBestBlockTime)\n {\n     // Do this infrequently and randomly to avoid giving away\n     // that these are our transactions.\n-    if (GetTime() < nNextResend)\n+    if (GetTime() < nNextResend || !fBroadcastTransactions)\n         return;\n     bool fFirst = (nNextResend == 0);\n     nNextResend = GetTime() + GetRand(30 * 60);\n@@ -1979,14 +1983,17 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         // Track how many getdata requests our transaction gets\n         mapRequestCount[wtxNew.GetHash()] = 0;\n \n-        // Broadcast\n-        if (!wtxNew.AcceptToMemoryPool(false))\n+        if (fBroadcastTransactions)\n         {\n-            // This must not fail. The transaction has already been signed and recorded.\n-            LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n-            return false;\n+            // Broadcast\n+            if (!wtxNew.AcceptToMemoryPool(false))\n+            {\n+                // This must not fail. The transaction has already been signed and recorded.\n+                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n+                return false;\n+            }\n+            wtxNew.RelayWalletTransaction();\n         }\n-        wtxNew.RelayWalletTransaction();\n     }\n     return true;\n }"
      },
      {
        "sha": "4dbb0e2e5788d9a4f98c37dc49883c11ec54b2b4",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f252627b2843ff5072cb702b47e241f4ffbed92/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f252627b2843ff5072cb702b47e241f4ffbed92/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6f252627b2843ff5072cb702b47e241f4ffbed92",
        "patch": "@@ -455,6 +455,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     int64_t nNextResend;\n     int64_t nLastResend;\n+    bool fBroadcastTransactions;\n \n     /**\n      * Used to keep track of spent outpoints, and\n@@ -518,6 +519,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nNextResend = 0;\n         nLastResend = 0;\n         nTimeFirstKey = 0;\n+        fBroadcastTransactions = false;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -723,6 +725,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     /** Watch-only address added */\n     boost::signals2::signal<void (bool fHaveWatchOnly)> NotifyWatchonlyChanged;\n+\n+    /** Inquire whether this wallet broadcasts transactions. */\n+    bool GetBroadcastTransactions() const { return fBroadcastTransactions; }\n+    /** Set whether this wallet broadcasts transactions. */\n+    void SetBroadcastTransactions(bool broadcast) { fBroadcastTransactions = broadcast; }\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "77650cc9f4646787e843b2922730d8cba5af36a1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzY1MGNjOWY0NjQ2Nzg3ZTg0M2IyOTIyNzMwZDhjYmE1YWYzNmEx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-04-01T09:56:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2015-04-01T11:03:39Z"
      },
      "message": "add -walletbroadcast=0 rpc test",
      "tree": {
        "sha": "da468d4a7ac5828b212da4c769682a9ab9dd7824",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da468d4a7ac5828b212da4c769682a9ab9dd7824"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77650cc9f4646787e843b2922730d8cba5af36a1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77650cc9f4646787e843b2922730d8cba5af36a1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77650cc9f4646787e843b2922730d8cba5af36a1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77650cc9f4646787e843b2922730d8cba5af36a1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f252627b2843ff5072cb702b47e241f4ffbed92",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f252627b2843ff5072cb702b47e241f4ffbed92",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f252627b2843ff5072cb702b47e241f4ffbed92"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "284fc1cb6f78f106d0edb3a82d17ab739f7604bf",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77650cc9f4646787e843b2922730d8cba5af36a1/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77650cc9f4646787e843b2922730d8cba5af36a1/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=77650cc9f4646787e843b2922730d8cba5af36a1",
        "patch": "@@ -150,6 +150,47 @@ def run_test (self):\n         sync_mempools(self.nodes)\n \n         assert(txid1 in self.nodes[3].getrawmempool())\n+        \n+        \n+        #do some -walletbroadcast tests\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        self.nodes = start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        self.sync_all()\n \n+        txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n+        txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n+        self.nodes[1].setgenerate(True, 1) #mine a block, tx should not be in there\n+        self.sync_all()\n+        assert_equal(self.nodes[2].getbalance(), Decimal('59.99800000')); #should not be changed because tx was not broadcasted\n+        \n+        #now broadcast from another node, mine a block, sync, and check the balance\n+        self.nodes[1].sendrawtransaction(txObjNotBroadcasted['hex'])\n+        self.nodes[1].setgenerate(True, 1)\n+        self.sync_all()\n+        txObjNotBroadcasted = self.nodes[0].gettransaction(txIdNotBroadcasted)\n+        assert_equal(self.nodes[2].getbalance(), Decimal('61.99800000')); #should not be\n+        \n+        #create another tx\n+        txIdNotBroadcasted  = self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(), 2);\n+        \n+        #restart the nodes with -walletbroadcast=1\n+        stop_nodes(self.nodes)\n+        wait_bitcoinds()\n+        self.nodes = start_nodes(3, self.options.tmpdir)\n+        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        sync_blocks(self.nodes)\n+        \n+        self.nodes[0].setgenerate(True, 1)\n+        sync_blocks(self.nodes)\n+        \n+        #tx should be added to balance because after restarting the nodes tx should be broadcastet\n+        assert_equal(self.nodes[2].getbalance(), Decimal('63.99800000')); #should not be\n+        \n if __name__ == '__main__':\n     WalletTest ().main ()"
      }
    ]
  }
]