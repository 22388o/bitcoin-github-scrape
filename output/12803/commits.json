[
  {
    "sha": "190b8d2dcf2f977b57298cc19be9974bfa83a071",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTBiOGQyZGNmMmY5NzdiNTcyOThjYzE5YmU5OTc0YmZhODNhMDcx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-27T20:15:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-10T16:29:17Z"
      },
      "message": "Make BaseSignatureCreator a pure interface",
      "tree": {
        "sha": "b245f253c1f0d0486254fc3e4b317a7a5778059c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b245f253c1f0d0486254fc3e4b317a7a5778059c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/190b8d2dcf2f977b57298cc19be9974bfa83a071",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190b8d2dcf2f977b57298cc19be9974bfa83a071",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/190b8d2dcf2f977b57298cc19be9974bfa83a071",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190b8d2dcf2f977b57298cc19be9974bfa83a071/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d651ae32013440b2af1267e87a9d93759a9471f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d651ae32013440b2af1267e87a9d93759a9471f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d651ae32013440b2af1267e87a9d93759a9471f"
      }
    ],
    "stats": {
      "total": 84,
      "additions": 39,
      "deletions": 45
    },
    "files": [
      {
        "sha": "eb41e9a41691993575d50e53b2a81ffa3dc42579",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "patch": "@@ -644,7 +644,7 @@ static void MutateTxSign(CMutableTransaction& tx, const std::string& flagStr)\n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mergedTx.vout.size()))\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(keystore, MutableTransactionSignatureCreator(&mergedTx, i, amount, nHashType), prevPubKey, sigdata);\n \n         // ... and merge in other signatures:\n         for (const CTransaction& txv : txVariants)"
      },
      {
        "sha": "27edd083ab4933fa3c5dced04b27f9ff5c2bfc4f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "patch": "@@ -831,7 +831,7 @@ UniValue SignTransaction(CMutableTransaction& mtx, const UniValue& prevTxsUnival\n         SignatureData sigdata;\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n-            ProduceSignature(MutableTransactionSignatureCreator(keystore, &mtx, i, amount, nHashType), prevPubKey, sigdata);\n+            ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n         }\n         sigdata = CombineSignatures(prevPubKey, TransactionSignatureChecker(&txConst, i, amount), sigdata, DataFromTransaction(mtx, i));\n "
      },
      {
        "sha": "3d2400995721ef949f3e41aea7e1d424e9c283ba",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "patch": "@@ -146,7 +146,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n         SignatureData sigs;\n-        return ProduceSignature(DummySignatureCreator(&keystore), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+        return ProduceSignature(keystore, DummySignatureCreator(), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "18cd542a6fc44b47f41d66a9bea65bd9eb22a297",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 24,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "patch": "@@ -14,12 +14,12 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const SigningProvider* provider, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(provider), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n-bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n+bool TransactionSignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n     CKey key;\n-    if (!m_provider->GetKey(address, key))\n+    if (!provider.GetKey(address, key))\n         return false;\n \n     // Signing with uncompressed keys is disabled in witness scripts\n@@ -33,24 +33,24 @@ bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig,\n     return true;\n }\n \n-static bool Sign1(const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n+static bool Sign1(const SigningProvider& provider, const CKeyID& address, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n {\n     std::vector<unsigned char> vchSig;\n-    if (!creator.CreateSig(vchSig, address, scriptCode, sigversion))\n+    if (!creator.CreateSig(provider, vchSig, address, scriptCode, sigversion))\n         return false;\n     ret.push_back(vchSig);\n     return true;\n }\n \n-static bool SignN(const std::vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n+static bool SignN(const SigningProvider& provider, const std::vector<valtype>& multisigdata, const BaseSignatureCreator& creator, const CScript& scriptCode, std::vector<valtype>& ret, SigVersion sigversion)\n {\n     int nSigned = 0;\n     int nRequired = multisigdata.front()[0];\n     for (unsigned int i = 1; i < multisigdata.size()-1 && nSigned < nRequired; i++)\n     {\n         const valtype& pubkey = multisigdata[i];\n         CKeyID keyID = CPubKey(pubkey).GetID();\n-        if (Sign1(keyID, creator, scriptCode, ret, sigversion))\n+        if (Sign1(provider, keyID, creator, scriptCode, ret, sigversion))\n             ++nSigned;\n     }\n     return nSigned==nRequired;\n@@ -62,7 +62,7 @@ static bool SignN(const std::vector<valtype>& multisigdata, const BaseSignatureC\n  * unless whichTypeRet is TX_SCRIPTHASH, in which case scriptSigRet is the redemption script.\n  * Returns false if scriptPubKey could not be completely satisfied.\n  */\n-static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n+static bool SignStep(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey,\n                      std::vector<valtype>& ret, txnouttype& whichTypeRet, SigVersion sigversion)\n {\n     CScript scriptRet;\n@@ -82,36 +82,36 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         return false;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n-        return Sign1(keyID, creator, scriptPubKey, ret, sigversion);\n+        return Sign1(provider, keyID, creator, scriptPubKey, ret, sigversion);\n     case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n-        if (!Sign1(keyID, creator, scriptPubKey, ret, sigversion))\n+        if (!Sign1(provider, keyID, creator, scriptPubKey, ret, sigversion))\n             return false;\n         else\n         {\n             CPubKey vch;\n-            creator.Provider().GetPubKey(keyID, vch);\n+            provider.GetPubKey(keyID, vch);\n             ret.push_back(ToByteVector(vch));\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        if (creator.Provider().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+        if (provider.GetCScript(uint160(vSolutions[0]), scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n         return false;\n \n     case TX_MULTISIG:\n         ret.push_back(valtype()); // workaround CHECKMULTISIG bug\n-        return (SignN(vSolutions, creator, scriptPubKey, ret, sigversion));\n+        return (SignN(provider, vSolutions, creator, scriptPubKey, ret, sigversion));\n \n     case TX_WITNESS_V0_KEYHASH:\n         ret.push_back(vSolutions[0]);\n         return true;\n \n     case TX_WITNESS_V0_SCRIPTHASH:\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n-        if (creator.Provider().GetCScript(h160, scriptRet)) {\n+        if (provider.GetCScript(h160, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n@@ -137,11 +137,11 @@ static CScript PushAll(const std::vector<valtype>& values)\n     return result;\n }\n \n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n+bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& fromPubKey, SignatureData& sigdata)\n {\n     std::vector<valtype> result;\n     txnouttype whichType;\n-    bool solved = SignStep(creator, fromPubKey, result, whichType, SigVersion::BASE);\n+    bool solved = SignStep(provider, creator, fromPubKey, result, whichType, SigVersion::BASE);\n     bool P2SH = false;\n     CScript subscript;\n     sigdata.scriptWitness.stack.clear();\n@@ -152,7 +152,7 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         // the final scriptSig is the signatures from that\n         // and then the serialized subscript:\n         subscript = CScript(result[0].begin(), result[0].end());\n-        solved = solved && SignStep(creator, subscript, result, whichType, SigVersion::BASE) && whichType != TX_SCRIPTHASH;\n+        solved = solved && SignStep(provider, creator, subscript, result, whichType, SigVersion::BASE) && whichType != TX_SCRIPTHASH;\n         P2SH = true;\n     }\n \n@@ -161,15 +161,15 @@ bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& fromPu\n         CScript witnessscript;\n         witnessscript << OP_DUP << OP_HASH160 << ToByteVector(result[0]) << OP_EQUALVERIFY << OP_CHECKSIG;\n         txnouttype subType;\n-        solved = solved && SignStep(creator, witnessscript, result, subType, SigVersion::WITNESS_V0);\n+        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0);\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n     }\n     else if (solved && whichType == TX_WITNESS_V0_SCRIPTHASH)\n     {\n         CScript witnessscript(result[0].begin(), result[0].end());\n         txnouttype subType;\n-        solved = solved && SignStep(creator, witnessscript, result, subType, SigVersion::WITNESS_V0) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n+        solved = solved && SignStep(provider, creator, witnessscript, result, subType, SigVersion::WITNESS_V0) && subType != TX_SCRIPTHASH && subType != TX_WITNESS_V0_SCRIPTHASH && subType != TX_WITNESS_V0_KEYHASH;\n         result.push_back(std::vector<unsigned char>(witnessscript.begin(), witnessscript.end()));\n         sigdata.scriptWitness.stack = result;\n         result.clear();\n@@ -210,10 +210,10 @@ bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, C\n     assert(nIn < txTo.vin.size());\n \n     CTransaction txToConst(txTo);\n-    TransactionSignatureCreator creator(&provider, &txToConst, nIn, amount, nHashType);\n+    TransactionSignatureCreator creator(&txToConst, nIn, amount, nHashType);\n \n     SignatureData sigdata;\n-    bool ret = ProduceSignature(creator, fromPubKey, sigdata);\n+    bool ret = ProduceSignature(provider, creator, fromPubKey, sigdata);\n     UpdateTransaction(txTo, nIn, sigdata);\n     return ret;\n }\n@@ -410,7 +410,7 @@ const BaseSignatureChecker& DummySignatureCreator::Checker() const\n     return dummyChecker;\n }\n \n-bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n+bool DummySignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n {\n     // Create a dummy signature that is a valid DER-encoding\n     vchSig.assign(72, '\\000');\n@@ -432,12 +432,12 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script)\n     // if we were to have the private keys. This is just to make sure that the script is valid and that,\n     // if found in a transaction, we would still accept and relay that transaction. In particular,\n     // it will reject witness outputs that require signing with an uncompressed public key.\n-    DummySignatureCreator creator(&provider);\n+    static const DummySignatureCreator creator;\n     SignatureData sigs;\n     // Make sure that STANDARD_SCRIPT_VERIFY_FLAGS includes SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, the most\n     // important property this function is designed to test for.\n     static_assert(STANDARD_SCRIPT_VERIFY_FLAGS & SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, \"IsSolvable requires standard script flags to include WITNESS_PUBKEYTYPE\");\n-    if (ProduceSignature(creator, script, sigs)) {\n+    if (ProduceSignature(provider, creator, script, sigs)) {\n         // VerifyScript check is just defensive, and should never fail.\n         assert(VerifyScript(sigs.scriptSig, script, &sigs.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker()));\n         return true;"
      },
      {
        "sha": "88d769a84a05cda223b3f197ee08f1d2311cac9a",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 7,
        "deletions": 13,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "patch": "@@ -26,19 +26,14 @@ class SigningProvider\n     virtual bool GetKey(const CKeyID &address, CKey& key) const =0;\n };\n \n-/** Virtual base class for signature creators. */\n+/** Interface for signature creators. */\n class BaseSignatureCreator {\n-protected:\n-    const SigningProvider* m_provider;\n-\n public:\n-    explicit BaseSignatureCreator(const SigningProvider* provider) : m_provider(provider) {}\n-    const SigningProvider& Provider() const { return *m_provider; }\n     virtual ~BaseSignatureCreator() {}\n     virtual const BaseSignatureChecker& Checker() const =0;\n \n     /** Create a singular (non-script) signature. */\n-    virtual bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n+    virtual bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const =0;\n };\n \n /** A signature creator for transactions. */\n@@ -50,24 +45,23 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     const TransactionSignatureChecker checker;\n \n public:\n-    TransactionSignatureCreator(const SigningProvider* provider, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n+    TransactionSignatureCreator(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n     CTransaction tx;\n \n public:\n-    MutableTransactionSignatureCreator(const SigningProvider* provider, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : TransactionSignatureCreator(provider, &tx, nInIn, amountIn, nHashTypeIn), tx(*txToIn) {}\n+    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : TransactionSignatureCreator(&tx, nInIn, amountIn, nHashTypeIn), tx(*txToIn) {}\n };\n \n /** A signature creator that just produces 72-byte empty signatures. */\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n-    explicit DummySignatureCreator(const SigningProvider* provider) : BaseSignatureCreator(provider) {}\n     const BaseSignatureChecker& Checker() const override;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n struct SignatureData {\n@@ -79,7 +73,7 @@ struct SignatureData {\n };\n \n /** Produce a script signature using a generic signature creator. */\n-bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n+bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);"
      },
      {
        "sha": "a1d86e3afc1819c18f002a13912b713773e63ad7",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "patch": "@@ -314,7 +314,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n \n         // Sign\n         SignatureData sigdata;\n-        ProduceSignature(MutableTransactionSignatureCreator(&keystore, &valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata);\n+        ProduceSignature(keystore, MutableTransactionSignatureCreator(&valid_with_witness_tx, 0, 11*CENT, SIGHASH_ALL), spend_tx.vout[1].scriptPubKey, sigdata);\n         UpdateTransaction(valid_with_witness_tx, 0, sigdata);\n \n         // This should be valid under all script flags.\n@@ -342,7 +342,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n         // Sign\n         for (int i=0; i<2; ++i) {\n             SignatureData sigdata;\n-            ProduceSignature(MutableTransactionSignatureCreator(&keystore, &tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata);\n+            ProduceSignature(keystore, MutableTransactionSignatureCreator(&tx, i, 11*CENT, SIGHASH_ALL), spend_tx.vout[i].scriptPubKey, sigdata);\n             UpdateTransaction(tx, i, sigdata);\n         }\n "
      },
      {
        "sha": "a3a4e71f027244ccf04eaedd1448918ed78a5954",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190b8d2dcf2f977b57298cc19be9974bfa83a071/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "patch": "@@ -1535,7 +1535,7 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    if (!ProduceSignature(DummySignatureCreator(this), scriptPubKey, sigdata))\n+    if (!ProduceSignature(*this, DummySignatureCreator(), scriptPubKey, sigdata))\n     {\n         return false;\n     } else {\n@@ -2579,7 +2579,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n         const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;\n-        if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+        if (!ProduceSignature(*this, TransactionSignatureCreator(&txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n             return false;\n         }\n         UpdateTransaction(tx, nIn, sigdata);\n@@ -3008,7 +3008,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                 const CScript& scriptPubKey = coin.txout.scriptPubKey;\n                 SignatureData sigdata;\n \n-                if (!ProduceSignature(TransactionSignatureCreator(this, &txNewConst, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n+                if (!ProduceSignature(*this, TransactionSignatureCreator(&txNewConst, nIn, coin.txout.nValue, SIGHASH_ALL), scriptPubKey, sigdata))\n                 {\n                     strFailReason = _(\"Signing transaction failed\");\n                     return false;"
      }
    ]
  },
  {
    "sha": "be678312102ed9bee66738c4721df1343518e3ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTY3ODMxMjEwMmVkOWJlZTY2NzM4YzQ3MjFkZjEzNDM1MThlM2Vh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-27T20:34:39Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-04-10T16:29:17Z"
      },
      "message": "Make DummySignatureCreator a singleton",
      "tree": {
        "sha": "545aa24272132e7e05b45c026096b19477cdb0b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/545aa24272132e7e05b45c026096b19477cdb0b4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be678312102ed9bee66738c4721df1343518e3ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be678312102ed9bee66738c4721df1343518e3ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be678312102ed9bee66738c4721df1343518e3ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be678312102ed9bee66738c4721df1343518e3ea/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190b8d2dcf2f977b57298cc19be9974bfa83a071",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/190b8d2dcf2f977b57298cc19be9974bfa83a071"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 26,
      "deletions": 33
    },
    "files": [
      {
        "sha": "b826bcfe2001120dd6d832a61eb53532b83d2564",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be678312102ed9bee66738c4721df1343518e3ea/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be678312102ed9bee66738c4721df1343518e3ea/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=be678312102ed9bee66738c4721df1343518e3ea",
        "patch": "@@ -146,7 +146,7 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool&\n     if (keystore.HaveWatchOnly(scriptPubKey)) {\n         // TODO: This could be optimized some by doing some work after the above solver\n         SignatureData sigs;\n-        return ProduceSignature(keystore, DummySignatureCreator(), scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n+        return ProduceSignature(keystore, DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigs) ? ISMINE_WATCH_SOLVABLE : ISMINE_WATCH_UNSOLVABLE;\n     }\n     return ISMINE_NO;\n }"
      },
      {
        "sha": "ac35f17f3e1df6df238a7c47ed9f6071431e0270",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 26,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be678312102ed9bee66738c4721df1343518e3ea/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be678312102ed9bee66738c4721df1343518e3ea/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=be678312102ed9bee66738c4721df1343518e3ea",
        "patch": "@@ -392,54 +392,51 @@ SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignature\n \n namespace {\n /** Dummy signature checker which accepts all signatures. */\n-class DummySignatureChecker : public BaseSignatureChecker\n+class DummySignatureChecker final : public BaseSignatureChecker\n {\n public:\n     DummySignatureChecker() {}\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override { return true; }\n+};\n+const DummySignatureChecker DUMMY_CHECKER;\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override\n+class DummySignatureCreator final : public BaseSignatureCreator {\n+public:\n+    DummySignatureCreator() {}\n+    const BaseSignatureChecker& Checker() const override { return DUMMY_CHECKER; }\n+    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n+        // Create a dummy signature that is a valid DER-encoding\n+        vchSig.assign(72, '\\000');\n+        vchSig[0] = 0x30;\n+        vchSig[1] = 69;\n+        vchSig[2] = 0x02;\n+        vchSig[3] = 33;\n+        vchSig[4] = 0x01;\n+        vchSig[4 + 33] = 0x02;\n+        vchSig[5 + 33] = 32;\n+        vchSig[6 + 33] = 0x01;\n+        vchSig[6 + 33 + 32] = SIGHASH_ALL;\n         return true;\n     }\n };\n-const DummySignatureChecker dummyChecker;\n-} // namespace\n-\n-const BaseSignatureChecker& DummySignatureCreator::Checker() const\n-{\n-    return dummyChecker;\n }\n \n-bool DummySignatureCreator::CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const\n-{\n-    // Create a dummy signature that is a valid DER-encoding\n-    vchSig.assign(72, '\\000');\n-    vchSig[0] = 0x30;\n-    vchSig[1] = 69;\n-    vchSig[2] = 0x02;\n-    vchSig[3] = 33;\n-    vchSig[4] = 0x01;\n-    vchSig[4 + 33] = 0x02;\n-    vchSig[5 + 33] = 32;\n-    vchSig[6 + 33] = 0x01;\n-    vchSig[6 + 33 + 32] = SIGHASH_ALL;\n-    return true;\n-}\n+const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR = DummySignatureCreator();\n \n bool IsSolvable(const SigningProvider& provider, const CScript& script)\n {\n     // This check is to make sure that the script we created can actually be solved for and signed by us\n     // if we were to have the private keys. This is just to make sure that the script is valid and that,\n     // if found in a transaction, we would still accept and relay that transaction. In particular,\n     // it will reject witness outputs that require signing with an uncompressed public key.\n-    static const DummySignatureCreator creator;\n     SignatureData sigs;\n     // Make sure that STANDARD_SCRIPT_VERIFY_FLAGS includes SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, the most\n     // important property this function is designed to test for.\n     static_assert(STANDARD_SCRIPT_VERIFY_FLAGS & SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, \"IsSolvable requires standard script flags to include WITNESS_PUBKEYTYPE\");\n-    if (ProduceSignature(provider, creator, script, sigs)) {\n+    if (ProduceSignature(provider, DUMMY_SIGNATURE_CREATOR, script, sigs)) {\n         // VerifyScript check is just defensive, and should never fail.\n-        assert(VerifyScript(sigs.scriptSig, script, &sigs.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, creator.Checker()));\n+        assert(VerifyScript(sigs.scriptSig, script, &sigs.scriptWitness, STANDARD_SCRIPT_VERIFY_FLAGS, DUMMY_CHECKER));\n         return true;\n     }\n     return false;"
      },
      {
        "sha": "cf3651c1de0f6e101b147ad24783406f1690be3a",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be678312102ed9bee66738c4721df1343518e3ea/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be678312102ed9bee66738c4721df1343518e3ea/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=be678312102ed9bee66738c4721df1343518e3ea",
        "patch": "@@ -58,11 +58,7 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n };\n \n /** A signature creator that just produces 72-byte empty signatures. */\n-class DummySignatureCreator : public BaseSignatureCreator {\n-public:\n-    const BaseSignatureChecker& Checker() const override;\n-    bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n-};\n+extern const BaseSignatureCreator& DUMMY_SIGNATURE_CREATOR;\n \n struct SignatureData {\n     CScript scriptSig;"
      },
      {
        "sha": "3115981de3f0b1c7bd3904cc17ea0989b866d451",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be678312102ed9bee66738c4721df1343518e3ea/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be678312102ed9bee66738c4721df1343518e3ea/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=be678312102ed9bee66738c4721df1343518e3ea",
        "patch": "@@ -1535,7 +1535,7 @@ bool CWallet::DummySignInput(CTxIn &tx_in, const CTxOut &txout) const\n     const CScript& scriptPubKey = txout.scriptPubKey;\n     SignatureData sigdata;\n \n-    if (!ProduceSignature(*this, DummySignatureCreator(), scriptPubKey, sigdata))\n+    if (!ProduceSignature(*this, DUMMY_SIGNATURE_CREATOR, scriptPubKey, sigdata))\n     {\n         return false;\n     } else {"
      }
    ]
  }
]