[
  {
    "sha": "063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjNmYmFlMDRiMWNkZDM0NzJlN2U3ZjRmMDM3YmM3ODEzN2FmYjRi",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-16T09:00:35Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T04:48:36Z"
      },
      "message": "Allow array of redeemScripts in signrawtransaction RPC",
      "tree": {
        "sha": "cfcb6281ba07bde00aba8ad113f3aa292034cce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfcb6281ba07bde00aba8ad113f3aa292034cce6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/063fbae04b1cdd3472e7e7f4f037bc78137afb4b/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2089c51cc4af2f7e1c0ec75be9449ee222b1d69"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 24,
      "deletions": 16
    },
    "files": [
      {
        "sha": "2cb41cc932038ccddb8af4f8e991e19c522dbee0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 15,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/063fbae04b1cdd3472e7e7f4f037bc78137afb4b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/063fbae04b1cdd3472e7e7f4f037bc78137afb4b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
        "patch": "@@ -698,7 +698,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             \"         \\\"txid\\\":\\\"id\\\",             (string, required) The transaction id\\n\"\n             \"         \\\"vout\\\":n,                  (numeric, required) The output number\\n\"\n             \"         \\\"scriptPubKey\\\": \\\"hex\\\",   (string, required) script key\\n\"\n-            \"         \\\"redeemScript\\\": \\\"hex\\\",   (string, required for P2SH or P2WSH) redeem script\\n\"\n+            \"         \\\"redeemScript\\\": \\\"hex\\\" | [\\\"hex\\\", ... ],   (string or array, required for P2SH or P2WSH) redeem script\\n\"\n             \"         \\\"amount\\\": value            (numeric, required) The amount spent\\n\"\n             \"       }\\n\"\n             \"       ,...\\n\"\n@@ -833,20 +833,28 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n                 view.AddCoin(out, std::move(newcoin), true);\n             }\n \n-            // if redeemScript given and not using the local wallet (private keys\n-            // given), add redeemScript to the tempKeystore so it can be signed:\n-            if (fGivenKeys && (scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n-                RPCTypeCheckObj(prevOut,\n-                    {\n-                        {\"txid\", UniValueType(UniValue::VSTR)},\n-                        {\"vout\", UniValueType(UniValue::VNUM)},\n-                        {\"scriptPubKey\", UniValueType(UniValue::VSTR)},\n-                        {\"redeemScript\", UniValueType(UniValue::VSTR)},\n-                    });\n-                UniValue v = find_value(prevOut, \"redeemScript\");\n-                if (!v.isNull()) {\n-                    std::vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n-                    CScript redeemScript(rsData.begin(), rsData.end());\n+            // if redeemScript given add redeemScript to the tempKeystore so it can be signed:\n+            UniValue rs = find_value(prevOut, \"redeemScript\");\n+            if (rs.getType() != UniValue::VNULL) {\n+                if (!(scriptPubKey.IsPayToScriptHash() || scriptPubKey.IsPayToWitnessScriptHash())) {\n+                    // if this isnt P2SH or P2WSH, scripts should not be provided\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scripts should not be provided if P2SH or P2WSH are not being used\");\n+                } else if (!fGivenKeys) {\n+                    // if private keys aren't given, assume we are using the local wallet, so we don't currently support accepting scripts\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"Scripts cannot be provided when using local wallet (no keys given)\");\n+                }\n+                std::vector<std::string> scripts;\n+                if (rs.getType() == UniValue::VARR) {\n+                    // If redeemScript is an array, iterate over all scripts provided\n+                    for (const auto& r : rs.getValues()) {\n+                        scripts.push_back(r.get_str());\n+                    }\n+                } else {\n+                    scripts.push_back(rs.get_str());\n+                }\n+                for (const std::string& script : scripts) {\n+                    std::vector<unsigned char> script_data(ParseHexV(script, \"redeemScript\"));\n+                    CScript redeemScript(script_data.begin(), script_data.end());\n                     tempKeystore.AddCScript(redeemScript);\n                 }\n             }"
      },
      {
        "sha": "3dbac0d3c02bce5268aa28c3ee43941fac9e40b5",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/063fbae04b1cdd3472e7e7f4f037bc78137afb4b/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/063fbae04b1cdd3472e7e7f4f037bc78137afb4b/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
        "patch": "@@ -244,7 +244,7 @@ def run_test(self):\n                 break\n \n         bal = self.nodes[0].getbalance()\n-        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"redeemScript\" : mSigObjValid['hex'], \"amount\" : vout['value']}]\n+        inputs = [{ \"txid\" : txId, \"vout\" : vout['n'], \"scriptPubKey\" : vout['scriptPubKey']['hex'], \"amount\" : vout['value']}]\n         outputs = { self.nodes[0].getnewaddress() : 2.19 }\n         rawTx2 = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawTxPartialSigned1 = self.nodes[1].signrawtransaction(rawTx2, inputs)"
      }
    ]
  },
  {
    "sha": "b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2YzYWQ0MWFhYmM1MzBiMDA4NGM3YjdlYTg4YmQzMWUxNTllMGFh",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-16T10:43:25Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T04:48:36Z"
      },
      "message": "Make listunspent output array of redeemScripts for P2SH-P2WSH",
      "tree": {
        "sha": "166dbfc386bc5e745d153de55e5a05d6d9da56ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/166dbfc386bc5e745d153de55e5a05d6d9da56ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/063fbae04b1cdd3472e7e7f4f037bc78137afb4b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/063fbae04b1cdd3472e7e7f4f037bc78137afb4b"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 39,
      "deletions": 12
    },
    "files": [
      {
        "sha": "32ebf306b55c29fc3ee88b106e51eccb55101e5e",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 12,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa",
        "patch": "@@ -2903,17 +2903,17 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n-            \"    \\\"txid\\\" : \\\"txid\\\",          (string) the transaction id \\n\"\n-            \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"address\\\" : \\\"address\\\",    (string) the bitcoin address\\n\"\n-            \"    \\\"account\\\" : \\\"account\\\",    (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n-            \"    \\\"scriptPubKey\\\" : \\\"key\\\",   (string) the script key\\n\"\n-            \"    \\\"amount\\\" : x.xxx,         (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n-            \"    \\\"redeemScript\\\" : n        (string) The redeemScript if scriptPubKey is P2SH\\n\"\n-            \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n-            \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n-            \"    \\\"safe\\\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n+            \"    \\\"txid\\\" : \\\"txid\\\",            (string) the transaction id \\n\"\n+            \"    \\\"vout\\\" : n,                 (numeric) the vout value\\n\"\n+            \"    \\\"address\\\" : \\\"address\\\",      (string) the bitcoin address\\n\"\n+            \"    \\\"account\\\" : \\\"account\\\",      (string) DEPRECATED. The associated account, or \\\"\\\" for the default account\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"key\\\",     (string) the script key\\n\"\n+            \"    \\\"amount\\\" : x.xxx,           (numeric) the transaction output amount in \" + CURRENCY_UNIT + \"\\n\"\n+            \"    \\\"confirmations\\\" : n,        (numeric) The number of confirmations\\n\"\n+            \"    \\\"redeemScript\\\" : \\\"script\\\" | [\\\"script\\\", ... ],  (string or array) The redeemScript as a string for P2SH/P2WSH, or the redeemScript and witnessScript as an array if using P2SH-P2WSH. Unset in other cases\\n\"\n+            \"    \\\"spendable\\\" : xxx,          (bool) Whether we have the private keys to spend this output\\n\"\n+            \"    \\\"solvable\\\" : xxx,           (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n+            \"    \\\"safe\\\" : xxx                (bool) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n             \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n             \"                              and are not eligible for spending by fundrawtransaction and sendtoaddress.\\n\"\n             \"  }\\n\"\n@@ -3017,7 +3017,34 @@ UniValue listunspent(const JSONRPCRequest& request)\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n                 if (pwallet->GetCScript(hash, redeemScript)) {\n-                    entry.pushKV(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end()));\n+                    CTxDestination witness_destination;\n+                    if (redeemScript.IsPayToWitnessScriptHash() && ExtractDestination(redeemScript, witness_destination)) {\n+                        const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(witness_destination);\n+                        CScriptID id;\n+                        CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                        CScript witnessScript;\n+                        // For compatibility with signrawtransaction, if we have both a witnessScript\n+                        // and redeemScript, return them in an array\n+                        UniValue scripts(UniValue::VARR);\n+                        scripts.push_back(HexStr(redeemScript.begin(), redeemScript.end()));\n+                        if (pwallet->GetCScript(id, witnessScript)) {\n+                            scripts.push_back(HexStr(witnessScript.begin(), witnessScript.end()));\n+                        }\n+                        entry.push_back(Pair(\"redeemScript\", scripts));\n+                    } else {\n+                        entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                    }\n+                }\n+            }\n+\n+            if (scriptPubKey.IsPayToWitnessScriptHash()) {\n+                const WitnessV0ScriptHash& whash = boost::get<WitnessV0ScriptHash>(address);\n+                CScriptID id;\n+                CRIPEMD160().Write(whash.begin(), whash.size()).Finalize(id.begin());\n+                CScript witnessScript;\n+                // The witnessScript should always be present, so this should be always true\n+                if (pwallet->GetCScript(id, witnessScript)) {\n+                    entry.push_back(Pair(\"redeemScript\", HexStr(witnessScript.begin(), witnessScript.end())));\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "98c29fd4585e06fcb8533ef447bcf9665a16f3cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OGMyOWZkNDU4NWUwNmZjYjg1MzNlZjQ0N2JjZjk2NjVhMTZmM2Ni",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-18T08:57:05Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T05:28:35Z"
      },
      "message": "Add test for P2SH-P2WSH signrawtransaction",
      "tree": {
        "sha": "54252394b57a53102a1dc9eede2994aacfc69130",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54252394b57a53102a1dc9eede2994aacfc69130"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/98c29fd4585e06fcb8533ef447bcf9665a16f3cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c29fd4585e06fcb8533ef447bcf9665a16f3cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/98c29fd4585e06fcb8533ef447bcf9665a16f3cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c29fd4585e06fcb8533ef447bcf9665a16f3cb/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3f3ad41aabc530b0084c7b7ea88bd31e159e0aa"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 30,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5557913a0e091b23aa3d4f5b4ece7e878dc3440a",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 30,
        "deletions": 1,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/98c29fd4585e06fcb8533ef447bcf9665a16f3cb/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/98c29fd4585e06fcb8533ef447bcf9665a16f3cb/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=98c29fd4585e06fcb8533ef447bcf9665a16f3cb",
        "patch": "@@ -6,12 +6,13 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.script import CScript, OP_0, OP_1, OP_CHECKMULTISIG\n \n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n \n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n@@ -138,6 +139,34 @@ def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n \n+        # Now test signing transaction to P2SH-P2WSH addresses without wallet\n+        # Create a new P2SH-P2WSH 1-of-1 multisig address:\n+        embedded_address = self.nodes[1].getnewaddress()\n+        embedded_pubkey = self.nodes[1].validateaddress(embedded_address)[\"pubkey\"]\n+        embedded_privkey = self.nodes[1].dumpprivkey(embedded_address)\n+        p2sh_p2wsh_address = self.nodes[1].addmultisigaddress(1, [embedded_pubkey], \"\", \"p2sh-segwit\")['address']\n+        witness_script = CScript([OP_1, hex_str_to_bytes(embedded_pubkey), OP_1, OP_CHECKMULTISIG])\n+\n+        # send transaction to P2SH-P2WSH 1-of-1 multisig address\n+        self.nodes[0].generate(101)\n+        tx_to_witness = self.nodes[0].createrawtransaction([self.nodes[0].listunspent()[0]], {p2sh_p2wsh_address: Decimal(\"49.999\")})\n+        signed_tx_to_witness = self.nodes[0].signrawtransaction(tx_to_witness)\n+        assert (\"errors\" not in signed_tx_to_witness or len([\"errors\"]) == 0)\n+        self.nodes[0].sendrawtransaction(signed_tx_to_witness[\"hex\"])\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # Find the UTXO for the transaction node[1] should have received, check witnessScript matches\n+        unspent_output = self.nodes[1].listunspent(0, 999999, [p2sh_p2wsh_address])[0]\n+        assert_equal(unspent_output[\"redeemScript\"][1], bytes_to_hex_str(witness_script))\n+\n+        # Now create and sign a transaction spending that transaction on node[0], which doesn't know the scripts or keys\n+        spending_tx = self.nodes[0].createrawtransaction([unspent_output], {self.nodes[1].getnewaddress(): Decimal(\"49.998\")})\n+        spending_tx_signed = self.nodes[0].signrawtransaction(spending_tx, [unspent_output], [embedded_privkey])\n+        # Check the signing completed successfully\n+        assert 'complete' in spending_tx_signed\n+        assert_equal(spending_tx_signed['complete'], True)\n+\n \n if __name__ == '__main__':\n     SignRawTransactionsTest().main()"
      }
    ]
  },
  {
    "sha": "b85cc9c60c8a36c10df71b30266d5da8d17655f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODVjYzljNjBjOGEzNmMxMGRmNzFiMzAyNjZkNWRhOGQxNzY1NWYy",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-11-18T10:22:40Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T05:28:35Z"
      },
      "message": "Add release notes for signrawtransaction/listunspent witnessScript",
      "tree": {
        "sha": "8a37ea6fbd95281550e3c7bb375d2ca4cf86619a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8a37ea6fbd95281550e3c7bb375d2ca4cf86619a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b85cc9c60c8a36c10df71b30266d5da8d17655f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b85cc9c60c8a36c10df71b30266d5da8d17655f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b85cc9c60c8a36c10df71b30266d5da8d17655f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b85cc9c60c8a36c10df71b30266d5da8d17655f2/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "98c29fd4585e06fcb8533ef447bcf9665a16f3cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/98c29fd4585e06fcb8533ef447bcf9665a16f3cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/98c29fd4585e06fcb8533ef447bcf9665a16f3cb"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2350ae35674d055040cdccb6d8b501871c4d612e",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b85cc9c60c8a36c10df71b30266d5da8d17655f2/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b85cc9c60c8a36c10df71b30266d5da8d17655f2/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=b85cc9c60c8a36c10df71b30266d5da8d17655f2",
        "patch": "@@ -63,6 +63,14 @@ RPC changes\n \n - The `fundrawtransaction` rpc will reject the previously deprecated `reserveChangeKey` option.\n \n+- The `redeemScript` for each of the `prevtxs` given to `signrawtransaction` can now optionally be an array\n+  of scripts, so both the redeemScript and witnessScript for P2SH-P2WSH addresses can be passed in.\n+\n+- The `listunspent` output will now return an array of scripts as the `redeemScript` in the case of P2SH-P2WSH,\n+  for compatibility with the `signrawtransaction` change above. In other cases, `listunspent` will continue to return\n+  the only `redeemScript` as a string, as before.\n+\n+\n Credits\n =======\n "
      }
    ]
  },
  {
    "sha": "576624ce9567487f799d3a526b8f38b88c64ee80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NzY2MjRjZTk1Njc0ODdmNzk5ZDNhNTI2YjhmMzhiODhjNjRlZTgw",
    "commit": {
      "author": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2017-12-12T22:47:24Z"
      },
      "committer": {
        "name": "MeshCollider",
        "email": "dobsonsa68@gmail.com",
        "date": "2018-02-15T05:28:35Z"
      },
      "message": "Check that redeemScript for P2SH-P2WSH from listunspent is correct",
      "tree": {
        "sha": "f04b0e3846b7842e1b8941a1bb5be2ad0c065f78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f04b0e3846b7842e1b8941a1bb5be2ad0c065f78"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/576624ce9567487f799d3a526b8f38b88c64ee80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/576624ce9567487f799d3a526b8f38b88c64ee80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/576624ce9567487f799d3a526b8f38b88c64ee80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/576624ce9567487f799d3a526b8f38b88c64ee80/comments",
    "author": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b85cc9c60c8a36c10df71b30266d5da8d17655f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b85cc9c60c8a36c10df71b30266d5da8d17655f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b85cc9c60c8a36c10df71b30266d5da8d17655f2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c2d2747a49d9f72ad5e936faf3df555e3e90019b",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/576624ce9567487f799d3a526b8f38b88c64ee80/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/576624ce9567487f799d3a526b8f38b88c64ee80/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=576624ce9567487f799d3a526b8f38b88c64ee80",
        "patch": "@@ -6,6 +6,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from test_framework.mininode import sha256\n from test_framework.script import CScript, OP_0, OP_1, OP_CHECKMULTISIG\n \n \n@@ -146,6 +147,7 @@ def run_test(self):\n         embedded_privkey = self.nodes[1].dumpprivkey(embedded_address)\n         p2sh_p2wsh_address = self.nodes[1].addmultisigaddress(1, [embedded_pubkey], \"\", \"p2sh-segwit\")['address']\n         witness_script = CScript([OP_1, hex_str_to_bytes(embedded_pubkey), OP_1, OP_CHECKMULTISIG])\n+        redeem_script = CScript([OP_0, sha256(witness_script)])\n \n         # send transaction to P2SH-P2WSH 1-of-1 multisig address\n         self.nodes[0].generate(101)\n@@ -158,6 +160,7 @@ def run_test(self):\n \n         # Find the UTXO for the transaction node[1] should have received, check witnessScript matches\n         unspent_output = self.nodes[1].listunspent(0, 999999, [p2sh_p2wsh_address])[0]\n+        assert_equal(unspent_output[\"redeemScript\"][0], bytes_to_hex_str(redeem_script))\n         assert_equal(unspent_output[\"redeemScript\"][1], bytes_to_hex_str(witness_script))\n \n         # Now create and sign a transaction spending that transaction on node[0], which doesn't know the scripts or keys"
      }
    ]
  }
]