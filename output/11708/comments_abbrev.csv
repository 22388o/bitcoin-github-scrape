NicolasDorier,2017-11-17T05:21:45Z,"NACK, redeemScript + scriptPubKey are sufficient information to know whether you are talking about P2SH-P2WSH, P2SH, P2WSH. Having one more ""witness script"" is just redundant information which can go wrong.\n\nIf you enter the witness script in ""redeemScript"" field, you can easily find out in code if it mean P2SH or Witness by comparing with the scriptPubKey, there is no ambiguity.\n",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345148386,345148386,
sipa,2017-11-17T05:35:09Z,"@NicolasDorier How so? The redeemscript only contains a hash of the witness script in the case of P2SH-P2WSH, which is not sufficient to sign with.\n\nIt would be possible to require passing only the witness script, and automatically also add the v0 P2WSH redeemscript (and any future versions?). But just the redeemscript is not enough.",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345150004,345150004,
meshcollider,2017-11-17T06:18:56Z,"Indeed, IMO its much cleaner implementation and user experience to have the witnessScript provided in addition to the redeemScript, not only because that avoids the ambiguous witness version issue in a nice way but also because then it is clear to the user which script the redeemScript actually refers to (because the redeemScript output of other RPCs in general would refer to the wrapper P2SH rede",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345155716,345155716,
jonasschnelli,2017-11-17T21:10:02Z,Concept ACK. Can you add a test?,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345366064,345366064,
meshcollider,2017-11-17T22:57:27Z,"@jonasschnelli yep will do, see TODO section :) Just trying to work out the cleanest way to test it wrt all the existing tests in segwit.py",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345388311,345388311,
meshcollider,2017-11-18T10:24:04Z,"Test and release notes added, @jonasschnelli's nits addresses",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345432938,345432938,
NicolasDorier,2017-11-20T05:04:04Z,"This is how I am doing with NBitcoin for long.\n\n@sipa if you have `redeemscript` and `scriptPubKey` you can know exactly wether redeemScript is a Segwit or P2SH redeem.\n\nIf `scriptPubKey` is P2WSH, then you know `redeemScript` is a segwit redeem.\n\nIf `scriptPubKey` is P2SH, you know `redeemScript` is either a P2SH redeem or a Segwit Redeem.\n\nIf `Hash(redeemScript) is contained insi",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345592667,345592667,
sipa,2017-11-20T05:08:07Z,"@NicolasDorier Ah, I'm using redeemscript exclusively for P2SH.\n\nYes, if you have the witness script, and can correctly guess it is a V0 P2WSH embedded in P2SH, you can derive the redeemscript.\n\nI'm not convinced guessing is the best approach.",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345593132,345593132,
NicolasDorier,2017-11-20T05:11:08Z,"Well the thing is that this field is called `redeemScript` which does not suppose it is P2SH or Segwit redeem, and it does not have to.\n\nIf you insist having both redeem, then I would suggest to rename `redeemScript` as `p2shRedeem`.\n\nBut then, the logic of this RPC method will need to ensure that all, `witnessScript`, `p2shRedeem` and `scriptPubKey` are coherent.\n\nI am convinced speci",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345593451,345593451,
sipa,2017-11-20T06:59:15Z,"@NicolasDorier That's the fair point, the naming would be inconsistent in that case.\n\nWe also don't actually need to distinguish for our implementation. @MeshCollider perhaps we can just permit redeemScript to be a list, in which case multiple scripts gets loaded with AddCScript?",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345607577,345607577,
meshcollider,2017-11-20T11:19:06Z,"Yep I'm happy with that approach too, I just definitely want to avoid guessing the witness version as mentioned. Although re: terminology, I've only ever seen redeemScript used to refer exclusively to P2SH, even the [bitcoincore.org segwit wallet dev guide](http://bitcoincore.org/en/segwit_wallet_dev/) refers to the witness redeem script as witnessScript only.",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345666863,345666863,
NicolasDorier,2017-11-21T02:34:47Z,"The fact that ""redeemScript"" can refer to all type of PS2SH*-P2WSH* redeems makes migration from P2SH to Segwit easier, as there is no additional fields to pass around that did not existed before.\n\nIn NBitcoin, there is a type called `ScriptCoin` which was used to represent a P2SH + Redeem. When I updated the library for  Segwit, I only needed to instruct my users that if they want to migrate ",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-345897851,345897851,
meshcollider,2017-11-23T07:06:04Z,"I've made the modification to include the witnessScript in a redeem script array in the case of P2SH-P2WSH, will squash those modification commits if that approach is acceptable",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-346543626,346543626,
meshcollider,2017-11-28T23:42:56Z,"Fixed, thanks @NicolasDorier \nSquashed fixups too",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-347702349,347702349,
NicolasDorier,2017-11-29T03:25:23Z,Code review ACK,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-347741428,347741428,
meshcollider,2017-12-12T22:50:54Z,Rebased and added the extra check as suggested by @NicolasDorier. That also fixed the unused OP_0 warning.,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-351221570,351221570,
NicolasDorier,2017-12-13T02:32:15Z,reACK,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-351262752,351262752,
ryanofsky,2017-12-13T16:17:32Z,"Should passing a redeem script array to signrawtransaction be possible with bitcoin-cli? It looks this might not work currently because the param does not have an entry in vRPCConvertParams. You might be able to work around this with something like:\n\n```c++\nif (redeem_script.isStr() && !IsHex(redeem_script.get_str())) {\n    redeem_script.read(redeem_script.get_str().substr());\n    RPCTyp",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-351440892,351440892,
ryanofsky,2017-12-18T14:09:31Z,This PR has two code review acks (from me and NicolasDorier) so maybe it is close to being merged. The remaining comments that haven't been responded to are minor and shouldn't hold this up.,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-352435455,352435455,
meshcollider,2017-12-19T23:12:33Z,"Addressed @ryanofsky feedback, thanks!",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-352915339,352915339,
meshcollider,2017-12-21T00:29:27Z,"Feedback addressed, fixup commits squashed into one cleanup commit",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-353222613,353222613,
meshcollider,2017-12-24T02:32:59Z,"Fixed @ryanofsky's comments, thanks :) Haven't tested CLI yet though",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-353761566,353761566,
meshcollider,2018-01-17T00:51:31Z,Rebased to fix merge conflict in rawtransactions.py,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-358157946,358157946,
sipa,2018-02-12T23:53:02Z,Concept ACK. Rebase/squash last commit?,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-365103590,365103590,
meshcollider,2018-02-13T08:10:11Z,@sipa done :),https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-365181850,365181850,
MarcoFalke,2018-08-25T16:35:17Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-415981158,415981158,
meshcollider,2018-10-15T05:49:21Z,"Closing this, replaced by #14481",https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-429716224,429716224,
Rspigler,2018-11-06T23:30:39Z,@fanquake This should be removed from 'In Progress' in 'Segwit' and https://github.com/bitcoin/bitcoin/pull/14481 perhaps added?,https://github.com/bitcoin/bitcoin/pull/11708#issuecomment-436447889,436447889,
jonasschnelli,2017-11-17T18:48:26Z,"Watch out with the indentation,... the `\""` result in one char. It may look unaligned in the source code but is aligned in the help output.",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r151760982,151760982,src/wallet/rpcwallet.cpp
jonasschnelli,2017-11-17T21:04:34Z,nit: replace 32 with `sizeof()`?,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r151789014,151789014,src/wallet/rpcwallet.cpp
jonasschnelli,2017-11-18T07:42:13Z,nit: the `whash.size()` should also go here... :P,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r151832181,151832181,src/wallet/rpcwallet.cpp
meshcollider,2017-11-18T07:52:49Z,"Heh missed that, thanks :P ",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r151832339,151832339,src/wallet/rpcwallet.cpp
NicolasDorier,2017-11-24T06:58:31Z,you are not using that anymore,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r152906089,152906089,src/rpc/rawtransaction.cpp
NicolasDorier,2017-11-24T06:58:37Z,you are not using that anymore,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r152906099,152906099,src/rpc/rawtransaction.cpp
NicolasDorier,2017-11-29T03:18:22Z,nit: check if the redeemScript[0] is the p2sh redeem.,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r153685355,153685355,test/functional/signrawtransactions.py
meshcollider,2017-12-12T22:49:57Z,Done,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r156518971,156518971,test/functional/signrawtransactions.py
ryanofsky,2017-12-13T16:58:08Z,"Not directly related to this PR, but seems like it might good to return an error if this condition is false instead of skipping validation of the redeemscript parameter.",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r156718884,156718884,src/rpc/rawtransaction.cpp
ryanofsky,2017-12-13T17:01:55Z,Maybe drop this line. It prevents get_str() below from throwing an exception if the wrong type is passed.,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r156719988,156719988,src/rpc/rawtransaction.cpp
ryanofsky,2017-12-13T17:22:00Z,"It might be good to explicitly say this will be an array for p2wsh and nested p2wsh outputs, a string for traditional p2sh outputs, and unset in other cases.",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r156725891,156725891,src/wallet/rpcwallet.cpp
ryanofsky,2017-12-13T17:43:17Z,"IIUC, this should never be false? Would be helpful to have a comment saying this, or else mentioning when it would be expected.",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r156731671,156731671,src/wallet/rpcwallet.cpp
promag,2017-12-19T23:19:33Z,"Missing error when not string or array? Suggestion (`scripts` is a vector of strings):\n```cpp\nif (rs.getType() == UniValue::VARR) {\n    for (auto r : rs.getValues()) {\n         scripts.push_back(r.get_str());\n    }\n} else {\n    scripts.push_back(rs.get_str());\n}\n```",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r157901984,157901984,src/rpc/rawtransaction.cpp
meshcollider,2017-12-20T00:44:39Z,"Nice idea, done, thanks :)",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r157913677,157913677,src/rpc/rawtransaction.cpp
meshcollider,2017-12-21T00:30:43Z,"This `redeemScript` parameter was being silently ignored until now, because scripts are not used by signrawtransaction if no keys are passed in (the internal wallet is used instead). New code returns an error instead of silently ignoring it, so it was removed.",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r158171159,158171159,test/functional/rawtransactions.py
ryanofsky,2017-12-21T15:49:43Z,Could use const reference to avoid string copy here (though there are more copies below anyway).,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r158310307,158310307,src/rpc/rawtransaction.cpp
ryanofsky,2017-12-21T15:51:23Z,Could use const auto& to avoid univalue copies,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r158310778,158310778,src/rpc/rawtransaction.cpp
ryanofsky,2017-12-21T16:00:19Z,Maybe s/should not accept/don't currently support accepting/. This seems more like a reasonable limitation of the current implementation than a desirable feature of it.,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r158313209,158313209,src/rpc/rawtransaction.cpp
luke-jr,2018-03-07T16:47:01Z,"IIRC, Pair push_backs were just cleaned up... :/",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r172907581,172907581,src/wallet/rpcwallet.cpp
meshcollider,2018-03-08T14:16:47Z,"Yes, this needs a large rebase and cleanup anyway now signrawtransaction was split up, things like this will be done at the same time when I get onto this",https://github.com/bitcoin/bitcoin/pull/11708#discussion_r173169372,173169372,src/wallet/rpcwallet.cpp
luke-jr,2018-03-12T18:09:03Z,Is there a reason to break the API here? Why not add a new key for the witnessScript?,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r173895182,173895182,doc/release-notes.md
meshcollider,2018-03-12T23:13:46Z,The API only breaks in the case of P2SH-P2WSH which was not supported at all before anyway. Adding a new key for witnessScript to listunspent would make its output incompatible with the signrawtransaction input which expects a list of scripts in this case,https://github.com/bitcoin/bitcoin/pull/11708#discussion_r173975419,173975419,doc/release-notes.md
practicalswift,2018-09-02T18:25:47Z,Typo found by `codespell`: “isnt” should be “isn’t” or “is not” :-),https://github.com/bitcoin/bitcoin/pull/11708#discussion_r214549024,214549024,src/rpc/rawtransaction.cpp
