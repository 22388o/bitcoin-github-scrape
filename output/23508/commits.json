[
  {
    "sha": "d22859bac1e802cdb125f2dc0e53ac78abc63592",
    "node_id": "C_kwDOABII59oAKGQyMjg1OWJhYzFlODAyY2RiMTI1ZjJkYzBlNTNhYzc4YWJjNjM1OTI",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-11T20:17:48Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-14T12:56:56Z"
      },
      "message": "rpc/blockchain: move softfork info from getblockchaininfo to new getdeploymentinfo RPC",
      "tree": {
        "sha": "17d4cae2bf28883499172f5e3ef1e6104a1409af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/17d4cae2bf28883499172f5e3ef1e6104a1409af"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d22859bac1e802cdb125f2dc0e53ac78abc63592",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d22859bac1e802cdb125f2dc0e53ac78abc63592",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d22859bac1e802cdb125f2dc0e53ac78abc63592",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d22859bac1e802cdb125f2dc0e53ac78abc63592/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5cc083cd46ad71510f56af957e2e8733c388c6f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5cc083cd46ad71510f56af957e2e8733c388c6f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5cc083cd46ad71510f56af957e2e8733c388c6f1"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 68,
      "deletions": 45
    },
    "files": [
      {
        "sha": "bb6d43cbdf7fc32ce3823e6e9e33ae572ada498e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 38,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d22859bac1e802cdb125f2dc0e53ac78abc63592/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d22859bac1e802cdb125f2dc0e53ac78abc63592/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "patch": "@@ -1375,7 +1375,7 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"buried\");\n-    // getblockchaininfo reports the softfork as active from when the chain height is\n+    // getdeploymentinfo reports the softfork as active from when the chain height is\n     // one below the activation height\n     rv.pushKV(\"active\", DeploymentActiveAfter(active_chain_tip, params, dep));\n     rv.pushKV(\"height\", params.DeploymentHeight(dep));\n@@ -1430,6 +1430,7 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n     softforks.pushKV(DeploymentName(id), rv);\n }\n \n+// used by rest.cpp:rest_chaininfo, so cannot be static\n RPCHelpMan getblockchaininfo()\n {\n     return RPCHelpMan{\"getblockchaininfo\",\n@@ -1453,32 +1454,6 @@ RPCHelpMan getblockchaininfo()\n                         {RPCResult::Type::NUM, \"pruneheight\", /* optional */ true, \"lowest-height complete block stored (only present if pruning is enabled)\"},\n                         {RPCResult::Type::BOOL, \"automatic_pruning\", /* optional */ true, \"whether automatic pruning is enabled (only present if pruning is enabled)\"},\n                         {RPCResult::Type::NUM, \"prune_target_size\", /* optional */ true, \"the target size used by pruning (only present if automatic pruning is enabled)\"},\n-                        {RPCResult::Type::OBJ_DYN, \"softforks\", \"status of softforks\",\n-                        {\n-                            {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n-                            {\n-                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n-                                {RPCResult::Type::OBJ, \"bip9\", /* optional */ true, \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n-                                {\n-                                    {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n-                                    {RPCResult::Type::NUM, \"bit\", /* optional */ true, \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\"},\n-                                    {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n-                                    {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n-                                    {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n-                                    {RPCResult::Type::NUM, \"min_activation_height\", \"minimum height of blocks for which the rules may be enforced\"},\n-                                    {RPCResult::Type::OBJ, \"statistics\", /* optional */ true, \"numeric statistics about signalling for a softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\",\n-                                    {\n-                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the signalling period\"},\n-                                        {RPCResult::Type::NUM, \"threshold\", /* optional */ true, \"the number of blocks with the version bit set required to activate the feature (only for \\\"started\\\" status)\"},\n-                                        {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n-                                        {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n-                                        {RPCResult::Type::BOOL, \"possible\", /* optional */ true, \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n-                                    }},\n-                                }},\n-                                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n-                                {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n-                            }},\n-                        }},\n                         {RPCResult::Type::STR, \"warnings\", \"any network and blockchain warnings\"},\n                     }},\n                 RPCExamples{\n@@ -1524,23 +1499,65 @@ RPCHelpMan getblockchaininfo()\n         }\n     }\n \n-    const Consensus::Params& consensusParams = Params().GetConsensus();\n-    UniValue softforks(UniValue::VOBJ);\n-    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n-    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n-    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);\n-    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CSV);\n-    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n-    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n-    SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n-    obj.pushKV(\"softforks\", softforks);\n-\n     obj.pushKV(\"warnings\", GetWarnings(false).original);\n     return obj;\n },\n     };\n }\n \n+static RPCHelpMan getdeploymentinfo()\n+{\n+    return RPCHelpMan{\"getdeploymentinfo\",\n+        \"Returns an object containing various state info regarding soft-forks.\\n\",\n+        {},\n+        RPCResult{\n+                            RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n+                            {\n+                                {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n+                                {RPCResult::Type::OBJ, \"bip9\", /* optional */ true, \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n+                                {\n+                                    {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n+                                    {RPCResult::Type::NUM, \"bit\", /* optional */ true, \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\"},\n+                                    {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n+                                    {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n+                                    {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n+                                    {RPCResult::Type::NUM, \"min_activation_height\", \"minimum height of blocks for which the rules may be enforced\"},\n+                                    {RPCResult::Type::OBJ, \"statistics\", /* optional */ true, \"numeric statistics about signalling for a softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\",\n+                                    {\n+                                        {RPCResult::Type::NUM, \"period\", \"the length in blocks of the signalling period\"},\n+                                        {RPCResult::Type::NUM, \"threshold\", /* optional */ true, \"the number of blocks with the version bit set required to activate the feature (only for \\\"started\\\" status)\"},\n+                                        {RPCResult::Type::NUM, \"elapsed\", \"the number of blocks elapsed since the beginning of the current period\"},\n+                                        {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n+                                        {RPCResult::Type::BOOL, \"possible\", /* optional */ true, \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n+                                    }},\n+                                }},\n+                                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n+                            }},\n+        RPCExamples{ HelpExampleCli(\"getdeploymentinfo\", \"\") + HelpExampleRpc(\"getdeploymentinfo\", \"\") },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+        {\n+            ChainstateManager& chainman = EnsureAnyChainman(request.context);\n+            LOCK(cs_main);\n+            CChainState& active_chainstate = chainman.ActiveChainstate();\n+\n+            const CBlockIndex* tip = active_chainstate.m_chain.Tip();\n+            CHECK_NONFATAL(tip);\n+            const Consensus::Params& consensusParams = Params().GetConsensus();\n+            UniValue softforks(UniValue::VOBJ);\n+            SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n+            SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n+            SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);\n+            SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CSV);\n+            SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_SEGWIT);\n+            SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TESTDUMMY);\n+            SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_TAPROOT);\n+\n+            return softforks;\n+        },\n+    };\n+}\n+\n /** Comparison function for sorting the getchaintips heads.  */\n struct CompareBlocksByHeight\n {\n@@ -2664,6 +2681,7 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         &getblockheader,                     },\n     { \"blockchain\",         &getchaintips,                       },\n     { \"blockchain\",         &getdifficulty,                      },\n+    { \"blockchain\",         &getdeploymentinfo,                  },\n     { \"blockchain\",         &getmempoolancestors,                },\n     { \"blockchain\",         &getmempooldescendants,              },\n     { \"blockchain\",         &getmempoolentry,                    },"
      },
      {
        "sha": "ec245d16c050c229572d08a33afae3f7fe2cfc73",
        "filename": "src/test/fuzz/rpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d22859bac1e802cdb125f2dc0e53ac78abc63592/src/test/fuzz/rpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d22859bac1e802cdb125f2dc0e53ac78abc63592/src/test/fuzz/rpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/rpc.cpp?ref=d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "patch": "@@ -115,6 +115,7 @@ const std::vector<std::string> RPC_COMMANDS_SAFE_FOR_FUZZING{\n     \"getchaintips\",\n     \"getchaintxstats\",\n     \"getconnectioncount\",\n+    \"getdeploymentinfo\",\n     \"getdescriptorinfo\",\n     \"getdifficulty\",\n     \"getindexinfo\","
      },
      {
        "sha": "6c0ebef6ef9f7409fe0541d533ef83fd85d4882b",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "patch": "@@ -91,7 +91,7 @@ def set_test_params(self):\n         self.rpc_timeout = 480\n \n     def test_cltv_info(self, *, is_active):\n-        assert_equal(self.nodes[0].getblockchaininfo()['softforks']['bip65'], {\n+        assert_equal(self.nodes[0].getdeploymentinfo()['bip65'], {\n                 \"active\": is_active,\n                 \"height\": CLTV_HEIGHT,\n                 \"type\": \"buried\","
      },
      {
        "sha": "9a504f21d3e524da0c42fec5b1ff7d54a2afd626",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "patch": "@@ -60,7 +60,7 @@ def create_tx(self, input_txid):\n         return self.miniwallet.create_self_transfer(from_node=self.nodes[0], utxo_to_spend=utxo_to_spend)['tx']\n \n     def test_dersig_info(self, *, is_active):\n-        assert_equal(self.nodes[0].getblockchaininfo()['softforks']['bip66'],\n+        assert_equal(self.nodes[0].getdeploymentinfo()['bip66'],\n             {\n                 \"active\": is_active,\n                 \"height\": DERSIG_HEIGHT,"
      },
      {
        "sha": "b8d327cff73b835964a8eed4e768d42064f16e97",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "patch": "@@ -68,6 +68,7 @@ def run_test(self):\n         self.restart_node(0, extra_args=['-stopatheight=207', '-prune=1'])  # Set extra args with pruning after rescan is complete\n \n         self._test_getblockchaininfo()\n+        self._test_getdeploymentinfo()\n         self._test_getchaintxstats()\n         self._test_gettxoutsetinfo()\n         self._test_getblockheader()\n@@ -99,7 +100,6 @@ def _test_getblockchaininfo(self):\n             'mediantime',\n             'pruned',\n             'size_on_disk',\n-            'softforks',\n             'time',\n             'verificationprogress',\n             'warnings',\n@@ -161,7 +161,11 @@ def _test_getblockchaininfo(self):\n         assert_equal(res['prune_target_size'], 576716800)\n         assert_greater_than(res['size_on_disk'], 0)\n \n-        assert_equal(res['softforks'], {\n+    def _test_getdeploymentinfo(self):\n+        self.log.info(\"Test getdeploymentinfo\")\n+\n+        res = self.nodes[0].getdeploymentinfo()\n+        assert_equal(res, {\n             'bip34': {'type': 'buried', 'active': True, 'height': 2},\n             'bip66': {'type': 'buried', 'active': True, 'height': 3},\n             'bip65': {'type': 'buried', 'active': True, 'height': 4},"
      },
      {
        "sha": "143fdd8baf08751b39fc503a78b39f65e435a134",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "patch": "@@ -271,7 +271,7 @@ def test_signing_with_csv(self):\n         getcontext().prec = 8\n \n         # Make sure CSV is active\n-        assert self.nodes[0].getblockchaininfo()['softforks']['csv']['active']\n+        assert self.nodes[0].getdeploymentinfo()['csv']['active']\n \n         # Create a P2WSH script with CSV\n         script = CScript([1, OP_CHECKSEQUENCEVERIFY, OP_DROP])\n@@ -306,7 +306,7 @@ def test_signing_with_cltv(self):\n         getcontext().prec = 8\n \n         # Make sure CLTV is active\n-        assert self.nodes[0].getblockchaininfo()['softforks']['bip65']['active']\n+        assert self.nodes[0].getdeploymentinfo()['bip65']['active']\n \n         # Create a P2WSH script with CLTV\n         script = CScript([100, OP_CHECKLOCKTIMEVERIFY, OP_DROP])"
      },
      {
        "sha": "c9d31ebbd422a4fa5a3c14c558824b8d25533f9f",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d22859bac1e802cdb125f2dc0e53ac78abc63592/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "patch": "@@ -437,7 +437,7 @@ def delete_cookie_file(datadir, chain):\n \n def softfork_active(node, key):\n     \"\"\"Return whether a softfork is active.\"\"\"\n-    return node.getblockchaininfo()['softforks'][key]['active']\n+    return node.getdeploymentinfo()[key]['active']\n \n \n def set_node_times(nodes, t):"
      }
    ]
  },
  {
    "sha": "c56f70fb3c068cab23eac2fd116aef05e177d83c",
    "node_id": "C_kwDOABII59oAKGM1NmY3MGZiM2MwNjhjYWIyM2VhYzJmZDExNmFlZjA1ZTE3N2Q4M2M",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-11T21:56:12Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-14T12:57:19Z"
      },
      "message": "rpc/blockchain.cpp: allow specifying a blockhash other than tip for getdeploymentinfo",
      "tree": {
        "sha": "3c66d232faa08ce685c4e4a29d0b6141e321554f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c66d232faa08ce685c4e4a29d0b6141e321554f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c56f70fb3c068cab23eac2fd116aef05e177d83c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c56f70fb3c068cab23eac2fd116aef05e177d83c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c56f70fb3c068cab23eac2fd116aef05e177d83c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c56f70fb3c068cab23eac2fd116aef05e177d83c/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d22859bac1e802cdb125f2dc0e53ac78abc63592",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d22859bac1e802cdb125f2dc0e53ac78abc63592"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 15,
      "deletions": 3
    },
    "files": [
      {
        "sha": "18551224264c9121d156773da311669ba4e747f8",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c56f70fb3c068cab23eac2fd116aef05e177d83c/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c56f70fb3c068cab23eac2fd116aef05e177d83c/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=c56f70fb3c068cab23eac2fd116aef05e177d83c",
        "patch": "@@ -1509,7 +1509,9 @@ static RPCHelpMan getdeploymentinfo()\n {\n     return RPCHelpMan{\"getdeploymentinfo\",\n         \"Returns an object containing various state info regarding soft-forks.\\n\",\n-        {},\n+        {\n+            {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Default{\"chain tip\"}, \"The block hash at which to query fork state\"},\n+        },\n         RPCResult{\n                             RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n@@ -1541,8 +1543,18 @@ static RPCHelpMan getdeploymentinfo()\n             LOCK(cs_main);\n             CChainState& active_chainstate = chainman.ActiveChainstate();\n \n-            const CBlockIndex* tip = active_chainstate.m_chain.Tip();\n-            CHECK_NONFATAL(tip);\n+            const CBlockIndex* tip;\n+            if (request.params[0].isNull()) {\n+                tip = active_chainstate.m_chain.Tip();\n+                CHECK_NONFATAL(tip);\n+            } else {\n+                uint256 hash(ParseHashV(request.params[0], \"blockhash\"));\n+                tip = chainman.m_blockman.LookupBlockIndex(hash);\n+                if (!tip) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+                }\n+            }\n+\n             const Consensus::Params& consensusParams = Params().GetConsensus();\n             UniValue softforks(UniValue::VOBJ);\n             SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);"
      }
    ]
  },
  {
    "sha": "bc4f89cd77dfbae4788599aa2c674ec619975141",
    "node_id": "C_kwDOABII59oAKGJjNGY4OWNkNzdkZmJhZTQ3ODg1OTlhYTJjNjc0ZWM2MTk5NzUxNDE",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-13T21:55:34Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-14T12:57:38Z"
      },
      "message": "rpc/blockchain: change getdeploymentinfo statistics to always refer to current period\n\nOn a period boundary, getdeploymentinfo (and previously getblockchaininfo)\nwould report the status and statistics for the next block rather than\nthe current block. Change this to always report the status/statistics\nof the current block, but add status-next to report the status for the\nnext block.",
      "tree": {
        "sha": "49487698ef657da3b7bf7a691b3dd6ca20120192",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49487698ef657da3b7bf7a691b3dd6ca20120192"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc4f89cd77dfbae4788599aa2c674ec619975141",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4f89cd77dfbae4788599aa2c674ec619975141",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4f89cd77dfbae4788599aa2c674ec619975141",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4f89cd77dfbae4788599aa2c674ec619975141/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c56f70fb3c068cab23eac2fd116aef05e177d83c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c56f70fb3c068cab23eac2fd116aef05e177d83c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c56f70fb3c068cab23eac2fd116aef05e177d83c"
      }
    ],
    "stats": {
      "total": 112,
      "additions": 66,
      "deletions": 46
    },
    "files": [
      {
        "sha": "1c0ee0b6995dc2cc593ad5412cbaebd321e14a14",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 21,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4f89cd77dfbae4788599aa2c674ec619975141/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4f89cd77dfbae4788599aa2c674ec619975141/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=bc4f89cd77dfbae4788599aa2c674ec619975141",
        "patch": "@@ -1387,45 +1387,60 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n     // For BIP9 deployments.\n \n     if (!DeploymentEnabled(consensusParams, id)) return;\n+    if (active_chain_tip == nullptr) return;\n+\n+    auto get_state_name = [](const ThresholdState state) -> std::string {\n+        switch (state) {\n+        case ThresholdState::DEFINED: return \"defined\";\n+        case ThresholdState::STARTED: return \"started\";\n+        case ThresholdState::LOCKED_IN: return \"locked_in\";\n+        case ThresholdState::ACTIVE: return \"active\";\n+        case ThresholdState::FAILED: return \"failed\";\n+        }\n+        return \"invalid\";\n+    };\n \n     UniValue bip9(UniValue::VOBJ);\n-    const ThresholdState thresholdState = g_versionbitscache.State(active_chain_tip, consensusParams, id);\n-    switch (thresholdState) {\n-    case ThresholdState::DEFINED: bip9.pushKV(\"status\", \"defined\"); break;\n-    case ThresholdState::STARTED: bip9.pushKV(\"status\", \"started\"); break;\n-    case ThresholdState::LOCKED_IN: bip9.pushKV(\"status\", \"locked_in\"); break;\n-    case ThresholdState::ACTIVE: bip9.pushKV(\"status\", \"active\"); break;\n-    case ThresholdState::FAILED: bip9.pushKV(\"status\", \"failed\"); break;\n-    }\n-    const bool has_signal = (ThresholdState::STARTED == thresholdState || ThresholdState::LOCKED_IN == thresholdState);\n+\n+    const ThresholdState next_state = g_versionbitscache.State(active_chain_tip, consensusParams, id);\n+    const ThresholdState current_state = g_versionbitscache.State(active_chain_tip->pprev, consensusParams, id);\n+\n+    const bool has_signal = (ThresholdState::STARTED == current_state || ThresholdState::LOCKED_IN == current_state);\n+\n+    // BIP9 parameters\n     if (has_signal) {\n         bip9.pushKV(\"bit\", consensusParams.vDeployments[id].bit);\n     }\n     bip9.pushKV(\"start_time\", consensusParams.vDeployments[id].nStartTime);\n     bip9.pushKV(\"timeout\", consensusParams.vDeployments[id].nTimeout);\n-    int64_t since_height = g_versionbitscache.StateSinceHeight(active_chain_tip, consensusParams, id);\n-    bip9.pushKV(\"since\", since_height);\n+    bip9.pushKV(\"since\", g_versionbitscache.StateSinceHeight(active_chain_tip->pprev, consensusParams, id));\n+    bip9.pushKV(\"min_activation_height\", consensusParams.vDeployments[id].min_activation_height);\n+\n+    // BIP9 status\n+    bip9.pushKV(\"status\", get_state_name(current_state));\n+    bip9.pushKV(\"status-next\", get_state_name(next_state));\n+\n+    // BIP9 signalling status, if applicable\n     if (has_signal) {\n         UniValue statsUV(UniValue::VOBJ);\n         BIP9Stats statsStruct = g_versionbitscache.Statistics(active_chain_tip, consensusParams, id);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n-        if (ThresholdState::LOCKED_IN != thresholdState) {\n+        if (ThresholdState::LOCKED_IN != current_state) {\n             statsUV.pushKV(\"threshold\", statsStruct.threshold);\n             statsUV.pushKV(\"possible\", statsStruct.possible);\n         }\n         bip9.pushKV(\"statistics\", statsUV);\n     }\n-    bip9.pushKV(\"min_activation_height\", consensusParams.vDeployments[id].min_activation_height);\n \n     UniValue rv(UniValue::VOBJ);\n     rv.pushKV(\"type\", \"bip9\");\n-    rv.pushKV(\"bip9\", bip9);\n-    if (ThresholdState::ACTIVE == thresholdState) {\n-        rv.pushKV(\"height\", since_height);\n+    if (ThresholdState::ACTIVE == next_state) {\n+        rv.pushKV(\"height\", g_versionbitscache.StateSinceHeight(active_chain_tip, consensusParams, id));\n     }\n-    rv.pushKV(\"active\", ThresholdState::ACTIVE == thresholdState);\n+    rv.pushKV(\"active\", ThresholdState::ACTIVE == next_state);\n+    rv.pushKV(\"bip9\", bip9);\n \n     softforks.pushKV(DeploymentName(id), rv);\n }\n@@ -1516,14 +1531,17 @@ static RPCHelpMan getdeploymentinfo()\n                             RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n                                 {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n+                                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n+                                {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n                                 {RPCResult::Type::OBJ, \"bip9\", /* optional */ true, \"status of bip9 softforks (only for \\\"bip9\\\" type)\",\n                                 {\n-                                    {RPCResult::Type::STR, \"status\", \"one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\"},\n                                     {RPCResult::Type::NUM, \"bit\", /* optional */ true, \"the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\"},\n                                     {RPCResult::Type::NUM_TIME, \"start_time\", \"the minimum median time past of a block at which the bit gains its meaning\"},\n                                     {RPCResult::Type::NUM_TIME, \"timeout\", \"the median time past of a block at which the deployment is considered failed if not yet locked in\"},\n-                                    {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n                                     {RPCResult::Type::NUM, \"min_activation_height\", \"minimum height of blocks for which the rules may be enforced\"},\n+                                    {RPCResult::Type::STR, \"status\", \"bip9 status of specified block (one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\")\"},\n+                                    {RPCResult::Type::NUM, \"since\", \"height of the first block to which the status applies\"},\n+                                    {RPCResult::Type::STR, \"status-next\", \"bip9 status of next block\"},\n                                     {RPCResult::Type::OBJ, \"statistics\", /* optional */ true, \"numeric statistics about signalling for a softfork (only for \\\"started\\\" and \\\"locked_in\\\" status)\",\n                                     {\n                                         {RPCResult::Type::NUM, \"period\", \"the length in blocks of the signalling period\"},\n@@ -1533,8 +1551,6 @@ static RPCHelpMan getdeploymentinfo()\n                                         {RPCResult::Type::BOOL, \"possible\", /* optional */ true, \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n                                     }},\n                                 }},\n-                                {RPCResult::Type::NUM, \"height\", /* optional */ true, \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n-                                {RPCResult::Type::BOOL, \"active\", \"true if the rules are enforced for the mempool and the next block\"},\n                             }},\n         RPCExamples{ HelpExampleCli(\"getdeploymentinfo\", \"\") + HelpExampleRpc(\"getdeploymentinfo\", \"\") },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue"
      },
      {
        "sha": "4bcc07602a7fd3f706c9b6179cb8781090ef10c0",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4f89cd77dfbae4788599aa2c674ec619975141/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4f89cd77dfbae4788599aa2c674ec619975141/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=bc4f89cd77dfbae4788599aa2c674ec619975141",
        "patch": "@@ -51,7 +51,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, dummy_params, m_cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, dummy_params, m_cache); }\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindexPrev, dummy_params); }\n+    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindex, dummy_params); }\n \n     bool Condition(int32_t version) const\n     {\n@@ -220,7 +220,13 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     CBlockIndex* prev = blocks.tip();\n     const int exp_since = checker.GetStateSinceHeightFor(prev);\n     const ThresholdState exp_state = checker.GetStateFor(prev);\n-    BIP9Stats last_stats = checker.GetStateStatisticsFor(prev);\n+\n+    // get statistics from end of previous period, then reset\n+    BIP9Stats last_stats;\n+    last_stats.period = period;\n+    last_stats.threshold = threshold;\n+    last_stats.count = last_stats.elapsed = 0;\n+    last_stats.possible = (period >= threshold);\n \n     int prev_next_height = (prev == nullptr ? 0 : prev->nHeight + 1);\n     assert(exp_since <= prev_next_height);\n@@ -241,9 +247,6 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n         assert(state == exp_state);\n         assert(since == exp_since);\n \n-        // GetStateStatistics may crash when state is not STARTED\n-        if (state != ThresholdState::STARTED) continue;\n-\n         // check that after mining this block stats change as expected\n         const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n         assert(stats.period == period);\n@@ -265,14 +268,12 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     CBlockIndex* current_block = blocks.mine_block(signal);\n     assert(checker.Condition(current_block) == signal);\n \n-    // GetStateStatistics is safe on a period boundary\n-    // and has progressed to a new period\n     const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n     assert(stats.period == period);\n     assert(stats.threshold == threshold);\n-    assert(stats.elapsed == 0);\n-    assert(stats.count == 0);\n-    assert(stats.possible == true);\n+    assert(stats.elapsed == period);\n+    assert(stats.count == blocks_sig);\n+    assert(stats.possible == (stats.count + period >= stats.elapsed + threshold));\n \n     // More interesting is whether the state changed.\n     const ThresholdState state = checker.GetStateFor(current_block);"
      },
      {
        "sha": "f8945b78b3ca6db319808b23bf753e1c52ed1ce2",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4f89cd77dfbae4788599aa2c674ec619975141/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4f89cd77dfbae4788599aa2c674ec619975141/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=bc4f89cd77dfbae4788599aa2c674ec619975141",
        "patch": "@@ -105,22 +105,23 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n     stats.period = Period(params);\n     stats.threshold = Threshold(params);\n \n-    if (pindex == nullptr)\n-        return stats;\n+    if (pindex == nullptr) return stats;\n \n     // Find beginning of period\n-    const CBlockIndex* pindexEndOfPrevPeriod = pindex->GetAncestor(pindex->nHeight - ((pindex->nHeight + 1) % stats.period));\n-    stats.elapsed = pindex->nHeight - pindexEndOfPrevPeriod->nHeight;\n+    int start_height = pindex->nHeight - (pindex->nHeight % stats.period);\n \n     // Count from current block to beginning of period\n+    int elapsed = 0;\n     int count = 0;\n     const CBlockIndex* currentIndex = pindex;\n-    while (pindexEndOfPrevPeriod->nHeight != currentIndex->nHeight){\n-        if (Condition(currentIndex, params))\n-            count++;\n+    for(;;) {\n+        ++elapsed;\n+        if (Condition(currentIndex, params)) ++count;\n+        if (currentIndex->nHeight <= start_height) break;\n         currentIndex = currentIndex->pprev;\n     }\n \n+    stats.elapsed = elapsed;\n     stats.count = count;\n     stats.possible = (stats.period - stats.threshold ) >= (stats.elapsed - count);\n \n@@ -196,9 +197,9 @@ ThresholdState VersionBitsCache::State(const CBlockIndex* pindexPrev, const Cons\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n }\n \n-BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n-    return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindexPrev, params);\n+    return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindex, params);\n }\n \n int VersionBitsCache::StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)"
      },
      {
        "sha": "34fba47b5f75d83827d047dd130b4f7147dfc366",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4f89cd77dfbae4788599aa2c674ec619975141/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4f89cd77dfbae4788599aa2c674ec619975141/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=bc4f89cd77dfbae4788599aa2c674ec619975141",
        "patch": "@@ -64,7 +64,7 @@ class AbstractThresholdConditionChecker {\n     virtual int Threshold(const Consensus::Params& params) const =0;\n \n public:\n-    /** Returns the numerical statistics of an in-progress BIP9 softfork in the current period */\n+    /** Returns the numerical statistics of an in-progress BIP9 softfork in the period including pindex */\n     BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n     /** Returns the state for pindex A based on parent pindexPrev B. Applies any state transition if conditions are present.\n      *  Caches state from first block of period. */\n@@ -82,8 +82,8 @@ class VersionBitsCache\n     ThresholdConditionCache m_caches[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] GUARDED_BY(m_mutex);\n \n public:\n-    /** Get the numerical statistics for a given deployment for the signalling period that includes the block after pindexPrev. */\n-    static BIP9Stats Statistics(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+    /** Get the numerical statistics for a given deployment for the signalling period that includes pindex. */\n+    static BIP9Stats Statistics(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n     static uint32_t Mask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      },
      {
        "sha": "040563568429ba82a8963f3cf0bdc138de82fff1",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4f89cd77dfbae4788599aa2c674ec619975141/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4f89cd77dfbae4788599aa2c674ec619975141/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=bc4f89cd77dfbae4788599aa2c674ec619975141",
        "patch": "@@ -174,10 +174,11 @@ def _test_getdeploymentinfo(self):\n             'testdummy': {\n                 'type': 'bip9',\n                 'bip9': {\n-                    'status': 'started',\n                     'bit': 28,\n                     'start_time': 0,\n                     'timeout': 0x7fffffffffffffff,  # testdummy does not have a timeout so is set to the max int64 value\n+                    'status': 'started',\n+                    'status-next': 'started',\n                     'since': 144,\n                     'statistics': {\n                         'period': 144,\n@@ -193,11 +194,12 @@ def _test_getdeploymentinfo(self):\n             'taproot': {\n                 'type': 'bip9',\n                 'bip9': {\n-                    'status': 'active',\n                     'start_time': -1,\n                     'timeout': 9223372036854775807,\n-                    'since': 0,\n                     'min_activation_height': 0,\n+                    'status': 'active',\n+                    'status-next': 'active',\n+                    'since': 0,\n                 },\n                 'height': 0,\n                 'active': True"
      }
    ]
  },
  {
    "sha": "35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
    "node_id": "C_kwDOABII59oAKDM1ZmE4MzRiNWNjNWI3NzI3ZTdlYzZlYmRjYThlNjQ3NDVhMjM2Yzg",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-13T22:44:40Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-14T13:00:37Z"
      },
      "message": "rpc/blockchain.cpp: include block info in getdeploymentinfo output",
      "tree": {
        "sha": "d8f5ba5c35fa52fecf1f6894456979930e641775",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8f5ba5c35fa52fecf1f6894456979930e641775"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc4f89cd77dfbae4788599aa2c674ec619975141",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4f89cd77dfbae4788599aa2c674ec619975141",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4f89cd77dfbae4788599aa2c674ec619975141"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 15,
      "deletions": 2
    },
    "files": [
      {
        "sha": "2dd9c00d227306a13eec7659bc5da1a02ebf2535",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
        "patch": "@@ -1527,8 +1527,13 @@ static RPCHelpMan getdeploymentinfo()\n         {\n             {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Default{\"chain tip\"}, \"The block hash at which to query fork state\"},\n         },\n-        RPCResult{\n-                            RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n+        RPCResult{RPCResult::Type::OBJ, \"\", \"\", {\n+                            {RPCResult::Type::OBJ, \"*\", \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"hash\", \"block hash\"},\n+                                {RPCResult::Type::NUM, \"height\", \"block height\"},\n+                            }},\n+                            {RPCResult::Type::OBJ, \"xxxx\", \"name of the softfork\",\n                             {\n                                 {RPCResult::Type::STR, \"type\", \"one of \\\"buried\\\", \\\"bip9\\\"\"},\n                                 {RPCResult::Type::NUM, \"height\", /* optional */ true, \"height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\"},\n@@ -1552,6 +1557,7 @@ static RPCHelpMan getdeploymentinfo()\n                                     }},\n                                 }},\n                             }},\n+        }},\n         RPCExamples{ HelpExampleCli(\"getdeploymentinfo\", \"\") + HelpExampleRpc(\"getdeploymentinfo\", \"\") },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n         {\n@@ -1573,6 +1579,11 @@ static RPCHelpMan getdeploymentinfo()\n \n             const Consensus::Params& consensusParams = Params().GetConsensus();\n             UniValue softforks(UniValue::VOBJ);\n+            UniValue blockinfo(UniValue::VOBJ);\n+            blockinfo.pushKV(\"hash\", tip->GetBlockHash().ToString());\n+            blockinfo.pushKV(\"height\", tip->nHeight);\n+            softforks.pushKV(\"*\", blockinfo);\n+\n             SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_HEIGHTINCB);\n             SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_DERSIG);\n             SoftForkDescPushBack(tip, softforks, consensusParams, Consensus::DEPLOYMENT_CLTV);"
      },
      {
        "sha": "8bd33cf37ec4b42eb4ee5cd007617baf6df4c8f1",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
        "patch": "@@ -164,8 +164,10 @@ def _test_getblockchaininfo(self):\n     def _test_getdeploymentinfo(self):\n         self.log.info(\"Test getdeploymentinfo\")\n \n+        gbci = self.nodes[0].getblockchaininfo()\n         res = self.nodes[0].getdeploymentinfo()\n         assert_equal(res, {\n+            '*': {'hash': gbci[\"bestblockhash\"], \"height\": gbci[\"blocks\"]},\n             'bip34': {'type': 'buried', 'active': True, 'height': 2},\n             'bip66': {'type': 'buried', 'active': True, 'height': 3},\n             'bip65': {'type': 'buried', 'active': True, 'height': 4},"
      }
    ]
  },
  {
    "sha": "684821c52b5894e0407bcbd853fa3e8323049e83",
    "node_id": "C_kwDOABII59oAKDY4NDgyMWM1MmI1ODk0ZTA0MDdiY2JkODUzZmEzZTgzMjMwNDllODM",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-11T21:14:21Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-11-14T13:00:45Z"
      },
      "message": "rpc/blockchain.cpp: include signalling info in getdeploymentinfo",
      "tree": {
        "sha": "1407f4c9eaa4f8c9d8c2ce4dd395f18c15592412",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1407f4c9eaa4f8c9d8c2ce4dd395f18c15592412"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/684821c52b5894e0407bcbd853fa3e8323049e83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/684821c52b5894e0407bcbd853fa3e8323049e83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/684821c52b5894e0407bcbd853fa3e8323049e83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/684821c52b5894e0407bcbd853fa3e8323049e83/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35fa834b5cc5b7727e7ec6ebdca8e64745a236c8"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 47,
      "deletions": 15
    },
    "files": [
      {
        "sha": "5b94a1c458b5903d2eea859d05e46fe5dd34609a",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/684821c52b5894e0407bcbd853fa3e8323049e83/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/684821c52b5894e0407bcbd853fa3e8323049e83/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=684821c52b5894e0407bcbd853fa3e8323049e83",
        "patch": "@@ -1423,7 +1423,8 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n     // BIP9 signalling status, if applicable\n     if (has_signal) {\n         UniValue statsUV(UniValue::VOBJ);\n-        BIP9Stats statsStruct = g_versionbitscache.Statistics(active_chain_tip, consensusParams, id);\n+        std::vector<bool> signals;\n+        BIP9Stats statsStruct = g_versionbitscache.Statistics(active_chain_tip, consensusParams, id, &signals);\n         statsUV.pushKV(\"period\", statsStruct.period);\n         statsUV.pushKV(\"elapsed\", statsStruct.elapsed);\n         statsUV.pushKV(\"count\", statsStruct.count);\n@@ -1432,6 +1433,13 @@ static void SoftForkDescPushBack(const CBlockIndex* active_chain_tip, UniValue&\n             statsUV.pushKV(\"possible\", statsStruct.possible);\n         }\n         bip9.pushKV(\"statistics\", statsUV);\n+\n+        std::string sig;\n+        sig.reserve(signals.size());\n+        for (const bool s : signals) {\n+            sig.push_back(s ? '#' : '-');\n+        }\n+        bip9.pushKV(\"signalling\", sig);\n     }\n \n     UniValue rv(UniValue::VOBJ);\n@@ -1555,6 +1563,7 @@ static RPCHelpMan getdeploymentinfo()\n                                         {RPCResult::Type::NUM, \"count\", \"the number of blocks with the version bit set in the current period\"},\n                                         {RPCResult::Type::BOOL, \"possible\", /* optional */ true, \"returns false if there are not enough blocks left in this period to pass activation threshold (only for \\\"started\\\" status)\"},\n                                     }},\n+                                    {RPCResult::Type::STR, \"signalling\", \"indicates blocks that signalled with a # and blocks that did not with a -\"},\n                                 }},\n                             }},\n         }},"
      },
      {
        "sha": "ec4375cfc9565ffdae6ad9891e41d7077e01b0be",
        "filename": "src/test/fuzz/versionbits.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/684821c52b5894e0407bcbd853fa3e8323049e83/src/test/fuzz/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/684821c52b5894e0407bcbd853fa3e8323049e83/src/test/fuzz/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/versionbits.cpp?ref=684821c52b5894e0407bcbd853fa3e8323049e83",
        "patch": "@@ -51,7 +51,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, dummy_params, m_cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, dummy_params, m_cache); }\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindex, dummy_params); }\n+    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, std::vector<bool>* signals=nullptr) const { return AbstractThresholdConditionChecker::GetStateStatisticsFor(pindex, dummy_params, signals); }\n \n     bool Condition(int32_t version) const\n     {\n@@ -227,6 +227,7 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n     last_stats.threshold = threshold;\n     last_stats.count = last_stats.elapsed = 0;\n     last_stats.possible = (period >= threshold);\n+    std::vector<bool> last_signals{};\n \n     int prev_next_height = (prev == nullptr ? 0 : prev->nHeight + 1);\n     assert(exp_since <= prev_next_height);\n@@ -248,13 +249,24 @@ FUZZ_TARGET_INIT(versionbits, initialize)\n         assert(since == exp_since);\n \n         // check that after mining this block stats change as expected\n-        const BIP9Stats stats = checker.GetStateStatisticsFor(current_block);\n+        std::vector<bool> signals;\n+        const BIP9Stats stats = checker.GetStateStatisticsFor(current_block, &signals);\n+        const BIP9Stats stats_no_signals = checker.GetStateStatisticsFor(current_block);\n+        assert(stats.period == stats_no_signals.period && stats.threshold == stats_no_signals.threshold\n+               && stats.elapsed == stats_no_signals.elapsed && stats.count == stats_no_signals.count\n+               && stats.possible == stats_no_signals.possible);\n+\n         assert(stats.period == period);\n         assert(stats.threshold == threshold);\n         assert(stats.elapsed == b);\n         assert(stats.count == last_stats.count + (signal ? 1 : 0));\n         assert(stats.possible == (stats.count + period >= stats.elapsed + threshold));\n         last_stats = stats;\n+\n+        assert(signals.size() == last_signals.size() + 1);\n+        assert(signals.back() == signal);\n+        last_signals.push_back(signal);\n+        assert(signals == last_signals);\n     }\n \n     if (exp_state == ThresholdState::STARTED) {"
      },
      {
        "sha": "c6752dcc763eef7bd65460b88d9ce3ddfeb65f71",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 8,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/684821c52b5894e0407bcbd853fa3e8323049e83/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/684821c52b5894e0407bcbd853fa3e8323049e83/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=684821c52b5894e0407bcbd853fa3e8323049e83",
        "patch": "@@ -98,7 +98,7 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n-BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const\n+BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params, std::vector<bool>* signals) const\n {\n     BIP9Stats stats = {};\n \n@@ -108,18 +108,26 @@ BIP9Stats AbstractThresholdConditionChecker::GetStateStatisticsFor(const CBlockI\n     if (pindex == nullptr) return stats;\n \n     // Find beginning of period\n-    int start_height = pindex->nHeight - (pindex->nHeight % stats.period);\n+    int blocks_in_period = 1 + (pindex->nHeight % stats.period);\n+\n+    // Reset signals\n+    if (signals) {\n+        signals->assign(blocks_in_period, false);\n+    }\n \n     // Count from current block to beginning of period\n     int elapsed = 0;\n     int count = 0;\n     const CBlockIndex* currentIndex = pindex;\n-    for(;;) {\n+    do {\n         ++elapsed;\n-        if (Condition(currentIndex, params)) ++count;\n-        if (currentIndex->nHeight <= start_height) break;\n+        --blocks_in_period;\n+        if (Condition(currentIndex, params)) {\n+            ++count;\n+            if (signals) signals->at(blocks_in_period) = true;\n+        }\n         currentIndex = currentIndex->pprev;\n-    }\n+    } while(blocks_in_period > 0);\n \n     stats.elapsed = elapsed;\n     stats.count = count;\n@@ -197,9 +205,9 @@ ThresholdState VersionBitsCache::State(const CBlockIndex* pindexPrev, const Cons\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, m_caches[pos]);\n }\n \n-BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::DeploymentPos pos)\n+BIP9Stats VersionBitsCache::Statistics(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::DeploymentPos pos, std::vector<bool>* signals)\n {\n-    return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindex, params);\n+    return VersionBitsConditionChecker(pos).GetStateStatisticsFor(pindex, params, signals);\n }\n \n int VersionBitsCache::StateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos)"
      },
      {
        "sha": "bd0d14183e4fa41bd83cd0b7b13807fcbf910d97",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/684821c52b5894e0407bcbd853fa3e8323049e83/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/684821c52b5894e0407bcbd853fa3e8323049e83/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=684821c52b5894e0407bcbd853fa3e8323049e83",
        "patch": "@@ -64,8 +64,10 @@ class AbstractThresholdConditionChecker {\n     virtual int Threshold(const Consensus::Params& params) const =0;\n \n public:\n-    /** Returns the numerical statistics of an in-progress BIP9 softfork in the period including pindex */\n-    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params) const;\n+    /** Returns the numerical statistics of an in-progress BIP9 softfork in the period including pindex\n+     * If provided, signals is set to true/false based on whether each block in the period signalled\n+     */\n+    BIP9Stats GetStateStatisticsFor(const CBlockIndex* pindex, const Consensus::Params& params, std::vector<bool>* signals = nullptr) const;\n     /** Returns the state for pindex A based on parent pindexPrev B. Applies any state transition if conditions are present.\n      *  Caches state from first block of period. */\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n@@ -83,7 +85,7 @@ class VersionBitsCache\n \n public:\n     /** Get the numerical statistics for a given deployment for the signalling period that includes pindex. */\n-    static BIP9Stats Statistics(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::DeploymentPos pos);\n+    static BIP9Stats Statistics(const CBlockIndex* pindex, const Consensus::Params& params, Consensus::DeploymentPos pos, std::vector<bool>* signals = nullptr);\n \n     static uint32_t Mask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n "
      },
      {
        "sha": "8ede8476eb7756418fc9b426d1033a479de6cdee",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/684821c52b5894e0407bcbd853fa3e8323049e83/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/684821c52b5894e0407bcbd853fa3e8323049e83/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=684821c52b5894e0407bcbd853fa3e8323049e83",
        "patch": "@@ -179,6 +179,7 @@ def _test_getdeploymentinfo(self):\n                     'bit': 28,\n                     'start_time': 0,\n                     'timeout': 0x7fffffffffffffff,  # testdummy does not have a timeout so is set to the max int64 value\n+                    'min_activation_height': 0,\n                     'status': 'started',\n                     'status-next': 'started',\n                     'since': 144,\n@@ -189,7 +190,7 @@ def _test_getdeploymentinfo(self):\n                         'count': HEIGHT - 143,\n                         'possible': True,\n                     },\n-                    'min_activation_height': 0,\n+                    'signalling': '#'*(HEIGHT-143),\n                 },\n                 'active': False\n             },"
      }
    ]
  }
]