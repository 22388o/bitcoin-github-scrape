[
  {
    "sha": "d45b344ffd46b0226449cbd46cdaff9577402cf0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDViMzQ0ZmZkNDZiMDIyNjQ0OWNiZDQ2Y2RhZmY5NTc3NDAyY2Yw",
    "commit": {
      "author": {
        "name": "Gleb",
        "email": "naumenko.gs@gmail.com",
        "date": "2018-05-21T19:02:40Z"
      },
      "committer": {
        "name": "User",
        "email": "naumenko.gs@gmail.com",
        "date": "2018-07-14T06:14:35Z"
      },
      "message": "Bucket for inbound when scheduling invs to hide tx time",
      "tree": {
        "sha": "0b23b028d113acce4c57faf3d8f931deba5436d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b23b028d113acce4c57faf3d8f931deba5436d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d45b344ffd46b0226449cbd46cdaff9577402cf0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45b344ffd46b0226449cbd46cdaff9577402cf0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d45b344ffd46b0226449cbd46cdaff9577402cf0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d45b344ffd46b0226449cbd46cdaff9577402cf0/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "287e4edc2fd2514a0095273f01fe66b85ce10856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/287e4edc2fd2514a0095273f01fe66b85ce10856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/287e4edc2fd2514a0095273f01fe66b85ce10856"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 45,
      "deletions": 19
    },
    "files": [
      {
        "sha": "12bdcb465abc87a48e21284a0fb92e927dc8d178",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d45b344ffd46b0226449cbd46cdaff9577402cf0",
        "patch": "@@ -2864,8 +2864,20 @@ bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n     return found != nullptr && NodeFullyConnected(found) && func(found);\n }\n \n-int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n-    return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n+int64_t CConnman::PoissonNextSendInbound(int64_t now, int average_interval_seconds)\n+{\n+    if (m_next_send_inv_to_incoming < now) {\n+        // If this function were called from multiple threads simultaneously\n+        // it would possible that both update the next send variable, and return a different result to their caller.\n+        // This is not possible in practice as only the net processing thread invokes this function.\n+        m_next_send_inv_to_incoming = PoissonNextSend(now, average_interval_seconds);\n+    }\n+    return m_next_send_inv_to_incoming;\n+}\n+\n+int64_t PoissonNextSend(int64_t now, int average_interval_seconds)\n+{\n+    return now + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n \n CSipHasher CConnman::GetDeterministicRandomizer(uint64_t id) const"
      },
      {
        "sha": "e5422011632fd066af80e265006635d8b6b6bb8a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d45b344ffd46b0226449cbd46cdaff9577402cf0",
        "patch": "@@ -310,6 +310,13 @@ class CConnman\n     unsigned int GetReceiveFloodSize() const;\n \n     void WakeMessageHandler();\n+\n+    /** Attempts to obfuscate tx time through exponentially distributed emitting.\n+        Works assuming that a single interval is used.\n+        Variable intervals will result in privacy decrease.\n+    */\n+    int64_t PoissonNextSendInbound(int64_t now, int average_interval_seconds);\n+\n private:\n     struct ListenSocket {\n         SOCKET socket;\n@@ -434,6 +441,8 @@ class CConnman\n      *  This takes the place of a feeler connection */\n     std::atomic_bool m_try_another_outbound_peer;\n \n+    std::atomic<int64_t> m_next_send_inv_to_incoming;\n+\n     friend struct CConnmanTest;\n };\n extern std::unique_ptr<CConnman> g_connman;\n@@ -863,6 +872,6 @@ class CNode\n \n \n /** Return a timestamp in the future (in microseconds) for exponentially distributed events. */\n-int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds);\n+int64_t PoissonNextSend(int64_t now, int average_interval_seconds);\n \n #endif // BITCOIN_NET_H"
      },
      {
        "sha": "473a4b8c5501b0b5507abcc8e15b7e90423fee4d",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 2,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=d45b344ffd46b0226449cbd46cdaff9577402cf0",
        "patch": "@@ -71,6 +71,21 @@ static const int STALE_RELAY_AGE_LIMIT = 30 * 24 * 60 * 60;\n /// limiting block relay. Set to one week, denominated in seconds.\n static const int HISTORICAL_BLOCK_AGE = 7 * 24 * 60 * 60;\n \n+/** Average delay between local address broadcasts in seconds. */\n+static constexpr unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 60 * 60;\n+/** Average delay between peer address broadcasts in seconds. */\n+static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n+/** Average delay between trickled inventory transmissions in seconds.\n+ *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n+static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n+/** Maximum number of inventory items to send per transmission.\n+ *  Limits the impact of low-fee transaction floods. */\n+static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n+/** Average delay between feefilter broadcasts in seconds. */\n+static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n+/** Maximum feefilter broadcast delay after significant change. */\n+static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+\n // Internal stuff\n namespace {\n     /** Number of nodes with fSyncStarted. */\n@@ -3496,8 +3511,12 @@ bool PeerLogicValidation::SendMessages(CNode* pto, std::atomic<bool>& interruptM\n             bool fSendTrickle = pto->fWhitelisted;\n             if (pto->nNextInvSend < nNow) {\n                 fSendTrickle = true;\n-                // Use half the delay for outbound peers, as there is less privacy concern for them.\n-                pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> !pto->fInbound);\n+                if (pto->fInbound) {\n+                    pto->nNextInvSend = connman->PoissonNextSendInbound(nNow, INVENTORY_BROADCAST_INTERVAL);\n+                } else {\n+                    // Use half the delay for outbound peers, as there is less privacy concern for them.\n+                    pto->nNextInvSend = PoissonNextSend(nNow, INVENTORY_BROADCAST_INTERVAL >> 1);\n+                }\n             }\n \n             // Time to send but the peer has requested we not relay transactions."
      },
      {
        "sha": "cd29083f216c35f24000674d2e09a96c58b34959",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d45b344ffd46b0226449cbd46cdaff9577402cf0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=d45b344ffd46b0226449cbd46cdaff9577402cf0",
        "patch": "@@ -104,20 +104,6 @@ static const unsigned int DATABASE_WRITE_INTERVAL = 60 * 60;\n static const unsigned int DATABASE_FLUSH_INTERVAL = 24 * 60 * 60;\n /** Maximum length of reject messages. */\n static const unsigned int MAX_REJECT_MESSAGE_LENGTH = 111;\n-/** Average delay between local address broadcasts in seconds. */\n-static const unsigned int AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL = 24 * 60 * 60;\n-/** Average delay between peer address broadcasts in seconds. */\n-static const unsigned int AVG_ADDRESS_BROADCAST_INTERVAL = 30;\n-/** Average delay between trickled inventory transmissions in seconds.\n- *  Blocks and whitelisted receivers bypass this, outbound peers get half this delay. */\n-static const unsigned int INVENTORY_BROADCAST_INTERVAL = 5;\n-/** Maximum number of inventory items to send per transmission.\n- *  Limits the impact of low-fee transaction floods. */\n-static const unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_INTERVAL;\n-/** Average delay between feefilter broadcasts in seconds. */\n-static const unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n-/** Maximum feefilter broadcast delay after significant change. */\n-static const unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n /** Block download timeout base, expressed in millionths of the block interval (i.e. 10 min) */\n static const int64_t BLOCK_DOWNLOAD_TIMEOUT_BASE = 1000000;\n /** Additional block download timeout per parallel downloading peer (i.e. 5 min) */"
      }
    ]
  }
]