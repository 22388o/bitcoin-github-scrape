[
  {
    "sha": "625488ace5c41ccba1b68323a72588000782f820",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjU0ODhhY2U1YzQxY2NiYTFiNjgzMjNhNzI1ODgwMDA3ODJmODIw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-30T07:37:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-03-30T07:45:41Z"
      },
      "message": "util: Work around (virtual) memory exhaustion on 32-bit w/ glibc\n\nglibc-specific: On 32-bit systems set the number of arenas to 1. By\ndefault, since glibc 2.10, the C library will create up to two heap\narenas per core. This is known to cause excessive virtual address space\nusage in our usage. Work around it by setting the maximum number of\narenas to 1.",
      "tree": {
        "sha": "54d5409d1417ded7f1a5b523a3d9fe2af06f8d6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54d5409d1417ded7f1a5b523a3d9fe2af06f8d6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/625488ace5c41ccba1b68323a72588000782f820",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/625488ace5c41ccba1b68323a72588000782f820",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/625488ace5c41ccba1b68323a72588000782f820",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/625488ace5c41ccba1b68323a72588000782f820/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f34cdcbd806d3e7c9d5dbac2a201755a4cc9828b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f34cdcbd806d3e7c9d5dbac2a201755a4cc9828b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f34cdcbd806d3e7c9d5dbac2a201755a4cc9828b"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 22,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8aa9387dc75b7eee166017514f2ef8cc708be1b3",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/625488ace5c41ccba1b68323a72588000782f820/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/625488ace5c41ccba1b68323a72588000782f820/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=625488ace5c41ccba1b68323a72588000782f820",
        "patch": "@@ -574,6 +574,14 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [ AC_MSG_RESULT(no)]\n )\n \n+dnl Check for mallopt(M_ARENA_MAX) (to set glibc arenas)\n+AC_MSG_CHECKING(for mallopt M_ARENA_MAX)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n+ [[ mallopt(M_ARENA_MAX, 1); ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_MALLOPT_ARENA_MAX, 1,[Define this symbol if you have mallopt with M_ARENA_MAX]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n AC_MSG_CHECKING([for visibility attribute])\n AC_LINK_IFELSE([AC_LANG_SOURCE([\n   int foo_def( void ) __attribute__((visibility(\"default\")));"
      },
      {
        "sha": "a997199fb04d49b0eed6f036edc4b0d610d16143",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/625488ace5c41ccba1b68323a72588000782f820/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/625488ace5c41ccba1b68323a72588000782f820/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=625488ace5c41ccba1b68323a72588000782f820",
        "patch": "@@ -72,6 +72,10 @@\n #include <sys/prctl.h>\n #endif\n \n+#ifdef HAVE_MALLOPT_ARENA_MAX\n+#include <malloc.h>\n+#endif\n+\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/join.hpp>\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n@@ -792,6 +796,16 @@ void RenameThread(const char* name)\n \n void SetupEnvironment()\n {\n+#ifdef HAVE_MALLOPT_ARENA_MAX\n+    // glibc-specific: On 32-bit systems set the number of arenas to 1.\n+    // By default, since glibc 2.10, the C library will create up to two heap\n+    // arenas per core. This is known to cause excessive virtual address space\n+    // usage in our usage. Work around it by setting the maximum number of\n+    // arenas to 1.\n+    if (sizeof(void*) == 4) {\n+        mallopt(M_ARENA_MAX, 1);\n+    }\n+#endif\n     // On most POSIX systems (e.g. Linux, but not BSD) the environment's locale\n     // may be invalid, in which case the \"C\" locale is used as fallback.\n #if !defined(WIN32) && !defined(MAC_OSX) && !defined(__FreeBSD__) && !defined(__OpenBSD__)"
      }
    ]
  }
]