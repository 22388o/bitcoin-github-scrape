[
  {
    "sha": "476a1bef8bdda3ef54cc43b280e3c3f23cca5c80",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzZhMWJlZjhiZGRhM2VmNTRjYzQzYjI4MGUzYzNmMjNjY2E1Yzgw",
    "commit": {
      "author": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2017-03-27T21:32:06Z"
      },
      "committer": {
        "name": "Ryan Havar",
        "email": "rhavar@protonmail.com",
        "date": "2017-03-27T21:32:06Z"
      },
      "message": "Make ApproximateBestSubset optimize for amount of inputs, rather than minimizing change",
      "tree": {
        "sha": "704bad405791aeee2ce019339ecf6c3b66bfee70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/704bad405791aeee2ce019339ecf6c3b66bfee70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/476a1bef8bdda3ef54cc43b280e3c3f23cca5c80",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476a1bef8bdda3ef54cc43b280e3c3f23cca5c80",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/476a1bef8bdda3ef54cc43b280e3c3f23cca5c80",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/476a1bef8bdda3ef54cc43b280e3c3f23cca5c80/comments",
    "author": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RHavar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "RHavar",
      "id": 9326759,
      "node_id": "MDQ6VXNlcjkzMjY3NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9326759?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/RHavar",
      "html_url": "https://github.com/RHavar",
      "followers_url": "https://api.github.com/users/RHavar/followers",
      "following_url": "https://api.github.com/users/RHavar/following{/other_user}",
      "gists_url": "https://api.github.com/users/RHavar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/RHavar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/RHavar/subscriptions",
      "organizations_url": "https://api.github.com/users/RHavar/orgs",
      "repos_url": "https://api.github.com/users/RHavar/repos",
      "events_url": "https://api.github.com/users/RHavar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/RHavar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "baae3149d63909c527e7b28c52c9124957ce8206",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baae3149d63909c527e7b28c52c9124957ce8206",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/baae3149d63909c527e7b28c52c9124957ce8206"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 35,
      "deletions": 59
    },
    "files": [
      {
        "sha": "6c6e39d02f9450dd26d68052ed00b6eafb0a3cd7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 59,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/476a1bef8bdda3ef54cc43b280e3c3f23cca5c80/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/476a1bef8bdda3ef54cc43b280e3c3f23cca5c80/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=476a1bef8bdda3ef54cc43b280e3c3f23cca5c80",
        "patch": "@@ -2023,48 +2023,38 @@ void CWallet::AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe, const\n     }\n }\n \n-static void ApproximateBestSubset(std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > >vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n-                                  std::vector<char>& vfBest, CAmount& nBest, int iterations = 1000)\n+static void ApproximateBestSubset(std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > > vValue, const CAmount& nTotalLower, const CAmount& nTargetValue,\n+                                  std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > >& vfBest, CAmount& nBest, int iterations = 1000)\n {\n-    std::vector<char> vfIncluded;\n-\n-    vfBest.assign(vValue.size(), true);\n+    vfBest = vValue;\n     nBest = nTotalLower;\n \n+    //The solver here uses a randomized algorithm,\n+    //the randomness serves no real security purpose but is just\n+    //needed to prevent degenerate behavior and it is important\n+    //that the rng is fast. We do not use a constant random sequence,\n+    //because there may be some privacy improvement by making\n+    //the selection random.\n     FastRandomContext insecure_rand;\n \n-    for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n+    for (int nRep = 0; nRep < iterations; nRep++)\n     {\n-        vfIncluded.assign(vValue.size(), false);\n         CAmount nTotal = 0;\n-        bool fReachedTarget = false;\n-        for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n-        {\n-            for (unsigned int i = 0; i < vValue.size(); i++)\n-            {\n-                //The solver here uses a randomized algorithm,\n-                //the randomness serves no real security purpose but is just\n-                //needed to prevent degenerate behavior and it is important\n-                //that the rng is fast. We do not use a constant random sequence,\n-                //because there may be some privacy improvement by making\n-                //the selection random.\n-                if (nPass == 0 ? insecure_rand.rand32()&1 : !vfIncluded[i])\n-                {\n-                    nTotal += vValue[i].first;\n-                    vfIncluded[i] = true;\n-                    if (nTotal >= nTargetValue)\n-                    {\n-                        fReachedTarget = true;\n-                        if (nTotal < nBest)\n-                        {\n-                            nBest = nTotal;\n-                            vfBest = vfIncluded;\n-                        }\n-                        nTotal -= vValue[i].first;\n-                        vfIncluded[i] = false;\n-                    }\n-                }\n-            }\n+\n+        for (unsigned int i = 0; i < vValue.size(); i++) {\n+          uint32_t n = insecure_rand.rand32() % (vValue.size() - i);\n+          std::swap(vValue[i], vValue[i + n]);\n+\n+          nTotal += vValue[i].first;\n+          if (nTotal >= nTargetValue)\n+          {\n+              if (i <= vfBest.size() || (i+1 == vfBest.size() && nTotal < nBest))\n+              {\n+                  nBest = nTotal;\n+                  vfBest = std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > >(vValue.begin(), vValue.begin() + 1 + i);\n+              }\n+              nTotal -= vValue[i].first;\n+          }\n         }\n     }\n }\n@@ -2139,37 +2129,23 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n     }\n \n     // Solve subset sum by stochastic approximation\n-    std::sort(vValue.begin(), vValue.end(), CompareValueOnly());\n-    std::reverse(vValue.begin(), vValue.end());\n-    std::vector<char> vfBest;\n+    std::vector<std::pair<CAmount, std::pair<const CWalletTx*,unsigned int> > > vfBest;\n     CAmount nBest;\n \n     ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n     if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n         ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n \n-    // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n-    //                                   or the next bigger coin is closer), return the bigger coin\n-    if (coinLowestLarger.second.first &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n-    {\n-        setCoinsRet.insert(coinLowestLarger.second);\n-        nValueRet += coinLowestLarger.first;\n+    for (unsigned int i = 0; i < vfBest.size(); i++) {\n+      setCoinsRet.insert(vfBest[i].second);\n+      nValueRet += vfBest[i].first;\n     }\n-    else {\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-            {\n-                setCoinsRet.insert(vValue[i].second);\n-                nValueRet += vValue[i].first;\n-            }\n \n-        LogPrint(\"selectcoins\", \"SelectCoins() best subset: \");\n-        for (unsigned int i = 0; i < vValue.size(); i++)\n-            if (vfBest[i])\n-                LogPrint(\"selectcoins\", \"%s \", FormatMoney(vValue[i].first));\n-        LogPrint(\"selectcoins\", \"total %s\\n\", FormatMoney(nBest));\n-    }\n+    LogPrint(\"selectcoins\", \"SelectCoins() best subset: \");\n+    for (unsigned int i = 0; i < vfBest.size(); i++)\n+            LogPrint(\"selectcoins\", \"%s \", FormatMoney(vValue[i].first));\n+    LogPrint(\"selectcoins\", \"total %s\\n\", FormatMoney(nBest));\n+\n \n     return true;\n }\n@@ -2885,7 +2861,7 @@ bool CWallet::SetDefaultKey(const CPubKey &vchPubKey)\n \n /**\n  * Mark old keypool keys as used,\n- * and generate all new keys \n+ * and generate all new keys\n  */\n bool CWallet::NewKeyPool()\n {"
      }
    ]
  }
]