NicolasDorier,2017-12-06T04:57:26Z,"I am so happy about this, big concept ACK. Some tests would be nice.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-349533704,349533704,
jonasschnelli,2017-12-06T07:07:00Z,"Nice. Finally.\nutACK fa12a9481ea7d930c75f109f3c10b200db70e501\n\nA comment for the new parameter of `AcceptToMemoryPool` in `validation.h` would be nice.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-349554127,349554127,
MarcoFalke,2017-12-14T04:31:59Z,Removed the unused imports to make travis green.,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-351606057,351606057,
instagibbs,2017-12-19T14:45:16Z,can someone remind me why this one is acceptable while the other ~dozen attempts have failed?,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-352776951,352776951,
NicolasDorier,2017-12-19T16:32:31Z,"@instagibbs  Revelant history https://github.com/bitcoin/bitcoin/pull/7552 from @laanwj \n\nI think this one can work because it has a better name. `verifyrawtransaction` is complex because there is lot's of bike-shed about the args and what `verifying` means. The meaning of `testmempoolaccept` is obvious and can't be misinterpreted, nor would it make sense to have more parameters.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-352812398,352812398,
MarcoFalke,2017-12-19T18:18:26Z,"@instagibbs Previous pulls were:\n\n* #11201: Solves the general case (a list of transactions), but ended up in a state of {WIP, needs review, will revisit later}. Haven't checked what is actually missing there.\n* #7552: Also solves the general case (a list of transactions), but tried to implement some tx pool checking logic in a separate function. Then people raised concerns that this might r",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-352842691,352842691,
greenaddress,2017-12-19T21:17:44Z,"conceptACK, seems useful and more accessible/convenient than current alternatives",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-352889141,352889141,
MarcoFalke,2017-12-20T22:17:38Z,Added a commit to address @promag's feedback.,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-353198895,353198895,
laanwj,2018-02-16T17:03:22Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-366295632,366295632,
conscott,2018-03-05T18:20:32Z,"Looks like tests are failing because `getnewaddress` has changed to default to p2sh-segwit, changing virtual tx size, and some of the fail cases dealing with large txs are no longer triggered. I was able to get everything passing again [with trivial changes](https://github.com/bitcoin/bitcoin/commit/5a85844327e6a63992bf7d70ae4ccafe44749349) but you may want to tweak those numbers to line up with e",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-370513470,370513470,
NicolasDorier,2018-03-12T04:00:36Z,"@MarcoFalke can you rebase? I am very interested into having this for new release, will review and test.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-372187989,372187989,
instagibbs,2018-03-23T16:05:07Z,"Will review after rebase, many have interest in this functionality.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-375715352,375715352,
MarcoFalke,2018-03-24T15:18:06Z,@conscott Thanks for looking at this. I have replaced the magic numbers in the test with formulas to fix the issue and make the code more readable.,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-375897079,375897079,
MarcoFalke,2018-03-24T15:18:20Z,@NicolasDorier @instagibbs Rebased,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-375897106,375897106,
promag,2018-03-24T16:29:27Z,"Needs release note.\n\nutACK b55555d.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-375905692,375905692,
sipa,2018-03-24T20:00:48Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-375920790,375920790,
NicolasDorier,2018-03-25T04:14:26Z,"`AcceptToMemoryPool`\n`AcceptToMemoryPoolWithTime`\n`AcceptToMemoryPoolWorker`\n\nHave the following parameter in common\n\n`test_accept, nAbsurdFee, bypass_limits, nAcceptTime`\n\nIt would be fine to extract this into a structure like `CAcceptToMemoryPoolOptions` rather than adding yet one more parameter.\n\nAnyway, not blocking,\nCodeReview ACK, will test soon.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-375944254,375944254,
MarcoFalke,2018-03-29T15:12:47Z,"I can do that refactoring in a follow up pr, if people think that is helpful.",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-377268071,377268071,
MarcoFalke,2018-03-30T20:16:36Z,Fun-Fact: I just realized an identical implementation was committed in https://github.com/gfanti/bitcoin/commit/7148d4bdfb018235f6be9969148a277ef3fecf9d a year ago. (Not including rpc changes and tests),https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-377612842,377612842,
instagibbs,2018-04-02T13:53:07Z,utACK https://github.com/bitcoin/bitcoin/pull/11742/commits/b55555da3e25a47f1e7fced7f09d4f0bf8198624,https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-377933721,377933721,
jamesob,2018-04-02T15:06:40Z,"Post-merge utACK https://github.com/bitcoin/bitcoin/pull/11742/commits/b55555da3e25a47f1e7fced7f09d4f0bf8198624\n\nChange looks useful and well implemented. The tests are great! In some sense it's sad that the functional tests you've introduced for this particular RPC call are the only place where we're testing basic mempool rejection logic (e.g. `scriptsig-not-pushonly`, `multi-op-return`), but",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-377950276,377950276,
instagibbs,2018-04-02T18:28:53Z,"yes, forgot to mention the tests were very extensive and impressive",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-378002849,378002849,
jtimon,2018-04-03T02:31:19Z,"post merge fast review ack. +1 on this being interesting for the tests alone, even if nobody was going to use it (but I know some people will, and I remember concept acking something very similar before, for traceability, https://github.com/bitcoin/bitcoin/pull/7552 ).\n",https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-378108468,378108468,
promag,2017-11-21T15:43:14Z,Fix alignment.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152313807,152313807,src/rpc/rawtransaction.cpp
promag,2017-11-21T15:44:30Z,IMO as it is this block is not needed.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152314242,152314242,src/rpc/rawtransaction.cpp
promag,2017-11-21T15:45:30Z,Add test?,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152314577,152314577,src/rpc/rawtransaction.cpp
promag,2017-11-21T15:49:16Z,Already default value. Or remove default value from declaration?,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152315829,152315829,src/validation.cpp
MarcoFalke,2017-11-22T18:21:52Z,"Note this is ATMPWT, not ATMP ;)",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152644533,152644533,src/validation.cpp
MarcoFalke,2017-11-22T18:22:06Z,done,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152644588,152644588,src/rpc/rawtransaction.cpp
promag,2017-11-22T18:32:58Z,Ah!,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152647067,152647067,src/validation.cpp
promag,2017-11-22T18:35:45Z,Extra space.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152647669,152647669,src/rpc/rawtransaction.cpp
promag,2017-11-22T18:37:34Z,Send?,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152648061,152648061,src/rpc/rawtransaction.cpp
promag,2017-11-22T18:41:37Z,error? optional?,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r152648918,152648918,src/rpc/rawtransaction.cpp
sipa,2017-12-06T04:27:59Z,This first `const` has no effect.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155144465,155144465,src/txmempool.h
TheBlueMatt,2017-12-06T22:21:15Z,"Seems somewhat redundant to return the parameter as-is, no?",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155379057,155379057,src/rpc/rawtransaction.cpp
TheBlueMatt,2017-12-06T22:37:29Z,"Ugh, I meannnnn, checking against pcoinsTip really sucks. Maybe just call ATMP and then check for the ""txn-already-known"" return? Or just return false (since its not ""accepted to mempool"", so I'd kinda expect that) and the rejection reason will be txn-already-known.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155382539,155382539,src/rpc/rawtransaction.cpp
promag,2017-12-06T23:05:32Z,Missing `\n`.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155388151,155388151,src/rpc/rawtransaction.cpp
promag,2017-12-06T23:12:32Z,`when 'allowed' is false`,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155389515,155389515,src/rpc/rawtransaction.cpp
promag,2017-12-06T23:25:35Z,"I guess this was borrowed from `sendrawtransaction`.\n\nThere, there is an extra test `bool fHaveMempool = mempool.exists(hashTx)`, \nbut it could be replaced by checking the ATMP error `txn-already-in-mempool`.\n\nHowever in other PR I recall @sipa said it was kind of bad thing to rely on these rejection reasons.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155391946,155391946,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-07T04:01:44Z,"Thanks, will rename this to `txid` and the parameter to `rawtx` to make clear that they are different.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155426102,155426102,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-07T04:05:09Z,"Yeah, this is mostly a convenience check to provide a helpful message in case the tx recently confirmed for whatever reason. Otherwise you'd be left with `missing_inputs`, which is correct but might not be helpful at first.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155426418,155426418,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-07T22:04:06Z,"On a second thought, I don't think it makes sense to have the blockchain check here. Will return false as suggested by @TheBlueMatt ",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r155654315,155654315,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-11T16:06:51Z,"There is no new line to indicate a paragraph, which groups the rpcs into two logical sections.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r156117353,156117353,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-11T16:14:23Z,"Thx, fixed.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r156119690,156119690,src/rpc/rawtransaction.cpp
instagibbs,2017-12-19T16:50:56Z,"I understand this is reflected in sendraw as well, but humor me: what times is state not `IsInvalid` but it would reject it?",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157811719,157811719,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:26:27Z,"Type: consesus.\n\nNit, s/our/the.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157903120,157903120,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:26:56Z,"Nit, just `See sendrawtransaction.`",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157903192,157903192,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:28:56Z,`RPC_INVALID_PARAMETER` instead? Type is already correct (it's an array at least).,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157903468,157903468,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:31:24Z,"Nit, remove empty line.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157903858,157903858,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:33:15Z,"Nit, upper case `Rejection`.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157904116,157904116,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:34:41Z,Remove? Below there is `request.params[0].get_array()` and `request.params[1].get_bool()`.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157904308,157904308,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:37:41Z,"Nit, we could avoid loose locks, I mean, it's more clear where the lock/unlock happens:\n```cpp\n{\n    LOCK(cs_main);\n    bool res = AcceptToMemoryPool(...);\n    assert(!res);\n}\n```",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157904697,157904697,src/rpc/rawtransaction.cpp
promag,2017-12-19T23:40:14Z,"Nit, not sure if relevant at all, but this format doesn't match with others. How about `missing-inputs`?",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r157904991,157904991,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-20T21:57:26Z,That is the way we do it everywhere. I assume the rational is to fail early and provide useful feedback instead of accepting/processing each parameter separately and leaving any later ones unchecked.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r158146832,158146832,src/rpc/rawtransaction.cpp
promag,2017-12-20T22:07:55Z,"The error would be different thought. I don't think failing a bit later is that bad. This also doesn't work well with polymorphic arguments. At the end we have a mix of these, so I tend to use univalue getters to validate. We could add support to throw if any extra parameter is not get/validated.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r158149047,158149047,src/rpc/rawtransaction.cpp
MarcoFalke,2017-12-20T22:17:11Z,"Yes, the error is different in that the RPCTypeCheck will tell you what the wrong type was, which is useful.\nI fail to see how the edge case of polymorphic arguments is relevant to this pull request.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r158150949,158150949,src/rpc/rawtransaction.cpp
luke-jr,2018-03-07T17:00:25Z,"Why not use the return value, instead of modifying a pointer?",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r172912255,172912255,src/validation.cpp
luke-jr,2018-03-07T21:03:54Z,"pushKV actually doesn't work with bool... :/\n\nGuess we need push_back(Pair()) for this.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r172983875,172983875,src/rpc/rawtransaction.cpp
promag,2018-03-07T21:23:42Z,"@luke-jr What do you mean with ""doesn't work""? It's used in a lot of places.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r172989095,172989095,src/rpc/rawtransaction.cpp
luke-jr,2018-03-08T03:38:48Z,Accepting/returning a list here makes no sense. Just batch request...,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173055377,173055377,src/rpc/rawtransaction.cpp
MarcoFalke,2018-03-08T14:52:26Z,I don't think it is possible to test transactions that depend on each other through a batch request.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173180604,173180604,src/rpc/rawtransaction.cpp
MarcoFalke,2018-03-08T14:53:45Z,"Should work on master, at least: fa1388edb17fc9eca097d93542f8d5db5aa0cf17",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173181052,173181052,src/rpc/rawtransaction.cpp
MarcoFalke,2018-03-08T14:54:52Z,"To keep the interface clear. It wasn't accepted to the memory pool, which is what the return value of ATMP denotes.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173181399,173181399,src/validation.cpp
luke-jr,2018-03-11T19:10:47Z,"It was accepted, just not added... Acceptance is exactly what you're testing here. IMO the interface is less clear the way you have it.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173665663,173665663,src/validation.cpp
luke-jr,2018-03-11T19:11:29Z,I don't see logic in this PR to actually handle such dependencies either...?,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173665682,173665682,src/rpc/rawtransaction.cpp
luke-jr,2018-03-11T19:12:01Z,Can't assume the bundled univalue is being used (we really shouldn't be bundling it at all).,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173665700,173665700,src/rpc/rawtransaction.cpp
luke-jr,2018-03-11T19:12:27Z,"Since this problem exists already in master, #12666 seems like the best path forward.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173665708,173665708,src/rpc/rawtransaction.cpp
NicolasDorier,2018-03-12T03:58:27Z,It is explicitely checked to be size of 1 for now. I think it is reasonable to allow this to be improved in a future PR.,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r173690686,173690686,src/rpc/rawtransaction.cpp
MarcoFalke,2018-03-24T15:16:19Z,Makes sense. Fixed,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r176911803,176911803,src/validation.cpp
promag,2018-03-24T16:30:37Z,"Nit, wrong alignment.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r176913624,176913624,src/rpc/rawtransaction.cpp
promag,2018-03-24T16:34:21Z,"nit, missing test for second argument type and also tests for missing/extra arguments.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r176913734,176913734,src/rpc/rawtransaction.cpp
NicolasDorier,2018-03-25T04:07:56Z,typo `test_accpet`,https://github.com/bitcoin/bitcoin/pull/11742#discussion_r176928149,176928149,src/rpc/rawtransaction.cpp
glozow,2020-08-12T17:01:47Z,"Hey @MarcoFalke, sorry for the throwback, but was there a plan have `testmempoolaccept` accept multiple transactions at some point?",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r469407681,469407681,src/rpc/rawtransaction.cpp
MarcoFalke,2020-08-12T20:02:41Z,"Yes, see https://github.com/bitcoin/bitcoin/pull/11742#issuecomment-352842691",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r469507857,469507857,src/rpc/rawtransaction.cpp
darosior,2020-08-19T12:25:38Z,"Fwiw i opened an issue to track this some time ago https://github.com/bitcoin/bitcoin/issues/18480 . Feel free to pick it up if you want (just signal it so we don't end up both working on it :) ), as i'm not going to work on this soon.",https://github.com/bitcoin/bitcoin/pull/11742#discussion_r472988843,472988843,src/rpc/rawtransaction.cpp
