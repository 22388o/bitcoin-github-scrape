sipa,2016-08-26T12:39:46Z,Why do you want to make verack a no-op? It's nice to know the peer received and understood our version message before continuing.\n,https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-242724391,242724391,
laanwj,2016-08-26T14:18:30Z,"NACK, this part of the protocol is not broken, let's not fix it.\n",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-242748079,242748079,
rebroad,2016-08-28T02:45:49Z,"@sipa you say ""before continuing"" but this is not how the code currently works. There is no stopping or waiting for the verack currently, instead some code is simply not executed as a result of the verack not being received. That code (which is important that it runs) is what I have now moved to run upon receipt of a ""version"" message - which DOES cause the required continuation that you mention.\",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-242952772,242952772,
sipa,2016-08-30T15:36:11Z,"@rebroad Ok, so the history behind VERACK is that it was introduced together with protocol checksums.\n\nOriginally, the protocol version started at 0, and then VERSION is used to propose by peer A that peer B can start using a higher protocol version number. Peer A however needs to know when B received that VERSION message, as he doesn't know when to start decoding the received messages using the",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-243481475,243481475,
rebroad,2016-09-01T07:16:39Z,"@sipa Thanks for that. I wouldn't be proposing this pull request if I didn't think there was something broken that it fixes. But broken is a subjective term. If you're happy with Bitcoin Core NOT requesting announcements by headers or preferrring compact blocks, then it's not broken. But given that most Bitcoin Core nodes ARE requesting these things, then it would seem broken to me.\n",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-243996110,243996110,
sipa,2016-09-01T07:36:47Z,You have a peer who is sending messages before sending a verack. That peer\nis broken.\n,https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-244000012,244000012,
rebroad,2016-09-13T02:46:36Z,"@sipa The peer you refer to is indeed behaving strangely, but it's brokenness is a co-creation between it sending the VERACK before the VERSION (which clearly is wrong), and the standard node waiting for a VERACK after VERSION before sending SENDHEADERS and SENDCMPCT.\n\nNow, given that waiting for the VERACK does nothing but facilitate this brokenness and provides no other value that I am aware o",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-246557748,246557748,
sipa,2016-09-13T02:57:44Z,@rebroad What value does this change have?\n,https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-246559236,246559236,
rebroad,2016-09-13T03:06:09Z,"@sipa Interoperability. I think I am realising that perhaps many of my desired changes have this goal in mind, and for some reason it seems that a significant number of Core developers are mainly considering that any non-Satoshi node is an oddity that doesn't really need to be supported, or something like this. My idea of an ideal node is one that can communicate usefully to as many nodes as possi",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-246560381,246560381,
venzen,2016-09-13T03:12:27Z,"@rebroad the initial handshake is best left the way it is. As @sipa describes in a comment above, VERACK may not have a function now, but it may very well become useful in future. \n\nFor example [BIP151](https://github.com/jonasschnelli/bips/blob/88245718e1518d464500c9a1d81731358c7acafe/bip-0151.mediawiki) uses a similar handshake to establish an encrypted session between peers. \n\nThe implement",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-246561182,246561182,
rebroad,2016-09-13T03:15:27Z,"@venzen (no idea why github doesn't let me tag you!). If sipa is indeed saying that VERACK doesn't have a function now, then this surely would strengthen the case for this pull - i.e. I am seeking to make it clearer that it doesn't have a function now.\n",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-246561569,246561569,
venzen,2016-09-13T03:16:06Z,"read my comment again :)\n\nBesides, remember VERACK's critical function in the connection handshake.\n\nThe process of connecting and the decision to peer should be bilateral. PeerA (sends `version`) - this is my version, my network_services, and best_height. PeerB - this is useful (reply with `version` and `verack`). PeerA (considers VERSION information) - actually, this is not useful (doesn't r",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-246561650,246561650,
rebroad,2016-09-15T09:12:47Z,"@venzen which comment are you referring to? verack may have been part of a handshake in the past, but it is no longer, and certainly hasn't been since 2012. there is no timeout regarding version message - i.e. no disconnection logic if a VERACK is not received. Once version is received, pretty much everything is on (except for the recently added SENDHEADERS and SENDCMPCT). My point is - was the re",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-247277086,247277086,
sipa,2016-09-15T14:48:58Z,"I still don't understand what problem this change is supposed to address.\n\nYes, the code could be slightly simplified if we change the protocol to\nmake verack a no-op corresponding to patch you propose. But that _is_ a\nprotocol change. Admittedly a very simple one, but what is the benefit?\nThat some implementations which were misimplementing a very simple part of\nthe protocol before would kn",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-247350390,247350390,
rebroad,2016-09-16T00:00:10Z,"@sipa Let me invite you instead to consider how you would document the bitcoin protocol. Currently, as of protocol 70013 you would now need to explain that verack messages are necessary if you want to allow nodes to request block announcements by headers, and as of protocol 70014, verack is necessary if you want to allow nodes to advertise that they can process compact blocks.\n\nIt just sounds a ",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-247487280,247487280,
sipa,2016-09-16T00:04:30Z,"No offence, but if that is the stumble block you have problems with for\nimplementing the p2p protocol, you're in for a world of pain.\n\nI really don't see the benefit of _changing the protocol_ for the benefit\nof being able to remove two lines of text from a hypothetical\nspecification, and I don't see the benefit of continuing to spend time on\ndiscussing it.\n",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-247487838,247487838,
rebroad,2016-09-16T00:06:31Z,"@sipa As a programmer, I thought you would already have an appreciation of the KISS principle. Or, to quote Albert Einstein, ""Make everything as simple as possible, but not simpler"".\n",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-247488099,247488099,
sipa,2016-09-16T00:45:14Z,"@rebroad As a programmer, I thought you would already have an appreciation for not fixing what isn't broken.\n\nYes, if we'd design Bitcoin from scratch, I'm sure we could let VERACK out. We're not doing that. We're wasting hours of discussion on changing a triviality.\n",https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-247493022,247493022,
rebroad,2020-01-16T09:56:45Z,Goodness me. I did like to argue did't I....,https://github.com/bitcoin/bitcoin/pull/8597#issuecomment-575074195,575074195,
