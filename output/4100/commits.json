[
  {
    "sha": "977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzdjZGFkZWE4YTc3ZWVkMDRmMWYwZmQzNDFiYTlkZWRjM2ZhNzgz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-20T15:36:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:39Z"
      },
      "message": "Add a built-in SHA256/SHA512 implementation.\n\nThis also moves the HMAC-SHA512 implementation to sha2.cpp.",
      "tree": {
        "sha": "842e2239a98d6f5c329e639f4ca953e5ea865f82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/842e2239a98d6f5c329e639f4ca953e5ea865f82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "540ce6aa10996661a62853797538d2a703664ea2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/540ce6aa10996661a62853797538d2a703664ea2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/540ce6aa10996661a62853797538d2a703664ea2"
      }
    ],
    "stats": {
      "total": 612,
      "additions": 536,
      "deletions": 76
    },
    "files": [
      {
        "sha": "4e94d47066bb0bb3b48b1eca247a087abdb684ea",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -75,6 +75,7 @@ BITCOIN_CORE_H = \\\n   rpcserver.h \\\n   script.h \\\n   serialize.h \\\n+  sha2.h \\\n   sync.h \\\n   threadsafety.h \\\n   tinyformat.h \\\n@@ -152,6 +153,7 @@ libbitcoin_common_a_SOURCES = \\\n   protocol.cpp \\\n   rpcprotocol.cpp \\\n   script.cpp \\\n+  sha2.cpp \\\n   sync.cpp \\\n   util.cpp \\\n   version.cpp \\"
      },
      {
        "sha": "93723309afd51b39600c65a5cd3fa572a4193dab",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -33,6 +33,7 @@ BITCOIN_TESTS =\\\n   test/compress_tests.cpp \\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\\n+  test/hash_tests.cpp \\\n   test/key_tests.cpp \\\n   test/main_tests.cpp \\\n   test/miner_tests.cpp \\\n@@ -44,6 +45,7 @@ BITCOIN_TESTS =\\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n   test/serialize_tests.cpp \\\n+  test/sha2_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/test_bitcoin.cpp \\\n   test/transaction_tests.cpp \\"
      },
      {
        "sha": "bddd8abf38d045a171fa4868c11f72b12b59f179",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 41,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -56,44 +56,3 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n     return h1;\n }\n-\n-int HMAC_SHA512_Init(HMAC_SHA512_CTX *pctx, const void *pkey, size_t len)\n-{\n-    unsigned char key[128];\n-    if (len <= 128)\n-    {\n-        memcpy(key, pkey, len);\n-        memset(key + len, 0, 128-len);\n-    }\n-    else\n-    {\n-        SHA512_CTX ctxKey;\n-        SHA512_Init(&ctxKey);\n-        SHA512_Update(&ctxKey, pkey, len);\n-        SHA512_Final(key, &ctxKey);\n-        memset(key + 64, 0, 64);\n-    }\n-\n-    for (int n=0; n<128; n++)\n-        key[n] ^= 0x5c;\n-    SHA512_Init(&pctx->ctxOuter);\n-    SHA512_Update(&pctx->ctxOuter, key, 128);\n-\n-    for (int n=0; n<128; n++)\n-        key[n] ^= 0x5c ^ 0x36;\n-    SHA512_Init(&pctx->ctxInner);\n-    return SHA512_Update(&pctx->ctxInner, key, 128);\n-}\n-\n-int HMAC_SHA512_Update(HMAC_SHA512_CTX *pctx, const void *pdata, size_t len)\n-{\n-    return SHA512_Update(&pctx->ctxInner, pdata, len);\n-}\n-\n-int HMAC_SHA512_Final(unsigned char *pmd, HMAC_SHA512_CTX *pctx)\n-{\n-    unsigned char buf[64];\n-    SHA512_Final(buf, &pctx->ctxInner);\n-    SHA512_Update(&pctx->ctxOuter, buf, 64);\n-    return SHA512_Final(pmd, &pctx->ctxOuter);\n-}"
      },
      {
        "sha": "718b627a78dce5d75ca3419ce0ca3cad0eab4c5e",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -126,14 +126,4 @@ inline uint160 Hash160(const std::vector<unsigned char>& vch)\n \n unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n \n-typedef struct\n-{\n-    SHA512_CTX ctxInner;\n-    SHA512_CTX ctxOuter;\n-} HMAC_SHA512_CTX;\n-\n-int HMAC_SHA512_Init(HMAC_SHA512_CTX *pctx, const void *pkey, size_t len);\n-int HMAC_SHA512_Update(HMAC_SHA512_CTX *pctx, const void *pdata, size_t len);\n-int HMAC_SHA512_Final(unsigned char *pmd, HMAC_SHA512_CTX *pctx);\n-\n #endif"
      },
      {
        "sha": "0685948922ebd5784de575256580a59b2bff75e4",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 11,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -4,6 +4,8 @@\n \n #include \"key.h\"\n \n+#include \"sha2.h\"\n+\n #include <openssl/bn.h>\n #include <openssl/ecdsa.h>\n #include <openssl/obj_mac.h>\n@@ -510,12 +512,10 @@ void static BIP32Hash(const unsigned char chainCode[32], unsigned int nChild, un\n     num[1] = (nChild >> 16) & 0xFF;\n     num[2] = (nChild >>  8) & 0xFF;\n     num[3] = (nChild >>  0) & 0xFF;\n-    HMAC_SHA512_CTX ctx;\n-    HMAC_SHA512_Init(&ctx, chainCode, 32);\n-    HMAC_SHA512_Update(&ctx, &header, 1);\n-    HMAC_SHA512_Update(&ctx, data, 32);\n-    HMAC_SHA512_Update(&ctx, num, 4);\n-    HMAC_SHA512_Final(output, &ctx);\n+    CHMAC_SHA512(chainCode, 32).Write(&header, 1)\n+                               .Write(data, 32)\n+                               .Write(num, 4)\n+                               .Finalize(output);\n }\n \n bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n@@ -562,13 +562,10 @@ bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {\n }\n \n void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n-    static const char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n-    HMAC_SHA512_CTX ctx;\n-    HMAC_SHA512_Init(&ctx, hashkey, sizeof(hashkey));\n-    HMAC_SHA512_Update(&ctx, seed, nSeedLen);\n+    static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n     unsigned char out[64];\n     LockObject(out);\n-    HMAC_SHA512_Final(out, &ctx);\n+    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(out);\n     key.Set(&out[0], &out[32], true);\n     memcpy(vchChainCode, &out[32], 32);\n     UnlockObject(out);"
      },
      {
        "sha": "c9beaf220bcd53e644432ce4f0ae3eceddd39c02",
        "filename": "src/sha2.cpp",
        "status": "added",
        "additions": 428,
        "deletions": 0,
        "changes": 428,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sha2.cpp?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -0,0 +1,428 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"sha2.h\"\n+\n+#include <string.h>\n+\n+// Internal implementation code.\n+namespace {\n+\n+/** Read 4 bytes, and interpret them as a 32-bit unsigned big-endian integer. */\n+uint32_t inline ReadBE32(const unsigned char *data) {\n+    return ((uint32_t)data[0] << 24 | (uint32_t)data[1] << 16 | (uint32_t)data[2] << 8 | (uint32_t)data[3]);\n+}\n+\n+/** Write a 32-bit unsigned big-endian integer. */\n+void inline WriteBE32(unsigned char *data, uint32_t x) {\n+    data[0] = x >> 24;\n+    data[1] = x >> 16;\n+    data[2] = x >> 8;\n+    data[3] = x;\n+}\n+\n+/** Read 8 bytes, and interpret them as a 64-bit unsigned big-endian integer. */\n+uint64_t inline ReadBE64(const unsigned char *data) {\n+    return ((uint64_t)data[0] << 56 | (uint64_t)data[1] << 48 | (uint64_t)data[2] << 40 | (uint64_t)data[3] << 32 |\n+            (uint64_t)data[4] << 24 | (uint64_t)data[5] << 16 | (uint64_t)data[6] << 8  | (uint64_t)data[7]);\n+}\n+\n+/** Write a 64-bit unsigned big-endian integer. */\n+void inline WriteBE64(unsigned char *data, uint64_t x) {\n+    data[0] = x >> 56;\n+    data[1] = x >> 48;\n+    data[2] = x >> 40;\n+    data[3] = x >> 32;\n+    data[4] = x >> 24;\n+    data[5] = x >> 16;\n+    data[6] = x >> 8;\n+    data[7] = x;\n+}\n+\n+/// Internal SHA-256 implementation.\n+namespace sha256 {\n+\n+uint32_t inline Ch(uint32_t x, uint32_t y, uint32_t z) { return z ^ (x & (y ^ z)); }\n+uint32_t inline Maj(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (z & (x | y)); }\n+uint32_t inline Sigma0(uint32_t x) { return (x >> 2 | x << 30) ^ (x >> 13 | x << 19) ^ (x >> 22 | x << 10); }\n+uint32_t inline Sigma1(uint32_t x) { return (x >> 6 | x << 26) ^ (x >> 11 | x << 21) ^ (x >> 25 | x << 7); }\n+uint32_t inline sigma0(uint32_t x) { return (x >> 7 | x << 25) ^ (x >> 18 | x << 14) ^ (x >> 3); }\n+uint32_t inline sigma1(uint32_t x) { return (x >> 17 | x << 15) ^ (x >> 19 | x << 13) ^ (x >> 10); }\n+\n+/** One round of SHA-256. */\n+void inline Round(uint32_t a, uint32_t b, uint32_t c, uint32_t &d,\n+                  uint32_t e, uint32_t f, uint32_t g, uint32_t &h,\n+                  uint32_t k, uint32_t w) {\n+    uint32_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n+    uint32_t t2 = Sigma0(a) + Maj(a, b, c);\n+    d += t1;\n+    h = t1 + t2;\n+}\n+\n+/** Initialize SHA-256 state. */\n+void inline Initialize(uint32_t *s) {\n+    s[0] = 0x6a09e667ul;\n+    s[1] = 0xbb67ae85ul;\n+    s[2] = 0x3c6ef372ul;\n+    s[3] = 0xa54ff53aul;\n+    s[4] = 0x510e527ful;\n+    s[5] = 0x9b05688cul;\n+    s[6] = 0x1f83d9abul;\n+    s[7] = 0x5be0cd19ul;\n+}\n+\n+/** Perform one SHA-256 transformation, processing a 64-byte chunk. */\n+void Transform(uint32_t *s, const unsigned char *chunk) {\n+    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98,  w0 = ReadBE32(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x71374491,  w1 = ReadBE32(chunk + 4));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcf,  w2 = ReadBE32(chunk + 8));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba5,  w3 = ReadBE32(chunk + 12));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25b,  w4 = ReadBE32(chunk + 16));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1,  w5 = ReadBE32(chunk + 20));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4,  w6 = ReadBE32(chunk + 24));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5,  w7 = ReadBE32(chunk + 28));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98,  w8 = ReadBE32(chunk + 32));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b01,  w9 = ReadBE32(chunk + 36));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be, w10 = ReadBE32(chunk + 40));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3, w11 = ReadBE32(chunk + 44));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74, w12 = ReadBE32(chunk + 48));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe, w13 = ReadBE32(chunk + 52));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a7, w14 = ReadBE32(chunk + 56));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174, w15 = ReadBE32(chunk + 60));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c1,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786,  w1 += sigma1(w15) + w10 + sigma0( w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc6,  w2 += sigma1( w0) + w11 + sigma0( w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc,  w3 += sigma1( w1) + w12 + sigma0( w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f,  w4 += sigma1( w2) + w13 + sigma0( w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa,  w5 += sigma1( w3) + w14 + sigma0( w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dc,  w6 += sigma1( w4) + w15 + sigma0( w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c8, w10 += sigma1( w8) +  w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7, w11 += sigma1( w9) +  w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf3, w12 += sigma1(w10) +  w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147, w13 += sigma1(w11) +  w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351, w14 += sigma1(w12) +  w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x14292967, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a85,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b2138,  w1 += sigma1(w15) + w10 + sigma0( w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc,  w2 += sigma1( w0) + w11 + sigma0( w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d13,  w3 += sigma1( w1) + w12 + sigma0( w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a7354,  w4 += sigma1( w2) + w13 + sigma0( w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb,  w5 += sigma1( w3) + w14 + sigma0( w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e,  w6 += sigma1( w4) + w15 + sigma0( w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c85,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a1,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664b,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70, w10 += sigma1( w8) +  w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a3, w11 += sigma1( w9) +  w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819, w12 += sigma1(w10) +  w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd6990624, w13 += sigma1(w11) +  w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e3585, w14 += sigma1(w12) +  w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa070, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c08,  w1 += sigma1(w15) + w10 + sigma0( w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774c,  w2 += sigma1( w0) + w11 + sigma0( w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5,  w3 += sigma1( w1) + w12 + sigma0( w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3,  w4 += sigma1( w2) + w13 + sigma0( w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4a,  w5 += sigma1( w3) + w14 + sigma0( w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f,  w6 += sigma1( w4) + w15 + sigma0( w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814, w10 += sigma1( w8) +  w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc70208, w11 += sigma1( w9) +  w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa, w12 += sigma1(w10) +  w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506ceb, w13 += sigma1(w11) +  w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7, w14  + sigma1(w12) +  w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2, w15  + sigma1(w13) +  w8 + sigma0( w0));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+    s[5] += f;\n+    s[6] += g;\n+    s[7] += h;\n+}\n+\n+}  // namespace sha256\n+\n+/// Internal SHA-512 implementation.\n+namespace sha512 {\n+\n+uint64_t inline Ch(uint64_t x, uint64_t y, uint64_t z) { return z ^ (x & (y ^ z)); }\n+uint64_t inline Maj(uint64_t x, uint64_t y, uint64_t z) { return (x & y) | (z & (x | y)); }\n+uint64_t inline Sigma0(uint64_t x) { return (x >> 28 | x << 36) ^ (x >> 34 | x << 30) ^ (x >> 39 | x << 25); }\n+uint64_t inline Sigma1(uint64_t x) { return (x >> 14 | x << 50) ^ (x >> 18 | x << 46) ^ (x >> 41 | x << 23); }\n+uint64_t inline sigma0(uint64_t x) { return (x >> 1 | x << 63) ^ (x >> 8 | x << 56) ^ (x >> 7); }\n+uint64_t inline sigma1(uint64_t x) { return (x >> 19 | x << 45) ^ (x >> 61 | x << 3) ^ (x >> 6); }\n+\n+/** One round of SHA-512. */\n+void inline Round(uint64_t a, uint64_t b, uint64_t c, uint64_t &d,\n+                  uint64_t e, uint64_t f, uint64_t g, uint64_t &h,\n+                  uint64_t k, uint64_t w) {\n+    uint64_t t1 = h + Sigma1(e) + Ch(e, f, g) + k + w;\n+    uint64_t t2 = Sigma0(a) + Maj(a, b, c);\n+    d += t1;\n+    h = t1 + t2;\n+}\n+\n+/** Initialize SHA-256 state. */\n+void inline Initialize(uint64_t *s) {\n+    s[0] = 0x6a09e667f3bcc908ull;\n+    s[1] = 0xbb67ae8584caa73bull;\n+    s[2] = 0x3c6ef372fe94f82bull;\n+    s[3] = 0xa54ff53a5f1d36f1ull;\n+    s[4] = 0x510e527fade682d1ull;\n+    s[5] = 0x9b05688c2b3e6c1full;\n+    s[6] = 0x1f83d9abfb41bd6bull;\n+    s[7] = 0x5be0cd19137e2179ull;\n+}\n+\n+/** Perform one SHA-512 transformation, processing a 128-byte chunk. */\n+void Transform(uint64_t *s, const unsigned char *chunk) {\n+    uint64_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4], f = s[5], g = s[6], h = s[7];\n+    uint64_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f, g, h, 0x428a2f98d728ae22ull,  w0 = ReadBE64(chunk + 0));\n+    Round(h, a, b, c, d, e, f, g, 0x7137449123ef65cdull,  w1 = ReadBE64(chunk + 8));\n+    Round(g, h, a, b, c, d, e, f, 0xb5c0fbcfec4d3b2full,  w2 = ReadBE64(chunk + 16));\n+    Round(f, g, h, a, b, c, d, e, 0xe9b5dba58189dbbcull,  w3 = ReadBE64(chunk + 24));\n+    Round(e, f, g, h, a, b, c, d, 0x3956c25bf348b538ull,  w4 = ReadBE64(chunk + 32));\n+    Round(d, e, f, g, h, a, b, c, 0x59f111f1b605d019ull,  w5 = ReadBE64(chunk + 40));\n+    Round(c, d, e, f, g, h, a, b, 0x923f82a4af194f9bull,  w6 = ReadBE64(chunk + 48));\n+    Round(b, c, d, e, f, g, h, a, 0xab1c5ed5da6d8118ull,  w7 = ReadBE64(chunk + 56));\n+    Round(a, b, c, d, e, f, g, h, 0xd807aa98a3030242ull,  w8 = ReadBE64(chunk + 64));\n+    Round(h, a, b, c, d, e, f, g, 0x12835b0145706fbeull,  w9 = ReadBE64(chunk + 72));\n+    Round(g, h, a, b, c, d, e, f, 0x243185be4ee4b28cull, w10 = ReadBE64(chunk + 80));\n+    Round(f, g, h, a, b, c, d, e, 0x550c7dc3d5ffb4e2ull, w11 = ReadBE64(chunk + 88));\n+    Round(e, f, g, h, a, b, c, d, 0x72be5d74f27b896full, w12 = ReadBE64(chunk + 96));\n+    Round(d, e, f, g, h, a, b, c, 0x80deb1fe3b1696b1ull, w13 = ReadBE64(chunk + 104));\n+    Round(c, d, e, f, g, h, a, b, 0x9bdc06a725c71235ull, w14 = ReadBE64(chunk + 112));\n+    Round(b, c, d, e, f, g, h, a, 0xc19bf174cf692694ull, w15 = ReadBE64(chunk + 120));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xe49b69c19ef14ad2ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n+    Round(h, a, b, c, d, e, f, g, 0xefbe4786384f25e3ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n+    Round(g, h, a, b, c, d, e, f, 0x0fc19dc68b8cd5b5ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n+    Round(f, g, h, a, b, c, d, e, 0x240ca1cc77ac9c65ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n+    Round(e, f, g, h, a, b, c, d, 0x2de92c6f592b0275ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4a7484aa6ea6e483ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5cb0a9dcbd41fbd4ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n+    Round(b, c, d, e, f, g, h, a, 0x76f988da831153b5ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n+    Round(a, b, c, d, e, f, g, h, 0x983e5152ee66dfabull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa831c66d2db43210ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xb00327c898fb213full, w10 += sigma1( w8) +  w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xbf597fc7beef0ee4ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xc6e00bf33da88fc2ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd5a79147930aa725ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x06ca6351e003826full, w14 += sigma1(w12) +  w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x142929670a0e6e70ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x27b70a8546d22ffcull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n+    Round(h, a, b, c, d, e, f, g, 0x2e1b21385c26c926ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n+    Round(g, h, a, b, c, d, e, f, 0x4d2c6dfc5ac42aedull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n+    Round(f, g, h, a, b, c, d, e, 0x53380d139d95b3dfull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n+    Round(e, f, g, h, a, b, c, d, 0x650a73548baf63deull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n+    Round(d, e, f, g, h, a, b, c, 0x766a0abb3c77b2a8ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n+    Round(c, d, e, f, g, h, a, b, 0x81c2c92e47edaee6ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n+    Round(b, c, d, e, f, g, h, a, 0x92722c851482353bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n+    Round(a, b, c, d, e, f, g, h, 0xa2bfe8a14cf10364ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n+    Round(h, a, b, c, d, e, f, g, 0xa81a664bbc423001ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0xc24b8b70d0f89791ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0xc76c51a30654be30ull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0xd192e819d6ef5218ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xd69906245565a910ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xf40e35855771202aull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x106aa07032bbd1b8ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0x19a4c116b8d2d0c8ull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n+    Round(h, a, b, c, d, e, f, g, 0x1e376c085141ab53ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n+    Round(g, h, a, b, c, d, e, f, 0x2748774cdf8eeb99ull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n+    Round(f, g, h, a, b, c, d, e, 0x34b0bcb5e19b48a8ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n+    Round(e, f, g, h, a, b, c, d, 0x391c0cb3c5c95a63ull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n+    Round(d, e, f, g, h, a, b, c, 0x4ed8aa4ae3418acbull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n+    Round(c, d, e, f, g, h, a, b, 0x5b9cca4f7763e373ull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n+    Round(b, c, d, e, f, g, h, a, 0x682e6ff3d6b2b8a3ull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n+    Round(a, b, c, d, e, f, g, h, 0x748f82ee5defb2fcull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n+    Round(h, a, b, c, d, e, f, g, 0x78a5636f43172f60ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x84c87814a1f0ab72ull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x8cc702081a6439ecull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x90befffa23631e28ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0xa4506cebde82bde9ull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0xbef9a3f7b2c67915ull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0xc67178f2e372532bull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+\n+    Round(a, b, c, d, e, f, g, h, 0xca273eceea26619cull,  w0 += sigma1(w14) +  w9 + sigma0( w1));\n+    Round(h, a, b, c, d, e, f, g, 0xd186b8c721c0c207ull,  w1 += sigma1(w15) + w10 + sigma0( w2));\n+    Round(g, h, a, b, c, d, e, f, 0xeada7dd6cde0eb1eull,  w2 += sigma1( w0) + w11 + sigma0( w3));\n+    Round(f, g, h, a, b, c, d, e, 0xf57d4f7fee6ed178ull,  w3 += sigma1( w1) + w12 + sigma0( w4));\n+    Round(e, f, g, h, a, b, c, d, 0x06f067aa72176fbaull,  w4 += sigma1( w2) + w13 + sigma0( w5));\n+    Round(d, e, f, g, h, a, b, c, 0x0a637dc5a2c898a6ull,  w5 += sigma1( w3) + w14 + sigma0( w6));\n+    Round(c, d, e, f, g, h, a, b, 0x113f9804bef90daeull,  w6 += sigma1( w4) + w15 + sigma0( w7));\n+    Round(b, c, d, e, f, g, h, a, 0x1b710b35131c471bull,  w7 += sigma1( w5) +  w0 + sigma0( w8));\n+    Round(a, b, c, d, e, f, g, h, 0x28db77f523047d84ull,  w8 += sigma1( w6) +  w1 + sigma0( w9));\n+    Round(h, a, b, c, d, e, f, g, 0x32caab7b40c72493ull,  w9 += sigma1( w7) +  w2 + sigma0(w10));\n+    Round(g, h, a, b, c, d, e, f, 0x3c9ebe0a15c9bebcull, w10 += sigma1( w8) +  w3 + sigma0(w11));\n+    Round(f, g, h, a, b, c, d, e, 0x431d67c49c100d4cull, w11 += sigma1( w9) +  w4 + sigma0(w12));\n+    Round(e, f, g, h, a, b, c, d, 0x4cc5d4becb3e42b6ull, w12 += sigma1(w10) +  w5 + sigma0(w13));\n+    Round(d, e, f, g, h, a, b, c, 0x597f299cfc657e2aull, w13 += sigma1(w11) +  w6 + sigma0(w14));\n+    Round(c, d, e, f, g, h, a, b, 0x5fcb6fab3ad6faecull, w14 += sigma1(w12) +  w7 + sigma0(w15));\n+    Round(b, c, d, e, f, g, h, a, 0x6c44198c4a475817ull, w15 += sigma1(w13) +  w8 + sigma0( w0));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+    s[5] += f;\n+    s[6] += g;\n+    s[7] += h;\n+}\n+\n+}  // namespace sha512\n+\n+}  // namespace\n+\n+\n+////// SHA-256\n+\n+CSHA256::CSHA256() : bytes(0) {\n+    sha256::Initialize(s);\n+}\n+\n+CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n+    const unsigned char *end = data + len;\n+    size_t bufsize = bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(buf + bufsize, data, 64 - bufsize);\n+        bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        sha256::Transform(s, buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        sha256::Transform(s, data);\n+        bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(buf + bufsize, data, end - data);\n+        bytes += end - data;\n+    }\n+    return *this;\n+}\n+\n+void CSHA256::Finalize(unsigned char *hash) {\n+    static const unsigned char pad[64] = {0x80};\n+    unsigned char sizedesc[8];\n+    WriteBE64(sizedesc, bytes << 3);\n+    Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n+    Write(sizedesc, 8);\n+    WriteBE32(hash, s[0]);\n+    WriteBE32(hash+4, s[1]);\n+    WriteBE32(hash+8, s[2]);\n+    WriteBE32(hash+12, s[3]);\n+    WriteBE32(hash+16, s[4]);\n+    WriteBE32(hash+20, s[5]);\n+    WriteBE32(hash+24, s[6]);\n+    WriteBE32(hash+28, s[7]);\n+}\n+\n+CSHA256& CSHA256::Reset() {\n+    bytes = 0;\n+    sha256::Initialize(s);\n+    return *this;\n+}\n+\n+////// SHA-512\n+\n+CSHA512::CSHA512() : bytes(0) {\n+    sha512::Initialize(s);\n+}\n+\n+CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n+    const unsigned char *end = data + len;\n+    size_t bufsize = bytes % 128;\n+    if (bufsize && bufsize + len >= 128) {\n+        // Fill the buffer, and process it.\n+        memcpy(buf + bufsize, data, 128 - bufsize);\n+        bytes += 128 - bufsize;\n+        data += 128 - bufsize;\n+        sha512::Transform(s, buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 128) {\n+        // Process full chunks directly from the source.\n+        sha512::Transform(s, data);\n+        data += 128;\n+        bytes += 128;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(buf + bufsize, data, end - data);\n+        bytes += end - data;\n+    }\n+    return *this;\n+}\n+\n+void CSHA512::Finalize(unsigned char *hash) {\n+    static const unsigned char pad[128] = {0x80};\n+    unsigned char sizedesc[16] = {0x00};\n+    WriteBE64(sizedesc+8, bytes << 3);\n+    Write(pad, 1 + ((239 - (bytes % 128)) % 128));\n+    Write(sizedesc, 16);\n+    WriteBE64(hash, s[0]);\n+    WriteBE64(hash+8, s[1]);\n+    WriteBE64(hash+16, s[2]);\n+    WriteBE64(hash+24, s[3]);\n+    WriteBE64(hash+32, s[4]);\n+    WriteBE64(hash+40, s[5]);\n+    WriteBE64(hash+48, s[6]);\n+    WriteBE64(hash+56, s[7]);\n+}\n+\n+CSHA512& CSHA512::Reset() {\n+    bytes = 0;\n+    sha512::Initialize(s);\n+    return *this;\n+}\n+\n+////// HMAC-SHA-512\n+\n+CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n+    unsigned char rkey[128];\n+    if (keylen <= 128) {\n+        memcpy(rkey, key, keylen);\n+        memset(rkey + keylen, 0, 128 - keylen);\n+    } else {\n+        CSHA512().Write(key, keylen).Finalize(rkey);\n+        memset(rkey + 64, 0, 64);\n+    }\n+\n+    for (int n=0; n<128; n++)\n+        rkey[n] ^= 0x5c;\n+    outer.Write(rkey, 128);\n+\n+    for (int n=0; n<128; n++)\n+        rkey[n] ^= 0x5c ^ 0x36;\n+    inner.Write(rkey, 128);\n+}\n+\n+void CHMAC_SHA512::Finalize(unsigned char *hash) {\n+    unsigned char temp[64];\n+    inner.Finalize(temp);\n+    outer.Write(temp, 64).Finalize(hash);\n+}"
      },
      {
        "sha": "001bfc647cde6ea6aa085d9d1de0fb04741b7bfa",
        "filename": "src/sha2.h",
        "status": "added",
        "additions": 54,
        "deletions": 0,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sha2.h?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SHA2_H\n+#define BITCOIN_SHA2_H\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** A hasher class for SHA-256. */\n+class CSHA256 {\n+private:\n+    uint32_t s[8];\n+    unsigned char buf[64];\n+    size_t bytes;\n+\n+public:\n+    CSHA256();\n+    CSHA256& Write(const unsigned char *data, size_t len);\n+    void Finalize(unsigned char *hash);\n+    CSHA256& Reset();\n+};\n+\n+/** A hasher class for SHA-512. */\n+class CSHA512 {\n+private:\n+    uint64_t s[8];\n+    unsigned char buf[128];\n+    size_t bytes;\n+\n+public:\n+    CSHA512();\n+    CSHA512& Write(const unsigned char *data, size_t len);\n+    void Finalize(unsigned char *hash);\n+    CSHA512& Reset();\n+};\n+\n+/** A hasher class for HMAC-SHA-512. */\n+class CHMAC_SHA512 {\n+private:\n+    CSHA512 outer;\n+    CSHA512 inner;\n+\n+public:\n+    CHMAC_SHA512(const unsigned char *key, size_t keylen);\n+    CHMAC_SHA512& Write(const unsigned char *data, size_t len) {\n+        inner.Write(data, len);\n+        return *this;\n+    }\n+    void Finalize(unsigned char *hash);\n+};\n+\n+#endif"
      },
      {
        "sha": "516b942ad3234c9334d0325601da631b89ce3994",
        "filename": "src/test/sha2_tests.cpp",
        "status": "renamed",
        "additions": 42,
        "deletions": 14,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/test/sha2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/977cdadea8a77eed04f1f0fd341ba9dedc3fa783/src/test/sha2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sha2_tests.cpp?ref=977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "patch": "@@ -1,15 +1,49 @@\n-// Copyright (c) 2013 The Bitcoin Core developers\n+// Copyright (c) 2014 The Bitcoin Core developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"hash.h\"\n+#include \"sha2.h\"\n #include \"util.h\"\n \n+#include <vector>\n+\n #include <boost/test/unit_test.hpp>\n \n-using namespace std;\n+BOOST_AUTO_TEST_SUITE(sha2_tests)\n+\n+void SHA256TestVector(const std::string &in, const std::string &out) {\n+    std::vector<unsigned char> hash;\n+    hash.resize(32);\n+    CSHA256().Write((unsigned char*)&in[0], in.size()).Finalize(&hash[0]);\n+    BOOST_CHECK_EQUAL(HexStr(hash), out);\n+}\n+\n+void SHA512TestVector(const std::string &in, const std::string &out) {\n+    std::vector<unsigned char> hash;\n+    hash.resize(64);\n+    CSHA512().Write((unsigned char*)&in[0], in.size()).Finalize(&hash[0]);\n+    BOOST_CHECK_EQUAL(HexStr(hash), out);\n+}\n \n-BOOST_AUTO_TEST_SUITE(hmac_tests)\n+BOOST_AUTO_TEST_CASE(sha256_testvectors) {\n+    SHA256TestVector(\"\", \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    SHA256TestVector(\"abc\", \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\");\n+    SHA256TestVector(\"message digest\", \"f7846f55cf23e14eebeab5b4e1550cad5b509e3348fbc4efa3a1413d393cb650\");\n+    SHA256TestVector(\"secure hash algorithm\", \"f30ceb2bb2829e79e4ca9753d35a8ecc00262d164cc077080295381cbd643f0d\");\n+    SHA256TestVector(\"SHA256 is considered to be safe\", \"6819d915c73f4d1e77e4e1b52d1fa0f9cf9beaead3939f15874bd988e2a23630\");\n+    SHA256TestVector(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\");\n+    SHA256TestVector(\"For this sample, this 63-byte string will be used as input data\", \"f08a78cbbaee082b052ae0708f32fa1e50c5c421aa772ba5dbb406a2ea6be342\");\n+    SHA256TestVector(\"This is exactly 64 bytes long, not counting the terminating byte\", \"ab64eff7e88e2e46165e29f2bce41826bd4c7b3552f6b382a9e7d3af47c245f8\");\n+    SHA256TestVector(\"As Bitcoin relies on 80 byte header hashes, we want to have an example for that.\", \"7406e8de7d6e4fffc573daef05aefb8806e7790f55eab5576f31349743cca743\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(sha512_testvectors) {\n+    SHA512TestVector(\"abc\", \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\");\n+    SHA512TestVector(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c33596fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445\");\n+    SHA512TestVector(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\", \"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\");\n+    SHA512TestVector(std::string(1000000, 'a'), \"e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973ebde0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b\");\n+    SHA512TestVector(\"\", \"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\");\n+}\n \n typedef struct {\n     const char *pszKey;\n@@ -111,18 +145,12 @@ BOOST_AUTO_TEST_CASE(hmacsha512_testvectors)\n {\n     for (unsigned int n=0; n<sizeof(vtest)/sizeof(vtest[0]); n++)\n     {\n-        vector<unsigned char> vchKey  = ParseHex(vtest[n].pszKey);\n-        vector<unsigned char> vchData = ParseHex(vtest[n].pszData);\n-        vector<unsigned char> vchMAC  = ParseHex(vtest[n].pszMAC);\n+        std::vector<unsigned char> vchKey  = ParseHex(vtest[n].pszKey);\n+        std::vector<unsigned char> vchData = ParseHex(vtest[n].pszData);\n+        std::vector<unsigned char> vchMAC  = ParseHex(vtest[n].pszMAC);\n         unsigned char vchTemp[64];\n-\n-        HMAC_SHA512_CTX ctx;\n-        HMAC_SHA512_Init(&ctx, &vchKey[0], vchKey.size());\n-        HMAC_SHA512_Update(&ctx, &vchData[0], vchData.size());\n-        HMAC_SHA512_Final(&vchTemp[0], &ctx);\n-\n+        CHMAC_SHA512(&vchKey[0], vchKey.size()).Write(&vchData[0], vchData.size()).Finalize(&vchTemp[0]);\n         BOOST_CHECK(memcmp(&vchTemp[0], &vchMAC[0], 64) == 0);\n-\n     }\n }\n ",
        "previous_filename": "src/test/hmac_tests.cpp"
      }
    ]
  },
  {
    "sha": "7b4737c87805b464cd47d01a9d814df5e41b8255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjQ3MzdjODc4MDViNDY0Y2Q0N2QwMWE5ZDgxNGRmNWU0MWI4MjU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-26T17:26:34Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:39Z"
      },
      "message": "Switch script.cpp and hash.cpp to use sha2.cpp instead of OpenSSL.",
      "tree": {
        "sha": "152f8a981d9ccaddd8599ebe57ab395e9cc83cec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/152f8a981d9ccaddd8599ebe57ab395e9cc83cec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b4737c87805b464cd47d01a9d814df5e41b8255",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b4737c87805b464cd47d01a9d814df5e41b8255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b4737c87805b464cd47d01a9d814df5e41b8255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b4737c87805b464cd47d01a9d814df5e41b8255/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/977cdadea8a77eed04f1f0fd341ba9dedc3fa783",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/977cdadea8a77eed04f1f0fd341ba9dedc3fa783"
      }
    ],
    "stats": {
      "total": 192,
      "additions": 111,
      "deletions": 81
    },
    "files": [
      {
        "sha": "9e7a67550fb6dd8f16c327c8212ef1d352181381",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 102,
        "deletions": 72,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b4737c87805b464cd47d01a9d814df5e41b8255/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b4737c87805b464cd47d01a9d814df5e41b8255/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=7b4737c87805b464cd47d01a9d814df5e41b8255",
        "patch": "@@ -6,55 +6,135 @@\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n+#include \"sha2.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"version.h\"\n \n #include <vector>\n \n #include <openssl/ripemd.h>\n-#include <openssl/sha.h>\n \n+/** A hasher class for Bitcoin's 256-bit hash (double SHA-256). */\n+class CHash256 {\n+private:\n+    CSHA256 sha;\n+public:\n+    void Finalize(unsigned char *hash) {\n+        unsigned char buf[32];\n+        sha.Finalize(buf);\n+        sha.Reset().Write(buf, 32).Finalize(hash);\n+    }\n+\n+    CHash256& Write(const unsigned char *data, size_t len) {\n+        sha.Write(data, len);\n+        return *this;\n+    }\n+\n+    CHash256& Reset() {\n+        sha.Reset();\n+        return *this;\n+    }\n+};\n+\n+/** A hasher class for Bitcoin's 160-bit hash (SHA-256 + RIPEMD-160). */\n+class CHash160 {\n+private:\n+    CSHA256 sha;\n+public:\n+    void Finalize(unsigned char *hash) {\n+        unsigned char buf[32];\n+        sha.Finalize(buf);\n+        RIPEMD160(buf, 32, hash);\n+    }\n+\n+    CHash160& Write(const unsigned char *data, size_t len) {\n+        sha.Write(data, len);\n+        return *this;\n+    }\n+\n+    CHash160& Reset() {\n+        sha.Reset();\n+        return *this;\n+    }\n+};\n+\n+/** Compute the 256-bit hash of an object. */\n template<typename T1>\n inline uint256 Hash(const T1 pbegin, const T1 pend)\n {\n-    static unsigned char pblank[1];\n-    uint256 hash1;\n-    SHA256((pbegin == pend ? pblank : (unsigned char*)&pbegin[0]), (pend - pbegin) * sizeof(pbegin[0]), (unsigned char*)&hash1);\n-    uint256 hash2;\n-    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n+}\n+\n+/** Compute the 256-bit hash of the concatenation of two objects. */\n+template<typename T1, typename T2>\n+inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+                    const T2 p2begin, const T2 p2end) {\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n+              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n+}\n+\n+/** Compute the 256-bit hash of the concatenation of three objects. */\n+template<typename T1, typename T2, typename T3>\n+inline uint256 Hash(const T1 p1begin, const T1 p1end,\n+                    const T2 p2begin, const T2 p2end,\n+                    const T3 p3begin, const T3 p3end) {\n+    static const unsigned char pblank[1] = {};\n+    uint256 result;\n+    CHash256().Write(p1begin == p1end ? pblank : (const unsigned char*)&p1begin[0], (p1end - p1begin) * sizeof(p1begin[0]))\n+              .Write(p2begin == p2end ? pblank : (const unsigned char*)&p2begin[0], (p2end - p2begin) * sizeof(p2begin[0]))\n+              .Write(p3begin == p3end ? pblank : (const unsigned char*)&p3begin[0], (p3end - p3begin) * sizeof(p3begin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n+}\n+\n+/** Compute the 160-bit hash an object. */\n+template<typename T1>\n+inline uint160 Hash160(const T1 pbegin, const T1 pend)\n+{\n+    static unsigned char pblank[1] = {};\n+    uint160 result;\n+    CHash160().Write(pbegin == pend ? pblank : (const unsigned char*)&pbegin[0], (pend - pbegin) * sizeof(pbegin[0]))\n+              .Finalize((unsigned char*)&result);\n+    return result;\n+}\n+\n+/** Compute the 160-bit hash of a vector. */\n+inline uint160 Hash160(const std::vector<unsigned char>& vch)\n+{\n+    return Hash160(vch.begin(), vch.end());\n }\n \n+/** A writer stream (for serialization) that computes a 256-bit hash. */\n class CHashWriter\n {\n private:\n-    SHA256_CTX ctx;\n+    CHash256 ctx;\n \n public:\n     int nType;\n     int nVersion;\n \n-    void Init() {\n-        SHA256_Init(&ctx);\n-    }\n-\n-    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {\n-        Init();\n-    }\n+    CHashWriter(int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn) {}\n \n     CHashWriter& write(const char *pch, size_t size) {\n-        SHA256_Update(&ctx, pch, size);\n+        ctx.Write((const unsigned char*)pch, size);\n         return (*this);\n     }\n \n     // invalidates the object\n     uint256 GetHash() {\n-        uint256 hash1;\n-        SHA256_Final((unsigned char*)&hash1, &ctx);\n-        uint256 hash2;\n-        SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-        return hash2;\n+        uint256 result;\n+        ctx.Finalize((unsigned char*)&result);\n+        return result;\n     }\n \n     template<typename T>\n@@ -65,41 +145,7 @@ class CHashWriter\n     }\n };\n \n-\n-template<typename T1, typename T2>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-                    const T2 p2begin, const T2 p2end)\n-{\n-    static unsigned char pblank[1];\n-    uint256 hash1;\n-    SHA256_CTX ctx;\n-    SHA256_Init(&ctx);\n-    SHA256_Update(&ctx, (p1begin == p1end ? pblank : (unsigned char*)&p1begin[0]), (p1end - p1begin) * sizeof(p1begin[0]));\n-    SHA256_Update(&ctx, (p2begin == p2end ? pblank : (unsigned char*)&p2begin[0]), (p2end - p2begin) * sizeof(p2begin[0]));\n-    SHA256_Final((unsigned char*)&hash1, &ctx);\n-    uint256 hash2;\n-    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n-}\n-\n-template<typename T1, typename T2, typename T3>\n-inline uint256 Hash(const T1 p1begin, const T1 p1end,\n-                    const T2 p2begin, const T2 p2end,\n-                    const T3 p3begin, const T3 p3end)\n-{\n-    static unsigned char pblank[1];\n-    uint256 hash1;\n-    SHA256_CTX ctx;\n-    SHA256_Init(&ctx);\n-    SHA256_Update(&ctx, (p1begin == p1end ? pblank : (unsigned char*)&p1begin[0]), (p1end - p1begin) * sizeof(p1begin[0]));\n-    SHA256_Update(&ctx, (p2begin == p2end ? pblank : (unsigned char*)&p2begin[0]), (p2end - p2begin) * sizeof(p2begin[0]));\n-    SHA256_Update(&ctx, (p3begin == p3end ? pblank : (unsigned char*)&p3begin[0]), (p3end - p3begin) * sizeof(p3begin[0]));\n-    SHA256_Final((unsigned char*)&hash1, &ctx);\n-    uint256 hash2;\n-    SHA256((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n-}\n-\n+/** Compute the 256-bit hash of an object's serialization. */\n template<typename T>\n uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n {\n@@ -108,22 +154,6 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL\n     return ss.GetHash();\n }\n \n-template<typename T1>\n-inline uint160 Hash160(const T1 pbegin, const T1 pend)\n-{\n-    static unsigned char pblank[1];\n-    uint256 hash1;\n-    SHA256((pbegin == pend ? pblank : (unsigned char*)&pbegin[0]), (pend - pbegin) * sizeof(pbegin[0]), (unsigned char*)&hash1);\n-    uint160 hash2;\n-    RIPEMD160((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2);\n-    return hash2;\n-}\n-\n-inline uint160 Hash160(const std::vector<unsigned char>& vch)\n-{\n-    return Hash160(vch.begin(), vch.end());\n-}\n-\n unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n \n #endif"
      },
      {
        "sha": "c48c9f0521baf23a1ac1dbecc30e85ef3029102b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b4737c87805b464cd47d01a9d814df5e41b8255/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b4737c87805b464cd47d01a9d814df5e41b8255/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=7b4737c87805b464cd47d01a9d814df5e41b8255",
        "patch": "@@ -12,7 +12,10 @@\n #include \"wallet.h\"\n #endif\n \n+#include <openssl/sha.h>\n+\n using namespace std;\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner"
      },
      {
        "sha": "f20c0bcca3d898a357ce54af391891a6a30cbb50",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b4737c87805b464cd47d01a9d814df5e41b8255/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b4737c87805b464cd47d01a9d814df5e41b8255/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=7b4737c87805b464cd47d01a9d814df5e41b8255",
        "patch": "@@ -9,10 +9,13 @@\n #include \"hash.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"sha2.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include <openssl/sha.h>\n+\n #include <boost/foreach.hpp>\n #include <boost/tuple/tuple.hpp>\n #include <boost/tuple/tuple_comparison.hpp>\n@@ -805,17 +808,11 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     else if (opcode == OP_SHA1)\n                         SHA1(&vch[0], vch.size(), &vchHash[0]);\n                     else if (opcode == OP_SHA256)\n-                        SHA256(&vch[0], vch.size(), &vchHash[0]);\n+                        CSHA256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n                     else if (opcode == OP_HASH160)\n-                    {\n-                        uint160 hash160 = Hash160(vch);\n-                        memcpy(&vchHash[0], &hash160, sizeof(hash160));\n-                    }\n+                        CHash160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n                     else if (opcode == OP_HASH256)\n-                    {\n-                        uint256 hash = Hash(vch.begin(), vch.end());\n-                        memcpy(&vchHash[0], &hash, sizeof(hash));\n-                    }\n+                        CHash256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n                     popstack(stack);\n                     stack.push_back(vchHash);\n                 }"
      }
    ]
  },
  {
    "sha": "cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjBjNDdiMjY5OGEzZTIzNjU0ZDlmZDI0ZjZiMmVmOTY4OWJkZTNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-28T10:52:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:39Z"
      },
      "message": "Remove getwork() RPC call",
      "tree": {
        "sha": "9e3b06e1a027e26a988cf50fb9984d964f6e4e14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e3b06e1a027e26a988cf50fb9984d964f6e4e14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b4737c87805b464cd47d01a9d814df5e41b8255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b4737c87805b464cd47d01a9d814df5e41b8255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b4737c87805b464cd47d01a9d814df5e41b8255"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 1,
      "deletions": 165
    },
    "files": [
      {
        "sha": "12d2d1bb4428e7596b2b490b355cb4ed1761d499",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
        "patch": "@@ -116,7 +116,6 @@ void Shutdown()\n     RenameThread(\"bitcoin-shutoff\");\n     mempool.AddTransactionsUpdated(1);\n     StopRPCThreads();\n-    ShutdownRPCMining();\n #ifdef ENABLE_WALLET\n     if (pwalletMain)\n         bitdb.Flush(false);\n@@ -1148,8 +1147,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n #endif\n \n     StartNode(threadGroup);\n-    // InitRPCMining is needed here so getwork/getblocktemplate in the GUI debug console works properly.\n-    InitRPCMining();\n     if (fServer)\n         StartRPCThreads();\n "
      },
      {
        "sha": "a1410f0e41392e53a625c8ed32f86ebca5756ade",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 159,
        "changes": 159,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
        "patch": "@@ -24,36 +24,6 @@\n using namespace json_spirit;\n using namespace std;\n \n-#ifdef ENABLE_WALLET\n-// Key used by getwork miners.\n-// Allocated in InitRPCMining, free'd in ShutdownRPCMining\n-static CReserveKey* pMiningKey = NULL;\n-\n-void InitRPCMining()\n-{\n-    if (!pwalletMain)\n-        return;\n-\n-    // getwork/getblocktemplate mining rewards paid here:\n-    pMiningKey = new CReserveKey(pwalletMain);\n-}\n-\n-void ShutdownRPCMining()\n-{\n-    if (!pMiningKey)\n-        return;\n-\n-    delete pMiningKey; pMiningKey = NULL;\n-}\n-#else\n-void InitRPCMining()\n-{\n-}\n-void ShutdownRPCMining()\n-{\n-}\n-#endif\n-\n // Return average network hashes per second based on the last 'lookup' blocks,\n // or from the last difficulty change if 'lookup' is nonpositive.\n // If 'height' is nonnegative, compute the estimate at the time when a given block was found.\n@@ -131,9 +101,6 @@ Value getgenerate(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"getgenerate\", \"\")\n         );\n \n-    if (!pMiningKey)\n-        return false;\n-\n     return GetBoolArg(\"-gen\", false);\n }\n \n@@ -279,132 +246,6 @@ Value getmininginfo(const Array& params, bool fHelp)\n }\n \n \n-#ifdef ENABLE_WALLET\n-Value getwork(const Array& params, bool fHelp)\n-{\n-    if (fHelp || params.size() > 1)\n-        throw runtime_error(\n-            \"getwork ( \\\"data\\\" )\\n\"\n-            \"\\nIf 'data' is not specified, it returns the formatted hash data to work on.\\n\"\n-            \"If 'data' is specified, tries to solve the block and returns true if it was successful.\\n\"\n-            \"\\nArguments:\\n\"\n-            \"1. \\\"data\\\"       (string, optional) The hex encoded data to solve\\n\"\n-            \"\\nResult (when 'data' is not specified):\\n\"\n-            \"{\\n\"\n-            \"  \\\"midstate\\\" : \\\"xxxx\\\",   (string) The precomputed hash state after hashing the first half of the data (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"data\\\" : \\\"xxxxx\\\",      (string) The block data\\n\"\n-            \"  \\\"hash1\\\" : \\\"xxxxx\\\",     (string) The formatted hash buffer for second hash (DEPRECATED)\\n\" // deprecated\n-            \"  \\\"target\\\" : \\\"xxxx\\\"      (string) The little endian hash target\\n\"\n-            \"}\\n\"\n-            \"\\nResult (when 'data' is specified):\\n\"\n-            \"true|false       (boolean) If solving the block specified in the 'data' was successfull\\n\"\n-            \"\\nExamples:\\n\"\n-            + HelpExampleCli(\"getwork\", \"\")\n-            + HelpExampleRpc(\"getwork\", \"\")\n-        );\n-\n-    if (vNodes.empty())\n-        throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, \"Bitcoin is not connected!\");\n-\n-    if (IsInitialBlockDownload())\n-        throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, \"Bitcoin is downloading blocks...\");\n-\n-    typedef map<uint256, pair<CBlock*, CScript> > mapNewBlock_t;\n-    static mapNewBlock_t mapNewBlock;    // FIXME: thread safety\n-    static vector<CBlockTemplate*> vNewBlockTemplate;\n-\n-    if (params.size() == 0)\n-    {\n-        // Update block\n-        static unsigned int nTransactionsUpdatedLast;\n-        static CBlockIndex* pindexPrev;\n-        static int64_t nStart;\n-        static CBlockTemplate* pblocktemplate;\n-        if (pindexPrev != chainActive.Tip() ||\n-            (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60))\n-        {\n-            if (pindexPrev != chainActive.Tip())\n-            {\n-                // Deallocate old blocks since they're obsolete now\n-                mapNewBlock.clear();\n-                BOOST_FOREACH(CBlockTemplate* pblocktemplate, vNewBlockTemplate)\n-                    delete pblocktemplate;\n-                vNewBlockTemplate.clear();\n-            }\n-\n-            // Clear pindexPrev so future getworks make a new block, despite any failures from here on\n-            pindexPrev = NULL;\n-\n-            // Store the pindexBest used before CreateNewBlock, to avoid races\n-            nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n-            CBlockIndex* pindexPrevNew = chainActive.Tip();\n-            nStart = GetTime();\n-\n-            // Create new block\n-            pblocktemplate = CreateNewBlockWithKey(*pMiningKey);\n-            if (!pblocktemplate)\n-                throw JSONRPCError(RPC_OUT_OF_MEMORY, \"Out of memory\");\n-            vNewBlockTemplate.push_back(pblocktemplate);\n-\n-            // Need to update only after we know CreateNewBlock succeeded\n-            pindexPrev = pindexPrevNew;\n-        }\n-        CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n-\n-        // Update nTime\n-        UpdateTime(*pblock, pindexPrev);\n-        pblock->nNonce = 0;\n-\n-        // Update nExtraNonce\n-        static unsigned int nExtraNonce = 0;\n-        IncrementExtraNonce(pblock, pindexPrev, nExtraNonce);\n-\n-        // Save\n-        mapNewBlock[pblock->hashMerkleRoot] = make_pair(pblock, pblock->vtx[0].vin[0].scriptSig);\n-\n-        // Pre-build hash buffers\n-        char pmidstate[32];\n-        char pdata[128];\n-        char phash1[64];\n-        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n-\n-        uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n-\n-        Object result;\n-        result.push_back(Pair(\"midstate\", HexStr(BEGIN(pmidstate), END(pmidstate)))); // deprecated\n-        result.push_back(Pair(\"data\",     HexStr(BEGIN(pdata), END(pdata))));\n-        result.push_back(Pair(\"hash1\",    HexStr(BEGIN(phash1), END(phash1)))); // deprecated\n-        result.push_back(Pair(\"target\",   HexStr(BEGIN(hashTarget), END(hashTarget))));\n-        return result;\n-    }\n-    else\n-    {\n-        // Parse parameters\n-        vector<unsigned char> vchData = ParseHex(params[0].get_str());\n-        if (vchData.size() != 128)\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n-        CBlock* pdata = (CBlock*)&vchData[0];\n-\n-        // Byte reverse\n-        for (int i = 0; i < 128/4; i++)\n-            ((unsigned int*)pdata)[i] = ByteReverse(((unsigned int*)pdata)[i]);\n-\n-        // Get saved block\n-        if (!mapNewBlock.count(pdata->hashMerkleRoot))\n-            return false;\n-        CBlock* pblock = mapNewBlock[pdata->hashMerkleRoot].first;\n-\n-        pblock->nTime = pdata->nTime;\n-        pblock->nNonce = pdata->nNonce;\n-        pblock->vtx[0].vin[0].scriptSig = mapNewBlock[pdata->hashMerkleRoot].second;\n-        pblock->hashMerkleRoot = pblock->BuildMerkleTree();\n-\n-        assert(pwalletMain != NULL);\n-        return CheckWork(pblock, *pwalletMain, *pMiningKey);\n-    }\n-}\n-#endif\n-\n Value getblocktemplate(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)"
      },
      {
        "sha": "93da81e42959dd81e3f7fcc26259eb84cc30cdd7",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
        "patch": "@@ -315,7 +315,6 @@ static const CRPCCommand vRPCCommands[] =\n     /* Wallet-enabled mining */\n     { \"getgenerate\",            &getgenerate,            true,      false,      false },\n     { \"gethashespersec\",        &gethashespersec,        true,      false,      false },\n-    { \"getwork\",                &getwork,                true,      false,      true  },\n     { \"setgenerate\",            &setgenerate,            true,      true,       false },\n #endif // ENABLE_WALLET\n };\n@@ -772,7 +771,7 @@ void JSONRequest::parse(const Value& valRequest)\n     if (valMethod.type() != str_type)\n         throw JSONRPCError(RPC_INVALID_REQUEST, \"Method must be a string\");\n     strMethod = valMethod.get_str();\n-    if (strMethod != \"getwork\" && strMethod != \"getblocktemplate\")\n+    if (strMethod != \"getblocktemplate\")\n         LogPrint(\"rpc\", \"ThreadRPCServer method=%s\\n\", strMethod);\n \n     // Parse params"
      },
      {
        "sha": "5271542385052d1229f218ca22013dee3f1c7799",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
        "patch": "@@ -130,7 +130,6 @@ extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHe\n extern json_spirit::Value getnetworkhashps(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value gethashespersec(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getmininginfo(const json_spirit::Array& params, bool fHelp);\n-extern json_spirit::Value getwork(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getblocktemplate(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value submitblock(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value estimatefee(const json_spirit::Array& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "85aab2a08824a83a535e6dfee4c150b25ebaf9de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWFhYjJhMDg4MjRhODNhNTM1ZTZkZmVlNGMxNTBiMjVlYmFmOWRl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-27T21:34:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:39Z"
      },
      "message": "Switch miner.cpp to use sha2 instead of OpenSSL.",
      "tree": {
        "sha": "9e577b5f1845dc0ce4c4d524447c8274ac663d8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e577b5f1845dc0ce4c4d524447c8274ac663d8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85aab2a08824a83a535e6dfee4c150b25ebaf9de",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aab2a08824a83a535e6dfee4c150b25ebaf9de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85aab2a08824a83a535e6dfee4c150b25ebaf9de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aab2a08824a83a535e6dfee4c150b25ebaf9de/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf0c47b2698a3e23654d9fd24f6b2ef9689bde3d"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 29,
      "deletions": 165
    },
    "files": [
      {
        "sha": "7efca7cfff854f36fd299f5988604eacfd19e418",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 133,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85aab2a08824a83a535e6dfee4c150b25ebaf9de/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85aab2a08824a83a535e6dfee4c150b25ebaf9de/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=85aab2a08824a83a535e6dfee4c150b25ebaf9de",
        "patch": "@@ -6,57 +6,20 @@\n #include \"miner.h\"\n \n #include \"core.h\"\n+#include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif\n \n-#include <openssl/sha.h>\n-\n using namespace std;\n \n //////////////////////////////////////////////////////////////////////////////\n //\n // BitcoinMiner\n //\n \n-int static FormatHashBlocks(void* pbuffer, unsigned int len)\n-{\n-    unsigned char* pdata = (unsigned char*)pbuffer;\n-    unsigned int blocks = 1 + ((len + 8) / 64);\n-    unsigned char* pend = pdata + 64 * blocks;\n-    memset(pdata + len, 0, 64 * blocks - len);\n-    pdata[len] = 0x80;\n-    unsigned int bits = len * 8;\n-    pend[-1] = (bits >> 0) & 0xff;\n-    pend[-2] = (bits >> 8) & 0xff;\n-    pend[-3] = (bits >> 16) & 0xff;\n-    pend[-4] = (bits >> 24) & 0xff;\n-    return blocks;\n-}\n-\n-static const unsigned int pSHA256InitState[8] =\n-{0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};\n-\n-void SHA256Transform(void* pstate, void* pinput, const void* pinit)\n-{\n-    SHA256_CTX ctx;\n-    unsigned char data[64];\n-\n-    SHA256_Init(&ctx);\n-\n-    for (int i = 0; i < 16; i++)\n-        ((uint32_t*)data)[i] = ByteReverse(((uint32_t*)pinput)[i]);\n-\n-    for (int i = 0; i < 8; i++)\n-        ctx.h[i] = ((uint32_t*)pinit)[i];\n-\n-    SHA256_Update(&ctx, data, sizeof(data));\n-    for (int i = 0; i < 8; i++)\n-        ((uint32_t*)pstate)[i] = ctx.h[i];\n-}\n-\n //\n // Unconfirmed transactions in the memory pool often depend on other\n // transactions in the memory pool. When we select transactions from the\n@@ -372,51 +335,6 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n }\n \n \n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1)\n-{\n-    //\n-    // Pre-build hash buffers\n-    //\n-    struct\n-    {\n-        struct unnamed2\n-        {\n-            int nVersion;\n-            uint256 hashPrevBlock;\n-            uint256 hashMerkleRoot;\n-            unsigned int nTime;\n-            unsigned int nBits;\n-            unsigned int nNonce;\n-        }\n-        block;\n-        unsigned char pchPadding0[64];\n-        uint256 hash1;\n-        unsigned char pchPadding1[64];\n-    }\n-    tmp;\n-    memset(&tmp, 0, sizeof(tmp));\n-\n-    tmp.block.nVersion       = pblock->nVersion;\n-    tmp.block.hashPrevBlock  = pblock->hashPrevBlock;\n-    tmp.block.hashMerkleRoot = pblock->hashMerkleRoot;\n-    tmp.block.nTime          = pblock->nTime;\n-    tmp.block.nBits          = pblock->nBits;\n-    tmp.block.nNonce         = pblock->nNonce;\n-\n-    FormatHashBlocks(&tmp.block, sizeof(tmp.block));\n-    FormatHashBlocks(&tmp.hash1, sizeof(tmp.hash1));\n-\n-    // Byte swap all the input buffer\n-    for (unsigned int i = 0; i < sizeof(tmp)/4; i++)\n-        ((unsigned int*)&tmp)[i] = ByteReverse(((unsigned int*)&tmp)[i]);\n-\n-    // Precalc the first half of the first hash, which stays constant\n-    SHA256Transform(pmidstate, &tmp.block, pSHA256InitState);\n-\n-    memcpy(pdata, &tmp.block, 128);\n-    memcpy(phash1, &tmp.hash1, 64);\n-}\n-\n #ifdef ENABLE_WALLET\n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -427,34 +345,33 @@ int64_t nHPSTimerStart = 0;\n \n //\n // ScanHash scans nonces looking for a hash with at least some zero bits.\n-// It operates on big endian data.  Caller does the byte reversing.\n-// All input buffers are 16-byte aligned.  nNonce is usually preserved\n-// between calls, but periodically or if nNonce is 0xffff0000 or above,\n-// the block is rebuilt and nNonce starts over at zero.\n+// The nonce is usually preserved between calls, but periodically or if the\n+// nonce is 0xffff0000 or above, the block is rebuilt and nNonce starts over at\n+// zero.\n //\n-unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1, char* phash, unsigned int& nHashesDone)\n-{\n-    unsigned int& nNonce = *(unsigned int*)(pdata + 12);\n-    for (;;)\n-    {\n-        // Crypto++ SHA256\n-        // Hash pdata using pmidstate as the starting state into\n-        // pre-formatted buffer phash1, then hash phash1 into phash\n+bool static ScanHash(const CBlockHeader *pblock, uint32_t& nNonce, uint256 *phash) {\n+    // Write the first 76 bytes of the block header to a double-SHA256 state.\n+    CHash256 hasher;\n+    CDataStream ss(SER_NETWORK, PROTOCOL_VERSION);\n+    ss << *pblock;\n+    assert(ss.size() == 80);\n+    hasher.Write((unsigned char*)&ss[0], 76);\n+\n+    for (;;) {\n         nNonce++;\n-        SHA256Transform(phash1, pdata, pmidstate);\n-        SHA256Transform(phash, phash1, pSHA256InitState);\n+\n+        // Write the last 4 bytes of the block header (the nonce) to a copy of\n+        // the double-SHA256 state, and compute the result.\n+        CHash256(hasher).Write((unsigned char*)&nNonce, 4).Finalize((unsigned char*)phash);\n \n         // Return the nonce if the hash has at least some zero bits,\n         // caller will check if it has enough to reach the target\n-        if (((unsigned short*)phash)[14] == 0)\n-            return nNonce;\n+        if (((uint16_t*)phash)[15] == 0)\n+            return true;\n \n         // If nothing found after trying for a while, return -1\n         if ((nNonce & 0xffff) == 0)\n-        {\n-            nHashesDone = 0xffff+1;\n-            return (unsigned int) -1;\n-        }\n+            return false;\n         if ((nNonce & 0xfff) == 0)\n             boost::this_thread::interruption_point();\n     }\n@@ -541,46 +458,27 @@ void static BitcoinMiner(CWallet *pwallet)\n         LogPrintf(\"Running BitcoinMiner with %u transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n \n-        //\n-        // Pre-build hash buffers\n-        //\n-        char pmidstatebuf[32+16]; char* pmidstate = alignup<16>(pmidstatebuf);\n-        char pdatabuf[128+16];    char* pdata     = alignup<16>(pdatabuf);\n-        char phash1buf[64+16];    char* phash1    = alignup<16>(phash1buf);\n-\n-        FormatHashBuffers(pblock, pmidstate, pdata, phash1);\n-\n-        unsigned int& nBlockTime = *(unsigned int*)(pdata + 64 + 4);\n-        unsigned int& nBlockBits = *(unsigned int*)(pdata + 64 + 8);\n-        unsigned int& nBlockNonce = *(unsigned int*)(pdata + 64 + 12);\n-\n-\n         //\n         // Search\n         //\n         int64_t nStart = GetTime();\n         uint256 hashTarget = uint256().SetCompact(pblock->nBits);\n-        uint256 hashbuf[2];\n-        uint256& hash = *alignup<16>(hashbuf);\n+        uint256 hash;\n+        uint32_t nNonce = 0;\n+        uint32_t nOldNonce = 0;\n         while (true)\n         {\n-            unsigned int nHashesDone = 0;\n-            unsigned int nNonceFound;\n-\n-            // Crypto++ SHA256\n-            nNonceFound = ScanHash_CryptoPP(pmidstate, pdata + 64, phash1,\n-                                            (char*)&hash, nHashesDone);\n+            bool fFound = ScanHash(pblock, nNonce, &hash);\n+            uint32_t nHashesDone = nNonce - nOldNonce;\n+            nOldNonce = nNonce;\n \n             // Check if something found\n-            if (nNonceFound != (unsigned int) -1)\n+            if (fFound)\n             {\n-                for (unsigned int i = 0; i < sizeof(hash)/4; i++)\n-                    ((unsigned int*)&hash)[i] = ByteReverse(((unsigned int*)&hash)[i]);\n-\n                 if (hash <= hashTarget)\n                 {\n                     // Found a solution\n-                    pblock->nNonce = ByteReverse(nNonceFound);\n+                    pblock->nNonce = nNonce;\n                     assert(hash == pblock->GetHash());\n \n                     SetThreadPriority(THREAD_PRIORITY_NORMAL);\n@@ -629,7 +527,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             // Regtest mode doesn't require peers\n             if (vNodes.empty() && Params().MiningRequiresPeers())\n                 break;\n-            if (nBlockNonce >= 0xffff0000)\n+            if (nNonce >= 0xffff0000)\n                 break;\n             if (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60)\n                 break;\n@@ -638,11 +536,9 @@ void static BitcoinMiner(CWallet *pwallet)\n \n             // Update nTime every few seconds\n             UpdateTime(*pblock, pindexPrev);\n-            nBlockTime = ByteReverse(pblock->nTime);\n             if (Params().AllowMinDifficultyBlocks())\n             {\n                 // Changing pblock->nTime can change work required on testnet:\n-                nBlockBits = ByteReverse(pblock->nBits);\n                 hashTarget.SetCompact(pblock->nBits);\n             }\n         }"
      },
      {
        "sha": "1fa499dc5b9fa484f5fd2f95ebf607e0cc951ae8",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85aab2a08824a83a535e6dfee4c150b25ebaf9de/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85aab2a08824a83a535e6dfee4c150b25ebaf9de/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=85aab2a08824a83a535e6dfee4c150b25ebaf9de",
        "patch": "@@ -23,12 +23,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n CBlockTemplate* CreateNewBlockWithKey(CReserveKey& reservekey);\n /** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n-/** Do mining precalculation */\n-void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n /** Check mined block */\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n-/** Base sha256 mining transform */\n-void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n \n extern double dHashesPerSec;\n extern int64_t nHPSTimerStart;"
      },
      {
        "sha": "bff6de41a3263306ea361e9294a34a2e5d52f383",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85aab2a08824a83a535e6dfee4c150b25ebaf9de/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85aab2a08824a83a535e6dfee4c150b25ebaf9de/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=85aab2a08824a83a535e6dfee4c150b25ebaf9de",
        "patch": "@@ -9,8 +9,6 @@\n \n #include <boost/test/unit_test.hpp>\n \n-extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n-\n BOOST_AUTO_TEST_SUITE(miner_tests)\n \n static\n@@ -259,30 +257,4 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n }\n \n-BOOST_AUTO_TEST_CASE(sha256transform_equality)\n-{\n-    unsigned int pSHA256InitState[8] = {0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19};\n-\n-\n-    // unsigned char pstate[32];\n-    unsigned char pinput[64];\n-\n-    int i;\n-\n-    for (i = 0; i < 32; i++) {\n-        pinput[i] = i;\n-        pinput[i+32] = 0;\n-    }\n-\n-    uint256 hash;\n-\n-    SHA256Transform(&hash, pinput, pSHA256InitState);\n-\n-    BOOST_TEST_MESSAGE(hash.GetHex());\n-\n-    uint256 hash_reference(\"0x2df5e1c65ef9f8cde240d23cae2ec036d31a15ec64bc68f64be242b1da6631f3\");\n-\n-    BOOST_CHECK(hash == hash_reference);\n-}\n-\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "1cc344ce42d8dddd6356c89ef3ceb58418676816",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2MzNDRjZTQyZDhkZGRkNjM1NmM4OWVmM2NlYjU4NDE4Njc2ODE2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-28T01:09:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:39Z"
      },
      "message": "Add built-in SHA-1 implementation.",
      "tree": {
        "sha": "36577c13adeaa82a546e3d9b5a6bb37c45c180f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36577c13adeaa82a546e3d9b5a6bb37c45c180f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cc344ce42d8dddd6356c89ef3ceb58418676816",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc344ce42d8dddd6356c89ef3ceb58418676816",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cc344ce42d8dddd6356c89ef3ceb58418676816",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc344ce42d8dddd6356c89ef3ceb58418676816/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85aab2a08824a83a535e6dfee4c150b25ebaf9de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85aab2a08824a83a535e6dfee4c150b25ebaf9de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85aab2a08824a83a535e6dfee4c150b25ebaf9de"
      }
    ],
    "stats": {
      "total": 265,
      "additions": 262,
      "deletions": 3
    },
    "files": [
      {
        "sha": "67b069bde146cc6aee879253eee1911fd73f3022",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "patch": "@@ -76,6 +76,7 @@ BITCOIN_CORE_H = \\\n   script.h \\\n   serialize.h \\\n   sha2.h \\\n+  sha1.h \\\n   sync.h \\\n   threadsafety.h \\\n   tinyformat.h \\\n@@ -153,6 +154,7 @@ libbitcoin_common_a_SOURCES = \\\n   protocol.cpp \\\n   rpcprotocol.cpp \\\n   script.cpp \\\n+  sha1.cpp \\\n   sha2.cpp \\\n   sync.cpp \\\n   util.cpp \\"
      },
      {
        "sha": "7cf441bd6cb260d19f8e27011a9720f50e80fe98",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "patch": "@@ -45,6 +45,7 @@ BITCOIN_TESTS =\\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n   test/serialize_tests.cpp \\\n+  test/sha1_tests.cpp \\\n   test/sha2_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/test_bitcoin.cpp \\"
      },
      {
        "sha": "facf3044d6be5444a3b75ac589c6883761aae3bf",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "patch": "@@ -9,13 +9,12 @@\n #include \"hash.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n+#include \"sha1.h\"\n #include \"sha2.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n-#include <openssl/sha.h>\n-\n #include <boost/foreach.hpp>\n #include <boost/tuple/tuple.hpp>\n #include <boost/tuple/tuple_comparison.hpp>\n@@ -806,7 +805,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     if (opcode == OP_RIPEMD160)\n                         RIPEMD160(&vch[0], vch.size(), &vchHash[0]);\n                     else if (opcode == OP_SHA1)\n-                        SHA1(&vch[0], vch.size(), &vchHash[0]);\n+                        CSHA1().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n                     else if (opcode == OP_SHA256)\n                         CSHA256().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n                     else if (opcode == OP_HASH160)"
      },
      {
        "sha": "0a70077544833f3b7aed99e3bf572211ddd6619b",
        "filename": "src/sha1.cpp",
        "status": "added",
        "additions": 205,
        "deletions": 0,
        "changes": 205,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sha1.cpp?ref=1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "patch": "@@ -0,0 +1,205 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"sha1.h\"\n+\n+#include <string.h>\n+\n+// Internal implementation code.\n+namespace {\n+\n+/** Read 4 bytes, and interpret them as a 32-bit unsigned big-endian integer. */\n+uint32_t inline ReadBE32(const unsigned char *data) {\n+    return ((uint32_t)data[0] << 24 | (uint32_t)data[1] << 16 | (uint32_t)data[2] << 8 | (uint32_t)data[3]);\n+}\n+\n+/** Write a 32-bit unsigned big-endian integer. */\n+void inline WriteBE32(unsigned char *data, uint32_t x) {\n+    data[0] = x >> 24;\n+    data[1] = x >> 16;\n+    data[2] = x >> 8;\n+    data[3] = x;\n+}\n+\n+/// Internal SHA-1 implementation.\n+namespace sha1 {\n+\n+/** One round of SHA-1. */\n+void inline Round(uint32_t a, uint32_t &b, uint32_t c, uint32_t d, uint32_t &e,\n+                  uint32_t f, uint32_t k, uint32_t w) {\n+    e += ((a << 5) | (a >> 27)) + f + k + w;\n+    b = (b << 30) | (b >> 2);\n+}\n+\n+uint32_t inline f1(uint32_t b, uint32_t c, uint32_t d) { return d ^ (b & (c ^ d)); }\n+uint32_t inline f2(uint32_t b, uint32_t c, uint32_t d) { return b ^ c ^ d; }\n+uint32_t inline f3(uint32_t b, uint32_t c, uint32_t d) { return (b & c) | (d & (b | c)); }\n+\n+uint32_t inline left(uint32_t x) { return (x << 1) | (x >> 31); }\n+\n+/** Initialize SHA-1 state. */\n+void inline Initialize(uint32_t *s) {\n+    s[0] = 0x67452301ul;\n+    s[1] = 0xEFCDAB89ul;\n+    s[2] = 0x98BADCFEul;\n+    s[3] = 0x10325476ul;\n+    s[4] = 0xC3D2E1F0ul;\n+}\n+\n+const uint32_t k1 = 0x5A827999ul;\n+const uint32_t k2 = 0x6ED9EBA1ul;\n+const uint32_t k3 = 0x8F1BBCDCul;\n+const uint32_t k4 = 0xCA62C1D6ul;\n+\n+/** Perform a SHA-1 transformation, processing a 64-byte chunk. */\n+void Transform(uint32_t *s, const unsigned char *chunk) {\n+    uint32_t a = s[0], b = s[1], c = s[2], d = s[3], e = s[4];\n+    uint32_t w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15;\n+\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w0  = ReadBE32(chunk +  0));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w1  = ReadBE32(chunk +  4));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w2  = ReadBE32(chunk +  8));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w3  = ReadBE32(chunk + 12));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w4  = ReadBE32(chunk + 16));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w5  = ReadBE32(chunk + 20));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w6  = ReadBE32(chunk + 24));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w7  = ReadBE32(chunk + 28));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w8  = ReadBE32(chunk + 32));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w9  = ReadBE32(chunk + 36));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w10 = ReadBE32(chunk + 40));\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w11 = ReadBE32(chunk + 44));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w12 = ReadBE32(chunk + 48));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w13 = ReadBE32(chunk + 52));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w14 = ReadBE32(chunk + 56));\n+    Round(a, b, c, d, e, f1(b, c, d), k1, w15 = ReadBE32(chunk + 60));\n+\n+    Round(e, a, b, c, d, f1(a, b, c), k1, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n+    Round(d, e, a, b, c, f1(e, a, b), k1, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n+    Round(c, d, e, a, b, f1(d, e, a), k1, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n+    Round(b, c, d, e, a, f1(c, d, e), k1, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n+\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n+    Round(a, b, c, d, e, f2(b, c, d), k2, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n+    Round(e, a, b, c, d, f2(a, b, c), k2, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n+    Round(d, e, a, b, c, f2(e, a, b), k2, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n+    Round(c, d, e, a, b, f2(d, e, a), k2, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n+    Round(b, c, d, e, a, f2(c, d, e), k2, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n+\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n+    Round(a, b, c, d, e, f3(b, c, d), k3, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n+    Round(e, a, b, c, d, f3(a, b, c), k3, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n+    Round(d, e, a, b, c, f3(e, a, b), k3, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n+    Round(c, d, e, a, b, f3(d, e, a), k3, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n+    Round(b, c, d, e, a, f3(c, d, e), k3, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w13 = left(w13 ^ w10 ^ w5  ^ w15));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w14 = left(w14 ^ w11 ^ w6  ^ w0 ));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w15 = left(w15 ^ w12 ^ w7  ^ w1 ));\n+\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w0  = left(w0  ^ w13 ^ w8  ^ w2 ));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w1  = left(w1  ^ w14 ^ w9  ^ w3 ));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w2  = left(w2  ^ w15 ^ w10 ^ w4 ));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w3  = left(w3  ^ w0  ^ w11 ^ w5 ));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w4  = left(w4  ^ w1  ^ w12 ^ w6 ));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w5  = left(w5  ^ w2  ^ w13 ^ w7 ));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w6  = left(w6  ^ w3  ^ w14 ^ w8 ));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w7  = left(w7  ^ w4  ^ w15 ^ w9 ));\n+    Round(d, e, a, b, c, f2(e, a, b), k4, w8  = left(w8  ^ w5  ^ w0  ^ w10));\n+    Round(c, d, e, a, b, f2(d, e, a), k4, w9  = left(w9  ^ w6  ^ w1  ^ w11));\n+    Round(b, c, d, e, a, f2(c, d, e), k4, w10 = left(w10 ^ w7  ^ w2  ^ w12));\n+    Round(a, b, c, d, e, f2(b, c, d), k4, w11 = left(w11 ^ w8  ^ w3  ^ w13));\n+    Round(e, a, b, c, d, f2(a, b, c), k4, w12 = left(w12 ^ w9  ^ w4  ^ w14));\n+    Round(d, e, a, b, c, f2(e, a, b), k4,       left(w13 ^ w10 ^ w5  ^ w15));\n+    Round(c, d, e, a, b, f2(d, e, a), k4,       left(w14 ^ w11 ^ w6  ^ w0 ));\n+    Round(b, c, d, e, a, f2(c, d, e), k4,       left(w15 ^ w12 ^ w7  ^ w1 ));\n+\n+    s[0] += a;\n+    s[1] += b;\n+    s[2] += c;\n+    s[3] += d;\n+    s[4] += e;\n+}\n+\n+}  // namespace sha1\n+\n+}  // namespace\n+\n+////// SHA1\n+\n+CSHA1::CSHA1() : bytes(0) {\n+    sha1::Initialize(s);\n+}\n+\n+CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n+    const unsigned char *end = data + len;\n+    size_t bufsize = bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(buf + bufsize, data, 64 - bufsize);\n+        bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        sha1::Transform(s, buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        sha1::Transform(s, data);\n+        bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(buf + bufsize, data, end - data);\n+        bytes += end - data;\n+    }\n+    return *this;\n+}\n+\n+void CSHA1::Finalize(unsigned char *hash) {\n+    static const unsigned char pad[64] = {0x80};\n+    unsigned char sizedesc[8];\n+    WriteBE32(sizedesc, bytes >> 29);\n+    WriteBE32(sizedesc+4, bytes << 3);\n+    Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n+    Write(sizedesc, 8);\n+    WriteBE32(hash, s[0]);\n+    WriteBE32(hash+4, s[1]);\n+    WriteBE32(hash+8, s[2]);\n+    WriteBE32(hash+12, s[3]);\n+    WriteBE32(hash+16, s[4]);\n+}\n+\n+CSHA1& CSHA1::Reset() {\n+    bytes = 0;\n+    sha1::Initialize(s);\n+    return *this;\n+}"
      },
      {
        "sha": "6efde78a5b7812a3d399656fb77ae4fc36bd455f",
        "filename": "src/sha1.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sha1.h?ref=1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SHA1_H\n+#define BITCOIN_SHA1_H\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** A hasher class for SHA1. */\n+class CSHA1 {\n+private:\n+    uint32_t s[5];\n+    unsigned char buf[64];\n+    size_t bytes;\n+\n+public:\n+    CSHA1();\n+    CSHA1& Write(const unsigned char *data, size_t len);\n+    void Finalize(unsigned char *hash);\n+    CSHA1& Reset();\n+};\n+\n+#endif"
      },
      {
        "sha": "bae17c5d4a4d3f2a44155a3047f931f181faae84",
        "filename": "src/test/sha1_tests.cpp",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/test/sha1_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cc344ce42d8dddd6356c89ef3ceb58418676816/src/test/sha1_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sha1_tests.cpp?ref=1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"sha1.h\"\n+#include \"util.h\"\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(sha1_tests)\n+\n+void SHA1TestVector(const std::string &in, const std::string &out) {\n+    std::vector<unsigned char> hash;\n+    hash.resize(20);\n+    CSHA1().Write((unsigned char*)&in[0], in.size()).Finalize(&hash[0]);\n+    BOOST_CHECK_EQUAL(HexStr(hash), out);\n+}\n+\n+BOOST_AUTO_TEST_CASE(sha1_testvectors) {\n+    SHA1TestVector(\"abc\", \"a9993e364706816aba3e25717850c26c9cd0d89d\");\n+    SHA1TestVector(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\");\n+    SHA1TestVector(std::string(1000000, 'a'), \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "13b5dfef64bbb77d583b2acc59e2b33f89645308",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxM2I1ZGZlZjY0YmJiNzdkNTgzYjJhY2M1OWUyYjMzZjg5NjQ1MzA4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-28T10:20:15Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:42Z"
      },
      "message": "Move crypto implementations to src/crypto/",
      "tree": {
        "sha": "87bcc5b35a5b2dda9fd187dea84d3c01def32744",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/87bcc5b35a5b2dda9fd187dea84d3c01def32744"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/13b5dfef64bbb77d583b2acc59e2b33f89645308",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13b5dfef64bbb77d583b2acc59e2b33f89645308",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/13b5dfef64bbb77d583b2acc59e2b33f89645308",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13b5dfef64bbb77d583b2acc59e2b33f89645308/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cc344ce42d8dddd6356c89ef3ceb58418676816",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cc344ce42d8dddd6356c89ef3ceb58418676816"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 12,
      "deletions": 12
    },
    "files": [
      {
        "sha": "bc65119a92bf0ed2015ead9dbf255faa4f6c28b2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -75,8 +75,8 @@ BITCOIN_CORE_H = \\\n   rpcserver.h \\\n   script.h \\\n   serialize.h \\\n-  sha2.h \\\n-  sha1.h \\\n+  crypto/sha2.h \\\n+  crypto/sha1.h \\\n   sync.h \\\n   threadsafety.h \\\n   tinyformat.h \\\n@@ -154,8 +154,8 @@ libbitcoin_common_a_SOURCES = \\\n   protocol.cpp \\\n   rpcprotocol.cpp \\\n   script.cpp \\\n-  sha1.cpp \\\n-  sha2.cpp \\\n+  crypto/sha1.cpp \\\n+  crypto/sha2.cpp \\\n   sync.cpp \\\n   util.cpp \\\n   version.cpp \\"
      },
      {
        "sha": "4b2e3e19d112824edf6c8b152a29a7a538d37c57",
        "filename": "src/crypto/sha1.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sha1.h\"\n+#include \"crypto/sha1.h\"\n \n #include <string.h>\n ",
        "previous_filename": "src/sha1.cpp"
      },
      {
        "sha": "6efde78a5b7812a3d399656fb77ae4fc36bd455f",
        "filename": "src/crypto/sha1.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "previous_filename": "src/sha1.h"
      },
      {
        "sha": "0d0c32883ff9615915fa0428468794e69826e781",
        "filename": "src/crypto/sha2.cpp",
        "status": "renamed",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sha2.h\"\n+#include \"crypto/sha2.h\"\n \n #include <string.h>\n ",
        "previous_filename": "src/sha2.cpp"
      },
      {
        "sha": "001bfc647cde6ea6aa085d9d1de0fb04741b7bfa",
        "filename": "src/crypto/sha2.h",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "previous_filename": "src/sha2.h"
      },
      {
        "sha": "318399c3345f6bd49804a9fb91fedc0e671171da",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n-#include \"sha2.h\"\n+#include \"crypto/sha2.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"version.h\""
      },
      {
        "sha": "96b1ac439c3d8eb7052195c2359ac648f45486aa",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"key.h\"\n \n-#include \"sha2.h\"\n+#include \"crypto/sha2.h\"\n \n #include <openssl/bn.h>\n #include <openssl/ecdsa.h>"
      },
      {
        "sha": "c6574a6ee892b152f3a14adaafd409578cc8ca1d",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -9,8 +9,8 @@\n #include \"hash.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"sha1.h\"\n-#include \"sha2.h\"\n+#include \"crypto/sha1.h\"\n+#include \"crypto/sha2.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\""
      },
      {
        "sha": "88f2da0bbb939b298873cedb1dba2178da4bc7ca",
        "filename": "src/test/sha1_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/test/sha1_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/test/sha1_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sha1_tests.cpp?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sha1.h\"\n+#include \"crypto/sha1.h\"\n #include \"util.h\"\n \n #include <vector>"
      },
      {
        "sha": "1e48c973cfb58053cdaddb4b284d7793fe42d20f",
        "filename": "src/test/sha2_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/test/sha2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/13b5dfef64bbb77d583b2acc59e2b33f89645308/src/test/sha2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sha2_tests.cpp?ref=13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"sha2.h\"\n+#include \"crypto/sha2.h\"\n #include \"util.h\"\n \n #include <vector>"
      }
    ]
  },
  {
    "sha": "a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNWJjOWMwOTE3NzQyMGJkMWM2YTFmOWVjZTllY2ZiZTgwYzQ1M2Zl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-04-30T22:43:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:42Z"
      },
      "message": "Add built-in RIPEMD-160 implementation",
      "tree": {
        "sha": "80897d1583c290f1ec077e405cca070f41034eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80897d1583c290f1ec077e405cca070f41034eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/13b5dfef64bbb77d583b2acc59e2b33f89645308",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/13b5dfef64bbb77d583b2acc59e2b33f89645308"
      }
    ],
    "stats": {
      "total": 252,
      "additions": 248,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d583a79032fe94aeda72a54b4a1dc71c4bf89c39",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
        "patch": "@@ -77,6 +77,7 @@ BITCOIN_CORE_H = \\\n   serialize.h \\\n   crypto/sha2.h \\\n   crypto/sha1.h \\\n+  crypto/ripemd160.h \\\n   sync.h \\\n   threadsafety.h \\\n   tinyformat.h \\\n@@ -156,6 +157,7 @@ libbitcoin_common_a_SOURCES = \\\n   script.cpp \\\n   crypto/sha1.cpp \\\n   crypto/sha2.cpp \\\n+  crypto/ripemd160.cpp \\\n   sync.cpp \\\n   util.cpp \\\n   version.cpp \\"
      },
      {
        "sha": "aa6874fa85f58eaa53919338fe293964809c5e72",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "added",
        "additions": 217,
        "deletions": 0,
        "changes": 217,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
        "patch": "@@ -0,0 +1,217 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"crypto/ripemd160.h\"\n+\n+#include <string.h>\n+\n+// Internal implementation code.\n+namespace {\n+\n+/** Read 4 bytes, and interpret them as a 32-bit unsigned little-endian integer. */\n+uint32_t inline ReadLE32(const unsigned char *data) {\n+    return ((uint32_t)data[0] | (uint32_t)data[1] << 8 | (uint32_t)data[2] << 16 | (uint32_t)data[3] << 24);\n+}\n+\n+/** Write a 32-bit unsigned little-endian integer. */\n+void inline WriteLE32(unsigned char *data, uint32_t x) {\n+    data[0] = x;\n+    data[1] = x >> 8;\n+    data[2] = x >> 16;\n+    data[3] = x >> 24;\n+}\n+\n+/// Internal RIPEMD-160 implementation.\n+namespace ripemd160 {\n+\n+uint32_t inline f1(uint32_t x, uint32_t y, uint32_t z) { return x ^ y ^ z; }\n+uint32_t inline f2(uint32_t x, uint32_t y, uint32_t z) { return (x & y) | (~x & z); }\n+uint32_t inline f3(uint32_t x, uint32_t y, uint32_t z) { return (x | ~y) ^ z; }\n+uint32_t inline f4(uint32_t x, uint32_t y, uint32_t z) { return (x & z) | (y & ~z); }\n+uint32_t inline f5(uint32_t x, uint32_t y, uint32_t z) { return x ^ (y | ~z); }\n+\n+/** Initialize RIPEMD-160 state. */\n+void inline Initialize(uint32_t *s) {\n+    s[0] = 0x67452301ul;\n+    s[1] = 0xEFCDAB89ul;\n+    s[2] = 0x98BADCFEul;\n+    s[3] = 0x10325476ul;\n+    s[4] = 0xC3D2E1F0ul;\n+}\n+\n+uint32_t inline rol(uint32_t x, int i) { return (x << i) | (x >> (32-i)); }\n+\n+void inline Round(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t f, uint32_t x, uint32_t k, int r) {\n+    a = rol(a + f + x + k, r) + e;\n+    c = rol(c, 10);\n+}\n+\n+void inline R11(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n+void inline R21(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x5A827999ul, r); }\n+void inline R31(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6ED9EBA1ul, r); }\n+void inline R41(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x8F1BBCDCul, r); }\n+void inline R51(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0xA953FD4Eul, r); }\n+\n+void inline R12(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f5(b, c, d), x, 0x50A28BE6ul, r); }\n+void inline R22(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f4(b, c, d), x, 0x5C4DD124ul, r); }\n+void inline R32(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f3(b, c, d), x, 0x6D703EF3ul, r); }\n+void inline R42(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f2(b, c, d), x, 0x7A6D76E9ul, r); }\n+void inline R52(uint32_t &a, uint32_t b, uint32_t &c, uint32_t d, uint32_t e, uint32_t x, int r) { Round(a, b, c, d, e, f1(b, c, d), x,            0, r); }\n+\n+/** Perform a RIPEMD-160 transformation, processing a 64-byte chunk. */\n+void Transform(uint32_t *s, const unsigned char *chunk) {\n+    uint32_t a1 = s[0], b1 = s[1], c1 = s[2], d1 = s[3], e1 = s[4];\n+    uint32_t a2 = a1  , b2 = b1  , c2 = c1  , d2 = d1  , e2 = e1  ;\n+    uint32_t w0  = ReadLE32(chunk +  0), w1  = ReadLE32(chunk +  4), w2  = ReadLE32(chunk +  8), w3  = ReadLE32(chunk + 12);\n+    uint32_t w4  = ReadLE32(chunk + 16), w5  = ReadLE32(chunk + 20), w6  = ReadLE32(chunk + 24), w7  = ReadLE32(chunk + 28);\n+    uint32_t w8  = ReadLE32(chunk + 32), w9  = ReadLE32(chunk + 36), w10 = ReadLE32(chunk + 40), w11 = ReadLE32(chunk + 44);\n+    uint32_t w12 = ReadLE32(chunk + 48), w13 = ReadLE32(chunk + 52), w14 = ReadLE32(chunk + 56), w15 = ReadLE32(chunk + 60);\n+\n+    R11(a1, b1, c1, d1, e1, w0 , 11); R12(a2, b2, c2, d2, e2, w5 ,  8);\n+    R11(e1, a1, b1, c1, d1, w1 , 14); R12(e2, a2, b2, c2, d2, w14,  9);\n+    R11(d1, e1, a1, b1, c1, w2 , 15); R12(d2, e2, a2, b2, c2, w7 ,  9);\n+    R11(c1, d1, e1, a1, b1, w3 , 12); R12(c2, d2, e2, a2, b2, w0 , 11);\n+    R11(b1, c1, d1, e1, a1, w4 ,  5); R12(b2, c2, d2, e2, a2, w9 , 13);\n+    R11(a1, b1, c1, d1, e1, w5 ,  8); R12(a2, b2, c2, d2, e2, w2 , 15);\n+    R11(e1, a1, b1, c1, d1, w6 ,  7); R12(e2, a2, b2, c2, d2, w11, 15);\n+    R11(d1, e1, a1, b1, c1, w7 ,  9); R12(d2, e2, a2, b2, c2, w4 ,  5);\n+    R11(c1, d1, e1, a1, b1, w8 , 11); R12(c2, d2, e2, a2, b2, w13,  7);\n+    R11(b1, c1, d1, e1, a1, w9 , 13); R12(b2, c2, d2, e2, a2, w6 ,  7);\n+    R11(a1, b1, c1, d1, e1, w10, 14); R12(a2, b2, c2, d2, e2, w15,  8);\n+    R11(e1, a1, b1, c1, d1, w11, 15); R12(e2, a2, b2, c2, d2, w8 , 11);\n+    R11(d1, e1, a1, b1, c1, w12,  6); R12(d2, e2, a2, b2, c2, w1 , 14);\n+    R11(c1, d1, e1, a1, b1, w13,  7); R12(c2, d2, e2, a2, b2, w10, 14);\n+    R11(b1, c1, d1, e1, a1, w14,  9); R12(b2, c2, d2, e2, a2, w3 , 12);\n+    R11(a1, b1, c1, d1, e1, w15,  8); R12(a2, b2, c2, d2, e2, w12,  6);\n+\n+    R21(e1, a1, b1, c1, d1, w7 ,  7); R22(e2, a2, b2, c2, d2, w6 ,  9);\n+    R21(d1, e1, a1, b1, c1, w4 ,  6); R22(d2, e2, a2, b2, c2, w11, 13);\n+    R21(c1, d1, e1, a1, b1, w13,  8); R22(c2, d2, e2, a2, b2, w3 , 15);\n+    R21(b1, c1, d1, e1, a1, w1 , 13); R22(b2, c2, d2, e2, a2, w7 ,  7);\n+    R21(a1, b1, c1, d1, e1, w10, 11); R22(a2, b2, c2, d2, e2, w0 , 12);\n+    R21(e1, a1, b1, c1, d1, w6 ,  9); R22(e2, a2, b2, c2, d2, w13,  8);\n+    R21(d1, e1, a1, b1, c1, w15,  7); R22(d2, e2, a2, b2, c2, w5 ,  9);\n+    R21(c1, d1, e1, a1, b1, w3 , 15); R22(c2, d2, e2, a2, b2, w10, 11);\n+    R21(b1, c1, d1, e1, a1, w12,  7); R22(b2, c2, d2, e2, a2, w14,  7);\n+    R21(a1, b1, c1, d1, e1, w0 , 12); R22(a2, b2, c2, d2, e2, w15,  7);\n+    R21(e1, a1, b1, c1, d1, w9 , 15); R22(e2, a2, b2, c2, d2, w8 , 12);\n+    R21(d1, e1, a1, b1, c1, w5 ,  9); R22(d2, e2, a2, b2, c2, w12,  7);\n+    R21(c1, d1, e1, a1, b1, w2 , 11); R22(c2, d2, e2, a2, b2, w4 ,  6);\n+    R21(b1, c1, d1, e1, a1, w14,  7); R22(b2, c2, d2, e2, a2, w9 , 15);\n+    R21(a1, b1, c1, d1, e1, w11, 13); R22(a2, b2, c2, d2, e2, w1 , 13);\n+    R21(e1, a1, b1, c1, d1, w8 , 12); R22(e2, a2, b2, c2, d2, w2 , 11);\n+\n+    R31(d1, e1, a1, b1, c1, w3 , 11); R32(d2, e2, a2, b2, c2, w15,  9);\n+    R31(c1, d1, e1, a1, b1, w10, 13); R32(c2, d2, e2, a2, b2, w5 ,  7);\n+    R31(b1, c1, d1, e1, a1, w14,  6); R32(b2, c2, d2, e2, a2, w1 , 15);\n+    R31(a1, b1, c1, d1, e1, w4 ,  7); R32(a2, b2, c2, d2, e2, w3 , 11);\n+    R31(e1, a1, b1, c1, d1, w9 , 14); R32(e2, a2, b2, c2, d2, w7 ,  8);\n+    R31(d1, e1, a1, b1, c1, w15,  9); R32(d2, e2, a2, b2, c2, w14,  6);\n+    R31(c1, d1, e1, a1, b1, w8 , 13); R32(c2, d2, e2, a2, b2, w6 ,  6);\n+    R31(b1, c1, d1, e1, a1, w1 , 15); R32(b2, c2, d2, e2, a2, w9 , 14);\n+    R31(a1, b1, c1, d1, e1, w2 , 14); R32(a2, b2, c2, d2, e2, w11, 12);\n+    R31(e1, a1, b1, c1, d1, w7 ,  8); R32(e2, a2, b2, c2, d2, w8 , 13);\n+    R31(d1, e1, a1, b1, c1, w0 , 13); R32(d2, e2, a2, b2, c2, w12,  5);\n+    R31(c1, d1, e1, a1, b1, w6 ,  6); R32(c2, d2, e2, a2, b2, w2 , 14);\n+    R31(b1, c1, d1, e1, a1, w13,  5); R32(b2, c2, d2, e2, a2, w10, 13);\n+    R31(a1, b1, c1, d1, e1, w11, 12); R32(a2, b2, c2, d2, e2, w0 , 13);\n+    R31(e1, a1, b1, c1, d1, w5 ,  7); R32(e2, a2, b2, c2, d2, w4 ,  7);\n+    R31(d1, e1, a1, b1, c1, w12,  5); R32(d2, e2, a2, b2, c2, w13,  5);\n+\n+    R41(c1, d1, e1, a1, b1, w1 , 11); R42(c2, d2, e2, a2, b2, w8 , 15);\n+    R41(b1, c1, d1, e1, a1, w9 , 12); R42(b2, c2, d2, e2, a2, w6 ,  5);\n+    R41(a1, b1, c1, d1, e1, w11, 14); R42(a2, b2, c2, d2, e2, w4 ,  8);\n+    R41(e1, a1, b1, c1, d1, w10, 15); R42(e2, a2, b2, c2, d2, w1 , 11);\n+    R41(d1, e1, a1, b1, c1, w0 , 14); R42(d2, e2, a2, b2, c2, w3 , 14);\n+    R41(c1, d1, e1, a1, b1, w8 , 15); R42(c2, d2, e2, a2, b2, w11, 14);\n+    R41(b1, c1, d1, e1, a1, w12,  9); R42(b2, c2, d2, e2, a2, w15,  6);\n+    R41(a1, b1, c1, d1, e1, w4 ,  8); R42(a2, b2, c2, d2, e2, w0 , 14);\n+    R41(e1, a1, b1, c1, d1, w13,  9); R42(e2, a2, b2, c2, d2, w5 ,  6);\n+    R41(d1, e1, a1, b1, c1, w3 , 14); R42(d2, e2, a2, b2, c2, w12,  9);\n+    R41(c1, d1, e1, a1, b1, w7 ,  5); R42(c2, d2, e2, a2, b2, w2 , 12);\n+    R41(b1, c1, d1, e1, a1, w15,  6); R42(b2, c2, d2, e2, a2, w13,  9);\n+    R41(a1, b1, c1, d1, e1, w14,  8); R42(a2, b2, c2, d2, e2, w9 , 12);\n+    R41(e1, a1, b1, c1, d1, w5 ,  6); R42(e2, a2, b2, c2, d2, w7 ,  5);\n+    R41(d1, e1, a1, b1, c1, w6 ,  5); R42(d2, e2, a2, b2, c2, w10, 15);\n+    R41(c1, d1, e1, a1, b1, w2 , 12); R42(c2, d2, e2, a2, b2, w14,  8);\n+\n+    R51(b1, c1, d1, e1, a1, w4 ,  9); R52(b2, c2, d2, e2, a2, w12,  8);\n+    R51(a1, b1, c1, d1, e1, w0 , 15); R52(a2, b2, c2, d2, e2, w15,  5);\n+    R51(e1, a1, b1, c1, d1, w5 ,  5); R52(e2, a2, b2, c2, d2, w10, 12);\n+    R51(d1, e1, a1, b1, c1, w9 , 11); R52(d2, e2, a2, b2, c2, w4 ,  9);\n+    R51(c1, d1, e1, a1, b1, w7 ,  6); R52(c2, d2, e2, a2, b2, w1 , 12);\n+    R51(b1, c1, d1, e1, a1, w12,  8); R52(b2, c2, d2, e2, a2, w5 ,  5);\n+    R51(a1, b1, c1, d1, e1, w2 , 13); R52(a2, b2, c2, d2, e2, w8 , 14);\n+    R51(e1, a1, b1, c1, d1, w10, 12); R52(e2, a2, b2, c2, d2, w7 ,  6);\n+    R51(d1, e1, a1, b1, c1, w14,  5); R52(d2, e2, a2, b2, c2, w6 ,  8);\n+    R51(c1, d1, e1, a1, b1, w1 , 12); R52(c2, d2, e2, a2, b2, w2 , 13);\n+    R51(b1, c1, d1, e1, a1, w3 , 13); R52(b2, c2, d2, e2, a2, w13,  6);\n+    R51(a1, b1, c1, d1, e1, w8 , 14); R52(a2, b2, c2, d2, e2, w14,  5);\n+    R51(e1, a1, b1, c1, d1, w11, 11); R52(e2, a2, b2, c2, d2, w0 , 15);\n+    R51(d1, e1, a1, b1, c1, w6 ,  8); R52(d2, e2, a2, b2, c2, w3 , 13);\n+    R51(c1, d1, e1, a1, b1, w15,  5); R52(c2, d2, e2, a2, b2, w9 , 11);\n+    R51(b1, c1, d1, e1, a1, w13,  6); R52(b2, c2, d2, e2, a2, w11, 11);\n+\n+    uint32_t t = s[0];\n+    s[0] = s[1] + c1 + d2;\n+    s[1] = s[2] + d1 + e2;\n+    s[2] = s[3] + e1 + a2;\n+    s[3] = s[4] + a1 + b2;\n+    s[4] = t    + b1 + c2;\n+}\n+\n+}  // namespace ripemd160\n+\n+}  // namespace\n+\n+////// RIPEMD160\n+\n+CRIPEMD160::CRIPEMD160() : bytes(0) {\n+    ripemd160::Initialize(s);\n+}\n+\n+CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n+    const unsigned char *end = data + len;\n+    size_t bufsize = bytes % 64;\n+    if (bufsize && bufsize + len >= 64) {\n+        // Fill the buffer, and process it.\n+        memcpy(buf + bufsize, data, 64 - bufsize);\n+        bytes += 64 - bufsize;\n+        data += 64 - bufsize;\n+        ripemd160::Transform(s, buf);\n+        bufsize = 0;\n+    }\n+    while (end >= data + 64) {\n+        // Process full chunks directly from the source.\n+        ripemd160::Transform(s, data);\n+        bytes += 64;\n+        data += 64;\n+    }\n+    if (end > data) {\n+        // Fill the buffer with what remains.\n+        memcpy(buf + bufsize, data, end - data);\n+        bytes += end - data;\n+    }\n+    return *this;\n+}\n+\n+void CRIPEMD160::Finalize(unsigned char *hash) {\n+    static const unsigned char pad[64] = {0x80};\n+    unsigned char sizedesc[8];\n+    WriteLE32(sizedesc, bytes << 3);\n+    WriteLE32(sizedesc+4, bytes >> 29);\n+    Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n+    Write(sizedesc, 8);\n+    WriteLE32(hash, s[0]);\n+    WriteLE32(hash+4, s[1]);\n+    WriteLE32(hash+8, s[2]);\n+    WriteLE32(hash+12, s[3]);\n+    WriteLE32(hash+16, s[4]);\n+}\n+\n+CRIPEMD160& CRIPEMD160::Reset() {\n+    bytes = 0;\n+    ripemd160::Initialize(s);\n+    return *this;\n+}"
      },
      {
        "sha": "cab1d0bb46ea5107ea8176af18872771253d509e",
        "filename": "src/crypto/ripemd160.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RIPEMD160_H\n+#define BITCOIN_RIPEMD160_H\n+\n+#include <stdint.h>\n+#include <stdlib.h>\n+\n+/** A hasher class for RIPEMD-160. */\n+class CRIPEMD160 {\n+private:\n+    uint32_t s[5];\n+    unsigned char buf[64];\n+    size_t bytes;\n+\n+public:\n+    CRIPEMD160();\n+    CRIPEMD160& Write(const unsigned char *data, size_t len);\n+    void Finalize(unsigned char *hash);\n+    CRIPEMD160& Reset();\n+};\n+\n+#endif"
      },
      {
        "sha": "39d42eefe26f0323777cd9fcc313083c7eb0098a",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
        "patch": "@@ -7,14 +7,13 @@\n #define BITCOIN_HASH_H\n \n #include \"crypto/sha2.h\"\n+#include \"crypto/ripemd160.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n #include \"version.h\"\n \n #include <vector>\n \n-#include <openssl/ripemd.h>\n-\n /** A hasher class for Bitcoin's 256-bit hash (double SHA-256). */\n class CHash256 {\n private:\n@@ -45,7 +44,7 @@ class CHash160 {\n     void Finalize(unsigned char *hash) {\n         unsigned char buf[32];\n         sha.Finalize(buf);\n-        RIPEMD160(buf, 32, hash);\n+        CRIPEMD160().Write(buf, 32).Finalize(hash);\n     }\n \n     CHash160& Write(const unsigned char *data, size_t len) {"
      },
      {
        "sha": "b383a00a6ec8338fa7df40aba21d24605b5e7eff",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
        "patch": "@@ -11,6 +11,7 @@\n #include \"keystore.h\"\n #include \"crypto/sha1.h\"\n #include \"crypto/sha2.h\"\n+#include \"crypto/ripemd160.h\"\n #include \"sync.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n@@ -803,7 +804,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     valtype& vch = stacktop(-1);\n                     valtype vchHash((opcode == OP_RIPEMD160 || opcode == OP_SHA1 || opcode == OP_HASH160) ? 20 : 32);\n                     if (opcode == OP_RIPEMD160)\n-                        RIPEMD160(&vch[0], vch.size(), &vchHash[0]);\n+                        CRIPEMD160().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n                     else if (opcode == OP_SHA1)\n                         CSHA1().Write(&vch[0], vch.size()).Finalize(&vchHash[0]);\n                     else if (opcode == OP_SHA256)"
      }
    ]
  },
  {
    "sha": "7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZWNkOTczOWQ5NDM5NjI0Mzk5YTQ4ODJhOWYxOTZjY2YwYzdiYTRh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-05-02T23:04:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:42Z"
      },
      "message": "Move {Read,Write}{LE,BE}{32,64} to common.h and use builtins if possible",
      "tree": {
        "sha": "197b608c5f20f8eb2c6bf6e1364e422351df59b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/197b608c5f20f8eb2c6bf6e1364e422351df59b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a5bc9c09177420bd1c6a1f9ece9ecfbe80c453fe"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 52,
      "deletions": 61
    },
    "files": [
      {
        "sha": "01655b7011dbd0ec154580063346ca2b3da7e511",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "patch": "@@ -75,6 +75,7 @@ BITCOIN_CORE_H = \\\n   rpcserver.h \\\n   script.h \\\n   serialize.h \\\n+  crypto/common.h \\\n   crypto/sha2.h \\\n   crypto/sha1.h \\\n   crypto/ripemd160.h \\"
      },
      {
        "sha": "e1bcd3ae1142ec99cea5cbc85315348a2036d9f0",
        "filename": "src/crypto/common.h",
        "status": "added",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "patch": "@@ -0,0 +1,46 @@\n+// Copyright (c) 2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_COMMON_H\n+#define BITCOIN_CRYPTO_COMMON_H\n+\n+#include <stdint.h>\n+\n+#ifdef WIN32\n+uint32_t static inline ReadLE32(const unsigned char *ptr) { return *((uint32_t*)ptr); }\n+uint64_t static inline ReadLE64(const unsigned char *ptr) { return *((uint64_t*)ptr); }\n+\n+void static inline WriteLE32(unsigned char *ptr, uint32_t x) { *((uint32_t*)ptr) = x; }\n+void static inline WriteLE64(unsigned char *ptr, uint64_t x) { *((uint64_t*)ptr) = x; }\n+\n+uint32_t static inline ReadBE32(const unsigned char *ptr) {\n+    return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n+}\n+\n+uint64_t static inline ReadBE64(const unsigned char *ptr) {\n+    return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n+            (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n+}\n+\n+void static inline WriteBE32(unsigned char *ptr, uint32_t x) {\n+    ptr[0] = x >> 24; ptr[1] = x >> 16; ptr[2] = x >> 8; ptr[3] = x;\n+}\n+\n+void static inline WriteBE64(unsigned char *ptr, uint64_t x) {\n+    ptr[0] = x >> 56; ptr[1] = x >> 48; ptr[2] = x >> 40; ptr[3] = x >> 32;\n+    ptr[4] = x >> 24; ptr[5] = x >> 16; ptr[6] = x >> 8; ptr[7] = x;\n+}\n+#else\n+#  include <endian.h>\n+uint32_t static inline ReadLE32(const unsigned char *ptr) { return le32toh(*((uint32_t*)ptr)); }\n+uint64_t static inline ReadLE64(const unsigned char *ptr) { return le64toh(*((uint64_t*)ptr)); }\n+void static inline WriteLE32(unsigned char *ptr, uint32_t x) { *((uint32_t*)ptr) = htole32(x); }\n+void static inline WriteLE64(unsigned char *ptr, uint64_t x) { *((uint64_t*)ptr) = htole64(x); }\n+\n+uint32_t static inline ReadBE32(const unsigned char *ptr) { return be32toh(*((uint32_t*)ptr)); }\n+uint64_t static inline ReadBE64(const unsigned char *ptr) { return be64toh(*((uint64_t*)ptr)); }\n+void static inline WriteBE32(unsigned char *ptr, uint32_t x) { *((uint32_t*)ptr) = htobe32(x); }\n+void static inline WriteBE64(unsigned char *ptr, uint64_t x) { *((uint64_t*)ptr) = htobe64(x); }\n+#endif\n+#endif"
      },
      {
        "sha": "c5e6e2d6967834248e5ea16fdd4ea3bde84d8c5f",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "patch": "@@ -4,24 +4,12 @@\n \n #include \"crypto/ripemd160.h\"\n \n+#include \"crypto/common.h\"\n #include <string.h>\n \n // Internal implementation code.\n namespace {\n \n-/** Read 4 bytes, and interpret them as a 32-bit unsigned little-endian integer. */\n-uint32_t inline ReadLE32(const unsigned char *data) {\n-    return ((uint32_t)data[0] | (uint32_t)data[1] << 8 | (uint32_t)data[2] << 16 | (uint32_t)data[3] << 24);\n-}\n-\n-/** Write a 32-bit unsigned little-endian integer. */\n-void inline WriteLE32(unsigned char *data, uint32_t x) {\n-    data[0] = x;\n-    data[1] = x >> 8;\n-    data[2] = x >> 16;\n-    data[3] = x >> 24;\n-}\n-\n /// Internal RIPEMD-160 implementation.\n namespace ripemd160 {\n \n@@ -199,8 +187,7 @@ CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n void CRIPEMD160::Finalize(unsigned char *hash) {\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n-    WriteLE32(sizedesc, bytes << 3);\n-    WriteLE32(sizedesc+4, bytes >> 29);\n+    WriteLE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteLE32(hash, s[0]);"
      },
      {
        "sha": "e0f32b7d1d10644d736bdcf4cae741aa7c63c0a1",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "patch": "@@ -4,24 +4,12 @@\n \n #include \"crypto/sha1.h\"\n \n+#include \"crypto/common.h\"\n #include <string.h>\n \n // Internal implementation code.\n namespace {\n \n-/** Read 4 bytes, and interpret them as a 32-bit unsigned big-endian integer. */\n-uint32_t inline ReadBE32(const unsigned char *data) {\n-    return ((uint32_t)data[0] << 24 | (uint32_t)data[1] << 16 | (uint32_t)data[2] << 8 | (uint32_t)data[3]);\n-}\n-\n-/** Write a 32-bit unsigned big-endian integer. */\n-void inline WriteBE32(unsigned char *data, uint32_t x) {\n-    data[0] = x >> 24;\n-    data[1] = x >> 16;\n-    data[2] = x >> 8;\n-    data[3] = x;\n-}\n-\n /// Internal SHA-1 implementation.\n namespace sha1 {\n \n@@ -187,8 +175,7 @@ CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n void CSHA1::Finalize(unsigned char *hash) {\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n-    WriteBE32(sizedesc, bytes >> 29);\n-    WriteBE32(sizedesc+4, bytes << 3);\n+    WriteBE64(sizedesc, bytes << 3);\n     Write(pad, 1 + ((119 - (bytes % 64)) % 64));\n     Write(sizedesc, 8);\n     WriteBE32(hash, s[0]);"
      },
      {
        "sha": "77f35f38d8047466a8f741eb2b7f0745f687b9aa",
        "filename": "src/crypto/sha2.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 31,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "patch": "@@ -4,42 +4,12 @@\n \n #include \"crypto/sha2.h\"\n \n+#include \"crypto/common.h\"\n #include <string.h>\n \n // Internal implementation code.\n namespace {\n \n-/** Read 4 bytes, and interpret them as a 32-bit unsigned big-endian integer. */\n-uint32_t inline ReadBE32(const unsigned char *data) {\n-    return ((uint32_t)data[0] << 24 | (uint32_t)data[1] << 16 | (uint32_t)data[2] << 8 | (uint32_t)data[3]);\n-}\n-\n-/** Write a 32-bit unsigned big-endian integer. */\n-void inline WriteBE32(unsigned char *data, uint32_t x) {\n-    data[0] = x >> 24;\n-    data[1] = x >> 16;\n-    data[2] = x >> 8;\n-    data[3] = x;\n-}\n-\n-/** Read 8 bytes, and interpret them as a 64-bit unsigned big-endian integer. */\n-uint64_t inline ReadBE64(const unsigned char *data) {\n-    return ((uint64_t)data[0] << 56 | (uint64_t)data[1] << 48 | (uint64_t)data[2] << 40 | (uint64_t)data[3] << 32 |\n-            (uint64_t)data[4] << 24 | (uint64_t)data[5] << 16 | (uint64_t)data[6] << 8  | (uint64_t)data[7]);\n-}\n-\n-/** Write a 64-bit unsigned big-endian integer. */\n-void inline WriteBE64(unsigned char *data, uint64_t x) {\n-    data[0] = x >> 56;\n-    data[1] = x >> 48;\n-    data[2] = x >> 40;\n-    data[3] = x >> 32;\n-    data[4] = x >> 24;\n-    data[5] = x >> 16;\n-    data[6] = x >> 8;\n-    data[7] = x;\n-}\n-\n /// Internal SHA-256 implementation.\n namespace sha256 {\n "
      }
    ]
  },
  {
    "sha": "3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODIwZTAxZWI5YWQwZTUwMmU5MmViYzQ0Y2I0NjIzY2Y0ZjNkNGM0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2014-05-31T20:01:42Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:43Z"
      },
      "message": "Extend and move all crypto tests to crypto_tests.cpp",
      "tree": {
        "sha": "b01eef01dbe01a3a3a9c7b54219eeeb6d4b1c58f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b01eef01dbe01a3a3a9c7b54219eeeb6d4b1c58f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7ecd9739d9439624399a4882a9f196ccf0c7ba4a"
      }
    ],
    "stats": {
      "total": 389,
      "additions": 203,
      "deletions": 186
    },
    "files": [
      {
        "sha": "02fb3ba5feeb0bfd7fe222dbbfc4a2ab3348e234",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
        "patch": "@@ -31,6 +31,7 @@ BITCOIN_TESTS =\\\n   test/checkblock_tests.cpp \\\n   test/Checkpoints_tests.cpp \\\n   test/compress_tests.cpp \\\n+  test/crypto_tests.cpp \\\n   test/DoS_tests.cpp \\\n   test/getarg_tests.cpp \\\n   test/hash_tests.cpp \\\n@@ -45,8 +46,6 @@ BITCOIN_TESTS =\\\n   test/script_P2SH_tests.cpp \\\n   test/script_tests.cpp \\\n   test/serialize_tests.cpp \\\n-  test/sha1_tests.cpp \\\n-  test/sha2_tests.cpp \\\n   test/sigopcount_tests.cpp \\\n   test/test_bitcoin.cpp \\\n   test/transaction_tests.cpp \\"
      },
      {
        "sha": "d425f082c3acade0f818370205b6053f180b450c",
        "filename": "src/test/crypto_tests.cpp",
        "status": "added",
        "additions": 202,
        "deletions": 0,
        "changes": 202,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
        "patch": "@@ -0,0 +1,202 @@\n+// Copyright (c) 2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"crypto/ripemd160.h\"\n+#include \"crypto/sha1.h\"\n+#include \"crypto/sha2.h\"\n+#include \"util.h\"\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(crypto_tests)\n+\n+template<typename Hasher, typename In, typename Out>\n+void TestVector(const Hasher &h, const In &in, const Out &out) {\n+    Out hash;\n+    hash.resize(out.size());\n+    {\n+        // Test that writing the whole input string at once works.\n+        Hasher(h).Write((unsigned char*)&in[0], in.size()).Finalize(&hash[0]);\n+        BOOST_CHECK(hash == out);\n+    }\n+    for (int i=0; i<32; i++) {\n+        // Test that writing the string broken up in random pieces works.\n+        Hasher hasher(h);\n+        size_t pos = 0;\n+        while (pos < in.size()) {\n+            size_t len = insecure_rand() % ((in.size() - pos + 1) / 2 + 1);\n+            hasher.Write((unsigned char*)&in[pos], len);\n+            pos += len;\n+            if (pos > 0 && pos + 2 * out.size() > in.size()) {\n+                // Test that writing the rest at once to a copy of a hasher works.\n+                Hasher(hasher).Write((unsigned char*)&in[pos], in.size() - pos).Finalize(&hash[0]);\n+                BOOST_CHECK(hash == out);\n+            }\n+        }\n+        hasher.Finalize(&hash[0]);\n+        BOOST_CHECK(hash == out);\n+    }\n+}\n+\n+void TestSHA1(const std::string &in, const std::string &hexout) { TestVector(CSHA1(), in, ParseHex(hexout));}\n+void TestSHA256(const std::string &in, const std::string &hexout) { TestVector(CSHA256(), in, ParseHex(hexout));}\n+void TestSHA512(const std::string &in, const std::string &hexout) { TestVector(CSHA512(), in, ParseHex(hexout));}\n+void TestRIPEMD160(const std::string &in, const std::string &hexout) { TestVector(CRIPEMD160(), in, ParseHex(hexout));}\n+\n+void TestHMACSHA512(const std::string &hexkey, const std::string &hexin, const std::string &hexout) {\n+    std::vector<unsigned char> key = ParseHex(hexkey);\n+    TestVector(CHMAC_SHA512(&key[0], key.size()), ParseHex(hexin), ParseHex(hexout));\n+}\n+\n+std::string LongTestString(void) {\n+    std::string ret;\n+    for (int i=0; i<200000; i++) {\n+        ret += (unsigned char)(i);\n+        ret += (unsigned char)(i >> 4);\n+        ret += (unsigned char)(i >> 8);\n+        ret += (unsigned char)(i >> 12);\n+        ret += (unsigned char)(i >> 16);\n+    }\n+    return ret;\n+}\n+\n+const std::string test1 = LongTestString();\n+\n+BOOST_AUTO_TEST_CASE(ripemd160_testvectors) {\n+    TestRIPEMD160(\"\", \"9c1185a5c5e9fc54612808977ee8f548b2258d31\");\n+    TestRIPEMD160(\"abc\", \"8eb208f7e05d987a9b044a8e98c6b087f15a0bfc\");\n+    TestRIPEMD160(\"message digest\", \"5d0689ef49d2fae572b881b123a85ffa21595f36\");\n+    TestRIPEMD160(\"secure hash algorithm\", \"20397528223b6a5f4cbc2808aba0464e645544f9\");\n+    TestRIPEMD160(\"RIPEMD160 is considered to be safe\", \"a7d78608c7af8a8e728778e81576870734122b66\");\n+    TestRIPEMD160(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+                  \"12a053384a9c0c88e405a06c27dcf49ada62eb2b\");\n+    TestRIPEMD160(\"For this sample, this 63-byte string will be used as input data\",\n+                  \"de90dbfee14b63fb5abf27c2ad4a82aaa5f27a11\");\n+    TestRIPEMD160(\"This is exactly 64 bytes long, not counting the terminating byte\",\n+                  \"eda31d51d3a623b81e19eb02e24ff65d27d67b37\");\n+    TestRIPEMD160(std::string(1000000, 'a'), \"52783243c1697bdbe16d37f97f68f08325dc1528\");\n+    TestRIPEMD160(test1, \"464243587bd146ea835cdf57bdae582f25ec45f1\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(sha1_testvectors) {\n+    TestSHA1(\"\", \"da39a3ee5e6b4b0d3255bfef95601890afd80709\");\n+    TestSHA1(\"abc\", \"a9993e364706816aba3e25717850c26c9cd0d89d\");\n+    TestSHA1(\"message digest\", \"c12252ceda8be8994d5fa0290a47231c1d16aae3\");\n+    TestSHA1(\"secure hash algorithm\", \"d4d6d2f0ebe317513bbd8d967d89bac5819c2f60\");\n+    TestSHA1(\"SHA1 is considered to be safe\", \"f2b6650569ad3a8720348dd6ea6c497dee3a842a\");\n+    TestSHA1(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+             \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\");\n+    TestSHA1(\"For this sample, this 63-byte string will be used as input data\",\n+             \"4f0ea5cd0585a23d028abdc1a6684e5a8094dc49\");\n+    TestSHA1(\"This is exactly 64 bytes long, not counting the terminating byte\",\n+             \"fb679f23e7d1ce053313e66e127ab1b444397057\");\n+    TestSHA1(std::string(1000000, 'a'), \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\");\n+    TestSHA1(test1, \"b7755760681cbfd971451668f32af5774f4656b5\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(sha256_testvectors) {\n+    TestSHA256(\"\", \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n+    TestSHA256(\"abc\", \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\");\n+    TestSHA256(\"message digest\",\n+               \"f7846f55cf23e14eebeab5b4e1550cad5b509e3348fbc4efa3a1413d393cb650\");\n+    TestSHA256(\"secure hash algorithm\",\n+               \"f30ceb2bb2829e79e4ca9753d35a8ecc00262d164cc077080295381cbd643f0d\");\n+    TestSHA256(\"SHA256 is considered to be safe\",\n+               \"6819d915c73f4d1e77e4e1b52d1fa0f9cf9beaead3939f15874bd988e2a23630\");\n+    TestSHA256(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+               \"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\");\n+    TestSHA256(\"For this sample, this 63-byte string will be used as input data\",\n+               \"f08a78cbbaee082b052ae0708f32fa1e50c5c421aa772ba5dbb406a2ea6be342\");\n+    TestSHA256(\"This is exactly 64 bytes long, not counting the terminating byte\",\n+               \"ab64eff7e88e2e46165e29f2bce41826bd4c7b3552f6b382a9e7d3af47c245f8\");\n+    TestSHA256(\"As Bitcoin relies on 80 byte header hashes, we want to have an example for that.\",\n+               \"7406e8de7d6e4fffc573daef05aefb8806e7790f55eab5576f31349743cca743\");\n+    TestSHA256(std::string(1000000, 'a'),\n+               \"cdc76e5c9914fb9281a1c7e284d73e67f1809a48a497200e046d39ccc7112cd0\");\n+    TestSHA256(test1, \"a316d55510b49662420f49d145d42fb83f31ef8dc016aa4e32df049991a91e26\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(sha512_testvectors) {\n+    TestSHA512(\"\",\n+               \"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce\"\n+               \"47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\");\n+    TestSHA512(\"abc\",\n+               \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\"\n+               \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\");\n+    TestSHA512(\"message digest\",\n+               \"107dbf389d9e9f71a3a95f6c055b9251bc5268c2be16d6c13492ea45b0199f33\"\n+               \"09e16455ab1e96118e8a905d5597b72038ddb372a89826046de66687bb420e7c\");\n+    TestSHA512(\"secure hash algorithm\",\n+               \"7746d91f3de30c68cec0dd693120a7e8b04d8073cb699bdce1a3f64127bca7a3\"\n+               \"d5db502e814bb63c063a7a5043b2df87c61133395f4ad1edca7fcf4b30c3236e\");\n+    TestSHA512(\"SHA512 is considered to be safe\",\n+               \"099e6468d889e1c79092a89ae925a9499b5408e01b66cb5b0a3bd0dfa51a9964\"\n+               \"6b4a3901caab1318189f74cd8cf2e941829012f2449df52067d3dd5b978456c2\");\n+    TestSHA512(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\",\n+               \"204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c335\"\n+               \"96fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445\");\n+    TestSHA512(\"For this sample, this 63-byte string will be used as input data\",\n+               \"b3de4afbc516d2478fe9b518d063bda6c8dd65fc38402dd81d1eb7364e72fb6e\"\n+               \"6663cf6d2771c8f5a6da09601712fb3d2a36c6ffea3e28b0818b05b0a8660766\");\n+    TestSHA512(\"This is exactly 64 bytes long, not counting the terminating byte\",\n+               \"70aefeaa0e7ac4f8fe17532d7185a289bee3b428d950c14fa8b713ca09814a38\"\n+               \"7d245870e007a80ad97c369d193e41701aa07f3221d15f0e65a1ff970cedf030\");\n+    TestSHA512(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmno\"\n+               \"ijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\",\n+               \"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018\"\n+               \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\");\n+    TestSHA512(std::string(1000000, 'a'),\n+               \"e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973eb\"\n+               \"de0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b\");\n+    TestSHA512(test1,\n+               \"40cac46c147e6131c5193dd5f34e9d8bb4951395f27b08c558c65ff4ba2de594\"\n+               \"37de8c3ef5459d76a52cedc02dc499a3c9ed9dedbfb3281afd9653b8a112fafc\");\n+}\n+\n+BOOST_AUTO_TEST_CASE(hmac_sha512_testvectors) {\n+    // test cases 1, 2, 3, 4, 6 and 7 of RFC 4231\n+    TestHMACSHA512(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n+                   \"4869205468657265\",\n+                   \"87aa7cdea5ef619d4ff0b4241a1d6cb02379f4e2ce4ec2787ad0b30545e17cde\"\n+                   \"daa833b7d6b8a702038b274eaea3f4e4be9d914eeb61f1702e696c203a126854\");\n+    TestHMACSHA512(\"4a656665\",\n+                   \"7768617420646f2079612077616e7420666f72206e6f7468696e673f\",\n+                   \"164b7a7bfcf819e2e395fbe73b56e0a387bd64222e831fd610270cd7ea250554\"\n+                   \"9758bf75c05a994a6d034f65f8f0e6fdcaeab1a34d4a6b4b636e070a38bce737\");\n+    TestHMACSHA512(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\n+                   \"dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd\"\n+                   \"dddddddddddddddddddddddddddddddddddd\",\n+                   \"fa73b0089d56a284efb0f0756c890be9b1b5dbdd8ee81a3655f83e33b2279d39\"\n+                   \"bf3e848279a722c806b485a47e67c807b946a337bee8942674278859e13292fb\");\n+    TestHMACSHA512(\"0102030405060708090a0b0c0d0e0f10111213141516171819\",\n+                   \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n+                   \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\",\n+                   \"b0ba465637458c6990e5a8c5f61d4af7e576d97ff94b872de76f8050361ee3db\"\n+                   \"a91ca5c11aa25eb4d679275cc5788063a5f19741120c4f2de2adebeb10a298dd\");\n+    TestHMACSHA512(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaa\",\n+                   \"54657374205573696e67204c6172676572205468616e20426c6f636b2d53697a\"\n+                   \"65204b6579202d2048617368204b6579204669727374\",\n+                   \"80b24263c7c1a3ebb71493c1dd7be8b49b46d1f41b4aeec1121b013783f8f352\"\n+                   \"6b56d037e05f2598bd0fd2215d6a1e5295e64f73f63f0aec8b915a985d786598\");\n+    TestHMACSHA512(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n+                   \"aaaaaa\",\n+                   \"5468697320697320612074657374207573696e672061206c6172676572207468\"\n+                   \"616e20626c6f636b2d73697a65206b657920616e642061206c61726765722074\"\n+                   \"68616e20626c6f636b2d73697a6520646174612e20546865206b6579206e6565\"\n+                   \"647320746f20626520686173686564206265666f7265206265696e6720757365\"\n+                   \"642062792074686520484d414320616c676f726974686d2e\",\n+                   \"e37b6a775dc87dbaa4dfa9f96e5e3ffddebd71f8867289865df5a32d20cdc944\"\n+                   \"b6022cac3c4982b10d5eeb55c3e4de15134676fb6de0446065c97440fa8c6a58\");\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "88f2da0bbb939b298873cedb1dba2178da4bc7ca",
        "filename": "src/test/sha1_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/test/sha1_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/test/sha1_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sha1_tests.cpp?ref=7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "patch": "@@ -1,27 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"crypto/sha1.h\"\n-#include \"util.h\"\n-\n-#include <vector>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_AUTO_TEST_SUITE(sha1_tests)\n-\n-void SHA1TestVector(const std::string &in, const std::string &out) {\n-    std::vector<unsigned char> hash;\n-    hash.resize(20);\n-    CSHA1().Write((unsigned char*)&in[0], in.size()).Finalize(&hash[0]);\n-    BOOST_CHECK_EQUAL(HexStr(hash), out);\n-}\n-\n-BOOST_AUTO_TEST_CASE(sha1_testvectors) {\n-    SHA1TestVector(\"abc\", \"a9993e364706816aba3e25717850c26c9cd0d89d\");\n-    SHA1TestVector(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\");\n-    SHA1TestVector(std::string(1000000, 'a'), \"34aa973cd4c4daa4f61eeb2bdbad27316534016f\");\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "1e48c973cfb58053cdaddb4b284d7793fe42d20f",
        "filename": "src/test/sha2_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 157,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/test/sha2_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ecd9739d9439624399a4882a9f196ccf0c7ba4a/src/test/sha2_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sha2_tests.cpp?ref=7ecd9739d9439624399a4882a9f196ccf0c7ba4a",
        "patch": "@@ -1,157 +0,0 @@\n-// Copyright (c) 2014 The Bitcoin Core developers\n-// Distributed under the MIT/X11 software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"crypto/sha2.h\"\n-#include \"util.h\"\n-\n-#include <vector>\n-\n-#include <boost/test/unit_test.hpp>\n-\n-BOOST_AUTO_TEST_SUITE(sha2_tests)\n-\n-void SHA256TestVector(const std::string &in, const std::string &out) {\n-    std::vector<unsigned char> hash;\n-    hash.resize(32);\n-    CSHA256().Write((unsigned char*)&in[0], in.size()).Finalize(&hash[0]);\n-    BOOST_CHECK_EQUAL(HexStr(hash), out);\n-}\n-\n-void SHA512TestVector(const std::string &in, const std::string &out) {\n-    std::vector<unsigned char> hash;\n-    hash.resize(64);\n-    CSHA512().Write((unsigned char*)&in[0], in.size()).Finalize(&hash[0]);\n-    BOOST_CHECK_EQUAL(HexStr(hash), out);\n-}\n-\n-BOOST_AUTO_TEST_CASE(sha256_testvectors) {\n-    SHA256TestVector(\"\", \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\");\n-    SHA256TestVector(\"abc\", \"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\");\n-    SHA256TestVector(\"message digest\", \"f7846f55cf23e14eebeab5b4e1550cad5b509e3348fbc4efa3a1413d393cb650\");\n-    SHA256TestVector(\"secure hash algorithm\", \"f30ceb2bb2829e79e4ca9753d35a8ecc00262d164cc077080295381cbd643f0d\");\n-    SHA256TestVector(\"SHA256 is considered to be safe\", \"6819d915c73f4d1e77e4e1b52d1fa0f9cf9beaead3939f15874bd988e2a23630\");\n-    SHA256TestVector(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\");\n-    SHA256TestVector(\"For this sample, this 63-byte string will be used as input data\", \"f08a78cbbaee082b052ae0708f32fa1e50c5c421aa772ba5dbb406a2ea6be342\");\n-    SHA256TestVector(\"This is exactly 64 bytes long, not counting the terminating byte\", \"ab64eff7e88e2e46165e29f2bce41826bd4c7b3552f6b382a9e7d3af47c245f8\");\n-    SHA256TestVector(\"As Bitcoin relies on 80 byte header hashes, we want to have an example for that.\", \"7406e8de7d6e4fffc573daef05aefb8806e7790f55eab5576f31349743cca743\");\n-}\n-\n-BOOST_AUTO_TEST_CASE(sha512_testvectors) {\n-    SHA512TestVector(\"abc\", \"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\");\n-    SHA512TestVector(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\", \"204a8fc6dda82f0a0ced7beb8e08a41657c16ef468b228a8279be331a703c33596fd15c13b1b07f9aa1d3bea57789ca031ad85c7a71dd70354ec631238ca3445\");\n-    SHA512TestVector(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\", \"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\");\n-    SHA512TestVector(std::string(1000000, 'a'), \"e718483d0ce769644e2e42c7bc15b4638e1f98b13b2044285632a803afa973ebde0ff244877ea60a4cb0432ce577c31beb009c5c2c49aa2e4eadb217ad8cc09b\");\n-    SHA512TestVector(\"\", \"cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e\");\n-}\n-\n-typedef struct {\n-    const char *pszKey;\n-    const char *pszData;\n-    const char *pszMAC;\n-} testvec_t;\n-\n-// test cases 1, 2, 3, 4, 6 and 7 of RFC 4231\n-static const testvec_t vtest[] = {\n-    {\n-        \"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\"\n-        \"0b0b0b0b\",\n-        \"4869205468657265\",\n-        \"87aa7cdea5ef619d4ff0b4241a1d6cb0\"\n-        \"2379f4e2ce4ec2787ad0b30545e17cde\"\n-        \"daa833b7d6b8a702038b274eaea3f4e4\"\n-        \"be9d914eeb61f1702e696c203a126854\"\n-    },\n-    {\n-        \"4a656665\",\n-        \"7768617420646f2079612077616e7420\"\n-        \"666f72206e6f7468696e673f\",\n-        \"164b7a7bfcf819e2e395fbe73b56e0a3\"\n-        \"87bd64222e831fd610270cd7ea250554\"\n-        \"9758bf75c05a994a6d034f65f8f0e6fd\"\n-        \"caeab1a34d4a6b4b636e070a38bce737\"\n-    },\n-    {\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaa\",\n-        \"dddddddddddddddddddddddddddddddd\"\n-        \"dddddddddddddddddddddddddddddddd\"\n-        \"dddddddddddddddddddddddddddddddd\"\n-        \"dddd\",\n-        \"fa73b0089d56a284efb0f0756c890be9\"\n-        \"b1b5dbdd8ee81a3655f83e33b2279d39\"\n-        \"bf3e848279a722c806b485a47e67c807\"\n-        \"b946a337bee8942674278859e13292fb\"\n-    },\n-    {\n-        \"0102030405060708090a0b0c0d0e0f10\"\n-        \"111213141516171819\",\n-        \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n-        \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n-        \"cdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcd\"\n-        \"cdcd\",\n-        \"b0ba465637458c6990e5a8c5f61d4af7\"\n-        \"e576d97ff94b872de76f8050361ee3db\"\n-        \"a91ca5c11aa25eb4d679275cc5788063\"\n-        \"a5f19741120c4f2de2adebeb10a298dd\"\n-    },\n-    {\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaa\",\n-        \"54657374205573696e67204c61726765\"\n-        \"72205468616e20426c6f636b2d53697a\"\n-        \"65204b6579202d2048617368204b6579\"\n-        \"204669727374\",\n-        \"80b24263c7c1a3ebb71493c1dd7be8b4\"\n-        \"9b46d1f41b4aeec1121b013783f8f352\"\n-        \"6b56d037e05f2598bd0fd2215d6a1e52\"\n-        \"95e64f73f63f0aec8b915a985d786598\"\n-    },\n-    {\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n-        \"aaaaaa\",\n-        \"54686973206973206120746573742075\"\n-        \"73696e672061206c6172676572207468\"\n-        \"616e20626c6f636b2d73697a65206b65\"\n-        \"7920616e642061206c61726765722074\"\n-        \"68616e20626c6f636b2d73697a652064\"\n-        \"6174612e20546865206b6579206e6565\"\n-        \"647320746f2062652068617368656420\"\n-        \"6265666f7265206265696e6720757365\"\n-        \"642062792074686520484d414320616c\"\n-        \"676f726974686d2e\",\n-        \"e37b6a775dc87dbaa4dfa9f96e5e3ffd\"\n-        \"debd71f8867289865df5a32d20cdc944\"\n-        \"b6022cac3c4982b10d5eeb55c3e4de15\"\n-        \"134676fb6de0446065c97440fa8c6a58\"\n-    }\n-};\n-\n-BOOST_AUTO_TEST_CASE(hmacsha512_testvectors)\n-{\n-    for (unsigned int n=0; n<sizeof(vtest)/sizeof(vtest[0]); n++)\n-    {\n-        std::vector<unsigned char> vchKey  = ParseHex(vtest[n].pszKey);\n-        std::vector<unsigned char> vchData = ParseHex(vtest[n].pszData);\n-        std::vector<unsigned char> vchMAC  = ParseHex(vtest[n].pszMAC);\n-        unsigned char vchTemp[64];\n-        CHMAC_SHA512(&vchKey[0], vchKey.size()).Write(&vchData[0], vchData.size()).Finalize(&vchTemp[0]);\n-        BOOST_CHECK(memcmp(&vchTemp[0], &vchMAC[0], 64) == 0);\n-    }\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "54372482a8ffa363f5dd9ff1c80141a168109ed5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDM3MjQ4MmE4ZmZhMzYzZjVkZDlmZjFjODAxNDFhMTY4MTA5ZWQ1",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-06-09T18:58:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:43Z"
      },
      "message": "build: move bitcoin-config.h to its own directory\n\nThis allows us to include its path without making other header includes valid.",
      "tree": {
        "sha": "e7141e96b50b6dcc0fbb3f0a118208dfa580b6d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7141e96b50b6dcc0fbb3f0a118208dfa580b6d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54372482a8ffa363f5dd9ff1c80141a168109ed5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54372482a8ffa363f5dd9ff1c80141a168109ed5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54372482a8ffa363f5dd9ff1c80141a168109ed5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54372482a8ffa363f5dd9ff1c80141a168109ed5/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3820e01eb9ad0e502e92ebc44cb4623cf4f3d4c4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0caf653cadd43a6f98b072fb4caddc76463df1e0",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54372482a8ffa363f5dd9ff1c80141a168109ed5/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54372482a8ffa363f5dd9ff1c80141a168109ed5/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=54372482a8ffa363f5dd9ff1c80141a168109ed5",
        "patch": "@@ -111,7 +111,7 @@ AC_ARG_WITH([protoc-bindir],[AS_HELP_STRING([--with-protoc-bindir=BIN_DIR],[spec\n \n \n AC_CONFIG_SRCDIR([src])\n-AC_CONFIG_HEADERS([src/bitcoin-config.h])\n+AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n \n dnl Checks for programs.\n AC_PROG_CXX"
      },
      {
        "sha": "c666fb7662b932c89466fbe7f901ca33a52fbbe5",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54372482a8ffa363f5dd9ff1c80141a168109ed5/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54372482a8ffa363f5dd9ff1c80141a168109ed5/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=54372482a8ffa363f5dd9ff1c80141a168109ed5",
        "patch": "@@ -17,7 +17,8 @@ $(LIBLEVELDB) $(LIBMEMENV):\n           OPT=\"$(CXXFLAGS) $(CPPFLAGS)\"\n endif\n \n-BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)\n+BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n+BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BITCOIN_CONFIG_INCLUDES) $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS)\n \n noinst_LIBRARIES = \\\n   libbitcoin_server.a \\\n@@ -219,6 +220,7 @@ EXTRA_DIST = leveldb\n clean-local:\n \t-$(MAKE) -C leveldb clean\n \trm -f leveldb/*/*.gcno leveldb/helpers/memenv/*.gcno\n+\t-rm -f config.h\n \n .rc.o:\n \t@test -f $(WINDRES)"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "src/config/.empty",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54372482a8ffa363f5dd9ff1c80141a168109ed5/src/config/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54372482a8ffa363f5dd9ff1c80141a168109ed5/src/config/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/config/.empty?ref=54372482a8ffa363f5dd9ff1c80141a168109ed5"
      }
    ]
  },
  {
    "sha": "f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMjY0N2NjMGU5OTcxOThkN2FjN2YzZmUzZDg0M2U5NDFiNTdkZGE4",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-06-09T19:05:28Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:43Z"
      },
      "message": "crypto: explicitly check for byte read/write functions\n\nDon't depend on hard-coded platform lists",
      "tree": {
        "sha": "16913935f9312f78643dd1adf5e1227820605ee0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16913935f9312f78643dd1adf5e1227820605ee0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2647cc0e997198d7ac7f3fe3d843e941b57dda8/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54372482a8ffa363f5dd9ff1c80141a168109ed5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54372482a8ffa363f5dd9ff1c80141a168109ed5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54372482a8ffa363f5dd9ff1c80141a168109ed5"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 69,
      "deletions": 17
    },
    "files": [
      {
        "sha": "811ef1dd806ecf122c450b343737eee85cc2129a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2647cc0e997198d7ac7f3fe3d843e941b57dda8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2647cc0e997198d7ac7f3fe3d843e941b57dda8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
        "patch": "@@ -368,7 +368,12 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h])\n+AC_CHECK_HEADERS([endian.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h])\n+\n+AC_CHECK_DECLS([le32toh, le64toh, htole32, htole64, be32toh, be64toh, htobe32, htobe64],,,\n+\t\t[#if HAVE_ENDIAN_H\n+                 #include <endian.h>\n+                 #endif])\n \n dnl Check for MSG_NOSIGNAL\n AC_MSG_CHECKING(for MSG_NOSIGNAL)"
      },
      {
        "sha": "8f675a16c5befec8b1427a4ea2fcf810d413afb1",
        "filename": "src/crypto/common.h",
        "status": "modified",
        "additions": 63,
        "deletions": 16,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2647cc0e997198d7ac7f3fe3d843e941b57dda8/src/crypto/common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2647cc0e997198d7ac7f3fe3d843e941b57dda8/src/crypto/common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/common.h?ref=f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
        "patch": "@@ -5,42 +5,89 @@\n #ifndef BITCOIN_CRYPTO_COMMON_H\n #define BITCOIN_CRYPTO_COMMON_H\n \n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n #include <stdint.h>\n+#if defined(HAVE_ENDIAN_H)\n+#include <endian.h>\n+#endif\n+\n+uint32_t static inline ReadLE32(const unsigned char *ptr) {\n+#if HAVE_DECL_LE32TOH == 1\n+    return le32toh(*((uint32_t*)ptr));\n+#elif !defined(WORDS_BIGENDIAN)\n+    return *((uint32_t*)ptr);\n+#else\n+    return ((uint32_t)ptr[3] << 24 | (uint32_t)ptr[2] << 16 | (uint32_t)ptr[1] << 8 | (uint32_t)ptr[0]);\n+#endif\n+}\n+\n+uint64_t static inline ReadLE64(const unsigned char *ptr) {\n \n-#ifdef WIN32\n-uint32_t static inline ReadLE32(const unsigned char *ptr) { return *((uint32_t*)ptr); }\n-uint64_t static inline ReadLE64(const unsigned char *ptr) { return *((uint64_t*)ptr); }\n+#if HAVE_DECL_LE64TOH == 1\n+    return le64toh(*((uint64_t*)ptr));\n+#elif !defined(WORDS_BIGENDIAN)\n+    return *((uint64_t*)ptr);\n+#else\n+    return ((uint64_t)ptr[7] << 56 | (uint64_t)ptr[6] << 48 | (uint64_t)ptr[5] << 40 | (uint64_t)ptr[4] << 32 |\n+            (uint64_t)ptr[3] << 24 | (uint64_t)ptr[2] << 16 | (uint64_t)ptr[1] << 8 | (uint64_t)ptr[0]);\n+#endif\n+}\n \n-void static inline WriteLE32(unsigned char *ptr, uint32_t x) { *((uint32_t*)ptr) = x; }\n-void static inline WriteLE64(unsigned char *ptr, uint64_t x) { *((uint64_t*)ptr) = x; }\n+void static inline WriteLE32(unsigned char *ptr, uint32_t x) {\n+#if HAVE_DECL_HTOLE32 == 1\n+    *((uint32_t*)ptr) = htole32(x);\n+#elif !defined(WORDS_BIGENDIAN)\n+    *((uint32_t*)ptr) = x;\n+#else\n+    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+#endif\n+}\n+\n+void static inline WriteLE64(unsigned char *ptr, uint64_t x) {\n+#if HAVE_DECL_HTOLE64 == 1\n+    *((uint64_t*)ptr) = htole64(x);\n+#elif !defined(WORDS_BIGENDIAN)\n+    *((uint64_t*)ptr) = x;\n+#else\n+    ptr[7] = x >> 56; ptr[6] = x >> 48; ptr[5] = x >> 40; ptr[4] = x >> 32;\n+    ptr[3] = x >> 24; ptr[2] = x >> 16; ptr[1] = x >> 8; ptr[0] = x;\n+#endif\n+}\n \n uint32_t static inline ReadBE32(const unsigned char *ptr) {\n+#if HAVE_DECL_BE32TOH == 1\n+    return be32toh(*((uint32_t*)ptr));\n+#else\n     return ((uint32_t)ptr[0] << 24 | (uint32_t)ptr[1] << 16 | (uint32_t)ptr[2] << 8 | (uint32_t)ptr[3]);\n+#endif\n }\n \n uint64_t static inline ReadBE64(const unsigned char *ptr) {\n+#if HAVE_DECL_BE64TOH == 1\n+    return be64toh(*((uint64_t*)ptr));\n+#else\n     return ((uint64_t)ptr[0] << 56 | (uint64_t)ptr[1] << 48 | (uint64_t)ptr[2] << 40 | (uint64_t)ptr[3] << 32 |\n             (uint64_t)ptr[4] << 24 | (uint64_t)ptr[5] << 16 | (uint64_t)ptr[6] << 8 | (uint64_t)ptr[7]);\n+#endif\n }\n \n void static inline WriteBE32(unsigned char *ptr, uint32_t x) {\n+#if HAVE_DECL_HTOBE32 == 1\n+    *((uint32_t*)ptr) = htobe32(x);\n+#else\n     ptr[0] = x >> 24; ptr[1] = x >> 16; ptr[2] = x >> 8; ptr[3] = x;\n+#endif\n }\n \n void static inline WriteBE64(unsigned char *ptr, uint64_t x) {\n+#if HAVE_DECL_HTOBE64 == 1\n+    *((uint64_t*)ptr) = htobe64(x);\n+#else\n     ptr[0] = x >> 56; ptr[1] = x >> 48; ptr[2] = x >> 40; ptr[3] = x >> 32;\n     ptr[4] = x >> 24; ptr[5] = x >> 16; ptr[6] = x >> 8; ptr[7] = x;\n+#endif\n }\n-#else\n-#  include <endian.h>\n-uint32_t static inline ReadLE32(const unsigned char *ptr) { return le32toh(*((uint32_t*)ptr)); }\n-uint64_t static inline ReadLE64(const unsigned char *ptr) { return le64toh(*((uint64_t*)ptr)); }\n-void static inline WriteLE32(unsigned char *ptr, uint32_t x) { *((uint32_t*)ptr) = htole32(x); }\n-void static inline WriteLE64(unsigned char *ptr, uint64_t x) { *((uint64_t*)ptr) = htole64(x); }\n \n-uint32_t static inline ReadBE32(const unsigned char *ptr) { return be32toh(*((uint32_t*)ptr)); }\n-uint64_t static inline ReadBE64(const unsigned char *ptr) { return be64toh(*((uint64_t*)ptr)); }\n-void static inline WriteBE32(unsigned char *ptr, uint32_t x) { *((uint32_t*)ptr) = htobe32(x); }\n-void static inline WriteBE64(unsigned char *ptr, uint64_t x) { *((uint64_t*)ptr) = htobe64(x); }\n-#endif\n #endif"
      }
    ]
  },
  {
    "sha": "4791b99e2dea0593775a8c75f62c8406d340191e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzkxYjk5ZTJkZWEwNTkzNzc1YThjNzVmNjJjODQwNmQzNDAxOTFl",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-06-09T19:17:27Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:43Z"
      },
      "message": "crypto: create a separate lib for crypto functions\n\nThis lib has no dependencies on other bitcoin functionality. Attempting to\nuse bitcoin headers will result in a failure to compile.",
      "tree": {
        "sha": "4f6c304987cd53b1dc7c842f8bd03543665b004b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f6c304987cd53b1dc7c842f8bd03543665b004b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4791b99e2dea0593775a8c75f62c8406d340191e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4791b99e2dea0593775a8c75f62c8406d340191e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4791b99e2dea0593775a8c75f62c8406d340191e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4791b99e2dea0593775a8c75f62c8406d340191e/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2647cc0e997198d7ac7f3fe3d843e941b57dda8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2647cc0e997198d7ac7f3fe3d843e941b57dda8"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 18,
      "deletions": 11
    },
    "files": [
      {
        "sha": "3948ca078089f5ab26d69ac953b11e3203779226",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 15,
        "deletions": 8,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4791b99e2dea0593775a8c75f62c8406d340191e",
        "patch": "@@ -23,7 +23,8 @@ BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BITCOIN_CONFIG_INCLUDES) $(BO\n noinst_LIBRARIES = \\\n   libbitcoin_server.a \\\n   libbitcoin_common.a \\\n-  libbitcoin_cli.a\n+  libbitcoin_cli.a \\\n+  crypto/libbitcoin_crypto.a\n if ENABLE_WALLET\n BITCOIN_INCLUDES += $(BDB_CPPFLAGS)\n noinst_LIBRARIES += libbitcoin_wallet.a\n@@ -76,10 +77,6 @@ BITCOIN_CORE_H = \\\n   rpcserver.h \\\n   script.h \\\n   serialize.h \\\n-  crypto/common.h \\\n-  crypto/sha2.h \\\n-  crypto/sha1.h \\\n-  crypto/ripemd160.h \\\n   sync.h \\\n   threadsafety.h \\\n   tinyformat.h \\\n@@ -145,6 +142,16 @@ libbitcoin_wallet_a_SOURCES = \\\n   walletdb.cpp \\\n   $(BITCOIN_CORE_H)\n \n+crypto_libbitcoin_crypto_a_CPPFLAGS = $(BITCOIN_CONFIG_INCLUDES)\n+crypto_libbitcoin_crypto_a_SOURCES = \\\n+  crypto/sha1.cpp \\\n+  crypto/sha2.cpp \\\n+  crypto/ripemd160.cpp \\\n+  crypto/common.h \\\n+  crypto/sha2.h \\\n+  crypto/sha1.h \\\n+  crypto/ripemd160.h\n+\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n   base58.cpp \\\n@@ -157,9 +164,6 @@ libbitcoin_common_a_SOURCES = \\\n   protocol.cpp \\\n   rpcprotocol.cpp \\\n   script.cpp \\\n-  crypto/sha1.cpp \\\n-  crypto/sha2.cpp \\\n-  crypto/ripemd160.cpp \\\n   sync.cpp \\\n   util.cpp \\\n   version.cpp \\\n@@ -183,6 +187,7 @@ nodist_libbitcoin_common_a_SOURCES = $(srcdir)/obj/build.h\n bitcoind_LDADD = \\\n   libbitcoin_server.a \\\n   libbitcoin_common.a \\\n+  crypto/libbitcoin_crypto.a \\\n   $(LIBLEVELDB) \\\n   $(LIBMEMENV)\n if ENABLE_WALLET\n@@ -202,6 +207,7 @@ bitcoind_CPPFLAGS = $(BITCOIN_INCLUDES)\n bitcoin_cli_LDADD = \\\n   libbitcoin_cli.a \\\n   libbitcoin_common.a \\\n+  crypto/libbitcoin_crypto.a \\\n   $(BOOST_LIBS)\n bitcoin_cli_SOURCES = bitcoin-cli.cpp\n bitcoin_cli_CPPFLAGS = $(BITCOIN_INCLUDES)\n@@ -238,6 +244,7 @@ LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n+LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n \n if ENABLE_TESTS"
      },
      {
        "sha": "091138dc38f018a10c5f2562620b78684451e987",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=4791b99e2dea0593775a8c75f62c8406d340191e",
        "patch": "@@ -355,7 +355,7 @@ qt_bitcoin_qt_LDADD = qt/libbitcoinqt.a $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(QT_LDFLAGS)\n "
      },
      {
        "sha": "0aa31a406d8a85df5a7217d4099da1c2a1a28dec",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=4791b99e2dea0593775a8c75f62c8406d340191e",
        "patch": "@@ -30,7 +30,7 @@ qt_test_test_bitcoin_qt_LDADD = $(LIBBITCOINQT) $(LIBBITCOIN_SERVER)\n if ENABLE_WALLET\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_WALLET)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS)\n qt_test_test_bitcoin_qt_LDFLAGS = $(QT_LDFLAGS)"
      },
      {
        "sha": "64f997f4b5a2933476409a7663617f58235e246f",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4791b99e2dea0593775a8c75f62c8406d340191e/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=4791b99e2dea0593775a8c75f62c8406d340191e",
        "patch": "@@ -63,7 +63,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_CRYPTO) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)"
      }
    ]
  },
  {
    "sha": "a0495bb68c6eff9c732d458bacab10490d6452b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMDQ5NWJiNjhjNmVmZjljNzMyZDQ1OGJhY2FiMTA0OTBkNjQ1MmI0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "sipa@ulyssis.org",
        "date": "2014-06-12T11:34:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-06-21T17:47:43Z"
      },
      "message": "Add <Hasher>::OUTPUT_SIZE",
      "tree": {
        "sha": "191a3bb7929e1de43ea484873587249fd2533b19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/191a3bb7929e1de43ea484873587249fd2533b19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0495bb68c6eff9c732d458bacab10490d6452b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0495bb68c6eff9c732d458bacab10490d6452b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0495bb68c6eff9c732d458bacab10490d6452b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0495bb68c6eff9c732d458bacab10490d6452b4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4791b99e2dea0593775a8c75f62c8406d340191e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4791b99e2dea0593775a8c75f62c8406d340191e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4791b99e2dea0593775a8c75f62c8406d340191e"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 31,
      "deletions": 16
    },
    "files": [
      {
        "sha": "24bd318d43e60ce1313fb0fa215fc85d23d5770c",
        "filename": "src/crypto/ripemd160.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/ripemd160.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/ripemd160.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.cpp?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -184,7 +184,7 @@ CRIPEMD160& CRIPEMD160::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CRIPEMD160::Finalize(unsigned char *hash) {\n+void CRIPEMD160::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteLE64(sizedesc, bytes << 3);"
      },
      {
        "sha": "44bd4879a5098f820619104356e4e740e3c7f159",
        "filename": "src/crypto/ripemd160.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/ripemd160.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/ripemd160.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/ripemd160.h?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -16,9 +16,11 @@ class CRIPEMD160 {\n     size_t bytes;\n \n public:\n+    static const size_t OUTPUT_SIZE = 20;\n+\n     CRIPEMD160();\n     CRIPEMD160& Write(const unsigned char *data, size_t len);\n-    void Finalize(unsigned char *hash);\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CRIPEMD160& Reset();\n };\n "
      },
      {
        "sha": "304401a50fa64a5f66258ed56ca8fd54a8387ae7",
        "filename": "src/crypto/sha1.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha1.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha1.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.cpp?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -172,7 +172,7 @@ CSHA1& CSHA1::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA1::Finalize(unsigned char *hash) {\n+void CSHA1::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);"
      },
      {
        "sha": "b16f2c88ce7c7223659cb866a0f2d09d0ee68d1f",
        "filename": "src/crypto/sha1.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha1.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha1.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha1.h?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -16,9 +16,11 @@ class CSHA1 {\n     size_t bytes;\n \n public:\n+    static const size_t OUTPUT_SIZE = 20;\n+\n     CSHA1();\n     CSHA1& Write(const unsigned char *data, size_t len);\n-    void Finalize(unsigned char *hash);\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA1& Reset();\n };\n "
      },
      {
        "sha": "99a251cb1274d05cdc7c8423f6654e566140967b",
        "filename": "src/crypto/sha2.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha2.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha2.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.cpp?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -295,7 +295,7 @@ CSHA256& CSHA256::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA256::Finalize(unsigned char *hash) {\n+void CSHA256::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n     static const unsigned char pad[64] = {0x80};\n     unsigned char sizedesc[8];\n     WriteBE64(sizedesc, bytes << 3);\n@@ -348,7 +348,7 @@ CSHA512& CSHA512::Write(const unsigned char *data, size_t len) {\n     return *this;\n }\n \n-void CSHA512::Finalize(unsigned char *hash) {\n+void CSHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n     static const unsigned char pad[128] = {0x80};\n     unsigned char sizedesc[16] = {0x00};\n     WriteBE64(sizedesc+8, bytes << 3);\n@@ -391,7 +391,7 @@ CHMAC_SHA512::CHMAC_SHA512(const unsigned char *key, size_t keylen) {\n     inner.Write(rkey, 128);\n }\n \n-void CHMAC_SHA512::Finalize(unsigned char *hash) {\n+void CHMAC_SHA512::Finalize(unsigned char hash[OUTPUT_SIZE]) {\n     unsigned char temp[64];\n     inner.Finalize(temp);\n     outer.Write(temp, 64).Finalize(hash);"
      },
      {
        "sha": "088d5e194c734793c5759ec2ecf27410e401e2fd",
        "filename": "src/crypto/sha2.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha2.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/crypto/sha2.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha2.h?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -16,9 +16,11 @@ class CSHA256 {\n     size_t bytes;\n \n public:\n+    static const size_t OUTPUT_SIZE = 32;\n+\n     CSHA256();\n     CSHA256& Write(const unsigned char *data, size_t len);\n-    void Finalize(unsigned char *hash);\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA256& Reset();\n };\n \n@@ -30,9 +32,11 @@ class CSHA512 {\n     size_t bytes;\n \n public:\n+    static const size_t OUTPUT_SIZE = 64;\n+\n     CSHA512();\n     CSHA512& Write(const unsigned char *data, size_t len);\n-    void Finalize(unsigned char *hash);\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA512& Reset();\n };\n \n@@ -43,12 +47,14 @@ class CHMAC_SHA512 {\n     CSHA512 inner;\n \n public:\n+    static const size_t OUTPUT_SIZE = 64;\n+\n     CHMAC_SHA512(const unsigned char *key, size_t keylen);\n     CHMAC_SHA512& Write(const unsigned char *data, size_t len) {\n         inner.Write(data, len);\n         return *this;\n     }\n-    void Finalize(unsigned char *hash);\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]);\n };\n \n #endif"
      },
      {
        "sha": "f2a0ebfe1f2575cbcdb22e768419eae1daa91c07",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 10,
        "deletions": 6,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -19,10 +19,12 @@ class CHash256 {\n private:\n     CSHA256 sha;\n public:\n-    void Finalize(unsigned char *hash) {\n-        unsigned char buf[32];\n+    static const size_t OUTPUT_SIZE = CSHA256::OUTPUT_SIZE;\n+\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+        unsigned char buf[sha.OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        sha.Reset().Write(buf, 32).Finalize(hash);\n+        sha.Reset().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash256& Write(const unsigned char *data, size_t len) {\n@@ -41,10 +43,12 @@ class CHash160 {\n private:\n     CSHA256 sha;\n public:\n-    void Finalize(unsigned char *hash) {\n-        unsigned char buf[32];\n+    static const size_t OUTPUT_SIZE = CRIPEMD160::OUTPUT_SIZE;\n+\n+    void Finalize(unsigned char hash[OUTPUT_SIZE]) {\n+        unsigned char buf[sha.OUTPUT_SIZE];\n         sha.Finalize(buf);\n-        CRIPEMD160().Write(buf, 32).Finalize(hash);\n+        CRIPEMD160().Write(buf, sha.OUTPUT_SIZE).Finalize(hash);\n     }\n \n     CHash160& Write(const unsigned char *data, size_t len) {"
      },
      {
        "sha": "7bd98fa381e17085dc288293de3c4d807a4e5cdb",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0495bb68c6eff9c732d458bacab10490d6452b4/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0495bb68c6eff9c732d458bacab10490d6452b4/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=a0495bb68c6eff9c732d458bacab10490d6452b4",
        "patch": "@@ -16,6 +16,7 @@ BOOST_AUTO_TEST_SUITE(crypto_tests)\n template<typename Hasher, typename In, typename Out>\n void TestVector(const Hasher &h, const In &in, const Out &out) {\n     Out hash;\n+    BOOST_CHECK(out.size() == h.OUTPUT_SIZE);\n     hash.resize(out.size());\n     {\n         // Test that writing the whole input string at once works."
      }
    ]
  }
]