sipa,2014-04-27T22:12:19Z,"Benchmark of the built-in miner: old code 1111 khash/s, new code 1016 khash/s.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41511057,41511057,
sipa,2014-04-27T23:16:35Z,"Microbenchmark for just double-SHA256 of a 80-byte block: old 1.26us, new 1.37us\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41512727,41512727,
jgarzik,2014-04-27T23:55:58Z,"IIRC, we suffer from the terribly annoying requirement that some getwork miners fail without midstate and hash1.\n\nSure, those miners could be modified, but it seems disappointing to break an interface we want to remove anyway.  The internal miner and GBT continue to see modern users, but I think it is time to retire getwork.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41513736,41513736,
luke-jr,2014-04-28T00:10:08Z,AFAIK the only miner which needs midstate/hash1 is DiabloMiner.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41514078,41514078,
laanwj,2014-04-28T02:06:49Z,"Agree on removing getwork completely in next major release. It doesn't scale to modern mining hardware, that alone is reason enough to get rid of it (we will have to adopt the `contrib/pyminer` to use `getblocktemplate`). I'm not convinced it should happen in this pull, though. Removing midstate seems like a fine intermediate solution.\n\nNit: we're ending up with a lot of hash-related implementat",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41517704,41517704,
gmaxwell,2014-04-28T05:15:26Z,I also think we should remove getwork. We should retain an ability to mine in the stock distribution (either the integrated miner or some contrib/ solution) but that doesn't imply keeping getwork. I don't even use getwork while mining on testnet.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41523626,41523626,
sipa,2014-04-28T11:12:46Z,"Removed getwork(), and moved the SHA implementations to src/crypto/ (not src/hash/, as we'll also want AES there eventually, I guess). I didn't move hash.h itself there, as it doesn't contain any actual crypto code (just wrappers), and it depends on more Bitcoin-specific stuff (this way, src/crypto/ is entirely dependencyless).\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41546622,41546622,
laanwj,2014-04-28T14:16:18Z,"Good point on `crypto` instead of `hash`.\nWoohoo, the pull-tester passed!\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41562970,41562970,
sipa,2014-04-28T14:34:37Z,"Ok, bug fixed. Seems I didn't update the precomputed SHA256 state after updating the timestamp.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41565323,41565323,
sipa,2014-04-30T23:03:21Z,Added RIPEMD160 as well.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-41862228,41862228,
jgarzik,2014-05-02T13:02:32Z,"untested ACK.  One comment:\n\n{Read,Write}{BE,LE]{32,64} really wants to be in some sort of common header.  One of my first reactions -- though outside the scope of your initial conversion -- was that the implementations of WriteBE\* etc. is a ""slow but safe"" implementation.  It should be a compiler intrinsic, as it can be on any gcc platform.  And that requires a common header for such gizmos.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42028935,42028935,
sipa,2014-05-02T15:41:04Z,@Jeff: very preliminary test with __builtin_bswap32 results in a 4% speedup\nfor the builtin miner (but may be noise).\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42045393,42045393,
jgarzik,2014-05-02T15:49:42Z,"Not surprised.  **Enormous** amounts of effort have been expended on the glibc [header] side, gcc and CPU sides of the problem, to make byte swapping faster.\n\nAs a result, you will see endian.h and friends play several tricks at compile-time, and then attempt to fall back to a compiler instrinsic if that does not work.  Every modern CPU has a byte-swap instruction.  Any networked LE or BE platfo",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42046326,42046326,
sipa,2014-05-02T22:01:06Z,"More thorough test: 6% speedup. That's probablt worth it given how many sha256'ing we do...\n\nEDIT: with __builtin_bswap32, the built-in miner is only 4% slower than the current OpenSSL-based implementation.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42083527,42083527,
sipa,2014-05-02T23:09:58Z,"Moved the Read/Write functions to crypto/common.h, and made them use direct read/write and/or __builtin_bswap\* when possible.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42087958,42087958,
sipa,2014-05-02T23:18:30Z,"Ugh, endian.h doesn't exist for mingw. This will need some autotools interaction :(\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42088405,42088405,
sipa,2014-05-02T23:33:46Z,Small cheat: WIN32 is always little endian\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42089120,42089120,
sipa,2014-05-03T19:21:38Z,\o/\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42113995,42113995,
sipa,2014-05-10T13:10:43Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42741356,42741356,
ghost,2014-05-11T12:42:27Z,Tested (linux) ACK.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-42769555,42769555,
sipa,2014-05-31T20:12:34Z,Extended the hash unit tests.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-44758506,44758506,
sipa,2014-06-05T23:12:36Z,"No need to rush things, as 0.10 won't be for any time soon, but what do people think about the degree of tests here? Anything more required?\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45286741,45286741,
ghost,2014-06-06T07:08:38Z,I think it would be better to get this merged now so it can run on testnet\nfor a while.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45308892,45308892,
laanwj,2014-06-06T07:33:36Z,"@sipa Testing looks good to me.\n\n@drak There is no way to merge it only for testnet (as that would imply keeping both implementations and being able to switch between them, a waste of work). If you want to run this on testnet - which is a great idea - why not just pull sipa's 'ownhash' branch?\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45310401,45310401,
jgarzik,2014-06-07T01:58:35Z,"General re-ACK.\n\nComments:\n- It would be nice to specify a precise size on the char buffer in various Finalize() arguments, and the language does permit that.  However, there may be disadvantages.\n- On testing, the only thing I can suggest is a review of every callsite, and make sure that block import or some other populate code path (or test suite test) exercises that callsite.\n- It seems li",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45398438,45398438,
sipa,2014-06-08T21:15:41Z,"Rebased, and added a test vector with a non-repeating long string (as suggested by @adam3us).\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45448828,45448828,
theuni,2014-06-09T19:52:42Z,"I've pushed up the autotools work as mentioned by @jgarzik here: https://github.com/theuni/bitcoin/commits/ownhash . \n\nAlso, this really needs to be built as its own library because it is entirely self-contained. My branch contains those changes as well.\n\nThere's nothing there to derail this PR though, both of these things can be discussed/merged after.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45535823,45535823,
sipa,2014-06-09T20:38:04Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45540937,45540937,
sipa,2014-06-10T07:15:55Z,"Added some commits from @theuni, to build the crypto code as a separate library.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45581075,45581075,
sipa,2014-06-10T07:24:37Z,"@jgarzik Suggestion for the output buffer size API?\n\nI wouldn't mind a CSomething::OUTPUT_SIZE constant, but the code using it should be aware already anyway.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45581634,45581634,
sipa,2014-06-12T23:03:07Z,"@jgarzik Added a [Class]::OUTPUT_SIZE static constant, and use it in the method definition of Finalize and in a few other places.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45958808,45958808,
jgarzik,2014-06-13T01:11:09Z,+1\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-45966358,45966358,
sipa,2014-06-21T12:42:07Z,Rebased.\n\nCan I have some ACKs? @gmaxwell @laanwj?\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-46752703,46752703,
sipa,2014-06-21T14:12:39Z,"Alternatively, I can move the non-crypto changes (just the wrapper interfaces, getwork/miner changes, unit tests, ...) to a separate pullreq, as those should be no-ops.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-46754680,46754680,
jgarzik,2014-06-21T14:46:37Z,"FWIW, I announced the death of ""getwork"" on bitcoin-development.  Nobody objected.  @laanwj posted the only reply, which was a clarification for the audience.\n\nMy ACK remains standing.\n",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-46755461,46755461,
laanwj,2014-06-21T15:20:22Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-46756310,46756310,
BitcoinPullTester,2014-06-21T18:39:03Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/a0495bb68c6eff9c732d458bacab10490d6452b4 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-46761339,46761339,
gmaxwell,2014-06-21T20:42:19Z,Tested ACK.\n,https://github.com/bitcoin/bitcoin/pull/4100#issuecomment-46764260,46764260,
