[
  {
    "sha": "fc7c60d6998a330966ffe99274c93b5278ed2ee1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzdjNjBkNjk5OGEzMzA5NjZmZmU5OTI3NGM5M2I1Mjc4ZWQyZWUx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-02-22T11:07:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-11T13:31:06Z"
      },
      "message": "[Wallet] move \"load wallet phase\" to CWallet",
      "tree": {
        "sha": "9f4f5b094c029197049a909f3017b16b235e891d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f4f5b094c029197049a909f3017b16b235e891d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc7c60d6998a330966ffe99274c93b5278ed2ee1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJW4siaAAoJECnUvLZBb1PsVIoQAJf+PzDxx3JM/mS5D73krqV4\nx6S2Mk3D+7qmbUNdchDath9IT/tIrcu6gEUXemeL5WlZh0NLUPqmloWxdzCD6fqC\n2SC30Pv4W6c4hWPxFk/gF0G1ckCkjXLG8LeOUihnmn2WW8VWOYew2LJ4Oq5uDrqx\nFprQ68n4f4pIeujSRkdTMayXegIydnY2c235t7ldFbboSxUfc9bf8roGk+OnY576\nL+pJteNAt3Kx9BwoCii0MxGydBYTvbdTD/8WCv1l9afFCq3RCYgjQGXz5qGpH0vw\nDCizOKEpMyyDXGWIOQ5WfhSiRkkKygRPXwXSImkYSWpuPb1tpDC9DpVVxgPm6G8G\nrF3UQM7ZXInSE/h6NhKtmScumk36tuOuIrMoRAywD1i6zfqYQ24MqvcDFj0pcawQ\nFvI/A5gPeGmZtrtlWtYoKFlSQEyCmONQaz/E3y584AQSDIMS8BeipFGtxdLZMy8q\nPekJtB8dfUvj2w5MUjSccYQA1J3kF10AGhNExKkSHtaiKhV9YYfVdEsH16xhU8n9\n71T3JDtClQJFYQWMQu+oUy7N672bfY6526KV9gFoo8omtYxbiB3JcOxkk6eadcxo\nCeBmx9hzXUIUH1hKWMgUX3cA9mJzlzYC7kxzTxRbznPRUZppQGzymBCdetd4+594\n1BtqCA+m+1V3WWJ4CjUO\n=a/dj\n-----END PGP SIGNATURE-----",
        "payload": "tree 9f4f5b094c029197049a909f3017b16b235e891d\nparent 0fa88ef784dda77422fdb20b7358803f9b30a5c1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1456139275 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1457703066 +0100\n\n[Wallet] move \"load wallet phase\" to CWallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7c60d6998a330966ffe99274c93b5278ed2ee1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc7c60d6998a330966ffe99274c93b5278ed2ee1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7c60d6998a330966ffe99274c93b5278ed2ee1/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0fa88ef784dda77422fdb20b7358803f9b30a5c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fa88ef784dda77422fdb20b7358803f9b30a5c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fa88ef784dda77422fdb20b7358803f9b30a5c1"
      }
    ],
    "stats": {
      "total": 306,
      "additions": 163,
      "deletions": 143
    },
    "files": [
      {
        "sha": "0fd8de08c47e09ca847c08c54a54e9ffdee446d2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 143,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7c60d6998a330966ffe99274c93b5278ed2ee1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7c60d6998a330966ffe99274c93b5278ed2ee1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fc7c60d6998a330966ffe99274c93b5278ed2ee1",
        "patch": "@@ -1424,149 +1424,16 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         pwalletMain = NULL;\n         LogPrintf(\"Wallet disabled!\\n\");\n     } else {\n-\n-        // needed to restore wallet transaction meta data after -zapwallettxes\n-        std::vector<CWalletTx> vWtx;\n-\n-        if (GetBoolArg(\"-zapwallettxes\", false)) {\n-            uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n-\n-            pwalletMain = new CWallet(strWalletFile);\n-            DBErrors nZapWalletRet = pwalletMain->ZapWalletTx(vWtx);\n-            if (nZapWalletRet != DB_LOAD_OK) {\n-                uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n-                return false;\n-            }\n-\n-            delete pwalletMain;\n-            pwalletMain = NULL;\n-        }\n-\n-        uiInterface.InitMessage(_(\"Loading wallet...\"));\n-\n-        nStart = GetTimeMillis();\n-        bool fFirstRun = true;\n-        pwalletMain = new CWallet(strWalletFile);\n-        DBErrors nLoadWalletRet = pwalletMain->LoadWallet(fFirstRun);\n-        if (nLoadWalletRet != DB_LOAD_OK)\n-        {\n-            if (nLoadWalletRet == DB_CORRUPT)\n-                strErrors << _(\"Error loading wallet.dat: Wallet corrupted\") << \"\\n\";\n-            else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n-            {\n-                InitWarning(_(\"Error reading wallet.dat! All keys read correctly, but transaction data\"\n-                             \" or address book entries might be missing or incorrect.\"));\n-            }\n-            else if (nLoadWalletRet == DB_TOO_NEW)\n-                strErrors << strprintf(_(\"Error loading wallet.dat: Wallet requires newer version of %s\"), _(PACKAGE_NAME)) << \"\\n\";\n-            else if (nLoadWalletRet == DB_NEED_REWRITE)\n-            {\n-                strErrors << strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)) << \"\\n\";\n-                LogPrintf(\"%s\", strErrors.str());\n-                return InitError(strErrors.str());\n-            }\n-            else\n-                strErrors << _(\"Error loading wallet.dat\") << \"\\n\";\n-        }\n-\n-        if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n-        {\n-            int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n-            if (nMaxVersion == 0) // the -upgradewallet without argument case\n-            {\n-                LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n-                nMaxVersion = CLIENT_VERSION;\n-                pwalletMain->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-            }\n-            else\n-                LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n-            if (nMaxVersion < pwalletMain->GetVersion())\n-                strErrors << _(\"Cannot downgrade wallet\") << \"\\n\";\n-            pwalletMain->SetMaxVersion(nMaxVersion);\n-        }\n-\n-        if (fFirstRun)\n-        {\n-            // Create new keyUser and set as default key\n-            RandAddSeedPerfmon();\n-\n-            CPubKey newDefaultKey;\n-            if (pwalletMain->GetKeyFromPool(newDefaultKey)) {\n-                pwalletMain->SetDefaultKey(newDefaultKey);\n-                if (!pwalletMain->SetAddressBook(pwalletMain->vchDefaultKey.GetID(), \"\", \"receive\"))\n-                    strErrors << _(\"Cannot write default address\") << \"\\n\";\n-            }\n-\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-        }\n-\n-        LogPrintf(\"%s\", strErrors.str());\n-        LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n-\n-        RegisterValidationInterface(pwalletMain);\n-\n-        CBlockIndex *pindexRescan = chainActive.Tip();\n-        if (GetBoolArg(\"-rescan\", false))\n-            pindexRescan = chainActive.Genesis();\n-        else\n-        {\n-            CWalletDB walletdb(strWalletFile);\n-            CBlockLocator locator;\n-            if (walletdb.ReadBestBlock(locator))\n-                pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n-            else\n-                pindexRescan = chainActive.Genesis();\n-        }\n-        if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n-        {\n-            //We can't rescan beyond non-pruned blocks, stop and throw an error\n-            //this might happen if a user uses a old wallet within a pruned node\n-            // or if he ran -disablewallet for a longer time, then decided to re-enable\n-            if (fPruneMode)\n-            {\n-                CBlockIndex *block = chainActive.Tip();\n-                while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n-                    block = block->pprev;\n-\n-                if (pindexRescan != block)\n-                    return InitError(_(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\"));\n-            }\n-\n-            uiInterface.InitMessage(_(\"Rescanning...\"));\n-            LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n-            nStart = GetTimeMillis();\n-            pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-            LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n-            pwalletMain->SetBestChain(chainActive.GetLocator());\n-            nWalletDBUpdated++;\n-\n-            // Restore wallet transaction metadata after -zapwallettxes=1\n-            if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n-            {\n-                CWalletDB walletdb(strWalletFile);\n-\n-                BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n-                {\n-                    uint256 hash = wtxOld.GetHash();\n-                    std::map<uint256, CWalletTx>::iterator mi = pwalletMain->mapWallet.find(hash);\n-                    if (mi != pwalletMain->mapWallet.end())\n-                    {\n-                        const CWalletTx* copyFrom = &wtxOld;\n-                        CWalletTx* copyTo = &mi->second;\n-                        copyTo->mapValue = copyFrom->mapValue;\n-                        copyTo->vOrderForm = copyFrom->vOrderForm;\n-                        copyTo->nTimeReceived = copyFrom->nTimeReceived;\n-                        copyTo->nTimeSmart = copyFrom->nTimeSmart;\n-                        copyTo->fFromMe = copyFrom->fFromMe;\n-                        copyTo->strFromAccount = copyFrom->strFromAccount;\n-                        copyTo->nOrderPos = copyFrom->nOrderPos;\n-                        copyTo->WriteToDisk(&walletdb);\n-                    }\n-                }\n-            }\n-        }\n-        pwalletMain->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n-    } // (!fDisableWallet)\n+        std::string warningString;\n+        std::string errorString;\n+        pwalletMain = CWallet::InitLoadWallet(fDisableWallet, strWalletFile, warningString, errorString);\n+        if (!pwalletMain)\n+            return false;\n+        if (!warningString.empty())\n+            InitWarning(warningString);\n+        if (!errorString.empty())\n+            return InitError(errorString);\n+    }\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");\n #endif // !ENABLE_WALLET"
      },
      {
        "sha": "56287d4f441b23c63dfffb276ffb31a29af23364",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 150,
        "deletions": 0,
        "changes": 150,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7c60d6998a330966ffe99274c93b5278ed2ee1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7c60d6998a330966ffe99274c93b5278ed2ee1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fc7c60d6998a330966ffe99274c93b5278ed2ee1",
        "patch": "@@ -2991,6 +2991,156 @@ std::string CWallet::GetWalletHelpString(bool showDebug)\n     return strUsage;\n }\n \n+CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWalletFile, std::string& warningString, std::string& errorString)\n+{\n+    // needed to restore wallet transaction meta data after -zapwallettxes\n+    std::vector<CWalletTx> vWtx;\n+\n+    if (GetBoolArg(\"-zapwallettxes\", false)) {\n+        uiInterface.InitMessage(_(\"Zapping all transactions from wallet...\"));\n+\n+        CWallet *tempWallet = new CWallet(strWalletFile);\n+        DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n+        if (nZapWalletRet != DB_LOAD_OK) {\n+            uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n+            return NULL;\n+        }\n+\n+        delete tempWallet;\n+        tempWallet = NULL;\n+    }\n+\n+    uiInterface.InitMessage(_(\"Loading wallet...\"));\n+\n+    int64_t nStart = GetTimeMillis();\n+    bool fFirstRun = true;\n+    CWallet *walletInstance = new CWallet(strWalletFile);\n+    DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n+    if (nLoadWalletRet != DB_LOAD_OK)\n+    {\n+        if (nLoadWalletRet == DB_CORRUPT)\n+            errorString += _(\"Error loading wallet.dat: Wallet corrupted\") + \"\\n\";\n+        else if (nLoadWalletRet == DB_NONCRITICAL_ERROR)\n+        {\n+            warningString += _(\"Error reading wallet.dat! All keys read correctly, but transaction data\"\n+                          \" or address book entries might be missing or incorrect.\");\n+        }\n+        else if (nLoadWalletRet == DB_TOO_NEW)\n+            errorString += strprintf(_(\"Error loading wallet.dat: Wallet requires newer version of %s\"), _(PACKAGE_NAME)) + \"\\n\";\n+        else if (nLoadWalletRet == DB_NEED_REWRITE)\n+        {\n+            errorString += strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)) + \"\\n\";\n+            LogPrintf(\"%s\", errorString);\n+            return walletInstance;\n+        }\n+        else\n+            errorString += _(\"Error loading wallet.dat\") + \"\\n\";\n+    }\n+\n+    if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n+    {\n+        int nMaxVersion = GetArg(\"-upgradewallet\", 0);\n+        if (nMaxVersion == 0) // the -upgradewallet without argument case\n+        {\n+            LogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n+            nMaxVersion = CLIENT_VERSION;\n+            walletInstance->SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n+        }\n+        else\n+            LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+        if (nMaxVersion < walletInstance->GetVersion())\n+            errorString += _(\"Cannot downgrade wallet\") + \"\\n\";\n+        walletInstance->SetMaxVersion(nMaxVersion);\n+    }\n+\n+    if (fFirstRun)\n+    {\n+        // Create new keyUser and set as default key\n+        RandAddSeedPerfmon();\n+\n+        CPubKey newDefaultKey;\n+        if (walletInstance->GetKeyFromPool(newDefaultKey)) {\n+            walletInstance->SetDefaultKey(newDefaultKey);\n+            if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\"))\n+                errorString += _(\"Cannot write default address\") += \"\\n\";\n+        }\n+\n+        walletInstance->SetBestChain(chainActive.GetLocator());\n+    }\n+\n+    LogPrintf(\"%s\", errorString);\n+    LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n+\n+    RegisterValidationInterface(walletInstance);\n+\n+    CBlockIndex *pindexRescan = chainActive.Tip();\n+    if (GetBoolArg(\"-rescan\", false))\n+        pindexRescan = chainActive.Genesis();\n+    else\n+    {\n+        CWalletDB walletdb(strWalletFile);\n+        CBlockLocator locator;\n+        if (walletdb.ReadBestBlock(locator))\n+            pindexRescan = FindForkInGlobalIndex(chainActive, locator);\n+        else\n+            pindexRescan = chainActive.Genesis();\n+    }\n+    if (chainActive.Tip() && chainActive.Tip() != pindexRescan)\n+    {\n+        //We can't rescan beyond non-pruned blocks, stop and throw an error\n+        //this might happen if a user uses a old wallet within a pruned node\n+        // or if he ran -disablewallet for a longer time, then decided to re-enable\n+        if (fPruneMode)\n+        {\n+            CBlockIndex *block = chainActive.Tip();\n+            while (block && block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA) && block->pprev->nTx > 0 && pindexRescan != block)\n+                block = block->pprev;\n+\n+            if (pindexRescan != block)\n+            {\n+                errorString = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n+                return walletInstance;\n+            }\n+        }\n+\n+        uiInterface.InitMessage(_(\"Rescanning...\"));\n+        LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n+        nStart = GetTimeMillis();\n+        walletInstance->ScanForWalletTransactions(pindexRescan, true);\n+        LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n+        walletInstance->SetBestChain(chainActive.GetLocator());\n+        nWalletDBUpdated++;\n+\n+        // Restore wallet transaction metadata after -zapwallettxes=1\n+        if (GetBoolArg(\"-zapwallettxes\", false) && GetArg(\"-zapwallettxes\", \"1\") != \"2\")\n+        {\n+            CWalletDB walletdb(strWalletFile);\n+\n+            BOOST_FOREACH(const CWalletTx& wtxOld, vWtx)\n+            {\n+                uint256 hash = wtxOld.GetHash();\n+                std::map<uint256, CWalletTx>::iterator mi = walletInstance->mapWallet.find(hash);\n+                if (mi != walletInstance->mapWallet.end())\n+                {\n+                    const CWalletTx* copyFrom = &wtxOld;\n+                    CWalletTx* copyTo = &mi->second;\n+                    copyTo->mapValue = copyFrom->mapValue;\n+                    copyTo->vOrderForm = copyFrom->vOrderForm;\n+                    copyTo->nTimeReceived = copyFrom->nTimeReceived;\n+                    copyTo->nTimeSmart = copyFrom->nTimeSmart;\n+                    copyTo->fFromMe = copyFrom->fFromMe;\n+                    copyTo->strFromAccount = copyFrom->strFromAccount;\n+                    copyTo->nOrderPos = copyFrom->nOrderPos;\n+                    copyTo->WriteToDisk(&walletdb);\n+                }\n+            }\n+        }\n+    }\n+    walletInstance->SetBroadcastTransactions(GetBoolArg(\"-walletbroadcast\", DEFAULT_WALLETBROADCAST));\n+\n+    return walletInstance;\n+}\n+\n CKeyPool::CKeyPool()\n {\n     nTime = GetTime();"
      },
      {
        "sha": "d009211a923eba62bf2fd9fad72761f0c40ae367",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc7c60d6998a330966ffe99274c93b5278ed2ee1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc7c60d6998a330966ffe99274c93b5278ed2ee1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fc7c60d6998a330966ffe99274c93b5278ed2ee1",
        "patch": "@@ -874,6 +874,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     /* Returns the wallets help message */\n     static std::string GetWalletHelpString(bool showDebug);\n+\n+    /* initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n+    static CWallet* InitLoadWallet(bool fDisableWallet, const std::string& strWalletFile, std::string& warningString, std::string& errorString);\n };\n \n /** A key allocated from the key pool. */"
      }
    ]
  },
  {
    "sha": "15e6e13624e3bd322db67861ec27bd5f9d18b6e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNWU2ZTEzNjI0ZTNiZDMyMmRiNjc4NjFlYzI3YmQ1ZjlkMThiNmU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-05T21:08:10Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-03-14T08:33:27Z"
      },
      "message": "[Wallet] optimize return value of InitLoadWallet()",
      "tree": {
        "sha": "88eeca02bb7bd30ded80cc7b70352f67016ab83c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88eeca02bb7bd30ded80cc7b70352f67016ab83c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/15e6e13624e3bd322db67861ec27bd5f9d18b6e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJW5ndXAAoJECnUvLZBb1PslmMP/1Aw10FOX+3fgqNodaQAEd7U\n81mX+krkr6CWxt6wSoyPxc40oEpiZXWNV9i8FL/n0EyWP80+pYSAI+SkJcN93/5K\nBzmTucU3KrTOjAN5Nk6VSV/vz7bH77CYvbNvUx/s5/J/ivMLUYsuPo2qxWgNIf7z\naLMX9VrqVk1uoOioqrKguwYbFZ09dznc8P5D+ni0jMcN4PH3InO8owGXqVv7cK3j\nVqvICn9ZmR9xr9aqoPQkjUsVgidOzsUHQmIZ06dfI0XFHbIMzAo7cfii9g9T0LSB\nHCdaCDfQpqwR5yOKGa5N++RkiaXmCUPkblQjuJxaUidQNXdZd09N0qGVEzdt7LC+\np7lTp0O/aAmtfyFUPstzDGI9sfBDmQhjKt8wwwuJYKSmB7DUyosL6MigBNgVMRkg\nUxundYXQXkOYGv2RxHxisZYhENslLTry4pJMiTgqA3dugR+c1QWjscMXl4NI7g+r\nhUkck9BjBjnO5QiLw5UMWod46+Iaruptqb21InzPf0EeO/PAW53zVrQW3YmbhZdW\nQZsLo5VjrABDSPvT3gQXd+AQRK7UV+ubZHuhVFsvBUQpinBNP/O1DcPcV6TbrTsr\nQZDlx9jb5SJqjsXmEQoEysM507fVvNlQ2ukve4034v6d2IPDLwS00SuywDsjdxgp\nEC3KZOchjBNw7CO09ljE\n=XAqe\n-----END PGP SIGNATURE-----",
        "payload": "tree 88eeca02bb7bd30ded80cc7b70352f67016ab83c\nparent fc7c60d6998a330966ffe99274c93b5278ed2ee1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1457212090 -0500\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1457944407 +0100\n\n[Wallet] optimize return value of InitLoadWallet()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15e6e13624e3bd322db67861ec27bd5f9d18b6e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/15e6e13624e3bd322db67861ec27bd5f9d18b6e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/15e6e13624e3bd322db67861ec27bd5f9d18b6e8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc7c60d6998a330966ffe99274c93b5278ed2ee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc7c60d6998a330966ffe99274c93b5278ed2ee1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc7c60d6998a330966ffe99274c93b5278ed2ee1"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 16,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ba986001414a7bd0419f54575fae225338121dcb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15e6e13624e3bd322db67861ec27bd5f9d18b6e8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15e6e13624e3bd322db67861ec27bd5f9d18b6e8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=15e6e13624e3bd322db67861ec27bd5f9d18b6e8",
        "patch": "@@ -1427,12 +1427,15 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         std::string warningString;\n         std::string errorString;\n         pwalletMain = CWallet::InitLoadWallet(fDisableWallet, strWalletFile, warningString, errorString);\n-        if (!pwalletMain)\n-            return false;\n         if (!warningString.empty())\n             InitWarning(warningString);\n         if (!errorString.empty())\n+        {\n+            LogPrintf(\"%s\", errorString);\n             return InitError(errorString);\n+        }\n+        if (!pwalletMain)\n+            return false;\n     }\n #else // ENABLE_WALLET\n     LogPrintf(\"No wallet support compiled in!\\n\");"
      },
      {
        "sha": "d409d74801fe0e12baff5401b7902ad5d30cb746",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/15e6e13624e3bd322db67861ec27bd5f9d18b6e8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/15e6e13624e3bd322db67861ec27bd5f9d18b6e8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=15e6e13624e3bd322db67861ec27bd5f9d18b6e8",
        "patch": "@@ -3002,6 +3002,7 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         CWallet *tempWallet = new CWallet(strWalletFile);\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DB_LOAD_OK) {\n+            errorString = _(\"Error loading wallet.dat: Wallet corrupted\");\n             uiInterface.InitMessage(_(\"Error loading wallet.dat: Wallet corrupted\"));\n             return NULL;\n         }\n@@ -3031,10 +3032,12 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         {\n             errorString += strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)) + \"\\n\";\n             LogPrintf(\"%s\", errorString);\n-            return walletInstance;\n         }\n         else\n             errorString += _(\"Error loading wallet.dat\") + \"\\n\";\n+\n+        if (!errorString.empty())\n+            return NULL;\n     }\n \n     if (GetBoolArg(\"-upgradewallet\", fFirstRun))\n@@ -3049,7 +3052,10 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         else\n             LogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n         if (nMaxVersion < walletInstance->GetVersion())\n+        {\n             errorString += _(\"Cannot downgrade wallet\") + \"\\n\";\n+            return NULL;\n+        }\n         walletInstance->SetMaxVersion(nMaxVersion);\n     }\n \n@@ -3062,13 +3068,15 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n         if (walletInstance->GetKeyFromPool(newDefaultKey)) {\n             walletInstance->SetDefaultKey(newDefaultKey);\n             if (!walletInstance->SetAddressBook(walletInstance->vchDefaultKey.GetID(), \"\", \"receive\"))\n+            {\n                 errorString += _(\"Cannot write default address\") += \"\\n\";\n+                return NULL;\n+            }\n         }\n \n         walletInstance->SetBestChain(chainActive.GetLocator());\n     }\n \n-    LogPrintf(\"%s\", errorString);\n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n     RegisterValidationInterface(walletInstance);\n@@ -3099,7 +3107,7 @@ CWallet* CWallet::InitLoadWallet(bool fDisableWallet, const std::string& strWall\n             if (pindexRescan != block)\n             {\n                 errorString = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n-                return walletInstance;\n+                return NULL;\n             }\n         }\n "
      }
    ]
  }
]