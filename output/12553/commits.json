[
  {
    "sha": "81b0822772169cb697b5994f49398e619d61a12d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWIwODIyNzcyMTY5Y2I2OTdiNTk5NGY0OTM5OGU2MTlkNjFhMTJk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-26T22:04:41Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-03-16T06:43:53Z"
      },
      "message": "test: Use wait_until in tests where time was used for polling",
      "tree": {
        "sha": "5fa33497ba61f9ab4f14be747aed72225149966d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fa33497ba61f9ab4f14be747aed72225149966d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81b0822772169cb697b5994f49398e619d61a12d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlqrZ6kACgkQTYykuhgE\nCQbYAg//RLYG4PfItI6Xo6vucx2TFdm6Yb/6cnjn4y8bcGbX6rPhIdIT7fQYrMjl\nRwhM/jPNr7qXQa71BUtKGKJWpa4x7Jng0ue7MWW/jsweuCPSCfykA2kqyqO5zs9B\n38n6WSYfTANuUAQceSnh/WmYXrHeVY9qus/lYehA3RSTi7Y6+lz0fTN9ZsyVOGYb\nNTAEV5qRKK29HOGLPxCNZVUgRcsZHWRGqBhLSLoo8Q7nqFNUF9XuySgfEHo/BBKO\nfXHpsRdNiA0Eyf7vzF9YZQudEdv560MD96RkHwdqtJ2rW8OsXXPeWEg/IlRuJ873\nNYPmyxzUdcC3mCBmnhnpOd1vzfW9s1/p46zU8t4kg0x8+AcR49kTnt6w7GVWAQFw\nhc85L3l5ReqTJ3jEDBI1jGNYeeB/wfg7VT+BAl2nUTGLLz8lyzHUJJK60+dTR4Te\nXYPCWAS3EyiRPOBhM2MXDTwGXgNklTRZZxffAnWsbDxsAEbdI24VU5ZBA41fnb2c\nZvcCg+TMUk7BLT7Mdr5cKJDZ8G1JOcJbzs29xoLQlFzs0MAWZ3DYai/kAiBbfPvE\n7k2uH2yVqEtbclcUN8CU5utEVxdLTUzBoYbsj46CUDMKtBovzsRYgBUYWpEjG43B\nHatIC2nQZQ0PB7hiBkDGCoJ8llpMlP77nC2+IL2ZbxdDlspi/5k=\n=oEr4\n-----END PGP SIGNATURE-----",
        "payload": "tree 5fa33497ba61f9ab4f14be747aed72225149966d\nparent 7be9a9a570c1140048f8781ced1111e1d930e517\nauthor Ben Woosley <ben.woosley@gmail.com> 1519682681 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1521182633 -0700\n\ntest: Use wait_until in tests where time was used for polling\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81b0822772169cb697b5994f49398e619d61a12d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81b0822772169cb697b5994f49398e619d61a12d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81b0822772169cb697b5994f49398e619d61a12d/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7be9a9a570c1140048f8781ced1111e1d930e517",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7be9a9a570c1140048f8781ced1111e1d930e517",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7be9a9a570c1140048f8781ced1111e1d930e517"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 13,
      "deletions": 34
    },
    "files": [
      {
        "sha": "cb2dd1f6a8188b008967bc60ae9cd52bf3b11e15",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81b0822772169cb697b5994f49398e619d61a12d/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81b0822772169cb697b5994f49398e619d61a12d/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=81b0822772169cb697b5994f49398e619d61a12d",
        "patch": "@@ -11,7 +11,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import time\n import os\n \n MIN_BLOCKS_TO_KEEP = 288\n@@ -79,11 +78,8 @@ def test_height_min(self):\n         for i in range(25):\n             mine_large_block(self.nodes[0], self.utxo_cache_0)\n \n-        waitstart = time.time()\n-        while os.path.isfile(self.prunedir+\"blk00000.dat\"):\n-            time.sleep(0.1)\n-            if time.time() - waitstart > 30:\n-                raise AssertionError(\"blk00000.dat not pruned when it should be\")\n+        # Wait for blk00000.dat to be pruned\n+        wait_until(lambda: not os.path.isfile(self.prunedir+\"blk00000.dat\"), timeout=30)\n \n         self.log.info(\"Success\")\n         usage = calc_usage(self.prunedir)\n@@ -218,11 +214,8 @@ def reorg_back(self):\n             goalbestheight = first_reorg_height + 1\n \n         self.log.info(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n-        waitstart = time.time()\n-        while self.nodes[2].getblockcount() < goalbestheight:\n-            time.sleep(0.1)\n-            if time.time() - waitstart > 900:\n-                raise AssertionError(\"Node 2 didn't reorg to proper height\")\n+        # Wait for Node 2 to reorg to proper height\n+        wait_until(lambda: self.nodes[2].getblockcount() >= goalbestheight, timeout=900)\n         assert(self.nodes[2].getbestblockhash() == goalbesthash)\n         # Verify we can now have the data for a block previously pruned\n         assert(self.nodes[2].getblock(self.forkhash)[\"height\"] == self.forkheight)"
      },
      {
        "sha": "d1d3f1d7f15b66b975d9e348318ecdd703928aa7",
        "filename": "test/functional/feature_reindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81b0822772169cb697b5994f49398e619d61a12d/test/functional/feature_reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81b0822772169cb697b5994f49398e619d61a12d/test/functional/feature_reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_reindex.py?ref=81b0822772169cb697b5994f49398e619d61a12d",
        "patch": "@@ -10,8 +10,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n-import time\n+from test_framework.util import wait_until\n \n class ReindexTest(BitcoinTestFramework):\n \n@@ -25,9 +24,7 @@ def reindex(self, justchainstate=False):\n         self.stop_nodes()\n         extra_args = [[\"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n         self.start_nodes(extra_args)\n-        while self.nodes[0].getblockcount() < blockcount:\n-            time.sleep(0.1)\n-        assert_equal(self.nodes[0].getblockcount(), blockcount)\n+        wait_until(lambda: self.nodes[0].getblockcount() == blockcount)\n         self.log.info(\"Success\")\n \n     def run_test(self):"
      },
      {
        "sha": "d8348432aa89314a6971ad322ad512cce67dc8e4",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81b0822772169cb697b5994f49398e619d61a12d/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81b0822772169cb697b5994f49398e619d61a12d/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=81b0822772169cb697b5994f49398e619d61a12d",
        "patch": "@@ -7,8 +7,6 @@\n Tests correspond to code in rpc/net.cpp.\n \"\"\"\n \n-import time\n-\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -62,12 +60,8 @@ def _test_getnetworkinginfo(self):\n \n         self.nodes[0].setnetworkactive(False)\n         assert_equal(self.nodes[0].getnetworkinfo()['networkactive'], False)\n-        timeout = 3\n-        while self.nodes[0].getnetworkinfo()['connections'] != 0:\n-            # Wait a bit for all sockets to close\n-            assert timeout > 0, 'not all connections closed in time'\n-            timeout -= 0.1\n-            time.sleep(0.1)\n+        # Wait a bit for all sockets to close\n+        wait_until(lambda: self.nodes[0].getnetworkinfo()['connections'] == 0, timeout=3)\n \n         self.nodes[0].setnetworkactive(True)\n         connect_nodes_bi(self.nodes, 0, 1)"
      },
      {
        "sha": "68ac97d7557c3dda32559ab248ebeca2760f16a1",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81b0822772169cb697b5994f49398e619d61a12d/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81b0822772169cb697b5994f49398e619d61a12d/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=81b0822772169cb697b5994f49398e619d61a12d",
        "patch": "@@ -340,20 +340,15 @@ def disconnect_nodes(from_connection, node_num):\n     for peer_id in [peer['id'] for peer in from_connection.getpeerinfo() if \"testnode%d\" % node_num in peer['subver']]:\n         from_connection.disconnectnode(nodeid=peer_id)\n \n-    for _ in range(50):\n-        if [peer['id'] for peer in from_connection.getpeerinfo() if \"testnode%d\" % node_num in peer['subver']] == []:\n-            break\n-        time.sleep(0.1)\n-    else:\n-        raise AssertionError(\"timed out waiting for disconnect\")\n+    # wait to disconnect\n+    wait_until(lambda: [peer['id'] for peer in from_connection.getpeerinfo() if \"testnode%d\" % node_num in peer['subver']] == [], timeout=5)\n \n def connect_nodes(from_connection, node_num):\n     ip_port = \"127.0.0.1:\" + str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")\n     # poll until version handshake complete to avoid race conditions\n     # with transaction relaying\n-    while any(peer['version'] == 0 for peer in from_connection.getpeerinfo()):\n-        time.sleep(0.1)\n+    wait_until(lambda:  all(peer['version'] != 0 for peer in from_connection.getpeerinfo()))\n \n def connect_nodes_bi(nodes, a, b):\n     connect_nodes(nodes[a], b)"
      },
      {
        "sha": "dcd6c54d976367bc0d2a2a5c2464331dfe15609a",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81b0822772169cb697b5994f49398e619d61a12d/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81b0822772169cb697b5994f49398e619d61a12d/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=81b0822772169cb697b5994f49398e619d61a12d",
        "patch": "@@ -379,9 +379,9 @@ def run_test(self):\n             self.start_node(0, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             self.start_node(1, [m, \"-limitancestorcount=\"+str(chainlimit)])\n             self.start_node(2, [m, \"-limitancestorcount=\"+str(chainlimit)])\n-            while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n+            if m == '-reindex':\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish\n-                time.sleep(0.1)\n+                wait_until(lambda: [block_count] * 3 == [self.nodes[i].getblockcount() for i in range(3)])\n             assert_equal(balance_nodes, [self.nodes[i].getbalance() for i in range(3)])\n \n         # Exercise listsinceblock with the last two blocks"
      }
    ]
  },
  {
    "sha": "9d7f839a206b7392aebfa436ae0f9a29d33d2960",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDdmODM5YTIwNmI3MzkyYWViZmE0MzZhZTBmOWEyOWQzM2QyOTYw",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-02-27T22:55:01Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-03-16T06:44:02Z"
      },
      "message": "test: Use os.path.join consistently in feature_pruning tests",
      "tree": {
        "sha": "cbe51a1392a82ee15d58bd6b25142d7220ae645f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbe51a1392a82ee15d58bd6b25142d7220ae645f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d7f839a206b7392aebfa436ae0f9a29d33d2960",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+XLHXoy4Dim7e8hvTYykuhgECQYFAlqrZ7IACgkQTYykuhgE\nCQa+TBAAl9ZOJ4jNrlFyl+I3Yrsd75B0vmDaiYsSEk3mbvtz+sBlQ/Sai5pOYYpB\nRWlOjgAcbylfpRP91m8G5FIryDEvqw/uChJcdV0s4+ITLz0PqW6/H/ZmVqLfxtDB\nluX/OIBhtLw+za6RcRLYjtQgAqZvNIHPQKOXc1pWPfnXExqXIxDskFxkdsEn+UDu\n1Z56qNwn7Mqo3D1V4GpCaZmMAMwsgRqk5pThfSNLu4syMs4JbaBthFn7EDZTJxxa\nOu9R/0cRD3IFUwmvW5N+HiqCUCVZjkCz4O5qJnNq9KPdBuxl6YHg2XERHHm4VAyf\nT5197lMvxfbtPcZCkHdEMiLiuvJytm2iRmn3ppkB8Q46UDP6uYvFujrCyvqHiXha\nmKgYcJYgCAR3q4qDahw7ir1gBPGJad3cg1DbrV9/By396nQidH6HzFnoyV0e6g0z\nwueVkPWlgpk1w/Jzck6FYqQPq8akgsBQSjWYvnIUYz17SLfN4jWcepYkxesduixH\nqrHVvz0Jmh7KBcWUkfNh3SKvc76iYVj0wzSlhky5jqfXovNiq29UBBZWGlxivXA3\n6l6mDvar4q3jdwABgMEfYSMN8mm/wJaWm6yjWBi/m2VBQ6ADgGvESBPPPEFIbWNh\nfXipc8rjZNUMvO+OJUaOMwYL+5NmeITmWUTUmkGnGvtqxMew75I=\n=WXQR\n-----END PGP SIGNATURE-----",
        "payload": "tree cbe51a1392a82ee15d58bd6b25142d7220ae645f\nparent 81b0822772169cb697b5994f49398e619d61a12d\nauthor Ben Woosley <ben.woosley@gmail.com> 1519772101 -0800\ncommitter Ben Woosley <ben.woosley@gmail.com> 1521182642 -0700\n\ntest: Use os.path.join consistently in feature_pruning tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7f839a206b7392aebfa436ae0f9a29d33d2960",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7f839a206b7392aebfa436ae0f9a29d33d2960",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7f839a206b7392aebfa436ae0f9a29d33d2960/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "81b0822772169cb697b5994f49398e619d61a12d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81b0822772169cb697b5994f49398e619d61a12d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/81b0822772169cb697b5994f49398e619d61a12d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8dfa1be2faefada96c8fc6f2e306ac609d9cf09a",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7f839a206b7392aebfa436ae0f9a29d33d2960/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7f839a206b7392aebfa436ae0f9a29d33d2960/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=9d7f839a206b7392aebfa436ae0f9a29d33d2960",
        "patch": "@@ -22,7 +22,7 @@\n \n \n def calc_usage(blockdir):\n-    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n+    return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(os.path.join(blockdir, f))) / (1024. * 1024.)\n \n class PruneTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -69,7 +69,7 @@ def create_big_chain(self):\n         sync_blocks(self.nodes[0:5])\n \n     def test_height_min(self):\n-        if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n+        if not os.path.isfile(os.path.join(self.prunedir, \"blk00000.dat\")):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n         self.log.info(\"Success\")\n         self.log.info(\"Though we're already using more than 550MiB, current usage: %d\" % calc_usage(self.prunedir))\n@@ -79,7 +79,7 @@ def test_height_min(self):\n             mine_large_block(self.nodes[0], self.utxo_cache_0)\n \n         # Wait for blk00000.dat to be pruned\n-        wait_until(lambda: not os.path.isfile(self.prunedir+\"blk00000.dat\"), timeout=30)\n+        wait_until(lambda: not os.path.isfile(os.path.join(self.prunedir, \"blk00000.dat\")), timeout=30)\n \n         self.log.info(\"Success\")\n         usage = calc_usage(self.prunedir)\n@@ -255,7 +255,7 @@ def prune(index, expected_ret=None):\n                 assert_equal(ret, expected_ret)\n \n         def has_block(index):\n-            return os.path.isfile(self.options.tmpdir + \"/node{}/regtest/blocks/blk{:05}.dat\".format(node_number, index))\n+            return os.path.isfile(os.path.join(self.nodes[node_number].datadir, \"regtest\", \"blocks\", \"blk{:05}.dat\".format(index)))\n \n         # should not prune because chain tip of node 3 (995) < PruneAfterHeight (1000)\n         assert_raises_rpc_error(-1, \"Blockchain is too short for pruning\", node.pruneblockchain, height(500))"
      }
    ]
  }
]