[
  {
    "sha": "90c33cdc964734a0fad7c0daa95b531d42b5b92c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MGMzM2NkYzk2NDczNGEwZmFkN2MwZGFhOTViNTMxZDQyYjViOTJj",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-06T21:30:00Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-22T14:15:10Z"
      },
      "message": "generalize bumpfee to add inputs when needed",
      "tree": {
        "sha": "8764db2959b21640731c44383c4170dfc64d820b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8764db2959b21640731c44383c4170dfc64d820b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90c33cdc964734a0fad7c0daa95b531d42b5b92c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c33cdc964734a0fad7c0daa95b531d42b5b92c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90c33cdc964734a0fad7c0daa95b531d42b5b92c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c33cdc964734a0fad7c0daa95b531d42b5b92c/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "717fd58c4ba5c64778fa9a8bf6bbf5ae1164df3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/717fd58c4ba5c64778fa9a8bf6bbf5ae1164df3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/717fd58c4ba5c64778fa9a8bf6bbf5ae1164df3f"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 150,
      "deletions": 38
    },
    "files": [
      {
        "sha": "a4eff21c18a5af3e8506ec9c5cf15b8a83fd36d7",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "patch": "@@ -268,8 +268,13 @@ class WalletImpl : public Wallet\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n     {\n-        return feebumper::CreateTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n-               feebumper::Result::OK;\n+        if (total_fee > 0) {\n+            return feebumper::CreateTotalBumpTransaction(m_wallet.get(), txid, coin_control, total_fee, errors, old_fee, new_fee, mtx) ==\n+                feebumper::Result::OK;\n+        } else {\n+            return feebumper::CreateRateBumpTransaction(m_wallet.get(), txid, coin_control, errors, old_fee, new_fee, mtx) ==\n+                feebumper::Result::OK;\n+        }\n     }\n     bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,"
      },
      {
        "sha": "9257b272bc286f3e7e1adb5a77a3e25b2eb7d2fc",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "patch": "@@ -36,6 +36,8 @@ class CCoinControl\n     bool m_avoid_partial_spends;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n+    //! Minimum chain depth value for coin availability\n+    int m_min_depth{0};\n \n     CCoinControl()\n     {"
      },
      {
        "sha": "3600acb32a1325ec3e0cebccb328aa3b575967ce",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 29,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "patch": "@@ -73,7 +73,7 @@ bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid)\n     return res == feebumper::Result::OK;\n }\n \n-Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n+Result CreateTotalBumpTransaction(const CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, CAmount total_fee, std::vector<std::string>& errors,\n                          CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {\n     auto locked_chain = wallet->chain().lock();\n@@ -129,35 +129,20 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         walletIncrementalRelayFee = nodeIncrementalRelayFee;\n     }\n \n-    if (total_fee > 0) {\n-        CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n-        if (total_fee < minTotalFee) {\n-            errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n-                                                                FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n-            return Result::INVALID_PARAMETER;\n-        }\n-        CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n-        if (total_fee < requiredFee) {\n-            errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n-                                                                FormatMoney(requiredFee)));\n-            return Result::INVALID_PARAMETER;\n-        }\n-        new_fee = total_fee;\n-        nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n-    } else {\n-        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, nullptr /* FeeCalculation */);\n-        nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n-\n-        // New fee rate must be at least old rate + minimum incremental relay rate\n-        // walletIncrementalRelayFee.GetFeePerK() should be exact, because it's initialized\n-        // in that unit (fee per kb).\n-        // However, nOldFeeRate is a calculated value from the tx fee/size, so\n-        // add 1 satoshi to the result, because it may have been rounded down.\n-        if (nNewFeeRate.GetFeePerK() < nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK()) {\n-            nNewFeeRate = CFeeRate(nOldFeeRate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n-            new_fee = nNewFeeRate.GetFee(maxNewTxSize);\n-        }\n+    CAmount minTotalFee = nOldFeeRate.GetFee(maxNewTxSize) + nodeIncrementalRelayFee.GetFee(maxNewTxSize);\n+    if (total_fee < minTotalFee) {\n+        errors.push_back(strprintf(\"Insufficient totalFee, must be at least %s (oldFee %s + incrementalFee %s)\",\n+            FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(nodeIncrementalRelayFee.GetFee(maxNewTxSize))));\n+        return Result::INVALID_PARAMETER;\n+    }\n+    CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n+    if (total_fee < requiredFee) {\n+        errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n+            FormatMoney(requiredFee)));\n+        return Result::INVALID_PARAMETER;\n     }\n+    new_fee = total_fee;\n+    nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n      const CAmount max_tx_fee = wallet->chain().maxTxFee();\n@@ -210,6 +195,110 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         }\n     }\n \n+    return Result::OK;\n+}\n+\n+\n+Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<std::string>& errors,\n+                         CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n+{\n+    // We are going to modify coin control later, copy to re-use\n+    CCoinControl new_coin_control(coin_control);\n+\n+    auto locked_chain = wallet->chain().lock();\n+    LOCK(wallet->cs_wallet);\n+    errors.clear();\n+    auto it = wallet->mapWallet.find(txid);\n+    if (it == wallet->mapWallet.end()) {\n+        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        return Result::INVALID_ADDRESS_OR_KEY;\n+    }\n+    const CWalletTx& wtx = it->second;\n+\n+    Result result = PreconditionChecks(*locked_chain, wallet, wtx, errors);\n+    if (result != Result::OK) {\n+        return result;\n+    }\n+\n+    // Fill in recipients(and preserve a change key)\n+    std::vector<CRecipient> recipients;\n+    for (const auto& output : wtx.tx->vout) {\n+        if (!wallet->IsChange(output)) {\n+            CRecipient recipient = {output.scriptPubKey, output.nValue, false};\n+            recipients.push_back(recipient);\n+        } else {\n+            CTxDestination change_dest;\n+            ExtractDestination(output.scriptPubKey, change_dest);\n+            new_coin_control.destChange = change_dest;\n+        }\n+    }\n+\n+    // Old transaction stuff\n+    // return old fee first\n+    old_fee = wtx.GetDebit(ISMINE_SPENDABLE) - wtx.tx->GetValueOut();\n+    int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n+    // Feerate of thing we are bumping\n+    CFeeRate old_feerate(old_fee, txSize);\n+    CFeeRate nodeIncrementalRelayFee = wallet->chain().relayIncrementalFee();\n+\n+    // The wallet uses a conservative WALLET_INCREMENTAL_RELAY_FEE value to\n+    // future proof against changes to network wide policy for incremental relay\n+    // fee that our node may not be aware of.\n+    CFeeRate walletIncrementalRelayFee = CFeeRate(WALLET_INCREMENTAL_RELAY_FEE);\n+    if (nodeIncrementalRelayFee > walletIncrementalRelayFee) {\n+        walletIncrementalRelayFee = nodeIncrementalRelayFee;\n+    }\n+\n+    // Compute required fee rate / total fee to hit\n+    // We must be >= to this rate, and since tx will be as large or larger we should pass bip125 total fee check\n+    CFeeRate min_new_feerate(old_feerate.GetFeePerK() + 1 + walletIncrementalRelayFee.GetFeePerK());\n+\n+    // Feerate calculated by GetMinimumFeeRate may not actually hit bip125 requirements\n+    // so pick the larger of the two\n+    FeeCalculation fee_calc;\n+    CFeeRate block_feerate(GetMinimumFeeRate(*wallet, new_coin_control, &fee_calc));\n+    if (block_feerate.GetFeePerK() > min_new_feerate.GetFeePerK()) {\n+        min_new_feerate = block_feerate;\n+    }\n+    // Finally, set required feerate.\n+    new_coin_control.m_feerate = min_new_feerate;\n+\n+    // Fill in required inputs we are double-spending(all of them)\n+    // N.B.: bip125 doesn't require all the inputs in the replaced transaction to be\n+    // used in the replacement transaction, but it's very important for wallets to make\n+    // sure that happens. If not, it would be possible to bump a transaction A twice to\n+    // A2 and A3 where A2 and A3 don't conflict (or alternatively bump A to A2 and A2\n+    // to A3 where A and A3 don't conflict). If both later get confirmed then the sender\n+    // has accidentally double paid.\n+    for (const auto& inputs : wtx.tx->vin) {\n+        new_coin_control.Select(COutPoint(inputs.prevout));\n+    }\n+    new_coin_control.fAllowOtherInputs = true;\n+\n+    // We cannot source new unconfirmed inputs(bip125 rule 2)\n+    new_coin_control.m_min_depth = 1;\n+\n+    CTransactionRef tx_new = MakeTransactionRef();\n+    CReserveKey reservekey(wallet);\n+    CAmount fee_ret;\n+    int change_pos_in_out = -1; // No requested location for change\n+    std::string fail_reason;\n+    if (!wallet->CreateTransaction(*locked_chain, recipients, tx_new, reservekey, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n+        errors.push_back(\"Unable to create transaction: \" + fail_reason);\n+        return Result::WALLET_ERROR;\n+    }\n+\n+    // Write back new fee if successful\n+    new_fee = fee_ret;\n+\n+    // Write back transaction\n+    mtx = CMutableTransaction(*tx_new);\n+    // Mark new tx not replaceable, if requested.\n+    if (!coin_control.m_signal_bip125_rbf.get_value_or(wallet->m_signal_rbf)) {\n+        for (auto& input : mtx.vin) {\n+            if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n+        }\n+    }\n \n     return Result::OK;\n }"
      },
      {
        "sha": "f9cbfc5f686b8d2ee32a5c89bb71e528af2616e4",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "patch": "@@ -28,8 +28,8 @@ enum class Result\n //! Return whether transaction can be bumped.\n bool TransactionCanBeBumped(const CWallet* wallet, const uint256& txid);\n \n-//! Create bumpfee transaction.\n-Result CreateTransaction(const CWallet* wallet,\n+//! Create bumpfee transaction based on total amount.\n+Result CreateTotalBumpTransaction(const CWallet* wallet,\n                          const uint256& txid,\n                          const CCoinControl& coin_control,\n                          CAmount total_fee,\n@@ -38,6 +38,15 @@ Result CreateTransaction(const CWallet* wallet,\n                          CAmount& new_fee,\n                          CMutableTransaction& mtx);\n \n+//! Create bumpfee transaction based on feerate estimates.\n+Result CreateRateBumpTransaction(CWallet* wallet,\n+                         const uint256& txid,\n+                         const CCoinControl& coin_control,\n+                         std::vector<std::string>& errors,\n+                         CAmount& old_fee,\n+                         CAmount& new_fee,\n+                         CMutableTransaction& mtx);\n+\n //! Sign the new transaction,\n //! @return false if the tx couldn't be found or if it was\n //! impossible to create the signature(s)"
      },
      {
        "sha": "42cb0063eeb21ce3c717b6591bbd401720767ad8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "patch": "@@ -3214,9 +3214,9 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n             RPCHelpMan{\"bumpfee\",\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n-                \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n-                \"If the change output is not big enough to cover the increased fee, the command will currently fail\\n\"\n-                \"instead of adding new inputs to compensate. (A future implementation could improve this.)\\n\"\n+                \"The command will pay the additional fee by reducing change outputs or adding inputs when necessary. It may add a new change output if one does not already exist.\\n\"\n+                \"If `totalFee` is given, adding inputs is not supported, so there must be a single change output that is big enough or it will fail.\\n\"\n+                \"All inputs in the original transaction will be included in the replacement transaction.\\n\"\n                 \"The command will fail if the wallet or mempool contains a transaction that spends one of T's outputs.\\n\"\n                 \"By default, the new fee will be calculated automatically using estimatesmartfee.\\n\"\n                 \"The user can specify a confirmation target for estimatesmartfee.\\n\"\n@@ -3313,7 +3313,14 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n-    feebumper::Result res = feebumper::CreateTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+    feebumper::Result res;\n+    if (totalFee > 0) {\n+        // Targeting total fee bump. Requires a change output of sufficient size.\n+        res = feebumper::CreateTotalBumpTransaction(pwallet, hash, coin_control, totalFee, errors, old_fee, new_fee, mtx);\n+    } else {\n+        // Targeting feerate bump.\n+        res = feebumper::CreateRateBumpTransaction(pwallet, hash, coin_control, errors, old_fee, new_fee, mtx);\n+    }\n     if (res != feebumper::Result::OK) {\n         switch(res) {\n             case feebumper::Result::INVALID_ADDRESS_OR_KEY:"
      },
      {
        "sha": "f8db95563785e98a35733266f544ede01263c9e7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90c33cdc964734a0fad7c0daa95b531d42b5b92c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "patch": "@@ -2815,7 +2815,7 @@ bool CWallet::CreateTransaction(interfaces::Chain::Lock& locked_chain, const std\n         LOCK(cs_wallet);\n         {\n             std::vector<COutput> vAvailableCoins;\n-            AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control);\n+            AvailableCoins(*locked_chain, vAvailableCoins, true, &coin_control, 1, MAX_MONEY, MAX_MONEY, 0, coin_control.m_min_depth);\n             CoinSelectionParams coin_selection_params; // Parameters for coin selection, init with dummy\n \n             // Create change script that will be used if we need change"
      }
    ]
  },
  {
    "sha": "be2d4356d358cb7ec09f7fadbcae581333cb8566",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTJkNDM1NmQzNThjYjdlYzA5ZjdmYWRiY2FlNTgxMzMzY2I4NTY2",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-08T16:30:53Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-22T14:15:10Z"
      },
      "message": "add functional tests for feerate bumpfee with adding inputs",
      "tree": {
        "sha": "554bc0d493c41291160706b7b96dd3ee6143fb90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/554bc0d493c41291160706b7b96dd3ee6143fb90"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be2d4356d358cb7ec09f7fadbcae581333cb8566",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be2d4356d358cb7ec09f7fadbcae581333cb8566",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be2d4356d358cb7ec09f7fadbcae581333cb8566",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be2d4356d358cb7ec09f7fadbcae581333cb8566/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c33cdc964734a0fad7c0daa95b531d42b5b92c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c33cdc964734a0fad7c0daa95b531d42b5b92c"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 59,
      "deletions": 6
    },
    "files": [
      {
        "sha": "27be289b33fbcbaf6c2a17216b8ae04b8f5a067c",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 59,
        "deletions": 6,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be2d4356d358cb7ec09f7fadbcae581333cb8566/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be2d4356d358cb7ec09f7fadbcae581333cb8566/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=be2d4356d358cb7ec09f7fadbcae581333cb8566",
        "patch": "@@ -17,7 +17,7 @@\n import io\n \n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n-from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n+from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction, FromHex\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes, sync_mempools\n \n@@ -73,6 +73,9 @@ def run_test(self):\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n         test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n+        # These tests wipe out a number of utxos that are expected in other tests\n+        test_small_output_with_feerate_succeeds(rbf_node, dest_address)\n+        test_no_more_inputs_fails(rbf_node, dest_address)\n         self.log.info(\"Success\")\n \n \n@@ -173,6 +176,55 @@ def test_small_output_fails(rbf_node, dest_address):\n     rbfid = spend_one_input(rbf_node, dest_address)\n     assert_raises_rpc_error(-4, \"Change output is too small\", rbf_node.bumpfee, rbfid, {\"totalFee\": 50001})\n \n+def test_no_more_inputs_fails(rbf_node, dest_address):\n+    # feerate rbf requires confirmed outputs when change output doesn't exist or is insufficient\n+    rbf_node.generatetoaddress(1, dest_address)\n+    # spend all funds, no change output\n+    rbfid = rbf_node.sendtoaddress(rbf_node.getnewaddress(), rbf_node.getbalance(), \"\", \"\", True)\n+    assert_raises_rpc_error(-4, \"Unable to create transaction: Insufficient funds\", rbf_node.bumpfee, rbfid)\n+\n+def test_small_output_with_feerate_succeeds(rbf_node, dest_address):\n+    def input_set(tx):\n+        tx_struct = FromHex(CTransaction(), tx)\n+        input_set = set()\n+        for tx_in in tx_struct.vin:\n+            input_set.add(tx_in.prevout)\n+        return input_set\n+\n+    # Make sure additional inputs exist\n+    rbf_node.generatetoaddress(101, rbf_node.getnewaddress())\n+    rbfid = spend_one_input(rbf_node, dest_address)\n+    original_input_set = input_set(rbf_node.getrawtransaction(rbfid))\n+    assert_equal(len(original_input_set), 1)\n+    original_item = list(original_input_set)[0]\n+    # Keep bumping until we out-spend change output\n+    orig_fee = 0\n+    while orig_fee < Decimal(\"0.0005\"):\n+        new_input_set = input_set(rbf_node.getrawtransaction(rbfid))\n+        new_item = list(new_input_set)[0]\n+        assert_equal(len(original_input_set), 1)\n+        assert_equal(original_item.hash, new_item.hash)\n+        assert_equal(original_item.n, new_item.n)\n+        rbfid_new_det = rbf_node.bumpfee(rbfid)\n+        rbfid_new = rbfid_new_det[\"txid\"]\n+        raw_pool = rbf_node.getrawmempool()\n+        assert(rbfid not in raw_pool)\n+        assert(rbfid_new in raw_pool)\n+        rbfid = rbfid_new\n+        orig_fee = rbfid_new_det[\"origfee\"]\n+\n+    # input(s) have been added\n+    final_input_set = input_set(rbf_node.getrawtransaction(rbfid))\n+    assert_greater_than(len(final_input_set), 1)\n+    # Original input is in final set\n+    found_original = False\n+    for item in final_input_set:\n+        if item.hash == original_item.hash and item.n == original_item.n:\n+            found_original = True\n+    assert(found_original)\n+\n+    rbf_node.generatetoaddress(1, rbf_node.getnewaddress())\n+    assert_equal(rbf_node.gettransaction(rbfid)[\"confirmations\"], 1)\n \n def test_dust_to_fee(rbf_node, dest_address):\n     # check that if output is reduced to dust, it will be converted to fee\n@@ -272,19 +324,20 @@ def test_locked_wallet_fails(rbf_node, dest_address):\n     rbf_node.walletlock()\n     assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first.\",\n                             rbf_node.bumpfee, rbfid)\n+    rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n \n-def spend_one_input(node, dest_address):\n+def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n     tx_input = dict(\n         sequence=BIP125_SEQUENCE_NUMBER, **next(u for u in node.listunspent() if u[\"amount\"] == Decimal(\"0.00100000\")))\n-    rawtx = node.createrawtransaction(\n-        [tx_input], {dest_address: Decimal(\"0.00050000\"),\n-                     node.getrawchangeaddress(): Decimal(\"0.00049000\")})\n+    destinations = {dest_address: Decimal(\"0.00050000\")}\n+    if change_size > 0:\n+        destinations[node.getrawchangeaddress()] = change_size\n+    rawtx = node.createrawtransaction([tx_input], destinations)\n     signedtx = node.signrawtransactionwithwallet(rawtx)\n     txid = node.sendrawtransaction(signedtx[\"hex\"])\n     return txid\n \n-\n def submit_block_with_tx(node, tx):\n     ctx = CTransaction()\n     ctx.deserialize(io.BytesIO(hex_str_to_bytes(tx)))"
      }
    ]
  },
  {
    "sha": "8e9027bd9864c8a2c0be314bd1f799b9ed8c4085",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTkwMjdiZDk4NjRjOGEyYzBiZTMxNGJkMWY3OTliOWVkOGM0MDg1",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-08T21:43:40Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2019-03-22T14:15:11Z"
      },
      "message": "wallet_bumpfee.py: add test for change key preservation",
      "tree": {
        "sha": "334d71cc361808918014b6a73f335cb04571acc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/334d71cc361808918014b6a73f335cb04571acc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be2d4356d358cb7ec09f7fadbcae581333cb8566",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be2d4356d358cb7ec09f7fadbcae581333cb8566",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be2d4356d358cb7ec09f7fadbcae581333cb8566"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 24,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6f2e3065a0783a43946ff3390f61a3f62cec0c6c",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=8e9027bd9864c8a2c0be314bd1f799b9ed8c4085",
        "patch": "@@ -73,6 +73,7 @@ def run_test(self):\n         test_unconfirmed_not_spendable(rbf_node, rbf_node_address)\n         test_bumpfee_metadata(rbf_node, dest_address)\n         test_locked_wallet_fails(rbf_node, dest_address)\n+        test_change_script_match(rbf_node, dest_address)\n         # These tests wipe out a number of utxos that are expected in other tests\n         test_small_output_with_feerate_succeeds(rbf_node, dest_address)\n         test_no_more_inputs_fails(rbf_node, dest_address)\n@@ -326,6 +327,29 @@ def test_locked_wallet_fails(rbf_node, dest_address):\n                             rbf_node.bumpfee, rbfid)\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n+def test_change_script_match(rbf_node, dest_address):\n+    rbfid = spend_one_input(rbf_node, dest_address)\n+    unbumped_details = rbf_node.getrawtransaction(rbfid, 1)\n+    bumped_total_tx = rbf_node.bumpfee(rbfid, {\"totalFee\": 2000})\n+    total_bumped_details = rbf_node.getrawtransaction(bumped_total_tx[\"txid\"], 1)\n+    bumped_rate_tx = rbf_node.bumpfee(bumped_total_tx[\"txid\"])\n+    rate_bumped_details = rbf_node.getrawtransaction(bumped_rate_tx[\"txid\"], 1)\n+\n+    # find single change from original\n+    change_address = None\n+    for out in unbumped_details[\"vout\"]:\n+        address = out[\"scriptPubKey\"][\"addresses\"][0]\n+        if rbf_node.getaddressinfo(address)[\"ischange\"]:\n+            assert_equal(change_address, None)\n+            change_address = address\n+    assert(address is not None)\n+\n+    # Now find that address in each subsequent tx, and no other change\n+    for bumped_tx in [rate_bumped_details, total_bumped_details]:\n+        for out in bumped_tx[\"vout\"]:\n+            new_address = out[\"scriptPubKey\"][\"addresses\"][0]\n+            if rbf_node.getaddressinfo(new_address)[\"ischange\"]:\n+                assert_equal(new_address, change_address)\n \n def spend_one_input(node, dest_address, change_size=Decimal(\"0.00049000\")):\n     tx_input = dict("
      }
    ]
  },
  {
    "sha": "49dfa31d462e659a56ae2d7bf2223ef8c403cde3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWRmYTMxZDQ2MmU2NTlhNTZhZTJkN2JmMjIyM2VmOGM0MDNjZGUz",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-23T19:35:54Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2019-03-23T19:36:10Z"
      },
      "message": "wallet: Keep all outputs in bumpfee",
      "tree": {
        "sha": "53a004a0df9cbfaa0ea99581d50be80863577a55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/53a004a0df9cbfaa0ea99581d50be80863577a55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49dfa31d462e659a56ae2d7bf2223ef8c403cde3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49dfa31d462e659a56ae2d7bf2223ef8c403cde3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49dfa31d462e659a56ae2d7bf2223ef8c403cde3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49dfa31d462e659a56ae2d7bf2223ef8c403cde3/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8e9027bd9864c8a2c0be314bd1f799b9ed8c4085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8e9027bd9864c8a2c0be314bd1f799b9ed8c4085"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e94d92f3dbec6693f7e5680927fd67c3323998e8",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49dfa31d462e659a56ae2d7bf2223ef8c403cde3/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49dfa31d462e659a56ae2d7bf2223ef8c403cde3/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=49dfa31d462e659a56ae2d7bf2223ef8c403cde3",
        "patch": "@@ -222,14 +222,16 @@ Result CreateRateBumpTransaction(CWallet* wallet, const uint256& txid, const CCo\n \n     // Fill in recipients(and preserve a change key)\n     std::vector<CRecipient> recipients;\n+    bool change_set = false;\n     for (const auto& output : wtx.tx->vout) {\n-        if (!wallet->IsChange(output)) {\n+        if (change_set || !wallet->IsChange(output)) {\n             CRecipient recipient = {output.scriptPubKey, output.nValue, false};\n             recipients.push_back(recipient);\n         } else {\n             CTxDestination change_dest;\n             ExtractDestination(output.scriptPubKey, change_dest);\n             new_coin_control.destChange = change_dest;\n+            change_set = true;\n         }\n     }\n "
      },
      {
        "sha": "954a1615c5f7899f2988ca61e659d511a144b5b1",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49dfa31d462e659a56ae2d7bf2223ef8c403cde3/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49dfa31d462e659a56ae2d7bf2223ef8c403cde3/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=49dfa31d462e659a56ae2d7bf2223ef8c403cde3",
        "patch": "@@ -77,6 +77,18 @@ def run_test(self):\n         # These tests wipe out a number of utxos that are expected in other tests\n         test_small_output_with_feerate_succeeds(rbf_node, dest_address)\n         test_no_more_inputs_fails(rbf_node, dest_address)\n+\n+        rbf_node.generatetoaddress(1, dest_address)\n+        txid = rbf_node.sendmany('', {\n+            rbf_node.getrawchangeaddress(): '0.1',\n+            dest_address: '0.1',\n+        })\n+        tx = rbf_node.getrawtransaction(txid, True)\n+        assert_equal(len(tx['vout']), 3)\n+        txid = rbf_node.bumpfee(txid)['txid']\n+        tx = rbf_node.getrawtransaction(txid, True)\n+        assert_equal(len(tx['vout']), 3)\n+\n         self.log.info(\"Success\")\n \n "
      }
    ]
  }
]