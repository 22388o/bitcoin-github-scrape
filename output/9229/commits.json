[
  {
    "sha": "10ae7a7b2316f8052ec58ef237ce6dd987300900",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGFlN2E3YjIzMTZmODA1MmVjNThlZjIzN2NlNmRkOTg3MzAwOTAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-01T22:31:38Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-12-01T22:32:44Z"
      },
      "message": "Revert \"Use async name resolving to improve net thread responsiveness\"\n\nThis reverts commit caf6150e9785da408f1e603ae70eae25b5202d98.\n\ngetaddrinfo_a has a nasty tendency to segfault internally in its\nbackground thread, on every version of glibc I tested, especially\nunder helgrind.\n\nSee https://sourceware.org/bugzilla/show_bug.cgi?id=20874",
      "tree": {
        "sha": "b45b7d5309e7e38c6c70f7057e68ca4efd6acd66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b45b7d5309e7e38c6c70f7057e68ca4efd6acd66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10ae7a7b2316f8052ec58ef237ce6dd987300900",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10ae7a7b2316f8052ec58ef237ce6dd987300900",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10ae7a7b2316f8052ec58ef237ce6dd987300900",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10ae7a7b2316f8052ec58ef237ce6dd987300900/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad826b3df9f763b49f1e3e3d50c4efdd438c7547",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad826b3df9f763b49f1e3e3d50c4efdd438c7547",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad826b3df9f763b49f1e3e3d50c4efdd438c7547"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 1,
      "deletions": 49
    },
    "files": [
      {
        "sha": "29e674d48e27fcbe2b4dd479323e461fdbd52f1f",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10ae7a7b2316f8052ec58ef237ce6dd987300900/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10ae7a7b2316f8052ec58ef237ce6dd987300900/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=10ae7a7b2316f8052ec58ef237ce6dd987300900",
        "patch": "@@ -512,8 +512,6 @@ if test x$TARGET_OS = xdarwin; then\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n-AC_SEARCH_LIBS([getaddrinfo_a], [anl], [AC_DEFINE(HAVE_GETADDRINFO_A, 1, [Define this symbol if you have getaddrinfo_a])])\n-AC_SEARCH_LIBS([inet_pton], [nsl resolv], [AC_DEFINE(HAVE_INET_PTON, 1, [Define this symbol if you have inet_pton])])\n \n AC_CHECK_DECLS([strnlen])\n "
      },
      {
        "sha": "9118584b80c4461462d71b184688607fa1cccec4",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 47,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10ae7a7b2316f8052ec58ef237ce6dd987300900/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10ae7a7b2316f8052ec58ef237ce6dd987300900/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=10ae7a7b2316f8052ec58ef237ce6dd987300900",
        "patch": "@@ -94,30 +94,9 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n         }\n     }\n \n-#ifdef HAVE_GETADDRINFO_A\n-    struct in_addr ipv4_addr;\n-#ifdef HAVE_INET_PTON\n-    if (inet_pton(AF_INET, pszName, &ipv4_addr) > 0) {\n-        vIP.push_back(CNetAddr(ipv4_addr));\n-        return true;\n-    }\n-\n-    struct in6_addr ipv6_addr;\n-    if (inet_pton(AF_INET6, pszName, &ipv6_addr) > 0) {\n-        vIP.push_back(CNetAddr(ipv6_addr));\n-        return true;\n-    }\n-#else\n-    ipv4_addr.s_addr = inet_addr(pszName);\n-    if (ipv4_addr.s_addr != INADDR_NONE) {\n-        vIP.push_back(CNetAddr(ipv4_addr));\n-        return true;\n-    }\n-#endif\n-#endif\n-\n     struct addrinfo aiHint;\n     memset(&aiHint, 0, sizeof(struct addrinfo));\n+\n     aiHint.ai_socktype = SOCK_STREAM;\n     aiHint.ai_protocol = IPPROTO_TCP;\n     aiHint.ai_family = AF_UNSPEC;\n@@ -126,33 +105,8 @@ bool static LookupIntern(const char *pszName, std::vector<CNetAddr>& vIP, unsign\n #else\n     aiHint.ai_flags = fAllowLookup ? AI_ADDRCONFIG : AI_NUMERICHOST;\n #endif\n-\n     struct addrinfo *aiRes = NULL;\n-#ifdef HAVE_GETADDRINFO_A\n-    struct gaicb gcb, *query = &gcb;\n-    memset(query, 0, sizeof(struct gaicb));\n-    gcb.ar_name = pszName;\n-    gcb.ar_request = &aiHint;\n-    int nErr = getaddrinfo_a(GAI_NOWAIT, &query, 1, NULL);\n-    if (nErr)\n-        return false;\n-\n-    do {\n-        // Should set the timeout limit to a reasonable value to avoid\n-        // generating unnecessary checking call during the polling loop,\n-        // while it can still response to stop request quick enough.\n-        // 2 seconds looks fine in our situation.\n-        struct timespec ts = { 2, 0 };\n-        gai_suspend(&query, 1, &ts);\n-        boost::this_thread::interruption_point();\n-\n-        nErr = gai_error(query);\n-        if (0 == nErr)\n-            aiRes = query->ar_result;\n-    } while (nErr == EAI_INPROGRESS);\n-#else\n     int nErr = getaddrinfo(pszName, NULL, &aiHint, &aiRes);\n-#endif\n     if (nErr)\n         return false;\n "
      }
    ]
  }
]