[
  {
    "sha": "eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2E1NTBmMjUwMWYzZjJiYmU2ODJiZGMzY2I4YjkwYzkwYzkwMjc1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-09-09T05:32:12Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:17Z"
      },
      "message": "RPC/Wallet: Pass CWallet as pointer to helper functions",
      "tree": {
        "sha": "8c6f62693149cdb3a901f3ee86873ac9e9851e25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c6f62693149cdb3a901f3ee86873ac9e9851e25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94e5ba9ba2901c8205c1814ece8e2fafbff63a03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/94e5ba9ba2901c8205c1814ece8e2fafbff63a03"
      }
    ],
    "stats": {
      "total": 357,
      "additions": 184,
      "deletions": 173
    },
    "files": [
      {
        "sha": "f8e9acb08c40e5f41b32fe8a6398954519a846b5",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
        "patch": "@@ -112,13 +112,17 @@ UniValue getinfo(const JSONRPCRequest& request)\n class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n {\n public:\n+    CWallet * const pwallet;\n+\n+    DescribeAddressVisitor(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n     UniValue operator()(const CNoDestination &dest) const { return UniValue(UniValue::VOBJ); }\n \n     UniValue operator()(const CKeyID &keyID) const {\n         UniValue obj(UniValue::VOBJ);\n         CPubKey vchPubKey;\n         obj.push_back(Pair(\"isscript\", false));\n-        if (pwalletMain && pwalletMain->GetPubKey(keyID, vchPubKey)) {\n+        if (pwallet && pwallet->GetPubKey(keyID, vchPubKey)) {\n             obj.push_back(Pair(\"pubkey\", HexStr(vchPubKey)));\n             obj.push_back(Pair(\"iscompressed\", vchPubKey.IsCompressed()));\n         }\n@@ -129,7 +133,7 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n         UniValue obj(UniValue::VOBJ);\n         CScript subscript;\n         obj.push_back(Pair(\"isscript\", true));\n-        if (pwalletMain && pwalletMain->GetCScript(scriptID, subscript)) {\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             std::vector<CTxDestination> addresses;\n             txnouttype whichType;\n             int nRequired;\n@@ -200,7 +204,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : ISMINE_NO;\n         ret.push_back(Pair(\"ismine\", (mine & ISMINE_SPENDABLE) ? true : false));\n         ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(), dest);\n+        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwalletMain), dest);\n         ret.pushKVs(detail);\n         if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n             ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n@@ -227,7 +231,7 @@ UniValue validateaddress(const JSONRPCRequest& request)\n /**\n  * Used by addmultisigaddress / createmultisig:\n  */\n-CScript _createmultisig_redeemScript(const UniValue& params)\n+CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& params)\n {\n     int nRequired = params[0].get_int();\n     const UniValue& keys = params[1].get_array();\n@@ -249,14 +253,14 @@ CScript _createmultisig_redeemScript(const UniValue& params)\n #ifdef ENABLE_WALLET\n         // Case 1: Bitcoin address and we have full public key:\n         CBitcoinAddress address(ks);\n-        if (pwalletMain && address.IsValid())\n+        if (pwallet && address.IsValid())\n         {\n             CKeyID keyID;\n             if (!address.GetKeyID(keyID))\n                 throw runtime_error(\n                     strprintf(\"%s does not refer to a key\",ks));\n             CPubKey vchPubKey;\n-            if (!pwalletMain->GetPubKey(keyID, vchPubKey))\n+            if (!pwallet->GetPubKey(keyID, vchPubKey))\n                 throw runtime_error(\n                     strprintf(\"no full public key for address %s\",ks));\n             if (!vchPubKey.IsFullyValid())\n@@ -320,7 +324,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(request.params);\n+    CScript inner = _createmultisig_redeemScript(pwalletMain, request.params);\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n "
      },
      {
        "sha": "faafe9829b0d1afde69076c8fd2baf97bf71d03c",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
        "patch": "@@ -603,7 +603,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n             \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n #ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase() + \"\\n\"\n+            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n #endif\n \n             \"\\nArguments:\\n\"\n@@ -718,7 +718,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     }\n #ifdef ENABLE_WALLET\n     else if (pwalletMain)\n-        EnsureWalletIsUnlocked();\n+        EnsureWalletIsUnlocked(pwalletMain);\n #endif\n \n     // Add previous txouts given in the RPC call:"
      },
      {
        "sha": "b32eaaa1338f783a15c56a8a62ab779c2b4fd397",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
        "patch": "@@ -194,11 +194,18 @@ extern int64_t nWalletUnlockTime;\n extern CAmount AmountFromValue(const UniValue& value);\n extern UniValue ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n-extern std::string HelpRequiringPassphrase();\n extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n-extern void EnsureWalletIsUnlocked();\n+// Needed even with !ENABLE_WALLET, to pass (ignored) pointers around\n+class CWallet;\n+\n+#ifdef ENABLE_WALLET\n+// New code should accessing the wallet should be under the ../wallet/ directory\n+std::string HelpRequiringPassphrase(CWallet *);\n+void EnsureWalletIsUnlocked(CWallet *);\n+bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n+#endif\n \n bool StartRPC();\n void InterruptRPC();"
      },
      {
        "sha": "9f71d74e32cc5f128e8a0a0049a38f9619e5a1ec",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 61,
        "deletions": 64,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
        "patch": "@@ -29,9 +29,6 @@\n \n using namespace std;\n \n-void EnsureWalletIsUnlocked();\n-bool EnsureWalletIsAvailable(bool avoidException);\n-\n std::string static EncodeDumpTime(int64_t nTime) {\n     return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n }\n@@ -77,7 +74,7 @@ std::string DecodeDumpString(const std::string &str) {\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n@@ -103,7 +100,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     string strSecret = request.params[0].get_str();\n     string strLabel = \"\";\n@@ -153,41 +150,41 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-void ImportAddress(const CBitcoinAddress& address, const string& strLabel);\n-void ImportScript(const CScript& script, const string& strLabel, bool isRedeemScript)\n+void ImportAddress(CWallet*, const CBitcoinAddress& address, const string& strLabel);\n+void ImportScript(CWallet * const pwallet, const CScript& script, const string& strLabel, bool isRedeemScript)\n {\n-    if (!isRedeemScript && ::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE)\n+    if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n \n-    pwalletMain->MarkDirty();\n+    pwallet->MarkDirty();\n \n-    if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, 0 /* nCreateTime */))\n+    if (!pwallet->HaveWatchOnly(script) && !pwallet->AddWatchOnly(script, 0 /* nCreateTime */))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n \n     if (isRedeemScript) {\n-        if (!pwalletMain->HaveCScript(script) && !pwalletMain->AddCScript(script))\n+        if (!pwallet->HaveCScript(script) && !pwallet->AddCScript(script))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n-        ImportAddress(CBitcoinAddress(CScriptID(script)), strLabel);\n+        ImportAddress(pwallet, CBitcoinAddress(CScriptID(script)), strLabel);\n     } else {\n         CTxDestination destination;\n         if (ExtractDestination(script, destination)) {\n-            pwalletMain->SetAddressBook(destination, strLabel, \"receive\");\n+            pwallet->SetAddressBook(destination, strLabel, \"receive\");\n         }\n     }\n }\n \n-void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n+void ImportAddress(CWallet * const pwallet, const CBitcoinAddress& address, const string& strLabel)\n {\n     CScript script = GetScriptForDestination(address.Get());\n-    ImportScript(script, strLabel, false);\n+    ImportScript(pwallet, script, strLabel, false);\n     // add to address book or update label\n     if (address.IsValid())\n-        pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n+        pwallet->SetAddressBook(address.Get(), strLabel, \"receive\");\n }\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n@@ -236,10 +233,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (address.IsValid()) {\n         if (fP2SH)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n-        ImportAddress(address, strLabel);\n+        ImportAddress(pwalletMain, address, strLabel);\n     } else if (IsHex(request.params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n-        ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n+        ImportScript(pwalletMain, CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }\n@@ -255,7 +252,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 2)\n@@ -314,7 +311,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -350,7 +347,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n@@ -393,8 +390,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    ImportAddress(CBitcoinAddress(pubKey.GetID()), strLabel);\n-    ImportScript(GetScriptForRawPubKey(pubKey), strLabel, false);\n+    ImportAddress(pwalletMain, CBitcoinAddress(pubKey.GetID()), strLabel);\n+    ImportScript(pwalletMain, GetScriptForRawPubKey(pubKey), strLabel, false);\n \n     if (fRescan)\n     {\n@@ -408,7 +405,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() != 1)\n@@ -431,7 +428,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     ifstream file;\n     file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n@@ -514,7 +511,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() != 1)\n@@ -534,7 +531,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     string strAddress = request.params[0].get_str();\n     CBitcoinAddress address;\n@@ -552,7 +549,7 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() != 1)\n@@ -568,7 +565,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     ofstream file;\n     file.open(request.params[0].get_str().c_str());\n@@ -641,7 +638,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n+UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n {\n     try {\n         bool success = false;\n@@ -723,32 +720,32 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid P2SH address / script\");\n             }\n \n-            pwalletMain->MarkDirty();\n+            pwallet->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript, timestamp)) {\n+            if (!pwallet->HaveWatchOnly(redeemScript) && !pwallet->AddWatchOnly(redeemScript, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n-            if (!pwalletMain->HaveCScript(redeemScript) && !pwalletMain->AddCScript(redeemScript)) {\n+            if (!pwallet->HaveCScript(redeemScript) && !pwallet->AddCScript(redeemScript)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n             }\n \n             CBitcoinAddress redeemAddress = CBitcoinAddress(CScriptID(redeemScript));\n             CScript redeemDestination = GetScriptForDestination(redeemAddress.Get());\n \n-            if (::IsMine(*pwalletMain, redeemDestination) == ISMINE_SPENDABLE) {\n+            if (::IsMine(*pwallet, redeemDestination) == ISMINE_SPENDABLE) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n             }\n \n-            pwalletMain->MarkDirty();\n+            pwallet->MarkDirty();\n \n-            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination, timestamp)) {\n+            if (!pwallet->HaveWatchOnly(redeemDestination) && !pwallet->AddWatchOnly(redeemDestination, timestamp)) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n             }\n \n             // add to address book or update label\n             if (address.IsValid()) {\n-                pwalletMain->SetAddressBook(address.Get(), label, \"receive\");\n+                pwallet->SetAddressBook(address.Get(), label, \"receive\");\n             }\n \n             // Import private keys.\n@@ -773,20 +770,20 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                     assert(key.VerifyPubKey(pubkey));\n \n                     CKeyID vchAddress = pubkey.GetID();\n-                    pwalletMain->MarkDirty();\n-                    pwalletMain->SetAddressBook(vchAddress, label, \"receive\");\n+                    pwallet->MarkDirty();\n+                    pwallet->SetAddressBook(vchAddress, label, \"receive\");\n \n-                    if (pwalletMain->HaveKey(vchAddress)) {\n+                    if (pwallet->HaveKey(vchAddress)) {\n                         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n                     }\n \n-                    pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+                    pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n \n-                    if (!pwalletMain->AddKeyPubKey(key, pubkey)) {\n+                    if (!pwallet->AddKeyPubKey(key, pubkey)) {\n                         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                     }\n \n-                    pwalletMain->UpdateTimeFirstKey(timestamp);\n+                    pwallet->UpdateTimeFirstKey(timestamp);\n                 }\n             }\n \n@@ -829,31 +826,31 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n \n                 CScript pubKeyScript = GetScriptForDestination(pubKeyAddress.Get());\n \n-                if (::IsMine(*pwalletMain, pubKeyScript) == ISMINE_SPENDABLE) {\n+                if (::IsMine(*pwallet, pubKeyScript) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n-                pwalletMain->MarkDirty();\n+                pwallet->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript, timestamp)) {\n+                if (!pwallet->HaveWatchOnly(pubKeyScript) && !pwallet->AddWatchOnly(pubKeyScript, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n                 // add to address book or update label\n                 if (pubKeyAddress.IsValid()) {\n-                    pwalletMain->SetAddressBook(pubKeyAddress.Get(), label, \"receive\");\n+                    pwallet->SetAddressBook(pubKeyAddress.Get(), label, \"receive\");\n                 }\n \n                 // TODO Is this necessary?\n                 CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n \n-                if (::IsMine(*pwalletMain, scriptRawPubKey) == ISMINE_SPENDABLE) {\n+                if (::IsMine(*pwallet, scriptRawPubKey) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n-                pwalletMain->MarkDirty();\n+                pwallet->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey, timestamp)) {\n+                if (!pwallet->HaveWatchOnly(scriptRawPubKey) && !pwallet->AddWatchOnly(scriptRawPubKey, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n@@ -901,40 +898,40 @@ UniValue ProcessImport(const UniValue& data, const int64_t timestamp)\n                 }\n \n                 CKeyID vchAddress = pubKey.GetID();\n-                pwalletMain->MarkDirty();\n-                pwalletMain->SetAddressBook(vchAddress, label, \"receive\");\n+                pwallet->MarkDirty();\n+                pwallet->SetAddressBook(vchAddress, label, \"receive\");\n \n-                if (pwalletMain->HaveKey(vchAddress)) {\n+                if (pwallet->HaveKey(vchAddress)) {\n                     return false;\n                 }\n \n-                pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+                pwallet->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n \n-                if (!pwalletMain->AddKeyPubKey(key, pubKey)) {\n+                if (!pwallet->AddKeyPubKey(key, pubKey)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n                 }\n \n-                pwalletMain->UpdateTimeFirstKey(timestamp);\n+                pwallet->UpdateTimeFirstKey(timestamp);\n \n                 success = true;\n             }\n \n             // Import scriptPubKey only.\n             if (pubKeys.size() == 0 && keys.size() == 0) {\n-                if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE) {\n+                if (::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n                 }\n \n-                pwalletMain->MarkDirty();\n+                pwallet->MarkDirty();\n \n-                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script, timestamp)) {\n+                if (!pwallet->HaveWatchOnly(script) && !pwallet->AddWatchOnly(script, timestamp)) {\n                     throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n                 }\n \n                 if (scriptPubKey.getType() == UniValue::VOBJ) {\n                     // add to address book or update label\n                     if (address.IsValid()) {\n-                        pwalletMain->SetAddressBook(address.Get(), label, \"receive\");\n+                        pwallet->SetAddressBook(address.Get(), label, \"receive\");\n                     }\n                 }\n \n@@ -1012,7 +1009,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]\\n\");\n \n     // clang-format on\n-    if (!EnsureWalletIsAvailable(mainRequest.fHelp)) {\n+    if (!EnsureWalletIsAvailable(pwalletMain, mainRequest.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1032,7 +1029,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     }\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     // Verify all timestamps are present before importing any keys.\n     const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n@@ -1054,7 +1051,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n         const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-        const UniValue result = ProcessImport(data, timestamp);\n+        const UniValue result = ProcessImport(pwalletMain, data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {"
      },
      {
        "sha": "179d42fca9565e9c7a9fcb60a1dfeb8b084f47b3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 101,
        "deletions": 98,
        "changes": 199,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eca550f2501f3f2bbe682bdc3cb8b90c90c90275/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
        "patch": "@@ -32,16 +32,16 @@ using namespace std;\n int64_t nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n-std::string HelpRequiringPassphrase()\n+std::string HelpRequiringPassphrase(CWallet * const pwallet)\n {\n-    return pwalletMain && pwalletMain->IsCrypted()\n+    return pwallet && pwallet->IsCrypted()\n         ? \"\\nRequires wallet passphrase to be set with walletpassphrase call.\"\n         : \"\";\n }\n \n-bool EnsureWalletIsAvailable(bool avoidException)\n+bool EnsureWalletIsAvailable(CWallet * const pwallet, bool avoidException)\n {\n-    if (!pwalletMain)\n+    if (!pwallet)\n     {\n         if (!avoidException)\n             throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n@@ -51,9 +51,9 @@ bool EnsureWalletIsAvailable(bool avoidException)\n     return true;\n }\n \n-void EnsureWalletIsUnlocked()\n+void EnsureWalletIsUnlocked(CWallet * const pwallet)\n {\n-    if (pwalletMain->IsLocked())\n+    if (pwallet->IsLocked())\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n }\n \n@@ -106,7 +106,7 @@ string AccountFromValue(const UniValue& value)\n \n UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 1)\n@@ -146,10 +146,10 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n }\n \n \n-CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n+CBitcoinAddress GetAccountAddress(CWallet * const pwallet, string strAccount, bool bForceNew=false)\n {\n     CPubKey pubKey;\n-    if (!pwalletMain->GetAccountPubkey(pubKey, strAccount, bForceNew)) {\n+    if (!pwallet->GetAccountPubkey(pubKey, strAccount, bForceNew)) {\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     }\n \n@@ -158,7 +158,7 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n \n UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -183,14 +183,14 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VSTR);\n \n-    ret = GetAccountAddress(strAccount).ToString();\n+    ret = GetAccountAddress(pwalletMain, strAccount).ToString();\n     return ret;\n }\n \n \n UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 1)\n@@ -225,7 +225,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n UniValue setaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -257,8 +257,8 @@ UniValue setaccount(const JSONRPCRequest& request)\n         if (pwalletMain->mapAddressBook.count(address.Get()))\n         {\n             string strOldAccount = pwalletMain->mapAddressBook[address.Get()].name;\n-            if (address == GetAccountAddress(strOldAccount))\n-                GetAccountAddress(strOldAccount, true);\n+            if (address == GetAccountAddress(pwalletMain, strOldAccount))\n+                GetAccountAddress(pwalletMain, strOldAccount, true);\n         }\n         pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n     }\n@@ -271,7 +271,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n \n UniValue getaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -303,7 +303,7 @@ UniValue getaccount(const JSONRPCRequest& request)\n \n UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -338,9 +338,9 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n     return ret;\n }\n \n-static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n+static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CAmount nValue, bool fSubtractFeeFromAmount, CWalletTx& wtxNew)\n {\n-    CAmount curBalance = pwalletMain->GetBalance();\n+    CAmount curBalance = pwallet->GetBalance();\n \n     // Check amount\n     if (nValue <= 0)\n@@ -349,42 +349,42 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n     if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+    if (pwallet->GetBroadcastTransactions() && !g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n \n     // Create and send the transaction\n-    CReserveKey reservekey(pwalletMain);\n+    CReserveKey reservekey(pwallet);\n     CAmount nFeeRequired;\n     std::string strError;\n     vector<CRecipient> vecSend;\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n-    if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n+    if (!pwallet->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n         strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n }\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n-            + HelpRequiringPassphrase() +\n+            + HelpRequiringPassphrase(pwalletMain) +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"            (string, required) The bitcoin address to send to.\\n\"\n             \"2. \\\"amount\\\"             (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n@@ -426,16 +426,16 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     if (request.params.size() > 4)\n         fSubtractFeeFromAmount = request.params[4].get_bool();\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n-    SendMoney(address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n+    SendMoney(pwalletMain, address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n \n UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp)\n@@ -486,14 +486,14 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n UniValue signmessage(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessage \\\"address\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n-            + HelpRequiringPassphrase() + \"\\n\"\n+            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n@@ -512,7 +512,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     string strAddress = request.params[0].get_str();\n     string strMessage = request.params[1].get_str();\n@@ -542,7 +542,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -600,7 +600,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -657,7 +657,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n UniValue getbalance(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 3)\n@@ -746,7 +746,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 0)\n@@ -762,7 +762,7 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n UniValue movecmd(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n@@ -809,14 +809,14 @@ UniValue movecmd(const JSONRPCRequest& request)\n \n UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n-            + HelpRequiringPassphrase() + \"\\n\"\n+            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n             \"                       Specifying an account does not influence coin selection, but it does associate the newly created\\n\"\n@@ -861,29 +861,29 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (request.params.size() > 5 && !request.params[5].isNull() && !request.params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = request.params[5].get_str();\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     // Check funds\n     CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(address.Get(), nAmount, false, wtx);\n+    SendMoney(pwalletMain, address.Get(), nAmount, false, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n \n \n UniValue sendmany(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n-            + HelpRequiringPassphrase() + \"\\n\"\n+            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n@@ -967,7 +967,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n         vecSend.push_back(recipient);\n     }\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n \n     // Check funds\n     CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n@@ -992,11 +992,11 @@ UniValue sendmany(const JSONRPCRequest& request)\n }\n \n // Defined in rpc/misc.cpp\n-extern CScript _createmultisig_redeemScript(const UniValue& params);\n+extern CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& params);\n \n UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n@@ -1034,7 +1034,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n         strAccount = AccountFromValue(request.params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(request.params);\n+    CScript inner = _createmultisig_redeemScript(pwalletMain, request.params);\n     CScriptID innerID(inner);\n     pwalletMain->AddCScript(inner);\n \n@@ -1045,20 +1045,23 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n class Witnessifier : public boost::static_visitor<bool>\n {\n public:\n+    CWallet * const pwallet;\n     CScriptID result;\n \n+    Witnessifier(CWallet *_pwallet) : pwallet(_pwallet) {}\n+\n     bool operator()(const CNoDestination &dest) const { return false; }\n \n     bool operator()(const CKeyID &keyID) {\n         CPubKey pubkey;\n-        if (pwalletMain) {\n+        if (pwallet) {\n             CScript basescript = GetScriptForDestination(keyID);\n             isminetype typ;\n-            typ = IsMine(*pwalletMain, basescript, SIGVERSION_WITNESS_V0);\n+            typ = IsMine(*pwallet, basescript, SIGVERSION_WITNESS_V0);\n             if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n                 return false;\n             CScript witscript = GetScriptForWitness(basescript);\n-            pwalletMain->AddCScript(witscript);\n+            pwallet->AddCScript(witscript);\n             result = CScriptID(witscript);\n             return true;\n         }\n@@ -1067,19 +1070,19 @@ class Witnessifier : public boost::static_visitor<bool>\n \n     bool operator()(const CScriptID &scriptID) {\n         CScript subscript;\n-        if (pwalletMain && pwalletMain->GetCScript(scriptID, subscript)) {\n+        if (pwallet && pwallet->GetCScript(scriptID, subscript)) {\n             int witnessversion;\n             std::vector<unsigned char> witprog;\n             if (subscript.IsWitnessProgram(witnessversion, witprog)) {\n                 result = scriptID;\n                 return true;\n             }\n             isminetype typ;\n-            typ = IsMine(*pwalletMain, subscript, SIGVERSION_WITNESS_V0);\n+            typ = IsMine(*pwallet, subscript, SIGVERSION_WITNESS_V0);\n             if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n                 return false;\n             CScript witscript = GetScriptForWitness(subscript);\n-            pwalletMain->AddCScript(witscript);\n+            pwallet->AddCScript(witscript);\n             result = CScriptID(witscript);\n             return true;\n         }\n@@ -1089,7 +1092,7 @@ class Witnessifier : public boost::static_visitor<bool>\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n@@ -1119,7 +1122,7 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-    Witnessifier w;\n+    Witnessifier w(pwalletMain);\n     CTxDestination dest = address.Get();\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n@@ -1145,7 +1148,7 @@ struct tallyitem\n     }\n };\n \n-UniValue ListReceived(const UniValue& params, bool fByAccounts)\n+UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByAccounts)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1164,7 +1167,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n \n     // Tally\n     map<CBitcoinAddress, tallyitem> mapTally;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n \n@@ -1181,7 +1184,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n             if (!ExtractDestination(txout.scriptPubKey, address))\n                 continue;\n \n-            isminefilter mine = IsMine(*pwalletMain, address);\n+            isminefilter mine = IsMine(*pwallet, address);\n             if(!(mine & filter))\n                 continue;\n \n@@ -1197,7 +1200,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     // Reply\n     UniValue ret(UniValue::VARR);\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwallet->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second.name;\n@@ -1267,7 +1270,7 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n \n UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 3)\n@@ -1304,12 +1307,12 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(request.params, false);\n+    return ListReceived(pwalletMain, request.params, false);\n }\n \n UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 3)\n@@ -1341,7 +1344,7 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(request.params, true);\n+    return ListReceived(pwalletMain, request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1351,7 +1354,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n         entry.push_back(Pair(\"address\", addr.ToString()));\n }\n \n-void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+void ListTransactions(CWallet * const pwallet, const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n {\n     CAmount nFee;\n     string strSentAccount;\n@@ -1369,14 +1372,14 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n         BOOST_FOREACH(const COutputEntry& s, listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n-            if(involvesWatchonly || (::IsMine(*pwalletMain, s.destination) & ISMINE_WATCH_ONLY))\n+            if(involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY))\n                 entry.push_back(Pair(\"involvesWatchonly\", true));\n             entry.push_back(Pair(\"account\", strSentAccount));\n             MaybePushAddress(entry, s.destination);\n             entry.push_back(Pair(\"category\", \"send\"));\n             entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n-            if (pwalletMain->mapAddressBook.count(s.destination))\n-                entry.push_back(Pair(\"label\", pwalletMain->mapAddressBook[s.destination].name));\n+            if (pwallet->mapAddressBook.count(s.destination))\n+                entry.push_back(Pair(\"label\", pwallet->mapAddressBook[s.destination].name));\n             entry.push_back(Pair(\"vout\", s.vout));\n             entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n             if (fLong)\n@@ -1392,12 +1395,12 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n         BOOST_FOREACH(const COutputEntry& r, listReceived)\n         {\n             string account;\n-            if (pwalletMain->mapAddressBook.count(r.destination))\n-                account = pwalletMain->mapAddressBook[r.destination].name;\n+            if (pwallet->mapAddressBook.count(r.destination))\n+                account = pwallet->mapAddressBook[r.destination].name;\n             if (fAllAccounts || (account == strAccount))\n             {\n                 UniValue entry(UniValue::VOBJ);\n-                if(involvesWatchonly || (::IsMine(*pwalletMain, r.destination) & ISMINE_WATCH_ONLY))\n+                if(involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY))\n                     entry.push_back(Pair(\"involvesWatchonly\", true));\n                 entry.push_back(Pair(\"account\", account));\n                 MaybePushAddress(entry, r.destination);\n@@ -1415,7 +1418,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n                     entry.push_back(Pair(\"category\", \"receive\"));\n                 }\n                 entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n-                if (pwalletMain->mapAddressBook.count(r.destination))\n+                if (pwallet->mapAddressBook.count(r.destination))\n                     entry.push_back(Pair(\"label\", account));\n                 entry.push_back(Pair(\"vout\", r.vout));\n                 if (fLong)\n@@ -1445,7 +1448,7 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Un\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 4)\n@@ -1538,7 +1541,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n-            ListTransactions(*pwtx, strAccount, 0, true, ret, filter);\n+            ListTransactions(pwalletMain, *pwtx, strAccount, 0, true, ret, filter);\n         CAccountingEntry *const pacentry = (*it).second.second;\n         if (pacentry != 0)\n             AcentryToJSON(*pacentry, strAccount, ret);\n@@ -1573,7 +1576,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 2)\n@@ -1652,7 +1655,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp)\n@@ -1743,7 +1746,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(tx, \"*\", 0, true, transactions, filter);\n+            ListTransactions(pwalletMain, tx, \"*\", 0, true, transactions, filter);\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n@@ -1758,7 +1761,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1833,7 +1836,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n-    ListTransactions(wtx, \"*\", 0, false, details, filter);\n+    ListTransactions(pwalletMain, wtx, \"*\", 0, false, details, filter);\n     entry.push_back(Pair(\"details\", details));\n \n     string strHex = EncodeHexTx(static_cast<CTransaction>(wtx), RPCSerializationFlags());\n@@ -1844,7 +1847,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n \n UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -1879,7 +1882,7 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n \n UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -1905,14 +1908,14 @@ UniValue backupwallet(const JSONRPCRequest& request)\n \n UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"keypoolrefill ( newsize )\\n\"\n             \"\\nFills the keypool.\"\n-            + HelpRequiringPassphrase() + \"\\n\"\n+            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n             \"\\nArguments\\n\"\n             \"1. newsize     (numeric, optional, default=100) The new keypool size\\n\"\n             \"\\nExamples:\\n\"\n@@ -1930,7 +1933,7 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n         kpSize = (unsigned int)request.params[0].get_int();\n     }\n \n-    EnsureWalletIsUnlocked();\n+    EnsureWalletIsUnlocked(pwalletMain);\n     pwalletMain->TopUpKeyPool(kpSize);\n \n     if (pwalletMain->GetKeyPoolSize() < kpSize)\n@@ -1949,7 +1952,7 @@ static void LockWallet(CWallet* pWallet)\n \n UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n@@ -2009,7 +2012,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n@@ -2055,7 +2058,7 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n UniValue walletlock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 0))\n@@ -2094,7 +2097,7 @@ UniValue walletlock(const JSONRPCRequest& request)\n \n UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (!pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 1))\n@@ -2151,7 +2154,7 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n \n UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -2240,7 +2243,7 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 0)\n@@ -2289,7 +2292,7 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n \n UniValue settxfee(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n@@ -2316,7 +2319,7 @@ UniValue settxfee(const JSONRPCRequest& request)\n \n UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 0)\n@@ -2362,7 +2365,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n \n UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 0)\n@@ -2390,7 +2393,7 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n UniValue listunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 4)\n@@ -2514,7 +2517,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -2674,19 +2677,19 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n // calculation, but we should be able to refactor after priority is removed).\n // NOTE: this requires that all inputs must be in mapWallet (eg the tx should\n // be IsAllFromMe).\n-int64_t CalculateMaximumSignedTxSize(const CTransaction &tx)\n+int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, CWallet &wallet)\n {\n     CMutableTransaction txNew(tx);\n     std::vector<pair<CWalletTx *, unsigned int>> vCoins;\n     // Look up the inputs.  We should have already checked that this transaction\n     // IsAllFromMe(ISMINE_SPENDABLE), so every input should already be in our\n     // wallet, with a valid index into the vout array.\n     for (auto& input : tx.vin) {\n-        const auto mi = pwalletMain->mapWallet.find(input.prevout.hash);\n-        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        const auto mi = wallet.mapWallet.find(input.prevout.hash);\n+        assert(mi != wallet.mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n         vCoins.emplace_back(make_pair(&(mi->second), input.prevout.n));\n     }\n-    if (!pwalletMain->DummySignTx(txNew, vCoins)) {\n+    if (!wallet.DummySignTx(txNew, vCoins)) {\n         // This should never happen, because IsAllFromMe(ISMINE_SPENDABLE)\n         // implies that we can sign for every input.\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that cannot be signed\");\n@@ -2802,7 +2805,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // Calculate the expected size of the new transaction.\n     int64_t txSize = GetVirtualTransactionSize(*(wtx.tx));\n-    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx);\n+    const int64_t maxNewTxSize = CalculateMaximumSignedTxSize(*wtx.tx, *pwallet);\n \n     // optional parameters\n     bool specifiedConfirmTarget = false;"
      }
    ]
  },
  {
    "sha": "d77ad6d41666b4c41abe1ba3b63300df1903643e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzdhZDZkNDE2NjZiNGM0MWFiZTFiYTNiNjMzMDBkZjE5MDM2NDNl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-25T07:45:57Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:17Z"
      },
      "message": "RPC: Do all wallet access through new GetWalletForJSONRPCRequest",
      "tree": {
        "sha": "31d9201a04fbab8321c3fa109b9674b12fdd5457",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31d9201a04fbab8321c3fa109b9674b12fdd5457"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d77ad6d41666b4c41abe1ba3b63300df1903643e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d77ad6d41666b4c41abe1ba3b63300df1903643e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d77ad6d41666b4c41abe1ba3b63300df1903643e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d77ad6d41666b4c41abe1ba3b63300df1903643e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eca550f2501f3f2bbe682bdc3cb8b90c90c90275",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eca550f2501f3f2bbe682bdc3cb8b90c90c90275"
      }
    ],
    "stats": {
      "total": 685,
      "additions": 400,
      "deletions": 285
    },
    "files": [
      {
        "sha": "c9bbce856d9c9bd9aa0db4139f653c383a047fb8",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 16,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=d77ad6d41666b4c41abe1ba3b63300df1903643e",
        "patch": "@@ -70,7 +70,9 @@ UniValue getinfo(const JSONRPCRequest& request)\n         );\n \n #ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : NULL);\n #else\n     LOCK(cs_main);\n #endif\n@@ -82,9 +84,9 @@ UniValue getinfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"version\", CLIENT_VERSION));\n     obj.push_back(Pair(\"protocolversion\", PROTOCOL_VERSION));\n #ifdef ENABLE_WALLET\n-    if (pwalletMain) {\n-        obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n+    if (pwallet) {\n+        obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n+        obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n     }\n #endif\n     obj.push_back(Pair(\"blocks\",        (int)chainActive.Height()));\n@@ -95,11 +97,11 @@ UniValue getinfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n     obj.push_back(Pair(\"testnet\",       Params().NetworkIDString() == CBaseChainParams::TESTNET));\n #ifdef ENABLE_WALLET\n-    if (pwalletMain) {\n-        obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));\n-        obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n+    if (pwallet) {\n+        obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n+        obj.push_back(Pair(\"keypoolsize\",   (int)pwallet->GetKeyPoolSize()));\n     }\n-    if (pwalletMain && pwalletMain->IsCrypted())\n+    if (pwallet && pwallet->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n #endif\n@@ -181,7 +183,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         );\n \n #ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : NULL);\n #else\n     LOCK(cs_main);\n #endif\n@@ -201,16 +205,16 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"scriptPubKey\", HexStr(scriptPubKey.begin(), scriptPubKey.end())));\n \n #ifdef ENABLE_WALLET\n-        isminetype mine = pwalletMain ? IsMine(*pwalletMain, dest) : ISMINE_NO;\n+        isminetype mine = pwallet ? IsMine(*pwallet, dest) : ISMINE_NO;\n         ret.push_back(Pair(\"ismine\", (mine & ISMINE_SPENDABLE) ? true : false));\n         ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n-        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwalletMain), dest);\n+        UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n-        if (pwalletMain && pwalletMain->mapAddressBook.count(dest))\n-            ret.push_back(Pair(\"account\", pwalletMain->mapAddressBook[dest].name));\n+        if (pwallet && pwallet->mapAddressBook.count(dest))\n+            ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n         CKeyID keyID;\n-        if (pwalletMain) {\n-            const auto& meta = pwalletMain->mapKeyMetadata;\n+        if (pwallet) {\n+            const auto& meta = pwallet->mapKeyMetadata;\n             auto it = address.GetKeyID(keyID) ? meta.find(keyID) : meta.end();\n             if (it == meta.end()) {\n                 it = meta.find(CScriptID(scriptPubKey));\n@@ -294,6 +298,12 @@ CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& pa\n \n UniValue createmultisig(const JSONRPCRequest& request)\n {\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#else\n+    CWallet * const pwallet = NULL;\n+#endif\n+\n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n     {\n         string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n@@ -324,7 +334,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(pwalletMain, request.params);\n+    CScript inner = _createmultisig_redeemScript(pwallet, request.params);\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n "
      },
      {
        "sha": "5c75fecac80c6b68551658de9120d252914944d5",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d77ad6d41666b4c41abe1ba3b63300df1903643e",
        "patch": "@@ -594,6 +594,10 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n \n UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n+#ifdef ENABLE_WALLET\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+#endif\n+\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n@@ -603,7 +607,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             \"The third optional argument (may be null) is an array of base58-encoded private\\n\"\n             \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n #ifdef ENABLE_WALLET\n-            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n #endif\n \n             \"\\nArguments:\\n\"\n@@ -654,7 +658,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         );\n \n #ifdef ENABLE_WALLET\n-    LOCK2(cs_main, pwalletMain ? &pwalletMain->cs_wallet : NULL);\n+    LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : NULL);\n #else\n     LOCK(cs_main);\n #endif\n@@ -717,8 +721,8 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         }\n     }\n #ifdef ENABLE_WALLET\n-    else if (pwalletMain)\n-        EnsureWalletIsUnlocked(pwalletMain);\n+    else if (pwallet)\n+        EnsureWalletIsUnlocked(pwallet);\n #endif\n \n     // Add previous txouts given in the RPC call:\n@@ -785,7 +789,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n     }\n \n #ifdef ENABLE_WALLET\n-    const CKeyStore& keystore = ((fGivenKeys || !pwalletMain) ? tempKeystore : *pwalletMain);\n+    const CKeyStore& keystore = ((fGivenKeys || !pwallet) ? tempKeystore : *pwallet);\n #else\n     const CKeyStore& keystore = tempKeystore;\n #endif"
      },
      {
        "sha": "b8f0373accc3d091a388f2e9ed97da035f4df6a4",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=d77ad6d41666b4c41abe1ba3b63300df1903643e",
        "patch": "@@ -202,6 +202,7 @@ class CWallet;\n \n #ifdef ENABLE_WALLET\n // New code should accessing the wallet should be under the ../wallet/ directory\n+CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest&);\n std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);\n bool EnsureWalletIsAvailable(CWallet *, bool avoidException);"
      },
      {
        "sha": "f0df76c92a5f2ab160487a6df8d0551b80ff50a0",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 65,
        "changes": 148,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d77ad6d41666b4c41abe1ba3b63300df1903643e",
        "patch": "@@ -74,7 +74,9 @@ std::string DecodeDumpString(const std::string &str) {\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n@@ -98,9 +100,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         );\n \n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     string strSecret = request.params[0].get_str();\n     string strLabel = \"\";\n@@ -127,23 +129,23 @@ UniValue importprivkey(const JSONRPCRequest& request)\n     assert(key.VerifyPubKey(pubkey));\n     CKeyID vchAddress = pubkey.GetID();\n     {\n-        pwalletMain->MarkDirty();\n-        pwalletMain->SetAddressBook(vchAddress, strLabel, \"receive\");\n+        pwallet->MarkDirty();\n+        pwallet->SetAddressBook(vchAddress, strLabel, \"receive\");\n \n         // Don't throw error in case a key is already there\n-        if (pwalletMain->HaveKey(vchAddress))\n+        if (pwallet->HaveKey(vchAddress))\n             return NullUniValue;\n \n-        pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = 1;\n+        pwallet->mapKeyMetadata[vchAddress].nCreateTime = 1;\n \n-        if (!pwalletMain->AddKeyPubKey(key, pubkey))\n+        if (!pwallet->AddKeyPubKey(key, pubkey))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n         // whenever a key is imported, we need to scan the whole chain\n-        pwalletMain->UpdateTimeFirstKey(1);\n+        pwallet->UpdateTimeFirstKey(1);\n \n         if (fRescan) {\n-            pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n+            pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n         }\n     }\n \n@@ -184,7 +186,9 @@ void ImportAddress(CWallet * const pwallet, const CBitcoinAddress& address, cons\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n@@ -227,32 +231,34 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (request.params.size() > 3)\n         fP2SH = request.params[3].get_bool();\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     CBitcoinAddress address(request.params[0].get_str());\n     if (address.IsValid()) {\n         if (fP2SH)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n-        ImportAddress(pwalletMain, address, strLabel);\n+        ImportAddress(pwallet, address, strLabel);\n     } else if (IsHex(request.params[0].get_str())) {\n         std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n-        ImportScript(pwalletMain, CScript(data.begin(), data.end()), strLabel, fP2SH);\n+        ImportScript(pwallet, CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }\n \n     if (fRescan)\n     {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-        pwalletMain->ReacceptWalletTransactions();\n+        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->ReacceptWalletTransactions();\n     }\n \n     return NullUniValue;\n }\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 2)\n@@ -268,7 +274,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n-    CWalletTx wtx(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    CWalletTx wtx(pwallet, MakeTransactionRef(std::move(tx)));\n \n     CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;\n@@ -299,10 +305,10 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n     wtx.nIndex = txnIndex;\n     wtx.hashBlock = merkleBlock.header.GetHash();\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (pwalletMain->IsMine(wtx)) {\n-        pwalletMain->AddToWallet(wtx, false);\n+    if (pwallet->IsMine(wtx)) {\n+        pwallet->AddToWallet(wtx, false);\n         return NullUniValue;\n     }\n \n@@ -311,7 +317,9 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -326,15 +334,15 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"removprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n     vector<uint256> vHash;\n     vHash.push_back(hash);\n     vector<uint256> vHashOut;\n \n-    if(pwalletMain->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n+    if(pwallet->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not properly delete the transaction.\");\n     }\n \n@@ -347,7 +355,9 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n@@ -388,15 +398,15 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!pubKey.IsFullyValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    ImportAddress(pwalletMain, CBitcoinAddress(pubKey.GetID()), strLabel);\n-    ImportScript(pwalletMain, GetScriptForRawPubKey(pubKey), strLabel, false);\n+    ImportAddress(pwallet, CBitcoinAddress(pubKey.GetID()), strLabel);\n+    ImportScript(pwallet, GetScriptForRawPubKey(pubKey), strLabel, false);\n \n     if (fRescan)\n     {\n-        pwalletMain->ScanForWalletTransactions(chainActive.Genesis(), true);\n-        pwalletMain->ReacceptWalletTransactions();\n+        pwallet->ScanForWalletTransactions(chainActive.Genesis(), true);\n+        pwallet->ReacceptWalletTransactions();\n     }\n \n     return NullUniValue;\n@@ -405,7 +415,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() != 1)\n@@ -426,9 +438,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     ifstream file;\n     file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n@@ -442,9 +454,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n     int64_t nFilesize = std::max((int64_t)1, (int64_t)file.tellg());\n     file.seekg(0, file.beg);\n \n-    pwalletMain->ShowProgress(_(\"Importing...\"), 0); // show progress dialog in GUI\n+    pwallet->ShowProgress(_(\"Importing...\"), 0); // show progress dialog in GUI\n     while (file.good()) {\n-        pwalletMain->ShowProgress(\"\", std::max(1, std::min(99, (int)(((double)file.tellg() / (double)nFilesize) * 100))));\n+        pwallet->ShowProgress(\"\", std::max(1, std::min(99, (int)(((double)file.tellg() / (double)nFilesize) * 100))));\n         std::string line;\n         std::getline(file, line);\n         if (line.empty() || line[0] == '#')\n@@ -461,7 +473,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         CPubKey pubkey = key.GetPubKey();\n         assert(key.VerifyPubKey(pubkey));\n         CKeyID keyid = pubkey.GetID();\n-        if (pwalletMain->HaveKey(keyid)) {\n+        if (pwallet->HaveKey(keyid)) {\n             LogPrintf(\"Skipping import of %s (key already present)\\n\", CBitcoinAddress(keyid).ToString());\n             continue;\n         }\n@@ -481,27 +493,27 @@ UniValue importwallet(const JSONRPCRequest& request)\n             }\n         }\n         LogPrintf(\"Importing %s...\\n\", CBitcoinAddress(keyid).ToString());\n-        if (!pwalletMain->AddKeyPubKey(key, pubkey)) {\n+        if (!pwallet->AddKeyPubKey(key, pubkey)) {\n             fGood = false;\n             continue;\n         }\n-        pwalletMain->mapKeyMetadata[keyid].nCreateTime = nTime;\n+        pwallet->mapKeyMetadata[keyid].nCreateTime = nTime;\n         if (fLabel)\n-            pwalletMain->SetAddressBook(keyid, strLabel, \"receive\");\n+            pwallet->SetAddressBook(keyid, strLabel, \"receive\");\n         nTimeBegin = std::min(nTimeBegin, nTime);\n     }\n     file.close();\n-    pwalletMain->ShowProgress(\"\", 100); // hide progress dialog in GUI\n+    pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n \n     CBlockIndex *pindex = chainActive.Tip();\n     while (pindex && pindex->pprev && pindex->GetBlockTime() > nTimeBegin - 7200)\n         pindex = pindex->pprev;\n \n-    pwalletMain->UpdateTimeFirstKey(nTimeBegin);\n+    pwallet->UpdateTimeFirstKey(nTimeBegin);\n \n     LogPrintf(\"Rescanning last %i blocks\\n\", chainActive.Height() - pindex->nHeight + 1);\n-    pwalletMain->ScanForWalletTransactions(pindex);\n-    pwalletMain->MarkDirty();\n+    pwallet->ScanForWalletTransactions(pindex);\n+    pwallet->MarkDirty();\n \n     if (!fGood)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys to wallet\");\n@@ -511,7 +523,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() != 1)\n@@ -529,9 +543,9 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"dumpprivkey\", \"\\\"myaddress\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     string strAddress = request.params[0].get_str();\n     CBitcoinAddress address;\n@@ -541,15 +555,17 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     if (!address.GetKeyID(keyID))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");\n     CKey vchSecret;\n-    if (!pwalletMain->GetKey(keyID, vchSecret))\n+    if (!pwallet->GetKey(keyID, vchSecret))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     return CBitcoinSecret(vchSecret).ToString();\n }\n \n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n     \n     if (request.fHelp || request.params.size() != 1)\n@@ -563,9 +579,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"dumpwallet\", \"\\\"test\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     ofstream file;\n     file.open(request.params[0].get_str().c_str());\n@@ -574,8 +590,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n     std::map<CTxDestination, int64_t> mapKeyBirth;\n     std::set<CKeyID> setKeyPool;\n-    pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n-    pwalletMain->GetAllReserveKeys(setKeyPool);\n+    pwallet->GetKeyBirthTimes(mapKeyBirth);\n+    pwallet->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n     std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n@@ -595,11 +611,11 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file << \"\\n\";\n \n     // add the base58check encoded extended master if the wallet uses HD \n-    CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n+    CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n     {\n         CKey key;\n-        if (pwalletMain->GetKey(masterKeyID, key))\n+        if (pwallet->GetKey(masterKeyID, key))\n         {\n             CExtKey masterKey;\n             masterKey.SetMaster(key.begin(), key.size());\n@@ -615,20 +631,20 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         std::string strTime = EncodeDumpTime(it->first);\n         std::string strAddr = CBitcoinAddress(keyid).ToString();\n         CKey key;\n-        if (pwalletMain->GetKey(keyid, key)) {\n+        if (pwallet->GetKey(keyid, key)) {\n             file << strprintf(\"%s %s \", CBitcoinSecret(key).ToString(), strTime);\n-            if (pwalletMain->mapAddressBook.count(keyid)) {\n-                file << strprintf(\"label=%s\", EncodeDumpString(pwalletMain->mapAddressBook[keyid].name));\n+            if (pwallet->mapAddressBook.count(keyid)) {\n+                file << strprintf(\"label=%s\", EncodeDumpString(pwallet->mapAddressBook[keyid].name));\n             } else if (keyid == masterKeyID) {\n                 file << \"hdmaster=1\";\n             } else if (setKeyPool.count(keyid)) {\n                 file << \"reserve=1\";\n-            } else if (pwalletMain->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n+            } else if (pwallet->mapKeyMetadata[keyid].hdKeypath == \"m\") {\n                 file << \"inactivehdmaster=1\";\n             } else {\n                 file << \"change=1\";\n             }\n-            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwalletMain->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\"+pwalletMain->mapKeyMetadata[keyid].hdKeypath : \"\"));\n+            file << strprintf(\" # addr=%s%s\\n\", strAddr, (pwallet->mapKeyMetadata[keyid].hdKeypath.size() > 0 ? \" hdkeypath=\"+pwallet->mapKeyMetadata[keyid].hdKeypath : \"\"));\n         }\n     }\n     file << \"\\n\";\n@@ -971,6 +987,8 @@ int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n \n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(mainRequest);\n+\n     // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n         throw runtime_error(\n@@ -1009,7 +1027,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]\\n\");\n \n     // clang-format on\n-    if (!EnsureWalletIsAvailable(pwalletMain, mainRequest.fHelp)) {\n+    if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1028,8 +1046,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-    EnsureWalletIsUnlocked(pwalletMain);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     // Verify all timestamps are present before importing any keys.\n     const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n@@ -1051,7 +1069,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n         const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-        const UniValue result = ProcessImport(pwalletMain, data, timestamp);\n+        const UniValue result = ProcessImport(pwallet, data, timestamp);\n         response.push_back(result);\n \n         if (!fRescan) {\n@@ -1073,8 +1091,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindEarliestAtLeast(std::max<int64_t>(nLowestTimestamp - 7200, 0)) : chainActive.Genesis();\n         CBlockIndex* scannedRange = nullptr;\n         if (pindex) {\n-            scannedRange = pwalletMain->ScanForWalletTransactions(pindex, true);\n-            pwalletMain->ReacceptWalletTransactions();\n+            scannedRange = pwallet->ScanForWalletTransactions(pindex, true);\n+            pwallet->ReacceptWalletTransactions();\n         }\n \n         if (!scannedRange || scannedRange->nHeight > pindex->nHeight) {"
      },
      {
        "sha": "478d92cda38e770fd447abbeecdb08cf7017ecff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 281,
        "deletions": 199,
        "changes": 480,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d77ad6d41666b4c41abe1ba3b63300df1903643e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d77ad6d41666b4c41abe1ba3b63300df1903643e",
        "patch": "@@ -32,6 +32,11 @@ using namespace std;\n int64_t nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n+CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n+{\n+    return pwalletMain;\n+}\n+\n std::string HelpRequiringPassphrase(CWallet * const pwallet)\n {\n     return pwallet && pwallet->IsCrypted()\n@@ -106,7 +111,9 @@ string AccountFromValue(const UniValue& value)\n \n UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 1)\n@@ -124,23 +131,23 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnewaddress\", \"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n     if (request.params.size() > 0)\n         strAccount = AccountFromValue(request.params[0]);\n \n-    if (!pwalletMain->IsLocked())\n-        pwalletMain->TopUpKeyPool();\n+    if (!pwallet->IsLocked())\n+        pwallet->TopUpKeyPool();\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwalletMain->GetKeyFromPool(newKey))\n+    if (!pwallet->GetKeyFromPool(newKey))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n     CKeyID keyID = newKey.GetID();\n \n-    pwalletMain->SetAddressBook(keyID, strAccount, \"receive\");\n+    pwallet->SetAddressBook(keyID, strAccount, \"receive\");\n \n     return CBitcoinAddress(keyID).ToString();\n }\n@@ -158,7 +165,9 @@ CBitcoinAddress GetAccountAddress(CWallet * const pwallet, string strAccount, bo\n \n UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -176,21 +185,23 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getaccountaddress\", \"\\\"myaccount\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount = AccountFromValue(request.params[0]);\n \n     UniValue ret(UniValue::VSTR);\n \n-    ret = GetAccountAddress(pwalletMain, strAccount).ToString();\n+    ret = GetAccountAddress(pwallet, strAccount).ToString();\n     return ret;\n }\n \n \n UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 1)\n@@ -205,12 +216,12 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getrawchangeaddress\", \"\")\n        );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (!pwalletMain->IsLocked())\n-        pwalletMain->TopUpKeyPool();\n+    if (!pwallet->IsLocked())\n+        pwallet->TopUpKeyPool();\n \n-    CReserveKey reservekey(pwalletMain);\n+    CReserveKey reservekey(pwallet);\n     CPubKey vchPubKey;\n     if (!reservekey.GetReservedKey(vchPubKey))\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n@@ -225,7 +236,9 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n UniValue setaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -240,7 +253,7 @@ UniValue setaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"tabby\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n@@ -251,16 +264,16 @@ UniValue setaccount(const JSONRPCRequest& request)\n         strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n-    if (IsMine(*pwalletMain, address.Get()))\n+    if (IsMine(*pwallet, address.Get()))\n     {\n         // Detect when changing the account of an address that is the 'unused current key' of another account:\n-        if (pwalletMain->mapAddressBook.count(address.Get()))\n+        if (pwallet->mapAddressBook.count(address.Get()))\n         {\n-            string strOldAccount = pwalletMain->mapAddressBook[address.Get()].name;\n-            if (address == GetAccountAddress(pwalletMain, strOldAccount))\n-                GetAccountAddress(pwalletMain, strOldAccount, true);\n+            string strOldAccount = pwallet->mapAddressBook[address.Get()].name;\n+            if (address == GetAccountAddress(pwallet, strOldAccount))\n+                GetAccountAddress(pwallet, strOldAccount, true);\n         }\n-        pwalletMain->SetAddressBook(address.Get(), strAccount, \"receive\");\n+        pwallet->SetAddressBook(address.Get(), strAccount, \"receive\");\n     }\n     else\n         throw JSONRPCError(RPC_MISC_ERROR, \"setaccount can only be used with own address\");\n@@ -271,7 +284,9 @@ UniValue setaccount(const JSONRPCRequest& request)\n \n UniValue getaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -287,23 +302,25 @@ UniValue getaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    map<CTxDestination, CAddressBookData>::iterator mi = pwalletMain->mapAddressBook.find(address.Get());\n-    if (mi != pwalletMain->mapAddressBook.end() && !(*mi).second.name.empty())\n+    map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n+    if (mi != pwallet->mapAddressBook.end() && !(*mi).second.name.empty())\n         strAccount = (*mi).second.name;\n     return strAccount;\n }\n \n \n UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -322,13 +339,13 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getaddressesbyaccount\", \"\\\"tabby\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     string strAccount = AccountFromValue(request.params[0]);\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwalletMain->mapAddressBook)\n+    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwallet->mapAddressBook)\n     {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n@@ -377,14 +394,16 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n-            + HelpRequiringPassphrase(pwalletMain) +\n+            + HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"            (string, required) The bitcoin address to send to.\\n\"\n             \"2. \\\"amount\\\"             (numeric or string, required) The amount in \" + CURRENCY_UNIT + \" to send. eg 0.1\\n\"\n@@ -404,7 +423,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"sendtoaddress\", \"\\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.1, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n@@ -426,16 +445,18 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n     if (request.params.size() > 4)\n         fSubtractFeeFromAmount = request.params[4].get_bool();\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n-    SendMoney(pwalletMain, address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n+    SendMoney(pwallet, address.Get(), nAmount, fSubtractFeeFromAmount, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n \n UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp)\n@@ -461,11 +482,11 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listaddressgroupings\", \"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     UniValue jsonGroupings(UniValue::VARR);\n-    map<CTxDestination, CAmount> balances = pwalletMain->GetAddressBalances();\n-    BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n+    map<CTxDestination, CAmount> balances = pwallet->GetAddressBalances();\n+    BOOST_FOREACH(set<CTxDestination> grouping, pwallet->GetAddressGroupings())\n     {\n         UniValue jsonGrouping(UniValue::VARR);\n         BOOST_FOREACH(CTxDestination address, grouping)\n@@ -474,8 +495,8 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n-                if (pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwalletMain->mapAddressBook.end())\n-                    addressInfo.push_back(pwalletMain->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n+                if (pwallet->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwallet->mapAddressBook.end())\n+                    addressInfo.push_back(pwallet->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n             }\n             jsonGrouping.push_back(addressInfo);\n         }\n@@ -486,14 +507,16 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n UniValue signmessage(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessage \\\"address\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n-            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n@@ -510,9 +533,9 @@ UniValue signmessage(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"signmessage\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", \\\"my message\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     string strAddress = request.params[0].get_str();\n     string strMessage = request.params[1].get_str();\n@@ -526,7 +549,7 @@ UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n \n     CKey key;\n-    if (!pwalletMain->GetKey(keyID, key))\n+    if (!pwallet->GetKey(keyID, key))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n \n     CHashWriter ss(SER_GETHASH, 0);\n@@ -542,7 +565,9 @@ UniValue signmessage(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -565,14 +590,14 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getreceivedbyaddress\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\", 6\")\n        );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Bitcoin address\n     CBitcoinAddress address = CBitcoinAddress(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n-    if (!IsMine(*pwalletMain, scriptPubKey))\n+    if (!IsMine(*pwallet, scriptPubKey))\n         return ValueFromAmount(0);\n \n     // Minimum confirmations\n@@ -582,7 +607,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n@@ -600,7 +625,9 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -623,7 +650,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getreceivedbyaccount\", \"\\\"tabby\\\", 6\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -632,11 +659,11 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n     // Get the set of pub keys assigned to account\n     string strAccount = AccountFromValue(request.params[0]);\n-    set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n+    set<CTxDestination> setAddress = pwallet->GetAccountAddresses(strAccount);\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n@@ -645,7 +672,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n         BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwalletMain, address) && setAddress.count(address))\n+            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, address) && setAddress.count(address))\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n         }\n@@ -657,7 +684,9 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n UniValue getbalance(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 3)\n@@ -693,10 +722,10 @@ UniValue getbalance(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getbalance\", \"\\\"*\\\", 6\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.params.size() == 0)\n-        return  ValueFromAmount(pwalletMain->GetBalance());\n+        return  ValueFromAmount(pwallet->GetBalance());\n \n     int nMinDepth = 1;\n     if (request.params.size() > 1)\n@@ -714,7 +743,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n         // TxIns spending from the wallet. This also has fewer restrictions on\n         // which unconfirmed transactions are considered trusted.\n         CAmount nBalance = 0;\n-        for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+        for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n@@ -739,30 +768,34 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     string strAccount = AccountFromValue(request.params[0]);\n \n-    CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, filter);\n+    CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }\n \n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ValueFromAmount(pwalletMain->GetUnconfirmedBalance());\n+    return ValueFromAmount(pwallet->GetUnconfirmedBalance());\n }\n \n \n UniValue movecmd(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n@@ -786,7 +819,7 @@ UniValue movecmd(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"move\", \"\\\"timotei\\\", \\\"akiko\\\", 0.01, 6, \\\"happy birthday!\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     string strFrom = AccountFromValue(request.params[0]);\n     string strTo = AccountFromValue(request.params[1]);\n@@ -800,7 +833,7 @@ UniValue movecmd(const JSONRPCRequest& request)\n     if (request.params.size() > 4)\n         strComment = request.params[4].get_str();\n \n-    if (!pwalletMain->AccountMove(strFrom, strTo, nAmount, strComment))\n+    if (!pwallet->AccountMove(strFrom, strTo, nAmount, strComment))\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n     return true;\n@@ -809,14 +842,16 @@ UniValue movecmd(const JSONRPCRequest& request)\n \n UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n-            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"       (string, required) The name of the account to send funds from. May be the default account using \\\"\\\".\\n\"\n             \"                       Specifying an account does not influence coin selection, but it does associate the newly created\\n\"\n@@ -841,7 +876,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"sendfrom\", \"\\\"tabby\\\", \\\"1M72Sfpbz1BPpXFHz9m3CdqATR44Jvaydd\\\", 0.01, 6, \\\"donation\\\", \\\"seans outpost\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     string strAccount = AccountFromValue(request.params[0]);\n     CBitcoinAddress address(request.params[1].get_str());\n@@ -861,29 +896,31 @@ UniValue sendfrom(const JSONRPCRequest& request)\n     if (request.params.size() > 5 && !request.params[5].isNull() && !request.params[5].get_str().empty())\n         wtx.mapValue[\"to\"]      = request.params[5].get_str();\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     // Check funds\n-    CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n-    SendMoney(pwalletMain, address.Get(), nAmount, false, wtx);\n+    SendMoney(pwallet, address.Get(), nAmount, false, wtx);\n \n     return wtx.GetHash().GetHex();\n }\n \n \n UniValue sendmany(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n-            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"         (string, required) DEPRECATED. The account to send the funds from. Should be \\\"\\\" for the default account\\n\"\n             \"2. \\\"amounts\\\"             (string, required) A json object with addresses and amounts\\n\"\n@@ -915,9 +952,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"sendmany\", \"\\\"\\\", \\\"{\\\\\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XZ\\\\\\\":0.01,\\\\\\\"1353tsE8YMTA4EuV7dgUXGjNFf9KpVvKHz\\\\\\\":0.02}\\\", 6, \\\"testing\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n+    if (pwallet->GetBroadcastTransactions() && !g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     string strAccount = AccountFromValue(request.params[0]);\n@@ -967,23 +1004,23 @@ UniValue sendmany(const JSONRPCRequest& request)\n         vecSend.push_back(recipient);\n     }\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n+    EnsureWalletIsUnlocked(pwallet);\n \n     // Check funds\n-    CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n+    CAmount nBalance = pwallet->GetAccountBalance(strAccount, nMinDepth, ISMINE_SPENDABLE);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n-    CReserveKey keyChange(pwalletMain);\n+    CReserveKey keyChange(pwallet);\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n     string strFailReason;\n-    bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n         strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n         throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n     }\n@@ -996,7 +1033,9 @@ extern CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniVa\n \n UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n@@ -1027,18 +1066,18 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n         throw runtime_error(msg);\n     }\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     string strAccount;\n     if (request.params.size() > 2)\n         strAccount = AccountFromValue(request.params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(pwalletMain, request.params);\n+    CScript inner = _createmultisig_redeemScript(pwallet, request.params);\n     CScriptID innerID(inner);\n-    pwalletMain->AddCScript(inner);\n+    pwallet->AddCScript(inner);\n \n-    pwalletMain->SetAddressBook(innerID, strAccount, \"send\");\n+    pwallet->SetAddressBook(innerID, strAccount, \"send\");\n     return CBitcoinAddress(innerID).ToString();\n }\n \n@@ -1092,7 +1131,9 @@ class Witnessifier : public boost::static_visitor<bool>\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n@@ -1122,14 +1163,14 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n-    Witnessifier w(pwalletMain);\n+    Witnessifier w(pwallet);\n     CTxDestination dest = address.Get();\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n-    pwalletMain->SetAddressBook(w.result, \"\", \"receive\");\n+    pwallet->SetAddressBook(w.result, \"\", \"receive\");\n \n     return CBitcoinAddress(w.result).ToString();\n }\n@@ -1270,7 +1311,9 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n \n UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 3)\n@@ -1305,14 +1348,16 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listreceivedbyaddress\", \"6, true, true\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ListReceived(pwalletMain, request.params, false);\n+    return ListReceived(pwallet, request.params, false);\n }\n \n UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 3)\n@@ -1342,9 +1387,9 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listreceivedbyaccount\", \"6, true, true\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    return ListReceived(pwalletMain, request.params, true);\n+    return ListReceived(pwallet, request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1448,7 +1493,9 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Un\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 4)\n@@ -1511,7 +1558,7 @@ UniValue listtransactions(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listtransactions\", \"\\\"*\\\", 20, 100\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     string strAccount = \"*\";\n     if (request.params.size() > 0)\n@@ -1534,14 +1581,14 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n     UniValue ret(UniValue::VARR);\n \n-    const CWallet::TxItems & txOrdered = pwalletMain->wtxOrdered;\n+    const CWallet::TxItems & txOrdered = pwallet->wtxOrdered;\n \n     // iterate backwards until we have nCount items to return:\n     for (CWallet::TxItems::const_reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         if (pwtx != 0)\n-            ListTransactions(pwalletMain, *pwtx, strAccount, 0, true, ret, filter);\n+            ListTransactions(pwallet, *pwtx, strAccount, 0, true, ret, filter);\n         CAccountingEntry *const pacentry = (*it).second.second;\n         if (pacentry != 0)\n             AcentryToJSON(*pacentry, strAccount, ret);\n@@ -1576,7 +1623,9 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 2)\n@@ -1602,7 +1651,7 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listaccounts\", \"6\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     int nMinDepth = 1;\n     if (request.params.size() > 0)\n@@ -1613,12 +1662,12 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, CAmount> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n-        if (IsMine(*pwalletMain, entry.first) & includeWatchonly) // This address belongs to me\n+    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwallet->mapAddressBook) {\n+        if (IsMine(*pwallet, entry.first) & includeWatchonly) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n     }\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n         CAmount nFee;\n@@ -1635,14 +1684,14 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         if (nDepth >= nMinDepth)\n         {\n             BOOST_FOREACH(const COutputEntry& r, listReceived)\n-                if (pwalletMain->mapAddressBook.count(r.destination))\n-                    mapAccountBalances[pwalletMain->mapAddressBook[r.destination].name] += r.amount;\n+                if (pwallet->mapAddressBook.count(r.destination))\n+                    mapAccountBalances[pwallet->mapAddressBook[r.destination].name] += r.amount;\n                 else\n                     mapAccountBalances[\"\"] += r.amount;\n         }\n     }\n \n-    const list<CAccountingEntry> & acentries = pwalletMain->laccentries;\n+    const list<CAccountingEntry> & acentries = pwallet->laccentries;\n     BOOST_FOREACH(const CAccountingEntry& entry, acentries)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n@@ -1655,7 +1704,9 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp)\n@@ -1699,7 +1750,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listsinceblock\", \"\\\"000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad\\\", 6\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     const CBlockIndex *pindex = NULL;\n     int target_confirms = 1;\n@@ -1741,12 +1792,12 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     UniValue transactions(UniValue::VARR);\n \n-    for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); it++)\n+    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); it++)\n     {\n         CWalletTx tx = (*it).second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n-            ListTransactions(pwalletMain, tx, \"*\", 0, true, transactions, filter);\n+            ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n     }\n \n     CBlockIndex *pblockLast = chainActive[chainActive.Height() + 1 - target_confirms];\n@@ -1761,7 +1812,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -1809,7 +1862,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"gettransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n@@ -1820,9 +1873,9 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     UniValue entry(UniValue::VOBJ);\n-    if (!pwalletMain->mapWallet.count(hash))\n+    if (!pwallet->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+    const CWalletTx& wtx = pwallet->mapWallet[hash];\n \n     CAmount nCredit = wtx.GetCredit(filter);\n     CAmount nDebit = wtx.GetDebit(filter);\n@@ -1836,7 +1889,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     WalletTxToJSON(wtx, entry);\n \n     UniValue details(UniValue::VARR);\n-    ListTransactions(pwalletMain, wtx, \"*\", 0, false, details, filter);\n+    ListTransactions(pwallet, wtx, \"*\", 0, false, details, filter);\n     entry.push_back(Pair(\"details\", details));\n \n     string strHex = EncodeHexTx(static_cast<CTransaction>(wtx), RPCSerializationFlags());\n@@ -1847,7 +1900,9 @@ UniValue gettransaction(const JSONRPCRequest& request)\n \n UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -1866,14 +1921,14 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n \n-    if (!pwalletMain->mapWallet.count(hash))\n+    if (!pwallet->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    if (!pwalletMain->AbandonTransaction(hash))\n+    if (!pwallet->AbandonTransaction(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not eligible for abandonment\");\n \n     return NullUniValue;\n@@ -1882,7 +1937,9 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n \n UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 1)\n@@ -1896,10 +1953,10 @@ UniValue backupwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     string strDest = request.params[0].get_str();\n-    if (!pwalletMain->BackupWallet(strDest))\n+    if (!pwallet->BackupWallet(strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n     return NullUniValue;\n@@ -1908,22 +1965,24 @@ UniValue backupwallet(const JSONRPCRequest& request)\n \n UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"keypoolrefill ( newsize )\\n\"\n             \"\\nFills the keypool.\"\n-            + HelpRequiringPassphrase(pwalletMain) + \"\\n\"\n+            + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments\\n\"\n             \"1. newsize     (numeric, optional, default=100) The new keypool size\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"keypoolrefill\", \"\")\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n@@ -1933,10 +1992,10 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n         kpSize = (unsigned int)request.params[0].get_int();\n     }\n \n-    EnsureWalletIsUnlocked(pwalletMain);\n-    pwalletMain->TopUpKeyPool(kpSize);\n+    EnsureWalletIsUnlocked(pwallet);\n+    pwallet->TopUpKeyPool(kpSize);\n \n-    if (pwalletMain->GetKeyPoolSize() < kpSize)\n+    if (pwallet->GetKeyPoolSize() < kpSize)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n \n     return NullUniValue;\n@@ -1952,10 +2011,12 @@ static void LockWallet(CWallet* pWallet)\n \n UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n@@ -1975,11 +2036,11 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pwallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n     // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n@@ -1991,31 +2052,33 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     if (strWalletPass.length() > 0)\n     {\n-        if (!pwalletMain->Unlock(strWalletPass))\n+        if (!pwallet->Unlock(strWalletPass))\n             throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n     }\n     else\n         throw runtime_error(\n             \"walletpassphrase <passphrase> <timeout>\\n\"\n             \"Stores the wallet decryption key in memory for <timeout> seconds.\");\n \n-    pwalletMain->TopUpKeyPool();\n+    pwallet->TopUpKeyPool();\n \n     int64_t nSleepTime = request.params[1].get_int64();\n     LOCK(cs_nWalletUnlockTime);\n     nWalletUnlockTime = GetTime() + nSleepTime;\n-    RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);\n+    RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwallet), nSleepTime);\n \n     return NullUniValue;\n }\n \n \n UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n@@ -2027,11 +2090,11 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pwallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n@@ -2049,7 +2112,7 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n-    if (!pwalletMain->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n+    if (!pwallet->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n         throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n \n     return NullUniValue;\n@@ -2058,10 +2121,12 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n UniValue walletlock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 0))\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 0))\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n@@ -2078,16 +2143,16 @@ UniValue walletlock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (!pwalletMain->IsCrypted())\n+    if (!pwallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n \n     {\n         LOCK(cs_nWalletUnlockTime);\n-        pwalletMain->Lock();\n+        pwallet->Lock();\n         nWalletUnlockTime = 0;\n     }\n \n@@ -2097,10 +2162,12 @@ UniValue walletlock(const JSONRPCRequest& request)\n \n UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n-    if (!pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 1))\n+    if (!pwallet->IsCrypted() && (request.fHelp || request.params.size() != 1))\n         throw runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n@@ -2124,11 +2191,11 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (pwalletMain->IsCrypted())\n+    if (pwallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n@@ -2142,7 +2209,7 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n \n-    if (!pwalletMain->EncryptWallet(strWalletPass))\n+    if (!pwallet->EncryptWallet(strWalletPass))\n         throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n \n     // BDB seems to have a bad habit of writing old data into\n@@ -2154,7 +2221,9 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n \n UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -2194,7 +2263,7 @@ UniValue lockunspent(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"lockunspent\", \"false, \\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"a08e6907dbbd3d809776dbfc5d82e371b764ed838b5655e72f463568df1aadf0\\\\\\\",\\\\\\\"vout\\\\\\\":1}]\\\"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.params.size() == 1)\n         RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL));\n@@ -2205,7 +2274,7 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n     if (request.params.size() == 1) {\n         if (fUnlock)\n-            pwalletMain->UnlockAllCoins();\n+            pwallet->UnlockAllCoins();\n         return true;\n     }\n \n@@ -2233,17 +2302,19 @@ UniValue lockunspent(const JSONRPCRequest& request)\n         COutPoint outpt(uint256S(txid), nOutput);\n \n         if (fUnlock)\n-            pwalletMain->UnlockCoin(outpt);\n+            pwallet->UnlockCoin(outpt);\n         else\n-            pwalletMain->LockCoin(outpt);\n+            pwallet->LockCoin(outpt);\n     }\n \n     return true;\n }\n \n UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 0)\n@@ -2272,10 +2343,10 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"listlockunspent\", \"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     vector<COutPoint> vOutpts;\n-    pwalletMain->ListLockedCoins(vOutpts);\n+    pwallet->ListLockedCoins(vOutpts);\n \n     UniValue ret(UniValue::VARR);\n \n@@ -2292,7 +2363,9 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n \n UniValue settxfee(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n@@ -2308,7 +2381,7 @@ UniValue settxfee(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     // Amount\n     CAmount nAmount = AmountFromValue(request.params[0]);\n@@ -2319,7 +2392,9 @@ UniValue settxfee(const JSONRPCRequest& request)\n \n UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 0)\n@@ -2344,28 +2419,30 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getwalletinfo\", \"\")\n         );\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.push_back(Pair(\"walletversion\", pwalletMain->GetVersion()));\n-    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n-    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwalletMain->GetUnconfirmedBalance())));\n-    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwalletMain->GetImmatureBalance())));\n-    obj.push_back(Pair(\"txcount\",       (int)pwalletMain->mapWallet.size()));\n-    obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));\n-    obj.push_back(Pair(\"keypoolsize\",   (int)pwalletMain->GetKeyPoolSize()));\n-    if (pwalletMain->IsCrypted())\n+    obj.push_back(Pair(\"walletversion\", pwallet->GetVersion()));\n+    obj.push_back(Pair(\"balance\",       ValueFromAmount(pwallet->GetBalance())));\n+    obj.push_back(Pair(\"unconfirmed_balance\", ValueFromAmount(pwallet->GetUnconfirmedBalance())));\n+    obj.push_back(Pair(\"immature_balance\",    ValueFromAmount(pwallet->GetImmatureBalance())));\n+    obj.push_back(Pair(\"txcount\",       (int)pwallet->mapWallet.size()));\n+    obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n+    obj.push_back(Pair(\"keypoolsize\",   (int)pwallet->GetKeyPoolSize()));\n+    if (pwallet->IsCrypted())\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n-    CKeyID masterKeyID = pwalletMain->GetHDChain().masterKeyID;\n+    CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n          obj.push_back(Pair(\"hdmasterkeyid\", masterKeyID.GetHex()));\n     return obj;\n }\n \n UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() != 0)\n@@ -2380,9 +2457,9 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n     if (!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n \n-    std::vector<uint256> txids = pwalletMain->ResendWalletTransactionsBefore(GetTime(), g_connman.get());\n+    std::vector<uint256> txids = pwallet->ResendWalletTransactionsBefore(GetTime(), g_connman.get());\n     UniValue result(UniValue::VARR);\n     BOOST_FOREACH(const uint256& txid, txids)\n     {\n@@ -2393,7 +2470,9 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n UniValue listunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() > 4)\n@@ -2472,9 +2551,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n     UniValue results(UniValue::VARR);\n     vector<COutput> vecOutputs;\n-    assert(pwalletMain != NULL);\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-    pwalletMain->AvailableCoins(vecOutputs, !include_unsafe, NULL, true);\n+    assert(pwallet != NULL);\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    pwallet->AvailableCoins(vecOutputs, !include_unsafe, NULL, true);\n     BOOST_FOREACH(const COutput& out, vecOutputs) {\n         if (out.nDepth < nMinDepth || out.nDepth > nMaxDepth)\n             continue;\n@@ -2493,13 +2572,13 @@ UniValue listunspent(const JSONRPCRequest& request)\n         if (fValidAddress) {\n             entry.push_back(Pair(\"address\", CBitcoinAddress(address).ToString()));\n \n-            if (pwalletMain->mapAddressBook.count(address))\n-                entry.push_back(Pair(\"account\", pwalletMain->mapAddressBook[address].name));\n+            if (pwallet->mapAddressBook.count(address))\n+                entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n-                if (pwalletMain->GetCScript(hash, redeemScript))\n+                if (pwallet->GetCScript(hash, redeemScript))\n                     entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n             }\n         }\n@@ -2517,7 +2596,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(pwalletMain, request.fHelp))\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n@@ -2659,7 +2740,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     string strFailReason;\n \n-    if(!pwalletMain->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress))\n+    if(!pwallet->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress))\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n \n     UniValue result(UniValue::VOBJ);\n@@ -2699,9 +2780,10 @@ int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, CWallet &wallet)\n \n UniValue bumpfee(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(request.fHelp)) {\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n-    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n@@ -2751,14 +2833,14 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     hash.SetHex(request.params[0].get_str());\n \n     // retrieve the original tx from the wallet\n-    LOCK2(cs_main, pwalletMain->cs_wallet);\n-    EnsureWalletIsUnlocked();\n-    if (!pwalletMain->mapWallet.count(hash)) {\n+    LOCK2(cs_main, pwallet->cs_wallet);\n+    EnsureWalletIsUnlocked(pwallet);\n+    if (!pwallet->mapWallet.count(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     }\n-    CWalletTx& wtx = pwalletMain->mapWallet[hash];\n+    CWalletTx& wtx = pwallet->mapWallet[hash];\n \n-    if (pwalletMain->HasWalletSpend(hash)) {\n+    if (pwallet->HasWalletSpend(hash)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has descendants in the wallet\");\n     }\n \n@@ -2784,15 +2866,15 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n-    if (!pwalletMain->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n+    if (!pwallet->IsAllFromMe(wtx, ISMINE_SPENDABLE)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction contains inputs that don't belong to this wallet\");\n     }\n \n     // figure out which output was change\n     // if there was no change output or multiple change outputs, fail\n     int nOutput = -1;\n     for (size_t i = 0; i < wtx.tx->vout.size(); ++i) {\n-        if (pwalletMain->IsChange(wtx.tx->vout[i])) {\n+        if (pwallet->IsChange(wtx.tx->vout[i])) {\n             if (nOutput != -1) {\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Transaction has multiple change outputs\");\n             }\n@@ -2935,29 +3017,29 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CTransaction txNewConst(tx);\n     int nIn = 0;\n     for (auto& input : tx.vin) {\n-        std::map<uint256, CWalletTx>::const_iterator mi = pwalletMain->mapWallet.find(input.prevout.hash);\n-        assert(mi != pwalletMain->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n+        std::map<uint256, CWalletTx>::const_iterator mi = pwallet->mapWallet.find(input.prevout.hash);\n+        assert(mi != pwallet->mapWallet.end() && input.prevout.n < mi->second.tx->vout.size());\n         const CScript& scriptPubKey = mi->second.tx->vout[input.prevout.n].scriptPubKey;\n         const CAmount& amount = mi->second.tx->vout[input.prevout.n].nValue;\n         SignatureData sigdata;\n-        if (!ProduceSignature(TransactionSignatureCreator(pwalletMain, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n+        if (!ProduceSignature(TransactionSignatureCreator(pwallet, &txNewConst, nIn, amount, SIGHASH_ALL), scriptPubKey, sigdata)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Can't sign transaction.\");\n         }\n         UpdateTransaction(tx, nIn, sigdata);\n         nIn++;\n     }\n \n     // commit/broadcast the tx\n-    CReserveKey reservekey(pwalletMain);\n-    CWalletTx wtxBumped(pwalletMain, MakeTransactionRef(std::move(tx)));\n+    CReserveKey reservekey(pwallet);\n+    CWalletTx wtxBumped(pwallet, MakeTransactionRef(std::move(tx)));\n     wtxBumped.mapValue = wtx.mapValue;\n     wtxBumped.mapValue[\"replaces_txid\"] = hash.ToString();\n     wtxBumped.vOrderForm = wtx.vOrderForm;\n     wtxBumped.strFromAccount = wtx.strFromAccount;\n     wtxBumped.fTimeReceivedIsTxTime = true;\n     wtxBumped.fFromMe = true;\n     CValidationState state;\n-    if (!pwalletMain->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n+    if (!pwallet->CommitTransaction(wtxBumped, reservekey, g_connman.get(), state)) {\n         // NOTE: CommitTransaction never returns false, so this should never happen.\n         throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason()));\n     }\n@@ -2970,7 +3052,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     }\n \n     // mark the original tx as bumped\n-    if (!pwalletMain->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n+    if (!pwallet->MarkReplaced(wtx.GetHash(), wtxBumped.GetHash())) {\n         // TODO: see if JSON-RPC has a standard way of returning a response\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction"
      }
    ]
  },
  {
    "sha": "2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTUxOGUzMTNiNWQ1MzIwYzE2YmRiMzNlYmQwMDhiNmQzMGE5MGYy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-09-09T07:48:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:17Z"
      },
      "message": "Move nWalletUnlockTime to CWallet::nRelockTime, and name timed task unique per CWallet",
      "tree": {
        "sha": "12fc602f93dea67cb3fabef7c9bbf2908e4887da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12fc602f93dea67cb3fabef7c9bbf2908e4887da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d77ad6d41666b4c41abe1ba3b63300df1903643e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d77ad6d41666b4c41abe1ba3b63300df1903643e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d77ad6d41666b4c41abe1ba3b63300df1903643e"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 11,
      "deletions": 16
    },
    "files": [
      {
        "sha": "746189a2ae5916d1d69d933daed0750a4d1c406f",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
        "patch": "@@ -102,7 +102,7 @@ UniValue getinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"keypoolsize\",   (int)pwallet->GetKeyPoolSize()));\n     }\n     if (pwallet && pwallet->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n+        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n #endif\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));"
      },
      {
        "sha": "72ffc7652074efed6ab33f5304d5998e8d202ab9",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
        "patch": "@@ -190,7 +190,6 @@ extern uint256 ParseHashO(const UniValue& o, std::string strKey);\n extern std::vector<unsigned char> ParseHexV(const UniValue& v, std::string strName);\n extern std::vector<unsigned char> ParseHexO(const UniValue& o, std::string strKey);\n \n-extern int64_t nWalletUnlockTime;\n extern CAmount AmountFromValue(const UniValue& value);\n extern UniValue ValueFromAmount(const CAmount& amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);"
      },
      {
        "sha": "b36a99013e3ad92398987711f0b1dd1836e1857d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 14,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
        "patch": "@@ -29,9 +29,6 @@\n \n using namespace std;\n \n-int64_t nWalletUnlockTime;\n-static CCriticalSection cs_nWalletUnlockTime;\n-\n CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n     return pwalletMain;\n@@ -2004,8 +2001,8 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n \n static void LockWallet(CWallet* pWallet)\n {\n-    LOCK(cs_nWalletUnlockTime);\n-    nWalletUnlockTime = 0;\n+    LOCK(pWallet->cs_wallet);\n+    pWallet->nRelockTime = 0;\n     pWallet->Lock();\n }\n \n@@ -2063,9 +2060,8 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n     pwallet->TopUpKeyPool();\n \n     int64_t nSleepTime = request.params[1].get_int64();\n-    LOCK(cs_nWalletUnlockTime);\n-    nWalletUnlockTime = GetTime() + nSleepTime;\n-    RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwallet), nSleepTime);\n+    pwallet->nRelockTime = GetTime() + nSleepTime;\n+    RPCRunLater(strprintf(\"lockwallet_%u\", uintptr_t(pwallet)), boost::bind(LockWallet, pwallet), nSleepTime);\n \n     return NullUniValue;\n }\n@@ -2150,11 +2146,8 @@ UniValue walletlock(const JSONRPCRequest& request)\n     if (!pwallet->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n \n-    {\n-        LOCK(cs_nWalletUnlockTime);\n-        pwallet->Lock();\n-        nWalletUnlockTime = 0;\n-    }\n+    pwallet->Lock();\n+    pwallet->nRelockTime = 0;\n \n     return NullUniValue;\n }\n@@ -2430,7 +2423,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   (int)pwallet->GetKeyPoolSize()));\n     if (pwallet->IsCrypted())\n-        obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n+        obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())"
      },
      {
        "sha": "176063c27f60a90a9516feb35b4b514ada1188ba",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e518e313b5d5320c16bdb33ebd008b6d30a90f2/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
        "patch": "@@ -768,6 +768,9 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n+    //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n+    int64_t nRelockTime;\n+\n     bool Unlock(const SecureString& strWalletPassphrase);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);"
      }
    ]
  },
  {
    "sha": "bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjhhMDRhMTY1ZTFjMTlkZmZjZTcwYTdlNWMzZmIxMGIwMDM1ZDk2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-25T08:04:23Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:18Z"
      },
      "message": "Reformat touched lines with C++11",
      "tree": {
        "sha": "05a869abf04d768c9f31c6bbe98345613166ab28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05a869abf04d768c9f31c6bbe98345613166ab28"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e518e313b5d5320c16bdb33ebd008b6d30a90f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2e518e313b5d5320c16bdb33ebd008b6d30a90f2"
      }
    ],
    "stats": {
      "total": 346,
      "additions": 214,
      "deletions": 132
    },
    "files": [
      {
        "sha": "fe46f61d81e3e5db3cc243fffbeb0a5fac84d2c8",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
        "patch": "@@ -101,8 +101,9 @@ UniValue getinfo(const JSONRPCRequest& request)\n         obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n         obj.push_back(Pair(\"keypoolsize\",   (int)pwallet->GetKeyPoolSize()));\n     }\n-    if (pwallet && pwallet->IsCrypted())\n+    if (pwallet && pwallet->IsCrypted()) {\n         obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n+    }\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n #endif\n     obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n@@ -210,8 +211,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         ret.push_back(Pair(\"iswatchonly\", (mine & ISMINE_WATCH_ONLY) ? true: false));\n         UniValue detail = boost::apply_visitor(DescribeAddressVisitor(pwallet), dest);\n         ret.pushKVs(detail);\n-        if (pwallet && pwallet->mapAddressBook.count(dest))\n+        if (pwallet && pwallet->mapAddressBook.count(dest)) {\n             ret.push_back(Pair(\"account\", pwallet->mapAddressBook[dest].name));\n+        }\n         CKeyID keyID;\n         if (pwallet) {\n             const auto& meta = pwallet->mapKeyMetadata;\n@@ -257,16 +259,16 @@ CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& pa\n #ifdef ENABLE_WALLET\n         // Case 1: Bitcoin address and we have full public key:\n         CBitcoinAddress address(ks);\n-        if (pwallet && address.IsValid())\n-        {\n+        if (pwallet && address.IsValid()) {\n             CKeyID keyID;\n             if (!address.GetKeyID(keyID))\n                 throw runtime_error(\n                     strprintf(\"%s does not refer to a key\",ks));\n             CPubKey vchPubKey;\n-            if (!pwallet->GetPubKey(keyID, vchPubKey))\n+            if (!pwallet->GetPubKey(keyID, vchPubKey)) {\n                 throw runtime_error(\n                     strprintf(\"no full public key for address %s\",ks));\n+            }\n             if (!vchPubKey.IsFullyValid())\n                 throw runtime_error(\" Invalid public key: \"+ks);\n             pubkeys[i] = vchPubKey;"
      },
      {
        "sha": "ce7afcbe54799ea52e1940a6e596aceff28f8b30",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
        "patch": "@@ -721,8 +721,9 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n         }\n     }\n #ifdef ENABLE_WALLET\n-    else if (pwallet)\n+    else if (pwallet) {\n         EnsureWalletIsUnlocked(pwallet);\n+    }\n #endif\n \n     // Add previous txouts given in the RPC call:"
      },
      {
        "sha": "8f739324523de037a710fce7c38bf42999c5ef82",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 17,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
        "patch": "@@ -76,8 +76,9 @@ UniValue importprivkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n     \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw runtime_error(\n@@ -133,13 +134,15 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         pwallet->SetAddressBook(vchAddress, strLabel, \"receive\");\n \n         // Don't throw error in case a key is already there\n-        if (pwallet->HaveKey(vchAddress))\n+        if (pwallet->HaveKey(vchAddress)) {\n             return NullUniValue;\n+        }\n \n         pwallet->mapKeyMetadata[vchAddress].nCreateTime = 1;\n \n-        if (!pwallet->AddKeyPubKey(key, pubkey))\n+        if (!pwallet->AddKeyPubKey(key, pubkey)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+        }\n \n         // whenever a key is imported, we need to scan the whole chain\n         pwallet->UpdateTimeFirstKey(1);\n@@ -155,17 +158,20 @@ UniValue importprivkey(const JSONRPCRequest& request)\n void ImportAddress(CWallet*, const CBitcoinAddress& address, const string& strLabel);\n void ImportScript(CWallet * const pwallet, const CScript& script, const string& strLabel, bool isRedeemScript)\n {\n-    if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE)\n+    if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+    }\n \n     pwallet->MarkDirty();\n \n-    if (!pwallet->HaveWatchOnly(script) && !pwallet->AddWatchOnly(script, 0 /* nCreateTime */))\n+    if (!pwallet->HaveWatchOnly(script) && !pwallet->AddWatchOnly(script, 0 /* nCreateTime */)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+    }\n \n     if (isRedeemScript) {\n-        if (!pwallet->HaveCScript(script) && !pwallet->AddCScript(script))\n+        if (!pwallet->HaveCScript(script) && !pwallet->AddCScript(script)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+        }\n         ImportAddress(pwallet, CBitcoinAddress(CScriptID(script)), strLabel);\n     } else {\n         CTxDestination destination;\n@@ -188,8 +194,9 @@ UniValue importaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n     \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n@@ -258,8 +265,9 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n@@ -319,8 +327,9 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -342,7 +351,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n     vHash.push_back(hash);\n     vector<uint256> vHashOut;\n \n-    if(pwallet->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n+    if (pwallet->ZapSelectTx(vHash, vHashOut) != DB_LOAD_OK) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"Could not properly delete the transaction.\");\n     }\n \n@@ -357,8 +366,9 @@ UniValue importpubkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n@@ -417,8 +427,9 @@ UniValue importwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n     \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -525,8 +536,9 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n     \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -555,8 +567,9 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n     if (!address.GetKeyID(keyID))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to a key\");\n     CKey vchSecret;\n-    if (!pwallet->GetKey(keyID, vchSecret))\n+    if (!pwallet->GetKey(keyID, vchSecret)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n+    }\n     return CBitcoinSecret(vchSecret).ToString();\n }\n \n@@ -565,8 +578,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n     \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -615,8 +629,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     if (!masterKeyID.IsNull())\n     {\n         CKey key;\n-        if (pwallet->GetKey(masterKeyID, key))\n-        {\n+        if (pwallet->GetKey(masterKeyID, key)) {\n             CExtKey masterKey;\n             masterKey.SetMaster(key.begin(), key.size());\n "
      },
      {
        "sha": "f9c16ad4ca2b57f2c17cdf9d0cfaf301797bf8a8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 175,
        "deletions": 109,
        "changes": 284,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
        "patch": "@@ -43,8 +43,7 @@ std::string HelpRequiringPassphrase(CWallet * const pwallet)\n \n bool EnsureWalletIsAvailable(CWallet * const pwallet, bool avoidException)\n {\n-    if (!pwallet)\n-    {\n+    if (!pwallet) {\n         if (!avoidException)\n             throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found (disabled)\");\n         else\n@@ -55,8 +54,9 @@ bool EnsureWalletIsAvailable(CWallet * const pwallet, bool avoidException)\n \n void EnsureWalletIsUnlocked(CWallet * const pwallet)\n {\n-    if (pwallet->IsLocked())\n+    if (pwallet->IsLocked()) {\n         throw JSONRPCError(RPC_WALLET_UNLOCK_NEEDED, \"Error: Please enter the wallet passphrase with walletpassphrase first.\");\n+    }\n }\n \n void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n@@ -110,8 +110,9 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n@@ -135,13 +136,15 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n     if (request.params.size() > 0)\n         strAccount = AccountFromValue(request.params[0]);\n \n-    if (!pwallet->IsLocked())\n+    if (!pwallet->IsLocked()) {\n         pwallet->TopUpKeyPool();\n+    }\n \n     // Generate a new key that is added to wallet\n     CPubKey newKey;\n-    if (!pwallet->GetKeyFromPool(newKey))\n+    if (!pwallet->GetKeyFromPool(newKey)) {\n         throw JSONRPCError(RPC_WALLET_KEYPOOL_RAN_OUT, \"Error: Keypool ran out, please call keypoolrefill first\");\n+    }\n     CKeyID keyID = newKey.GetID();\n \n     pwallet->SetAddressBook(keyID, strAccount, \"receive\");\n@@ -164,8 +167,9 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -198,8 +202,9 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n@@ -215,8 +220,9 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (!pwallet->IsLocked())\n+    if (!pwallet->IsLocked()) {\n         pwallet->TopUpKeyPool();\n+    }\n \n     CReserveKey reservekey(pwallet);\n     CPubKey vchPubKey;\n@@ -235,8 +241,9 @@ UniValue setaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n@@ -261,14 +268,13 @@ UniValue setaccount(const JSONRPCRequest& request)\n         strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n-    if (IsMine(*pwallet, address.Get()))\n-    {\n+    if (IsMine(*pwallet, address.Get())) {\n         // Detect when changing the account of an address that is the 'unused current key' of another account:\n-        if (pwallet->mapAddressBook.count(address.Get()))\n-        {\n+        if (pwallet->mapAddressBook.count(address.Get())) {\n             string strOldAccount = pwallet->mapAddressBook[address.Get()].name;\n-            if (address == GetAccountAddress(pwallet, strOldAccount))\n+            if (address == GetAccountAddress(pwallet, strOldAccount)) {\n                 GetAccountAddress(pwallet, strOldAccount, true);\n+            }\n         }\n         pwallet->SetAddressBook(address.Get(), strAccount, \"receive\");\n     }\n@@ -283,8 +289,9 @@ UniValue getaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -307,8 +314,9 @@ UniValue getaccount(const JSONRPCRequest& request)\n \n     string strAccount;\n     map<CTxDestination, CAddressBookData>::iterator mi = pwallet->mapAddressBook.find(address.Get());\n-    if (mi != pwallet->mapAddressBook.end() && !(*mi).second.name.empty())\n+    if (mi != pwallet->mapAddressBook.end() && !(*mi).second.name.empty()) {\n         strAccount = (*mi).second.name;\n+    }\n     return strAccount;\n }\n \n@@ -317,8 +325,9 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -342,8 +351,7 @@ UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwallet->mapAddressBook)\n-    {\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n         const CBitcoinAddress& address = item.first;\n         const string& strName = item.second.name;\n         if (strName == strAccount)\n@@ -363,8 +371,9 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n     if (nValue > curBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Insufficient funds\");\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman)\n+    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n \n     // Parse Bitcoin address\n     CScript scriptPubKey = GetScriptForDestination(address);\n@@ -393,8 +402,9 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n@@ -453,8 +463,9 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp)\n         throw runtime_error(\n@@ -483,17 +494,17 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n     UniValue jsonGroupings(UniValue::VARR);\n     map<CTxDestination, CAmount> balances = pwallet->GetAddressBalances();\n-    BOOST_FOREACH(set<CTxDestination> grouping, pwallet->GetAddressGroupings())\n-    {\n+    for (set<CTxDestination> grouping : pwallet->GetAddressGroupings()) {\n         UniValue jsonGrouping(UniValue::VARR);\n         BOOST_FOREACH(CTxDestination address, grouping)\n         {\n             UniValue addressInfo(UniValue::VARR);\n             addressInfo.push_back(CBitcoinAddress(address).ToString());\n             addressInfo.push_back(ValueFromAmount(balances[address]));\n             {\n-                if (pwallet->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwallet->mapAddressBook.end())\n+                if (pwallet->mapAddressBook.find(CBitcoinAddress(address).Get()) != pwallet->mapAddressBook.end()) {\n                     addressInfo.push_back(pwallet->mapAddressBook.find(CBitcoinAddress(address).Get())->second.name);\n+                }\n             }\n             jsonGrouping.push_back(addressInfo);\n         }\n@@ -506,8 +517,9 @@ UniValue signmessage(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n@@ -546,8 +558,9 @@ UniValue signmessage(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Address does not refer to key\");\n \n     CKey key;\n-    if (!pwallet->GetKey(keyID, key))\n+    if (!pwallet->GetKey(keyID, key)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key not available\");\n+    }\n \n     CHashWriter ss(SER_GETHASH, 0);\n     ss << strMessageMagic;\n@@ -564,8 +577,9 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n@@ -594,8 +608,9 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n-    if (!IsMine(*pwallet, scriptPubKey))\n+    if (!IsMine(*pwallet, scriptPubKey)) {\n         return ValueFromAmount(0);\n+    }\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -604,9 +619,8 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-    {\n-        const CWalletTx& wtx = (*it).second;\n+    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+        const CWalletTx& wtx = pairWtx.second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n@@ -624,8 +638,9 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n@@ -660,18 +675,18 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n     // Tally\n     CAmount nAmount = 0;\n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-    {\n-        const CWalletTx& wtx = (*it).second;\n+    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+        const CWalletTx& wtx = pairWtx.second;\n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n \n         BOOST_FOREACH(const CTxOut& txout, wtx.tx->vout)\n         {\n             CTxDestination address;\n-            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, address) && setAddress.count(address))\n+            if (ExtractDestination(txout.scriptPubKey, address) && IsMine(*pwallet, address) && setAddress.count(address)) {\n                 if (wtx.GetDepthInMainChain() >= nMinDepth)\n                     nAmount += txout.nValue;\n+            }\n         }\n     }\n \n@@ -683,8 +698,9 @@ UniValue getbalance(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n@@ -740,9 +756,8 @@ UniValue getbalance(const JSONRPCRequest& request)\n         // TxIns spending from the wallet. This also has fewer restrictions on\n         // which unconfirmed transactions are considered trusted.\n         CAmount nBalance = 0;\n-        for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-        {\n-            const CWalletTx& wtx = (*it).second;\n+        for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+            const CWalletTx& wtx = pairWtx.second;\n             if (!CheckFinalTx(wtx) || wtx.GetBlocksToMaturity() > 0 || wtx.GetDepthInMainChain() < 0)\n                 continue;\n \n@@ -774,8 +789,9 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n@@ -792,8 +808,9 @@ UniValue movecmd(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n         throw runtime_error(\n@@ -830,8 +847,9 @@ UniValue movecmd(const JSONRPCRequest& request)\n     if (request.params.size() > 4)\n         strComment = request.params[4].get_str();\n \n-    if (!pwallet->AccountMove(strFrom, strTo, nAmount, strComment))\n+    if (!pwallet->AccountMove(strFrom, strTo, nAmount, strComment)) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n+    }\n \n     return true;\n }\n@@ -841,8 +859,9 @@ UniValue sendfrom(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n@@ -910,8 +929,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n@@ -951,8 +971,9 @@ UniValue sendmany(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (pwallet->GetBroadcastTransactions() && !g_connman)\n+    if (pwallet->GetBroadcastTransactions() && !g_connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n+    }\n \n     string strAccount = AccountFromValue(request.params[0]);\n     UniValue sendTo = request.params[1].get_obj();\n@@ -1032,8 +1053,9 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n@@ -1130,8 +1152,9 @@ UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n     {\n@@ -1205,9 +1228,8 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n \n     // Tally\n     map<CBitcoinAddress, tallyitem> mapTally;\n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-    {\n-        const CWalletTx& wtx = (*it).second;\n+    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+        const CWalletTx& wtx = pairWtx.second;\n \n         if (wtx.IsCoinBase() || !CheckFinalTx(*wtx.tx))\n             continue;\n@@ -1238,8 +1260,7 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n     // Reply\n     UniValue ret(UniValue::VARR);\n     map<string, tallyitem> mapAccountTally;\n-    BOOST_FOREACH(const PAIRTYPE(CBitcoinAddress, CAddressBookData)& item, pwallet->mapAddressBook)\n-    {\n+    for (const std::pair<CBitcoinAddress, CAddressBookData>& item : pwallet->mapAddressBook) {\n         const CBitcoinAddress& address = item.first;\n         const string& strAccount = item.second.name;\n         map<CBitcoinAddress, tallyitem>::iterator it = mapTally.find(address);\n@@ -1310,8 +1331,9 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n@@ -1354,8 +1376,9 @@ UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n@@ -1414,14 +1437,16 @@ void ListTransactions(CWallet * const pwallet, const CWalletTx& wtx, const strin\n         BOOST_FOREACH(const COutputEntry& s, listSent)\n         {\n             UniValue entry(UniValue::VOBJ);\n-            if(involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY))\n+            if (involvesWatchonly || (::IsMine(*pwallet, s.destination) & ISMINE_WATCH_ONLY)) {\n                 entry.push_back(Pair(\"involvesWatchonly\", true));\n+            }\n             entry.push_back(Pair(\"account\", strSentAccount));\n             MaybePushAddress(entry, s.destination);\n             entry.push_back(Pair(\"category\", \"send\"));\n             entry.push_back(Pair(\"amount\", ValueFromAmount(-s.amount)));\n-            if (pwallet->mapAddressBook.count(s.destination))\n+            if (pwallet->mapAddressBook.count(s.destination)) {\n                 entry.push_back(Pair(\"label\", pwallet->mapAddressBook[s.destination].name));\n+            }\n             entry.push_back(Pair(\"vout\", s.vout));\n             entry.push_back(Pair(\"fee\", ValueFromAmount(-nFee)));\n             if (fLong)\n@@ -1437,13 +1462,15 @@ void ListTransactions(CWallet * const pwallet, const CWalletTx& wtx, const strin\n         BOOST_FOREACH(const COutputEntry& r, listReceived)\n         {\n             string account;\n-            if (pwallet->mapAddressBook.count(r.destination))\n+            if (pwallet->mapAddressBook.count(r.destination)) {\n                 account = pwallet->mapAddressBook[r.destination].name;\n+            }\n             if (fAllAccounts || (account == strAccount))\n             {\n                 UniValue entry(UniValue::VOBJ);\n-                if(involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY))\n+                if (involvesWatchonly || (::IsMine(*pwallet, r.destination) & ISMINE_WATCH_ONLY)) {\n                     entry.push_back(Pair(\"involvesWatchonly\", true));\n+                }\n                 entry.push_back(Pair(\"account\", account));\n                 MaybePushAddress(entry, r.destination);\n                 if (wtx.IsCoinBase())\n@@ -1460,8 +1487,9 @@ void ListTransactions(CWallet * const pwallet, const CWalletTx& wtx, const strin\n                     entry.push_back(Pair(\"category\", \"receive\"));\n                 }\n                 entry.push_back(Pair(\"amount\", ValueFromAmount(r.amount)));\n-                if (pwallet->mapAddressBook.count(r.destination))\n+                if (pwallet->mapAddressBook.count(r.destination)) {\n                     entry.push_back(Pair(\"label\", account));\n+                }\n                 entry.push_back(Pair(\"vout\", r.vout));\n                 if (fLong)\n                     WalletTxToJSON(wtx, entry);\n@@ -1492,8 +1520,9 @@ UniValue listtransactions(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n@@ -1622,8 +1651,9 @@ UniValue listaccounts(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n@@ -1659,14 +1689,14 @@ UniValue listaccounts(const JSONRPCRequest& request)\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, CAmount> mapAccountBalances;\n-    BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwallet->mapAddressBook) {\n-        if (IsMine(*pwallet, entry.first) & includeWatchonly) // This address belongs to me\n+    for (const std::pair<CTxDestination, CAddressBookData>& entry : pwallet->mapAddressBook) {\n+        if (IsMine(*pwallet, entry.first) & includeWatchonly) {  // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n+        }\n     }\n \n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-    {\n-        const CWalletTx& wtx = (*it).second;\n+    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+        const CWalletTx& wtx = pairWtx.second;\n         CAmount nFee;\n         string strSentAccount;\n         list<COutputEntry> listReceived;\n@@ -1681,8 +1711,9 @@ UniValue listaccounts(const JSONRPCRequest& request)\n         if (nDepth >= nMinDepth)\n         {\n             BOOST_FOREACH(const COutputEntry& r, listReceived)\n-                if (pwallet->mapAddressBook.count(r.destination))\n+                if (pwallet->mapAddressBook.count(r.destination)) {\n                     mapAccountBalances[pwallet->mapAddressBook[r.destination].name] += r.amount;\n+                }\n                 else\n                     mapAccountBalances[\"\"] += r.amount;\n         }\n@@ -1703,8 +1734,9 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp)\n         throw runtime_error(\n@@ -1789,9 +1821,8 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n     UniValue transactions(UniValue::VARR);\n \n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); it++)\n-    {\n-        CWalletTx tx = (*it).second;\n+    for (const std::pair<uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+        CWalletTx tx = pairWtx.second;\n \n         if (depth == -1 || tx.GetDepthInMainChain() < depth)\n             ListTransactions(pwallet, tx, \"*\", 0, true, transactions, filter);\n@@ -1811,8 +1842,9 @@ UniValue gettransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n@@ -1870,8 +1902,9 @@ UniValue gettransaction(const JSONRPCRequest& request)\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     UniValue entry(UniValue::VOBJ);\n-    if (!pwallet->mapWallet.count(hash))\n+    if (!pwallet->mapWallet.count(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n+    }\n     const CWalletTx& wtx = pwallet->mapWallet[hash];\n \n     CAmount nCredit = wtx.GetCredit(filter);\n@@ -1899,8 +1932,9 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -1923,10 +1957,12 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n     uint256 hash;\n     hash.SetHex(request.params[0].get_str());\n \n-    if (!pwallet->mapWallet.count(hash))\n+    if (!pwallet->mapWallet.count(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n-    if (!pwallet->AbandonTransaction(hash))\n+    }\n+    if (!pwallet->AbandonTransaction(hash)) {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not eligible for abandonment\");\n+    }\n \n     return NullUniValue;\n }\n@@ -1936,8 +1972,9 @@ UniValue backupwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n@@ -1953,8 +1990,9 @@ UniValue backupwallet(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     string strDest = request.params[0].get_str();\n-    if (!pwallet->BackupWallet(strDest))\n+    if (!pwallet->BackupWallet(strDest)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n+    }\n \n     return NullUniValue;\n }\n@@ -1964,8 +2002,9 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n@@ -1992,8 +2031,9 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n     EnsureWalletIsUnlocked(pwallet);\n     pwallet->TopUpKeyPool(kpSize);\n \n-    if (pwallet->GetKeyPoolSize() < kpSize)\n+    if (pwallet->GetKeyPoolSize() < kpSize) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error refreshing keypool.\");\n+    }\n \n     return NullUniValue;\n }\n@@ -2010,10 +2050,11 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2))\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n         throw runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n@@ -2032,13 +2073,15 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n             \"\\nAs json rpc call\\n\"\n             + HelpExampleRpc(\"walletpassphrase\", \"\\\"my pass phrase\\\", 60\")\n         );\n+    }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (!pwallet->IsCrypted())\n+    if (!pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n+    }\n \n     // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n     SecureString strWalletPass;\n@@ -2049,8 +2092,9 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     if (strWalletPass.length() > 0)\n     {\n-        if (!pwallet->Unlock(strWalletPass))\n+        if (!pwallet->Unlock(strWalletPass)) {\n             throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+        }\n     }\n     else\n         throw runtime_error(\n@@ -2071,10 +2115,11 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2))\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n         throw runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n@@ -2085,13 +2130,15 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             + HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n         );\n+    }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (!pwallet->IsCrypted())\n+    if (!pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n+    }\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n     // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n@@ -2108,8 +2155,9 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n             \"walletpassphrasechange <oldpassphrase> <newpassphrase>\\n\"\n             \"Changes the wallet passphrase from <oldpassphrase> to <newpassphrase>.\");\n \n-    if (!pwallet->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass))\n+    if (!pwallet->ChangeWalletPassphrase(strOldWalletPass, strNewWalletPass)) {\n         throw JSONRPCError(RPC_WALLET_PASSPHRASE_INCORRECT, \"Error: The wallet passphrase entered was incorrect.\");\n+    }\n \n     return NullUniValue;\n }\n@@ -2119,10 +2167,11 @@ UniValue walletlock(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 0))\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 0)) {\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n@@ -2138,13 +2187,15 @@ UniValue walletlock(const JSONRPCRequest& request)\n             \"\\nAs json rpc call\\n\"\n             + HelpExampleRpc(\"walletlock\", \"\")\n         );\n+    }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (!pwallet->IsCrypted())\n+    if (!pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n+    }\n \n     pwallet->Lock();\n     pwallet->nRelockTime = 0;\n@@ -2157,10 +2208,11 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n-    if (!pwallet->IsCrypted() && (request.fHelp || request.params.size() != 1))\n+    if (!pwallet->IsCrypted() && (request.fHelp || request.params.size() != 1)) {\n         throw runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n@@ -2183,13 +2235,15 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n             \"\\nAs a json rpc call\\n\"\n             + HelpExampleRpc(\"encryptwallet\", \"\\\"my pass phrase\\\"\")\n         );\n+    }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     if (request.fHelp)\n         return true;\n-    if (pwallet->IsCrypted())\n+    if (pwallet->IsCrypted()) {\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n+    }\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n     // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n@@ -2202,8 +2256,9 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n             \"encryptwallet <passphrase>\\n\"\n             \"Encrypts the wallet with <passphrase>.\");\n \n-    if (!pwallet->EncryptWallet(strWalletPass))\n+    if (!pwallet->EncryptWallet(strWalletPass)) {\n         throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, \"Error: Failed to encrypt the wallet.\");\n+    }\n \n     // BDB seems to have a bad habit of writing old data into\n     // slack space in .dat files; that is bad if the old data is\n@@ -2216,8 +2271,9 @@ UniValue lockunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n@@ -2307,8 +2363,9 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n@@ -2358,8 +2415,9 @@ UniValue settxfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n         throw runtime_error(\n@@ -2387,8 +2445,9 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n@@ -2422,8 +2481,9 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     obj.push_back(Pair(\"txcount\",       (int)pwallet->mapWallet.size()));\n     obj.push_back(Pair(\"keypoololdest\", pwallet->GetOldestKeyPoolTime()));\n     obj.push_back(Pair(\"keypoolsize\",   (int)pwallet->GetKeyPoolSize()));\n-    if (pwallet->IsCrypted())\n+    if (pwallet->IsCrypted()) {\n         obj.push_back(Pair(\"unlocked_until\", pwallet->nRelockTime));\n+    }\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n@@ -2435,8 +2495,9 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n@@ -2465,8 +2526,9 @@ UniValue listunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n@@ -2565,14 +2627,16 @@ UniValue listunspent(const JSONRPCRequest& request)\n         if (fValidAddress) {\n             entry.push_back(Pair(\"address\", CBitcoinAddress(address).ToString()));\n \n-            if (pwallet->mapAddressBook.count(address))\n+            if (pwallet->mapAddressBook.count(address)) {\n                 entry.push_back(Pair(\"account\", pwallet->mapAddressBook[address].name));\n+            }\n \n             if (scriptPubKey.IsPayToScriptHash()) {\n                 const CScriptID& hash = boost::get<CScriptID>(address);\n                 CScript redeemScript;\n-                if (pwallet->GetCScript(hash, redeemScript))\n+                if (pwallet->GetCScript(hash, redeemScript)) {\n                     entry.push_back(Pair(\"redeemScript\", HexStr(redeemScript.begin(), redeemScript.end())));\n+                }\n             }\n         }\n \n@@ -2591,8 +2655,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n+    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n+    }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n@@ -2733,8 +2798,9 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     CAmount nFeeOut;\n     string strFailReason;\n \n-    if(!pwallet->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress))\n+    if (!pwallet->FundTransaction(tx, nFeeOut, overrideEstimatedFeerate, feeRate, changePosition, strFailReason, includeWatching, lockUnspents, setSubtractFeeFromOutputs, reserveChangeKey, changeAddress)) {\n         throw JSONRPCError(RPC_INTERNAL_ERROR, strFailReason);\n+    }\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"hex\", EncodeHexTx(tx)));"
      }
    ]
  },
  {
    "sha": "ad1573472e3eff7378f9e28e0d267f919c368907",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZDE1NzM0NzJlM2VmZjczNzhmOWUyOGUwZDI2N2Y5MTljMzY4OTA3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-12-29T13:05:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:18Z"
      },
      "message": "RPC: Pass on JSONRPCRequest metadata (URI/user/etc) for \"help\" method",
      "tree": {
        "sha": "ee29de7cc5cd99174150609adea4c270087021e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ee29de7cc5cd99174150609adea4c270087021e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ad1573472e3eff7378f9e28e0d267f919c368907",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1573472e3eff7378f9e28e0d267f919c368907",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ad1573472e3eff7378f9e28e0d267f919c368907",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1573472e3eff7378f9e28e0d267f919c368907/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8a04a165e1c19dffce70a7e5c3fb10b0035d96"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 8,
      "deletions": 5
    },
    "files": [
      {
        "sha": "46f7d35907cf0589d2c8a1269ba21887989283fe",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1573472e3eff7378f9e28e0d267f919c368907/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1573472e3eff7378f9e28e0d267f919c368907/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=ad1573472e3eff7378f9e28e0d267f919c368907",
        "patch": "@@ -178,7 +178,7 @@ vector<unsigned char> ParseHexO(const UniValue& o, string strKey)\n  * Note: This interface may still be subject to change.\n  */\n \n-std::string CRPCTable::help(const std::string& strCommand) const\n+std::string CRPCTable::help(const std::string& strCommand, const JSONRPCRequest& helpreq) const\n {\n     string strRet;\n     string category;\n@@ -189,6 +189,10 @@ std::string CRPCTable::help(const std::string& strCommand) const\n         vCommands.push_back(make_pair(mi->second->category + mi->first, mi->second));\n     sort(vCommands.begin(), vCommands.end());\n \n+    JSONRPCRequest jreq(helpreq);\n+    jreq.fHelp = true;\n+    jreq.params = UniValue();\n+\n     BOOST_FOREACH(const PAIRTYPE(string, const CRPCCommand*)& command, vCommands)\n     {\n         const CRPCCommand *pcmd = command.second;\n@@ -198,10 +202,9 @@ std::string CRPCTable::help(const std::string& strCommand) const\n             continue;\n         if ((strCommand != \"\" || pcmd->category == \"hidden\") && strMethod != strCommand)\n             continue;\n+        jreq.strMethod = strMethod;\n         try\n         {\n-            JSONRPCRequest jreq;\n-            jreq.fHelp = true;\n             rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n                 (*pfn)(jreq);\n@@ -250,7 +253,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n     if (jsonRequest.params.size() > 0)\n         strCommand = jsonRequest.params[0].get_str();\n \n-    return tableRPC.help(strCommand);\n+    return tableRPC.help(strCommand, jsonRequest);\n }\n \n "
      },
      {
        "sha": "0850f68f1099b4a42eb43e7ffd7ed312c906c26d",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ad1573472e3eff7378f9e28e0d267f919c368907/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ad1573472e3eff7378f9e28e0d267f919c368907/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=ad1573472e3eff7378f9e28e0d267f919c368907",
        "patch": "@@ -154,7 +154,7 @@ class CRPCTable\n public:\n     CRPCTable();\n     const CRPCCommand* operator[](const std::string& name) const;\n-    std::string help(const std::string& name) const;\n+    std::string help(const std::string& name, const JSONRPCRequest& helpreq) const;\n \n     /**\n      * Execute a method."
      }
    ]
  },
  {
    "sha": "a4356328e00155796cd7aa188e96c51c09562423",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDM1NjMyOGUwMDE1NTc5NmNkN2FhMTg4ZTk2YzUxYzA5NTYyNDIz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-06T17:53:06Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:18Z"
      },
      "message": "Move wallet RPC declarations to rpcwallet.h",
      "tree": {
        "sha": "4519a608a1a5eb62017c5dd454eed9351bdddbe4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4519a608a1a5eb62017c5dd454eed9351bdddbe4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4356328e00155796cd7aa188e96c51c09562423",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4356328e00155796cd7aa188e96c51c09562423",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4356328e00155796cd7aa188e96c51c09562423",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4356328e00155796cd7aa188e96c51c09562423/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad1573472e3eff7378f9e28e0d267f919c368907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad1573472e3eff7378f9e28e0d267f919c368907",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad1573472e3eff7378f9e28e0d267f919c368907"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 20,
      "deletions": 11
    },
    "files": [
      {
        "sha": "e543781e73d24eae88776219bf50f8b3dc9ef51c",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4356328e00155796cd7aa188e96c51c09562423/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4356328e00155796cd7aa188e96c51c09562423/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a4356328e00155796cd7aa188e96c51c09562423",
        "patch": "@@ -14,6 +14,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/rpcwallet.h\"\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n #endif\n@@ -234,6 +235,9 @@ UniValue validateaddress(const JSONRPCRequest& request)\n     return ret;\n }\n \n+// Needed even with !ENABLE_WALLET, to pass (ignored) pointers around\n+class CWallet;\n+\n /**\n  * Used by addmultisigaddress / createmultisig:\n  */"
      },
      {
        "sha": "79b27d04757fd9810be0892776d6ca2f3dcba112",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4356328e00155796cd7aa188e96c51c09562423/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4356328e00155796cd7aa188e96c51c09562423/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=a4356328e00155796cd7aa188e96c51c09562423",
        "patch": "@@ -24,6 +24,7 @@\n #include \"uint256.h\"\n #include \"utilstrencodings.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/rpcwallet.h\"\n #include \"wallet/wallet.h\"\n #endif\n "
      },
      {
        "sha": "68d8a6ec96d88b9f520664f1372219b2311e3f81",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4356328e00155796cd7aa188e96c51c09562423/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4356328e00155796cd7aa188e96c51c09562423/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=a4356328e00155796cd7aa188e96c51c09562423",
        "patch": "@@ -196,17 +196,6 @@ extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HelpExampleCli(const std::string& methodname, const std::string& args);\n extern std::string HelpExampleRpc(const std::string& methodname, const std::string& args);\n \n-// Needed even with !ENABLE_WALLET, to pass (ignored) pointers around\n-class CWallet;\n-\n-#ifdef ENABLE_WALLET\n-// New code should accessing the wallet should be under the ../wallet/ directory\n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest&);\n-std::string HelpRequiringPassphrase(CWallet *);\n-void EnsureWalletIsUnlocked(CWallet *);\n-bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n-#endif\n-\n bool StartRPC();\n void InterruptRPC();\n void StopRPC();"
      },
      {
        "sha": "e4d4d6b36d24bb1d6d718b96e3f82c41d8ba5718",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4356328e00155796cd7aa188e96c51c09562423/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4356328e00155796cd7aa188e96c51c09562423/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=a4356328e00155796cd7aa188e96c51c09562423",
        "patch": "@@ -16,6 +16,8 @@\n #include \"merkleblock.h\"\n #include \"core_io.h\"\n \n+#include \"rpcwallet.h\"\n+\n #include <fstream>\n #include <stdint.h>\n "
      },
      {
        "sha": "bd5dad18ca59802fab9a6dc3a847a2c9a0382a0d",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4356328e00155796cd7aa188e96c51c09562423/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4356328e00155796cd7aa188e96c51c09562423/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=a4356328e00155796cd7aa188e96c51c09562423",
        "patch": "@@ -6,7 +6,20 @@\n #define BITCOIN_WALLET_RPCWALLET_H\n \n class CRPCTable;\n+class JSONRPCRequest;\n \n void RegisterWalletRPCCommands(CRPCTable &t);\n \n+/**\n+ * Figures out what wallet, if any, to use for a JSONRPCRequest.\n+ *\n+ * @param[in] request JSONRPCRequest that wishes to access a wallet\n+ * @return NULL if no wallet should be used, or a pointer to the CWallet\n+ */\n+CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest&);\n+\n+std::string HelpRequiringPassphrase(CWallet *);\n+void EnsureWalletIsUnlocked(CWallet *);\n+bool EnsureWalletIsAvailable(CWallet *, bool avoidException);\n+\n #endif //BITCOIN_WALLET_RPCWALLET_H"
      }
    ]
  },
  {
    "sha": "86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmJlNDhhNzdjNTg0Y2I4MGIyMzdjMzFkZWU5YTA2ZWUyYWFmMmY5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-07T19:15:22Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:18Z"
      },
      "message": "More tightly couple EnsureWalletIsAvailable with GetWalletForJSONRPCRequest where appropriate",
      "tree": {
        "sha": "56e3b17bb40ee39de38f58d5fdafcdddc725941c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/56e3b17bb40ee39de38f58d5fdafcdddc725941c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86be48a77c584cb80b237c31dee9a06ee2aaf2f9/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4356328e00155796cd7aa188e96c51c09562423",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4356328e00155796cd7aa188e96c51c09562423",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4356328e00155796cd7aa188e96c51c09562423"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 8,
      "deletions": 54
    },
    "files": [
      {
        "sha": "4629311095d4ba5a50904827590c7d05b168df30",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 16,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86be48a77c584cb80b237c31dee9a06ee2aaf2f9/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86be48a77c584cb80b237c31dee9a06ee2aaf2f9/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
        "patch": "@@ -77,11 +77,10 @@ std::string DecodeDumpString(const std::string &str) {\n UniValue importprivkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n-    \n+\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n@@ -195,11 +194,10 @@ void ImportAddress(CWallet * const pwallet, const CBitcoinAddress& address, cons\n UniValue importaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n-    \n+\n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n@@ -266,7 +264,6 @@ UniValue importaddress(const JSONRPCRequest& request)\n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -328,7 +325,6 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -367,7 +363,6 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n UniValue importpubkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -428,11 +423,10 @@ UniValue importpubkey(const JSONRPCRequest& request)\n UniValue importwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n-    \n+\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"importwallet \\\"filename\\\"\\n\"\n@@ -537,11 +531,10 @@ UniValue importwallet(const JSONRPCRequest& request)\n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n-    \n+\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey \\\"address\\\"\\n\"\n@@ -579,11 +572,10 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n-    \n+\n     if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n@@ -1003,6 +995,9 @@ int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(mainRequest);\n+    if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n+        return NullUniValue;\n+    }\n \n     // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n@@ -1042,9 +1037,6 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  [{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]\\n\");\n \n     // clang-format on\n-    if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n-        return NullUniValue;\n-    }\n \n     RPCTypeCheck(mainRequest.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n "
      },
      {
        "sha": "60f08b91c14711eabe0979ffb203caf0b7615c50",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 38,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86be48a77c584cb80b237c31dee9a06ee2aaf2f9/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86be48a77c584cb80b237c31dee9a06ee2aaf2f9/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
        "patch": "@@ -109,7 +109,6 @@ string AccountFromValue(const UniValue& value)\n UniValue getnewaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -166,7 +165,6 @@ CBitcoinAddress GetAccountAddress(CWallet * const pwallet, string strAccount, bo\n UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -201,7 +199,6 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -240,7 +237,6 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n UniValue setaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -288,7 +284,6 @@ UniValue setaccount(const JSONRPCRequest& request)\n UniValue getaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -324,7 +319,6 @@ UniValue getaccount(const JSONRPCRequest& request)\n UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -401,7 +395,6 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -462,7 +455,6 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -516,7 +508,6 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n UniValue signmessage(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -576,7 +567,6 @@ UniValue signmessage(const JSONRPCRequest& request)\n UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -637,7 +627,6 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -697,7 +686,6 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n UniValue getbalance(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -788,7 +776,6 @@ UniValue getbalance(const JSONRPCRequest& request)\n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -807,7 +794,6 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n UniValue movecmd(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -858,7 +844,6 @@ UniValue movecmd(const JSONRPCRequest& request)\n UniValue sendfrom(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -928,7 +913,6 @@ UniValue sendfrom(const JSONRPCRequest& request)\n UniValue sendmany(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1052,7 +1036,6 @@ extern CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniVa\n UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1151,7 +1134,6 @@ class Witnessifier : public boost::static_visitor<bool>\n UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1330,7 +1312,6 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1375,7 +1356,6 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1519,7 +1499,6 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Un\n UniValue listtransactions(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1650,7 +1629,6 @@ UniValue listtransactions(const JSONRPCRequest& request)\n UniValue listaccounts(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1733,7 +1711,6 @@ UniValue listaccounts(const JSONRPCRequest& request)\n UniValue listsinceblock(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1841,7 +1818,6 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n UniValue gettransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1931,7 +1907,6 @@ UniValue gettransaction(const JSONRPCRequest& request)\n UniValue abandontransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -1971,7 +1946,6 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n UniValue backupwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2001,7 +1975,6 @@ UniValue backupwallet(const JSONRPCRequest& request)\n UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2049,7 +2022,6 @@ static void LockWallet(CWallet* pWallet)\n UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2114,7 +2086,6 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2166,7 +2137,6 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n UniValue walletlock(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2207,7 +2177,6 @@ UniValue walletlock(const JSONRPCRequest& request)\n UniValue encryptwallet(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2270,7 +2239,6 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n UniValue lockunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2362,7 +2330,6 @@ UniValue lockunspent(const JSONRPCRequest& request)\n UniValue listlockunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2414,7 +2381,6 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n UniValue settxfee(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2444,7 +2410,6 @@ UniValue settxfee(const JSONRPCRequest& request)\n UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2494,7 +2459,6 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2525,7 +2489,6 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n UniValue listunspent(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n@@ -2654,7 +2617,6 @@ UniValue listunspent(const JSONRPCRequest& request)\n UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n     CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n-\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }"
      }
    ]
  },
  {
    "sha": "9756be382e64ab060e8d8fd3cefe5bbccc44bb45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzU2YmUzODJlNjRhYjA2MGU4ZDhmZDNjZWZlNWJiY2NjNDRiYjQ1",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-08T20:33:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:18Z"
      },
      "message": "Wallet/RPC: Use filename rather than CWallet pointer, for lockwallet RPCRunLater job name\n\nThe job name is logged, and could pose as an information leak to someone attacking the process, helping them counteract ASLR protections",
      "tree": {
        "sha": "9cd5d9d4a8c364e3e83eaa14e15c7e2a22e6e3e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9cd5d9d4a8c364e3e83eaa14e15c7e2a22e6e3e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9756be382e64ab060e8d8fd3cefe5bbccc44bb45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9756be382e64ab060e8d8fd3cefe5bbccc44bb45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9756be382e64ab060e8d8fd3cefe5bbccc44bb45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9756be382e64ab060e8d8fd3cefe5bbccc44bb45/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86be48a77c584cb80b237c31dee9a06ee2aaf2f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86be48a77c584cb80b237c31dee9a06ee2aaf2f9"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "148f0abe864c7a784639f34ad9fc64a15bddf9e6",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9756be382e64ab060e8d8fd3cefe5bbccc44bb45/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9756be382e64ab060e8d8fd3cefe5bbccc44bb45/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9756be382e64ab060e8d8fd3cefe5bbccc44bb45",
        "patch": "@@ -2077,7 +2077,7 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n     int64_t nSleepTime = request.params[1].get_int64();\n     pwallet->nRelockTime = GetTime() + nSleepTime;\n-    RPCRunLater(strprintf(\"lockwallet_%u\", uintptr_t(pwallet)), boost::bind(LockWallet, pwallet), nSleepTime);\n+    RPCRunLater(strprintf(\"lockwallet(%s)\", pwallet->strWalletFile), boost::bind(LockWallet, pwallet), nSleepTime);\n \n     return NullUniValue;\n }"
      }
    ]
  },
  {
    "sha": "d678771c660c936a6222dd43a204cb2699100f3e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjc4NzcxYzY2MGM5MzZhNjIyMmRkNDNhMjA0Y2IyNjk5MTAwZjNl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-01-08T20:41:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2017-02-27T20:45:18Z"
      },
      "message": "Wallet: Sanitise -wallet parameter",
      "tree": {
        "sha": "2cbfc0f5f5cfd6c45a06c852b6a1accfc7f565e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cbfc0f5f5cfd6c45a06c852b6a1accfc7f565e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d678771c660c936a6222dd43a204cb2699100f3e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d678771c660c936a6222dd43a204cb2699100f3e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d678771c660c936a6222dd43a204cb2699100f3e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d678771c660c936a6222dd43a204cb2699100f3e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9756be382e64ab060e8d8fd3cefe5bbccc44bb45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9756be382e64ab060e8d8fd3cefe5bbccc44bb45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9756be382e64ab060e8d8fd3cefe5bbccc44bb45"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "29ae57940fffa9dd31d12160a6861d45d5af797c",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d678771c660c936a6222dd43a204cb2699100f3e/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d678771c660c936a6222dd43a204cb2699100f3e/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=d678771c660c936a6222dd43a204cb2699100f3e",
        "patch": "@@ -19,7 +19,8 @@ static const string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNO\n static const string SAFE_CHARS[] =\n {\n     CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n-    CHARS_ALPHA_NUM + \" .,;-_?@\" // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n+    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n };\n \n string SanitizeString(const string& str, int rule)"
      },
      {
        "sha": "e2a1b9bef9a16612ea484c79d5d2fb2f8450049d",
        "filename": "src/utilstrencodings.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d678771c660c936a6222dd43a204cb2699100f3e/src/utilstrencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d678771c660c936a6222dd43a204cb2699100f3e/src/utilstrencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.h?ref=d678771c660c936a6222dd43a204cb2699100f3e",
        "patch": "@@ -26,7 +26,8 @@\n enum SafeChars\n {\n     SAFE_CHARS_DEFAULT, //!< The full set of allowed chars\n-    SAFE_CHARS_UA_COMMENT //!< BIP-0014 subset\n+    SAFE_CHARS_UA_COMMENT, //!< BIP-0014 subset\n+    SAFE_CHARS_FILENAME, //!< Chars allowed in filenames\n };\n \n /**"
      },
      {
        "sha": "446454e9e37731a733b064bceb7f2473a16c1fea",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d678771c660c936a6222dd43a204cb2699100f3e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d678771c660c936a6222dd43a204cb2699100f3e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d678771c660c936a6222dd43a204cb2699100f3e",
        "patch": "@@ -3765,6 +3765,12 @@ bool CWallet::InitLoadWallet()\n \n     std::string walletFile = GetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n \n+    if (walletFile.find_first_of(\"/\\\\\") != std::string::npos) {\n+        return InitError(_(\"-wallet parameter must only specify a filename (not a path)\"));\n+    } else if (SanitizeString(walletFile, SAFE_CHARS_FILENAME) != walletFile) {\n+        return InitError(_(\"Invalid characters in -wallet filename\"));\n+    }\n+\n     CWallet * const pwallet = CreateWalletFromFile(walletFile);\n     if (!pwallet) {\n         return false;"
      }
    ]
  }
]