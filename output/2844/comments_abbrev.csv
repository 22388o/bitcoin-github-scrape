luke-jr,2013-07-22T19:44:44Z,"I don't see the need for a non-standard ""bitcoin-format"" header...\n\nAccept: application/x-bitcoin-block, application/json\nAccept-Encoding: hex\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21370296,21370296,
petertodd,2013-07-22T20:07:28Z,"@luke-jr I agree, and make the default for Accept: */* be to output json so curl usually works the way people expect.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21371668,21371668,
sipa,2013-07-22T20:54:46Z,"I think passing the requested format as an HTTP header is awkward and hard to use. I'd say either a /rest/tx/<txid>/<format> or ?format=<format>. This also allows us to for example at some point build a minimal HTML interface that links to it, without breaking compatibility or changing the earlier interface.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21374823,21374823,
maaku,2013-07-22T21:16:34Z,"Yes, please don't invent a new HTTP header: this is exactly what the `Accept` is for. Allowing a `?format=` GET parameter alternative covers cases where specifying headers is inconvenient or impossible.\n\nUsing Accept-Encoding for 'hex' struck me as a little weird, but having read the spec again it appears to be correct. I'm not sure why you'd ever use hex though when sending raw binary data over",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21376342,21376342,
maaku,2013-07-22T21:17:38Z,"Also, I would suggest using the base url `/api/v1/`, for hopefully obvious reasons.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21376404,21376404,
jgarzik,2013-07-23T00:40:17Z,"The Accept/Accept-Encoding feedback seems to be in line with HTTP spec, and widely requested.\n\nOn the version number in API:  it's already there, in one sense.  The API _major_ version number will change very infrequently -- perhaps once a decade, if the bitcoind JSON-RPC compatibility is any guide.\n\nAs such, it is trivial to direct API version 2 callers to /rest2/\n\nAny change outside a majo",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21386251,21386251,
jgarzik,2013-07-23T01:48:47Z,"Added:  In the past, /api/v1 has been suggested for the _RPC_ interface.  At this point, ""api"" is too generic I think.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21388441,21388441,
jgarzik,2013-07-23T14:26:09Z,"@sipa makes a fair point about requiring a header being a bit more difficult.  Software such as dumb browsers do not permit easy HTTP header modification.  However, query strings are bloody ugly.\n\ngithub.com-style clean URLs seem like a smart way to go, e.g.\n\n```\n    GET /rest/tx/TX-HASH/json\n```\n\nto get the non-default JSON output.\n\nEasy enough to add modifiers after the TX-HASH.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21417535,21417535,
jgarzik,2013-07-23T14:55:40Z,"Updated commits and pull req description to indicate use of ""clean"" URLs.\nNon-standard header ""Bitcoin-Format"" removed.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21419762,21419762,
maaku,2013-07-23T17:46:51Z,"> GET /rest/tx/TX-HASH/json\n\nIs that actually how github does it? `TX-HASH.json` might be a better choice, I think. Dumb clients which ignore the headers will assume it's json from the extension.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-21432492,21432492,
keo,2013-08-07T16:00:57Z,"@jgarzik thank you! This is the beginning of a usable, clean API which appeals to merchants and PSPs.\n\n@maaku agree on providing .json instead of /json - seems to be the way everyone does it (without saying anything about whether this is good or bad).\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22262030,22262030,
runeksvendsen,2013-08-07T16:08:01Z,"Excuse me if this is out of place, but why implement this in bitcoind?\n\nWriting an external program that wraps bitcoind RPC calls and allows HTTP querying makes much more sense to me. As far as I can see this adds no new information retrievable from bitcoind, it only changes the protocol/format. A simple Python script should be able to do this, no?\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22262583,22262583,
runeksvendsen,2013-08-10T20:31:53Z,"Just for fun, I created a simple Python script that does this: https://github.com/runeksvendsen/btchttp/blob/master/btchttp.py\n\nIt only supports JSON right now, but should easily extensible.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22446819,22446819,
gavinandresen,2013-08-10T21:36:45Z,+1 for @runeksvendsen : I'd rather ship a version of his btchttp.py in contrib/ than make core bitcoind bigger.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22447903,22447903,
rebroad,2013-08-10T23:49:09Z,"The risk in moving this to contrib is that the majority of peers wouldn't\nuse it, and then when ISPs start blocking the original bitcoin protocol the\nnetwork is more likely to die. What we really need is HTTPS so that it's\nharder to block.\n\nOn Sunday, August 11, 2013, Gavin Andresen wrote:\n\n> +1 for @runeksvendsen https://github.com/runeksvendsen : I'd rather\n> ship a version of his btchtt",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22449659,22449659,
sipa,2013-08-11T08:27:31Z,"@rebroad This is not an interface intended to be exposed to the internet. You can do so of course, but it's not a replacement for the P2P system (it's more an addition to RPC). It's just an interface to ease debugging, or help other local applications that need access to raw block/transaction data.\n\nRegarding whether this belongs in bitcoind, I'm in the middle. I understand the concern about not",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22454377,22454377,
jgarzik,2013-08-11T15:59:38Z,"I fear several commenters here read the pull request title, and did not examine what the code actually _does_.\n\nSome salient points:\n- Dramatically easier interface for developers and general queries\n- Out of the box SSL support, already built into bitcoind\n- This pull adds functionality not available via RPC (there is no getrawblock) -- thus the btchttp.py example does not provide what this ",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22459961,22459961,
sipa,2013-08-11T16:25:24Z,"@jgarzik It's clearly a compromise between usability and bloat, which may or may not be worth it (see my other comment regarding that), however, there IS a getrawblock, it's called getblock [hash] false.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22460346,22460346,
jgarzik,2013-08-24T23:31:04Z,"Rebased.  The first commit is a cleanup candidate for immediate inclusion, too.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-23218677,23218677,
jgarzik,2013-08-25T02:02:44Z,"Updated for @maaku 's suggestion of HASH.EXTENSION, where the extension (.json, .txt, .dat) selects the format.\n\nUpdated OP examples.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-23220357,23220357,
sipa,2013-08-25T16:11:10Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-23230413,23230413,
jgarzik,2013-08-26T02:29:26Z,Rebased for CreateNewBlock() update.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-23241002,23241002,
jgarzik,2013-08-26T02:57:46Z,"JFYI:  Since it was easy, I implemented the following on a side branch:\n\n```\n     GET /rest/block/template.(dat|txt)\n```\n\nto download the binary (/hex) encoding of a miner block template.  No fee or sigop information is provided, just straight CBlock and nothing else.\n\nIt seems nice and efficient for a pool server to simply request the binary block from a trusted node, and vary bits of the",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-23241581,23241581,
jgarzik,2013-08-27T02:58:28Z,Merge-ready\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-23310170,23310170,
jgarzik,2013-10-02T15:39:11Z,"Rebased.  Merge-ready.\n\nNote: I also have a HTTP REST interface for ""getblocktemplate"" on a local side branch.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-25549364,25549364,
gavinandresen,2013-10-15T05:39:51Z,"Pull-tester error: rest.h is mentioned in the Makefile.am, but there ain't no rest.h committed.\n\nAlso, when testing:  Is it supposed to be ...TXHASH.json or TXHSAH/json  ?  The former complains ""invalid hash"", the latter works.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-26310500,26310500,
laanwj,2013-10-15T07:58:41Z,"I like the interface.\n\nRegarding bloat/redundancy, is this going to deprecate the JSON API calls for doing non-authenticated, non-wallet queries eventually?\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-26315587,26315587,
laanwj,2013-10-21T07:35:16Z,"It also makes sense to have a different interface for block chain data if we want to split the wallet off into another executable eventually. The ""block chain daemon"" part wouldn't need a JSON RPC interface at all.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-26697462,26697462,
luke-jr,2014-02-21T17:03:04Z,@jgarzik Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-35750272,35750272,
jgarzik,2014-06-04T15:59:47Z,Rebased.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45110057,45110057,
jtimon,2014-06-04T16:40:23Z,"I agree with @laanwj that this will probably makes separating the wallet code easier.\nIt would also make implementing full-node wallets based on a trusted bitcoind much simpler.\n\nIt comes to mind that maybe a /rest/address/ call could be interesting as well. Maybe accepting parameters to filter the outputs. For example, only show unspent outputs for a given address or only show outputs from blo",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45115240,45115240,
jgarzik,2014-06-04T18:08:55Z,Updated for year-old @sipa comment to check ReadBlockFromDisk() return value.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45127800,45127800,
jgarzik,2014-06-04T18:11:49Z,"@jtimon Sure.  REST is just a lens through which any query may be poured.  :)  These two examples, block <hash> and tx <hash>, are easy and map very well to the REST model, to the point of being compatible with wget(1), curl(1), and similar command line tools.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45128244,45128244,
sipa,2014-06-09T20:06:58Z,@jtimon There is no functionality for querying anything (unauthenticated) by address. How do you expect rest/address would work?\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45537457,45537457,
maaku,2014-06-09T20:33:13Z,"By applying the address index patch, I presume.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45540380,45540380,
jtimon,2014-06-09T22:37:27Z,"My idea was to look at what happens when you import a private key into the wallet first and hopefully learn something there. Then basically return some json data similar to what explorers usually return in their myexplorer.con/address/<address> pages, a list of outputs or an empty list.\nWhere's the address index patch?\nI assumed there was an index already, or is the chain database queried by pub",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45553266,45553266,
sipa,2014-06-09T22:45:37Z,"I started writing that address index patch, and closed the pull request because I believe it's the wrong approach. It would be supporting building applications that rely on having all blockchain data always present (making pruning hard) and having an expensive to maintain index on top of it.\n\nFor almost everything, that's just the easiest solution - just querying a database - while watch-only wa",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45553952,45553952,
leofidus,2014-06-10T05:50:46Z,@jtimon look at https://github.com/bitcoin/bitcoin/pull/3652. Current behaviour is to do a rescan at address import (which takes about 15 minutes).\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-45576239,45576239,
BitcoinPullTester,2014-07-18T16:08:13Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p2844_7da6e17a134e9f181bbb71aba27cc6923cff6387/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-49448898,49448898,
jgarzik,2014-07-18T18:32:25Z,All feedback addressed.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-49464551,49464551,
jgarzik,2014-10-13T15:22:35Z,Let's get a go/no-go for launch.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58907873,58907873,
jtimon,2014-10-13T16:41:54Z,I would say go.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58919466,58919466,
TheBlueMatt,2014-10-13T16:51:32Z,"I would say no, using some arbitrary concern over more crap in the process space. Once we can split off RPC using some IPC mechanism, then we can add all the new interfaces we want...Still the limited new code in this is nice, so I wont complain at all if others disagree.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58920804,58920804,
jtimon,2014-10-13T16:55:49Z,"Besides backwards compatibility, is there any advantage for RPC over regular http rest?\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58921406,58921406,
jgarzik,2014-10-13T17:09:42Z,"@jtimon Well, avoiding your question for a moment, the idea of this interface was to design something that may safely provide anything considered ""public data"", and thus run fully without authentication.\n\nDoes it make sense to redesign RPC interface to run over HTTP REST?  At this point, I would not see any value to dropping JSON-RPC or delivering the same authenticated functionality via HTTP RE",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58923456,58923456,
jtimon,2014-10-13T17:16:51Z,"Thanks, but my question was more ""if we had had http rest from the beginning instead of the rpc we have, would there be any disadvantage?""\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58924713,58924713,
jgarzik,2014-10-13T17:35:29Z,"@jtimon It wouldn't be JSON-RPC, but some less defined standard into which you must then define a set of rich-data export mechanisms (JSON!), because HTTP REST doesn't provide that natively.\n\nAs JSON and JSON-RPC are pretty well entrenched at this point, it is a bit of a theoretical question :)\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58927322,58927322,
jtimon,2014-10-13T18:51:56Z,"`...it is a bit of a theoretical question`\nYes it is, but thanks for answering it.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-58937401,58937401,
laanwj,2014-10-14T08:12:39Z,">  Does it make sense to redesign RPC interface to run over HTTP REST? At this point, I would not see any value to dropping JSON-RPC or delivering the same authenticated functionality via HTTP REST, given the number of clients using it.\n\nAgreed. This is for exporting stateless public data only. Not for control. not for authenticated private data.\n\nI'd say go.\n\n> Once we can split off RPC usi",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-59004935,59004935,
laanwj,2014-10-28T08:22:06Z,Needs rebase\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-60722500,60722500,
SergioDemianLerner,2014-10-30T03:56:56Z,"I think you should be aware that some web browsers allow javascript code to connect to a localhost port, such as the bitcoind HTTP REST service, so it will be possible from any malicious web page in  the Internet to detect the presence of bitcoind and query whatever data it provides.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-61042758,61042758,
SergioDemianLerner,2014-10-30T04:01:02Z,"Since the same interface provides access to HTTPReq_JSONRPC, then a malicious web page could perform a dictionary attack on the RPC password.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-61042978,61042978,
jgarzik,2014-11-11T09:55:01Z,Rebased & fixed #include-related build breakage.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-62524976,62524976,
jgarzik,2014-11-11T09:56:09Z,@SergioDemianLerner That risk exists regardless of this interface\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-62525106,62525106,
laanwj,2014-11-11T10:37:21Z,">  then a malicious web page could perform a dictionary attack on the RPC password.\n\nThat's going to be a veeery slow attack. A RPC thread is held up for 250ms after each wrong password try, and the number of RPC threads is finite and low.\n\nAnyhow, this risk has always existed. This is one of the reasons that RPC is disabled by default in Bitcoin-Qt - reduce default attack surface.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-62529594,62529594,
jgarzik,2014-11-11T10:58:45Z,"Regardless, if people really want it that way, I can add the HTTP interface on a separate port, with all that entails.\n\nI do agree it is more likely that people might want to expose this interface to a wider selection of programs/people than RPC.\n\nIt's the same problem class as running multiple virtual hosts on the same httpd.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-62531880,62531880,
laanwj,2014-11-11T11:12:24Z,"That would mean another per-instance-port to configure, another set of bind directives, another set of allowip rules... not sure I'm so happy about that. \n\nWhat I like about this pull is how little impact it has on existing code.\n\nBut that would veer me in the direction of ""implement this as an additional application/script on top of RPC"" instead of inside Bitcoin Core itself (as noted by @run",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-62533278,62533278,
petertodd,2014-11-12T09:20:25Z,"I can't help but think how this could probably be done in just a dozen or two lines of python-bitcoinlib code... and it could be in a totally separate process, even a separate user.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-62690157,62690157,
laanwj,2014-11-12T16:49:59Z,@petertodd Wouldn't be difficult to port https://github.com/runeksvendsen/btchttp/blob/master/btchttp.py from bitcoinrpc to python-bitcoinlib.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-62750473,62750473,
TheBlueMatt,2014-11-18T21:09:24Z,Ummmm....WHAT? I dont see a single ACK on this pull.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63545153,63545153,
sipa,2014-11-18T21:11:19Z,"There is one actually, by me, from a long time ago. Though I was surprised too that it just got merged (and several bugs got fixed just after merging even...).\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63545417,63545417,
TheBlueMatt,2014-11-18T21:11:41Z,"There was one irc discussion\n\n```\n<jgarzik_> wumpus, HTTP REST, yea or nay?\n<jgarzik_> I think it's usefully small and compact, and will be used extensively by upper layer services\n<wumpus> ACK\n```\n\nwhich doesnt even read as ""go ahead and merge"" to me.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63545481,63545481,
jgarzik,2014-11-19T04:01:35Z,"@TheBlueMatt There have been many small snippets of discussion in email or irc across many months.  That was a final poke, not the entire discussion.\n\nThere was no objection to this being on the 0.10 list that circulated, and the general response from committers was either apathy or ack.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63589152,63589152,
TheBlueMatt,2014-11-19T06:56:49Z,"@jgarzik My criticism isnt that there wasnt consensus that this should\nbe merged, but that it was not obvious here. From reading only this\ncommit and without spending a bunch of time searching for discussions,\nit looks like this was merged without review. If @wumpus or @gmaxwell\ncould posthumously ack this, that'd be fine.\n\nOn 11/19/14 04:01, Jeff Garzik wrote:\n\n> @TheBlueMatt https://gith",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63599950,63599950,
wumpus,2014-11-19T07:13:18Z,"Wrong @wumpus. That other guy really ought to not use my name on IRC, either, given my history with IRC.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63601000,63601000,
TheBlueMatt,2014-11-19T07:43:03Z,"ehh, sorry, meant @laanwj \n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63603042,63603042,
laanwj,2014-11-19T09:01:18Z,"@TheBlueMatt No objection - I'm still kind of ambivalent whether this belongs in core, but I like the idea of a HTTP REST standard for getting read-only public data from Bitcoin nodes. So posthumous ACK.\n\n@wumpus Let's very much not get into a I'm older-than-you-and-have-been-using-this-name-longer turf war here. I don't care. I think it's possible to block mentions from a project, that would be",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63609719,63609719,
sipa,2014-11-20T13:03:06Z,"So it seems the binary data option doesn't work (Content-Length: 0 is sent), did anyone ever test that?\n\nAlso, it seems the interface is /rest/TYPE/HASH/FORMAT, rather than the /rest/TYPE/HASH.EXT that the discussion above suggests.\n\nIt seems like nobody actually tried this once (I'm at fault too for that, and perhaps my very old review was too fast...). I started reviewing it again when the d",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63804372,63804372,
jonasschnelli,2014-11-20T13:06:50Z,I started testing some hours ago and start now address issues at #5326.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63804778,63804778,
jgarzik,2014-11-20T14:17:13Z,"@sipa Yes, it was extensively tested pre-rebase.\n\nVery little testing post-rebase, and HTTPReply() was an area that had a prior rebase bug as well.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63813840,63813840,
petertodd,2014-11-20T19:17:04Z,"For the record in addition to other objections others have already covered, it bothers me that we merged a whole new set of features without a set of unittests for it. In particular, testing this feature with a simple Python script that just grabbed some sample URL's and checked the results against vectors would have been really easy and would have caught the rebase breakage.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63862813,63862813,
jtimon,2014-11-21T15:00:50Z,@petertodd maybe something to add to #5326.\n,https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63981299,63981299,
jonasschnelli,2014-11-21T15:05:12Z,"I'm already writing some unit tests for the REST interface.\nBut i wait with the pull until #5326 gets merged. I don't want to push all the times and ""clear"" previous ACKs.\n",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-63981939,63981939,
petertodd,2014-11-21T18:25:19Z,"@jonasschnelli Thanks! Yeah, that's the kind of thing that should have been a part of the original pull-req.\n\nFor instance, I would consider the [lack of unit tests](https://github.com/bitcoin/bitcoin/pull/2340#issuecomment-58884241) for my own pull-req #2340 to be a reasonable reason to NACK merge it, even though it's much simplier and creating unit tests for it is much more difficult. To skip ",https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-64014559,64014559,
sipa,2013-08-25T16:13:06Z,"For compatibility with future headers-first mode, ReadBlockFromDisk may fail.\n",https://github.com/bitcoin/bitcoin/pull/2844#discussion_r5968793,5968793,src/rest.cpp
laanwj,2014-10-22T10:23:34Z,Why this change from HTTPError to HTTPReply?\n,https://github.com/bitcoin/bitcoin/pull/2844#discussion_r19204587,19204587,src/rpcserver.cpp
jgarzik,2014-10-24T04:05:58Z,@laanwj Looks like an error to me.\n,https://github.com/bitcoin/bitcoin/pull/2844#discussion_r19322366,19322366,src/rpcserver.cpp
sipa,2014-11-18T15:17:29Z,const string& strReq?\n,https://github.com/bitcoin/bitcoin/pull/2844#discussion_r20511121,20511121,src/rest.cpp
sipa,2014-11-18T15:20:08Z,Did you fix it?\n,https://github.com/bitcoin/bitcoin/pull/2844#discussion_r20511335,20511335,src/rpcserver.cpp
