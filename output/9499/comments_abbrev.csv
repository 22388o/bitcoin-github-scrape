TheBlueMatt,2017-01-09T19:46:11Z,Most of the diff here is changing the signature of AcceptToMemoryPool trivially....,https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271387601,271387601,
TheBlueMatt,2017-01-09T19:51:42Z,"To clarify: only rejected transactions are limited based on memory-usage (to 100KB), everything else relies on the standardness limits - 400K weight, which would be 400KB of witness data, max.",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271389008,271389008,
gmaxwell,2017-01-09T20:32:57Z,"Concept ACK. nice implementation.\n\nYou should probably consider adding an extra count ""% from memory (% hits against extra),"" to the successful reconstruction log entry.\n\nThe count limit is unfortunate, merely 100 entries but 40MB max?  you could easily keep count of the worst case memory usage (ignoring the deduplication) and then just target 4MB-- lots less memory and a higher hitrate no",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271399263,271399263,
TheBlueMatt,2017-01-09T21:17:38Z,"Indeed, doing smarter limiting would be nice, but this should do for a bare-bones help-the-default-case win for 0.14 (if it turns out to do enough and the fast progress we've been making on review continues through the end of the week). If we prefer it's not really any additional review burden to do a memory-based limit across the entire list.\n\nOn January 9, 2017 3:33:01 PM EST, Gregory Maxwell ",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271410433,271410433,
gmaxwell,2017-01-10T18:54:02Z,"It's working for me. I added logging for transactions that come from the extrapool\n\n> +    LogPrint(""cmpctblock"", ""Successfully reconstructed block %s with %lu txn prefilled, %lu txn from memory (%lu extra hits), and %lu txn requested\n"", hash.ToString(), prefilled_count, mempool_count, extra_count, vtx_missing.size());\n\nPlease add that, I know extra can't be counted completely precisely i",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271663359,271663359,
TheBlueMatt,2017-01-10T19:50:14Z,"Renamed vOrphanAndRecentlyRemovedTxn -> vExtraTxnForCompact, no other changes",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271678879,271678879,
sdaftuar,2017-01-11T10:25:30Z,"> So the extra increased no-roundtrip from 52% to 68%... in the last 72 blocks here. \n\n[Edited: my results I posted were wrong...  recalculating.]",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271832716,271832716,
gmaxwell,2017-01-11T19:08:36Z,"My last 72 blocks: 0.125 0.625 0.25  (so .62 to .75)\n",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271963966,271963966,
instagibbs,2017-01-11T19:12:59Z,"(piling on) with a 1000 transaction buffer: 0.0833333 0.597222 0.319444 (~8% absolute improvement)\n\nupdate: up to 20% RTT saved now.",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-271965112,271965112,
morcos,2017-01-12T01:51:36Z,"1000 tx buffer I got\n0.19 0.65 0.16\n\nDefinitely worth merging I say..\n\nACK 863edb4 , but please also add the extra printing \n\n",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-272053214,272053214,
instagibbs,2017-01-12T19:54:43Z,tACK https://github.com/bitcoin/bitcoin/pull/9499/commits/863edb45b9841c3058e883015c7576e6f69e3cc6 (agree with additional printing),https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-272265198,272265198,
TheBlueMatt,2017-01-12T20:20:31Z,Made the second parameter to InitData const and added the requested debug print.,https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-272272292,272272292,
luke-jr,2017-01-14T19:07:44Z,"I wonder if it might be better to simply cache whether transactions we discard are valid or invalid, rather than the full transaction data. Then hypothetically we can judge the entire block as valid/invalid quickly, even though we still have more data to fetch. But this idea sounds like a lot of work...",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-272645662,272645662,
TheBlueMatt,2017-01-14T19:59:51Z,"@luke-jr we tried that before...and would have broken consensus had it been shipped, so, yes, that is ""a lot of work"".",https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-272648994,272648994,
gmaxwell,2017-01-16T06:56:14Z,ACK.,https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-272786714,272786714,
luke-jr,2017-01-17T20:10:36Z,utACK 863edb45b9841c3058e883015c7576e6f69e3cc6 too (and the formatting commits after my review left off),https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-273284826,273284826,
instagibbs,2017-01-18T15:11:38Z,re-ACK https://github.com/bitcoin/bitcoin/pull/9499/commits/c5945804ca7e5edd9fce8c6de9b1f0ef775f9e79,https://github.com/bitcoin/bitcoin/pull/9499#issuecomment-273501552,273501552,
instagibbs,2017-01-10T16:12:22Z,technically this is for rejects as well too now... maybe `vExtraTxnIt` and same for the vector below,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r95397606,95397606,src/net_processing.cpp
morcos,2017-01-10T21:28:39Z,"A quick examination shows 80-90% of transactions not accepted to the mempool are due to rate limited free transaction.   What do you think about also adding to this check and the one below `&& state.GetRejectCode() != REJECT_INSUFFICIENTFEE`\n\nYou could be throwing away some transactions that would help blocks reconstruct, but I get close to 100 ""not accepted"" transactions an hour and it seems ",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r95461112,95461112,src/net_processing.cpp
gmaxwell,2017-01-10T22:10:21Z,It might be more interesting to distinguish REJECT_INSUFFICIENTFEE from rejection because it didn't even meet the static minimum minfee.,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r95469266,95469266,src/net_processing.cpp
TheBlueMatt,2017-01-10T22:26:55Z,"I was trying to avoid any complication here, but if you think something simple is worth it I'm ok with adding something.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r95472161,95472161,src/net_processing.cpp
morcos,2017-01-10T22:30:40Z,"Yep understood, my guess was that this was simple and a decent improvement but @gmaxwell has a point in that failed replacements could also be REJECT_INSUFFICIENTFEE and those might not be things you want to throw away.  So up to you if you can simply disambiguate.\n",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r95472826,95472826,src/net_processing.cpp
gmaxwell,2017-01-11T00:55:35Z,"I propose leaving it alone for now, in the long run we'll want some kind of smarter queue. ",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r95492635,95492635,src/net_processing.cpp
theuni,2017-01-11T23:46:49Z,const? Or was this intended to remove the matches?,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r95698910,95698910,src/blockencodings.cpp
luke-jr,2017-01-14T19:06:10Z,"A lot of code duplication here that would probably be better shared, but maybe not critical for 0.14.\n",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96122207,96122207,src/blockencodings.cpp
TheBlueMatt,2017-01-14T19:58:57Z,"Yea, I thought about it, but to avoid having two vectors I decided against it. Will fix in a follow-up pr for post-0.14.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96123168,96123168,src/blockencodings.cpp
luke-jr,2017-01-14T20:35:58Z,`AssertLockHeld(cs_main);`?,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96123885,96123885,src/net_processing.cpp
luke-jr,2017-01-14T20:36:27Z,I think this can/should be moved into `AddToCompactExtraTransactions` itself?,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96123893,96123893,src/net_processing.cpp
sipa,2017-01-14T21:53:54Z,"Maybe code duplication is acceptable, but at least adapt the comments, or delete them (it's not about mempool txn at this point).",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96125327,96125327,src/blockencodings.cpp
sipa,2017-01-17T03:39:50Z,"Maybe add a comment explaining that if a short txid appears in both the mempool and in the extra_txn vector, we still assume the mempool one is the correct one, and don't treat it as a collision. As the mempool has much better chance for matching with actual blocks, this is justified.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96339576,96339576,src/blockencodings.cpp
sipa,2017-01-17T03:41:10Z,"This branch looks like it will never be taken, as every time the condition holds, the previous branch should have matches as well.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96339639,96339639,src/net_processing.cpp
sipa,2017-01-17T03:45:30Z,Nevermind. I'm confused by the the braces. Can you instead please add braces around all the indented sections?,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96339908,96339908,src/net_processing.cpp
TheBlueMatt,2017-01-17T03:56:45Z,"This isnt true? This is only true if the witness hash (and thus, the txn) are identical.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96340734,96340734,src/blockencodings.cpp
TheBlueMatt,2017-01-17T03:58:04Z,"In fact, there's already a comment indicating this.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96340792,96340792,src/blockencodings.cpp
TheBlueMatt,2017-01-17T03:59:00Z,"OK, added.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96340851,96340851,src/blockencodings.cpp
TheBlueMatt,2017-01-17T04:00:15Z,"Note that the comment had already been mostly adapted, with an extra few lines added at the end to clarify that if there is a conflict between extra and mempool, it is ignored only if the transactions are identical.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96340934,96340934,src/blockencodings.cpp
TheBlueMatt,2017-01-17T04:01:17Z,"OK, braces added.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96340992,96340992,src/net_processing.cpp
sipa,2017-01-17T04:08:41Z,"Seems I was misreading the code, and interpreting the early-exit `mempool_count == shorttxids.size()` as the way the loop always successfully ends.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96341441,96341441,src/blockencodings.cpp
luke-jr,2017-01-17T19:24:25Z,"Shouldn't we at least check that it's *valid*?\n",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96489523,96489523,src/net_processing.cpp
luke-jr,2017-01-17T19:24:32Z,"What stops someone from flooding peers with the same transaction triggering this case and making the extra-pool useless?\n",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96489548,96489548,src/net_processing.cpp
TheBlueMatt,2017-01-17T19:46:27Z,is valid how? The CValidationState was likely not ever set if there were mempool conflicts (which is exactly the case we want here),https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96494381,96494381,src/net_processing.cpp
TheBlueMatt,2017-01-17T19:47:19Z,"There isnt actually much you can do to prevent this - the goal is to capture some number of conflicting transactions and keep them around, and without some complicated rate-limiting logic you're not gonna win that fight.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96494566,96494566,src/net_processing.cpp
luke-jr,2017-01-17T19:51:45Z,"There are a few cases of invalid transactions we could detect; eg, script fails.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96495527,96495527,src/net_processing.cpp
TheBlueMatt,2017-01-17T19:53:27Z,"Yes, but we set state.Invalid for txn-mempool-conflict, and I super dont want a huge list of which cases of invalid we care about and which we dont here.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96495942,96495942,src/net_processing.cpp
luke-jr,2017-01-17T19:53:44Z,Fair enough. I guess worst case it simply behaves the same as if this feature was never added.,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96496000,96496000,src/net_processing.cpp
TheBlueMatt,2017-01-17T19:54:32Z,"Leaving it outside makes it clear that you cannot simply insert into ExtraTxn, you need to do something special (and, technically, avoids a hidden atomic operation).",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96496170,96496170,src/net_processing.cpp
TheBlueMatt,2017-01-17T19:56:36Z,"Yea, this is no worse than before, and in many cases is a big win...its also written to be an easy review and merge, with the opportunity of cleaning it up and making it more clever in the future.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96496639,96496639,src/net_processing.cpp
TheBlueMatt,2017-01-17T19:59:22Z,Done,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96497218,96497218,src/net_processing.cpp
luke-jr,2017-01-17T20:09:38Z,"Hmm, that sounds like something we probably shouldn't be doing (although off-topic for this PR). How about using the ban score?",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96499256,96499256,src/net_processing.cpp
TheBlueMatt,2017-01-17T20:29:47Z,Lets revisit this after we fix DoS banning and have a more reasonable API to access :).,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96503307,96503307,src/net_processing.cpp
TheBlueMatt,2017-01-17T20:31:04Z,"Backed this out - some of our orphan map test stuff doesn't take cs_main, so it would fail in test_bitcoin (though all of the actual-bitcoind runs succeeded). This should be as a part of a separate PR to add cs_main and AssertLockHelds to all of the orphan handling functions.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96503570,96503570,src/net_processing.cpp
jnewbery,2017-01-19T21:53:20Z,"I don't think this early exit is worth it. The only way we could hit this is if we didn't find all of the shortid transactions in the mempool *and* we found the remaining shortid transactions in vExtraTxnForCompact. If that's the case, what do we gain/lose from early exit:\n\n- gain: we won't have to scan through the < 100 transactions in vExtraTxnForCompact. That's an almost negligable win.\n-",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96967044,96967044,src/blockencodings.cpp
jnewbery,2017-01-19T22:00:33Z,"These counts are wrong if there's a triple shortid collision. Same for the mempool count above.\n\nIf there's a shortid collision between a transaction in the mempool and in vExtraTxnForCompact, I believe extra_count will underflow.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96968481,96968481,src/blockencodings.cpp
TheBlueMatt,2017-01-19T22:15:37Z,"Indeed, looks like the counting will provide spurious results sometimes...want to open a new pr to fix it?",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96971267,96971267,src/blockencodings.cpp
TheBlueMatt,2017-01-19T22:16:50Z,"Looping through the GetShortID calls is nontrivial for large-ish mempools, and collisions should be ~1 in a million, so I think its still probably worth it.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96971471,96971471,src/blockencodings.cpp
TheBlueMatt,2017-01-19T22:17:28Z,"Plus the intention would be to significantly increase the size of the extra pool in 0.15, assuming smarter memory management.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96971576,96971576,src/blockencodings.cpp
jnewbery,2017-01-19T22:21:30Z,"Understood. When the extra pool size is 100 transactions this isn't worth it, but if the extra pool is made much larger in 0.15, it makes sense.",https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96972330,96972330,src/blockencodings.cpp
jnewbery,2017-01-19T22:22:13Z,Sure. I'll take a look tomorrow.,https://github.com/bitcoin/bitcoin/pull/9499#discussion_r96972459,96972459,src/blockencodings.cpp
