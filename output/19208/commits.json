[
  {
    "sha": "cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYzg0NDYwYzE2NGJjYjJhODc0ZDRmMDhiM2EyNjI0ZTVlZTlmZjBh",
    "commit": {
      "author": {
        "name": "Roy Shao",
        "email": "ycshao0402@gmail.com",
        "date": "2020-06-09T20:41:08Z"
      },
      "committer": {
        "name": "Roy Shao",
        "email": "ycshao0402@gmail.com",
        "date": "2020-06-18T17:32:36Z"
      },
      "message": "test: move sync_blocks and sync_mempool functions to test_framework.py",
      "tree": {
        "sha": "1d0dc6761d311af87a244334f832ec800012d30b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d0dc6761d311af87a244334f832ec800012d30b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcKp2U5ofyNVhtTOIbWdZ65CuGGoFAl7rpWYACgkQbWdZ65Cu\nGGqAqRAAnpr5hgRw/PrLuk/QPuNSY6g+95NeRZfcEJUteImsEay8S1+EbWMXgrCg\nseWGCnNV2FaWScqQSZs6WTvAE+wH7Cue2xsZ3m0xRsJRKD9CRTHSHAF6i6A+70Xf\nGl6kGawrhGEazg93RjwmZ/aDr1dy158o9D3IlZ1hsqbPQC2IzcmcaPDZ89wxdmGP\n5opT5mwpfJkaKclbnrB6+Ou0nixSr98WS4bZDb2PixOBeCv7wCHLh/d9Wgi+jkUV\nLzDemk8STE+vyDlk2yeDbEyDAhie+XSpbrCf/kaUvpOxtL37rsZZPcUelPYZdxwz\n8ioZTM6GmMN9lOrdIcynYas6xhV+id0xjWvbDd3LGsM0M4vojVynT9c98/fQxrbs\nHkIcEfavok6WA/pmAvSmYR7tIvRjGLlZ5nh1irlIgsZk2yqI1ecOdO4QymWqMGni\nzldg3RkJbGBVFF2cMxeArcARrf6rT5BzWhIGXKlo3wiiPyH3/Dwpabk31pYtcN3v\nWjDHNIvh8hpCy+p12YqHZZMkXNNWFyXFhTNhLu8+5PcwWW2HaSolDHtEO7VVxr0J\nwmtpndaiD6zGSjPRreBzNcqrXIsHpm8JoULhjGfPRRUNcvpKrJ+r4I/q3U8xU0oJ\nO8OTKjhxEz64CxDtzr3HiTYLcahNVNEGrmWdXH9lJMKetOux3ok=\n=4vJx\n-----END PGP SIGNATURE-----",
        "payload": "tree 1d0dc6761d311af87a244334f832ec800012d30b\nparent 9ad6f14175c19b5d47267c3dd5840c14bad43c83\nauthor Roy Shao <ycshao0402@gmail.com> 1591735268 -0400\ncommitter Roy Shao <ycshao0402@gmail.com> 1592501556 -0400\n\ntest: move sync_blocks and sync_mempool functions to test_framework.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/comments",
    "author": {
      "login": "ycshao",
      "id": 1574776,
      "node_id": "MDQ6VXNlcjE1NzQ3NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1574776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ycshao",
      "html_url": "https://github.com/ycshao",
      "followers_url": "https://api.github.com/users/ycshao/followers",
      "following_url": "https://api.github.com/users/ycshao/following{/other_user}",
      "gists_url": "https://api.github.com/users/ycshao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ycshao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ycshao/subscriptions",
      "organizations_url": "https://api.github.com/users/ycshao/orgs",
      "repos_url": "https://api.github.com/users/ycshao/repos",
      "events_url": "https://api.github.com/users/ycshao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ycshao/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ycshao",
      "id": 1574776,
      "node_id": "MDQ6VXNlcjE1NzQ3NzY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1574776?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ycshao",
      "html_url": "https://github.com/ycshao",
      "followers_url": "https://api.github.com/users/ycshao/followers",
      "following_url": "https://api.github.com/users/ycshao/following{/other_user}",
      "gists_url": "https://api.github.com/users/ycshao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ycshao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ycshao/subscriptions",
      "organizations_url": "https://api.github.com/users/ycshao/orgs",
      "repos_url": "https://api.github.com/users/ycshao/repos",
      "events_url": "https://api.github.com/users/ycshao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ycshao/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ad6f14175c19b5d47267c3dd5840c14bad43c83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ad6f14175c19b5d47267c3dd5840c14bad43c83",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ad6f14175c19b5d47267c3dd5840c14bad43c83"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 56,
      "deletions": 66
    },
    "files": [
      {
        "sha": "ee67ce7961861d23f3ca7faf27e01ec332815394",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
        "patch": "@@ -28,8 +28,6 @@\n from test_framework.util import (\n     adjust_bitcoin_conf_for_pre_17,\n     assert_equal,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n \n@@ -68,7 +66,7 @@ def setup_nodes(self):\n     def run_test(self):\n         self.nodes[0].generatetoaddress(101, self.nodes[0].getnewaddress())\n \n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Sanity check the test framework:\n         res = self.nodes[self.num_nodes - 1].getblockchaininfo()\n@@ -93,17 +91,17 @@ def run_test(self):\n         # Create a confirmed transaction, receiving coins\n         address = wallet.getnewaddress()\n         self.nodes[0].sendtoaddress(address, 10)\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         # Create a conflicting transaction using RBF\n         return_address = self.nodes[0].getnewaddress()\n         tx1_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx2_id = self.nodes[1].bumpfee(tx1_id)[\"txid\"]\n         # Confirm the transaction\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         # Create another conflicting transaction using RBF\n         tx3_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx4_id = self.nodes[1].bumpfee(tx3_id)[\"txid\"]"
      },
      {
        "sha": "8fa36445cd845c4177800407ad5596cc8a4f1a72",
        "filename": "test/functional/rpc_getblockfilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/rpc_getblockfilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/rpc_getblockfilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockfilter.py?ref=cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
        "patch": "@@ -7,7 +7,7 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal, assert_is_hex_string, assert_raises_rpc_error,\n-    connect_nodes, disconnect_nodes, sync_blocks\n+    connect_nodes, disconnect_nodes\n     )\n \n FILTER_TYPES = [\"basic\"]\n@@ -30,7 +30,7 @@ def run_test(self):\n \n         # Reorg node 0 to a new chain\n         connect_nodes(self.nodes[0], 1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         assert_equal(self.nodes[0].getblockcount(), 4)\n         chain1_hashes = [self.nodes[0].getblockhash(block_height) for block_height in range(4)]"
      },
      {
        "sha": "68137a2852314747f03a8e94383ac53da8537671",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 48,
        "deletions": 11,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
        "patch": "@@ -31,8 +31,6 @@\n     disconnect_nodes,\n     get_datadir_path,\n     initialize_datadir,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n \n@@ -541,15 +539,54 @@ def join_network(self):\n         connect_nodes(self.nodes[1], 2)\n         self.sync_all()\n \n-    def sync_blocks(self, nodes=None, **kwargs):\n-        sync_blocks(nodes or self.nodes, **kwargs)\n-\n-    def sync_mempools(self, nodes=None, **kwargs):\n-        sync_mempools(nodes or self.nodes, **kwargs)\n-\n-    def sync_all(self, nodes=None, **kwargs):\n-        self.sync_blocks(nodes, **kwargs)\n-        self.sync_mempools(nodes, **kwargs)\n+    def sync_blocks(self, nodes=None, wait=1, timeout=60):\n+        \"\"\"\n+        Wait until everybody has the same tip.\n+        sync_blocks needs to be called with an rpc_connections set that has least\n+        one node already synced to the latest, stable tip, otherwise there's a\n+        chance it might return before all nodes are stably synced.\n+        \"\"\"\n+        rpc_connections = nodes or self.nodes\n+        timeout = int(timeout * self.options.timeout_factor)\n+        stop_time = time.time() + timeout\n+        while time.time() <= stop_time:\n+            best_hash = [x.getbestblockhash() for x in rpc_connections]\n+            if best_hash.count(best_hash[0]) == len(rpc_connections):\n+                return\n+            # Check that each peer has at least one connection\n+            assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n+            time.sleep(wait)\n+        raise AssertionError(\"Block sync timed out after {}s:{}\".format(\n+            timeout,\n+            \"\".join(\"\\n  {!r}\".format(b) for b in best_hash),\n+        ))\n+\n+    def sync_mempools(self, nodes=None, wait=1, timeout=60, flush_scheduler=True):\n+        \"\"\"\n+        Wait until everybody has the same transactions in their memory\n+        pools\n+        \"\"\"\n+        rpc_connections = nodes or self.nodes\n+        timeout = int(timeout * self.options.timeout_factor)\n+        stop_time = time.time() + timeout\n+        while time.time() <= stop_time:\n+            pool = [set(r.getrawmempool()) for r in rpc_connections]\n+            if pool.count(pool[0]) == len(rpc_connections):\n+                if flush_scheduler:\n+                    for r in rpc_connections:\n+                        r.syncwithvalidationinterfacequeue()\n+                return\n+            # Check that each peer has at least one connection\n+            assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n+            time.sleep(wait)\n+        raise AssertionError(\"Mempool sync timed out after {}s:{}\".format(\n+            timeout,\n+            \"\".join(\"\\n  {!r}\".format(m) for m in pool),\n+        ))\n+\n+    def sync_all(self, nodes=None):\n+        self.sync_blocks(nodes)\n+        self.sync_mempools(nodes)\n \n     # Private helper methods. These should not be accessed by the subclass test scripts.\n "
      },
      {
        "sha": "bf6dc44baab573dffb06398d9203c109e5bfac33",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
        "patch": "@@ -420,50 +420,6 @@ def connect_nodes(from_connection, node_num):\n     wait_until(lambda: all(peer['bytesrecv_per_msg'].pop('verack', 0) == 24 for peer in from_connection.getpeerinfo()))\n \n \n-def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same tip.\n-\n-    sync_blocks needs to be called with an rpc_connections set that has least\n-    one node already synced to the latest, stable tip, otherwise there's a\n-    chance it might return before all nodes are stably synced.\n-    \"\"\"\n-    stop_time = time.time() + timeout\n-    while time.time() <= stop_time:\n-        best_hash = [x.getbestblockhash() for x in rpc_connections]\n-        if best_hash.count(best_hash[0]) == len(rpc_connections):\n-            return\n-        # Check that each peer has at least one connection\n-        assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n-        time.sleep(wait)\n-    raise AssertionError(\"Block sync timed out after {}s:{}\".format(\n-        timeout,\n-        \"\".join(\"\\n  {!r}\".format(b) for b in best_hash),\n-    ))\n-\n-\n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n-    \"\"\"\n-    Wait until everybody has the same transactions in their memory\n-    pools\n-    \"\"\"\n-    stop_time = time.time() + timeout\n-    while time.time() <= stop_time:\n-        pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n-            if flush_scheduler:\n-                for r in rpc_connections:\n-                    r.syncwithvalidationinterfacequeue()\n-            return\n-        # Check that each peer has at least one connection\n-        assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n-        time.sleep(wait)\n-    raise AssertionError(\"Mempool sync timed out after {}s:{}\".format(\n-        timeout,\n-        \"\".join(\"\\n  {!r}\".format(m) for m in pool),\n-    ))\n-\n-\n # Transaction/Block functions\n #############################\n "
      },
      {
        "sha": "31829a18b3ad96a8a53e2ae443a4e2797875cdf0",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=cc84460c164bcb2a874d4f08b3a2624e5ee9ff0a",
        "patch": "@@ -12,7 +12,6 @@\n     assert_equal,\n     assert_raises_rpc_error,\n     connect_nodes,\n-    sync_blocks,\n )\n \n \n@@ -264,7 +263,7 @@ def test_balances(*, fee_node_1=0):\n         # Now confirm tx_orig\n         self.restart_node(1, ['-persistmempool=0'])\n         connect_nodes(self.nodes[0], 1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         self.nodes[1].sendrawtransaction(tx_orig)\n         self.nodes[1].generatetoaddress(1, ADDRESS_WATCHONLY)\n         self.sync_all()"
      }
    ]
  }
]