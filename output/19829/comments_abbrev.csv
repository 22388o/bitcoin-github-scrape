DrahtBot,2020-08-28 21:21:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20729 (p2p: standardize on outbound-{full, block}-relay connection type naming by jonatack)\n* #20724 (Cleanup of -debug=",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-683152078,683152078,
jnewbery,2020-08-29 09:27:33,Thanks for the review @ariard . I've addressed your comments.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-683264367,683264367,
jnewbery,2020-09-02 15:26:13,Rebased,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-685811311,685811311,
jonatack,2020-09-02 15:34:43,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-685817072,685817072,
jnewbery,2020-09-03 15:56:13,rebased,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-686588115,686588115,
hebasto,2020-09-05 07:06:41,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-687563790,687563790,
jnewbery,2020-09-05 09:42:42,Thanks for the review @hebasto . I've addressed both of your comments.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-687580549,687580549,
jnewbery,2020-09-07 18:51:40,rebased,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-688473718,688473718,
jnewbery,2020-09-08 21:44:04,rebased,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-689152626,689152626,
jnewbery,2020-09-28 09:50:49,rebased,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-699903877,699903877,
jnewbery,2020-09-29 11:54:13,"Thanks for the very thorough review, @jonatack. I've addressed all of your comments.",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-700652906,700652906,
jnewbery,2020-10-01 10:53:27,Thanks @jonatack . I fixed the bad rebase.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-702054221,702054221,
jonatack,2020-10-01 13:32:39,"commits f9136f4bf, 7199d81968, 8ff3e9319c11 and 40ea4a42d9\n```diff\nnet_processing.cpp: In function ‘bool GetNodeStateStats(NodeId, CNodeStateStats&)’:\nnet_processing.cpp:982/1000/1009: error: ‘struct CNodeStateStats’ has no member named ‘nStartingHeight’; did you mean ‘m_starting_height’?\n  982 |     stats.nStartingHeight = peer->nStartingHeight;\n      |           ^~~~~~~~~~~~~~~\n     ",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-702137666,702137666,
jnewbery,2020-10-01 18:01:47,Oops. Sorry Jon. Should be good now.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-702303723,702303723,
jnewbery,2020-10-19 08:16:11,Rebased,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-711816616,711816616,
jnewbery,2020-11-19 11:10:30,Rebased,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-730300986,730300986,
jnewbery,2020-12-09 18:42:54,This is a slightly difficult rebase since the commits need to be structured a little differently to all build. Will work on it tomorrow.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-741971580,741971580,
jnewbery,2020-12-11 10:54:55,"I'm going to mark this as WIP for now. It'll be a lot easier to rebase after #20624 is merged.\n\nIf you want to help with #19398, please review #20624 first!",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-743125310,743125310,
jnewbery,2020-12-14 12:09:04,Rebased. This is now ready for review.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-744398168,744398168,
MarcoFalke,2020-12-14 12:42:01,"```\nRunning script for: fe391ca326f73337275d726f7de9db384ac35466\n\nsed -i 's/vBlockHashesToAnnounce/m_blocks_for_headers_relay/g' src/net_processing.cpp\n\nsed -i 's/vInventoryBlockToSend/m_blocks_for_inv_relay/g' src/net_processing.cpp\n\ndiff --git a/src/net_processing.h b/src/net_processing.h\n\nindex 1ad40982b..4998a1e04 100644\n\n--- a/src/net_processing.h\n\n+++ b/src/net_proc",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-744413465,744413465,
jnewbery,2020-12-14 12:44:37,Thanks @MarcoFalke. Should be fixed now.,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-744414753,744414753,
jnewbery,2020-12-18 19:15:47,@hebasto @ariard @jonatack - this is now rebased with all comments addressed. Do you have time to rereview?,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748272056,748272056,
sipa,2020-12-18 21:31:14,"utACK b5b27ea052905ff7f26a962baa961fcc762c5ee0\n\nIs m_hash_continue protected by any locks? A ""this is only accessed by the singular net_processing thread"" rationale would be sufficient, but if there happens to be a lock that's held in all access locations, perhaps it's easy to add?",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748329137,748329137,
jnewbery,2020-12-18 23:42:13,"> Is m_hash_continue protected by any locks? A ""this is only accessed by the singular net_processing thread"" rationale would be sufficient, but if there happens to be a lock that's held in all access locations, perhaps it's easy to add?\n\n@sipa could we just make it a std::atomic? It doesn't need to be synchronized with any other data, so as long as we're guaranteeing that reads/writes are atom",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748374852,748374852,
jnewbery,2020-12-18 23:43:46,"This has three code review ACKs, with just three minor comments outstanding. I think we can merge now and I can fix those outstanding comments in the next PR in the #19398 sequence. Also happy to fix them here if that's what others prefer.",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748375235,748375235,
jnewbery,2020-12-19 11:25:51,"I've addressed @sdaftuar, @hebasto and @sipa suggestions in the first three commits of #20721.",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748460913,748460913,
jnewbery,2020-12-19 14:32:14,"Thanks for the review @MarcoFalke . There are enough review comments here that it makes sense to address them in this PR instead of a follow-up. It also looks to me like this isn't entirely a clean merge, so I'm going to rebase on master.",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748482302,748482302,
jnewbery,2020-12-19 15:16:21,"Addressed all comments.\n\n> Is m_hash_continue protected by any locks? A ""this is only accessed by the singular net_processing thread"" rationale would be sufficient, but if there happens to be a lock that's held in all access locations, perhaps it's easy to add?\n\n@sipa I've added a commit to guard m_hash_continue with m_block_inv_mutex.",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748487089,748487089,
practicalswift,2020-12-19 19:48:31,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748517082,748517082,
jnewbery,2020-12-20 10:11:15,"Thanks for the latest reviews @jonatack and @MarcoFalke. I've addressed/responded to all of your comments.\n\nI'd like to stabilize this PR now unless any functional issues are found. We have ACKs on the code change at various times from @MarcoFalke, @jonatack, @hebasto, @sipa and @Sjors. If there are any further style suggestions, I can address them in the next PR in this series.",https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748587747,748587747,
jonatack,2020-12-20 12:30:16,re-ACK 3002b4af2b4fde63026f8f7c575452a5c989c662 per `git diff 9aad3e4 3002b4a`,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-748601703,748601703,
Sjors,2020-12-22 11:37:42,Code review re-ACK 3002b4af2b4fde63026f8f7c575452a5c989c662,https://github.com/bitcoin/bitcoin/pull/19829#issuecomment-749497914,749497914,
ariard,2020-08-29 00:49:49,"""Discovered at version message exchange. Used at tip update, to decide if our chain is fresh enough compared to peer's one to be worthy of headers announcement."" ?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r479586353,479586353,src/net_processing.cpp
ariard,2020-08-29 01:06:25,"What's the distinction you loose by dropping `unfiltered blocks to relay` ?\n\nI guess this is a reference to sort done at headers announcement, L4218 src/net_processing.cpp:\nhttps://github.com/bitcoin/bitcoin/blob/1cf73fb8eba3b89a30d5e943deaec5052a8b21b7/src/net_processing.cpp#L4218\n\nBefore to announce headers, we check both with regards to peer's context (""Does this header connect to kno",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r479588290,479588290,src/net.h
ariard,2020-08-29 01:30:53,"`vBlockHashesToAnnounce` is a list of block hashes not headers ? With regards to renaming follow-up commit, I would lean towards the most verbose option `m_blockids_for_inv_relay/m_blockids_for_headers_relay` to denotate that these vectors contain an identifier even if the endgoal is to relay the identifiee (either block or headers).",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r479590868,479590868,src/net_processing.cpp
jnewbery,2020-08-29 09:02:28,The comment doesn't need to document _everything_ that the variable is used for. That's what the code does.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r479628361,479628361,src/net_processing.cpp
jnewbery,2020-08-29 09:19:00,"Ok, I'll update the comment to ""List of block ids to announce headers for"".\n\n> I would lean towards the most verbose option m_blockids_for_inv_relay/m_blockids_for_headers_relay\n\nSure. I'll update.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r479629760,479629760,src/net_processing.cpp
jnewbery,2020-08-29 09:20:07,I think drop it.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r479629856,479629856,src/net.h
hebasto,2020-09-05 08:46:00,"e04fb9a2df9f4d77c587bd25c608ce806c97ea45\nCould using of `RecursiveMutex` type be avoided?\n(as there was `Mutex cs_inventory;`)",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483928636,483928636,src/net_processing.cpp
hebasto,2020-09-05 08:51:13,"575c5f55cc44348f0ebc7740c90013b96bdb8c27\nIt is good for concurrency to limit the lock scope. But is it safe to call `func` on potentially stale `peer_copies`?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483929087,483929087,src/net_processing.cpp
jnewbery,2020-09-05 09:41:20,"Good catch! `cs_inventory` was a RecursiveMutex when I opened this PR, and I missed the change when I rebased. Fixed.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483933383,483933383,src/net_processing.cpp
jnewbery,2020-09-05 09:42:16,"Yes. `peer_copies` holds shared_ptr references, so the objects pointed to can't be destructed while it's in scope.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483933457,483933457,src/net_processing.cpp
hebasto,2020-09-05 09:48:56,"#19347 is yours, btw :)",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483933970,483933970,src/net_processing.cpp
hebasto,2020-09-05 09:51:52,"I mean not language safety rather client behavior safety: if another thread removes a `peer` from the `g_peer_map`, can we rely on result of `func(peer)`?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483934204,483934204,src/net_processing.cpp
jnewbery,2020-09-05 10:05:20,"Yes, because peer still exists in that case.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483935273,483935273,src/net_processing.cpp
jnewbery,2020-09-05 10:05:39,:flushed: ,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r483935288,483935288,src/net_processing.cpp
jonatack,2020-09-28 13:18:52,"In 8d3a068 I suppose this is placed at the top of the function, instead of where it is used 150 lines below, as you plan to add more uses of it to this function.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r495931907,495931907,src/net_processing.cpp
jonatack,2020-09-28 14:23:45,"In commit 85e7deb, perhaps go a bit further in the added comment to clarify that the refcount is often > 1 here.\n\nIn my testing, adding `assert(peer.use_count() <= 1);` after this line as suggested in https://github.com/bitcoin/bitcoin/pull/19607#discussion_r470173964 causes bitcoind on mainnet to halt nearly immediately after net processing begins and 1-2 peers start to connect.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r495978760,495978760,src/net_processing.cpp
jonatack,2020-09-28 15:49:03,"cff5d286 What are your plans with respect to this function `ForEachPeer()` in your roadmap...end game interface, or more of an intermediary step?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496054882,496054882,src/net_processing.cpp
jonatack,2020-09-28 15:50:47,"9b14eb372 verified manually that this displays as before, as there is no GUI test coverage. Unfortunately, it is broken at this commit and returns only the initial value of `-1` until 3 commits later at f27a1e221d.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496056128,496056128,src/qt/rpcconsole.cpp
jonatack,2020-09-28 15:53:27,"9b14eb37 verified this functions as before per `./src/bitcoin-cli getpeerinfo | grep 'startingheight' | sort`, as there appear to be no functional tests for `getpeerinfo#startingheight`. As above, it is broken at this commit and returns only the initial value of `-1`. Functionality returns 3 commits later at f27a1e221d.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496058069,496058069,src/rpc/net.cpp
jonatack,2020-09-28 16:09:02,"9b14eb372 `m_starting_height` presumably still needs to be `std::atomic_int`? \n\nIf you retouch, perhaps `s/height/block height/` for the Doxygen doc.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496068251,496068251,src/net_processing.cpp
jonatack,2020-09-28 16:14:03,"In general, is there a plan to eventually no longer need to set `PeerRef peer = GetPeerRef(...)` in many net processing methods? ",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496071488,496071488,src/net_processing.cpp
jonatack,2020-09-28 16:27:33,"f27a1e221 nit, while touching this and lines 4334 and 4366 (3 places), if so inclined\n```suggestion\n                for (const uint256& hash : peer->m_blocks_for_headers_relay) {\n```",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496080304,496080304,src/net_processing.cpp
jonatack,2020-09-28 16:31:28,"8d3a068 nit, remove extra line created by this deletion",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496082768,496082768,src/net.h
jonatack,2020-09-28 16:32:58,"8d3a068 pico-nits, `s/a INV/an INV/` and `s/them/it|the peer/`",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496083616,496083616,src/net_processing.cpp
jonatack,2020-09-28 16:44:55,In 9b14eb37 is it safe to remove `LOCK(pnode->cs_inventory);` this early? Another lock doesn't replace it until 3 commits later in f27a1e22.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496090875,496090875,src/net_processing.cpp
jnewbery,2020-09-29 09:35:59,"Correct. Future commits will use `peer` throughout the function, and there's no downside to holding on to the object for a bit longer.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496578664,496578664,src/net_processing.cpp
jnewbery,2020-09-29 09:40:26,Done,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496581548,496581548,src/net_processing.cpp
jnewbery,2020-09-29 09:42:29,"Yes, potentially we could just pass a `Peer&` to many of the private functions (just as `CNodeState*` is passed to some of the functions now).",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496582845,496582845,src/net_processing.cpp
jnewbery,2020-09-29 11:38:21,done,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496647277,496647277,src/net.h
jnewbery,2020-09-29 11:39:17,"I don't have a strong opinion. I've done it this way here to minimize the difference in logic, but if people want to change the internal implementation later, I'm fine with that.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496647768,496647768,src/net_processing.cpp
jnewbery,2020-09-29 11:39:36,Oops. I think this was a bad rebase. Should be fixed now.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496647935,496647935,src/qt/rpcconsole.cpp
jnewbery,2020-09-29 11:39:49,"As above, should now be fixed.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496648070,496648070,src/rpc/net.cpp
jnewbery,2020-09-29 11:42:04,"> m_starting_height presumably still needs to be std::atomic_int?\n\nI don't understand. It's a `std::atomic<int>` before and after this PR.\n\n> If you retouch, perhaps s/height/block height/ for the Doxygen doc.\n\nI've updated the Doxygen comment to be clearer.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496649424,496649424,src/net_processing.cpp
jnewbery,2020-09-29 11:47:52,done,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496652482,496652482,src/net_processing.cpp
jnewbery,2020-09-29 11:49:25,fixed,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496653268,496653268,src/net_processing.cpp
jnewbery,2020-09-29 11:49:38,Oops. Bad rebase. Should be fixed now.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r496653399,496653399,src/net_processing.cpp
jonatack,2020-10-01 10:03:17,"0a9839058c\n```bash\nnet_processing.cpp: In function ‘bool GetNodeStateStats(NodeId, CNodeStateStats&)’:\nnet_processing.cpp:982:11: error: ‘struct CNodeStateStats’ has no member named ‘m_starting_height’; did you mean ‘nStartingHeight’?\n  982 |     stats.m_starting_height = peer->m_starting_height;\n      |           ^~~~~~~~~~~~~~~~~\n      |           nStartingHeight\n```",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r498128377,498128377,src/net_processing.cpp
jnewbery,2020-10-01 10:53:12,fixed,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r498154958,498154958,src/net_processing.cpp
Sjors,2020-12-15 11:41:32,"a50dee50fd2aee93b41bfb3b04b24939d0c2f6c1 : `ForEachNode` performs an additional check `NodeFullyConnected` (`pnode->fSuccessfullyConnected && !pnode->fDisconnect;`).\n\nNot sure if that matters much here. Could we prematurely send headers before `VERACK`?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r543272216,543272216,src/net_processing.cpp
jnewbery,2020-12-15 21:48:58,"This is an excellent observation. Block hashes could be pushed into `m_blocks_for_headers_relay` before the version/verack handshake is complete. However, we'll never send any blocks inventory before we're fully connected due to the guard clause at the top of SendMessages():\n\nhttps://github.com/bitcoin/bitcoin/blob/c434e2cca9181ce184efef946ab2ce62f2cd2ee7/src/net_processing.cpp#L4077-L4078\n",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r543710801,543710801,src/net_processing.cpp
hebasto,2020-12-18 20:58:34,"4ac61d85f1624b1cd7af4a85c8bca0bd430801f0\nPosition of `""startingheight""` in `RPCHelpMan` should be changed accordingly.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546087558,546087558,src/rpc/net.cpp
hebasto,2020-12-18 21:19:18,"a50dee50fd2aee93b41bfb3b04b24939d0c2f6c1\n\nI understand that comment text has been preserved, but maybe\n```suggestion\n    /** List of block ids we still have to announce.\n```\n?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546095735,546095735,src/net_processing.h
sdaftuar,2020-12-18 22:16:36,"I think this is the first place where we are acquiring a lock while already holding `m_peer_mutex`.  Any thoughts on what is the best way to document this design, so that future code writers know that acquiring `m_peer_mutex` while holding a peer's `m_block_inv_mutex` is not allowed?\n\nOr, would it be better to first copy all the Peer objects to a temporary place, release the `m_peer_mutex` loc",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546116786,546116786,src/net_processing.cpp
sdaftuar,2020-12-18 22:21:49,"We send an INV message, not a BLOCK message.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546118439,546118439,src/net_processing.h
jnewbery,2020-12-18 23:38:51,"Would a comment next to `m_peer_mutex` suffice here? This design (take `m_peer_mutex` first, then lock the mutexes protecting the individual data members) is analogous to `ForEachNode()` was doing here before (take `cs_vNodes` first, then lock the mutexes protecting the individual data members in the lambda - here `cs_inventory`).",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546147190,546147190,src/net_processing.cpp
jnewbery,2020-12-18 23:41:35,"Yes, will fix.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546147750,546147750,src/net_processing.h
jnewbery,2020-12-18 23:41:44,Agree. Will fix.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546147783,546147783,src/net_processing.h
jnewbery,2020-12-18 23:41:53,Will fix.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546147815,546147815,src/rpc/net.cpp
MarcoFalke,2020-12-19 12:27:53,"4ac61d85f1624b1cd7af4a85c8bca0bd430801f0:\n\nCan you explain why a nullptr-Assert is not needed here?\nAlso, why isn't the peer passed in from outside, where it already exists?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546232897,546232897,src/net_processing.cpp
MarcoFalke,2020-12-19 12:41:31,"a50dee50fd2aee93b41bfb3b04b24939d0c2f6c1\n\nAny reason to not have a `ForEachPeer` member function?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546234157,546234157,src/net_processing.cpp
MarcoFalke,2020-12-19 12:54:18,"a50dee50fd2aee93b41bfb3b04b24939d0c2f6c1\n\nThe list is unfiltered, as was mentioned in the previous comment. Any reason to remove that?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546235312,546235312,src/net_processing.h
MarcoFalke,2020-12-19 13:00:47,"22c2b3eff601cbc1aed2e466502bdc5549e11ae2\n\nI don't think this name is correct. Headers relay isn't implied. It might very well fall back to inv relay. Most importantly when the peer asked us to. Though, there are other reasons, too.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546235973,546235973,src/net_processing.h
MarcoFalke,2020-12-19 13:14:56,"b5b27ea052905ff7f26a962baa961fcc762c5ee0\n\nI don't think this is true either. `m_hash_continue` is a purely internal helper, never sent over the wire directly.  Instead, the tip hash is sent to trigger the peer to ask further.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546237229,546237229,src/net_processing.h
jnewbery,2020-12-19 14:52:05,Added comments to the first commit. Let me know if you think more is required.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546246602,546246602,src/net_processing.cpp
jnewbery,2020-12-19 14:52:11,Done.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546246608,546246608,src/net_processing.h
jnewbery,2020-12-19 14:52:18,Fixed,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546246613,546246613,src/net_processing.h
jnewbery,2020-12-19 14:52:25,Fixed,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546246624,546246624,src/rpc/net.cpp
hebasto,2020-12-19 14:55:05,Not sure if it is done in the latest push (58f4c8567ba77fbdbd65a12c74628505aacd0d3c).,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546246883,546246883,src/rpc/net.cpp
jnewbery,2020-12-19 15:00:57,"Yes, passing in from outside is a much better idea. I've done that now.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546247528,546247528,src/net_processing.cpp
jnewbery,2020-12-19 15:05:24,"I originally had one but removed it because it didn't seem worth it. We can revisit that decision later if it seems useful.\n\nForEachNode was useful because it allowed passing a lambda into CConnman which would be executed while the cs_vNodes lock was held. Here, the m_peer_mutex is in PeerMan, so it can be held directly.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546247965,546247965,src/net_processing.cpp
jnewbery,2020-12-19 15:05:37,"Ok, I've added the word unfiltered back.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546247973,546247973,src/net_processing.h
jnewbery,2020-12-19 15:14:34,"We hope to announce these blocks via headers. If we can't, we'll move the hashes onto the `m_blocks_for_inv_relay` and then announce via inv.\n\nI've updated the comment. Let me know if you think it's clear enough now.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546248923,546248923,src/net_processing.h
jnewbery,2020-12-19 15:15:10,"I've updated the comment to be ""The final block hash that we sent in an `inv` message to this peer."" Let me know if you have suggestions for better wording.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546248967,546248967,src/net_processing.h
jonatack,2020-12-19 15:42:09,"2f023a8 nit, the diff would be clearer without the line break changes, and I also find the code less readable here than on one line",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546251702,546251702,src/net_processing.cpp
jonatack,2020-12-19 15:42:49,"2f023a8 nit, as above, easier diff to review and more readable without the added line break",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546251731,546251731,src/net_processing.cpp
jonatack,2020-12-19 15:46:37,"2f023a8 nit, as above, easier diff to review and more readable here without the line break changes",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546252186,546252186,src/net_processing.h
jonatack,2020-12-19 18:05:53,"In 2f023a8c0e445985a20, `startingheight` should remain before `synced_headers` and `synced_blocks` (here and in the help) for consistency with the GUI peers info (or maybe less preferably, the GUI should be updated to follow this change)",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546266076,546266076,src/rpc/net.cpp
jonatack,2020-12-19 18:17:18,"25ccfd3b while renaming `hashContinue`, I wonder if it can be better named (but don't have one to propose)",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546267230,546267230,src/net_processing.h
MarcoFalke,2020-12-20 08:06:25,"717a374e74b64b7b90bc1b2995e8900212bd0bfe\n\nnit to avoid the inversion and give a rationale:\n\n""m_peer_mutex should be locked before locking a mutex inside this struct to avoid lock order violations""\n\nThis will also weaken the requirement, because for some mutexes it could make sense to not require m_peer_mutex beforehand. ",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546338754,546338754,src/net_processing.h
MarcoFalke,2020-12-20 08:06:52,same,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546338825,546338825,src/net_processing.h
MarcoFalke,2020-12-20 08:20:49,What syntax is this? I don't think we use `LOCK(); { ... }` anywhere in the codebase,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546342334,546342334,src/net_processing.cpp
MarcoFalke,2020-12-20 08:21:34,"Also, doesn't this lock violate the documentation you added in the first commit?",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546342415,546342415,src/net_processing.cpp
MarcoFalke,2020-12-20 08:22:53,Thanks. Looks good now.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546342532,546342532,src/net_processing.h
MarcoFalke,2020-12-20 08:23:06,"\n\nThanks. Looks good now.\n",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546342556,546342556,src/net_processing.h
jnewbery,2020-12-20 09:53:19,"That isn't precise enough. It's fine to lock m_peer_mutex, take a shared_ptr to one of the Peer objects, release m_peer_mutex and later lock one of the inner mutexes. The only rule is that we don't want to lock m_peer_mutex while already holding a lock on one of the inner mutexes.\n\nThis is the same as cs_vNodes and the inner mutexes in CNode.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546352430,546352430,src/net_processing.h
jnewbery,2020-12-20 09:53:44,as above,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546352494,546352494,src/net_processing.h
jnewbery,2020-12-20 09:58:24,"This is my brain not working properly. I've fixed the syntax.\n\nThis doesn't violate the documentation. That says that it's not permitted to lock m_peer_map while holding a lock on an inner mutex. This is locking an inner mutex.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546353092,546353092,src/net_processing.cpp
jnewbery,2020-12-20 09:59:52,"This is permitted by our clang formatter. I find it easier to read lines that are less than 100 columns, so I think this is a matter of taste.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546353260,546353260,src/net_processing.cpp
jnewbery,2020-12-20 10:00:17,"Again, this is personal taste, so I'm going to resolve this.",https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546353297,546353297,src/net_processing.cpp
jnewbery,2020-12-20 10:00:27,as above,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546353320,546353320,src/net_processing.h
jnewbery,2020-12-20 10:01:54,done,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546353473,546353473,src/rpc/net.cpp
jnewbery,2020-12-20 10:05:24,Changed to `m_continuation_block`,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546353844,546353844,src/net_processing.h
MarcoFalke,2020-12-20 12:05:36,Ah right. I didn't parse this correctly. Thanks for the explanation.,https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546367599,546367599,src/net_processing.h
