[
  {
    "sha": "717a374e74b64b7b90bc1b2995e8900212bd0bfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTdhMzc0ZTc0YjY0YjdiOTBiYzFiMjk5NWU4OTAwMjEyYmQwYmZl",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-08-28T20:04:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-19T14:49:03Z"
      },
      "message": "[net processing] Improve documentation for Peer destruction/locking\n\nSuggested here:\n\n- https://github.com/bitcoin/bitcoin/pull/19607#discussion_r467071878\n- https://github.com/bitcoin/bitcoin/pull/19829#discussion_r546116786",
      "tree": {
        "sha": "98a0e5025ea11a829f10b17475a789aaaba76be6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98a0e5025ea11a829f10b17475a789aaaba76be6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/717a374e74b64b7b90bc1b2995e8900212bd0bfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/717a374e74b64b7b90bc1b2995e8900212bd0bfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/717a374e74b64b7b90bc1b2995e8900212bd0bfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/717a374e74b64b7b90bc1b2995e8900212bd0bfe/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1dbf92ff0475a01d20170ea422c1d086acbbc57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1dbf92ff0475a01d20170ea422c1d086acbbc57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1dbf92ff0475a01d20170ea422c1d086acbbc57"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "41f3dce34401a9e52e17c2cdc0896dc2c1f387ac",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/717a374e74b64b7b90bc1b2995e8900212bd0bfe/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/717a374e74b64b7b90bc1b2995e8900212bd0bfe/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=717a374e74b64b7b90bc1b2995e8900212bd0bfe",
        "patch": "@@ -791,6 +791,11 @@ void PeerManager::FinalizeNode(const CNode& node, bool& fUpdateConnectionTime) {\n     LOCK(cs_main);\n     int misbehavior{0};\n     {\n+        // We remove the PeerRef from g_peer_map here, but we don't always\n+        // destruct the Peer. Sometimes another thread is still holding a\n+        // PeerRef, so the refcount is >= 1. Be careful not to do any\n+        // processing here that assumes Peer won't be changed before it's\n+        // destructed.\n         PeerRef peer = RemovePeer(nodeid);\n         assert(peer != nullptr);\n         misbehavior = WITH_LOCK(peer->m_misbehavior_mutex, return peer->m_misbehavior_score);"
      },
      {
        "sha": "3600fe7d632c61a7763b9962a76eda640b234274",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/717a374e74b64b7b90bc1b2995e8900212bd0bfe/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/717a374e74b64b7b90bc1b2995e8900212bd0bfe/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=717a374e74b64b7b90bc1b2995e8900212bd0bfe",
        "patch": "@@ -46,6 +46,8 @@ struct CNodeStateStats {\n  * Memory is owned by shared pointers and this object is destructed when\n  * the refcount drops to zero.\n  *\n+ * Mutexes inside this struct must not be held when locking m_peer_mutex.\n+ *\n  * TODO: move most members from CNodeState to this structure.\n  * TODO: move remaining application-layer data members from CNode to this structure.\n  */\n@@ -210,7 +212,8 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n       * on extra block-relay-only peers. */\n     bool m_initial_sync_finished{false};\n \n-    /** Protects m_peer_map */\n+    /** Protects m_peer_map. This mutex must not be locked while holding a lock\n+     *  on any of the mutexes inside a Peer object. */\n     mutable Mutex m_peer_mutex;\n     /**\n      * Map of all Peer objects, keyed by peer id. This map is protected"
      }
    ]
  },
  {
    "sha": "77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3N2EyYzJmOGY5MWE1YzVhMTQwZmQ5NzBmOWEzYTE0MmI0MzkwMmJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-19T17:17:41Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-20T10:01:26Z"
      },
      "message": "[net processing] Move nStartingHeight to Peer",
      "tree": {
        "sha": "6cf55149b0e1ecc23ee978b2ca7464c98af9dbe9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cf55149b0e1ecc23ee978b2ca7464c98af9dbe9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "717a374e74b64b7b90bc1b2995e8900212bd0bfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/717a374e74b64b7b90bc1b2995e8900212bd0bfe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/717a374e74b64b7b90bc1b2995e8900212bd0bfe"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 24,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f6b58c5b2a7ec1f347ba8e08948c46169b0cc2e7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "patch": "@@ -590,7 +590,6 @@ void CNode::copyStats(CNodeStats &stats, const std::vector<bool> &m_asmap)\n     stats.m_manual_connection = IsManualConn();\n     X(m_bip152_highbandwidth_to);\n     X(m_bip152_highbandwidth_from);\n-    X(nStartingHeight);\n     {\n         LOCK(cs_vSend);\n         X(mapSendBytesPerMsgCmd);"
      },
      {
        "sha": "26475feebe987d8539a8778cabffc991cf6eef5a",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "patch": "@@ -994,7 +994,6 @@ class CNode\n \n public:\n     uint256 hashContinue;\n-    std::atomic<int> nStartingHeight{-1};\n     // We selected peer as (compact blocks) high-bandwidth peer (BIP152)\n     std::atomic<bool> m_bip152_highbandwidth_to{false};\n     // Peer selected us as (compact blocks) high-bandwidth peer (BIP152)"
      },
      {
        "sha": "549f800892a6c97069a60b0f0f5f19b3c792db83",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "patch": "@@ -875,6 +875,7 @@ bool PeerManager::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     PeerRef peer = GetPeerRef(nodeid);\n     if (peer == nullptr) return false;\n     stats.m_misbehavior_score = WITH_LOCK(peer->m_misbehavior_mutex, return peer->m_misbehavior_score);\n+    stats.nStartingHeight = peer->nStartingHeight;\n \n     return true;\n }\n@@ -1769,7 +1770,9 @@ void PeerManager::SendBlockTransactions(CNode& pfrom, const CBlock& block, const\n     m_connman.PushMessage(&pfrom, msgMaker.Make(nSendFlags, NetMsgType::BLOCKTXN, resp));\n }\n \n-void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block)\n+void PeerManager::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n+                                        const std::vector<CBlockHeader>& headers,\n+                                        bool via_compact_block)\n {\n     const CNetMsgMaker msgMaker(pfrom.GetCommonVersion());\n     size_t nCount = headers.size();\n@@ -1859,7 +1862,8 @@ void PeerManager::ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHe\n             // Headers message had its maximum size; the peer may have more headers.\n             // TODO: optimize: if pindexLast is an ancestor of ::ChainActive().Tip or pindexBestHeader, continue\n             // from there instead.\n-            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\", pindexLast->nHeight, pfrom.GetId(), pfrom.nStartingHeight);\n+            LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\",\n+                                 pindexLast->nHeight, pfrom.GetId(), peer.nStartingHeight);\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexLast), uint256()));\n         }\n \n@@ -2365,7 +2369,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             LOCK(pfrom.cs_SubVer);\n             pfrom.cleanSubVer = cleanSubVer;\n         }\n-        pfrom.nStartingHeight = nStartingHeight;\n+        peer->nStartingHeight = nStartingHeight;\n \n         // set nodes not relaying blocks and tx and not serving (parts) of the historical blockchain as \"clients\"\n         pfrom.fClient = (!(nServices & NODE_NETWORK) && !(nServices & NODE_NETWORK_LIMITED));\n@@ -2445,7 +2449,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         LogPrint(BCLog::NET, \"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n                   cleanSubVer, pfrom.nVersion,\n-                  pfrom.nStartingHeight, addrMe.ToString(), pfrom.GetId(),\n+                  peer->nStartingHeight, addrMe.ToString(), pfrom.GetId(),\n                   remoteAddr);\n \n         int64_t nTimeOffset = nTime - GetTime();\n@@ -2479,7 +2483,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         if (!pfrom.IsInboundConn()) {\n             LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s (%s)\\n\",\n-                      pfrom.nVersion.load(), pfrom.nStartingHeight,\n+                      pfrom.nVersion.load(), peer->nStartingHeight,\n                       pfrom.GetId(), (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToString()) : \"\"),\n                       pfrom.ConnectionTypeAsString());\n         }\n@@ -3321,7 +3325,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             // the peer if the header turns out to be for an invalid block.\n             // Note that if a peer tries to build on an invalid chain, that\n             // will be detected and the peer will be disconnected/discouraged.\n-            return ProcessHeadersMessage(pfrom, {cmpctblock.header}, /*via_compact_block=*/true);\n+            return ProcessHeadersMessage(pfrom, *peer, {cmpctblock.header}, /*via_compact_block=*/true);\n         }\n \n         if (fBlockReconstructed) {\n@@ -3464,7 +3468,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             ReadCompactSize(vRecv); // ignore tx count; assume it is 0.\n         }\n \n-        return ProcessHeadersMessage(pfrom, headers, /*via_compact_block=*/false);\n+        return ProcessHeadersMessage(pfrom, *peer, headers, /*via_compact_block=*/false);\n     }\n \n     if (msg_type == NetMsgType::BLOCK)\n@@ -4072,6 +4076,7 @@ class CompareInvMempoolOrder\n \n bool PeerManager::SendMessages(CNode* pto)\n {\n+    PeerRef peer = GetPeerRef(pto->GetId());\n     const Consensus::Params& consensusParams = m_chainparams.GetConsensus();\n \n     // We must call MaybeDiscourageAndDisconnect first, to ensure that we'll\n@@ -4197,7 +4202,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                    got back an empty response.  */\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n-                LogPrint(BCLog::NET, \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->GetId(), pto->nStartingHeight);\n+                LogPrint(BCLog::NET, \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->GetId(), peer->nStartingHeight);\n                 m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexStart), uint256()));\n             }\n         }"
      },
      {
        "sha": "5af2689f1871a88a45ada2224df6d5355356ace8",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "patch": "@@ -36,6 +36,7 @@ struct CNodeStateStats {\n     int m_misbehavior_score = 0;\n     int nSyncHeight = -1;\n     int nCommonHeight = -1;\n+    int nStartingHeight = -1;\n     std::vector<int> vHeightInFlight;\n };\n \n@@ -62,6 +63,9 @@ struct Peer {\n     /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n     bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n \n+    /** This peer's reported block height when we connected */\n+    std::atomic<int> nStartingHeight{-1};\n+\n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);\n \n@@ -182,7 +186,9 @@ class PeerManager final : public CValidationInterface, public NetEventsInterface\n \n     void ProcessOrphanTx(std::set<uint256>& orphan_work_set) EXCLUSIVE_LOCKS_REQUIRED(cs_main, g_cs_orphans);\n     /** Process a single headers message from a peer. */\n-    void ProcessHeadersMessage(CNode& pfrom, const std::vector<CBlockHeader>& headers, bool via_compact_block);\n+    void ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n+                               const std::vector<CBlockHeader>& headers,\n+                               bool via_compact_block);\n \n     void SendBlockTransactions(CNode& pfrom, const CBlock& block, const BlockTransactionsRequest& req);\n "
      },
      {
        "sha": "0069ea97f9d366dc46243b86703021d067f46282",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "patch": "@@ -1109,7 +1109,6 @@ void RPCConsole::updateDetailWidget()\n     ui->peerVersion->setText(QString::number(stats->nodeStats.nVersion));\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));\n     ui->peerDirection->setText(stats->nodeStats.fInbound ? tr(\"Inbound\") : tr(\"Outbound\"));\n-    ui->peerHeight->setText(QString::number(stats->nodeStats.nStartingHeight));\n     if (stats->nodeStats.m_permissionFlags == PF_NONE) {\n         ui->peerPermissions->setText(tr(\"N/A\"));\n     } else {\n@@ -1135,6 +1134,8 @@ void RPCConsole::updateDetailWidget()\n             ui->peerCommonHeight->setText(QString(\"%1\").arg(stats->nodeStateStats.nCommonHeight));\n         else\n             ui->peerCommonHeight->setText(tr(\"Unknown\"));\n+\n+        ui->peerHeight->setText(QString::number(stats->nodeStateStats.nStartingHeight));\n     }\n \n     ui->detailWidget->show();"
      },
      {
        "sha": "c3d2ad1a4603a42745977358a60af100c2d39b46",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "patch": "@@ -133,8 +133,8 @@ static RPCHelpMan getpeerinfo()\n                             {RPCResult::Type::STR, \"connection_type\", \"Type of connection: \\n\" + Join(CONNECTION_TYPE_DOC, \",\\n\") + \".\\n\"\n                                                                       \"Please note this output is unlikely to be stable in upcoming releases as we iterate to\\n\"\n                                                                       \"best capture connection behaviors.\"},\n-                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n                             {RPCResult::Type::NUM, \"banscore\", \"The ban score (DEPRECATED, returned only if config option -deprecatedrpc=banscore is passed)\"},\n+                            {RPCResult::Type::NUM, \"startingheight\", \"The starting height (block) of the peer\"},\n                             {RPCResult::Type::NUM, \"synced_headers\", \"The last header we have in common with this peer\"},\n                             {RPCResult::Type::NUM, \"synced_blocks\", \"The last block we have in common with this peer\"},\n                             {RPCResult::Type::ARR, \"inflight\", \"\",\n@@ -224,12 +224,12 @@ static RPCHelpMan getpeerinfo()\n             // addnode is deprecated in v0.21 for removal in v0.22\n             obj.pushKV(\"addnode\", stats.m_manual_connection);\n         }\n-        obj.pushKV(\"startingheight\", stats.nStartingHeight);\n         if (fStateStats) {\n             if (IsDeprecatedRPCEnabled(\"banscore\")) {\n                 // banscore is deprecated in v0.21 for removal in v0.22\n                 obj.pushKV(\"banscore\", statestats.m_misbehavior_score);\n             }\n+            obj.pushKV(\"startingheight\", statestats.nStartingHeight);\n             obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n             obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "78040f91687e7f1986e466d448c9b9530830e9b8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ODA0MGY5MTY4N2U3ZjE5ODZlNDY2ZDQ0OGM5Yjk1MzA4MzBlOWI4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-16T20:27:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-20T10:01:46Z"
      },
      "message": "[net processing] Rename nStartingHeight to m_starting_height\n\nNot done as a scripted diff to avoid misnaming the local variable in\nProcessMessage().",
      "tree": {
        "sha": "258750049a522123b227f34ac4100d3e5525927a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/258750049a522123b227f34ac4100d3e5525927a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78040f91687e7f1986e466d448c9b9530830e9b8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78040f91687e7f1986e466d448c9b9530830e9b8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78040f91687e7f1986e466d448c9b9530830e9b8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78040f91687e7f1986e466d448c9b9530830e9b8/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/77a2c2f8f91a5c5a140fd970f9a3a142b43902bf"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "eafb33db6bfb31bfd8ad481055935c90da0161b0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78040f91687e7f1986e466d448c9b9530830e9b8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78040f91687e7f1986e466d448c9b9530830e9b8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=78040f91687e7f1986e466d448c9b9530830e9b8",
        "patch": "@@ -705,7 +705,7 @@ class CNodeStats\n     bool m_manual_connection;\n     bool m_bip152_highbandwidth_to;\n     bool m_bip152_highbandwidth_from;\n-    int nStartingHeight;\n+    int m_starting_height;\n     uint64_t nSendBytes;\n     mapMsgCmdSize mapSendBytesPerMsgCmd;\n     uint64_t nRecvBytes;"
      },
      {
        "sha": "ee049b03391c21444ae4564e1651d5f982c5b031",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78040f91687e7f1986e466d448c9b9530830e9b8/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78040f91687e7f1986e466d448c9b9530830e9b8/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=78040f91687e7f1986e466d448c9b9530830e9b8",
        "patch": "@@ -875,7 +875,7 @@ bool PeerManager::GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats) {\n     PeerRef peer = GetPeerRef(nodeid);\n     if (peer == nullptr) return false;\n     stats.m_misbehavior_score = WITH_LOCK(peer->m_misbehavior_mutex, return peer->m_misbehavior_score);\n-    stats.nStartingHeight = peer->nStartingHeight;\n+    stats.m_starting_height = peer->m_starting_height;\n \n     return true;\n }\n@@ -1863,7 +1863,7 @@ void PeerManager::ProcessHeadersMessage(CNode& pfrom, const Peer& peer,\n             // TODO: optimize: if pindexLast is an ancestor of ::ChainActive().Tip or pindexBestHeader, continue\n             // from there instead.\n             LogPrint(BCLog::NET, \"more getheaders (%d) to end to peer=%d (startheight:%d)\\n\",\n-                                 pindexLast->nHeight, pfrom.GetId(), peer.nStartingHeight);\n+                                 pindexLast->nHeight, pfrom.GetId(), peer.m_starting_height);\n             m_connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexLast), uint256()));\n         }\n \n@@ -2289,7 +2289,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         ServiceFlags nServices;\n         int nVersion;\n         std::string cleanSubVer;\n-        int nStartingHeight = -1;\n+        int starting_height = -1;\n         bool fRelay = true;\n \n         vRecv >> nVersion >> nServiceInt >> nTime >> addrMe;\n@@ -2320,7 +2320,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             cleanSubVer = SanitizeString(strSubVer);\n         }\n         if (!vRecv.empty()) {\n-            vRecv >> nStartingHeight;\n+            vRecv >> starting_height;\n         }\n         if (!vRecv.empty())\n             vRecv >> fRelay;\n@@ -2369,7 +2369,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             LOCK(pfrom.cs_SubVer);\n             pfrom.cleanSubVer = cleanSubVer;\n         }\n-        peer->nStartingHeight = nStartingHeight;\n+        peer->m_starting_height = starting_height;\n \n         // set nodes not relaying blocks and tx and not serving (parts) of the historical blockchain as \"clients\"\n         pfrom.fClient = (!(nServices & NODE_NETWORK) && !(nServices & NODE_NETWORK_LIMITED));\n@@ -2449,7 +2449,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         LogPrint(BCLog::NET, \"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n                   cleanSubVer, pfrom.nVersion,\n-                  peer->nStartingHeight, addrMe.ToString(), pfrom.GetId(),\n+                  peer->m_starting_height, addrMe.ToString(), pfrom.GetId(),\n                   remoteAddr);\n \n         int64_t nTimeOffset = nTime - GetTime();\n@@ -2483,7 +2483,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n \n         if (!pfrom.IsInboundConn()) {\n             LogPrintf(\"New outbound peer connected: version: %d, blocks=%d, peer=%d%s (%s)\\n\",\n-                      pfrom.nVersion.load(), peer->nStartingHeight,\n+                      pfrom.nVersion.load(), peer->m_starting_height,\n                       pfrom.GetId(), (fLogIPs ? strprintf(\", peeraddr=%s\", pfrom.addr.ToString()) : \"\"),\n                       pfrom.ConnectionTypeAsString());\n         }\n@@ -4202,7 +4202,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                    got back an empty response.  */\n                 if (pindexStart->pprev)\n                     pindexStart = pindexStart->pprev;\n-                LogPrint(BCLog::NET, \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->GetId(), peer->nStartingHeight);\n+                LogPrint(BCLog::NET, \"initial getheaders (%d) to peer=%d (startheight:%d)\\n\", pindexStart->nHeight, pto->GetId(), peer->m_starting_height);\n                 m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexStart), uint256()));\n             }\n         }"
      },
      {
        "sha": "5b5d96c03e2b048fca9b4c04be610078b0a15d81",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78040f91687e7f1986e466d448c9b9530830e9b8/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78040f91687e7f1986e466d448c9b9530830e9b8/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=78040f91687e7f1986e466d448c9b9530830e9b8",
        "patch": "@@ -36,7 +36,7 @@ struct CNodeStateStats {\n     int m_misbehavior_score = 0;\n     int nSyncHeight = -1;\n     int nCommonHeight = -1;\n-    int nStartingHeight = -1;\n+    int m_starting_height = -1;\n     std::vector<int> vHeightInFlight;\n };\n \n@@ -64,7 +64,7 @@ struct Peer {\n     bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n \n     /** This peer's reported block height when we connected */\n-    std::atomic<int> nStartingHeight{-1};\n+    std::atomic<int> m_starting_height{-1};\n \n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);"
      },
      {
        "sha": "2bd8114902cfe69b893b3cb73bef245177916c4d",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78040f91687e7f1986e466d448c9b9530830e9b8/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78040f91687e7f1986e466d448c9b9530830e9b8/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=78040f91687e7f1986e466d448c9b9530830e9b8",
        "patch": "@@ -1135,7 +1135,7 @@ void RPCConsole::updateDetailWidget()\n         else\n             ui->peerCommonHeight->setText(tr(\"Unknown\"));\n \n-        ui->peerHeight->setText(QString::number(stats->nodeStateStats.nStartingHeight));\n+        ui->peerHeight->setText(QString::number(stats->nodeStateStats.m_starting_height));\n     }\n \n     ui->detailWidget->show();"
      },
      {
        "sha": "333dcb52bdf63e4332c756bb0cb82a2131493e6f",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78040f91687e7f1986e466d448c9b9530830e9b8/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78040f91687e7f1986e466d448c9b9530830e9b8/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=78040f91687e7f1986e466d448c9b9530830e9b8",
        "patch": "@@ -229,7 +229,7 @@ static RPCHelpMan getpeerinfo()\n                 // banscore is deprecated in v0.21 for removal in v0.22\n                 obj.pushKV(\"banscore\", statestats.m_misbehavior_score);\n             }\n-            obj.pushKV(\"startingheight\", statestats.nStartingHeight);\n+            obj.pushKV(\"startingheight\", statestats.m_starting_height);\n             obj.pushKV(\"synced_headers\", statestats.nSyncHeight);\n             obj.pushKV(\"synced_blocks\", statestats.nCommonHeight);\n             UniValue heights(UniValue::VARR);"
      }
    ]
  },
  {
    "sha": "53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1M2I3YWMxYjdkMzM5NGFlYWFkMWU0YTZlM2IzMjNkMTdjZGY1OTk0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-19T17:29:05Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-20T10:01:48Z"
      },
      "message": "[net processing] Move block inventory data to Peer",
      "tree": {
        "sha": "9bcabdd4081079e069133d84897c8f3593bfb384",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9bcabdd4081079e069133d84897c8f3593bfb384"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78040f91687e7f1986e466d448c9b9530830e9b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78040f91687e7f1986e466d448c9b9530830e9b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78040f91687e7f1986e466d448c9b9530830e9b8"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 34,
      "deletions": 28
    },
    "files": [
      {
        "sha": "885f21f2c457eae80dba3e9169c8318c657769da",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
        "patch": "@@ -1006,12 +1006,6 @@ class CNode\n     std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\n     std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};\n \n-    // List of block ids we still have announce.\n-    // There is no final sorting before sending, as they are always sent immediately\n-    // and in the order requested.\n-    std::vector<uint256> vInventoryBlockToSend GUARDED_BY(cs_inventory);\n-    Mutex cs_inventory;\n-\n     struct TxRelay {\n         mutable RecursiveMutex cs_filter;\n         // We use fRelayTxes for two purposes -\n@@ -1042,9 +1036,6 @@ class CNode\n     // m_tx_relay == nullptr if we're not relaying transactions with this peer\n     std::unique_ptr<TxRelay> m_tx_relay;\n \n-    // Used for headers announcements - unfiltered blocks to relay\n-    std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(cs_inventory);\n-\n     /** UNIX epoch time of the last block received from this peer that we had\n      * not yet seen (e.g. not already received from another peer), that passed\n      * preliminary validity checks and was saved to disk, even if we don't"
      },
      {
        "sha": "8f9eb621001e49c2e7dc3d0b9dc1c587734b4cf7",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 19,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
        "patch": "@@ -1315,13 +1315,17 @@ void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInde\n         }\n     }\n \n-    // Relay to all peers\n-    m_connman.ForEachNode([&vHashes](CNode* pnode) {\n-        LOCK(pnode->cs_inventory);\n-        for (const uint256& hash : reverse_iterate(vHashes)) {\n-            pnode->vBlockHashesToAnnounce.push_back(hash);\n+    {\n+        LOCK(m_peer_mutex);\n+        for (auto& it : m_peer_map) {\n+            Peer& peer = *it.second;\n+            LOCK(peer.m_block_inv_mutex);\n+            for (const uint256& hash : reverse_iterate(vHashes)) {\n+                peer.vBlockHashesToAnnounce.push_back(hash);\n+            }\n         }\n-    });\n+    }\n+\n     m_connman.WakeMessageHandler();\n }\n \n@@ -2795,7 +2799,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 LogPrint(BCLog::NET, \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n             }\n-            WITH_LOCK(pfrom.cs_inventory, pfrom.vInventoryBlockToSend.push_back(pindex->GetBlockHash()));\n+            WITH_LOCK(peer->m_block_inv_mutex, peer->vInventoryBlockToSend.push_back(pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll\n@@ -4218,11 +4222,11 @@ bool PeerManager::SendMessages(CNode* pto)\n             // If no header would connect, or if we have too many\n             // blocks, or if the peer doesn't want headers, just\n             // add all to the inv queue.\n-            LOCK(pto->cs_inventory);\n+            LOCK(peer->m_block_inv_mutex);\n             std::vector<CBlock> vHeaders;\n             bool fRevertToInv = ((!state.fPreferHeaders &&\n-                                 (!state.fPreferHeaderAndIDs || pto->vBlockHashesToAnnounce.size() > 1)) ||\n-                                pto->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n+                                 (!state.fPreferHeaderAndIDs || peer->vBlockHashesToAnnounce.size() > 1)) ||\n+                                 peer->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n             const CBlockIndex *pBestIndex = nullptr; // last header queued for delivery\n             ProcessBlockAvailability(pto->GetId()); // ensure pindexBestKnownBlock is up-to-date\n \n@@ -4231,7 +4235,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                 // Try to find first header that our peer doesn't have, and\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on ::ChainActive(), give up.\n-                for (const uint256 &hash : pto->vBlockHashesToAnnounce) {\n+                for (const uint256& hash : peer->vBlockHashesToAnnounce) {\n                     const CBlockIndex* pindex = LookupBlockIndex(hash);\n                     assert(pindex);\n                     if (::ChainActive()[pindex->nHeight] != pindex) {\n@@ -4322,8 +4326,8 @@ bool PeerManager::SendMessages(CNode* pto)\n                 // If falling back to using an inv, just try to inv the tip.\n                 // The last entry in vBlockHashesToAnnounce was our tip at some point\n                 // in the past.\n-                if (!pto->vBlockHashesToAnnounce.empty()) {\n-                    const uint256 &hashToAnnounce = pto->vBlockHashesToAnnounce.back();\n+                if (!peer->vBlockHashesToAnnounce.empty()) {\n+                    const uint256& hashToAnnounce = peer->vBlockHashesToAnnounce.back();\n                     const CBlockIndex* pindex = LookupBlockIndex(hashToAnnounce);\n                     assert(pindex);\n \n@@ -4337,32 +4341,32 @@ bool PeerManager::SendMessages(CNode* pto)\n \n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n-                        pto->vInventoryBlockToSend.push_back(hashToAnnounce);\n+                        peer->vInventoryBlockToSend.push_back(hashToAnnounce);\n                         LogPrint(BCLog::NET, \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n                             pto->GetId(), hashToAnnounce.ToString());\n                     }\n                 }\n             }\n-            pto->vBlockHashesToAnnounce.clear();\n+            peer->vBlockHashesToAnnounce.clear();\n         }\n \n         //\n         // Message: inventory\n         //\n         std::vector<CInv> vInv;\n         {\n-            LOCK(pto->cs_inventory);\n-            vInv.reserve(std::max<size_t>(pto->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n+            LOCK(peer->m_block_inv_mutex);\n+            vInv.reserve(std::max<size_t>(peer->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n \n             // Add blocks\n-            for (const uint256& hash : pto->vInventoryBlockToSend) {\n+            for (const uint256& hash : peer->vInventoryBlockToSend) {\n                 vInv.push_back(CInv(MSG_BLOCK, hash));\n                 if (vInv.size() == MAX_INV_SZ) {\n                     m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                     vInv.clear();\n                 }\n             }\n-            pto->vInventoryBlockToSend.clear();\n+            peer->vInventoryBlockToSend.clear();\n \n             if (pto->m_tx_relay != nullptr) {\n                 LOCK(pto->m_tx_relay->cs_tx_inventory);"
      },
      {
        "sha": "44c85a55baf1fbbe40096518751de9ab4af9ba5a",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
        "patch": "@@ -63,6 +63,17 @@ struct Peer {\n     /** Whether this peer should be disconnected and marked as discouraged (unless it has the noban permission). */\n     bool m_should_discourage GUARDED_BY(m_misbehavior_mutex){false};\n \n+    /** Protects block inventory data members */\n+    Mutex m_block_inv_mutex;\n+    /** List of blocks that we'll anounce via an `inv` message.\n+     * There is no final sorting before sending, as they are always sent\n+     * immediately and in the order requested. */\n+    std::vector<uint256> vInventoryBlockToSend GUARDED_BY(m_block_inv_mutex);\n+    /** Unfiltered list of blocks that we'd like to announce via a `headers`\n+     * message. If we can't announce via a `headers` message, we'll fall back to\n+     * announcing via `inv`. */\n+    std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(m_block_inv_mutex);\n+\n     /** This peer's reported block height when we connected */\n     std::atomic<int> m_starting_height{-1};\n "
      }
    ]
  },
  {
    "sha": "c853ef002ee7074b6e20eb8f58138c8293846424",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODUzZWYwMDJlZTcwNzRiNmUyMGViOGY1ODEzOGM4MjkzODQ2NDI0",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-16T20:27:34Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-20T10:01:48Z"
      },
      "message": "scripted-diff: rename vBlockHashesToAnnounce and vInventoryBlockToSend\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/vBlockHashesToAnnounce/m_blocks_for_headers_relay/g' src/net_processing.*\nsed -i 's/vInventoryBlockToSend/m_blocks_for_inv_relay/g' src/net_processing.*\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "8dc068ee8f0bb4d1846698442e96d971f610275e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dc068ee8f0bb4d1846698442e96d971f610275e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c853ef002ee7074b6e20eb8f58138c8293846424",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c853ef002ee7074b6e20eb8f58138c8293846424",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c853ef002ee7074b6e20eb8f58138c8293846424",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c853ef002ee7074b6e20eb8f58138c8293846424/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53b7ac1b7d3394aeaad1e4a6e3b323d17cdf5994"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 16,
      "deletions": 16
    },
    "files": [
      {
        "sha": "8dafd98d76ee72f125cfab442911e4515d1e1175",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c853ef002ee7074b6e20eb8f58138c8293846424/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c853ef002ee7074b6e20eb8f58138c8293846424/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=c853ef002ee7074b6e20eb8f58138c8293846424",
        "patch": "@@ -1321,7 +1321,7 @@ void PeerManager::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockInde\n             Peer& peer = *it.second;\n             LOCK(peer.m_block_inv_mutex);\n             for (const uint256& hash : reverse_iterate(vHashes)) {\n-                peer.vBlockHashesToAnnounce.push_back(hash);\n+                peer.m_blocks_for_headers_relay.push_back(hash);\n             }\n         }\n     }\n@@ -2799,7 +2799,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 LogPrint(BCLog::NET, \" getblocks stopping, pruned or too old block at %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 break;\n             }\n-            WITH_LOCK(peer->m_block_inv_mutex, peer->vInventoryBlockToSend.push_back(pindex->GetBlockHash()));\n+            WITH_LOCK(peer->m_block_inv_mutex, peer->m_blocks_for_inv_relay.push_back(pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n                 // When this block is requested, we'll send an inv that'll\n@@ -4225,8 +4225,8 @@ bool PeerManager::SendMessages(CNode* pto)\n             LOCK(peer->m_block_inv_mutex);\n             std::vector<CBlock> vHeaders;\n             bool fRevertToInv = ((!state.fPreferHeaders &&\n-                                 (!state.fPreferHeaderAndIDs || peer->vBlockHashesToAnnounce.size() > 1)) ||\n-                                 peer->vBlockHashesToAnnounce.size() > MAX_BLOCKS_TO_ANNOUNCE);\n+                                 (!state.fPreferHeaderAndIDs || peer->m_blocks_for_headers_relay.size() > 1)) ||\n+                                 peer->m_blocks_for_headers_relay.size() > MAX_BLOCKS_TO_ANNOUNCE);\n             const CBlockIndex *pBestIndex = nullptr; // last header queued for delivery\n             ProcessBlockAvailability(pto->GetId()); // ensure pindexBestKnownBlock is up-to-date\n \n@@ -4235,7 +4235,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                 // Try to find first header that our peer doesn't have, and\n                 // then send all headers past that one.  If we come across any\n                 // headers that aren't on ::ChainActive(), give up.\n-                for (const uint256& hash : peer->vBlockHashesToAnnounce) {\n+                for (const uint256& hash : peer->m_blocks_for_headers_relay) {\n                     const CBlockIndex* pindex = LookupBlockIndex(hash);\n                     assert(pindex);\n                     if (::ChainActive()[pindex->nHeight] != pindex) {\n@@ -4252,7 +4252,7 @@ bool PeerManager::SendMessages(CNode* pto)\n                         // which should be caught by the prior check), but one\n                         // way this could happen is by using invalidateblock /\n                         // reconsiderblock repeatedly on the tip, causing it to\n-                        // be added multiple times to vBlockHashesToAnnounce.\n+                        // be added multiple times to m_blocks_for_headers_relay.\n                         // Robustly deal with this rare situation by reverting\n                         // to an inv.\n                         fRevertToInv = true;\n@@ -4324,10 +4324,10 @@ bool PeerManager::SendMessages(CNode* pto)\n             }\n             if (fRevertToInv) {\n                 // If falling back to using an inv, just try to inv the tip.\n-                // The last entry in vBlockHashesToAnnounce was our tip at some point\n+                // The last entry in m_blocks_for_headers_relay was our tip at some point\n                 // in the past.\n-                if (!peer->vBlockHashesToAnnounce.empty()) {\n-                    const uint256& hashToAnnounce = peer->vBlockHashesToAnnounce.back();\n+                if (!peer->m_blocks_for_headers_relay.empty()) {\n+                    const uint256& hashToAnnounce = peer->m_blocks_for_headers_relay.back();\n                     const CBlockIndex* pindex = LookupBlockIndex(hashToAnnounce);\n                     assert(pindex);\n \n@@ -4341,13 +4341,13 @@ bool PeerManager::SendMessages(CNode* pto)\n \n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n-                        peer->vInventoryBlockToSend.push_back(hashToAnnounce);\n+                        peer->m_blocks_for_inv_relay.push_back(hashToAnnounce);\n                         LogPrint(BCLog::NET, \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n                             pto->GetId(), hashToAnnounce.ToString());\n                     }\n                 }\n             }\n-            peer->vBlockHashesToAnnounce.clear();\n+            peer->m_blocks_for_headers_relay.clear();\n         }\n \n         //\n@@ -4356,17 +4356,17 @@ bool PeerManager::SendMessages(CNode* pto)\n         std::vector<CInv> vInv;\n         {\n             LOCK(peer->m_block_inv_mutex);\n-            vInv.reserve(std::max<size_t>(peer->vInventoryBlockToSend.size(), INVENTORY_BROADCAST_MAX));\n+            vInv.reserve(std::max<size_t>(peer->m_blocks_for_inv_relay.size(), INVENTORY_BROADCAST_MAX));\n \n             // Add blocks\n-            for (const uint256& hash : peer->vInventoryBlockToSend) {\n+            for (const uint256& hash : peer->m_blocks_for_inv_relay) {\n                 vInv.push_back(CInv(MSG_BLOCK, hash));\n                 if (vInv.size() == MAX_INV_SZ) {\n                     m_connman.PushMessage(pto, msgMaker.Make(NetMsgType::INV, vInv));\n                     vInv.clear();\n                 }\n             }\n-            peer->vInventoryBlockToSend.clear();\n+            peer->m_blocks_for_inv_relay.clear();\n \n             if (pto->m_tx_relay != nullptr) {\n                 LOCK(pto->m_tx_relay->cs_tx_inventory);"
      },
      {
        "sha": "3080a7da4c385bf4409852f58d135294130cdd36",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c853ef002ee7074b6e20eb8f58138c8293846424/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c853ef002ee7074b6e20eb8f58138c8293846424/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=c853ef002ee7074b6e20eb8f58138c8293846424",
        "patch": "@@ -68,11 +68,11 @@ struct Peer {\n     /** List of blocks that we'll anounce via an `inv` message.\n      * There is no final sorting before sending, as they are always sent\n      * immediately and in the order requested. */\n-    std::vector<uint256> vInventoryBlockToSend GUARDED_BY(m_block_inv_mutex);\n+    std::vector<uint256> m_blocks_for_inv_relay GUARDED_BY(m_block_inv_mutex);\n     /** Unfiltered list of blocks that we'd like to announce via a `headers`\n      * message. If we can't announce via a `headers` message, we'll fall back to\n      * announcing via `inv`. */\n-    std::vector<uint256> vBlockHashesToAnnounce GUARDED_BY(m_block_inv_mutex);\n+    std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n \n     /** This peer's reported block height when we connected */\n     std::atomic<int> m_starting_height{-1};"
      }
    ]
  },
  {
    "sha": "184557e8e03f76ff18dacdb32c12692d8578691f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODQ1NTdlOGUwM2Y3NmZmMThkYWNkYjMyYzEyNjkyZDg1Nzg2OTFm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-22T00:25:11Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-20T10:03:38Z"
      },
      "message": "[net processing] Move hashContinue to net processing\n\nAlso rename to m_continuation_block to better communicate meaning.",
      "tree": {
        "sha": "fc4538c59e456ac7a7b9e71474354b65bc7f9fe0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc4538c59e456ac7a7b9e71474354b65bc7f9fe0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/184557e8e03f76ff18dacdb32c12692d8578691f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184557e8e03f76ff18dacdb32c12692d8578691f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/184557e8e03f76ff18dacdb32c12692d8578691f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184557e8e03f76ff18dacdb32c12692d8578691f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c853ef002ee7074b6e20eb8f58138c8293846424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c853ef002ee7074b6e20eb8f58138c8293846424",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c853ef002ee7074b6e20eb8f58138c8293846424"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 10,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7df0d11d375f4f8b98462ce88a2465cfc1af9b0e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184557e8e03f76ff18dacdb32c12692d8578691f/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184557e8e03f76ff18dacdb32c12692d8578691f/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=184557e8e03f76ff18dacdb32c12692d8578691f",
        "patch": "@@ -2955,7 +2955,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n {\n     hSocket = hSocketIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n-    hashContinue = uint256();\n     if (conn_type_in != ConnectionType::BLOCK_RELAY) {\n         m_tx_relay = MakeUnique<TxRelay>();\n     }"
      },
      {
        "sha": "1520a54686f4edcb3c9267b6d281e24a52063aa2",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184557e8e03f76ff18dacdb32c12692d8578691f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184557e8e03f76ff18dacdb32c12692d8578691f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=184557e8e03f76ff18dacdb32c12692d8578691f",
        "patch": "@@ -993,7 +993,6 @@ class CNode\n     mapMsgCmdSize mapRecvBytesPerMsgCmd GUARDED_BY(cs_vRecv);\n \n public:\n-    uint256 hashContinue;\n     // We selected peer as (compact blocks) high-bandwidth peer (BIP152)\n     std::atomic<bool> m_bip152_highbandwidth_to{false};\n     // Peer selected us as (compact blocks) high-bandwidth peer (BIP152)"
      },
      {
        "sha": "4b0bc2bcd21e402bf482605f19c912ce3dbec9a8",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184557e8e03f76ff18dacdb32c12692d8578691f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184557e8e03f76ff18dacdb32c12692d8578691f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=184557e8e03f76ff18dacdb32c12692d8578691f",
        "patch": "@@ -1475,7 +1475,7 @@ static void RelayAddress(const CNode& originator,\n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n }\n \n-void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, const CInv& inv, CConnman& connman)\n+void static ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& chainparams, const CInv& inv, CConnman& connman)\n {\n     bool send = false;\n     std::shared_ptr<const CBlock> a_recent_block;\n@@ -1616,15 +1616,14 @@ void static ProcessGetBlockData(CNode& pfrom, const CChainParams& chainparams, c\n         }\n \n         // Trigger the peer node to send a getblocks request for the next batch of inventory\n-        if (inv.hash == pfrom.hashContinue)\n-        {\n+        if (inv.hash == peer.m_continuation_block) {\n             // Send immediately. This must send even if redundant,\n             // and we want it right after the last block so they don't\n             // wait for other stuff first.\n             std::vector<CInv> vInv;\n             vInv.push_back(CInv(MSG_BLOCK, ::ChainActive().Tip()->GetBlockHash()));\n             connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n-            pfrom.hashContinue.SetNull();\n+            peer.m_continuation_block.SetNull();\n         }\n     }\n }\n@@ -1724,7 +1723,7 @@ void static ProcessGetData(CNode& pfrom, Peer& peer, const CChainParams& chainpa\n     if (it != peer.m_getdata_requests.end() && !pfrom.fPauseSend) {\n         const CInv &inv = *it++;\n         if (inv.IsGenBlkMsg()) {\n-            ProcessGetBlockData(pfrom, chainparams, inv, connman);\n+            ProcessGetBlockData(pfrom, peer, chainparams, inv, connman);\n         }\n         // else: If the first item on the queue is an unknown type, we erase it\n         // and continue processing the queue on the next call.\n@@ -2805,7 +2804,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 // When this block is requested, we'll send an inv that'll\n                 // trigger the peer to getblocks the next batch of inventory.\n                 LogPrint(BCLog::NET, \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-                pfrom.hashContinue = pindex->GetBlockHash();\n+                peer->m_continuation_block = pindex->GetBlockHash();\n                 break;\n             }\n         }"
      },
      {
        "sha": "32c5043a9d12acba63521eb61787c7af192c7b7a",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/184557e8e03f76ff18dacdb32c12692d8578691f/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/184557e8e03f76ff18dacdb32c12692d8578691f/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=184557e8e03f76ff18dacdb32c12692d8578691f",
        "patch": "@@ -76,6 +76,11 @@ struct Peer {\n \n     /** This peer's reported block height when we connected */\n     std::atomic<int> m_starting_height{-1};\n+    /** The final block hash that we sent in an `inv` message to this peer.\n+     * When the peer requests this block, we send an `inv` message to trigger\n+     * the peer to request the next sequence of block hashes.\n+     * Most peers use headers-first syncing, which doesn't use this mechanism */\n+    uint256 m_continuation_block{};\n \n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);"
      }
    ]
  },
  {
    "sha": "3002b4af2b4fde63026f8f7c575452a5c989c662",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDAyYjRhZjJiNGZkZTYzMDI2ZjhmN2M1NzU0NTJhNWM5ODljNjYy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-19T10:27:24Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-12-20T10:06:14Z"
      },
      "message": "[net processing] Guard m_continuation_block with m_block_inv_mutex",
      "tree": {
        "sha": "c4e3cae21eacc9b19254ba361379c594efcb0000",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4e3cae21eacc9b19254ba361379c594efcb0000"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3002b4af2b4fde63026f8f7c575452a5c989c662",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3002b4af2b4fde63026f8f7c575452a5c989c662",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3002b4af2b4fde63026f8f7c575452a5c989c662",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3002b4af2b4fde63026f8f7c575452a5c989c662/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "184557e8e03f76ff18dacdb32c12692d8578691f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/184557e8e03f76ff18dacdb32c12692d8578691f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/184557e8e03f76ff18dacdb32c12692d8578691f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 18,
      "deletions": 16
    },
    "files": [
      {
        "sha": "4b9688d5170c6cbc5f5ac7ba72f5ce6cd5ce24e0",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002b4af2b4fde63026f8f7c575452a5c989c662/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002b4af2b4fde63026f8f7c575452a5c989c662/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3002b4af2b4fde63026f8f7c575452a5c989c662",
        "patch": "@@ -1615,15 +1615,18 @@ void static ProcessGetBlockData(CNode& pfrom, Peer& peer, const CChainParams& ch\n             }\n         }\n \n-        // Trigger the peer node to send a getblocks request for the next batch of inventory\n-        if (inv.hash == peer.m_continuation_block) {\n-            // Send immediately. This must send even if redundant,\n-            // and we want it right after the last block so they don't\n-            // wait for other stuff first.\n-            std::vector<CInv> vInv;\n-            vInv.push_back(CInv(MSG_BLOCK, ::ChainActive().Tip()->GetBlockHash()));\n-            connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n-            peer.m_continuation_block.SetNull();\n+        {\n+            LOCK(peer.m_block_inv_mutex);\n+            // Trigger the peer node to send a getblocks request for the next batch of inventory\n+            if (inv.hash == peer.m_continuation_block) {\n+                // Send immediately. This must send even if redundant,\n+                // and we want it right after the last block so they don't\n+                // wait for other stuff first.\n+                std::vector<CInv> vInv;\n+                vInv.push_back(CInv(MSG_BLOCK, ::ChainActive().Tip()->GetBlockHash()));\n+                connman.PushMessage(&pfrom, msgMaker.Make(NetMsgType::INV, vInv));\n+                peer.m_continuation_block.SetNull();\n+            }\n         }\n     }\n }\n@@ -2799,12 +2802,11 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n                 break;\n             }\n             WITH_LOCK(peer->m_block_inv_mutex, peer->m_blocks_for_inv_relay.push_back(pindex->GetBlockHash()));\n-            if (--nLimit <= 0)\n-            {\n+            if (--nLimit <= 0) {\n                 // When this block is requested, we'll send an inv that'll\n                 // trigger the peer to getblocks the next batch of inventory.\n                 LogPrint(BCLog::NET, \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n-                peer->m_continuation_block = pindex->GetBlockHash();\n+                WITH_LOCK(peer->m_block_inv_mutex, {peer->m_continuation_block = pindex->GetBlockHash();});\n                 break;\n             }\n         }"
      },
      {
        "sha": "f1f01f913967d11349dfa55e995668dd7e0a635a",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3002b4af2b4fde63026f8f7c575452a5c989c662/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3002b4af2b4fde63026f8f7c575452a5c989c662/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=3002b4af2b4fde63026f8f7c575452a5c989c662",
        "patch": "@@ -73,14 +73,14 @@ struct Peer {\n      * message. If we can't announce via a `headers` message, we'll fall back to\n      * announcing via `inv`. */\n     std::vector<uint256> m_blocks_for_headers_relay GUARDED_BY(m_block_inv_mutex);\n-\n-    /** This peer's reported block height when we connected */\n-    std::atomic<int> m_starting_height{-1};\n     /** The final block hash that we sent in an `inv` message to this peer.\n      * When the peer requests this block, we send an `inv` message to trigger\n      * the peer to request the next sequence of block hashes.\n      * Most peers use headers-first syncing, which doesn't use this mechanism */\n-    uint256 m_continuation_block{};\n+    uint256 m_continuation_block GUARDED_BY(m_block_inv_mutex) {};\n+\n+    /** This peer's reported block height when we connected */\n+    std::atomic<int> m_starting_height{-1};\n \n     /** Set of txids to reconsider once their parent transactions have been accepted **/\n     std::set<uint256> m_orphan_work_set GUARDED_BY(g_cs_orphans);"
      }
    ]
  }
]