[
  {
    "sha": "fa9de370b17297d6dd542da627c8dd2b31aec340",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTlkZTM3MGIxNzI5N2Q2ZGQ1NDJkYTYyN2M4ZGQyYjMxYWVjMzQw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-09T22:04:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-13T13:28:56Z"
      },
      "message": "qa: Make tmpdir option an absolute path\n\nThis should fix issues with the multiwallet test and symlinks\nwhen the tmpdir is a relative path.\n\nRather than fixing os.symlink to work with paths relative to a\ndirectory descriptor, which does not work on Windows, normalize\nthe path instead.",
      "tree": {
        "sha": "30f1801e9f639622fdc6d7ab62d669880c87e30a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/30f1801e9f639622fdc6d7ab62d669880c87e30a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9de370b17297d6dd542da627c8dd2b31aec340",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9de370b17297d6dd542da627c8dd2b31aec340",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9de370b17297d6dd542da627c8dd2b31aec340",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9de370b17297d6dd542da627c8dd2b31aec340/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3a93270c55876cc88e1a3e2921e582acc6db318e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a93270c55876cc88e1a3e2921e582acc6db318e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a93270c55876cc88e1a3e2921e582acc6db318e"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0e843ee674227b19ff30509dd2b5dc43f57972d9",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9de370b17297d6dd542da627c8dd2b31aec340/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9de370b17297d6dd542da627c8dd2b31aec340/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=fa9de370b17297d6dd542da627c8dd2b31aec340",
        "patch": "@@ -102,8 +102,11 @@ def main(self):\n \n         check_json_precision()\n \n+        self.options.cachedir = os.path.abspath(self.options.cachedir)\n+\n         # Set up temp directory and start logging\n         if self.options.tmpdir:\n+            self.options.tmpdir = os.path.abspath(self.options.tmpdir)\n             os.makedirs(self.options.tmpdir, exist_ok=False)\n         else:\n             self.options.tmpdir = tempfile.mkdtemp(prefix=\"test\")"
      }
    ]
  },
  {
    "sha": "fafa0039708e15d1067be091b2bfc10195afa480",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZhMDAzOTcwOGUxNWQxMDY3YmUwOTFiMmJmYzEwMTk1YWZhNDgw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-11T20:14:49Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-10-13T13:29:18Z"
      },
      "message": "qa: Remove never used return value of sync_with_ping",
      "tree": {
        "sha": "9076398b43cf72c1e8469dff84757bb1beb5b37e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9076398b43cf72c1e8469dff84757bb1beb5b37e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafa0039708e15d1067be091b2bfc10195afa480",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafa0039708e15d1067be091b2bfc10195afa480",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafa0039708e15d1067be091b2bfc10195afa480",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafa0039708e15d1067be091b2bfc10195afa480/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa9de370b17297d6dd542da627c8dd2b31aec340",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9de370b17297d6dd542da627c8dd2b31aec340",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9de370b17297d6dd542da627c8dd2b31aec340"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9f61ce27da4a44f09e9355fb5587bbdd599a3e3f",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=fafa0039708e15d1067be091b2bfc10195afa480",
        "patch": "@@ -103,7 +103,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2[0]))\n         white_node.send_message(msg_block(blocks_h2[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         assert_equal(self.nodes[0].getblockcount(), 2)\n         assert_equal(self.nodes[1].getblockcount(), 2)\n         self.log.info(\"First height 2 block accepted by both nodes\")\n@@ -116,7 +117,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h2f[0]))\n         white_node.send_message(msg_block(blocks_h2f[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         for x in self.nodes[0].getchaintips():\n             if x['hash'] == blocks_h2f[0].hash:\n                 assert_equal(x['status'], \"headers-only\")\n@@ -135,7 +137,8 @@ def run_test(self):\n         test_node.send_message(msg_block(blocks_h3[0]))\n         white_node.send_message(msg_block(blocks_h3[1]))\n \n-        [ x.sync_with_ping() for x in [test_node, white_node] ]\n+        for x in [test_node, white_node]:\n+            x.sync_with_ping()\n         # Since the earlier block was not processed by node0, the new block\n         # can't be fully validated.\n         for x in self.nodes[0].getchaintips():"
      },
      {
        "sha": "453694c435e80d088cc68ad524856c07cf0e7fd7",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafa0039708e15d1067be091b2bfc10195afa480/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fafa0039708e15d1067be091b2bfc10195afa480",
        "patch": "@@ -1615,7 +1615,6 @@ def sync_with_ping(self, timeout=60):\n         test_function = lambda: self.last_message.get(\"pong\") and self.last_message[\"pong\"].nonce == self.ping_counter\n         wait_until(test_function, timeout=timeout, lock=mininode_lock)\n         self.ping_counter += 1\n-        return True\n \n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node"
      }
    ]
  }
]