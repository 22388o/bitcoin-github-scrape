[
  {
    "sha": "0fcf91ea1e23697736032caadc8e487e0ba6cfef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmNmOTFlYTFlMjM2OTc3MzYwMzJjYWFkYzhlNDg3ZTBiYTZjZmVm",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-01-03T15:14:22Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-01-03T15:17:28Z"
      },
      "message": "Fix issue #659, and cleanup wallet/command-line argument handling a bit",
      "tree": {
        "sha": "4738fbd6c1d7061b58b8492423e3d2fdce48b7f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4738fbd6c1d7061b58b8492423e3d2fdce48b7f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fcf91ea1e23697736032caadc8e487e0ba6cfef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fcf91ea1e23697736032caadc8e487e0ba6cfef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fcf91ea1e23697736032caadc8e487e0ba6cfef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fcf91ea1e23697736032caadc8e487e0ba6cfef/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4231eb217ca06e93cfb0875924b4383f92baf134",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4231eb217ca06e93cfb0875924b4383f92baf134",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4231eb217ca06e93cfb0875924b4383f92baf134"
      }
    ],
    "stats": {
      "total": 131,
      "additions": 86,
      "deletions": 45
    },
    "files": [
      {
        "sha": "0eb5b529f13e1c31ed6822144118a13a8320814a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 27,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0fcf91ea1e23697736032caadc8e487e0ba6cfef",
        "patch": "@@ -194,6 +194,7 @@ bool AppInit2(int argc, char* argv[])\n             \"  -maxconnections=<n>\\t  \" + _(\"Maintain at most <n> connections to peers (default: 125)\") + \"\\n\" +\n             \"  -addnode=<ip>    \\t  \"   + _(\"Add a node to connect to\") + \"\\n\" +\n             \"  -connect=<ip>    \\t\\t  \" + _(\"Connect only to the specified node\") + \"\\n\" +\n+            \"  -noirc           \\t  \"   + _(\"Don't find peers using internet relay chat\") + \"\\n\" +\n             \"  -nolisten        \\t  \"   + _(\"Don't accept connections from outside\") + \"\\n\" +\n             \"  -nodnsseed       \\t  \"   + _(\"Don't bootstrap list of peers using DNS\") + \"\\n\" +\n             \"  -banscore=<n>    \\t  \"   + _(\"Threshold for disconnecting misbehaving peers (default: 100)\") + \"\\n\" +\n@@ -248,7 +249,6 @@ bool AppInit2(int argc, char* argv[])\n     }\n \n     fDebug = GetBoolArg(\"-debug\");\n-    fAllowDNS = GetBoolArg(\"-dns\");\n \n #ifndef WIN32\n     fDaemon = GetBoolArg(\"-daemon\");\n@@ -267,10 +267,6 @@ bool AppInit2(int argc, char* argv[])\n #endif\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\");\n     fPrintToDebugger = GetBoolArg(\"-printtodebugger\");\n-\n-    fTestNet = GetBoolArg(\"-testnet\");\n-    bool fTOR = (fUseProxy && addrProxy.port == htons(9050));\n-    fNoListen = GetBoolArg(\"-nolisten\") || fTOR;\n     fLogTimestamps = GetBoolArg(\"-logtimestamps\");\n \n #ifndef QT_GUI\n@@ -332,17 +328,6 @@ bool AppInit2(int argc, char* argv[])\n         return false;\n     }\n \n-    // Bind to the port early so we can tell if another instance is already running.\n-    if (!fNoListen)\n-    {\n-        std::string strError;\n-        if (!BindListenPort(strError))\n-        {\n-            wxMessageBox(strError, \"Bitcoin\");\n-            return false;\n-        }\n-    }\n-\n     std::ostringstream strErrors;\n     //\n     // Load data files\n@@ -428,6 +413,10 @@ bool AppInit2(int argc, char* argv[])\n     // Add wallet transactions that aren't already in a block to mapTransactions\n     pwalletMain->ReacceptWalletTransactions();\n \n+    // Note: Bitcoin-QT stores several settings in the wallet, so we want\n+    // to load the wallet BEFORE parsing command-line arguments, so\n+    // the command-line/bitcoin.conf settings override GUI setting.\n+\n     //\n     // Parameters\n     //\n@@ -480,6 +469,44 @@ bool AppInit2(int argc, char* argv[])\n         }\n     }\n \n+    fTestNet = GetBoolArg(\"-testnet\");\n+    bool fTor = (fUseProxy && addrProxy.port == htons(9050));\n+    if (fTor)\n+    {\n+        // Use SoftSetArg here so user can override any of these if they wish.\n+        // Note: the GetBoolArg() calls for all of these must happen later.\n+        SoftSetArg(\"-nolisten\", true);\n+        SoftSetArg(\"-noirc\", true);\n+        SoftSetArg(\"-nodnsseed\", true);\n+        SoftSetArg(\"-noupnp\", true);\n+        SoftSetArg(\"-upnp\", false);\n+        SoftSetArg(\"-dns\", false);\n+    }\n+\n+    fAllowDNS = GetBoolArg(\"-dns\");\n+    fNoListen = GetBoolArg(\"-nolisten\");\n+\n+    if (fHaveUPnP)\n+    {\n+#if USE_UPNP\n+    if (GetBoolArg(\"-noupnp\"))\n+        fUseUPnP = false;\n+#else\n+    if (GetBoolArg(\"-upnp\"))\n+        fUseUPnP = true;\n+#endif\n+    }\n+\n+    if (!fNoListen)\n+    {\n+        std::string strError;\n+        if (!BindListenPort(strError))\n+        {\n+            wxMessageBox(strError, \"Bitcoin\");\n+            return false;\n+        }\n+    }\n+\n     if (mapArgs.count(\"-addnode\"))\n     {\n         BOOST_FOREACH(string strAddr, mapMultiArgs[\"-addnode\"])\n@@ -502,17 +529,6 @@ bool AppInit2(int argc, char* argv[])\n             wxMessageBox(_(\"Warning: -paytxfee is set very high.  This is the transaction fee you will pay if you send a transaction.\"), \"Bitcoin\", wxOK | wxICON_EXCLAMATION);\n     }\n \n-    if (fHaveUPnP)\n-    {\n-#if USE_UPNP\n-    if (GetBoolArg(\"-noupnp\"))\n-        fUseUPnP = false;\n-#else\n-    if (GetBoolArg(\"-upnp\"))\n-        fUseUPnP = true;\n-#endif\n-    }\n-\n     //\n     // Start the node\n     //"
      },
      {
        "sha": "fe96a90a1cfd46cd9c5049f7a0884755b5721edd",
        "filename": "src/irc.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/irc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/irc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/irc.cpp?ref=0fcf91ea1e23697736032caadc8e487e0ba6cfef",
        "patch": "@@ -264,19 +264,14 @@ void ThreadIRCSeed2(void* parg)\n     int nErrorWait = 10;\n     int nRetryWait = 10;\n     bool fNameInUse = false;\n-    bool fTOR = (fUseProxy && addrProxy.port == htons(9050));\n \n     while (!fShutdown)\n     {\n-        //CAddress addrConnect(\"216.155.130.130:6667\"); // chat.freenode.net\n         CAddress addrConnect(\"92.243.23.21\", 6667); // irc.lfnet.org\n-        if (!fTOR)\n-        {\n-            //struct hostent* phostent = gethostbyname(\"chat.freenode.net\");\n-            CAddress addrIRC(\"irc.lfnet.org\", 6667, true);\n-            if (addrIRC.IsValid())\n-                addrConnect = addrIRC;\n-        }\n+\n+        CAddress addrIRC(\"irc.lfnet.org\", 6667, true);\n+        if (addrIRC.IsValid())\n+            addrConnect = addrIRC;\n \n         SOCKET hSocket;\n         if (!ConnectSocket(addrConnect, hSocket))\n@@ -406,10 +401,6 @@ void ThreadIRCSeed2(void* parg)\n         closesocket(hSocket);\n         hSocket = INVALID_SOCKET;\n \n-        // IRC usually blocks TOR, so only try once\n-        if (fTOR)\n-            return;\n-\n         if (GetTime() - nStart > 20 * 60)\n         {\n             nErrorWait /= 3;"
      },
      {
        "sha": "6dab7e8c116f5d291b32950ac27049e6c8138a85",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=0fcf91ea1e23697736032caadc8e487e0ba6cfef",
        "patch": "@@ -1471,7 +1471,7 @@ void ThreadOpenConnections2(void* parg)\n         {\n             // Add seed nodes if IRC isn't working\n             bool fTOR = (fUseProxy && addrProxy.port == htons(9050));\n-            if (mapAddresses.empty() && (GetTime() - nStart > 60 || fTOR) && !fTestNet)\n+            if (mapAddresses.empty() && (GetTime() - nStart > 60 || fUseProxy) && !fTestNet)\n                 fAddSeeds = true;\n         }\n "
      },
      {
        "sha": "3805e077a1f365fda7a090bc61d4f0bcbb69dc9c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=0fcf91ea1e23697736032caadc8e487e0ba6cfef",
        "patch": "@@ -470,6 +470,23 @@ void ParseParameters(int argc, char* argv[])\n     }\n }\n \n+bool SoftSetArg(const std::string& strArg, const std::string& strValue)\n+{\n+    if (mapArgs.count(strArg))\n+        return false;\n+    mapArgs[strArg] = strValue;\n+    return true;\n+}\n+\n+bool SoftSetArg(const std::string& strArg, bool fValue)\n+{\n+    if (fValue)\n+        return SoftSetArg(strArg, std::string(\"1\"));\n+    else\n+        return SoftSetArg(strArg, std::string(\"0\"));\n+}\n+\n+\n string EncodeBase64(const unsigned char* pch, size_t len)\n {\n     static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";"
      },
      {
        "sha": "48fea023bfe8090360c2ac1a2c4c2f1778dc6728",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fcf91ea1e23697736032caadc8e487e0ba6cfef/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=0fcf91ea1e23697736032caadc8e487e0ba6cfef",
        "patch": "@@ -439,17 +439,34 @@ inline int64 GetArg(const std::string& strArg, int64 nDefault)\n     return nDefault;\n }\n \n-inline bool GetBoolArg(const std::string& strArg)\n+inline bool GetBoolArg(const std::string& strArg, bool fDefault=false)\n {\n     if (mapArgs.count(strArg))\n     {\n         if (mapArgs[strArg].empty())\n             return true;\n         return (atoi(mapArgs[strArg]) != 0);\n     }\n-    return false;\n-}\n-\n+    return fDefault;\n+}\n+\n+/**\n+ * Set an argument if it doesn't already have a value\n+ *\n+ * @param strArg Argument to set (e.g. \"-foo\")\n+ * @param strValue Value (e.g. \"1\")\n+ * @return true if argument gets set, false if it already had a value\n+ */\n+bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n+\n+/**\n+ * Set a boolean argument if it doesn't already have a value\n+ *\n+ * @param strArg Argument to set (e.g. \"-foo\")\n+ * @param fValue Value (e.g. false)\n+ * @return true if argument gets set, false if it already had a value\n+ */\n+bool SoftSetArg(const std::string& strArg, bool fValue);\n \n \n "
      }
    ]
  }
]