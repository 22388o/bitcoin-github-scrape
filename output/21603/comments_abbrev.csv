dergoegge,2021-04-05 12:49:06,"In response to @jnewbery's [comment](https://github.com/bitcoin/bitcoin/pull/19995#pullrequestreview-505540213)\n\n> I think I'd prefer log-shedding to be done globally, with a special log at the end of a log suppression period that tallies up which log locations have been suppressed.\n\nI disagree on the global schedding, i think the source location based schedding is over all the better appr",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813376120,813376120,
DrahtBot,2021-04-05 15:08:12,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16673](https://github.com/bitcoin/bitcoin/pull/16673) (Relog configuration args on debug.log rotation by LarryRuane)\n* ",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813443768,813443768,
jnewbery,2021-04-06 07:39:20,"> schedding should only kick in if there is an attack or something is horribly wrong, so i would think that almost all logs provided by users would be complete.\n\nRight, and those cases are exactly where we need the best possible logs.\n\n> We can also always tell if rate limiting is taking place since we log when it starts/stops and in those cases a partial log is better then no log.\n\nI ",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813901411,813901411,
practicalswift,2021-04-06 07:55:49,"Strongest possible Concept ACK: this mitigation will kill an entire bug class (the ""disk fill via logging"" bug class). \n\nThanks for taking up this work @dergoegge.\n\nWill test and review.",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813912391,813912391,
practicalswift,2021-04-06 08:27:05,"@jnewbery \n\n> I think I'd prefer log-shedding to be done globally, with a special log at the end of a log suppression period that tallies up which log locations have been suppressed.\n\nClarifying questions to fully understand what is suggested:\n\nLet's assume that log location A is a misplaced `LogPrintf` in a code path that the attacker can make us take.\n\nIn the case of an attacker ",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813933612,813933612,
practicalswift,2021-04-16 04:09:33,"@dergoegge \n\nThanks for your work on this PR!\n\nWould you be willing to implement also @jnewbery's suggestions as a separate PR?\n\nI tried to summarise his suggestion in https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813933612. I'm not certain I got it right though - @jnewbery, feel free to chime in :)\n\nI think it makes sense to do it as separate PR since it deviates in i",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-820891905,820891905,
dergoegge,2021-04-16 12:25:48,"> Would you be willing to implement also jnewbery's suggestions as a separate PR?\n\n@practicalswift Sure, thats a good idea :)\n",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-821138307,821138307,
rebroad,2021-04-17 09:45:04,concept ACK (not that I'm sure if my opinion is relevant) and I think this makes more sense than the global alternative.,https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-821797545,821797545,
DrahtBot,2021-05-03 09:32:28,<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\nüïµÔ∏è @sipa has been requested to review this pull request as specified in the REVIEWERS file.,https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-831141878,831141878,
practicalswift,2021-06-12 08:04:55,@dergoegge Thanks for working on this. Would you mind rebasing? I would like to review the updated version :),https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-860018394,860018394,
dergoegge,2021-06-12 11:02:37,"@practicalswift Rebased :)\n\nFor anyone reviewing this: I made a rpc [here](https://github.com/dergoegge/bitcoin/commit/8e6d15d6be06834d1f634f4a54ea646be8bc3491) that can log excessive amounts of ""a""s from different locations which might be useful for testing.\n`bitcoin-cli excessivelog <location (1-5)> <num_bytes>`\n\n‚ö†Ô∏èOne thing to note with that rpc is that the rate limiting logic still p",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-860037566,860037566,
Emzy,2021-06-16 17:01:44,"concept ACK \nI think this PR makes more sense than the global alternative, because global rate limiting would open another attack vector.\nAn attacker could trigger the global limit in one category and conceal another attack from the log.",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-862552556,862552556,
dergoegge,2021-06-17 19:07:31,"I moved the rate limiting logic into its own method.\n[log_ratelimiting.0](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.0) -> [log_ratelimiting.1](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.1)\n\n<details>\n<summary>git range-diff master log_ratelimiting.0 log_ratelimiting.1</summary>\n\n```\n1:  76c59a1cc ! 1:  a3a2cfd64 log: Mitigate disk filling attacks by r",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-863494151,863494151,
Thoragh,2021-06-19 12:48:29,"Concept ACK\n\nMaybe it would be good to set m_last_reset to the current time when it start limiting so it takes 1 hour until the next reset?",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-864401970,864401970,
dergoegge,2021-06-20 20:33:57,"> Maybe it would be good to set m_last_reset to the current time when it start limiting so it takes 1 hour until the next reset?\n\n@Thoragh Thanks for the suggestion, Im gonna test that out. It might make sense to do but it does make the approach a bit more conservative because a source location might have to wait longer before it can log again (at least 1hour). ",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-864608309,864608309,
dergoegge,2021-06-24 15:34:56,"[`log_ratelimiting.2`](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.2) -> [`log_ratelimiting.3`](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.3)\n\n<details>\n<summary>git range-diff log_ratelimiting.2...log_ratelimiting.3</summary>\n\n```c++\n1:  01ba3285d ! 1:  2cab018d9 log: Mitigate disk filling attacks by rate limiting LogPrintf\n    @@ src/init/common.cpp: ",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-867736556,867736556,
LarryRuane,2021-06-27 21:31:37,"Reviewers, please take a look at this alternate approach: https://github.com/bitcoin/bitcoin/pull/22350.",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-869226443,869226443,
narula,2021-07-14 17:33:09,fwiw prefer the more traditional log rotation approach in #22350; i find it cognitively easier to think in terms of stale logs rather than source suppression.,https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-880079584,880079584,
practicalswift,2021-10-05 16:11:37,"@dergoegge Would you mind rebasing? I would like to re-review it after rebase :)\n\nFWIW I prefer this solution to the more complex log rotation approach taken in #22350. I find the simpler approach taken in this PR much easier to reason about. This PR solves the issue at hand in the simplest possible way IMO.",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-934552951,934552951,
dergoegge,2021-10-05 18:49:06,"@practicalswift Thanks for the nudge! :)\n\nRebased on latest master.",https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-934677093,934677093,
adamjonas,2021-04-06 22:08:27,"this line is tripping up the linter:\n```\nsrc/test/logging_tests.cpp: Expected 0 argument(s) after format string but found 1 argument(s): LogPrintf(fmt, args...)\n```",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r608211735,608211735,src/test/logging_tests.cpp
adamjonas,2021-04-14 14:26:09,Both windows CI builds are failing on this line. See [cirrus](https://cirrus-ci.com/task/6258137339527168?logs=ci#L642).,https://github.com/bitcoin/bitcoin/pull/21603#discussion_r613296430,613296430,src/test/logging_tests.cpp
LarryRuane,2021-06-22 01:17:13,"```suggestion\n    argsman.AddArg(""-logratelimiting"", strprintf(""Rate limit debug logging to disk (default: %u)"", DEFAULT_LOGRATELIMITING), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\n```\nOptional change; most of the other boolean arguments do specify `ALLOW_ANY`, I don't know why. But since `ALLOW_BOOL` exists, may as well use it -- if nothing else, it documents that the argument is ",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655806917,655806917,src/init/common.cpp
LarryRuane,2021-06-22 04:25:14,"```suggestion\n\n    // Log 1024-character lines (1023 plus newline) to make the math simple.\n```",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655865672,655865672,src/test/logging_tests.cpp
LarryRuane,2021-06-22 05:24:44,"```suggestion\nsize_t GetLogFileSize()\n```",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655885112,655885112,src/test/logging_tests.cpp
LarryRuane,2021-06-22 05:33:15,"I would prefer `struct` here to `std::pair`. I think `pair` should be used in situations where two items are grouped together for some deep, fundamental reason, for example, a map key and its value. If you just happen to want to combine two things, but later it could be (say) three, then I think a `struct` is better. Also, it's easier to read, `location.file` and `location.line`.",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655888433,655888433,src/logging.h
LarryRuane,2021-06-22 05:38:45,It seems like this doesn't need to be atomic.,https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655890465,655890465,src/logging.h
LarryRuane,2021-06-22 06:08:36,What's this for? Maybe add a comment.,https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655903333,655903333,src/logging.cpp
LarryRuane,2021-06-22 06:14:54,Comment needed describing what this function does at a high level and documenting the return value.,https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655906309,655906309,src/logging.cpp
LarryRuane,2021-06-22 06:26:45,Consider moving this down to just before it's needed.,https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655912029,655912029,src/logging.cpp
LarryRuane,2021-06-22 06:32:53,"I'm not sure it's worth creating this variable `skip_writing_to_disk_due_to_rate_limiting`, maybe:\n```\nif (m_print_to_file && (skip_disk_usage_rate_limiting || !RateLimit(str_prefixed, logging_function, source_location))) {\n```",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655915216,655915216,src/logging.cpp
jonatack,2021-06-22 07:04:12,Good point. I think the more specific ones were added later and the idea is to prefer using them for new code.,https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655933116,655933116,src/init/common.cpp
Thoragh,2021-06-22 15:08:18,"If i understand the code correctly, `dont_skip` is used to make sure the hourly reset messages are printed.\nMaybe the code could be simplified by removing `dont_skip` and calling `LogPrintf` instead for the hourly messages?\n",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r656316492,656316492,src/logging.cpp
dergoegge,2021-06-23 22:50:38,"We want the rate limiting messages like ""restarting logging from..."" to also be printed to the console, so we have to call `RateLimit` before that and store the result. I am still gonna change the name of `skip_writing_to_disk_due_to_rate_limiting` because its a bit long.",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r657510892,657510892,src/logging.cpp
dergoegge,2021-06-23 23:10:42,"That is correct!\nBut this does unfortunately not work because we hold a lock here https://github.com/bitcoin/bitcoin/blob/a2916ae5043436d3fd22acb44c5663227fa7eb90/src/logging.cpp#L317\n\nA recursive call to `LogPrintf` also feels a bit dangerous to me.",https://github.com/bitcoin/bitcoin/pull/21603#discussion_r657518350,657518350,src/logging.cpp
dergoegge,2021-06-24 15:36:50,There is a comment in `src/logging.h`.,https://github.com/bitcoin/bitcoin/pull/21603#discussion_r658061925,658061925,src/logging.cpp
