[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813376120",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813376120",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 813376120,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzM3NjEyMA==",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-05T12:49:06Z",
    "updated_at": "2021-04-05T12:49:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "In response to @jnewbery's [comment](https://github.com/bitcoin/bitcoin/pull/19995#pullrequestreview-505540213)\r\n\r\n> I think I'd prefer log-shedding to be done globally, with a special log at the end of a log suppression period that tallies up which log locations have been suppressed.\r\n\r\nI disagree on the global schedding, i think the source location based schedding is over all the better approach.\r\nI agree with your point that it could be confusing to drop some logs in the context of user issues but schedding should only kick in if there is an attack or something is horribly wrong, so i would think that almost all logs provided by users would be complete. We can also always tell if rate limiting is taking place since we log when it starts/stops and in those cases a partial log is better then no log.\r\n\r\n(This is obviously mostly an opinion and I am totally willing to be convinced of global log-schedding if enough reviewers favor it)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813376120/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813443768",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813443768",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 813443768,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzQ0Mzc2OA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-05T15:08:12Z",
    "updated_at": "2021-12-01T07:00:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16673](https://github.com/bitcoin/bitcoin/pull/16673) (Relog configuration args on debug.log rotation by LarryRuane)\n* [#15719](https://github.com/bitcoin/bitcoin/pull/15719) (Wallet passive startup by ryanofsky)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813443768/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813901411",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813901411",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 813901411,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzkwMTQxMQ==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-06T07:39:20Z",
    "updated_at": "2021-04-06T07:39:20Z",
    "author_association": "MEMBER",
    "body": "> schedding should only kick in if there is an attack or something is horribly wrong, so i would think that almost all logs provided by users would be complete.\r\n\r\nRight, and those cases are exactly where we need the best possible logs.\r\n\r\n> We can also always tell if rate limiting is taking place since we log when it starts/stops and in those cases a partial log is better then no log.\r\n\r\nI guarantee you that not everyone will know this and most people will miss a single log line saying \"rate-limiting log x\".\r\n\r\nI can only speak from my own experience of supporting network equipment for several years - partial logs are often worse than no logs at all since they're so misleading.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813901411/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813912391",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813912391",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 813912391,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzkxMjM5MQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-06T07:55:49Z",
    "updated_at": "2021-04-06T07:55:49Z",
    "author_association": "CONTRIBUTOR",
    "body": "Strongest possible Concept ACK: this mitigation will kill an entire bug class (the \"disk fill via logging\" bug class). \r\n\r\nThanks for taking up this work @dergoegge.\r\n\r\nWill test and review.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813912391/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813933612",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813933612",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 813933612,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgxMzkzMzYxMg==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-06T08:27:05Z",
    "updated_at": "2021-04-06T08:27:43Z",
    "author_association": "CONTRIBUTOR",
    "body": "@jnewbery \r\n\r\n> I think I'd prefer log-shedding to be done globally, with a special log at the end of a log suppression period that tallies up which log locations have been suppressed.\r\n\r\nClarifying questions to fully understand what is suggested:\r\n\r\nLet's assume that log location A is a misplaced `LogPrintf` in a code path that the attacker can make us take.\r\n\r\nIn the case of an attacker using log location A to fill our disk by making us log from there repeatedly, is the suggestion then that _all_ log locations should be suppressed during the suppression period (instead of suppressing only the \"attacker controlled\" log location A)?\r\n\r\nTo make your suggestion clear: could you exemplify what the special log entry at the end of the log suppression period would look like? (A patch or even a separate PR would be even better, but an example log entry would probably clarify enough!)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/813933612/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820891905",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-820891905",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 820891905,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMDg5MTkwNQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-16T04:09:33Z",
    "updated_at": "2021-04-16T04:09:33Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dergoegge \r\n\r\nThanks for your work on this PR!\r\n\r\nWould you be willing to implement also @jnewbery's suggestions as a separate PR?\r\n\r\nI tried to summarise his suggestion in https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-813933612. I'm not certain I got it right though - @jnewbery, feel free to chime in :)\r\n\r\nI think it makes sense to do it as separate PR since it deviates in important ways from the original suggestion. By having two separate PRs we would see which of the two approaches to address this type of attack that have consensus support.\r\n\r\nPersonally I think I could live with both approaches: as long as we kill the disk-fill-via-logging bug class sooner rather than later I'm happy :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820891905/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821138307",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-821138307",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 821138307,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTEzODMwNw==",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-16T12:25:48Z",
    "updated_at": "2021-04-16T12:25:48Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Would you be willing to implement also jnewbery's suggestions as a separate PR?\r\n\r\n@practicalswift Sure, thats a good idea :)\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821138307/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821797545",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-821797545",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 821797545,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgyMTc5NzU0NQ==",
    "user": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?u=6a4a31aaddbc438e053c52d084a698a5f622f1ea&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-04-17T09:45:04Z",
    "updated_at": "2021-04-17T09:45:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "concept ACK (not that I'm sure if my opinion is relevant) and I think this makes more sense than the global alternative.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/821797545/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141878",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-831141878",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 831141878,
    "node_id": "MDEyOklzc3VlQ29tbWVudDgzMTE0MTg3OA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-05-03T09:32:28Z",
    "updated_at": "2021-05-03T09:32:28Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--4a62be1de6b64f3ed646cdc7932c8cf5-->\n\ud83d\udd75\ufe0f @sipa has been requested to review this pull request as specified in the REVIEWERS file.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/831141878/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860018394",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-860018394",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 860018394,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDAxODM5NA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-12T08:04:55Z",
    "updated_at": "2021-06-12T08:04:55Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dergoegge Thanks for working on this. Would you mind rebasing? I would like to review the updated version :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860018394/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860037566",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-860037566",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 860037566,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDAzNzU2Ng==",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-12T11:02:37Z",
    "updated_at": "2021-06-12T11:02:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift Rebased :)\r\n\r\nFor anyone reviewing this: I made a rpc [here](https://github.com/dergoegge/bitcoin/commit/8e6d15d6be06834d1f634f4a54ea646be8bc3491) that can log excessive amounts of \"a\"s from different locations which might be useful for testing.\r\n`bitcoin-cli excessivelog <location (1-5)> <num_bytes>`\r\n\r\n\u26a0\ufe0fOne thing to note with that rpc is that the rate limiting logic still prints the last message that triggered the limiting to disk, so something like `bitcoin-cli excessivelog 1 536870912` would still log ~512MiB to disk. Logging to console is also never suppressed (unless -printtoconsole=0)  \u26a0\ufe0f\r\n\r\nA simple example to use the rpc:\r\n```bash\r\nbitcoin-cli excessivelog 1 1048500 # log just under 1MiB\r\nbitcoin-cli excessivelog 1 100 # this should get the total amount logged above 1MiB and the rate limiting logic should kick in\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/860037566/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862552556",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-862552556",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 862552556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MjU1MjU1Ng==",
    "user": {
      "login": "Emzy",
      "id": 1223908,
      "node_id": "MDQ6VXNlcjEyMjM5MDg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1223908?u=66477849292f33a9134f23b8d8000f0492d591b3&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Emzy",
      "html_url": "https://github.com/Emzy",
      "followers_url": "https://api.github.com/users/Emzy/followers",
      "following_url": "https://api.github.com/users/Emzy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Emzy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Emzy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Emzy/subscriptions",
      "organizations_url": "https://api.github.com/users/Emzy/orgs",
      "repos_url": "https://api.github.com/users/Emzy/repos",
      "events_url": "https://api.github.com/users/Emzy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Emzy/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-16T17:01:44Z",
    "updated_at": "2021-06-16T17:01:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "concept ACK \r\nI think this PR makes more sense than the global alternative, because global rate limiting would open another attack vector.\r\nAn attacker could trigger the global limit in one category and conceal another attack from the log.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862552556/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863494151",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-863494151",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 863494151,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2MzQ5NDE1MQ==",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-17T19:07:31Z",
    "updated_at": "2021-06-17T19:07:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "I moved the rate limiting logic into its own method.\r\n[log_ratelimiting.0](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.0) -> [log_ratelimiting.1](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.1)\r\n\r\n<details>\r\n<summary>git range-diff master log_ratelimiting.0 log_ratelimiting.1</summary>\r\n\r\n```\r\n1:  76c59a1cc ! 1:  a3a2cfd64 log: Mitigate disk filling attacks by rate limiting LogPrintf\r\n    @@ Metadata\r\n      ## Commit message ##\r\n         log: Mitigate disk filling attacks by rate limiting LogPrintf\r\n     \r\n    +    Co-authored-by: dergoegge <n.goeggi@gmail.com>\r\n    +\r\n      ## src/init/common.cpp ##\r\n     @@ src/init/common.cpp: void AddLoggingArgs(ArgsManager& argsman)\r\n          argsman.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\r\n    @@ src/logging.cpp: namespace BCLog {\r\n     -void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\r\n     +static constexpr uint64_t HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION{1024 * 1024};\r\n     +\r\n    ++bool BCLog::Logger::RateLimit(std::string& str, const std::string& logging_function, const SourceLocation& source_location)\r\n    ++{\r\n    ++    if (!m_rate_limiting) {\r\n    ++        // Rate limiting is disabled.\r\n    ++        return false;\r\n    ++    }\r\n    ++\r\n    ++    const std::chrono::seconds now = GetTime<std::chrono::seconds>();\r\n    ++    QuotaUsage& quota_usage = m_quota_usage_per_source_location[source_location];\r\n    ++    // Is the quota exceeded before this log call?\r\n    ++    bool quota_exceeded_before = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    ++\r\n    ++    bool dont_skip = false;\r\n    ++    // Every hour the quota usage for a source location is reset.\r\n    ++    if ((now - quota_usage.m_last_reset) > std::chrono::hours{1}) {\r\n    ++        // Should logging to disk continue to be disabled?\r\n    ++        bool quota_still_exceeded = quota_usage.m_bytes_dropped > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    ++\r\n    ++        if (quota_still_exceeded) {\r\n    ++            str = LogTimestampStr(strprintf(\r\n    ++                \"Not restarting logging from %s:%d (%s): \"\r\n    ++                \"because %d messages (%d MiB) were dropped during the last hour which still exceeds the limit of %d MiB.\\n\",\r\n    ++                source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped,\r\n    ++                quota_usage.m_bytes_dropped / (1024 * 1024), HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024)));\r\n    ++        } else if (quota_exceeded_before) {\r\n    ++            str = LogTimestampStr(strprintf(\r\n    ++                \"Restarting logging from %s:%d (%s): \"\r\n    ++                \"%d messages (%d MiB) were dropped during the last hour.\\n\"\r\n    ++                \"%s\",\r\n    ++                source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped,\r\n    ++                quota_usage.m_bytes_dropped / (1024 * 1024), str));\r\n    ++            --m_rate_limited_locations;\r\n    ++        }\r\n    ++\r\n    ++        // Dont skip the reset logs.\r\n    ++        dont_skip = quota_exceeded_before || quota_still_exceeded;\r\n    ++\r\n    ++        // Logging to disk is only re-enabled if the number of dropped bytes did not exceed the limit.\r\n    ++        if (!quota_still_exceeded) quota_usage.m_bytes_logged = 0;\r\n    ++        quota_usage.m_messages_dropped = 0;\r\n    ++        quota_usage.m_bytes_dropped = 0;\r\n    ++        quota_usage.m_last_reset = now;\r\n    ++    }\r\n    ++\r\n    ++    if (!quota_exceeded_before) quota_usage.m_bytes_logged += str.size();\r\n    ++\r\n    ++    bool quota_exceeded_after = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    ++    if (!quota_exceeded_after) {\r\n    ++        // The limits were not exceeded and the message should not be dropped.\r\n    ++        return false;\r\n    ++    }\r\n    ++\r\n    ++    if (!quota_exceeded_before) {\r\n    ++        str = LogTimestampStr(strprintf(\r\n    ++            \"Excessive logging detected from %s:%d (%s): \"\r\n    ++            \">%d MiB logged during the last hour. \"\r\n    ++            \"Suppressing logging to disk from this source location for up to one hour. \"\r\n    ++            \"Console logging unaffected. Last log entry: %s\",\r\n    ++            source_location.first, source_location.second, logging_function,\r\n    ++            HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024), str));\r\n    ++        ++m_rate_limited_locations;\r\n    ++    } else if (!dont_skip) {\r\n    ++        // The log message should be dropped.\r\n    ++        quota_usage.m_messages_dropped++;\r\n    ++        quota_usage.m_bytes_dropped += str.size();\r\n    ++        return true;\r\n    ++    }\r\n    ++\r\n    ++    return false;\r\n    ++}\r\n    ++\r\n     +void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const SourceLocation& source_location, const bool skip_disk_usage_rate_limiting)\r\n      {\r\n          StdLockGuard scoped_lock(m_cs);\r\n    @@ src/logging.cpp: void BCLog::Logger::LogPrintStr(const std::string& str, const s\r\n      \r\n     +    // Rate limit logging to disk to avoid disk filling attacks.\r\n     +    bool skip_writing_to_disk_due_to_rate_limiting{false};\r\n    -+    if (!skip_disk_usage_rate_limiting && m_rate_limiting) {\r\n    -+        const std::chrono::seconds now = GetTime<std::chrono::seconds>();\r\n    -+        QuotaUsage& quota_usage = m_quota_usage_per_source_location[source_location];\r\n    -+        // Is the quota exceeded before this log call?\r\n    -+        bool quota_exceeded_before = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    -+\r\n    -+        bool dont_skip = false;\r\n    -+        // Every hour the quota usage for a source location is reset.\r\n    -+        if ((now - quota_usage.m_last_reset) > std::chrono::hours{1}) {\r\n    -+            // Should logging to disk continue to be disabled?\r\n    -+            bool quota_still_exceeded = quota_usage.m_bytes_dropped > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    -+\r\n    -+            if (quota_still_exceeded) {\r\n    -+                str_prefixed = LogTimestampStr(strprintf(\"Not restarting logging from %s:%d (%s): because %d messages (%d MiB) were dropped during the last hour which still exceeds the limit of %d MiB.\\n\", source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped, quota_usage.m_bytes_dropped / (1024 * 1024), HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024)));\r\n    -+            } else if (quota_exceeded_before) {\r\n    -+                str_prefixed = LogTimestampStr(strprintf(\"Restarting logging from %s:%d (%s): %d messages (%d MiB) were dropped during the last hour.\\n\", source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped, quota_usage.m_bytes_dropped / (1024 * 1024)));\r\n    -+            }\r\n    -+\r\n    -+            // Dont skip the reset logs.\r\n    -+            dont_skip = quota_exceeded_before || quota_still_exceeded;\r\n    -+\r\n    -+            // Logging to disk is only re-enabled if the number of dropped bytes did not exceed the limit.\r\n    -+            if (!quota_still_exceeded) quota_usage.m_bytes_logged = 0;\r\n    -+            quota_usage.m_messages_dropped = 0;\r\n    -+            quota_usage.m_bytes_dropped = 0;\r\n    -+            quota_usage.m_last_reset = now;\r\n    -+        }\r\n    ++    if (!skip_disk_usage_rate_limiting) {\r\n    ++        skip_writing_to_disk_due_to_rate_limiting = RateLimit(str_prefixed, logging_function, source_location);\r\n    ++    }\r\n     +\r\n    -+        if (!quota_exceeded_before) quota_usage.m_bytes_logged += str_prefixed.size();\r\n    -+\r\n    -+        bool quota_exceeded_after = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\r\n    -+        if (quota_exceeded_after) {\r\n    -+            if (!quota_exceeded_before) {\r\n    -+                str_prefixed = LogTimestampStr(strprintf(\"Excessive logging detected from %s:%d (%s): >%d MiB logged during the last hour. Suppressing logging to disk from this source location for up to one hour. Console logging unaffected. Last log entry: %s\", source_location.first, source_location.second, logging_function, HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024), str_prefixed));\r\n    -+            } else if (!dont_skip) {\r\n    -+                skip_writing_to_disk_due_to_rate_limiting = !dont_skip;\r\n    -+                quota_usage.m_messages_dropped++;\r\n    -+                quota_usage.m_bytes_dropped += str_prefixed.size();\r\n    -+            }\r\n    -+        }\r\n    ++    if (m_rate_limited_locations > 0) {\r\n    ++        str_prefixed.insert(0, \"[*] \");\r\n     +    }\r\n     +\r\n          m_started_new_line = !str.empty() && str[str.size()-1] == '\\n';\r\n    @@ src/logging.h: namespace BCLog {\r\n              std::list<std::string> m_msgs_before_open GUARDED_BY(m_cs);\r\n              bool m_buffering GUARDED_BY(m_cs) = true; //!< Buffer messages before logging can be started.\r\n     +        std::unordered_map<SourceLocation, QuotaUsage, SourceLocationHasher> m_quota_usage_per_source_location GUARDED_BY(m_cs);\r\n    ++        std::atomic_int m_rate_limited_locations;\r\n      \r\n              /**\r\n               * m_started_new_line is a state variable that will suppress printing of\r\n    @@ src/logging.h: namespace BCLog {\r\n              fs::path m_file_path;\r\n              std::atomic<bool> m_reopen_file{false};\r\n      \r\n    ++        /** Evaluate if a log message should not be printed to disk.\r\n    ++         *\r\n    ++         * @param[in,out] The log message.\r\n    ++         *                The rate limiting logic message may change the message\r\n    ++         *                to signal the start or end of a supression period.\r\n    ++         * @param[in]     The function from which the log message originated.\r\n    ++         * @param[in]     The source location from which the log message originated.\r\n    ++         */\r\n    ++        bool RateLimit(std::string& str, const std::string& logging_function, const SourceLocation& source_location) EXCLUSIVE_LOCKS_REQUIRED(m_cs);\r\n    ++\r\n              /** Send a string to the log output */\r\n     -        void LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line);\r\n     +        void LogPrintStr(const std::string& str, const std::string& logging_function, const SourceLocation& source_location, const bool skip_disk_usage_rate_limiting);\r\n2:  855d05e43 = 2:  5b46965aa test: Add logging test for rate limiting\r\n```\r\n</details>\r\n\r\nI also decided to move forward with the approach in this PR and will close #21706. See the updated PR description for reasoning.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863494151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864401970",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-864401970",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 864401970,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDQwMTk3MA==",
    "user": {
      "login": "Thoragh",
      "id": 12678227,
      "node_id": "MDQ6VXNlcjEyNjc4MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/12678227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Thoragh",
      "html_url": "https://github.com/Thoragh",
      "followers_url": "https://api.github.com/users/Thoragh/followers",
      "following_url": "https://api.github.com/users/Thoragh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Thoragh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Thoragh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Thoragh/subscriptions",
      "organizations_url": "https://api.github.com/users/Thoragh/orgs",
      "repos_url": "https://api.github.com/users/Thoragh/repos",
      "events_url": "https://api.github.com/users/Thoragh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Thoragh/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-19T12:48:29Z",
    "updated_at": "2021-06-19T12:48:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nMaybe it would be good to set m_last_reset to the current time when it start limiting so it takes 1 hour until the next reset?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864401970/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864608309",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-864608309",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 864608309,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NDYwODMwOQ==",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-20T20:33:57Z",
    "updated_at": "2021-06-20T20:33:57Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Maybe it would be good to set m_last_reset to the current time when it start limiting so it takes 1 hour until the next reset?\r\n\r\n@Thoragh Thanks for the suggestion, Im gonna test that out. It might make sense to do but it does make the approach a bit more conservative because a source location might have to wait longer before it can log again (at least 1hour). ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864608309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867736556",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-867736556",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 867736556,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2NzczNjU1Ng==",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-24T15:34:56Z",
    "updated_at": "2021-06-24T15:34:56Z",
    "author_association": "CONTRIBUTOR",
    "body": "[`log_ratelimiting.2`](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.2) -> [`log_ratelimiting.3`](https://github.com/dergoegge/bitcoin/tree/log_ratelimiting.3)\r\n\r\n<details>\r\n<summary>git range-diff log_ratelimiting.2...log_ratelimiting.3</summary>\r\n\r\n```c++\r\n1:  01ba3285d ! 1:  2cab018d9 log: Mitigate disk filling attacks by rate limiting LogPrintf\r\n    @@ src/init/common.cpp: void AddLoggingArgs(ArgsManager& argsman)\r\n          argsman.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\r\n          argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\r\n          argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\r\n    -+    argsman.AddArg(\"-logratelimiting\", strprintf(\"Rate limit debug logging to disk (default: %u)\", DEFAULT_LOGRATELIMITING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\r\n    ++    argsman.AddArg(\"-logratelimiting\", strprintf(\"Rate limit debug logging to disk (default: %u)\", DEFAULT_LOGRATELIMITING), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\r\n      }\r\n      \r\n      void SetLoggingOptions(const ArgsManager& args)\r\n    @@ src/logging.cpp: namespace BCLog {\r\n     +            str = LogTimestampStr(strprintf(\r\n     +                \"Not restarting logging from %s:%d (%s): \"\r\n     +                \"because %d messages (%d MiB) were dropped during the last hour which still exceeds the limit of %d MiB.\\n\",\r\n    -+                source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped,\r\n    ++                source_location.m_file, source_location.m_line, logging_function, quota_usage.m_messages_dropped,\r\n     +                quota_usage.m_bytes_dropped / (1024 * 1024), HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024)));\r\n     +        } else if (quota_exceeded_before) {\r\n     +            str = LogTimestampStr(strprintf(\r\n     +                \"Restarting logging from %s:%d (%s): \"\r\n     +                \"%d messages (%d MiB) were dropped during the last hour.\\n\"\r\n     +                \"%s\",\r\n    -+                source_location.first, source_location.second, logging_function, quota_usage.m_messages_dropped,\r\n    ++                source_location.m_file, source_location.m_line, logging_function, quota_usage.m_messages_dropped,\r\n     +                quota_usage.m_bytes_dropped / (1024 * 1024), str));\r\n     +            --m_rate_limited_locations;\r\n     +        }\r\n    @@ src/logging.cpp: namespace BCLog {\r\n     +            \">%d MiB logged during the last hour. \"\r\n     +            \"Suppressing logging to disk from this source location for up to one hour. \"\r\n     +            \"Console logging unaffected. Last log entry: %s\",\r\n    -+            source_location.first, source_location.second, logging_function,\r\n    ++            source_location.m_file, source_location.m_line, logging_function,\r\n     +            HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION / (1024 * 1024), str));\r\n     +        ++m_rate_limited_locations;\r\n     +    } else if (!dont_skip) {\r\n    @@ src/logging.cpp: namespace BCLog {\r\n      \r\n          if (m_log_sourcelocations && m_started_new_line) {\r\n     -        str_prefixed.insert(0, \"[\" + RemovePrefix(source_file, \"./\") + \":\" + ToString(source_line) + \"] [\" + logging_function + \"] \");\r\n    -+        str_prefixed.insert(0, \"[\" + RemovePrefix(source_location.first, \"./\") + \":\" + ToString(source_location.second) + \"] [\" + logging_function + \"] \");\r\n    ++        str_prefixed.insert(0, \"[\" + RemovePrefix(source_location.m_file, \"./\") + \":\" + ToString(source_location.m_line) + \"] [\" + logging_function + \"] \");\r\n          }\r\n      \r\n          if (m_log_threadnames && m_started_new_line) {\r\n    @@ src/logging.cpp: void BCLog::Logger::LogPrintStr(const std::string& str, const s\r\n          str_prefixed = LogTimestampStr(str_prefixed);\r\n      \r\n     +    // Rate limit logging to disk to avoid disk filling attacks.\r\n    -+    bool skip_writing_to_disk_due_to_rate_limiting{false};\r\n    -+    if (!skip_disk_usage_rate_limiting) {\r\n    -+        skip_writing_to_disk_due_to_rate_limiting = RateLimit(str_prefixed, logging_function, source_location);\r\n    -+    }\r\n    ++    bool log_quota_exceeded = !skip_disk_usage_rate_limiting &&\r\n    ++                              RateLimit(str_prefixed, logging_function, source_location);\r\n     +\r\n    ++    // To avoid confusion caused by dropped log messages when debugging an issue, we prefix log lines with \"[*]\"\r\n    ++    // when there are any supressed source locations.\r\n     +    if (m_rate_limited_locations > 0) {\r\n     +        str_prefixed.insert(0, \"[*] \");\r\n     +    }\r\n    @@ src/logging.cpp: void BCLog::Logger::LogPrintStr(const std::string& str, const s\r\n              cb(str_prefixed);\r\n          }\r\n     -    if (m_print_to_file) {\r\n    -+    if (m_print_to_file && !skip_writing_to_disk_due_to_rate_limiting) {\r\n    ++    if (m_print_to_file && !log_quota_exceeded) {\r\n              assert(m_fileout != nullptr);\r\n      \r\n              // reopen the log file, if requested\r\n    @@ src/logging.h: struct LogCategory {\r\n      };\r\n      \r\n     +// Replace with std::source_location when switching to C++20.\r\n    -+using SourceLocation = std::pair<const char*, int>;\r\n    ++struct SourceLocation {\r\n    ++    const char* m_file{nullptr};\r\n    ++    int m_line{0};\r\n    ++\r\n    ++    bool operator==(const SourceLocation& other) const\r\n    ++    {\r\n    ++        return m_file && other.m_file &&\r\n    ++               std::strcmp(m_file, other.m_file) == 0 &&\r\n    ++               m_line == other.m_line;\r\n    ++    }\r\n    ++};\r\n    ++\r\n     +struct SourceLocationHasher {\r\n     +    size_t operator()(const SourceLocation& source_location) const noexcept\r\n     +    {\r\n     +        // Use CSipHasher(0, 0) as a simple way to get uniform distribution.\r\n    -+        return static_cast<size_t>(CSipHasher(0, 0).Write(std::hash<const char*>{}(source_location.first)).Write(std::hash<int>{}(source_location.second)).Finalize());\r\n    ++        return static_cast<size_t>(CSipHasher(0, 0).Write(std::hash<const char*>{}(source_location.m_file)).Write(std::hash<int>{}(source_location.m_line)).Finalize());\r\n     +    }\r\n     +};\r\n     +\r\n    @@ src/logging.h: namespace BCLog {\r\n              std::list<std::string> m_msgs_before_open GUARDED_BY(m_cs);\r\n              bool m_buffering GUARDED_BY(m_cs) = true; //!< Buffer messages before logging can be started.\r\n     +        std::unordered_map<SourceLocation, QuotaUsage, SourceLocationHasher> m_quota_usage_per_source_location GUARDED_BY(m_cs);\r\n    -+        std::atomic_int m_rate_limited_locations;\r\n    ++        int m_rate_limited_locations GUARDED_BY(m_cs) = 0;\r\n      \r\n              /**\r\n               * m_started_new_line is a state variable that will suppress printing of\r\n    @@ src/logging.h: namespace BCLog {\r\n      \r\n     +        /** Evaluate if a log message should not be printed to disk.\r\n     +         *\r\n    -+         * @param[in,out] str                 The log message.\r\n    -+         *                                    The rate limiting logic message may change the message\r\n    -+         *                                    to signal the start or end of a supression period.\r\n    -+         * @param[in]     logging_function    The function name from which the log message originated.\r\n    -+         * @param[in]     source_location     The source location from which the log message originated.\r\n    ++         * @param[in,out] str              The log message.\r\n    ++         *                                 The rate limiting logic message may change the message\r\n    ++         *                                 to signal the start or end of a supression period.\r\n    ++         * @param[in]     logging_function The function name from which the log message originated.\r\n    ++         * @param[in]     source_location  The source location from which the log message originated.\r\n    ++         *\r\n    ++         * @return true if the message should not be printed to disk, false otherwise.\r\n     +         */\r\n     +        bool RateLimit(std::string& str, const std::string& logging_function, const SourceLocation& source_location) EXCLUSIVE_LOCKS_REQUIRED(m_cs);\r\n     +\r\n    @@ src/logging.h: static inline void LogPrintf_(const std::string& logging_function\r\n              }\r\n     -        LogInstance().LogPrintStr(log_msg, logging_function, source_file, source_line);\r\n     +\r\n    -+        const SourceLocation source_location = std::make_pair(source_file, source_line);\r\n    ++        const SourceLocation source_location{source_file, source_line};\r\n     +        LogInstance().LogPrintStr(log_msg, logging_function, source_location, skip_disk_usage_rate_limiting);\r\n          }\r\n      }\r\n2:  a2916ae50 ! 2:  e51bd0bdc test: Add logging test for rate limiting\r\n    @@ src/test/logging_tests.cpp: BOOST_AUTO_TEST_CASE(logging_timer)\r\n          BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000.00\u03bcs)\");\r\n      }\r\n      \r\n    -+void GetLogFileSize(size_t& size)\r\n    ++size_t GetLogFileSize()\r\n     +{\r\n     +    boost::system::error_code ec;\r\n    -+    size = fs::file_size(LogInstance().m_file_path, ec);\r\n    ++    size_t size = fs::file_size(LogInstance().m_file_path, ec);\r\n     +    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), LogInstance().m_file_path);\r\n     +    BOOST_CHECK(!ec);\r\n    ++    return size;\r\n     +}\r\n     +\r\n     +void LogFromFixedLocation(const std::string& str)\r\n    @@ src/test/logging_tests.cpp: BOOST_AUTO_TEST_CASE(logging_timer)\r\n     +    bool prev_log_threadnames = LogInstance().m_log_threadnames;\r\n     +    LogInstance().m_log_threadnames = false;\r\n     +\r\n    ++    // Log 1024-character lines (1023 plus newline) to make the math simple.\r\n     +    std::string log_message(1023, 'a');\r\n     +\r\n     +    SetMockTime(std::chrono::seconds{1});\r\n     +\r\n     +    size_t prev_log_file_size, curr_log_file_size;\r\n    -+    GetLogFileSize(prev_log_file_size);\r\n    ++    prev_log_file_size = GetLogFileSize();\r\n     +\r\n     +    // Log 1 MiB, this should be allowed.\r\n     +    for (int i = 0; i < 1024; ++i) {\r\n     +        LogFromFixedLocation(log_message);\r\n     +    }\r\n    -+    GetLogFileSize(curr_log_file_size);\r\n    ++    curr_log_file_size = GetLogFileSize();\r\n     +    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 1024 * 1024);\r\n     +\r\n     +    LogFromFixedLocation(\"This should trigger rate limiting\");\r\n    -+    GetLogFileSize(prev_log_file_size);\r\n    ++    prev_log_file_size = GetLogFileSize();\r\n     +\r\n     +    // Log 0.5 MiB, this should not be allowed and all messages should be dropped.\r\n     +    for (int i = 0; i < 512; ++i) {\r\n     +        LogFromFixedLocation(log_message);\r\n     +    }\r\n    -+    GetLogFileSize(curr_log_file_size);\r\n    ++    curr_log_file_size = GetLogFileSize();\r\n     +    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\r\n     +\r\n     +    // Let one hour pass.\r\n     +    SetMockTime(std::chrono::seconds{60 * 60 + 1});\r\n     +    LogFromFixedLocation(\"This should trigger the quota usage reset\");\r\n    -+    GetLogFileSize(prev_log_file_size);\r\n    ++    prev_log_file_size = GetLogFileSize();\r\n     +\r\n     +    // Log 1 MiB, this should be allowed since the usage was reset.\r\n     +    for (int i = 0; i < 1024; ++i) {\r\n     +        LogFromFixedLocation(log_message);\r\n     +    }\r\n    -+    GetLogFileSize(curr_log_file_size);\r\n    ++    curr_log_file_size = GetLogFileSize();\r\n     +    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 1024 * 1024);\r\n     +\r\n     +    LogFromFixedLocation(\"This should trigger rate limiting\");\r\n    -+    GetLogFileSize(prev_log_file_size);\r\n    ++    prev_log_file_size = GetLogFileSize();\r\n     +\r\n     +    // Log 1 MiB, this should not be allowed and all messages should be dropped.\r\n     +    for (int i = 0; i < 1024; ++i) {\r\n     +        LogFromFixedLocation(log_message);\r\n     +    }\r\n    -+    GetLogFileSize(curr_log_file_size);\r\n    ++    curr_log_file_size = GetLogFileSize();\r\n     +    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\r\n     +\r\n     +    LogFromFixedLocation(\"This should also be dropped and bring the total of dropped bytes above 1 MiB.\");\r\n    -+    GetLogFileSize(curr_log_file_size);\r\n    ++    curr_log_file_size = GetLogFileSize();\r\n     +    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\r\n     +\r\n     +    // Let another hour pass\r\n     +    SetMockTime(std::chrono::seconds{2 * (60 * 60 + 1)});\r\n     +    LogFromFixedLocation(\"Normally this would reset the usage but it does not because we dropped more than 1 MiB in the previous hour.\");\r\n    -+    GetLogFileSize(prev_log_file_size);\r\n    ++    prev_log_file_size = GetLogFileSize();\r\n     +\r\n     +    // Log 1 MiB, this should not be allowed and all messages should be dropped.\r\n     +    for (int i = 0; i < 1024; ++i) {\r\n     +        LogFromFixedLocation(log_message);\r\n     +    }\r\n    -+    GetLogFileSize(curr_log_file_size);\r\n    ++    curr_log_file_size = GetLogFileSize();\r\n     +    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\r\n     +\r\n     +    // Let another hour pass\r\n     +    SetMockTime(std::chrono::seconds{3 * (60 * 60 + 1)});\r\n     +    LogFromFixedLocation(\"This should trigger the quota usage reset\");\r\n    -+    GetLogFileSize(prev_log_file_size);\r\n    ++    prev_log_file_size = GetLogFileSize();\r\n     +\r\n     +    // Log 1 MiB, this should be allowed since the usage was reset.\r\n     +    for (int i = 0; i < 1024; ++i) {\r\n     +        LogFromFixedLocation(log_message);\r\n     +    }\r\n    -+    GetLogFileSize(curr_log_file_size);\r\n    ++    curr_log_file_size = GetLogFileSize();\r\n     +    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 1024 * 1024);\r\n     +\r\n     +    LogInstance().m_log_timestamps = prev_log_timestamps;\r\n\r\n```\r\n\r\n</details>",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867736556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/869226443",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-869226443",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 869226443,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg2OTIyNjQ0Mw==",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?u=7965845672d27f915c0cbf6a4912ef63a012efb1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-06-27T21:31:37Z",
    "updated_at": "2021-06-27T21:31:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "Reviewers, please take a look at this alternate approach: https://github.com/bitcoin/bitcoin/pull/22350.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/869226443/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880079584",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-880079584",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 880079584,
    "node_id": "MDEyOklzc3VlQ29tbWVudDg4MDA3OTU4NA==",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-07-14T17:33:09Z",
    "updated_at": "2021-07-14T17:33:09Z",
    "author_association": "MEMBER",
    "body": "fwiw prefer the more traditional log rotation approach in #22350; i find it cognitively easier to think in terms of stale logs rather than source suppression.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880079584/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934552951",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-934552951",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 934552951,
    "node_id": "IC_kwDOABII5843tCV3",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-05T16:11:37Z",
    "updated_at": "2021-10-05T16:11:37Z",
    "author_association": "CONTRIBUTOR",
    "body": "@dergoegge Would you mind rebasing? I would like to re-review it after rebase :)\r\n\r\nFWIW I prefer this solution to the more complex log rotation approach taken in #22350. I find the simpler approach taken in this PR much easier to reason about. This PR solves the issue at hand in the simplest possible way IMO.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934552951/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934677093",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#issuecomment-934677093",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/21603",
    "id": 934677093,
    "node_id": "IC_kwDOABII5843tgpl",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-05T18:49:06Z",
    "updated_at": "2021-10-05T18:49:06Z",
    "author_association": "CONTRIBUTOR",
    "body": "@practicalswift Thanks for the nudge! :)\r\n\r\nRebased on latest master.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/934677093/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608211735",
    "pull_request_review_id": 629448028,
    "id": 608211735,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwODIxMTczNQ==",
    "diff_hunk": "@@ -33,4 +32,109 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n     SetMockTime(0);\n }\n \n+void GetLogFileSize(size_t& size)\n+{\n+    boost::system::error_code ec;\n+    size = fs::file_size(LogInstance().m_file_path, ec);\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), LogInstance().m_file_path);\n+    BOOST_CHECK(!ec);\n+}\n+\n+template <typename... Args>\n+void LogFromFixedLocation(const char* fmt, const Args&... args)\n+{\n+    LogPrintf(fmt, args...);",
    "path": "src/test/logging_tests.cpp",
    "position": null,
    "original_position": 23,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "fa114ff2d4b098891569d4f1d67c1e46850cbd5e",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "this line is tripping up the linter:\r\n```\r\nsrc/test/logging_tests.cpp: Expected 0 argument(s) after format string but found 1 argument(s): LogPrintf(fmt, args...)\r\n```",
    "created_at": "2021-04-06T22:08:27Z",
    "updated_at": "2021-04-16T15:19:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r608211735",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608211735"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r608211735"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/608211735/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 46,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613296430",
    "pull_request_review_id": 635686766,
    "id": 613296430,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYxMzI5NjQzMA==",
    "diff_hunk": "@@ -33,4 +32,108 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n     SetMockTime(0);\n }\n \n+void GetLogFileSize(size_t& size)\n+{\n+    boost::system::error_code ec;\n+    size = fs::file_size(LogInstance().m_file_path, ec);\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), LogInstance().m_file_path);\n+    BOOST_CHECK(!ec);\n+}\n+\n+void LogFromFixedLocation(const std::string& str)\n+{\n+    LogPrintf(\"%s\\n\", str);\n+}\n+\n+BOOST_AUTO_TEST_CASE(rate_limiting)\n+{\n+    // This allows us to check for exact size differences in the log file.\n+    bool prev_log_timestamps = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+\n+    // A string containing 1023 bytes.\n+    std::string s1023(1023, 'a');\n+\n+    SetMockTime(std::chrono::seconds{1});\n+\n+    size_t prev_log_file_size, curr_log_file_size;\n+    GetLogFileSize(prev_log_file_size);\n+\n+    // Log 1 MiB, this should be allowed.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromFixedLocation(s1023);\n+    }\n+    GetLogFileSize(curr_log_file_size);\n+    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 1024 * 1024);\n+\n+    LogFromFixedLocation(\"This should trigger rate limiting\");\n+    GetLogFileSize(prev_log_file_size);\n+\n+    // Log 0.5 MiB, this should not be allowed and all messages should be dropped.\n+    for (int i = 0; i < 512; ++i) {\n+        LogFromFixedLocation(s1023);\n+    }\n+    GetLogFileSize(curr_log_file_size);\n+    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\n+\n+    // Let one hour pass.\n+    SetMockTime(std::chrono::seconds{60 * 60 + 1});\n+    LogFromFixedLocation(\"This should trigger the quota usage reset\");\n+    GetLogFileSize(prev_log_file_size);\n+\n+    // Log 1 MiB, this should be allowed since the usage was reset.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromFixedLocation(s1023);\n+    }\n+    GetLogFileSize(curr_log_file_size);\n+    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 1024 * 1024);\n+\n+    LogFromFixedLocation(\"This should trigger rate limiting\");\n+    GetLogFileSize(prev_log_file_size);\n+\n+    // Log 1 MiB, this should not be allowed and all messages should be dropped.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromFixedLocation(s1023);\n+    }\n+    GetLogFileSize(curr_log_file_size);\n+    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\n+\n+    LogFromFixedLocation(\"This should also be dropped and bring the total of dropped bytes above 1 MiB.\");\n+    GetLogFileSize(curr_log_file_size);\n+    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\n+\n+    // Let another hour pass\n+    SetMockTime(std::chrono::seconds{2 * (60 * 60 + 1)});\n+    LogFromFixedLocation(\"Normally this would reset the usage but it does not because we dropped more than 1 MiB in the previous hour.\");\n+    GetLogFileSize(prev_log_file_size);\n+\n+    // Log 1 MiB, this should not be allowed and all messages should be dropped.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromFixedLocation(s1023);\n+    }\n+    GetLogFileSize(curr_log_file_size);\n+    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 0);\n+\n+    // Let another hour pass\n+    SetMockTime(std::chrono::seconds{3 * (60 * 60 + 1)});\n+    LogFromFixedLocation(\"This should trigger the quota usage reset\");\n+    GetLogFileSize(prev_log_file_size);\n+\n+    // Log 1 MiB, this should be allowed since the usage was reset.\n+    for (int i = 0; i < 1024; ++i) {\n+        LogFromFixedLocation(s1023);\n+    }\n+    GetLogFileSize(curr_log_file_size);\n+    BOOST_CHECK(curr_log_file_size - prev_log_file_size == 1024 * 1024);",
    "path": "src/test/logging_tests.cpp",
    "position": 109,
    "original_position": 108,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "1653167de64b15df306158d0d2e9bef9c8bea79e",
    "user": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Both windows CI builds are failing on this line. See [cirrus](https://cirrus-ci.com/task/6258137339527168?logs=ci#L642).",
    "created_at": "2021-04-14T14:26:09Z",
    "updated_at": "2021-04-16T15:19:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r613296430",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613296430"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r613296430"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/613296430/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 138,
    "original_line": 138,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655806917",
    "pull_request_review_id": 688980292,
    "id": 655806917,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTgwNjkxNw==",
    "diff_hunk": "@@ -76,6 +76,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logratelimiting\", strprintf(\"Rate limit debug logging to disk (default: %u)\", DEFAULT_LOGRATELIMITING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
    "path": "src/init/common.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    argsman.AddArg(\"-logratelimiting\", strprintf(\"Rate limit debug logging to disk (default: %u)\", DEFAULT_LOGRATELIMITING), ArgsManager::ALLOW_BOOL, OptionsCategory::OPTIONS);\r\n```\r\nOptional change; most of the other boolean arguments do specify `ALLOW_ANY`, I don't know why. But since `ALLOW_BOOL` exists, may as well use it -- if nothing else, it documents that the argument is a flag rather than some kind of rate threshold (integer value).",
    "created_at": "2021-06-22T01:17:13Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655806917",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655806917"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655806917"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655806917/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 79,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655865672",
    "pull_request_review_id": 688980292,
    "id": 655865672,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTg2NTY3Mg==",
    "diff_hunk": "@@ -30,4 +30,115 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n     BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000.00\u03bcs)\");\n }\n \n+void GetLogFileSize(size_t& size)\n+{\n+    boost::system::error_code ec;\n+    size = fs::file_size(LogInstance().m_file_path, ec);\n+    if (ec) LogPrintf(\"%s: %s %s\\n\", __func__, ec.message(), LogInstance().m_file_path);\n+    BOOST_CHECK(!ec);\n+}\n+\n+void LogFromFixedLocation(const std::string& str)\n+{\n+    LogPrintf(\"%s\\n\", str);\n+}\n+\n+BOOST_AUTO_TEST_CASE(rate_limiting)\n+{\n+#if defined(_WIN32)\n+    // TODO\n+    // Since windows prints \\r\\n to file instead of \\n, the log file size\n+    // does not match up with the internal \"bytes logged\" count.\n+    // This test relies on matching file sizes with expected values.\n+    return;\n+#endif\n+\n+    // This allows us to check for exact size differences in the log file.\n+    bool prev_log_timestamps = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_timestamps = false;\n+    bool prev_log_sourcelocations = LogInstance().m_log_sourcelocations;\n+    LogInstance().m_log_sourcelocations = false;\n+    bool prev_log_threadnames = LogInstance().m_log_threadnames;\n+    LogInstance().m_log_threadnames = false;\n+",
    "path": "src/test/logging_tests.cpp",
    "position": 35,
    "original_position": 34,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n\r\n    // Log 1024-character lines (1023 plus newline) to make the math simple.\r\n```",
    "created_at": "2021-06-22T04:25:14Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655865672",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655865672"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655865672"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655865672/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 64,
    "original_line": 64,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655885112",
    "pull_request_review_id": 688980292,
    "id": 655885112,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTg4NTExMg==",
    "diff_hunk": "@@ -30,4 +30,115 @@ BOOST_AUTO_TEST_CASE(logging_timer)\n     BOOST_CHECK_EQUAL(micro_timer.LogMsg(\"test micros\"), \"tests: test micros (1000000.00\u03bcs)\");\n }\n \n+void GetLogFileSize(size_t& size)",
    "path": "src/test/logging_tests.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\nsize_t GetLogFileSize()\r\n```",
    "created_at": "2021-06-22T05:24:44Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655885112",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655885112"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655885112"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655885112/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 33,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655888433",
    "pull_request_review_id": 688980292,
    "id": 655888433,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTg4ODQzMw==",
    "diff_hunk": "@@ -32,6 +38,23 @@ struct LogCategory {\n     bool active;\n };\n \n+// Replace with std::source_location when switching to C++20.\n+using SourceLocation = std::pair<const char*, int>;",
    "path": "src/logging.h",
    "position": null,
    "original_position": 35,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I would prefer `struct` here to `std::pair`. I think `pair` should be used in situations where two items are grouped together for some deep, fundamental reason, for example, a map key and its value. If you just happen to want to combine two things, but later it could be (say) three, then I think a `struct` is better. Also, it's easier to read, `location.file` and `location.line`.",
    "created_at": "2021-06-22T05:33:15Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655888433",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655888433"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655888433"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655888433/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 42,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655890465",
    "pull_request_review_id": 688980292,
    "id": 655890465,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTg5MDQ2NQ==",
    "diff_hunk": "@@ -70,6 +93,8 @@ namespace BCLog {\n         FILE* m_fileout GUARDED_BY(m_cs) = nullptr;\n         std::list<std::string> m_msgs_before_open GUARDED_BY(m_cs);\n         bool m_buffering GUARDED_BY(m_cs) = true; //!< Buffer messages before logging can be started.\n+        std::unordered_map<SourceLocation, QuotaUsage, SourceLocationHasher> m_quota_usage_per_source_location GUARDED_BY(m_cs);\n+        std::atomic_int m_rate_limited_locations;",
    "path": "src/logging.h",
    "position": null,
    "original_position": 59,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It seems like this doesn't need to be atomic.",
    "created_at": "2021-06-22T05:38:45Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655890465",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655890465"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655890465"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655890465/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 97,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655903333",
    "pull_request_review_id": 688980292,
    "id": 655903333,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTkwMzMzMw==",
    "diff_hunk": "@@ -254,6 +327,16 @@ void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& loggi\n \n     str_prefixed = LogTimestampStr(str_prefixed);\n \n+    // Rate limit logging to disk to avoid disk filling attacks.\n+    bool skip_writing_to_disk_due_to_rate_limiting{false};\n+    if (!skip_disk_usage_rate_limiting) {\n+        skip_writing_to_disk_due_to_rate_limiting = RateLimit(str_prefixed, logging_function, source_location);\n+    }\n+\n+    if (m_rate_limited_locations > 0) {\n+        str_prefixed.insert(0, \"[*] \");",
    "path": "src/logging.cpp",
    "position": 100,
    "original_position": 100,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What's this for? Maybe add a comment.",
    "created_at": "2021-06-22T06:08:36Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655903333",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655903333"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655903333"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655903333/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 343,
    "original_line": 343,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655906309",
    "pull_request_review_id": 688980292,
    "id": 655906309,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTkwNjMwOQ==",
    "diff_hunk": "@@ -239,13 +239,86 @@ namespace BCLog {\n     }\n }\n \n-void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n+static constexpr uint64_t HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION{1024 * 1024};\n+",
    "path": "src/logging.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Comment needed describing what this function does at a high level and documenting the return value.",
    "created_at": "2021-06-22T06:14:54Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655906309",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655906309"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655906309"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655906309/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 249,
    "original_line": 249,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655912029",
    "pull_request_review_id": 688980292,
    "id": 655912029,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTkxMjAyOQ==",
    "diff_hunk": "@@ -254,6 +327,16 @@ void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& loggi\n \n     str_prefixed = LogTimestampStr(str_prefixed);\n \n+    // Rate limit logging to disk to avoid disk filling attacks.\n+    bool skip_writing_to_disk_due_to_rate_limiting{false};\n+    if (!skip_disk_usage_rate_limiting) {\n+        skip_writing_to_disk_due_to_rate_limiting = RateLimit(str_prefixed, logging_function, source_location);\n+    }",
    "path": "src/logging.cpp",
    "position": null,
    "original_position": 97,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Consider moving this down to just before it's needed.",
    "created_at": "2021-06-22T06:26:45Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655912029",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655912029"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655912029"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655912029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 331,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 334,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655915216",
    "pull_request_review_id": 688980292,
    "id": 655915216,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTkxNTIxNg==",
    "diff_hunk": "@@ -270,7 +353,7 @@ void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& loggi\n     for (const auto& cb : m_print_callbacks) {\n         cb(str_prefixed);\n     }\n-    if (m_print_to_file) {\n+    if (m_print_to_file && !skip_writing_to_disk_due_to_rate_limiting) {",
    "path": "src/logging.cpp",
    "position": null,
    "original_position": 111,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'm not sure it's worth creating this variable `skip_writing_to_disk_due_to_rate_limiting`, maybe:\r\n```\r\nif (m_print_to_file && (skip_disk_usage_rate_limiting || !RateLimit(str_prefixed, logging_function, source_location))) {\r\n```",
    "created_at": "2021-06-22T06:32:53Z",
    "updated_at": "2021-06-22T06:35:24Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655915216",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655915216"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655915216"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655915216/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 356,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655933116",
    "pull_request_review_id": 689130292,
    "id": 655933116,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NTkzMzExNg==",
    "diff_hunk": "@@ -76,6 +76,7 @@ void AddLoggingArgs(ArgsManager& argsman)\n     argsman.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     argsman.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n+    argsman.AddArg(\"-logratelimiting\", strprintf(\"Rate limit debug logging to disk (default: %u)\", DEFAULT_LOGRATELIMITING), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);",
    "path": "src/init/common.cpp",
    "position": null,
    "original_position": 4,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good point. I think the more specific ones were added later and the idea is to prefer using them for new code.",
    "created_at": "2021-06-22T07:04:12Z",
    "updated_at": "2021-06-22T07:04:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655933116",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655933116"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r655933116"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/655933116/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 79,
    "side": "RIGHT",
    "in_reply_to_id": 655806917
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/656316492",
    "pull_request_review_id": 689639316,
    "id": 656316492,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NjMxNjQ5Mg==",
    "diff_hunk": "@@ -239,13 +239,86 @@ namespace BCLog {\n     }\n }\n \n-void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n+static constexpr uint64_t HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION{1024 * 1024};\n+\n+bool BCLog::Logger::RateLimit(std::string& str, const std::string& logging_function, const SourceLocation& source_location)\n+{\n+    if (!m_rate_limiting) {\n+        // Rate limiting is disabled.\n+        return false;\n+    }\n+\n+    const std::chrono::seconds now = GetTime<std::chrono::seconds>();\n+    QuotaUsage& quota_usage = m_quota_usage_per_source_location[source_location];\n+    // Is the quota exceeded before this log call?\n+    bool quota_exceeded_before = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\n+\n+    bool dont_skip = false;",
    "path": "src/logging.cpp",
    "position": 19,
    "original_position": 19,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "01ba3285d40ca70e14e7b8664f98135c55b280a6",
    "user": {
      "login": "Thoragh",
      "id": 12678227,
      "node_id": "MDQ6VXNlcjEyNjc4MjI3",
      "avatar_url": "https://avatars.githubusercontent.com/u/12678227?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Thoragh",
      "html_url": "https://github.com/Thoragh",
      "followers_url": "https://api.github.com/users/Thoragh/followers",
      "following_url": "https://api.github.com/users/Thoragh/following{/other_user}",
      "gists_url": "https://api.github.com/users/Thoragh/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Thoragh/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Thoragh/subscriptions",
      "organizations_url": "https://api.github.com/users/Thoragh/orgs",
      "repos_url": "https://api.github.com/users/Thoragh/repos",
      "events_url": "https://api.github.com/users/Thoragh/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Thoragh/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If i understand the code correctly, `dont_skip` is used to make sure the hourly reset messages are printed.\r\nMaybe the code could be simplified by removing `dont_skip` and calling `LogPrintf` instead for the hourly messages?\r\n",
    "created_at": "2021-06-22T15:08:18Z",
    "updated_at": "2021-06-22T15:08:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r656316492",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/656316492"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r656316492"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/656316492/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 262,
    "original_line": 262,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657510892",
    "pull_request_review_id": 691205788,
    "id": 657510892,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzUxMDg5Mg==",
    "diff_hunk": "@@ -270,7 +353,7 @@ void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& loggi\n     for (const auto& cb : m_print_callbacks) {\n         cb(str_prefixed);\n     }\n-    if (m_print_to_file) {\n+    if (m_print_to_file && !skip_writing_to_disk_due_to_rate_limiting) {",
    "path": "src/logging.cpp",
    "position": null,
    "original_position": 111,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "We want the rate limiting messages like \"restarting logging from...\" to also be printed to the console, so we have to call `RateLimit` before that and store the result. I am still gonna change the name of `skip_writing_to_disk_due_to_rate_limiting` because its a bit long.",
    "created_at": "2021-06-23T22:50:38Z",
    "updated_at": "2021-06-23T22:50:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r657510892",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657510892"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r657510892"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657510892/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 356,
    "side": "RIGHT",
    "in_reply_to_id": 655915216
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657518350",
    "pull_request_review_id": 691214683,
    "id": 657518350,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1NzUxODM1MA==",
    "diff_hunk": "@@ -239,13 +239,86 @@ namespace BCLog {\n     }\n }\n \n-void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n+static constexpr uint64_t HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION{1024 * 1024};\n+\n+bool BCLog::Logger::RateLimit(std::string& str, const std::string& logging_function, const SourceLocation& source_location)\n+{\n+    if (!m_rate_limiting) {\n+        // Rate limiting is disabled.\n+        return false;\n+    }\n+\n+    const std::chrono::seconds now = GetTime<std::chrono::seconds>();\n+    QuotaUsage& quota_usage = m_quota_usage_per_source_location[source_location];\n+    // Is the quota exceeded before this log call?\n+    bool quota_exceeded_before = quota_usage.m_bytes_logged > HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION;\n+\n+    bool dont_skip = false;",
    "path": "src/logging.cpp",
    "position": 19,
    "original_position": 19,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "01ba3285d40ca70e14e7b8664f98135c55b280a6",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "That is correct!\r\nBut this does unfortunately not work because we hold a lock here https://github.com/bitcoin/bitcoin/blob/a2916ae5043436d3fd22acb44c5663227fa7eb90/src/logging.cpp#L317\r\n\r\nA recursive call to `LogPrintf` also feels a bit dangerous to me.",
    "created_at": "2021-06-23T23:10:42Z",
    "updated_at": "2021-06-23T23:10:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r657518350",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657518350"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r657518350"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/657518350/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 262,
    "original_line": 262,
    "side": "RIGHT",
    "in_reply_to_id": 656316492
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/658061925",
    "pull_request_review_id": 691914652,
    "id": 658061925,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1ODA2MTkyNQ==",
    "diff_hunk": "@@ -239,13 +239,86 @@ namespace BCLog {\n     }\n }\n \n-void BCLog::Logger::LogPrintStr(const std::string& str, const std::string& logging_function, const std::string& source_file, const int source_line)\n+static constexpr uint64_t HOURLY_LOG_QUOTA_IN_BYTES_PER_SOURCE_LOCATION{1024 * 1024};\n+",
    "path": "src/logging.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "9b58c48e9fd99f9d84b6b8eff71b0203468f1ea7",
    "original_commit_id": "a2916ae5043436d3fd22acb44c5663227fa7eb90",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There is a comment in `src/logging.h`.",
    "created_at": "2021-06-24T15:36:50Z",
    "updated_at": "2021-06-24T15:36:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r658061925",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/658061925"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/21603#discussion_r658061925"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/21603"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/658061925/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 249,
    "original_line": 249,
    "side": "RIGHT",
    "in_reply_to_id": 655906309
  }
]