[
  {
    "sha": "50957b13322b2d0dd1f4c7d19da914bd6549f19a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDk1N2IxMzMyMmIyZDBkZDFmNGM3ZDE5ZGE5MTRiZDY1NDlmMTlh",
    "commit": {
      "author": {
        "name": "Alexey Poghilenkov",
        "email": "alex_pozhilenkov@adoriasoft.com",
        "date": "2020-01-26T12:54:10Z"
      },
      "committer": {
        "name": "Alexey Poghilenkov",
        "email": "alex_pozhilenkov@adoriasoft.com",
        "date": "2020-01-26T12:54:10Z"
      },
      "message": "add small refactor",
      "tree": {
        "sha": "5607cb24c198a7b8e050e0f2717694af6c2a92ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5607cb24c198a7b8e050e0f2717694af6c2a92ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50957b13322b2d0dd1f4c7d19da914bd6549f19a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50957b13322b2d0dd1f4c7d19da914bd6549f19a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50957b13322b2d0dd1f4c7d19da914bd6549f19a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50957b13322b2d0dd1f4c7d19da914bd6549f19a/comments",
    "author": {
      "login": "Mr-Leshiy",
      "id": 20208513,
      "node_id": "MDQ6VXNlcjIwMjA4NTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20208513?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mr-Leshiy",
      "html_url": "https://github.com/Mr-Leshiy",
      "followers_url": "https://api.github.com/users/Mr-Leshiy/followers",
      "following_url": "https://api.github.com/users/Mr-Leshiy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mr-Leshiy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mr-Leshiy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mr-Leshiy/subscriptions",
      "organizations_url": "https://api.github.com/users/Mr-Leshiy/orgs",
      "repos_url": "https://api.github.com/users/Mr-Leshiy/repos",
      "events_url": "https://api.github.com/users/Mr-Leshiy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mr-Leshiy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Mr-Leshiy",
      "id": 20208513,
      "node_id": "MDQ6VXNlcjIwMjA4NTEz",
      "avatar_url": "https://avatars.githubusercontent.com/u/20208513?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Mr-Leshiy",
      "html_url": "https://github.com/Mr-Leshiy",
      "followers_url": "https://api.github.com/users/Mr-Leshiy/followers",
      "following_url": "https://api.github.com/users/Mr-Leshiy/following{/other_user}",
      "gists_url": "https://api.github.com/users/Mr-Leshiy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Mr-Leshiy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Mr-Leshiy/subscriptions",
      "organizations_url": "https://api.github.com/users/Mr-Leshiy/orgs",
      "repos_url": "https://api.github.com/users/Mr-Leshiy/repos",
      "events_url": "https://api.github.com/users/Mr-Leshiy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Mr-Leshiy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe3b58b95955644f5b8e1cd9080d414378f14755",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe3b58b95955644f5b8e1cd9080d414378f14755",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe3b58b95955644f5b8e1cd9080d414378f14755"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 6,
      "deletions": 23
    },
    "files": [
      {
        "sha": "5005d77c3edc65fc8f6764eeace93f09c71cf321",
        "filename": "src/arith_uint256.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50957b13322b2d0dd1f4c7d19da914bd6549f19a/src/arith_uint256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50957b13322b2d0dd1f4c7d19da914bd6549f19a/src/arith_uint256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.cpp?ref=50957b13322b2d0dd1f4c7d19da914bd6549f19a",
        "patch": "@@ -105,18 +105,6 @@ base_uint<BITS>& base_uint<BITS>::operator/=(const base_uint& b)\n     return *this;\n }\n \n-template <unsigned int BITS>\n-int base_uint<BITS>::CompareTo(const base_uint<BITS>& b) const\n-{\n-    for (int i = WIDTH - 1; i >= 0; i--) {\n-        if (pn[i] < b.pn[i])\n-            return -1;\n-        if (pn[i] > b.pn[i])\n-            return 1;\n-    }\n-    return 0;\n-}\n-\n template <unsigned int BITS>\n bool base_uint<BITS>::EqualTo(uint64_t b) const\n {\n@@ -189,7 +177,6 @@ template base_uint<256>& base_uint<256>::operator>>=(unsigned int);\n template base_uint<256>& base_uint<256>::operator*=(uint32_t b32);\n template base_uint<256>& base_uint<256>::operator*=(const base_uint<256>& b);\n template base_uint<256>& base_uint<256>::operator/=(const base_uint<256>& b);\n-template int base_uint<256>::CompareTo(const base_uint<256>&) const;\n template bool base_uint<256>::EqualTo(uint64_t) const;\n template double base_uint<256>::getdouble() const;\n template std::string base_uint<256>::GetHex() const;"
      },
      {
        "sha": "abdc74604e432bb94d8f648845ad98899ef8be5d",
        "filename": "src/arith_uint256.h",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50957b13322b2d0dd1f4c7d19da914bd6549f19a/src/arith_uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50957b13322b2d0dd1f4c7d19da914bd6549f19a/src/arith_uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/arith_uint256.h?ref=50957b13322b2d0dd1f4c7d19da914bd6549f19a",
        "patch": "@@ -170,9 +170,7 @@ class base_uint\n     base_uint& operator++()\n     {\n         // prefix operator\n-        int i = 0;\n-        while (i < WIDTH && ++pn[i] == 0)\n-            i++;\n+        for (int i = 0; i < WIDTH && ++pn[i] == 0; i++);\n         return *this;\n     }\n \n@@ -187,9 +185,7 @@ class base_uint\n     base_uint& operator--()\n     {\n         // prefix operator\n-        int i = 0;\n-        while (i < WIDTH && --pn[i] == std::numeric_limits<uint32_t>::max())\n-            i++;\n+        for (int i = 0; i < WIDTH && --pn[i] == std::numeric_limits<uint32_t>::max(); i++);\n         return *this;\n     }\n \n@@ -216,10 +212,10 @@ class base_uint\n     friend inline const base_uint operator*(const base_uint& a, uint32_t b) { return base_uint(a) *= b; }\n     friend inline bool operator==(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) == 0; }\n     friend inline bool operator!=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) != 0; }\n-    friend inline bool operator>(const base_uint& a, const base_uint& b) { return a.CompareTo(b) > 0; }\n-    friend inline bool operator<(const base_uint& a, const base_uint& b) { return a.CompareTo(b) < 0; }\n-    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) >= 0; }\n-    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return a.CompareTo(b) <= 0; }\n+    friend inline bool operator>(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) > 0; }\n+    friend inline bool operator<(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) < 0; }\n+    friend inline bool operator>=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) >= 0; }\n+    friend inline bool operator<=(const base_uint& a, const base_uint& b) { return memcmp(a.pn, b.pn, sizeof(a.pn)) <= 0; }\n     friend inline bool operator==(const base_uint& a, uint64_t b) { return a.EqualTo(b); }\n     friend inline bool operator!=(const base_uint& a, uint64_t b) { return !a.EqualTo(b); }\n "
      }
    ]
  }
]