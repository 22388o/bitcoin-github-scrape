[
  {
    "sha": "fa54a408096244ff83a3e60e5fb7bfa6aecabe6b",
    "node_id": "C_kwDOABII59oAKGZhNTRhNDA4MDk2MjQ0ZmY4M2EzZTYwZTVmYjdiZmE2YWVjYWJlNmI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-09-21T13:03:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-11-16T12:38:12Z"
      },
      "message": "doc: Pick better named args for MutableTransactionSignatureCreator\n\nArgument names of \"nInIn\" are not helpful.",
      "tree": {
        "sha": "37c481022551ec15d7b35ee124a68a0b41160796",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37c481022551ec15d7b35ee124a68a0b41160796"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjCDgwAwr16SHEfcGu5vkRWxHhTZJj5ni0iP7oJBKQg4sZgMqGjHsG1XnwNQeZQ\nmLa2yCpm/XFPE2NyF9IoEepyq2rVRj5dR5cEEZYPnCafcN4Z7KE4+SKGD96Ovt5s\nO5S0GR/ADjzCv6QGFLcjlkdQLy6GPqfA/qr3tV4/kixhkLhACxhpcwoKjxypkD3a\nZuUQuiuHMLnhcQGkjSm4M8Fl76hHjF6z3jMI7oaDKOtH+1N8ZJtP60b3PL8vN/yQ\ns2j/vPDYfIQ61/igeoLOY4sFujxnO6eBcwD2FKGzt7M9w4MFEA85dqmdmOShUAcA\n3Hld/D9D3W7JLqWm4gwFeZvygT49V3tm0++IQw0uHAgCGITt4BII/kHr7QGm7pli\ncPt+jk6ZtT1u4QffT0yRiXGDkO8AOM6Pqb8YTzi/GNtpKbhmIwOzdCMebgM0qb/k\nnwtfO6fnI3Qi1rJbz5VaRwn84jmsN3H+6O+pBhmBPMykOVA7M8kDIwXOzuasqBMO\nSUyOnnTF\n=OSRD\n-----END PGP SIGNATURE-----",
        "payload": "tree 37c481022551ec15d7b35ee124a68a0b41160796\nparent ad09c287cb7033a28f8d0a002c1ca4f194c12f11\nauthor MarcoFalke <falke.marco@gmail.com> 1632229402 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1637066292 +0100\n\ndoc: Pick better named args for MutableTransactionSignatureCreator\n\nArgument names of \"nInIn\" are not helpful.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ad09c287cb7033a28f8d0a002c1ca4f194c12f11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ad09c287cb7033a28f8d0a002c1ca4f194c12f11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ad09c287cb7033a28f8d0a002c1ca4f194c12f11"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "b3d8e052bca9c6d1ac38a5c7220feb00cd41efde",
        "filename": "src/psbt.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b/src/psbt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b/src/psbt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/psbt.cpp?ref=fa54a408096244ff83a3e60e5fb7bfa6aecabe6b",
        "patch": "@@ -223,7 +223,7 @@ void UpdatePSBTOutput(const SigningProvider& provider, PartiallySignedTransactio\n     // Construct a would-be spend of this output, to update sigdata with.\n     // Note that ProduceSignature is used to fill in metadata (not actual signatures),\n     // so provider does not need to provide any private keys (it can be a HidingSigningProvider).\n-    MutableTransactionSignatureCreator creator(&tx, /* index */ 0, out.nValue, SIGHASH_ALL);\n+    MutableTransactionSignatureCreator creator(&tx, /*input_idx=*/0, out.nValue, SIGHASH_ALL);\n     ProduceSignature(provider, creator, out.scriptPubKey, sigdata);\n \n     // Put redeem_script, witness_script, key paths, into PSBTOutput."
      },
      {
        "sha": "8e044b1e00ce4cb924edb20c6eb52c1cf5b6886c",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=fa54a408096244ff83a3e60e5fb7bfa6aecabe6b",
        "patch": "@@ -17,16 +17,16 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn)\n-    : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn, MissingDataBehavior::FAIL),\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, int hash_type)\n+    : txTo{tx}, nIn{input_idx}, nHashType{hash_type}, amount{amount}, checker{txTo, nIn, amount, MissingDataBehavior::FAIL},\n       m_txdata(nullptr)\n {\n }\n \n-MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn)\n-    : txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn),\n-      checker(txdata ? MutableTransactionSignatureChecker(txTo, nIn, amount, *txdata, MissingDataBehavior::FAIL) :\n-          MutableTransactionSignatureChecker(txTo, nIn, amount, MissingDataBehavior::FAIL)),\n+MutableTransactionSignatureCreator::MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, const PrecomputedTransactionData* txdata, int hash_type)\n+    : txTo{tx}, nIn{input_idx}, nHashType{hash_type}, amount{amount},\n+      checker{txdata ? MutableTransactionSignatureChecker{txTo, nIn, amount, *txdata, MissingDataBehavior::FAIL} :\n+                       MutableTransactionSignatureChecker{txTo, nIn, amount, MissingDataBehavior::FAIL}},\n       m_txdata(txdata)\n {\n }"
      },
      {
        "sha": "62335b644aa384c1b75da519b2b9a431413786b8",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa54a408096244ff83a3e60e5fb7bfa6aecabe6b/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=fa54a408096244ff83a3e60e5fb7bfa6aecabe6b",
        "patch": "@@ -45,8 +45,8 @@ class MutableTransactionSignatureCreator : public BaseSignatureCreator {\n     const PrecomputedTransactionData* m_txdata;\n \n public:\n-    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn);\n-    MutableTransactionSignatureCreator(const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData* txdata, int nHashTypeIn);\n+    MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, int hash_type);\n+    MutableTransactionSignatureCreator(const CMutableTransaction* tx, unsigned int input_idx, const CAmount& amount, const PrecomputedTransactionData* txdata, int hash_type);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(const SigningProvider& provider, std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n     bool CreateSchnorrSig(const SigningProvider& provider, std::vector<unsigned char>& sig, const XOnlyPubKey& pubkey, const uint256* leaf_hash, const uint256* merkle_root, SigVersion sigversion) const override;"
      }
    ]
  }
]