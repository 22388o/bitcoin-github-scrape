[
  {
    "sha": "ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTZkYzM1NzZkYzFkZjc1ZGNmY2U4ODA2MzUzYmJlODBjMTliZDFm",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-10-06T10:35:16Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-18T08:07:31Z"
      },
      "message": "[net] Remove cs_sendProcessing guard from m_next_addr_send and m_next_local_addr_send\n\nThis locking was mistakenly introduced in PR #13123.\nRelated conversation:\nhttps://github.com/bitcoin/bitcoin/pull/13123#issuecomment-647505130\n\nMaking these fields atomic would ensure safety\nif multiple RPC accesses them.",
      "tree": {
        "sha": "0424df9fdf156adf99662157e2f7b125657b0b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0424df9fdf156adf99662157e2f7b125657b0b85"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3dd3f7c0af7e942acd0b05910723cdf39c1a60b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3dd3f7c0af7e942acd0b05910723cdf39c1a60b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3dd3f7c0af7e942acd0b05910723cdf39c1a60b9"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "0d73cf13263a4a1b8b9d756bf42a66b81e64cda5",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
        "patch": "@@ -1004,8 +1004,8 @@ class CNode\n     std::vector<CAddress> vAddrToSend;\n     std::unique_ptr<CRollingBloomFilter> m_addr_known{nullptr};\n     bool fGetAddr{false};\n-    std::chrono::microseconds m_next_addr_send GUARDED_BY(cs_sendProcessing){0};\n-    std::chrono::microseconds m_next_local_addr_send GUARDED_BY(cs_sendProcessing){0};\n+    std::atomic<std::chrono::microseconds> m_next_addr_send{std::chrono::microseconds{0}};\n+    std::atomic<std::chrono::microseconds> m_next_local_addr_send{std::chrono::microseconds{0}};\n \n     // List of block ids we still have announce.\n     // There is no final sorting before sending, as they are always sent immediately"
      },
      {
        "sha": "0f196eebf876ca68f308882a4334f2394a2b3517",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
        "patch": "@@ -4117,14 +4117,14 @@ bool PeerManager::SendMessages(CNode* pto)\n         // Address refresh broadcast\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n-        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send < current_time) {\n+        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send.load` < current_time) {\n             // If we've sent before, clear the bloom filter for the peer, so that our\n             // self-announcement will actually go out.\n             // This might be unnecessary if the bloom filter has already rolled\n             // over since our last self-announcement, but there is only a small\n             // bandwidth cost that we can incur by doing this (which happens\n             // once a day on average).\n-            if (pto->m_next_local_addr_send != 0us) {\n+            if (pto->m_next_local_addr_send.load != 0us) {\n                 pto->m_addr_known->reset();\n             }\n             AdvertiseLocal(pto);\n@@ -4134,7 +4134,7 @@ bool PeerManager::SendMessages(CNode* pto)\n         //\n         // Message: addr\n         //\n-        if (pto->RelayAddrsWithConn() && pto->m_next_addr_send < current_time) {\n+        if (pto->RelayAddrsWithConn() && pto->m_next_addr_send.load() < current_time) {\n             pto->m_next_addr_send = PoissonNextSend(current_time, AVG_ADDRESS_BROADCAST_INTERVAL);\n             std::vector<CAddress> vAddr;\n             vAddr.reserve(pto->vAddrToSend.size());"
      }
    ]
  },
  {
    "sha": "ecd2f5588c53fc3338a43d08361d839c351decc6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplY2QyZjU1ODhjNTNmYzMzMzhhNDNkMDgzNjFkODM5YzM1MWRlY2M2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-13T09:42:31Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-18T08:07:31Z"
      },
      "message": "[net] Make GetLocal() and bool AddLocal(CNetAddr&, int) static\n\nThey're not called outside net.cpp, so they only need internal linkage.",
      "tree": {
        "sha": "b928c58d171599b2002b47bcfdcd794842ce98e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b928c58d171599b2002b47bcfdcd794842ce98e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ecd2f5588c53fc3338a43d08361d839c351decc6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd2f5588c53fc3338a43d08361d839c351decc6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd2f5588c53fc3338a43d08361d839c351decc6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd2f5588c53fc3338a43d08361d839c351decc6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba6dc3576dc1df75dcfce8806353bbe80c19bd1f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 5,
      "deletions": 7
    },
    "files": [
      {
        "sha": "4e389d1be1b32ec513bd098145e6a2307dc9cb9f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd2f5588c53fc3338a43d08361d839c351decc6/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd2f5588c53fc3338a43d08361d839c351decc6/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=ecd2f5588c53fc3338a43d08361d839c351decc6",
        "patch": "@@ -131,8 +131,8 @@ uint16_t GetListenPort()\n     return (uint16_t)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n-// find 'best' local address for a particular peer\n-bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n+/** Find the 'best' local address for a particular peer. */\n+static bool GetLocal(CService& addr, const CNetAddr* paddrPeer)\n {\n     if (!fListen)\n         return false;\n@@ -262,7 +262,7 @@ bool AddLocal(const CService& addr, int nScore)\n     return true;\n }\n \n-bool AddLocal(const CNetAddr &addr, int nScore)\n+static bool AddLocal(const CNetAddr &addr, int nScore)\n {\n     return AddLocal(CService(addr, GetListenPort()), nScore);\n }"
      },
      {
        "sha": "22813f43c0183daf5738e4714d2480afb0bf6184",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd2f5588c53fc3338a43d08361d839c351decc6/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd2f5588c53fc3338a43d08361d839c351decc6/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=ecd2f5588c53fc3338a43d08361d839c351decc6",
        "patch": "@@ -661,11 +661,9 @@ bool IsReachable(enum Network net);\n bool IsReachable(const CNetAddr& addr);\n \n bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n-bool AddLocal(const CNetAddr& addr, int nScore = LOCAL_NONE);\n void RemoveLocal(const CService& addr);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n-bool GetLocal(CService &addr, const CNetAddr *paddrPeer = nullptr);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices);\n \n "
      },
      {
        "sha": "1996d85a3fac7e5d9a074fc34a1ca051201a6f69",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ecd2f5588c53fc3338a43d08361d839c351decc6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ecd2f5588c53fc3338a43d08361d839c351decc6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=ecd2f5588c53fc3338a43d08361d839c351decc6",
        "patch": "@@ -4117,14 +4117,14 @@ bool PeerManager::SendMessages(CNode* pto)\n         // Address refresh broadcast\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n-        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send.load` < current_time) {\n+        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send.load() < current_time) {\n             // If we've sent before, clear the bloom filter for the peer, so that our\n             // self-announcement will actually go out.\n             // This might be unnecessary if the bloom filter has already rolled\n             // over since our last self-announcement, but there is only a small\n             // bandwidth cost that we can incur by doing this (which happens\n             // once a day on average).\n-            if (pto->m_next_local_addr_send.load != 0us) {\n+            if (pto->m_next_local_addr_send.load() != 0us) {\n                 pto->m_addr_known->reset();\n             }\n             AdvertiseLocal(pto);"
      }
    ]
  },
  {
    "sha": "b739f21a667982980e2447a7fbdda97e6d4f7008",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzM5ZjIxYTY2Nzk4Mjk4MGUyNDQ3YTdmYmRkYTk3ZTZkNGY3MDA4",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-13T10:42:20Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-18T08:07:31Z"
      },
      "message": "[net] Change local address function to take references\n\nThese functions can't be called with null ptrs, so change the signatures\nto take references.",
      "tree": {
        "sha": "2fba1b6d99d4a056d6365f921ab7157c0d3e10d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2fba1b6d99d4a056d6365f921ab7157c0d3e10d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b739f21a667982980e2447a7fbdda97e6d4f7008",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b739f21a667982980e2447a7fbdda97e6d4f7008",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b739f21a667982980e2447a7fbdda97e6d4f7008",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b739f21a667982980e2447a7fbdda97e6d4f7008/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ecd2f5588c53fc3338a43d08361d839c351decc6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ecd2f5588c53fc3338a43d08361d839c351decc6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ecd2f5588c53fc3338a43d08361d839c351decc6"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "abae5bd2bd6373023adffb6b6dd38dda5869f3c7",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b739f21a667982980e2447a7fbdda97e6d4f7008/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b739f21a667982980e2447a7fbdda97e6d4f7008/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b739f21a667982980e2447a7fbdda97e6d4f7008",
        "patch": "@@ -181,11 +181,11 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n // Otherwise, return the unroutable 0.0.0.0 but filled in with\n // the normal parameters, since the IP may be changed to a useful\n // one by discovery.\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices)\n+CAddress GetLocalAddress(const CNetAddr& paddrPeer, ServiceFlags nLocalServices)\n {\n     CAddress ret(CService(CNetAddr(),GetListenPort()), nLocalServices);\n     CService addr;\n-    if (GetLocal(addr, paddrPeer))\n+    if (GetLocal(addr, &paddrPeer))\n     {\n         ret = CAddress(addr, nLocalServices);\n     }\n@@ -201,22 +201,22 @@ static int GetnScore(const CService& addr)\n }\n \n // Is our peer's addrLocal potentially useful as an external IP source?\n-bool IsPeerAddrLocalGood(CNode *pnode)\n+bool IsPeerAddrLocalGood(CNode& pnode)\n {\n-    CService addrLocal = pnode->GetAddrLocal();\n-    return fDiscover && pnode->addr.IsRoutable() && addrLocal.IsRoutable() &&\n+    CService addrLocal = pnode.GetAddrLocal();\n+    return fDiscover && pnode.addr.IsRoutable() && addrLocal.IsRoutable() &&\n            IsReachable(addrLocal.GetNetwork());\n }\n \n // pushes our own address to a peer\n-void AdvertiseLocal(CNode *pnode)\n+void AdvertiseLocal(CNode& pnode)\n {\n-    if (fListen && pnode->fSuccessfullyConnected)\n+    if (fListen && pnode.fSuccessfullyConnected)\n     {\n-        CAddress addrLocal = GetLocalAddress(&pnode->addr, pnode->GetLocalServices());\n+        CAddress addrLocal = GetLocalAddress(pnode.addr, pnode.GetLocalServices());\n         if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n             // use IPv4 loopback during addrmantest\n-            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode->GetLocalServices());\n+            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode.GetLocalServices());\n         }\n         // If discovery is enabled, sometimes give our peer the address it\n         // tells us that it sees us as in case it has a better idea of our\n@@ -225,12 +225,12 @@ void AdvertiseLocal(CNode *pnode)\n         if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n              rng.randbits((GetnScore(addrLocal) > LOCAL_MANUAL) ? 3 : 1) == 0))\n         {\n-            addrLocal.SetIP(pnode->GetAddrLocal());\n+            addrLocal.SetIP(pnode.GetAddrLocal());\n         }\n         if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false))\n         {\n             LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n-            pnode->PushAddress(addrLocal, rng);\n+            pnode.PushAddress(addrLocal, rng);\n         }\n     }\n }"
      },
      {
        "sha": "2ce7a3209b4113d45e74f257490ffc6d23da2aab",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b739f21a667982980e2447a7fbdda97e6d4f7008/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b739f21a667982980e2447a7fbdda97e6d4f7008/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b739f21a667982980e2447a7fbdda97e6d4f7008",
        "patch": "@@ -647,8 +647,8 @@ enum\n     LOCAL_MAX\n };\n \n-bool IsPeerAddrLocalGood(CNode *pnode);\n-void AdvertiseLocal(CNode *pnode);\n+bool IsPeerAddrLocalGood(CNode& pnode);\n+void AdvertiseLocal(CNode& pnode);\n \n /**\n  * Mark a network as reachable or unreachable (no automatic connects to it)\n@@ -664,7 +664,7 @@ bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n void RemoveLocal(const CService& addr);\n bool SeenLocal(const CService& addr);\n bool IsLocal(const CService& addr);\n-CAddress GetLocalAddress(const CNetAddr *paddrPeer, ServiceFlags nLocalServices);\n+CAddress GetLocalAddress(const CNetAddr& paddrPeer, ServiceFlags nLocalServices);\n \n \n extern bool fDiscover;"
      },
      {
        "sha": "108adcff1d1dc4a20962150dc7bd9798f9347e50",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b739f21a667982980e2447a7fbdda97e6d4f7008/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b739f21a667982980e2447a7fbdda97e6d4f7008/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=b739f21a667982980e2447a7fbdda97e6d4f7008",
        "patch": "@@ -2398,13 +2398,13 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             // information about our block-relay-only connections via address relay.\n             if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n             {\n-                CAddress addr = GetLocalAddress(&pfrom.addr, pfrom.GetLocalServices());\n+                CAddress addr = GetLocalAddress(pfrom.addr, pfrom.GetLocalServices());\n                 FastRandomContext insecure_rand;\n                 if (addr.IsRoutable())\n                 {\n                     LogPrint(BCLog::NET, \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom.PushAddress(addr, insecure_rand);\n-                } else if (IsPeerAddrLocalGood(&pfrom)) {\n+                } else if (IsPeerAddrLocalGood(pfrom)) {\n                     addr.SetIP(addrMe);\n                     LogPrint(BCLog::NET, \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n                     pfrom.PushAddress(addr, insecure_rand);\n@@ -4127,7 +4127,7 @@ bool PeerManager::SendMessages(CNode* pto)\n             if (pto->m_next_local_addr_send.load() != 0us) {\n                 pto->m_addr_known->reset();\n             }\n-            AdvertiseLocal(pto);\n+            AdvertiseLocal(*pto);\n             pto->m_next_local_addr_send = PoissonNextSend(current_time, AVG_LOCAL_ADDRESS_BROADCAST_INTERVAL);\n         }\n "
      },
      {
        "sha": "a45b9e9669d8a894dcd6d129acc5a4d6413a62d8",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b739f21a667982980e2447a7fbdda97e6d4f7008/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b739f21a667982980e2447a7fbdda97e6d4f7008/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=b739f21a667982980e2447a7fbdda97e6d4f7008",
        "patch": "@@ -687,7 +687,7 @@ BOOST_AUTO_TEST_CASE(ipv4_peer_with_ipv6_addrMe_test)\n     pnode->SetAddrLocal(addrLocal);\n \n     // before patch, this causes undefined behavior detectable with clang's -fsanitize=memory\n-    AdvertiseLocal(&*pnode);\n+    AdvertiseLocal(*pnode);\n \n     // suppress no-checks-run warning; if this test fails, it's by triggering a sanitizer\n     BOOST_CHECK(1);"
      }
    ]
  },
  {
    "sha": "d3f789e0044429c3901c0e00d9fea0f7667e01a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Y3ODllMDA0NDQyOWMzOTAxYzBlMDBkOWZlYTBmNzY2N2UwMWE1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-13T10:48:05Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-18T08:07:31Z"
      },
      "message": "[net] Move comments for local address functions to header\n\nAlso make them doxygen comments.",
      "tree": {
        "sha": "702ce6d76717485c74ae9e0d357f8410b32dd225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/702ce6d76717485c74ae9e0d357f8410b32dd225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f789e0044429c3901c0e00d9fea0f7667e01a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f789e0044429c3901c0e00d9fea0f7667e01a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f789e0044429c3901c0e00d9fea0f7667e01a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f789e0044429c3901c0e00d9fea0f7667e01a5/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b739f21a667982980e2447a7fbdda97e6d4f7008",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b739f21a667982980e2447a7fbdda97e6d4f7008",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b739f21a667982980e2447a7fbdda97e6d4f7008"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "7ec563affad890b3c04c44e08fbed491fb630743",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f789e0044429c3901c0e00d9fea0f7667e01a5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f789e0044429c3901c0e00d9fea0f7667e01a5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d3f789e0044429c3901c0e00d9fea0f7667e01a5",
        "patch": "@@ -177,10 +177,6 @@ static std::vector<CAddress> convertSeed6(const std::vector<SeedSpec6> &vSeedsIn\n     return vSeedsOut;\n }\n \n-// get best local address for a particular peer as a CAddress\n-// Otherwise, return the unroutable 0.0.0.0 but filled in with\n-// the normal parameters, since the IP may be changed to a useful\n-// one by discovery.\n CAddress GetLocalAddress(const CNetAddr& paddrPeer, ServiceFlags nLocalServices)\n {\n     CAddress ret(CService(CNetAddr(),GetListenPort()), nLocalServices);\n@@ -200,15 +196,13 @@ static int GetnScore(const CService& addr)\n     return mapLocalHost[addr].nScore;\n }\n \n-// Is our peer's addrLocal potentially useful as an external IP source?\n bool IsPeerAddrLocalGood(CNode& pnode)\n {\n     CService addrLocal = pnode.GetAddrLocal();\n     return fDiscover && pnode.addr.IsRoutable() && addrLocal.IsRoutable() &&\n            IsReachable(addrLocal.GetNetwork());\n }\n \n-// pushes our own address to a peer\n void AdvertiseLocal(CNode& pnode)\n {\n     if (fListen && pnode.fSuccessfullyConnected)\n@@ -235,7 +229,6 @@ void AdvertiseLocal(CNode& pnode)\n     }\n }\n \n-// learn a new local address\n bool AddLocal(const CService& addr, int nScore)\n {\n     if (!addr.IsRoutable())\n@@ -293,7 +286,6 @@ bool IsReachable(const CNetAddr &addr)\n     return IsReachable(addr.GetNetwork());\n }\n \n-/** vote for a local address */\n bool SeenLocal(const CService& addr)\n {\n     {\n@@ -305,8 +297,6 @@ bool SeenLocal(const CService& addr)\n     return true;\n }\n \n-\n-/** check whether a given address is potentially local */\n bool IsLocal(const CService& addr)\n {\n     LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "44714bb152b3298b1eb19c506781b06313db4d4f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f789e0044429c3901c0e00d9fea0f7667e01a5/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f789e0044429c3901c0e00d9fea0f7667e01a5/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d3f789e0044429c3901c0e00d9fea0f7667e01a5",
        "patch": "@@ -647,7 +647,12 @@ enum\n     LOCAL_MAX\n };\n \n+/** Is our peer's addrLocal potentially useful as an external IP source? */\n bool IsPeerAddrLocalGood(CNode& pnode);\n+/**\n+ * Add our \"best\" local address (see GetLocal) to the batch of addresses\n+ * we are planning to relay to a given node as scheduled.\n+ */\n void AdvertiseLocal(CNode& pnode);\n \n /**\n@@ -660,10 +665,18 @@ bool IsReachable(enum Network net);\n /** @returns true if the address is in a reachable network, false otherwise */\n bool IsReachable(const CNetAddr& addr);\n \n+/** Learn a new local address */\n bool AddLocal(const CService& addr, int nScore = LOCAL_NONE);\n+/** Remove a local address from mapLocalHost */\n void RemoveLocal(const CService& addr);\n+/** Vote for a local address */\n bool SeenLocal(const CService& addr);\n+/** Check whether a given address is potentially local */\n bool IsLocal(const CService& addr);\n+/** Get best local address for a particular peer as a CAddress.\n+ *  Otherwise, return the unroutable 0.0.0.0 but filled in with\n+ *  the normal parameters, since the IP may be changed to a useful\n+ *  one by discovery. */\n CAddress GetLocalAddress(const CNetAddr& paddrPeer, ServiceFlags nLocalServices);\n \n "
      }
    ]
  },
  {
    "sha": "43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0M2QzOGI1NjQ3ZGQyY2U5MzMxNmRiMzBiOTAwYzZlNmZkNGFkNGMy",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-10-13T10:53:04Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-18T08:08:47Z"
      },
      "message": "[net] remove fListen and fSuccessfullyConnected checks from AdvertiseLocal\n\nThis is a pure refactor commit and moves the checks to the calling function.",
      "tree": {
        "sha": "f21cc9559d9c03fdd5f03bc6164a407fb612d645",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f21cc9559d9c03fdd5f03bc6164a407fb612d645"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3f789e0044429c3901c0e00d9fea0f7667e01a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f789e0044429c3901c0e00d9fea0f7667e01a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f789e0044429c3901c0e00d9fea0f7667e01a5"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 29,
      "deletions": 23
    },
    "files": [
      {
        "sha": "35e4d3092de24dfc7f8ef576cbe4df070b8a920a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 21,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
        "patch": "@@ -205,27 +205,32 @@ bool IsPeerAddrLocalGood(CNode& pnode)\n \n void AdvertiseLocal(CNode& pnode)\n {\n-    if (fListen && pnode.fSuccessfullyConnected)\n-    {\n-        CAddress addrLocal = GetLocalAddress(pnode.addr, pnode.GetLocalServices());\n-        if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n-            // use IPv4 loopback during addrmantest\n-            addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode.GetLocalServices());\n-        }\n-        // If discovery is enabled, sometimes give our peer the address it\n-        // tells us that it sees us as in case it has a better idea of our\n-        // address than we do.\n-        FastRandomContext rng;\n-        if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n-             rng.randbits((GetnScore(addrLocal) > LOCAL_MANUAL) ? 3 : 1) == 0))\n-        {\n-            addrLocal.SetIP(pnode.GetAddrLocal());\n-        }\n-        if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false))\n-        {\n-            LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n-            pnode.PushAddress(addrLocal, rng);\n-        }\n+    assert(fListen);\n+    assert(pnode.fSuccessfullyConnected);\n+\n+    // First consider our \"best\" addr for the peer, as seen locally.\n+    // In absence of other information, we assume that the locally seen address\n+    // is the \"best\" addr for peers to refer to our node.\n+    CAddress addrLocal = GetLocalAddress(pnode.addr, pnode.GetLocalServices());\n+\n+    if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n+        // use IPv4 loopback during addrmantest\n+        addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode.GetLocalServices());\n+    }\n+\n+    // If discovery is enabled, we request that peers advertise our node to their peers.\n+    // Under some circumstances, our peers may have a more accurate perspective\n+    // on our address than our own node. Sometimes, we ask our peer to advertise\n+    // our node under the address they see us as at instead of the address that our\n+    // node thinks it has.\n+    FastRandomContext rng;\n+    if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() || rng.randbits((GetnScore(addrLocal) > LOCAL_MANUAL) ? 3 : 1) == 0)) {\n+        addrLocal.SetIP(pnode.GetAddrLocal());\n+    }\n+\n+    if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false)) {\n+        LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n+        pnode.PushAddress(addrLocal, rng);\n     }\n }\n "
      },
      {
        "sha": "ba000a1f3900f2f516a38c0456d192d22da8181e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
        "patch": "@@ -2396,7 +2396,7 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n             //\n             // We skip this for block-relay-only peers to avoid potentially leaking\n             // information about our block-relay-only connections via address relay.\n-            if (fListen && !::ChainstateActive().IsInitialBlockDownload())\n+            if (fListen && !::ChainstateActive().IsInitialBlockDownload() && pfrom.fSuccessfullyConnected)\n             {\n                 CAddress addr = GetLocalAddress(pfrom.addr, pfrom.GetLocalServices());\n                 FastRandomContext insecure_rand;\n@@ -4117,7 +4117,8 @@ bool PeerManager::SendMessages(CNode* pto)\n         // Address refresh broadcast\n         auto current_time = GetTime<std::chrono::microseconds>();\n \n-        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() && pto->m_next_local_addr_send.load() < current_time) {\n+        if (pto->RelayAddrsWithConn() && !::ChainstateActive().IsInitialBlockDownload() &&\n+            pto->m_next_local_addr_send.load() < current_time && fListen) {\n             // If we've sent before, clear the bloom filter for the peer, so that our\n             // self-announcement will actually go out.\n             // This might be unnecessary if the bloom filter has already rolled"
      }
    ]
  },
  {
    "sha": "10fc62f0c29f640fdefc7114576133fbf18c488a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMGZjNjJmMGMyOWY2NDBmZGVmYzcxMTQ1NzYxMzNmYmYxOGM0ODhh",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-10T20:29:01Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-18T08:08:49Z"
      },
      "message": "[net] Use both locally and remotely seen addresses of us for advertising\n\nPreviously AdvertiseLocal() used either the address a peer thinks we are,\nor the address we think we are.\n\nUse both instead (assuming the local one is routable), as it would increase our\nchances of getting connected to.",
      "tree": {
        "sha": "67aa147666f2cf68b5294e05a75181deab011398",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67aa147666f2cf68b5294e05a75181deab011398"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10fc62f0c29f640fdefc7114576133fbf18c488a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fc62f0c29f640fdefc7114576133fbf18c488a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10fc62f0c29f640fdefc7114576133fbf18c488a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fc62f0c29f640fdefc7114576133fbf18c488a/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43d38b5647dd2ce93316db30b900c6e6fd4ad4c2"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 14,
      "deletions": 17
    },
    "files": [
      {
        "sha": "a7e750a6aaae6f72ce9efbcc05bffd040fdb8313",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 17,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10fc62f0c29f640fdefc7114576133fbf18c488a/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10fc62f0c29f640fdefc7114576133fbf18c488a/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=10fc62f0c29f640fdefc7114576133fbf18c488a",
        "patch": "@@ -189,13 +189,6 @@ CAddress GetLocalAddress(const CNetAddr& paddrPeer, ServiceFlags nLocalServices)\n     return ret;\n }\n \n-static int GetnScore(const CService& addr)\n-{\n-    LOCK(cs_mapLocalHost);\n-    if (mapLocalHost.count(addr) == 0) return 0;\n-    return mapLocalHost[addr].nScore;\n-}\n-\n bool IsPeerAddrLocalGood(CNode& pnode)\n {\n     CService addrLocal = pnode.GetAddrLocal();\n@@ -208,27 +201,31 @@ void AdvertiseLocal(CNode& pnode)\n     assert(fListen);\n     assert(pnode.fSuccessfullyConnected);\n \n-    // First consider our \"best\" addr for the peer, as seen locally.\n-    // In absence of other information, we assume that the locally seen address\n-    // is the \"best\" addr for peers to refer to our node.\n-    CAddress addrLocal = GetLocalAddress(pnode.addr, pnode.GetLocalServices());\n+    FastRandomContext rng;\n \n     if (gArgs.GetBoolArg(\"-addrmantest\", false)) {\n         // use IPv4 loopback during addrmantest\n-        addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode.GetLocalServices());\n+        CAddress addrLocal = CAddress(CService(LookupNumeric(\"127.0.0.1\", GetListenPort())), pnode.GetLocalServices());\n+        LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n+        pnode.PushAddress(addrLocal, rng);\n+        return;\n+    }\n+\n+    // We assume that the locally seen address is a good addr\n+    // for peers to refer to our node, assuming it is routable.\n+    CAddress addrLocal = GetLocalAddress(pnode.addr, pnode.GetLocalServices());\n+    if (addrLocal.IsRoutable()) {\n+        LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n+        pnode.PushAddress(addrLocal, rng);\n     }\n \n     // If discovery is enabled, we request that peers advertise our node to their peers.\n     // Under some circumstances, our peers may have a more accurate perspective\n     // on our address than our own node. Sometimes, we ask our peer to advertise\n     // our node under the address they see us as at instead of the address that our\n     // node thinks it has.\n-    FastRandomContext rng;\n-    if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() || rng.randbits((GetnScore(addrLocal) > LOCAL_MANUAL) ? 3 : 1) == 0)) {\n+    if (IsPeerAddrLocalGood(pnode)) {\n         addrLocal.SetIP(pnode.GetAddrLocal());\n-    }\n-\n-    if (addrLocal.IsRoutable() || gArgs.GetBoolArg(\"-addrmantest\", false)) {\n         LogPrint(BCLog::NET, \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n         pnode.PushAddress(addrLocal, rng);\n     }"
      }
    ]
  },
  {
    "sha": "99f67685a223148693c400292ef8fec9de8d01d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWY2NzY4NWEyMjMxNDg2OTNjNDAwMjkyZWY4ZmVjOWRlOGQwMWQz",
    "commit": {
      "author": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-09T12:38:21Z"
      },
      "committer": {
        "name": "Gleb Naumenko",
        "email": "naumenko.gs@gmail.com",
        "date": "2020-12-18T08:09:31Z"
      },
      "message": "[net] Don't PushAddress(self) on VERSION\n\nPreviously, we would prepare to self-announce to a new peer while\nparsing a VERSION message from that peer. This is useless,\nbecause we do something very similar in AdvertiseLocal(),\nalthough there are a couple differences:\n1) AdvertiseLocal() does this for all peers, not just outbound\n2) AdvertiseLocal() always asks the peer to advertise based on what\nthey think we are AND what we think we are (assuming it's routable),\nwhile PushAddress(self) on VERSION always does one of the two.\n\n(1) and the fact that AdvertiseLocal() is called right before\nactually sending out ADDR message with our address makes it fully\nencompassing PushAddress(self) on VERSION.\n\nPer (2), AdvertiseLocal() seems like a better version of\nPushAddress(self) on VERSION.\n\nThus, it's fine to drop PushAddress(self) on VERSION.",
      "tree": {
        "sha": "12ebb098351483b407f3c80fb6fa5363ee18c511",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12ebb098351483b407f3c80fb6fa5363ee18c511"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99f67685a223148693c400292ef8fec9de8d01d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99f67685a223148693c400292ef8fec9de8d01d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99f67685a223148693c400292ef8fec9de8d01d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99f67685a223148693c400292ef8fec9de8d01d3/comments",
    "author": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10fc62f0c29f640fdefc7114576133fbf18c488a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10fc62f0c29f640fdefc7114576133fbf18c488a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10fc62f0c29f640fdefc7114576133fbf18c488a"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 4,
      "deletions": 22
    },
    "files": [
      {
        "sha": "b261deb70c962594cc855a471dada2513f8a0e76",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 22,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99f67685a223148693c400292ef8fec9de8d01d3/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99f67685a223148693c400292ef8fec9de8d01d3/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=99f67685a223148693c400292ef8fec9de8d01d3",
        "patch": "@@ -2386,32 +2386,14 @@ void PeerManager::ProcessMessage(CNode& pfrom, const std::string& msg_type, CDat\n         }\n \n         if (!pfrom.IsInboundConn() && !pfrom.IsBlockOnlyConn()) {\n-            // For outbound peers, we try to relay our address (so that other\n-            // nodes can try to find us more quickly, as we have no guarantee\n-            // that an outbound peer is even aware of how to reach us) and do a\n-            // one-time address fetch (to help populate/update our addrman). If\n-            // we're starting up for the first time, our addrman may be pretty\n-            // empty and no one will know who we are, so these mechanisms are\n+            // For outbound peers, we do a one-time address fetch\n+            // (to help populate/update our addrman).\n+            // If we're starting up for the first time, our addrman may be pretty\n+            // empty and no one will know who we are, so this mechanism is\n             // important to help us connect to the network.\n             //\n             // We skip this for block-relay-only peers to avoid potentially leaking\n             // information about our block-relay-only connections via address relay.\n-            if (fListen && !::ChainstateActive().IsInitialBlockDownload() && pfrom.fSuccessfullyConnected)\n-            {\n-                CAddress addr = GetLocalAddress(pfrom.addr, pfrom.GetLocalServices());\n-                FastRandomContext insecure_rand;\n-                if (addr.IsRoutable())\n-                {\n-                    LogPrint(BCLog::NET, \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom.PushAddress(addr, insecure_rand);\n-                } else if (IsPeerAddrLocalGood(pfrom)) {\n-                    addr.SetIP(addrMe);\n-                    LogPrint(BCLog::NET, \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom.PushAddress(addr, insecure_rand);\n-                }\n-            }\n-\n-            // Get recent addresses\n             m_connman.PushMessage(&pfrom, CNetMsgMaker(greatest_common_version).Make(NetMsgType::GETADDR));\n             pfrom.fGetAddr = true;\n         }"
      }
    ]
  }
]