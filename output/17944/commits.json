[
  {
    "sha": "e5036ad1f8bec05a09a4cae7915616bea7ea6c09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNTAzNmFkMWY4YmVjMDVhMDlhNGNhZTc5MTU2MTZiZWE3ZWE2YzA5",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "accounts@carldong.me",
        "date": "2019-03-26T22:42:36Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-01-16T21:07:45Z"
      },
      "message": "docs: Improve GetLocal documentation",
      "tree": {
        "sha": "954468b515bae5f4fd18c0b555eff9f95211f908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/954468b515bae5f4fd18c0b555eff9f95211f908"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e5036ad1f8bec05a09a4cae7915616bea7ea6c09",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl4g0KEACgkQDMUhUxl5\nkaUMihAAghoAAo8L9TU971q3x/z+7tLka821KedrDkbivm/S2/3doFzWo1KVBPxU\nZ7n436X6meP0vXtCeogeeYML+iZvlu1jS3uy0C+JfiLDAfJZACx+zhqeSoGAq+Qy\nE6w9gAd9zkUGDyDhH39PhU17q8liTXQUzOfI5Hp+qyZ3V5WmItI3vpUAX36fvR3Z\n4Z2UU9Q9dizTjVkEdMPFymnR2IcokoekYK7I2UjGpf0tofMSY/SKmtusXs32SDVa\nYLtYs3Tyv3btdw9nBsbuoyCIMLmYuMstwwhhNmLP1saIWumojSxFfVwN/nMbI3Cg\nISFg/vlQalfhf68OU+5iB7YKydM+ZwY/xLQ6I56FGGUuw0aTxjaCBkHftzCWpnnj\nbvjGvXnPfopgG7lJbRx5E+8TjtpzomUYKtaNYOnpUKwO9mmf1cAFtE40efs86aFm\n1uO+q0Avc2rYxjEiucIPEjOnkJ549ZQHw42zqCWBS8163CAbAjATOWlNxmz31PAQ\nragEWNagRCyLvK8Mp+ZadP2BrHs8eou6fs03KxPwUXddpxQd8Hh0gXWhSr9Nd1I7\nvN7HWwR8dD57pBEleadWLX1vxkq1uGrk1PY3bEWzt04Fn40Fhy0NrUdXyEz4vCMO\nPqqbS/P5jzAW+K25FS/lkiI2jElA2pV6YuBOvobUUFBp1pkNnqA=\n=3PTN\n-----END PGP SIGNATURE-----",
        "payload": "tree 954468b515bae5f4fd18c0b555eff9f95211f908\nparent ceb789cf3a9075729efa07f5114ce0369d8606c3\nauthor Carl Dong <accounts@carldong.me> 1553640156 -0400\ncommitter Carl Dong <contact@carldong.me> 1579208865 -0500\n\ndocs: Improve GetLocal documentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5036ad1f8bec05a09a4cae7915616bea7ea6c09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e5036ad1f8bec05a09a4cae7915616bea7ea6c09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5036ad1f8bec05a09a4cae7915616bea7ea6c09/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ceb789cf3a9075729efa07f5114ce0369d8606c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ceb789cf3a9075729efa07f5114ce0369d8606c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ceb789cf3a9075729efa07f5114ce0369d8606c3"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e39a0f5b5cb4b981ba2e910344df7061d7934c44",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e5036ad1f8bec05a09a4cae7915616bea7ea6c09/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e5036ad1f8bec05a09a4cae7915616bea7ea6c09/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e5036ad1f8bec05a09a4cae7915616bea7ea6c09",
        "patch": "@@ -101,7 +101,18 @@ unsigned short GetListenPort()\n     return (unsigned short)(gArgs.GetArg(\"-port\", Params().GetDefaultPort()));\n }\n \n-// find 'best' local address for a particular peer\n+/**\n+ * Find the local service with the best reachability from a particular peer,\n+ * breaking ties by their scores.\n+ *\n+ * @param[out] addr The local service, if found.\n+ * @param paddrPeer The peer from which to evaluate reachability.\n+ *\n+ * @returns Whether or not a local service was found.\n+ *\n+ * @see CNetAddr::GetReachabilityFrom(const CNetAddr *) for how reachability is\n+ *      scored.\n+ */\n bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n {\n     if (!fListen)"
      }
    ]
  },
  {
    "sha": "2120989b9cdc3cc4e132183f4fdb2124b8a90141",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTIwOTg5YjljZGMzY2M0ZTEzMjE4M2Y0ZmRiMjEyNGI4YTkwMTQx",
    "commit": {
      "author": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-01-16T20:40:08Z"
      },
      "committer": {
        "name": "Carl Dong",
        "email": "contact@carldong.me",
        "date": "2020-01-16T21:07:46Z"
      },
      "message": "netaddress: Simplify reachability logic\n\nOur reachability logic was overly complicated, and most likely\nincorrect. In particular, we would prefer advertising our IPv4 services\nfor peers on Toredo, which would most likely just result in us sending\npackets to their Toredo provider.\n\nThe new logic is a bit simpler:\n\n- Assume all peers can reach us through IPv4 (same as before)\n- If peer is unknown or unroutable, assume they can reach through every\n  network (same as before)\n- IPv6 peers can reach through IPv6\n- Onion peers can reach through Onion",
      "tree": {
        "sha": "65987dce3004f327de65bfe47e1ecff2127e1d2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/65987dce3004f327de65bfe47e1ecff2127e1d2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2120989b9cdc3cc4e132183f4fdb2124b8a90141",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEECc3SW1JEo3Z49u6oDMUhUxl5kaUFAl4g0KIACgkQDMUhUxl5\nkaUsNw//b0VzhZgsOvRkSOyokbcIyxoOzyvEQWpn5H+qEhn8J+ftdut980BJzCrD\nk0S05ZqX/u/F0tbS4gthVNgNFFLrx0eP1zVAIjfJdxAPIPUPyvk0yckhtFO3TiWh\nwnrh/69u3S+uCMqRu6LQbA1KQkaPbMW9ezkWaiE5eyqomU/ZCBn2TD1dl4uE6Rqx\n6PBEB4jZFQBxa5cROE1BcbzPhsE9+3bZH1RfJwOQtNkiv9BV4AkS2D37ArroDHt2\njTr+Y9qnXcs5TM8W15HDPFVgq9eS+BwudLjtJujX0XPCtfiE9A7TrnCT2CKOoosX\n1Sh44QUuTB7Ry/vIxegGhJomZM/LynfVAuGyCvW6B0488D4+9S/VIBlCIKWfT4aB\ntAGAEB697lflD50/lWeXZ8OEisEhFtnh0SACoPoBQ95suKAlZf7g46coxiRw0ZgN\ny30UZsS10bZTKiTLg00R4RB6BLpL91ynIuYqY9ItXoAUk4zSQ9QBE+SOcYhd7+zL\nE6EuoNW4htsqExMSPkGtvFjsIY33vAZgEuo5BFo90Gg46guTLTCdbZN4oNjwFw1S\nw8LJnzq2GEv5wv1GjYwvRtB+TRdmc5KiI62IDvZ6v+U01uLFA3PZJp+NAOU6MiGK\nNtFu1p5OLZDJFnmdKpzmJ9MNS+74OF4bKZAoPnoYIUtadfihccE=\n=g67q\n-----END PGP SIGNATURE-----",
        "payload": "tree 65987dce3004f327de65bfe47e1ecff2127e1d2e\nparent e5036ad1f8bec05a09a4cae7915616bea7ea6c09\nauthor Carl Dong <contact@carldong.me> 1579207208 -0500\ncommitter Carl Dong <contact@carldong.me> 1579208866 -0500\n\nnetaddress: Simplify reachability logic\n\nOur reachability logic was overly complicated, and most likely\nincorrect. In particular, we would prefer advertising our IPv4 services\nfor peers on Toredo, which would most likely just result in us sending\npackets to their Toredo provider.\n\nThe new logic is a bit simpler:\n\n- Assume all peers can reach us through IPv4 (same as before)\n- If peer is unknown or unroutable, assume they can reach through every\n  network (same as before)\n- IPv6 peers can reach through IPv6\n- Onion peers can reach through Onion\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2120989b9cdc3cc4e132183f4fdb2124b8a90141",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2120989b9cdc3cc4e132183f4fdb2124b8a90141",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2120989b9cdc3cc4e132183f4fdb2124b8a90141/comments",
    "author": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dongcarl",
      "id": 3445290,
      "node_id": "MDQ6VXNlcjM0NDUyOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3445290?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dongcarl",
      "html_url": "https://github.com/dongcarl",
      "followers_url": "https://api.github.com/users/dongcarl/followers",
      "following_url": "https://api.github.com/users/dongcarl/following{/other_user}",
      "gists_url": "https://api.github.com/users/dongcarl/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dongcarl/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dongcarl/subscriptions",
      "organizations_url": "https://api.github.com/users/dongcarl/orgs",
      "repos_url": "https://api.github.com/users/dongcarl/repos",
      "events_url": "https://api.github.com/users/dongcarl/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dongcarl/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e5036ad1f8bec05a09a4cae7915616bea7ea6c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e5036ad1f8bec05a09a4cae7915616bea7ea6c09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e5036ad1f8bec05a09a4cae7915616bea7ea6c09"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 19,
      "deletions": 49
    },
    "files": [
      {
        "sha": "47d548d4ebf2301ad08ced2fd0562450cf6455d1",
        "filename": "src/netaddress.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 49,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2120989b9cdc3cc4e132183f4fdb2124b8a90141/src/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2120989b9cdc3cc4e132183f4fdb2124b8a90141/src/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netaddress.cpp?ref=2120989b9cdc3cc4e132183f4fdb2124b8a90141",
        "patch": "@@ -494,76 +494,46 @@ uint64_t CNetAddr::GetHash() const\n     return nRet;\n }\n \n-// private extensions to enum Network, only returned by GetExtNetwork,\n-// and only used in GetReachabilityFrom\n-static const int NET_UNKNOWN = NET_MAX + 0;\n-static const int NET_TEREDO  = NET_MAX + 1;\n-int static GetExtNetwork(const CNetAddr *addr)\n-{\n-    if (addr == nullptr)\n-        return NET_UNKNOWN;\n-    if (addr->IsRFC4380())\n-        return NET_TEREDO;\n-    return addr->GetNetwork();\n-}\n+// private extension to enum Network, only returned by GetExtNetwork, and only\n+// used in GetReachabilityFrom\n+#define NET_UNKNOWN NET_MAX\n \n /** Calculates a metric for how reachable (*this) is from a given partner */\n int CNetAddr::GetReachabilityFrom(const CNetAddr *paddrPartner) const\n {\n     enum Reachability {\n         REACH_UNREACHABLE,\n         REACH_DEFAULT,\n-        REACH_TEREDO,\n-        REACH_IPV6_WEAK,\n         REACH_IPV4,\n-        REACH_IPV6_STRONG,\n+        REACH_IPV6,\n         REACH_PRIVATE\n     };\n \n     if (!IsRoutable() || IsInternal())\n         return REACH_UNREACHABLE;\n \n-    int ourNet = GetExtNetwork(this);\n-    int theirNet = GetExtNetwork(paddrPartner);\n-    bool fTunnel = IsRFC3964() || IsRFC6052() || IsRFC6145();\n+    int ourNet = GetNetwork();\n+    int theirNet = paddrPartner == nullptr ? NET_UNKNOWN : paddrPartner->GetNetwork();\n \n-    switch(theirNet) {\n+    switch(ourNet) {\n     case NET_IPV4:\n-        switch(ourNet) {\n-        default:       return REACH_DEFAULT;\n-        case NET_IPV4: return REACH_IPV4;\n-        }\n+        return REACH_IPV4;\n     case NET_IPV6:\n-        switch(ourNet) {\n-        default:         return REACH_DEFAULT;\n-        case NET_TEREDO: return REACH_TEREDO;\n-        case NET_IPV4:   return REACH_IPV4;\n-        case NET_IPV6:   return fTunnel ? REACH_IPV6_WEAK : REACH_IPV6_STRONG; // only prefer giving our IPv6 address if it's not tunnelled\n+        switch(theirNet) {\n+        case NET_IPV6:\n+        case NET_UNKNOWN:\n+        case NET_UNROUTABLE:\n+            return REACH_IPV6;\n         }\n     case NET_ONION:\n-        switch(ourNet) {\n-        default:         return REACH_DEFAULT;\n-        case NET_IPV4:   return REACH_IPV4; // Tor users can connect to IPv4 as well\n-        case NET_ONION:    return REACH_PRIVATE;\n-        }\n-    case NET_TEREDO:\n-        switch(ourNet) {\n-        default:          return REACH_DEFAULT;\n-        case NET_TEREDO:  return REACH_TEREDO;\n-        case NET_IPV6:    return REACH_IPV6_WEAK;\n-        case NET_IPV4:    return REACH_IPV4;\n-        }\n-    case NET_UNKNOWN:\n-    case NET_UNROUTABLE:\n-    default:\n-        switch(ourNet) {\n-        default:          return REACH_DEFAULT;\n-        case NET_TEREDO:  return REACH_TEREDO;\n-        case NET_IPV6:    return REACH_IPV6_WEAK;\n-        case NET_IPV4:    return REACH_IPV4;\n-        case NET_ONION:     return REACH_PRIVATE; // either from Tor, or don't care about our address\n+        switch(theirNet) {\n+        case NET_ONION:\n+        case NET_UNKNOWN:\n+        case NET_UNROUTABLE:\n+            return REACH_PRIVATE;\n         }\n     }\n+    return REACH_DEFAULT;\n }\n \n CService::CService() : port(0)"
      }
    ]
  }
]