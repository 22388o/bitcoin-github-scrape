[
  {
    "sha": "74ae99112e972225c8b44c62ace25dbf17fc0ee9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGFlOTkxMTJlOTcyMjI1YzhiNDRjNjJhY2UyNWRiZjE3ZmMwZWU5",
    "commit": {
      "author": {
        "name": "Jesse Cohen",
        "email": "jc@jc.lol",
        "date": "2018-05-08T16:44:27Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@gmail.com",
        "date": "2018-05-23T14:55:05Z"
      },
      "message": "logging: perform logfile writes in a separate thread\n\nInstead of flushing logs to disk synchronously within the\noriginating thread, push the log message into a ring buffer to\nbe consumed and written to disk by a separate, logging-specific\nthread.\n\nCo-authored-by: James O'Beirne <james@chaincode.com>",
      "tree": {
        "sha": "a85bd2820a5b09b2dbd6ac1c11b1cd2b54fa3b69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a85bd2820a5b09b2dbd6ac1c11b1cd2b54fa3b69"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74ae99112e972225c8b44c62ace25dbf17fc0ee9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74ae99112e972225c8b44c62ace25dbf17fc0ee9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74ae99112e972225c8b44c62ace25dbf17fc0ee9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74ae99112e972225c8b44c62ace25dbf17fc0ee9/comments",
    "author": {
      "login": "skeees",
      "id": 195769,
      "node_id": "MDQ6VXNlcjE5NTc2OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/195769?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/skeees",
      "html_url": "https://github.com/skeees",
      "followers_url": "https://api.github.com/users/skeees/followers",
      "following_url": "https://api.github.com/users/skeees/following{/other_user}",
      "gists_url": "https://api.github.com/users/skeees/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/skeees/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/skeees/subscriptions",
      "organizations_url": "https://api.github.com/users/skeees/orgs",
      "repos_url": "https://api.github.com/users/skeees/repos",
      "events_url": "https://api.github.com/users/skeees/events{/privacy}",
      "received_events_url": "https://api.github.com/users/skeees/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5870ab689995e7dc1ada530e9db27cfae9bb448",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5870ab689995e7dc1ada530e9db27cfae9bb448",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5870ab689995e7dc1ada530e9db27cfae9bb448"
      }
    ],
    "stats": {
      "total": 162,
      "additions": 160,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d201337ca5e96e11f67ea5645e349616e8a49939",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74ae99112e972225c8b44c62ace25dbf17fc0ee9/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74ae99112e972225c8b44c62ace25dbf17fc0ee9/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=74ae99112e972225c8b44c62ace25dbf17fc0ee9",
        "patch": "@@ -457,6 +457,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), DEFAULT_LOGIPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), DEFAULT_LOGTIMESTAMPS), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-logasync\", strprintf(_(\"Buffer debug output and flush it to file asynchronously (default: %u)\"), DEFAULT_LOGASYNC), false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n@@ -808,7 +809,7 @@ void InitLogging()\n     // Add newlines to the logfile to distinguish this execution from the last\n     // one; called before console logging is set up, so this is only sent to\n     // debug.log.\n-    LogPrintf(\"\\n\\n\\n\\n\\n\");\n+    g_logger->LogPrintStr(\"\\n\\n\\n\\n\\n\");\n \n     g_logger->m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", !gArgs.GetBoolArg(\"-daemon\", false));\n     g_logger->m_log_timestamps = gArgs.GetBoolArg(\"-logtimestamps\", DEFAULT_LOGTIMESTAMPS);\n@@ -1215,6 +1216,10 @@ bool AppInitMain()\n             return InitError(strprintf(\"Could not open debug log file %s\",\n                                        g_logger->m_file_path.string()));\n         }\n+\n+        if (gArgs.GetBoolArg(\"-logasync\", DEFAULT_LOGASYNC)) {\n+            async_logging::Init();\n+        }\n     }\n \n     if (!g_logger->m_log_timestamps)"
      },
      {
        "sha": "f48d74e9efc1792ed58e960dca979262860efa07",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74ae99112e972225c8b44c62ace25dbf17fc0ee9/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74ae99112e972225c8b44c62ace25dbf17fc0ee9/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=74ae99112e972225c8b44c62ace25dbf17fc0ee9",
        "patch": "@@ -5,6 +5,12 @@\n \n #include <logging.h>\n #include <utiltime.h>\n+#include <reverselock.h>\n+\n+#include <chrono>\n+#include <mutex>\n+#include <condition_variable>\n+#include <thread>\n \n const char * const DEFAULT_DEBUGLOGFILE = \"debug.log\";\n \n@@ -231,6 +237,11 @@ void BCLog::Logger::LogPrintStr(const std::string &str)\n     }\n }\n \n+void BCLog::Logger::FlushFile()\n+{\n+    fflush(m_fileout);\n+}\n+\n void BCLog::Logger::ShrinkDebugFile()\n {\n     // Amount of debug.log to save at end when shrinking (must fit in memory)\n@@ -271,3 +282,136 @@ void BCLog::Logger::ShrinkDebugFile()\n     else if (file != nullptr)\n         fclose(file);\n }\n+\n+/**\n+ * Queues log messages in a buffer and then writes them to output streams\n+ * in a separate thread.\n+ */\n+class AsyncLogger\n+{\n+public:\n+    AsyncLogger() : m_buffer_accumulating(m_capacity), m_buffer_flushing(m_capacity), m_active(false) {}\n+    ~AsyncLogger() {\n+        Stop();\n+    }\n+\n+    void Start()\n+    {\n+        std::unique_lock<std::mutex> l(m_lock);\n+        if (!m_active) {\n+            m_active = true;\n+            m_flusher = std::thread(&AsyncLogger::Thread, this);\n+        }\n+    }\n+\n+    void Stop()\n+    {\n+        bool do_join = false;\n+\n+        {\n+            std::unique_lock<std::mutex> l(m_lock);\n+            if (m_active) {\n+                m_active = false;\n+                do_join = true;\n+            }\n+        }\n+\n+        if (do_join) {\n+            m_cv.notify_one();\n+            m_flusher.join();\n+        }\n+    }\n+\n+    void Push(std::string&& line)\n+    {\n+        // If we're not active, flush the logline immediately.\n+        if (!m_active) {\n+            g_logger->LogPrintStr(line);\n+            return;\n+        }\n+\n+        std::unique_lock<std::mutex> l(m_lock);\n+        m_buffer_accumulating[m_insert_pos()] = std::forward<std::string>(line);\n+        ++m_messages_queued;\n+    }\n+\n+    /** Flush logs every `m_flush_interval_ms` ms until we're instructed to shutdown. */\n+    void Thread(void)\n+    {\n+        std::unique_lock<std::mutex> l(m_lock);\n+        while (true) {\n+            if (!m_active) {\n+                break;\n+            }\n+\n+            // Only sleep if there isn't much left to do.\n+            if (m_messages_queued < (m_capacity * 0.1)) {\n+                // sleep until there's a lot to do or some time has passed\n+                m_cv.wait_for(l, std::chrono::milliseconds(m_flush_interval_ms));\n+            }\n+\n+            if (!m_messages_queued) {\n+                continue;\n+            }\n+\n+            // Swap the buffers here so that we can release the lock as soon as possible.\n+            // Holding the lock slows down producers, i.e. non-log code.\n+            std::swap(m_buffer_accumulating, m_buffer_flushing);\n+            buffer::size_type size = m_messages_queued;\n+            m_messages_queued = 0;\n+\n+            {\n+                // Drop the lock while flushing to\n+                reverse_lock<std::unique_lock<std::mutex>> release(l);\n+\n+                if (size > m_capacity) {\n+                    g_logger->LogPrintStr(strprintf(\n+                        \"WARNING: %d log messages were discarded\\n\", size - m_capacity));\n+                }\n+\n+                buffer::size_type n_to_flush = std::min(size, (buffer::size_type)m_capacity);\n+                buffer::size_type flush_idx = size > m_capacity ? size % m_capacity : 0;\n+\n+                for (; n_to_flush > 0; --n_to_flush) {\n+                    g_logger->LogPrintStr(std::move(m_buffer_flushing[flush_idx]));\n+                    flush_idx = (flush_idx + 1) % m_capacity;\n+                }\n+                g_logger->FlushFile();\n+            }\n+        }\n+    }\n+\n+private:\n+    bool m_active;\n+\n+    std::mutex m_lock;\n+    std::condition_variable m_cv;\n+    std::thread m_flusher;\n+\n+    const unsigned long int m_capacity = 1024;\n+    const unsigned int m_flush_interval_ms = 50;\n+\n+    using buffer = std::vector<std::string>;\n+\n+    // Use two buffers so that when we're ready to flush, we can just swap them and\n+    // won't have to hold the lock while flushing.\n+    buffer m_buffer_accumulating;\n+    buffer m_buffer_flushing;\n+\n+    buffer::size_type m_messages_queued;\n+    inline buffer::size_type m_insert_pos() { return m_messages_queued % m_capacity; }\n+};\n+\n+namespace async_logging {\n+    AsyncLogger log_buffer;\n+\n+    void Init(void)\n+    {\n+        log_buffer.Start();\n+    }\n+\n+    void Queue(std::string&& str)\n+    {\n+        log_buffer.Push(std::forward<std::string>(str));\n+    }\n+}"
      },
      {
        "sha": "65c7a97d01ce2ccea93e4bb9d1442c46ce1bb531",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74ae99112e972225c8b44c62ace25dbf17fc0ee9/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74ae99112e972225c8b44c62ace25dbf17fc0ee9/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=74ae99112e972225c8b44c62ace25dbf17fc0ee9",
        "patch": "@@ -19,6 +19,7 @@\n static const bool DEFAULT_LOGTIMEMICROS = false;\n static const bool DEFAULT_LOGIPS        = false;\n static const bool DEFAULT_LOGTIMESTAMPS = true;\n+static const bool DEFAULT_LOGASYNC      = true;\n extern const char * const DEFAULT_DEBUGLOGFILE;\n \n extern bool fLogIPs;\n@@ -93,6 +94,7 @@ namespace BCLog {\n \n         bool OpenDebugLog();\n         void ShrinkDebugFile();\n+        void FlushFile();\n \n         uint32_t GetCategoryMask() const { return m_categories.load(); }\n \n@@ -152,7 +154,7 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n             /* Original format string will have newline so don't add one here */ \\\n             _log_msg_ = \"Error \\\"\" + std::string(fmterr.what()) + \"\\\" while formatting log message: \" + FormatStringFromLogArgs(__VA_ARGS__); \\\n         } \\\n-        g_logger->LogPrintStr(_log_msg_); \\\n+        async_logging::Queue(std::move(_log_msg_));     \\\n     } \\\n } while(0)\n \n@@ -163,4 +165,11 @@ template<typename T, typename... Args> static inline void MarkUsed(const T& t, c\n } while(0)\n #endif\n \n+namespace async_logging {\n+    void Init(void);\n+\n+    /** Queue a log message to be written. */\n+    void Queue(std::string&& str);\n+}\n+\n #endif // BITCOIN_LOGGING_H"
      }
    ]
  }
]