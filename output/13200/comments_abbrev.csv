jnewbery,2018-05-09T15:32:31Z,"Concept ACK.\n\nMy thoughts on your open questions:\n\n- Do we want this behavior by default?\n[JN] Yes\n- Do we want to allow an opt-out configuration option that makes log processing synchronous again\n[JN] Yes\n- The ring buffer implementation allows either overwriting existing data or blocking when at full capacity. In the case of logging, I've set it to block and wait for capacity ins",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387779854,387779854,
practicalswift,2018-05-09T17:48:09Z,"Concept ACK!\n\nAgree with @jnewbery regarding the open questions.\n\nBenchmarks would be interesting.",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387820199,387820199,
MarcoFalke,2018-05-09T18:17:32Z,Wouldn't blocking be the status-quo and thus preferable for now?,https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-387829283,387829283,
jamesob,2018-05-10T20:30:25Z,"I've pushed changes that address @donaloconnor's good feedback (thanks, Donal).\n\nStill trying to decide what to do re: blocking vs. dropping messages; I'm inclined towards the approach that @jnewbery suggests since it seems to be the safest.",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388176097,388176097,
jamesob,2018-05-14T14:56:16Z,"Thanks for the thorough review and good feedback here, @skeees. I'll address most of your comments in an upcoming push.\n\nSadly, the benchmarks aren't looking good on this one. Either my implementation of the ringbuffer is dog slow or this Concept is eminently NACKable. \n\nDoing an IBD to height 250,000 from one (chain-synced) virtual machine to another (unsynced) over my local network, this",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388847174,388847174,
skeees,2018-05-14T15:16:10Z,I'd do some profiling / tweaking before you abandon this entirely. I'd think this should be at a minimum equivalent - and potentially substantially faster than the current way things are logged.,https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388854505,388854505,
jamesob,2018-05-14T18:59:54Z,"@TheBlueMatt's patch (https://github.com/jamesob/bitcoin/commit/7ab904ad933a7cec5c29cf4daf3f91efff93c676) is better than mine, but still a minute (i.e. 10%) slower than `master` on an SSD:\n\n### `master`\n```\nvagrant@bench:/tmp/2018-05-09-master-6186a/bitcoin$ time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-388926277,388926277,
skeees,2018-05-15T12:49:40Z,"I was curious about the unexpectedly slow performance and tried something slightly different -  https://github.com/skeees/bitcoin/commit/1bf2307b9bf406cc199f3671e856ecd7a582b2a8\n\nits a bit messy, but good enough for benchmarking which seems to suggest it performs slightly better than the current logging, especially if you give it short workloads (e.g. do a reindex w a stopatheight of 150k) - t",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-389154500,389154500,
jamesob,2018-05-15T20:01:42Z,"Nice, @skeees! That approach performs the best so far in terms of async logging implementations, though it's still roughly on par with master in my benchmark:\n\n```\nvagrant@bench:/tmp/2018-05-11-2018-05-asynclog-13145/bitcoin$ rm -rf data && mkdir data && time ./src/bitcoind -datadir=`pwd`/data -conf=`pwd`/bitcoin.conf -debug=all -printtoconsole=0 -connect=0 -addnode=10.0.0.10 -listen=1 -stop",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-389294843,389294843,
skeees,2018-05-16T18:50:44Z,"I cleaned this up a bit more and updated my branch: https://github.com/skeees/bitcoin/tree/async-log-2\n(still does not shutdown cleanly)\n\nFor benchmarks like the below (a reindex of 1st 100k blocks), I see a substantial improvement - that slowly fades away and longer duration things (e.g. a large IBD) is effectively equivalent - which suggests this may have some performance benefit for short",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-389626700,389626700,
jamesob,2018-05-21T20:32:23Z,"I think I'm giving up the ghost on this one. I've taken @skeees' latest work, fixed shutdown, and simplified the code a bit, but I still can't get benchmarks to show improvement.\n\nBelow is a round of three reindexes to height 100,000:\n\n### master (https://github.com/bitcoin/bitcoin/commit/196c5a947a071f7c9c5b211f0a47787a7d540ecb)\n\n```sh\nvagrant@bench:/tmp/2018-05-09-master-6186a/bitc",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-390773530,390773530,
practicalswift,2018-05-21T20:42:02Z,I would like to thank you for doing this experimentation @jamesob. Negative results give insights too. Thanks!,https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-390776150,390776150,
jamesob,2018-05-23T14:13:45Z,Reopening because @skeees has some interesting bench results...,https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391362635,391362635,
skeees,2018-05-23T14:40:12Z,"wrote a quick benchmarking script here: https://gist.github.com/skeees/93d3ab3ce8ceabfa1b68df51d3b36b60\nIt compares the different logging approaches mentioned above - specifically a reindex and and ibd up to a fixed height\n\nSome sample results below (we've now had a couple of independent reproductions across a couple of different machines) - and the latest commit on this pr is consistently f",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391372242,391372242,
practicalswift,2018-05-23T17:15:11Z,"@skeees Is `_pin-1805-asynclog-master` the base case â€“ i.e. before this PR?\n\nDo you know roughly how many log messages that were printed during the reindex and ibd rounds respectively?",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391428244,391428244,
skeees,2018-05-23T17:32:32Z,"yeah - exactly master is a recent master (6916024768ec57a00f54224640ab4e4871d2a30a), and then i took matt's and my+jamesob's changes and rebased on top of that master - those are the 3 cases. you should be able to run that script if you wanna reproduce\n\ngood question - looks like the logs were ~150MB each run, 1.25mm lines",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-391433552,391433552,
DrahtBot,2018-07-22T23:49:28Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 60 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-406906692,406906692,
jamesob,2018-08-21T13:36:54Z,"Benchmarking with bitcoinperf shows a speedup of 4.6% on IBD up to height 200,000 with this change ([details here](https://gist.github.com/jamesob/b630242d28287050628f8685934a5c4d)).",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-414676303,414676303,
DrahtBot,2018-09-07T18:55:54Z,"<!--e57a25ab6845829454e8d69fc972939a-->Note to reviewers: This pull request conflicts with the following ones:\n\n* #14209 (logging: Replace LogPrint macros with regular functions by MarcoFalke)\n* #13088 (Log early messages with -printtoconsole by ajtowns)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that sho",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-419533677,419533677,
gmaxwell,2018-09-09T10:17:37Z,">  I'd go with (2), but push a final message to the ring buffer saying Logging buffer full - dropping new log messages, and then when the ring buffer is accepting messages again, push a message saying Logging buffer accepting new messages\n\nHow about (4)  Store a sequence number,  always overwrite.  When reading out, notice when there were missed messages via gaps in the sequence number and log",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-419704882,419704882,
DrahtBot,2018-09-13T09:29:00Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-420943850,420943850,
jamesob,2018-09-14T15:39:48Z,"> If you're doing a lot of this sort of testing, its useful to bring a node up to height 450k, stop it, back it up and benchmark reindexing up to 500k.\n\nThat sounds much more reasonable. I'll rerun benches on that part of the chain in the next few weeks.",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-421398482,421398482,
DrahtBot,2018-12-14T20:22:23Z,"<!--5fd3d806e98f4a0ca80977bb178665a0-->There hasn't been much activity lately and the patch still needs rebase, so I am closing this for now. Please let me know when you want to continue working on this, so the pull request can be re-opened.",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-447457417,447457417,
elichai,2020-07-09T19:51:04Z,"Just a thought I had,\nidk if there's lock contention here but you could remove locking from this entirely and replace with atomic pointers, and then you swap the buffer pointer with a new empty buffer pointer, that way the effect on the rest of the threads should be at worse a single cache miss",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-656318985,656318985,
jamesob,2020-07-09T20:30:33Z,"> Just a thought I had\n\nI don't plan to put any more work into this, but this might be a good project to pick up for a newish contributor.",https://github.com/bitcoin/bitcoin/pull/13200#issuecomment-656336168,656336168,
promag,2018-05-09T15:24:18Z,Maybe add batch support?,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187078556,187078556,src/logging.cpp
donaloconnor,2018-05-09T22:17:09Z,Do we really need the size type template parameter? Especially if you are passing an int through as a value. `size_t` makes more sense to me since std::array is size_t and signed sizes (int) also make no sense.,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192208,187192208,src/ringbuffer.h
donaloconnor,2018-05-09T22:19:09Z,constexpr ? I guess inline helps some here.,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187192592,187192592,src/ringbuffer.h
donaloconnor,2018-05-09T22:22:18Z,it doesn't make sense why having these (`m_insert_at_idx`and `m_read_at_idx`) as std::atomic is necessary if they are protected by the mutex,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193169,187193169,src/ringbuffer.h
donaloconnor,2018-05-09T22:25:00Z,if the object is movable it will be moved and the value will be empty already but if it's not movable and it's copied then I guess there's no big deal letting the data present? Seems unnecessary to construct an empty object in a free slot again.,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187193683,187193683,src/ringbuffer.h
donaloconnor,2018-05-09T22:28:50Z,"I think having a move version of PushBack with const v& ref push back would make more sense to avoid unnecessary copying.\n`PushBack(value_type&& v)` and `PushBack(const value_type& v)` ",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187194522,187194522,src/ringbuffer.h
donaloconnor,2018-05-09T22:45:26Z,`LogArgs& s` to avoid copies,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187197537,187197537,src/logging.cpp
donaloconnor,2018-05-09T22:57:46Z,"I feel we should use dynamic/heap memory for this for the following reasons:\n\n1. This is only allocated once on start up and is of fixed size.\n2. Passing a large value to this array can potentially have 2 problems:\n   1. In the stack it can overflow (if used later by someone else)\n   2. In global/static data it will grow the executable size. \n\nAnyway just what I feel. Maybe std::arra",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187199539,187199539,src/ringbuffer.h
jamesob,2018-05-10T17:07:29Z,"Good catch. Shouldn't `const value_type&` bind to both rvalues and lvalues, though?",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187394393,187394393,src/ringbuffer.h
jamesob,2018-05-10T18:47:14Z,"Yep, agree. Fixed.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423121,187423121,src/ringbuffer.h
jamesob,2018-05-10T18:47:20Z,Done.,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423152,187423152,src/ringbuffer.h
jamesob,2018-05-10T18:47:28Z,"Good point, fixed.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423208,187423208,src/ringbuffer.h
jamesob,2018-05-10T18:47:39Z,"Agree, fixed.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423274,187423274,src/ringbuffer.h
jamesob,2018-05-10T18:47:49Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423322,187423322,src/ringbuffer.h
jamesob,2018-05-10T18:47:56Z,"Good catch, fixed.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187423354,187423354,src/logging.cpp
jamesob,2018-05-10T20:16:51Z,"I'm going to leave this as-is for now since I don't think it's a real problem, but if you have thoughts to the contrary I'm curious to hear.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187446772,187446772,src/ringbuffer.h
donaloconnor,2018-05-10T20:30:42Z,Sounds good to me thanks! I went a bit overboard with the comments anyway.,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187450684,187450684,src/ringbuffer.h
jamesob,2018-05-10T20:31:53Z,"No, I thought your feedback was very useful - thanks!",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187451048,187451048,src/ringbuffer.h
skeees,2018-05-12T22:07:06Z,consider making these template parameter names less abbreviated,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784319,187784319,src/ringbuffer.h
skeees,2018-05-12T22:11:52Z,I think this is fine - if you want it on the heap you can alloc the entire `RingBuffer` on the heap,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784407,187784407,src/ringbuffer.h
skeees,2018-05-12T22:14:02Z,this approach seems strange - why not just use another condition variable the same way you do when you push things to the buffer?,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784436,187784436,src/ringbuffer.h
skeees,2018-05-12T22:19:43Z,"inline seems overkill here?\n",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784541,187784541,src/ringbuffer.h
skeees,2018-05-12T22:20:33Z,sufficient here to just do the size check?,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784547,187784547,src/ringbuffer.h
skeees,2018-05-12T22:22:53Z,also - if you wanna do the size_t stuff tradition / precedence would suggest doing `using size_type = size_t`,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784588,187784588,src/ringbuffer.h
skeees,2018-05-12T22:26:06Z,more simply written as `if(m_size == S) Increment else ++size ?,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784616,187784616,src/ringbuffer.h
skeees,2018-05-12T22:27:04Z,if you are doing this just to handle interruption on shutdown - you can do the boost::thread::interrupt() boost::condition_var and catch a boost::thread_interrupted exception instead of polling in a loop - its another option,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784633,187784633,src/ringbuffer.h
skeees,2018-05-12T22:28:34Z,why a pointer here? if you want to show that this function can fail consider this signature: `bool PollForOne(value_type& popped)` ,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784645,187784645,src/ringbuffer.h
skeees,2018-05-12T22:28:43Z,needs update,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784650,187784650,src/ringbuffer.h
skeees,2018-05-12T22:33:31Z,afaict this method is unsafe right now `AssumeLockedPopFront` (called internally) will assert if the buffer is empty - and there is no way currently to guarantee that I only call this method when there is something to pop,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784723,187784723,src/ringbuffer.h
skeees,2018-05-12T22:39:57Z,consider dropping m_read_at_idx - it can be expressed as a method `(m_insert_at_idx + m_size) % MaxSize()` - one less variable to ensure that you properly update,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784818,187784818,src/ringbuffer.h
skeees,2018-05-12T22:43:48Z,can preallocate to `m_size`,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784855,187784855,src/ringbuffer.h
skeees,2018-05-12T22:45:52Z,"also - you could just do this as two range copies one from read_at to min(read_at + m_size, S) and another from 0 to m_size - the size of the stuff you copied previously",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784881,187784881,src/ringbuffer.h
skeees,2018-05-12T22:51:27Z,you might as well make this a class instead of essentially a static object. who knows when we might want to have separate instances logging different modules to different log files and its very easy to just make this a class now,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784950,187784950,src/logging.cpp
skeees,2018-05-12T22:52:04Z,"much clearer to just have a start method, or RAII the class if you can?",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784956,187784956,src/logging.cpp
skeees,2018-05-12T22:52:46Z,i think you want to `std::forward` here and declare the arg `const std::string&&`,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187784965,187784965,src/logging.cpp
skeees,2018-05-13T15:52:34Z,to handle shutdown safely you need to have a way to interrupt writers who might be waiting for empty space too,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805383,187805383,src/ringbuffer.h
skeees,2018-05-13T15:59:01Z,"if for whatever reason there are more logs generated after you've flushed in this method - they wont ever get to the file.\nI think you mentioned somewhere having an option to enable synchronous logging. You should probably flip that flag that here so if something happens to get logged after the async logger is shut down it makes its way into the file, added benefit that you can be a bit less car",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805588,187805588,src/logging.cpp
skeees,2018-05-13T16:00:44Z,"i think if you do shutdown here it will only work for coind but not qt but in init.cpp it will for both? not entirely sure though\n",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805627,187805627,src/bitcoind.cpp
skeees,2018-05-13T16:12:35Z,"oh - why do in both? if you are just concerned about capturing all logs, see my comment on the Shutdown() method below",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187805931,187805931,src/init.cpp
skeees,2018-05-13T16:18:11Z,same thing as in a prior comment - use a forward with an rvalue reference,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806063,187806063,src/ringbuffer.h
skeees,2018-05-13T16:19:04Z,i think you are doing an unnecessary copy here,https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187806094,187806094,src/ringbuffer.h
jamesob,2018-05-14T14:25:52Z,"I think that we're trying to move away from `boost`'s thread stuff, but I think your general suggestion holds - we can probably just flip a condition variable + boolean in `Shutdown()` to get the same sort of behavior. The polling was a pretty gross hack.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187972826,187972826,src/ringbuffer.h
jamesob,2018-05-14T14:27:55Z,"Ah yeah, that totally makes sense.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187973666,187973666,src/ringbuffer.h
jamesob,2018-05-14T14:34:21Z,"I don't think that works. Let's say we instantiate a buffer with `MaxSize() == 10` and add 5 elements, making `m_insert_at_idx == 5`. I'd want to start reading from index 0, but your formula gives me `5 + 4 % 10` = 9, which isn't right. Maybe I'm missing something here.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976253,187976253,src/ringbuffer.h
jamesob,2018-05-14T14:35:02Z,"Yeah, fair point.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976482,187976482,src/logging.cpp
jamesob,2018-05-14T14:36:29Z,"Ah yeah, thanks.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187976982,187976982,src/logging.cpp
jamesob,2018-05-14T14:37:12Z,"Yep, good point.",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187977225,187977225,src/logging.cpp
skeees,2018-05-14T14:40:26Z,"oh sorry - i flipped them - `m_insert_at_idx == (m_read_at_idx + m_size) % MaxSize()`\n",https://github.com/bitcoin/bitcoin/pull/13200#discussion_r187978434,187978434,src/ringbuffer.h
