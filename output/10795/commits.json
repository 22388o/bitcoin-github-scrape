[
  {
    "sha": "1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmM4YzNkZTBjZmYyOTcxY2MxZjk5MDNiZmMzZDAzYTk4MmYyZmFi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-11T16:15:02Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-07-17T16:12:48Z"
      },
      "message": "No longer ever reuse keypool indexes\n\nThis fixes an issue where you could reserve a keypool entry, then\ntop up the keypool, writing out a new key at the given index, then\nreturn they key from the pool. This isnt likely to cause issues,\nbut given there is no reason to ever re-use keypool indexes\n(they're 64 bits...), best to avoid it alltogether.",
      "tree": {
        "sha": "90ef1ee9bbdcc8f90231635a71b63b9234e2a7d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90ef1ee9bbdcc8f90231635a71b63b9234e2a7d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b019357ff09e7a522307fc271d6b60562a7b890",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b019357ff09e7a522307fc271d6b60562a7b890",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b019357ff09e7a522307fc271d6b60562a7b890"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "53175025890b0d20fb3f5c8d55f4b6c72667a66d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
        "patch": "@@ -3211,21 +3211,17 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n                 internal = true;\n             }\n \n-            if (!setInternalKeyPool.empty()) {\n-                nEnd = *(setInternalKeyPool.rbegin()) + 1;\n-            }\n-            if (!setExternalKeyPool.empty()) {\n-                nEnd = std::max(nEnd, *(setExternalKeyPool.rbegin()) + 1);\n-            }\n+            assert(m_max_keypool_index < std::numeric_limits<int64_t>::max()); // How in the hell did you use so many keys?\n+            int64_t index = ++m_max_keypool_index;\n \n-            if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n+            if (!walletdb.WritePool(index, CKeyPool(GenerateNewKey(walletdb, internal), internal))) {\n                 throw std::runtime_error(std::string(__func__) + \": writing generated key failed\");\n             }\n \n             if (internal) {\n-                setInternalKeyPool.insert(nEnd);\n+                setInternalKeyPool.insert(index);\n             } else {\n-                setExternalKeyPool.insert(nEnd);\n+                setExternalKeyPool.insert(index);\n             }\n         }\n         if (missingInternal + missingExternal > 0) {"
      },
      {
        "sha": "574fd8710d3fafb0c6c5d1f1534e5dbca983aa91",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1fc8c3de0cff2971cc1f9903bfc3d03a982f2fab",
        "patch": "@@ -701,6 +701,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n+    int64_t m_max_keypool_index;\n \n     int64_t nTimeFirstKey;\n \n@@ -743,13 +744,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         }\n     }\n \n-    void LoadKeyPool(int nIndex, const CKeyPool &keypool)\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool)\n     {\n         if (keypool.fInternal) {\n             setInternalKeyPool.insert(nIndex);\n         } else {\n             setExternalKeyPool.insert(nIndex);\n         }\n+        m_max_keypool_index = std::max(m_max_keypool_index, nIndex);\n \n         // If no metadata exists yet, create a default with the pool key's\n         // creation time. Note that this may be overwritten by actually\n@@ -795,6 +797,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         nAccountingEntryNumber = 0;\n         nNextResend = 0;\n         nLastResend = 0;\n+        m_max_keypool_index = 0;\n         nTimeFirstKey = 0;\n         fBroadcastTransactions = false;\n         nRelockTime = 0;"
      }
    ]
  }
]