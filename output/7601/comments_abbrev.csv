jonasschnelli,2016-02-25T21:11:23Z,"Interesting!\nHaven't looked at it in detail, but would this affect ""policy"" by adding the `TX_HTLC` as to the standard templates?\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-188990746,188990746,
sipa,2016-02-25T21:16:48Z,@jonasschnelli All P2SH is already standard.\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-188992532,188992532,
jonasschnelli,2016-02-25T21:19:40Z,@sipa: Ah. Right. Then – I guess – the `standard.cpp -> Solver()` changes are only because we want to detect these types of P2SH scripts in the wallet.\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-188993515,188993515,
sipa,2016-02-25T21:24:13Z,@jonasschnelli To be clear: this indeed does make the HTLC type transaction standard in non-P2SH setting; it's however still smaller and cheaper than the largest raw multisig that is allowed. Perhaps that indeed shouldn't happen.\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-188994757,188994757,
gmaxwell,2016-02-25T22:37:57Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189015509,189015509,
dcousens,2016-02-26T02:23:46Z,concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189082634,189082634,
petertodd,2016-02-26T03:45:39Z,"Interestingly, this is useful for Paypub, as well as ZKCP, among other things.\n\nConcept ACK\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189099248,189099248,
petertodd,2016-02-26T03:50:41Z,"@sipa For Paypub, having the payments be visible in the blockchain for the receiver is extremely useful; w/o the ability to do so in scriptPubKey you'd likely implement it with an extra OP_RETURN output (maybe until we have a better Bitmessage to use instead). Not necessarily an argument either for or against doing so, but worth noting.\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189099823,189099823,
btcdrak,2016-02-26T06:10:36Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189127550,189127550,
paveljanik,2016-02-26T07:19:28Z,"Some tests fail with:\n\n```\nRunning testscript wallet.py ...\nInitializing test directory /tmp/testr_T8PJ\nstart_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\nstart_node: calling bitcoin-cli -rpcwait getblockcount returned\nJSONRPC error: preimage must be hexadecimal string (not '')\n```\n\nI can't reproduce locally 8)\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189143916,189143916,
paveljanik,2016-02-26T07:21:43Z,Concept ACK\nNeeds some tests. Needs BIP for new `OP_ANYDATA`.\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189144205,189144205,
jonasschnelli,2016-02-26T07:30:58Z,"Concept ACK.\n\n1.) Not sure if this requires a BIP, I guess we don't need a BIP for every contract template and I can't find the other template matching params (like `OP_SMALLINTEGER`) in the BIPs. \n\nI also concept ACK the IsStandard rule for HTLC to allow blockchain-visible HTLC, though, this might require a BIP.\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189146907,189146907,
sipa,2016-02-26T13:20:55Z,"OP_ANYDATA is just local wallet logic, it uses a range of script opcodes\nthat are disabled in execution, and is only used inside the matching\ntemplates (I think it's a bad idea to mix them in the same CScript\ntype...), so I disagree with needing a BIP for that.\n\nIsStandard changes so far have also been done without a BIP, but maybe we\ncan postpone making raw HTLC standard for now.\n\nCertain",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189269842,189269842,
luke-jr,2016-02-26T13:53:21Z,"I agree IsStandard changes do not need a BIP, but it seems any transaction type supported by the reference implementation necessarily involves coordination with other software/people, and therefore should have a BIP written describing how it works.\n\nIs there a benefit to bare HTLC over P2SH (or SegWit) HTLC? If not, it seems pointless to expand the policy to allow for it. Note that many users do",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189285497,189285497,
ebfull,2016-02-26T14:03:22Z,"I don't think initially we should make this standard outside P2SH (yet), so that's definitely a change that should be made to this PR.\n\nThis work so far allows you to ""import"" a preimage into CWallet (so that you can redeem the atomic swap branch of the script) but it does not persist this to disk, and I'm curious if others think it should. (I'm skeptical of making bitcoind store secrets, especi",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189290767,189290767,
gmaxwell,2016-02-26T21:54:53Z,As an example of what this was written to enable: https://bitcoincore.org/en/2016/02/26/zero-knowledge-contingent-payments-announcement/\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189497768,189497768,
jtimon,2016-02-26T23:18:32Z,"Wow, concept ACK.\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-189522675,189522675,
sipa,2016-03-05T05:47:45Z,"We should probably also wait until CSV is in, and add support for it in the constructed scripts here.\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-192584364,192584364,
gmaxwell,2016-03-30T16:24:36Z,"@sipa CSV is almost in, but I don't think we should be deploying enabled generation for them until the softfork is good and settled.  Maybe behind a hidden option or testnet only?\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-203512417,203512417,
ebfull,2016-03-30T18:05:55Z,"Additionally, supporting RIPEMD160 for ZKCPs is a must. I will try to find some time to write an arithmetic circuit for it.\n",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-203557688,203557688,
ebfull,2016-06-07T05:35:35Z,After segwit lands (?) I will try to rebase and clean this PR up.\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-224182598,224182598,
btcdrak,2016-06-26T12:01:50Z,@ebfull segwit has been merged to master and is also activated on testnet.\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-228597915,228597915,
gmaxwell,2016-07-05T16:36:18Z,CSV is active on mainnet!\n,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-230531892,230531892,
ebfull,2016-07-18T01:09:49Z,"Rebased this on to master. Now supports RIPEMD160. Switched to CSV (block denominated mode). Added some RPC tests.\n\nIt can be trivially extended to use CLTV in the RPC, I just need to come up with a solid UX for it. The same goes for ""relative"" time strings like ""10h"" or ""5d."" Also, still need to bring over the ""preimage"" display that showed in `listtransactions`.\n\nI'll try to work alongside #",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-233214929,233214929,
afk11,2016-11-23T15:08:53Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-262540047,262540047,
jtimon,2016-12-27T15:41:37Z,Still needs rebase.,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-269342130,269342130,
ebfull,2016-12-28T05:23:20Z,"Before I rebase, I need to understand the consensus regarding preventing malleability of these scripts.\n\nhttps://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/013036.html\n\nMultiple suggestions were made and I'm not personally qualified to pick from them.",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-269427730,269427730,
jl2012,2016-12-29T08:59:44Z,"@ebfull: I'd suggest this one. But you may want to discuss it on mailing list to make sure it is compatible with other implementations (if any)\n\n`OP_IF\n [HASHOP] <digest> OP_EQUALVERIFY\n <seller pubkey>\nOP_ELSE\n <num> [TIMEOUTOP] OP_DROP\n <buyer pubkey>\nOP_ENDIF\nOP_CHECKSIG`",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-269600304,269600304,
da2ce7,2017-02-20T08:18:14Z,"@ebfull, this looks very interesting to me and many others. Would be wonderful for you can find the time to have a second look at this pull request since v0.14 has been forked off.",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-281014293,281014293,
ebfull,2017-02-21T23:06:02Z,"I will be rebasing using @jl2012's script as the foundation, and update my BIP draft.",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-281511966,281511966,
ebfull,2017-03-31T23:07:37Z,"Thanks for the reviews @arielg and @JeremyRubin. I intend to rebase this again and clean it up.\n\nAlso, BIP199 has been submitted to start standardizing what is in this PR.",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-290855831,290855831,
ABISprotocol,2017-06-02T09:34:40Z,"@ebfull Thanks for mentioning... that was my question, regarding BIP 199, when reading this thread.  \n\nA few questions actually - \n1) Does BIP 199 need to be at final before this (HTLC) can be implemented in Core wallet? Probably dumb process question.\n2) Bitcoin wiki on Lightning network states in part, regarding ""key features,"" that ""payments can be routed across more than one blockchain",https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-305738883,305738883,
jb55,2017-10-24T17:32:57Z,This still alive?,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-339070202,339070202,
ebfull,2017-10-26T04:32:26Z,Unfortunately I'm too busy to carry the torch on this PR. :(,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-339548311,339548311,
fanquake,2017-10-26T06:37:03Z,I'll close this then. If someone wants to restart/pickup this work they can cherry pick/reference and open a new PR.,https://github.com/bitcoin/bitcoin/pull/7601#issuecomment-339566236,339566236,
jtimon,2016-03-06T14:47:42Z,This new line?\n,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r55140584,55140584,src/rpc/rawtransaction.cpp
jl2012,2016-08-23T11:56:43Z,"In the ""ELSE"" case any relay node may replace the top stack with anything without invalidating the tx. See related discussion at https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-August/013036.html\n",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r75850799,75850799,src/script/standard.cpp
arielgabizon,2017-03-30T13:53:22Z,"It looks like you're assuming all TX_HTLC transactions are DOS attacks?\nWhy reject them all?",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r108931629,108931629,src/policy/policy.cpp
JeremyRubin,2017-03-31T15:17:47Z,can reserve preimage.,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109183786,109183786,src/script/sign.cpp
JeremyRubin,2017-03-31T15:24:13Z,Please reserve keys.,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109185181,109185181,src/script/ismine.cpp
JeremyRubin,2017-03-31T15:25:17Z,Please don't introduce any new BOOST_FOREACH,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109185420,109185420,src/script/standard.cpp
JeremyRubin,2017-03-31T15:31:28Z,"Prefer to not make any new template matching parameters, but I see how it would be inconvenient to otherwise.",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109186876,109186876,src/script/script.h
JeremyRubin,2017-03-31T16:28:06Z,Check that hasher_type and image.size() match?,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109198981,109198981,src/script/standard.cpp
JeremyRubin,2017-03-31T16:35:10Z,"Maybe hash should be optional, and if not supplied a `GetRandHash` preimage should be selected and returned to the caller.",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109200296,109200296,src/rpc/misc.cpp
JeremyRubin,2017-03-31T16:38:24Z,I think that you should persist the PreimageMap to disk.,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109200848,109200848,src/keystore.h
JeremyRubin,2017-03-31T16:40:56Z,"Maybe add a RemovePreimage, LockPreimage, and UnlockPreimage call, which could be used to ensure that a node no longer has the ability to solve a particular HTLC or does not until explicitly allowed. These should also go to disk.",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109201392,109201392,src/keystore.h
JeremyRubin,2017-03-31T16:42:00Z,"If you add persistence, be sure to update here.",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109201583,109201583,src/wallet/rpcdump.cpp
JeremyRubin,2017-03-31T16:45:28Z,"Maybe just for safety, assert(vSolutions.size() > 3)",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r109202263,109202263,src/script/ismine.cpp
ABISprotocol,2017-06-02T21:58:31Z,"@arielgabizon Would this actually reject all TX_HTLC items?  I had the impression or understand that there was a design such that these would actually be completed in most instances.  In lnd, a description of this was given as follows:  ""If payment/htlc amount is too small, than such output is called dust. If for some reason channel have been force closed during payment, and dust htlc/payment have",https://github.com/bitcoin/bitcoin/pull/7601#discussion_r119960030,119960030,src/policy/policy.cpp
takahser,2018-11-21T15:15:11Z,can we use `assert(height < min_activation_height)` here instead?,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r235426493,235426493,qa/rpc-tests/htlc.py
winar-jin,2019-12-17T08:24:33Z,I think we can.,https://github.com/bitcoin/bitcoin/pull/7601#discussion_r358654346,358654346,qa/rpc-tests/htlc.py
