[
  {
    "sha": "2b0fcff7f26d59fed4bcafd1602325122a206c67",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjBmY2ZmN2YyNmQ1OWZlZDRiY2FmZDE2MDIzMjUxMjJhMjA2YzY3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-18T03:02:48Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-03-23T21:44:58Z"
      },
      "message": "Make VerifyWitnessProgram use a Span stack\n\nThis allows for very cheap transformations on the range of elements that\nare to be passed to ExecuteWitnessScript.",
      "tree": {
        "sha": "c9284316d7d781da79bb7fe651db3764676c3de2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9284316d7d781da79bb7fe651db3764676c3de2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b0fcff7f26d59fed4bcafd1602325122a206c67",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0fcff7f26d59fed4bcafd1602325122a206c67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0fcff7f26d59fed4bcafd1602325122a206c67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0fcff7f26d59fed4bcafd1602325122a206c67/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5bf45fe2a9642f8ae8f8a12bcbf8f8b4770421ad"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 23,
      "deletions": 7
    },
    "files": [
      {
        "sha": "083022fbdd8a2357b6bfadf3e3a11829e2ab5ced",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0fcff7f26d59fed4bcafd1602325122a206c67/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0fcff7f26d59fed4bcafd1602325122a206c67/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=2b0fcff7f26d59fed4bcafd1602325122a206c67",
        "patch": "@@ -1478,9 +1478,9 @@ bool GenericTransactionSignatureChecker<T>::CheckSequence(const CScriptNum& nSeq\n template class GenericTransactionSignatureChecker<CTransaction>;\n template class GenericTransactionSignatureChecker<CMutableTransaction>;\n \n-static bool ExecuteWitnessScript(std::vector<valtype>::const_iterator begin, std::vector<valtype>::const_iterator end, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n+static bool ExecuteWitnessScript(const Span<const valtype>& stack_span, const CScript& scriptPubKey, unsigned int flags, SigVersion sigversion, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n-    std::vector<valtype> stack{begin, end};\n+    std::vector<valtype> stack{stack_span.begin(), stack_span.end()};\n \n     // Disallow stack item size > MAX_SCRIPT_ELEMENT_SIZE in witness stack\n     for (const valtype& elem : stack) {\n@@ -1499,27 +1499,29 @@ static bool ExecuteWitnessScript(std::vector<valtype>::const_iterator begin, std\n static bool VerifyWitnessProgram(const CScriptWitness& witness, int witversion, const std::vector<unsigned char>& program, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror)\n {\n     CScript scriptPubKey;\n+    Span<const valtype> stack = MakeSpan(witness.stack);\n \n     if (witversion == 0) {\n         if (program.size() == WITNESS_V0_SCRIPTHASH_SIZE) {\n             // Version 0 segregated witness program: SHA256(CScript) inside the program, CScript + inputs in witness\n-            if (witness.stack.size() == 0) {\n+            if (stack.size() == 0) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WITNESS_EMPTY);\n             }\n-            scriptPubKey = CScript(witness.stack.back().begin(), witness.stack.back().end());\n+            const valtype& script_bytes = SpanPopBack(stack);\n+            scriptPubKey = CScript(script_bytes.begin(), script_bytes.end());\n             uint256 hashScriptPubKey;\n             CSHA256().Write(&scriptPubKey[0], scriptPubKey.size()).Finalize(hashScriptPubKey.begin());\n             if (memcmp(hashScriptPubKey.begin(), program.data(), 32)) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH);\n             }\n-            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end() - 1, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n+            return ExecuteWitnessScript(stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else if (program.size() == WITNESS_V0_KEYHASH_SIZE) {\n             // Special case for pay-to-pubkeyhash; signature + pubkey in witness\n-            if (witness.stack.size() != 2) {\n+            if (stack.size() != 2) {\n                 return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_MISMATCH); // 2 items in witness\n             }\n             scriptPubKey << OP_DUP << OP_HASH160 << program << OP_EQUALVERIFY << OP_CHECKSIG;\n-            return ExecuteWitnessScript(witness.stack.begin(), witness.stack.end(), scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n+            return ExecuteWitnessScript(stack, scriptPubKey, flags, SigVersion::WITNESS_V0, checker, serror);\n         } else {\n             return set_error(serror, SCRIPT_ERR_WITNESS_PROGRAM_WRONG_LENGTH);\n         }"
      },
      {
        "sha": "9379b15c816f1ecadd55a9f2495c4c8039589764",
        "filename": "src/span.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0fcff7f26d59fed4bcafd1602325122a206c67/src/span.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0fcff7f26d59fed4bcafd1602325122a206c67/src/span.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/span.h?ref=2b0fcff7f26d59fed4bcafd1602325122a206c67",
        "patch": "@@ -8,6 +8,7 @@\n #include <type_traits>\n #include <cstddef>\n #include <algorithm>\n+#include <assert.h>\n \n /** A Span is an object that can refer to a contiguous sequence of objects.\n  *\n@@ -27,6 +28,8 @@ class Span\n     constexpr C* data() const noexcept { return m_data; }\n     constexpr C* begin() const noexcept { return m_data; }\n     constexpr C* end() const noexcept { return m_data + m_size; }\n+    constexpr C& front() const noexcept { return m_data[0]; }\n+    constexpr C& back() const noexcept { return m_data[m_size - 1]; }\n     constexpr std::ptrdiff_t size() const noexcept { return m_size; }\n     constexpr C& operator[](std::ptrdiff_t pos) const noexcept { return m_data[pos]; }\n \n@@ -57,4 +60,15 @@ constexpr Span<A> MakeSpan(A (&a)[N]) { return Span<A>(a, N); }\n template<typename V>\n constexpr Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type> MakeSpan(V& v) { return Span<typename std::remove_pointer<decltype(std::declval<V>().data())>::type>(v.data(), v.size()); }\n \n+/** Pop the last element off a span, and return a reference to that element. */\n+template <typename T>\n+T& SpanPopBack(Span<T>& span)\n+{\n+    size_t size = span.size();\n+    assert(size > 0);\n+    T& back = span[size - 1];\n+    span = Span<T>(span.data(), size - 1);\n+    return back;\n+}\n+\n #endif"
      }
    ]
  }
]