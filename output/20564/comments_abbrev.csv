sipa,2020-12-03 23:11:15,"I'm deliberately not introducing a name for the 70016 constant, or reuse any of the existing constants. The number isn't tied to any of those; it's just... we're observing that no clients below this number exist that support it.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738437273,738437273,
laanwj,2020-12-03 23:47:24,Reluctant ACK. I think this is very messed up for reasons mentioned by Matt [here](https://github.com/btcsuite/btcd/issues/1661#issuecomment-737242665). I think a P2P protocol that is not permissionlessly extensible is unworthy of bitcoin.,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738456560,738456560,
naumenkogs,2020-12-04 01:06:21,"I'm not even sure what's best here, considering an issue with another implementation.\nI think considering that this code is non-consensus, very simple, and won't degrade much further — it's fine we pay this cost.\nReluctant ACK as well.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738483669,738483669,
vasild,2020-12-04 04:50:46,"While this patch is technically sound and it will most likely make it in 0.21, the problem with protocol version bumps exists in the long term.\n\nA central body deciding what version numbers are and what goes in them is not suitable for a protocol that is developed in a decentralized manner. Eventually some disagreement may tear apart the sequentiality of the protocol version resulting in somet",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738563105,738563105,
sipa,2020-12-04 04:55:31,"@vasild I completely agree with the flaws of using protocol versions for feature negotiation. That's not what this is about.\n\nThis is a one-time courtesy for existing clients on the network to not cause disruption. It isn't tying features to versions, and perhaps this patch can even be temporary.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738564357,738564357,
MarcoFalke,2020-12-04 06:29:46,(Added 0.21 milestone for now),https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738594859,738594859,
jonasschnelli,2020-12-04 08:11:06,"utACK 152b0be70ab5e910a6682d2178c2e81c781a2f9b - agree with @laanwj about @TheBlueMatt [point](https://github.com/btcsuite/btcd/issues/1661#issuecomment-737242665). - Though this ""we-fix-your-software"" seems acceptable. I already stated my concerns and long term risks with doing such ""fixes"" (it leads to lesser attention on p2p changes and probably fewer interoperability tests with alternative imp",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738634379,738634379,
laanwj,2020-12-04 09:24:21,"> Maybe it would be more flexible to introduce new functionality via service bits. \n \nThe problem with service bits is that there are (by definition) too few of them, and allocation of them is also a centralized project (lacking centralized allocation, or in presence of disagreement, the meaning of those bits starts to be ambiguous very soon—we've seen this with block versions). I do not think",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738672922,738672922,
MarcoFalke,2020-12-04 09:38:33,"Also, avoiding to connect to ""unknown"" service bits is worse than disconnection on an unknown message, because it makes sybil attacks easier. An attacker might pollute the service bits in your p2p-address manager.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738680446,738680446,
jnewbery,2020-12-04 10:33:00,"I wish we would use this as an opportunity to do sendaddrv2 negotiation in the right place (between version and verack). We're having to change the code and BIP already, and the logic of ""no software is known to support BIP155 that doesn't announce at least that protocol version number"" means that such a change would be safe.\n\nNegotiating the addr relay version up front and treating it as cons",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738707025,738707025,
laanwj,2020-12-04 10:36:10,"@jnewbery I vaguely remember that there were some problems with sending messages between `version` and `verack`, but not sure.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738708445,738708445,
Sjors,2020-12-04 16:57:00,Tested 152b0be70ab5e910a6682d2178c2e81c781a2f9b against [Breez](https://breez.technology) and a standalone Lnd  0.11.1-beta in neutrino mode (which uses btcd as a library). They no longer hang up on my bitcoind.,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738894472,738894472,
lontivero,2020-12-04 17:45:23,"Concept NACK. I am currently implementing BIP 155 in NBitcoin which announces version 70012. This means that even when some clients implement addrv2 they will not receive the signal and share addrv2 addresses. @NicolasDorier what do you thing?\n\nFwiw I agree with @vasild that signaling new functionality via service bits would be more flexible. Signaling a feature with a new message was surprisi",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738922020,738922020,
sipa,2020-12-04 17:57:55,"This is not the time and place to discuss how version negotiation should be done in general. But to avoid reiterating things elsewhere: service flags are for feature discovery, not for feature negotiation. There are only a limited number of them, and for the purpose of negotiation they have no advantage over just send* messages like sendcmpct, sendheaders, ...\n\n@laanwj Sending between version an",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738928981,738928981,
lontivero,2020-12-04 18:04:32,Concept ACK then. ,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-738932473,738932473,
practicalswift,2020-12-04 23:42:57,A swift Concept ACK for purely practical reasons!,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-739079337,739079337,
laanwj,2020-12-07 08:46:11,"> @laanwj Sending between version and verack works, we do it for wtxid relay. I don' think there is a particularly strong reason to change that for BIP155 at this point though.\n\nMaybe, I don't know, it makes some sense to handle different extensions in a consistent way.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-739769975,739769975,
benthecarman,2020-12-07 14:05:28,"tACK 152b0be70ab5e910a6682d2178c2e81c781a2f9b\n\nBitcoin-S needed to [update to allow parsing of unknown messages](https://github.com/bitcoin-s/bitcoin-s/pull/2315) to be able to sync with 0.21.0rc2. I think this change makes sense so clients don't receive messages they aren't expecting.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-739938627,739938627,
sipa,2020-12-07 17:15:45,"Added a commit to move the sending of sendaddrv2 to before sending verack, matching https://github.com/bitcoin/bips/pull/1043.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740056596,740056596,
laanwj,2020-12-07 17:21:18,re-ACK b2eae522631289a9e4b7a2e80a0f761a86b65093,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740059824,740059824,
benthecarman,2020-12-07 17:22:23,ACK b2eae522631289a9e4b7a2e80a0f761a86b65093,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740060537,740060537,
jonatack,2020-12-07 17:55:20,ACK b2eae522631289a9e4b7a2e80a0f761a86b65093 ,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740079093,740079093,
benthecarman,2020-12-07 18:01:15,reACK ccd0eaab953e77d80891702243835a548708a365,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740082454,740082454,
MarcoFalke,2020-12-07 18:50:35,"re-ACK deef9340aede6503951b133d8ef24686f833946d\n",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740109219,740109219,
jonatack,2020-12-07 18:58:43,ACK deef9340aede65039,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740114271,740114271,
sipa,2020-12-07 19:00:36,"Sorry for the extra pushes. I didn't at first change the message handling to accept incoming sendaddrv2 before verack (thanks @jnewbery), and that the tests needed adapting as well. Making the test changes without the corresponding net_processing changes fails the tests now.",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740115323,740115323,
benthecarman,2020-12-08 00:14:35,ACK deef9340aede6503951b133d8ef24686f833946d,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740260587,740260587,
DrahtBot,2020-12-08 12:32:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20599 (net processing: Tolerate sendheaders and sendcmpct messages before verack by jnewbery)\n\nIf you consider this pul",https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740592609,740592609,
sipa,2020-12-08 17:38:07,Updated to require SENDADDRV2 to arrive before VERACK.,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740788505,740788505,
MarcoFalke,2020-12-08 17:45:24,ACK 1583498fb6781c01ca2f33c09319ed793964c574,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740793220,740793220,
jnewbery,2020-12-08 18:30:08,ACK 1583498fb6781c01ca2f33c09319ed793964c574,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-740823622,740823622,
MarcoFalke,2020-12-10 10:50:26,Backported in #20612,https://github.com/bitcoin/bitcoin/pull/20564#issuecomment-742443410,742443410,
MarcoFalke,2020-12-04 06:26:55,"nit: Could mention that this is a temporary workaround, safe to be reverted end of 2021 or beginning of 2022",https://github.com/bitcoin/bitcoin/pull/20564#discussion_r535865759,535865759,src/net_processing.cpp
luke-jr,2020-12-06 17:08:55,We're not prophets...,https://github.com/bitcoin/bitcoin/pull/20564#discussion_r537081970,537081970,src/net_processing.cpp
MarcoFalke,2020-12-06 18:06:05,"This change literally violates the bip, keeping the hack longer than one or two major versions would be problematic for too many reasons",https://github.com/bitcoin/bitcoin/pull/20564#discussion_r537092645,537092645,src/net_processing.cpp
sipa,2020-12-06 18:19:19,I don't see how it violates the BIP. It just chooses to only use the feature in some cases.,https://github.com/bitcoin/bitcoin/pull/20564#discussion_r537095131,537095131,src/net_processing.cpp
MarcoFalke,2020-12-06 18:27:13,"Ok, closing discussion. I still think this should be reverted eventually.",https://github.com/bitcoin/bitcoin/pull/20564#discussion_r537096452,537096452,src/net_processing.cpp
sipa,2020-12-06 18:28:15,"Yes, agree with that, but I don't know the time frame.",https://github.com/bitcoin/bitcoin/pull/20564#discussion_r537096650,537096650,src/net_processing.cpp
jnewbery,2020-12-07 18:01:50,I think we want to disconnect here if the sendaddrv2 message is received after VERACK (assuming that the suggested change to the BIP here: https://github.com/bitcoin/bips/pull/1043#discussion_r537711662 is taken),https://github.com/bitcoin/bitcoin/pull/20564#discussion_r537713661,537713661,src/net_processing.cpp
MarcoFalke,2020-12-07 18:27:50,"In theory we are free to not strictly enforce the BIP. So even with the suggested BIP change, the code here as is shouldn't cause any issues.",https://github.com/bitcoin/bitcoin/pull/20564#discussion_r537730772,537730772,src/net_processing.cpp
vasild,2020-12-08 08:08:21,"Disconnecting if we receive `sendaddrv2` after `verack` might make sense for the following reasons:\n\n* Allowing `sendaddrv2` after `verack` defeats the purpose of knowing for sure that the peer does not support `addrv2` (if we don't receive `sendaddrv2` before `verack`)\n* If an odd implementation starts sending `sendaddrv2` after `verack` and we accept it, then we would be forever doomed to ",https://github.com/bitcoin/bitcoin/pull/20564#discussion_r538120123,538120123,src/net_processing.cpp
jonatack,2020-12-08 17:03:30,"Agreed. I'd be in favor of aligning BIPs 155 and 339 on this, and their implementations, unless there is a good reason not to.",https://github.com/bitcoin/bitcoin/pull/20564#discussion_r538607510,538607510,src/net_processing.cpp
MarcoFalke,2020-12-08 17:43:05,closing as resolved,https://github.com/bitcoin/bitcoin/pull/20564#discussion_r538650420,538650420,src/net_processing.cpp
jonatack,2020-12-08 20:03:35,maybe refer to BIP155 here if you retouch; if you do I'll update #20592 similarly to refer to BIP339,https://github.com/bitcoin/bitcoin/pull/20564#discussion_r538768255,538768255,src/net_processing.cpp
sipa,2020-12-08 20:59:34,I'll do so if the BIP change is merged before this PR is.,https://github.com/bitcoin/bitcoin/pull/20564#discussion_r538803403,538803403,src/net_processing.cpp
jonatack,2020-12-14 15:25:35,proposed in #20646,https://github.com/bitcoin/bitcoin/pull/20564#discussion_r542471462,542471462,src/net_processing.cpp
jonatack,2020-12-14 21:06:40,See this comment which provides reasons not to disconnect: https://github.com/bitcoin/bitcoin/pull/20646#issuecomment-744704209,https://github.com/bitcoin/bitcoin/pull/20564#discussion_r542786655,542786655,src/net_processing.cpp
