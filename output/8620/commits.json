[
  {
    "sha": "c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODRkNzlhN2UzZjM5YzYwMjM3NzI3ZjFhOGMyZWU3ZWNiNmIzNzI5",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-08-28T07:17:41Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-08-28T11:31:57Z"
      },
      "message": "Display version message before disconnection criteria",
      "tree": {
        "sha": "2a9c23ebd5b5f5b9b213e8d99a28c37e0d189e36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2a9c23ebd5b5f5b9b213e8d99a28c37e0d189e36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c072b8fd95cd4fa84f08189a0cd8b173ea2dbb8e"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 28,
      "deletions": 28
    },
    "files": [
      {
        "sha": "514e832c9b774c1cc1321a5673f193b71da9ed17",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729",
        "patch": "@@ -4931,25 +4931,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         {\n             addrman.SetServices(pfrom->addr, pfrom->nServices);\n         }\n-        if (pfrom->nServicesExpected & ~pfrom->nServices)\n-        {\n-            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n-            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n-                               strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected));\n-            pfrom->fDisconnect = true;\n-            return false;\n-        }\n-\n-        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n-        {\n-            // disconnect from peers older than this proto version\n-            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n-            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n-                               strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n-            pfrom->fDisconnect = true;\n-            return false;\n-        }\n-\n         if (pfrom->nVersion == 10300)\n             pfrom->nVersion = 300;\n         if (!vRecv.empty())\n@@ -4977,6 +4958,34 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n+        string remoteAddr;\n+        if (fLogIPs)\n+            remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n+\n+        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n+                  pfrom->cleanSubVer, pfrom->nVersion,\n+                  pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n+                  remoteAddr);\n+\n+        if (pfrom->nServicesExpected & ~pfrom->nServices)\n+        {\n+            LogPrint(\"net\", \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->id, pfrom->nServices, pfrom->nServicesExpected);\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n+                               strprintf(\"Expected to offer services %08x\", pfrom->nServicesExpected));\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+\n+        if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n+        {\n+            // disconnect from peers older than this proto version\n+            LogPrintf(\"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->id, pfrom->nVersion);\n+            pfrom->PushMessage(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+                               strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION));\n+            pfrom->fDisconnect = true;\n+            return false;\n+        }\n+\n         pfrom->addrLocal = addrMe;\n         if (pfrom->fInbound && addrMe.IsRoutable())\n         {\n@@ -5039,15 +5048,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->fSuccessfullyConnected = true;\n \n-        string remoteAddr;\n-        if (fLogIPs)\n-            remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n-\n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n-                  pfrom->cleanSubVer, pfrom->nVersion,\n-                  pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n-                  remoteAddr);\n-\n         int64_t nTimeOffset = nTime - GetTime();\n         pfrom->nTimeOffset = nTimeOffset;\n         AddTimeData(pfrom->addr, nTimeOffset);"
      }
    ]
  },
  {
    "sha": "5decfe253c9257f1ec9cc023a26e1281671e8ad2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGVjZmUyNTNjOTI1N2YxZWM5Y2MwMjNhMjZlMTI4MTY3MWU4YWQy",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-03-02T06:09:02Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-08-28T11:31:57Z"
      },
      "message": "Make debugging more granular",
      "tree": {
        "sha": "f6d2b4dde7f30a93eb3b4e604ff357a2331a793f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6d2b4dde7f30a93eb3b4e604ff357a2331a793f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5decfe253c9257f1ec9cc023a26e1281671e8ad2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5decfe253c9257f1ec9cc023a26e1281671e8ad2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5decfe253c9257f1ec9cc023a26e1281671e8ad2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5decfe253c9257f1ec9cc023a26e1281671e8ad2/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c84d79a7e3f39c60237727f1a8c2ee7ecb6b3729"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 73,
      "deletions": 68
    },
    "files": [
      {
        "sha": "f10dfbadfbfcaa5273e20605a224843c8662e894",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5decfe253c9257f1ec9cc023a26e1281671e8ad2",
        "patch": "@@ -413,7 +413,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, block, cmpctblock, coindb, db, estimatefee{,2}, http, libevent, lock, mempool(,2}, mempoolrej, net{,2}, proxy, prune, rand, reindex, rpc, selectcoins, tx{,2}, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "bb28566466f1b787844564065a66cc0f796e84cd",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 45,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5decfe253c9257f1ec9cc023a26e1281671e8ad2",
        "patch": "@@ -485,11 +485,13 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pf\n             // blocks using compact encodings.\n             CNode* pnodeStop = FindNode(lNodesAnnouncingHeaderAndIDs.front());\n             if (pnodeStop) {\n+                LogPrint(\"block\", \"Sending SENDCMPCT to peer=%s\\n\", pnodeStop->id);\n                 pnodeStop->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n                 lNodesAnnouncingHeaderAndIDs.pop_front();\n             }\n         }\n         fAnnounceUsingCMPCTBLOCK = true;\n+        LogPrint(\"block\", \"Sending SENDCMPCT to peer=%s\\n\", pfrom->id);\n         pfrom->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n         lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n     }\n@@ -691,7 +693,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     unsigned int sz = GetTransactionWeight(tx);\n     if (sz >= MAX_STANDARD_TX_WEIGHT)\n     {\n-        LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n+        LogPrint(\"mempool2\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;\n     }\n \n@@ -701,7 +703,7 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n         mapOrphanTransactionsByPrev[txin.prevout].insert(ret.first);\n     }\n \n-    LogPrint(\"mempool\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n+    LogPrint(\"mempool2\", \"stored orphan tx %s (mapsz %u outsz %u)\\n\", hash.ToString(),\n              mapOrphanTransactions.size(), mapOrphanTransactionsByPrev.size());\n     return true;\n }\n@@ -1322,7 +1324,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount + nSize >= GetArg(\"-limitfreerelay\", DEFAULT_LIMITFREERELAY) * 10 * 1000)\n                 return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n-            LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n+            LogPrint(\"mempool2\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n         }\n \n@@ -4738,9 +4740,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK || inv.type == MSG_CMPCT_BLOCK || inv.type == MSG_WITNESS_BLOCK)\n             {\n                 bool send = false;\n+                bool fRecent = false;\n+                int nHeight = 0;\n                 BlockMap::iterator mi = mapBlockIndex.find(inv.hash);\n-                if (mi != mapBlockIndex.end())\n-                {\n+                if (mi != mapBlockIndex.end()) {\n+                    fRecent = (mi->second->nHeight > chainActive.Height()-3);\n+                    nHeight = mi->second->nHeight;\n                     if (chainActive.Contains(mi->second)) {\n                         send = true;\n                     } else {\n@@ -4755,7 +4760,8 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                             LogPrintf(\"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n                         }\n                     }\n-                }\n+                } else\n+                    LogPrint(\"net\", \"getdata %d (notfound!) from peer=%d\\n\", inv.ToString(), pfrom->id);\n                 // disconnect node in case we have reached the outbound limit for serving historical blocks\n                 // never disconnect whitelisted nodes\n                 static const int nOneWeek = 7 * 24 * 60 * 60; // assume > 1 week = historical\n@@ -4775,12 +4781,15 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                     CBlock block;\n                     if (!ReadBlockFromDisk(block, (*mi).second, consensusParams))\n                         assert(!\"cannot load block from disk\");\n-                    if (inv.type == MSG_BLOCK)\n+                    if (inv.type == MSG_BLOCK) {\n+                        LogPrint(fRecent ? \"block\" : \"block2\", \"sending regular %s (%d) to peer=%d\\n\", inv.ToString(), nHeight, pfrom->id);\n                         pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n-                    else if (inv.type == MSG_WITNESS_BLOCK)\n+                    } else if (inv.type == MSG_WITNESS_BLOCK) {\n+                        LogPrint(fRecent ? \"block\" : \"block2\", \"sending witness %s (%d) to peer=%d\\n\", inv.ToString(), nHeight, pfrom->id);\n                         pfrom->PushMessage(NetMsgType::BLOCK, block);\n-                    else if (inv.type == MSG_FILTERED_BLOCK)\n+                    } else if (inv.type == MSG_FILTERED_BLOCK)\n                     {\n+                        LogPrint(fRecent ? \"block\" : \"block2\", \"sending merkle %s (%d) to peer=%d\\n\", inv.ToString(), nHeight, pfrom->id);\n                         LOCK(pfrom->cs_filter);\n                         if (pfrom->pfilter)\n                         {\n@@ -4807,8 +4816,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // instead we respond with the full, non-compact block.\n                         if (mi->second->nHeight >= chainActive.Height() - 10) {\n                             CBlockHeaderAndShortTxIDs cmpctblock(block);\n+                            LogPrint(fRecent ? \"block\" : \"block2\", \"sending compact %s (%d) to peer=%d\\n\", inv.ToString(), nHeight, pfrom->id);\n                             pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                         } else\n+                            LogPrint(\"block2\", \"sending regular %s (%d) to peer=%d\\n\", inv.ToString(), nHeight, pfrom->id);\n                             pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n                     }\n \n@@ -4823,10 +4834,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         pfrom->PushMessage(NetMsgType::INV, vInv);\n                         pfrom->hashContinue.SetNull();\n                     }\n-                }\n+                } else\n+                    LogPrint(\"block\", \"not sending block %s (%d) to peer=%d\\n\", inv.ToString(), nHeight, pfrom->id);\n             }\n             else if (inv.type == MSG_TX || inv.type == MSG_WITNESS_TX)\n             {\n+                LogPrint(\"tx2\", \"getdata %s from peer=%d\\n\", inv.ToString(), pfrom->id);\n                 // Send stream from relay memory\n                 bool push = false;\n                 auto mi = mapRelay.find(inv.hash);\n@@ -4844,8 +4857,10 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                 }\n                 if (!push) {\n                     vNotFound.push_back(inv);\n+                    LogPrint(\"tx\", \"notfound %s to peer=%d\\n\", inv.ToString(), pfrom->id);\n                 }\n-            }\n+            } else\n+                LogPrint(\"net\", \"getdata %s from peer=%d\\n\", SanitizeString(inv.ToString()), pfrom->id);\n \n             // Track requests for our stuff.\n             GetMainSignals().Inventory(inv.hash);\n@@ -4879,7 +4894,7 @@ uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params\n \n bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams)\n {\n-    LogPrint(\"net\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n+    LogPrint(\"net2\", \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->id);\n     if (mapArgs.count(\"-dropmessagestest\") && GetRand(atoi(mapArgs[\"-dropmessagestest\"])) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -4960,12 +4975,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         string remoteAddr;\n         if (fLogIPs)\n-            remoteAddr = \", peeraddr=\" + pfrom->addr.ToString();\n+            remoteAddr = \", them=\" + pfrom->addr.ToString();\n \n-        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s, peer=%d%s\\n\",\n+        LogPrintf(\"receive version message: %s: version %d, blocks=%d, us=%s%s, peer=%d\\n\",\n                   pfrom->cleanSubVer, pfrom->nVersion,\n-                  pfrom->nStartingHeight, addrMe.ToString(), pfrom->id,\n-                  remoteAddr);\n+                  pfrom->nStartingHeight, addrMe.ToString(), remoteAddr, pfrom->id);\n \n         if (pfrom->nServicesExpected & ~pfrom->nServices)\n         {\n@@ -5022,11 +5036,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 CAddress addr = GetLocalAddress(&pfrom->addr);\n                 if (addr.IsRoutable())\n                 {\n-                    LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n+                    LogPrint(\"net\", \"%s: advertising routable address %s to peer=%d\\n\", __func__, addr.ToString(), pfrom->id);\n                     pfrom->PushAddress(addr);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n                     addr.SetIP(pfrom->addrLocal);\n-                    LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n+                    LogPrint(\"net\", \"%s: advertising local address %s to peer=%d\\n\", __func__, addr.ToString(), pfrom->id);\n                     pfrom->PushAddress(addr);\n                 }\n             }\n@@ -5207,7 +5221,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             boost::this_thread::interruption_point();\n \n             bool fAlreadyHave = AlreadyHave(inv);\n-            LogPrint(\"net\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n+            LogPrint(\"net2\", \"got inv: %s  %s peer=%d\\n\", inv.ToString(), fAlreadyHave ? \"have\" : \"new\", pfrom->id);\n \n             if (inv.type == MSG_TX) {\n                 inv.type |= nFetchFlags;\n@@ -5245,7 +5259,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly)\n-                    LogPrint(\"net\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n+                    LogPrint(\"net2\", \"transaction (%s) inv sent in violation of protocol peer=%d\\n\", inv.hash.ToString(), pfrom->id);\n                 else if (!fAlreadyHave && !fImporting && !fReindex && !IsInitialBlockDownload())\n                     pfrom->AskFor(inv);\n             }\n@@ -5275,12 +5289,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return error(\"message getdata size() = %u\", vInv.size());\n         }\n \n-        if (fDebug || (vInv.size() != 1))\n-            LogPrint(\"net\", \"received getdata (%u invsz) peer=%d\\n\", vInv.size(), pfrom->id);\n-\n-        if ((fDebug && vInv.size() > 0) || (vInv.size() == 1))\n-            LogPrint(\"net\", \"received getdata for: %s peer=%d\\n\", vInv[0].ToString(), pfrom->id);\n-\n         pfrom->vRecvGetData.insert(pfrom->vRecvGetData.end(), vInv.begin(), vInv.end());\n         ProcessGetData(pfrom, chainparams.GetConsensus());\n     }\n@@ -5446,7 +5454,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n             pfrom->nLastTXTime = GetTime();\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n+            LogPrint(\"mempool2\", \"AcceptToMemoryPool: peer=%d: accepted %s (poolsz %u txn, %u kB)\\n\",\n                 pfrom->id,\n                 tx.GetHash().ToString(),\n                 mempool.size(), mempool.DynamicMemoryUsage() / 1000);\n@@ -5475,7 +5483,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     if (setMisbehaving.count(fromPeer))\n                         continue;\n                     if (AcceptToMemoryPool(mempool, stateDummy, orphanTx, true, &fMissingInputs2)) {\n-                        LogPrint(\"mempool\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"mempool2\", \"   accepted orphan tx %s\\n\", orphanHash.ToString());\n                         RelayTransaction(orphanTx);\n                         for (unsigned int i = 0; i < orphanTx.vout.size(); i++) {\n                             vWorkQueue.emplace_back(orphanHash, i);\n@@ -5490,11 +5498,11 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             // Punish peer that gave us an invalid orphan tx\n                             Misbehaving(fromPeer, nDos);\n                             setMisbehaving.insert(fromPeer);\n-                            LogPrint(\"mempool\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n+                            LogPrint(\"mempool2\", \"   invalid orphan tx %s\\n\", orphanHash.ToString());\n                         }\n                         // Has inputs but not accepted to mempool\n                         // Probably non-standard or insufficient fee/priority\n-                        LogPrint(\"mempool\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n+                        LogPrint(\"mempool2\", \"   removed orphan tx %s\\n\", orphanHash.ToString());\n                         vEraseQueue.push_back(orphanHash);\n                         if (!stateDummy.CorruptionPossible()) {\n                             assert(recentRejects);\n@@ -5529,9 +5537,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 unsigned int nMaxOrphanTx = (unsigned int)std::max((int64_t)0, GetArg(\"-maxorphantx\", DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n                 unsigned int nEvicted = LimitOrphanTxSize(nMaxOrphanTx);\n                 if (nEvicted > 0)\n-                    LogPrint(\"mempool\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n+                    LogPrint(\"mempool2\", \"mapOrphan overflow, removed %u tx\\n\", nEvicted);\n             } else {\n-                LogPrint(\"mempool\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n+                LogPrint(\"mempool2\", \"not keeping orphan with rejected parents %s\\n\",tx.GetHash().ToString());\n             }\n         } else {\n             if (!state.CorruptionPossible()) {\n@@ -5866,12 +5874,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     uint32_t nFetchFlags = GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus());\n                     vGetData.push_back(CInv(MSG_BLOCK | nFetchFlags, pindex->GetBlockHash()));\n                     MarkBlockAsInFlight(pfrom->GetId(), pindex->GetBlockHash(), chainparams.GetConsensus(), pindex);\n-                    LogPrint(\"net\", \"Requesting block %s from  peer=%d\\n\",\n-                            pindex->GetBlockHash().ToString(), pfrom->id);\n-                }\n-                if (vGetData.size() > 1) {\n-                    LogPrint(\"net\", \"Downloading blocks toward %s (%d) via headers direct fetch\\n\",\n-                            pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n+                    LogPrint(\"block\", \"getdata block %s (%d) to peer=%d\\n\", pindex->GetBlockHash().ToString(), pindex->nHeight, pfrom->id);\n                 }\n                 if (vGetData.size() > 0) {\n                     if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(nLocalServices & NODE_WITNESS)) {\n@@ -5880,6 +5883,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom);\n                         // In any case, we want to download using a compact block, not a regular one\n                         vGetData[0] = CInv(MSG_CMPCT_BLOCK, vGetData[0].hash);\n+                        LogPrint(\"block\", \"getdata cmpctblock %s to peer=%d\\n\", vGetData[0].ToString(), pfrom->id);\n                     }\n                     pfrom->PushMessage(NetMsgType::GETDATA, vGetData);\n                 }\n@@ -6119,7 +6123,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     vRecv >> hash;\n                     ss << \": hash \" << hash.ToString();\n                 }\n-                LogPrint(\"net\", \"Reject %s\\n\", SanitizeString(ss.str()));\n+                if (strMsg == NetMsgType::BLOCK)\n+                    LogPrint(\"block\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else if (strMsg == NetMsgType::TX)\n+                    LogPrint(\"tx\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n+                else\n+                    LogPrint(\"net\", \"Reject from peer=%d %s\\n\", pfrom->id, SanitizeString(ss.str()));\n             } catch (const std::ios_base::failure&) {\n                 // Avoid feedback loops by preventing reject messages from triggering a new reject message.\n                 LogPrint(\"net\", \"Unparseable reject message received\\n\");\n@@ -6507,12 +6516,12 @@ bool SendMessages(CNode* pto)\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {\n-                        LogPrint(\"net\", \"%s: %u headers, range (%s, %s), to peer=%d\\n\", __func__,\n+                        LogPrint(\"net\", \"sending %u headers, range (%s, %s), to peer=%d\\n\",\n                                 vHeaders.size(),\n                                 vHeaders.front().GetHash().ToString(),\n                                 vHeaders.back().GetHash().ToString(), pto->id);\n                     } else {\n-                        LogPrint(\"net\", \"%s: sending header %s to peer=%d\\n\", __func__,\n+                        LogPrint(\"net\", \"sending header %s to peer=%d\\n\",\n                                 vHeaders.front().GetHash().ToString(), pto->id);\n                     }\n                     pto->PushMessage(NetMsgType::HEADERS, vHeaders);\n@@ -6541,8 +6550,8 @@ bool SendMessages(CNode* pto)\n                     // If the peer's chain has this block, don't inv it back.\n                     if (!PeerHasHeader(&state, pindex)) {\n                         pto->PushInventory(CInv(MSG_BLOCK, hashToAnnounce));\n-                        LogPrint(\"net\", \"%s: sending inv peer=%d hash=%s\\n\", __func__,\n-                            pto->id, hashToAnnounce.ToString());\n+                        LogPrint(\"net\", \"sending inv block %s to peer=%d\\n\",\n+                            hashToAnnounce.ToString(), pto->id);\n                     }\n                 }\n             }\n@@ -6739,8 +6748,7 @@ bool SendMessages(CNode* pto)\n             const CInv& inv = (*pto->mapAskFor.begin()).second;\n             if (!AlreadyHave(inv))\n             {\n-                if (fDebug)\n-                    LogPrint(\"net\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n+                LogPrint(\"tx2\", \"Requesting %s peer=%d\\n\", inv.ToString(), pto->id);\n                 vGetData.push_back(inv);\n                 if (vGetData.size() >= 1000)\n                 {"
      },
      {
        "sha": "a090e3cc6a8dce307d49a8111812a2f4f4dcfe5d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 13,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5decfe253c9257f1ec9cc023a26e1281671e8ad2",
        "patch": "@@ -221,7 +221,7 @@ void AdvertiseLocal(CNode *pnode)\n         }\n         if (addrLocal.IsRoutable())\n         {\n-            LogPrint(\"net\", \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n+            LogPrint(\"net2\", \"AdvertiseLocal: advertising address %s to peer=%d\\n\", addrLocal.ToString(), pnode->id);\n             pnode->PushAddress(addrLocal);\n         }\n     }\n@@ -503,9 +503,9 @@ void CNode::PushVersion()\n     CAddress addrMe = GetLocalAddress(&addr);\n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n     if (fLogIPs)\n-        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n+        LogPrint(\"net2\", \"send version message: version %d, blocks=%d, us=%s, them=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), addrYou.ToString(), id);\n     else\n-        LogPrint(\"net\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n+        LogPrint(\"net2\", \"send version message: version %d, blocks=%d, us=%s, peer=%d\\n\", PROTOCOL_VERSION, nBestHeight, addrMe.ToString(), id);\n     PushMessage(NetMsgType::VERSION, PROTOCOL_VERSION, (uint64_t)nLocalServices, nTime, addrYou, addrMe,\n                 nLocalHostNonce, strSubVersion, nBestHeight, ::fRelayTxes);\n }\n@@ -1081,8 +1081,6 @@ static void AcceptConnection(const ListenSocket& hListenSocket) {\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n \n-    LogPrint(\"net\", \"connection from %s accepted\\n\", addr.ToString());\n-\n     {\n         LOCK(cs_vNodes);\n         vNodes.push_back(pnode);\n@@ -1290,7 +1288,7 @@ void ThreadSocketHandler()\n                         {\n                             // socket closed gracefully\n                             if (!pnode->fDisconnect)\n-                                LogPrint(\"net\", \"socket closed\\n\");\n+                                LogPrint(\"net2\", \"socket closed\\n\");\n                             pnode->CloseSocketDisconnect();\n                         }\n                         else if (nBytes < 0)\n@@ -2530,10 +2528,10 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n         id = nLastNodeId++;\n     }\n \n+    LogPrint(\"net\", \"%s connection \", fInbound ? \"Inbound\" : \"Outbound\");\n     if (fLogIPs)\n-        LogPrint(\"net\", \"Added connection to %s peer=%d\\n\", addrName, id);\n-    else\n-        LogPrint(\"net\", \"Added connection peer=%d\\n\", id);\n+        LogPrint(\"net\", \"%s \", addrName);\n+    LogPrint(\"net\", \"peer=%d\\n\", id);\n \n     // Be shy and don't send version until we hear\n     if (hSocket != INVALID_SOCKET && !fInbound)\n@@ -2568,7 +2566,7 @@ void CNode::AskFor(const CInv& inv)\n         nRequestTime = it->second;\n     else\n         nRequestTime = 0;\n-    LogPrint(\"net\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n+    LogPrint(\"tx2\", \"askfor %s  %d (%s) peer=%d\\n\", inv.ToString(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000), id);\n \n     // Make sure not to reuse time indexes to keep things in the same order\n     int64_t nNow = GetTimeMicros() - 1000000;\n@@ -2591,7 +2589,7 @@ void CNode::BeginMessage(const char* pszCommand) EXCLUSIVE_LOCK_FUNCTION(cs_vSen\n     ENTER_CRITICAL_SECTION(cs_vSend);\n     assert(ssSend.size() == 0);\n     ssSend << CMessageHeader(Params().MessageStart(), pszCommand, 0);\n-    LogPrint(\"net\", \"sending: %s \", SanitizeString(pszCommand));\n+    LogPrint(\"net2\", \"sending: %s \", SanitizeString(pszCommand));\n }\n \n void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)\n@@ -2600,7 +2598,7 @@ void CNode::AbortMessage() UNLOCK_FUNCTION(cs_vSend)\n \n     LEAVE_CRITICAL_SECTION(cs_vSend);\n \n-    LogPrint(\"net\", \"(aborted)\\n\");\n+    LogPrint(\"net2\", \"(aborted)\\n\");\n }\n \n void CNode::EndMessage(const char* pszCommand) UNLOCK_FUNCTION(cs_vSend)\n@@ -2636,7 +2634,7 @@ void CNode::EndMessage(const char* pszCommand) UNLOCK_FUNCTION(cs_vSend)\n     assert(ssSend.size () >= CMessageHeader::CHECKSUM_OFFSET + sizeof(nChecksum));\n     memcpy((char*)&ssSend[CMessageHeader::CHECKSUM_OFFSET], &nChecksum, sizeof(nChecksum));\n \n-    LogPrint(\"net\", \"(%d bytes) peer=%d\\n\", nSize, id);\n+    LogPrint(\"net2\", \"(%d bytes) peer=%d\\n\", nSize, id);\n \n     std::deque<CSerializeData>::iterator it = vSendMsg.insert(vSendMsg.end(), CSerializeData());\n     ssSend.GetAndClear(*it);"
      },
      {
        "sha": "a6b9a0024c8a055f1e05def3c2de7a0f80ff4f78",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=5decfe253c9257f1ec9cc023a26e1281671e8ad2",
        "patch": "@@ -251,7 +251,7 @@ unsigned int TxConfirmStats::NewTx(unsigned int nBlockHeight, double val)\n     unsigned int bucketindex = bucketMap.lower_bound(val)->second;\n     unsigned int blockIndex = nBlockHeight % unconfTxs.size();\n     unconfTxs[blockIndex][bucketindex]++;\n-    LogPrint(\"estimatefee\", \"adding to %s\", dataTypeString);\n+    LogPrint(\"estimatefee2\", \"adding to %s\", dataTypeString);\n     return bucketindex;\n }\n \n@@ -380,7 +380,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     double curPri = entry.GetPriority(txHeight);\n     mapMemPoolTxs[hash].blockHeight = txHeight;\n \n-    LogPrint(\"estimatefee\", \"Blockpolicy mempool tx %s \", hash.ToString().substr(0,10));\n+    LogPrint(\"estimatefee2\", \"Blockpolicy mempool tx %s \", hash.ToString().substr(0,10));\n     // Record this as a priority estimate\n     if (entry.GetFee() == 0 || isPriDataPoint(feeRate, curPri)) {\n         mapMemPoolTxs[hash].stats = &priStats;\n@@ -392,9 +392,9 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n         mapMemPoolTxs[hash].bucketIndex = feeStats.NewTx(txHeight, (double)feeRate.GetFeePerK());\n     }\n     else {\n-        LogPrint(\"estimatefee\", \"not adding\");\n+        LogPrint(\"estimatefee2\", \"not adding\");\n     }\n-    LogPrint(\"estimatefee\", \"\\n\");\n+    LogPrint(\"estimatefee2\", \"\\n\");\n }\n \n void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry)"
      },
      {
        "sha": "c78dadd087d23c964bf250f73520769831a4f963",
        "filename": "src/timedata.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/timedata.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/timedata.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.cpp?ref=5decfe253c9257f1ec9cc023a26e1281671e8ad2",
        "patch": "@@ -59,7 +59,7 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n     // Add data\n     static CMedianFilter<int64_t> vTimeOffsets(BITCOIN_TIMEDATA_MAX_SAMPLES, 0);\n     vTimeOffsets.input(nOffsetSample);\n-    LogPrint(\"net\",\"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n+    LogPrint(nOffsetSample ? \"net\":\"net2\", \"added time data, samples %d, offset %+d (%+d minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n \n     // There is a known issue here (see issue #4521):\n     //\n@@ -111,9 +111,8 @@ void AddTimeData(const CNetAddr& ip, int64_t nOffsetSample)\n         }\n         \n         BOOST_FOREACH(int64_t n, vSorted)\n-            LogPrint(\"net\", \"%+d  \", n);\n-        LogPrint(\"net\", \"|  \");\n+            LogPrint(nTimeOffset ? \"net\":\"net2\", \"%+d  \", n);\n         \n-        LogPrint(\"net\", \"nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n+        LogPrint(nTimeOffset ? \"net\":\"net2\", \"|  nTimeOffset = %+d  (%+d minutes)\\n\", nTimeOffset, nTimeOffset/60);\n     }\n }"
      },
      {
        "sha": "496bed1a68cbdd22b76d6247db167739c1c4a0f1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5decfe253c9257f1ec9cc023a26e1281671e8ad2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5decfe253c9257f1ec9cc023a26e1281671e8ad2",
        "patch": "@@ -1134,5 +1134,5 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n     }\n \n     if (maxFeeRateRemoved > CFeeRate(0))\n-        LogPrint(\"mempool\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n+        LogPrint(\"mempool2\", \"Removed %u txn, rolling minimum fee bumped to %s\\n\", nTxnRemoved, maxFeeRateRemoved.ToString());\n }"
      }
    ]
  }
]