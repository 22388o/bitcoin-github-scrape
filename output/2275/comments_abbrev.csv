BitcoinPullTester,2013-02-05T16:34:41Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/c78a5175be9fd9a9af6a778713054ca3a999f4d2 for binaries and test log.\n",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-13138138,13138138,
gavinandresen,2013-02-12T23:32:50Z,"@SergioDemianLerner : RE: nSigHT & 0x83 : good idea.\n\nRE: why not extend to OP_CHECKSIG:  the cache only exists during the execution of a single OP_CHECKSIG, because standard transaction types only contain either a single OP_CHECKSIG or an OP_CHECKMULTISIG in each scriptPubKey.\n\nIf we ever have lots of transaction scriptPubKeys with multiple OP_*SIGs, then it would make sense to extend the cac",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-13466153,13466153,
gavinandresen,2013-04-08T23:50:54Z,"Implemented @sipa and @SergioDemianLerner suggestions, and rebased to master so pull-tester is happy.\n",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16086333,16086333,
BitcoinPullTester,2013-04-09T00:35:24Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/61a29a7c0676eb0d422ff828f0ba006ba0fc8e2e for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16087788,16087788,
sipa,2013-04-14T16:29:58Z,"@gavinandresen Sorry, this was a dangerous suggestion of mine: the sighash depends on the position of the CHECKSIG in the script, when there are OP_CODESEPARATORs present. You should probably index the map by pbegincodehash as well.\n",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16353840,16353840,
gavinandresen,2013-04-15T00:43:03Z,"Bah.  OP_CODESEPARATOR is evil and should be abolished.\n\nThis optimization isn't high on my list of things to fix, and before pulling we should create some tricky OP_CODESEPARATOR unit tests, so if anybody else is motivated, feel free to do that (I'm buy with payment protocol stuff).\n",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16362890,16362890,
SergioDemianLerner,2013-04-15T19:01:14Z,"First, good to know Sipa catched the problem before it was too late. Excellent job!\n\nI've been pushing to remove OP_CODESEPARATOR and adopt a simpler verification system with a hard-fork in many forum posts, showing strange uses of it. \n\nIt's clear than it can make enormous damage and makes no good at all.\nWe've experienced that programmed hard-forks can be carried out without much danger. I ",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16404771,16404771,
sipa,2013-04-15T20:30:50Z,"@SergioDemianLerner I'm in favor of removing OP_CODESEPARATOR, but I think you mean a soft fork. As far as I know, there has never ever been a hard fork in Bitcoin's history (but we'll do one in 1 month...). Also, there's no need for one here. Simpy turn OP_CODESEPARATOR into a 'return false' - no need to add new semantics.\n\nWhat do you mean by putting a ""*"" in the script?\n",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16409536,16409536,
SergioDemianLerner,2013-04-16T19:46:44Z,"Nothing really important, any opcode could be used.  Just a way to mark which script is the one being signed. The idea is not to insert parts of the script of the previous output in the scriptsig for verification. Currently to explain to a new user how a transaction input is verified we need 200 words. It could be simplified to ""insert \* in the scriptsig, clear all other scriptsigs and hash"" (wel",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16467404,16467404,
sipa,2013-04-16T19:50:44Z,"If we're going to do an actual hard fork for the script language, give me a few days and I can come up with tons of small fixes. If we're not scared of redoing the scripting language from scratch (I am, however), I think we can come up with something vastly better (except for being tested).\n\nHowever, removing the atrocity that is OP_CODESEPARATOR is as easy as replacing it with ""return false;"", ",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16467590,16467590,
SergioDemianLerner,2013-04-16T19:52:46Z,"If ever the signature verification procedure is changed, I would simplify it more: \nLet T0 be the original transaction.\nT1 = T0 with all scriptsigs cleared.\nLet X = SHA-256 ( SHA-256 ( T1 )  )\nThen HashTransaction(T) = SHA-256 ( X  ||  n ))  )\nWhere n is the input number to be verified. Then  X could be cached and computed only once for the whole transaction (here I'm not taking into account ",https://github.com/bitcoin/bitcoin/pull/2275#issuecomment-16467707,16467707,
sipa,2013-04-07T18:29:02Z,Why not a single mapSigHashCache for the whole EvalScript evaluation?\n,https://github.com/bitcoin/bitcoin/pull/2275#discussion_r3686931,3686931,src/script.cpp
gavinandresen,2013-04-08T14:42:10Z,Why not indeed....  I'll change it.\n,https://github.com/bitcoin/bitcoin/pull/2275#discussion_r3695446,3695446,src/script.cpp
