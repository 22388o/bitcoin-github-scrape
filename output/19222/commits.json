[
  {
    "sha": "deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWJhMTk5ZjFjODhjMmU1Zjc1NGIwYTRlYzQzYjllZjI4ZGU4MzUy",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-09T09:45:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-07-08T05:05:12Z"
      },
      "message": "tests: Add ConsumeSubNet(...). Move and increase coverage in ConsumeNetAddr(...).",
      "tree": {
        "sha": "fc46ea1c618c1bf5a1027f18476d5f4133c6ed14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc46ea1c618c1bf5a1027f18476d5f4133c6ed14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deba199f1c88c2e5f754b0a4ec43b9ef28de8352/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abdfd2d0e3ebec7dbead89317ee9192189a35809",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abdfd2d0e3ebec7dbead89317ee9192189a35809",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abdfd2d0e3ebec7dbead89317ee9192189a35809"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 29,
      "deletions": 29
    },
    "files": [
      {
        "sha": "2901c704f61d5e5b0f580ddd261a1f1168262c94",
        "filename": "src/test/fuzz/netaddress.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 29,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deba199f1c88c2e5f754b0a4ec43b9ef28de8352/src/test/fuzz/netaddress.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deba199f1c88c2e5f754b0a4ec43b9ef28de8352/src/test/fuzz/netaddress.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/netaddress.cpp?ref=deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
        "patch": "@@ -5,41 +5,13 @@\n #include <netaddress.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n \n #include <cassert>\n #include <cstdint>\n #include <netinet/in.h>\n #include <vector>\n \n-namespace {\n-CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n-{\n-    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n-    if (network == Network::NET_IPV4) {\n-        const in_addr v4_addr = {\n-            .s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n-        return CNetAddr{v4_addr};\n-    } else if (network == Network::NET_IPV6) {\n-        if (fuzzed_data_provider.remaining_bytes() < 16) {\n-            return CNetAddr{};\n-        }\n-        in6_addr v6_addr = {};\n-        memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n-        return CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n-    } else if (network == Network::NET_INTERNAL) {\n-        CNetAddr net_addr;\n-        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n-        return net_addr;\n-    } else if (network == Network::NET_ONION) {\n-        CNetAddr net_addr;\n-        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n-        return net_addr;\n-    } else {\n-        assert(false);\n-    }\n-}\n-}; // namespace\n-\n void test_one_input(const std::vector<uint8_t>& buffer)\n {\n     FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());"
      },
      {
        "sha": "704ae80bd84c75dd2eba7eba6ff111bcda84c77a",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/deba199f1c88c2e5f754b0a4ec43b9ef28de8352/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/deba199f1c88c2e5f754b0a4ec43b9ef28de8352/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
        "patch": "@@ -10,6 +10,7 @@\n #include <attributes.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n+#include <netaddress.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <script/standard.h>\n@@ -228,4 +229,31 @@ NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataPro\n     return result;\n }\n \n+CNetAddr ConsumeNetAddr(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    const Network network = fuzzed_data_provider.PickValueInArray({Network::NET_IPV4, Network::NET_IPV6, Network::NET_INTERNAL, Network::NET_ONION});\n+    CNetAddr net_addr;\n+    if (network == Network::NET_IPV4) {\n+        const in_addr v4_addr = {\n+            .s_addr = fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        net_addr = CNetAddr{v4_addr};\n+    } else if (network == Network::NET_IPV6) {\n+        if (fuzzed_data_provider.remaining_bytes() >= 16) {\n+            in6_addr v6_addr = {};\n+            memcpy(v6_addr.s6_addr, fuzzed_data_provider.ConsumeBytes<uint8_t>(16).data(), 16);\n+            net_addr = CNetAddr{v6_addr, fuzzed_data_provider.ConsumeIntegral<uint32_t>()};\n+        }\n+    } else if (network == Network::NET_INTERNAL) {\n+        net_addr.SetInternal(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    } else if (network == Network::NET_ONION) {\n+        net_addr.SetSpecial(fuzzed_data_provider.ConsumeBytesAsString(32));\n+    }\n+    return net_addr;\n+}\n+\n+CSubNet ConsumeSubNet(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    return {ConsumeNetAddr(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int32_t>()};\n+}\n+\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "97846d7f5b47ef77469b9f961db77f770e8bcc0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Nzg0NmQ3ZjViNDdlZjc3NDY5YjlmOTYxZGI3N2Y3NzBlOGJjYzBm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-09T11:16:13Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-07-08T05:31:43Z"
      },
      "message": "tests: Add fuzzing harness for BanMan",
      "tree": {
        "sha": "0d43858ee720584f6d0e26da52c7f8b2964739e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d43858ee720584f6d0e26da52c7f8b2964739e1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97846d7f5b47ef77469b9f961db77f770e8bcc0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97846d7f5b47ef77469b9f961db77f770e8bcc0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97846d7f5b47ef77469b9f961db77f770e8bcc0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97846d7f5b47ef77469b9f961db77f770e8bcc0f/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/deba199f1c88c2e5f754b0a4ec43b9ef28de8352",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/deba199f1c88c2e5f754b0a4ec43b9ef28de8352"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 103,
      "deletions": 0
    },
    "files": [
      {
        "sha": "654d019d95a34aad2cb74f13af6d5267eb93b9ed",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97846d7f5b47ef77469b9f961db77f770e8bcc0f/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97846d7f5b47ef77469b9f961db77f770e8bcc0f/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=97846d7f5b47ef77469b9f961db77f770e8bcc0f",
        "patch": "@@ -11,6 +11,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/asmap \\\n   test/fuzz/asmap_direct \\\n   test/fuzz/banentry_deserialize \\\n+  test/fuzz/banman \\\n   test/fuzz/base_encode_decode \\\n   test/fuzz/bech32 \\\n   test/fuzz/block \\\n@@ -355,6 +356,12 @@ test_fuzz_banentry_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_banentry_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_banentry_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n+test_fuzz_banman_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_banman_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_banman_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_banman_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_banman_SOURCES = test/fuzz/banman.cpp\n+\n test_fuzz_base_encode_decode_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_base_encode_decode_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_base_encode_decode_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "fc4a1d9261570e3b6619a70f61456933928c73b5",
        "filename": "src/test/fuzz/banman.cpp",
        "status": "added",
        "additions": 88,
        "deletions": 0,
        "changes": 88,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97846d7f5b47ef77469b9f961db77f770e8bcc0f/src/test/fuzz/banman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97846d7f5b47ef77469b9f961db77f770e8bcc0f/src/test/fuzz/banman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/banman.cpp?ref=97846d7f5b47ef77469b9f961db77f770e8bcc0f",
        "patch": "@@ -0,0 +1,88 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <banman.h>\n+#include <fs.h>\n+#include <netaddress.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <util/system.h>\n+\n+#include <cstdint>\n+#include <limits>\n+#include <string>\n+#include <vector>\n+\n+namespace {\n+int64_t ConsumeBanTimeOffset(FuzzedDataProvider& fuzzed_data_provider) noexcept\n+{\n+    // Avoid signed integer overflow by capping to int32_t max:\n+    // banman.cpp:137:73: runtime error: signed integer overflow: 1591700817 + 9223372036854775807 cannot be represented in type 'long'\n+    return fuzzed_data_provider.ConsumeIntegralInRange<int64_t>(std::numeric_limits<int64_t>::min(), std::numeric_limits<int32_t>::max());\n+}\n+} // namespace\n+\n+void initialize()\n+{\n+    InitializeFuzzingContext();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const fs::path banlist_file = GetDataDir() / \"fuzzed_banlist.dat\";\n+    fs::remove(banlist_file);\n+    {\n+        BanMan ban_man{banlist_file, nullptr, ConsumeBanTimeOffset(fuzzed_data_provider)};\n+        while (fuzzed_data_provider.ConsumeBool()) {\n+            switch (fuzzed_data_provider.ConsumeIntegralInRange<int>(0, 11)) {\n+            case 0: {\n+                ban_man.Ban(ConsumeNetAddr(fuzzed_data_provider),\n+                    ConsumeBanTimeOffset(fuzzed_data_provider), fuzzed_data_provider.ConsumeBool());\n+                break;\n+            }\n+            case 1: {\n+                ban_man.Ban(ConsumeSubNet(fuzzed_data_provider),\n+                    ConsumeBanTimeOffset(fuzzed_data_provider), fuzzed_data_provider.ConsumeBool());\n+                break;\n+            }\n+            case 2: {\n+                ban_man.ClearBanned();\n+                break;\n+            }\n+            case 4: {\n+                ban_man.IsBanned(ConsumeNetAddr(fuzzed_data_provider));\n+                break;\n+            }\n+            case 5: {\n+                ban_man.IsBanned(ConsumeSubNet(fuzzed_data_provider));\n+                break;\n+            }\n+            case 6: {\n+                ban_man.Unban(ConsumeNetAddr(fuzzed_data_provider));\n+                break;\n+            }\n+            case 7: {\n+                ban_man.Unban(ConsumeSubNet(fuzzed_data_provider));\n+                break;\n+            }\n+            case 8: {\n+                banmap_t banmap;\n+                ban_man.GetBanned(banmap);\n+                break;\n+            }\n+            case 9: {\n+                ban_man.DumpBanlist();\n+                break;\n+            }\n+            case 11: {\n+                ban_man.Discourage(ConsumeNetAddr(fuzzed_data_provider));\n+                break;\n+            }\n+            }\n+        }\n+    }\n+    fs::remove(banlist_file);\n+}"
      },
      {
        "sha": "8cf91ef9404c20aa4648f36cfe3572182e04c87c",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97846d7f5b47ef77469b9f961db77f770e8bcc0f/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97846d7f5b47ef77469b9f961db77f770e8bcc0f/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=97846d7f5b47ef77469b9f961db77f770e8bcc0f",
        "patch": "@@ -8,16 +8,19 @@\n #include <amount.h>\n #include <arith_uint256.h>\n #include <attributes.h>\n+#include <chainparamsbase.h>\n #include <coins.h>\n #include <consensus/consensus.h>\n #include <netaddress.h>\n+#include <netbase.h>\n #include <primitives/transaction.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <serialize.h>\n #include <streams.h>\n #include <test/fuzz/FuzzedDataProvider.h>\n #include <test/fuzz/fuzz.h>\n+#include <test/util/setup_common.h>\n #include <txmempool.h>\n #include <uint256.h>\n #include <version.h>\n@@ -256,4 +259,9 @@ CSubNet ConsumeSubNet(FuzzedDataProvider& fuzzed_data_provider) noexcept\n     return {ConsumeNetAddr(fuzzed_data_provider), fuzzed_data_provider.ConsumeIntegral<int32_t>()};\n }\n \n+void InitializeFuzzingContext(const std::string& chain_name = CBaseChainParams::REGTEST)\n+{\n+    static const BasicTestingSetup basic_testing_setup{chain_name, {\"-nodebuglogfile\"}};\n+}\n+\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  }
]