[
  {
    "sha": "4a8181b303218683d014e8e79a172ea8ccccc4dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTgxODFiMzAzMjE4NjgzZDAxNGU4ZTc5YTE3MmVhOGNjY2NjNGRk",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-11T12:41:39Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-11T14:05:54Z"
      },
      "message": "tests: Add std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataProvider& fuzzed_data_provider, const size_t length)",
      "tree": {
        "sha": "d15bde10ffdfd64b662b06f15f76d07250168358",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d15bde10ffdfd64b662b06f15f76d07250168358"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a8181b303218683d014e8e79a172ea8ccccc4dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8181b303218683d014e8e79a172ea8ccccc4dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8181b303218683d014e8e79a172ea8ccccc4dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8181b303218683d014e8e79a172ea8ccccc4dd/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "45a6811d36fc59ce0d7e2be7a848059a05b0486e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/45a6811d36fc59ce0d7e2be7a848059a05b0486e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/45a6811d36fc59ce0d7e2be7a848059a05b0486e"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1c1b2cd254d88d03e25ed2e8680118d8d4eb6b98",
        "filename": "src/test/fuzz/util.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a8181b303218683d014e8e79a172ea8ccccc4dd/src/test/fuzz/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a8181b303218683d014e8e79a172ea8ccccc4dd/src/test/fuzz/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/util.h?ref=4a8181b303218683d014e8e79a172ea8ccccc4dd",
        "patch": "@@ -214,4 +214,18 @@ NODISCARD inline bool ContainsSpentInput(const CTransaction& tx, const CCoinsVie\n     return false;\n }\n \n+/**\n+ * Returns a byte vector of specified size regardless of the number of remaining bytes available\n+ * from the fuzzer. Pads with zero value bytes if needed to achieve the specified size.\n+ */\n+NODISCARD inline std::vector<uint8_t> ConsumeFixedLengthByteVector(FuzzedDataProvider& fuzzed_data_provider, const size_t length) noexcept\n+{\n+    std::vector<uint8_t> result(length);\n+    const std::vector<uint8_t> random_bytes = fuzzed_data_provider.ConsumeBytes<uint8_t>(length);\n+    if (!random_bytes.empty()) {\n+        std::memcpy(result.data(), random_bytes.data(), random_bytes.size());\n+    }\n+    return result;\n+}\n+\n #endif // BITCOIN_TEST_FUZZ_UTIL_H"
      }
    ]
  },
  {
    "sha": "cf5b8f64b3fef053035fa11231601b79bfa53aff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjViOGY2NGIzZmVmMDUzMDM1ZmExMTIzMTYwMWI3OWJmYTUzYWZm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-11T12:41:54Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2020-06-11T14:05:54Z"
      },
      "message": "tests: Add fuzzing harness for {Read,Write}{LE,BE}{16,32,64} (crypto/common.h)",
      "tree": {
        "sha": "5844fc9acca77223c9654397e0e27bfb7cd53115",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5844fc9acca77223c9654397e0e27bfb7cd53115"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf5b8f64b3fef053035fa11231601b79bfa53aff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5b8f64b3fef053035fa11231601b79bfa53aff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf5b8f64b3fef053035fa11231601b79bfa53aff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf5b8f64b3fef053035fa11231601b79bfa53aff/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a8181b303218683d014e8e79a172ea8ccccc4dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a8181b303218683d014e8e79a172ea8ccccc4dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a8181b303218683d014e8e79a172ea8ccccc4dd"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "03cd9133c8fd1a2e61d1361d3a2db21f1facd5a5",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf5b8f64b3fef053035fa11231601b79bfa53aff/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf5b8f64b3fef053035fa11231601b79bfa53aff/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=cf5b8f64b3fef053035fa11231601b79bfa53aff",
        "patch": "@@ -32,6 +32,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/checkqueue \\\n   test/fuzz/coins_deserialize \\\n   test/fuzz/coins_view \\\n+  test/fuzz/crypto_common \\\n   test/fuzz/cuckoocache \\\n   test/fuzz/decode_tx \\\n   test/fuzz/descriptor_parse \\\n@@ -478,6 +479,12 @@ test_fuzz_coins_view_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_coins_view_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_coins_view_SOURCES = test/fuzz/coins_view.cpp\n \n+test_fuzz_crypto_common_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_crypto_common_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_crypto_common_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_crypto_common_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_crypto_common_SOURCES = test/fuzz/crypto_common.cpp\n+\n test_fuzz_cuckoocache_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_cuckoocache_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_cuckoocache_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "7ccb12521636431376f836f9ee4ffd7db3edfe87",
        "filename": "src/test/fuzz/crypto_common.cpp",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf5b8f64b3fef053035fa11231601b79bfa53aff/src/test/fuzz/crypto_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf5b8f64b3fef053035fa11231601b79bfa53aff/src/test/fuzz/crypto_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/crypto_common.cpp?ref=cf5b8f64b3fef053035fa11231601b79bfa53aff",
        "patch": "@@ -0,0 +1,70 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/common.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+\n+#include <array>\n+#include <cassert>\n+#include <cstdint>\n+#include <cstring>\n+#include <vector>\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider{buffer.data(), buffer.size()};\n+    const uint16_t random_u16 = fuzzed_data_provider.ConsumeIntegral<uint16_t>();\n+    const uint32_t random_u32 = fuzzed_data_provider.ConsumeIntegral<uint32_t>();\n+    const uint64_t random_u64 = fuzzed_data_provider.ConsumeIntegral<uint64_t>();\n+    const std::vector<uint8_t> random_bytes_2 = ConsumeFixedLengthByteVector(fuzzed_data_provider, 2);\n+    const std::vector<uint8_t> random_bytes_4 = ConsumeFixedLengthByteVector(fuzzed_data_provider, 4);\n+    const std::vector<uint8_t> random_bytes_8 = ConsumeFixedLengthByteVector(fuzzed_data_provider, 8);\n+\n+    std::array<uint8_t, 2> writele16_arr;\n+    WriteLE16(writele16_arr.data(), random_u16);\n+    assert(ReadLE16(writele16_arr.data()) == random_u16);\n+\n+    std::array<uint8_t, 4> writele32_arr;\n+    WriteLE32(writele32_arr.data(), random_u32);\n+    assert(ReadLE32(writele32_arr.data()) == random_u32);\n+\n+    std::array<uint8_t, 8> writele64_arr;\n+    WriteLE64(writele64_arr.data(), random_u64);\n+    assert(ReadLE64(writele64_arr.data()) == random_u64);\n+\n+    std::array<uint8_t, 4> writebe32_arr;\n+    WriteBE32(writebe32_arr.data(), random_u32);\n+    assert(ReadBE32(writebe32_arr.data()) == random_u32);\n+\n+    std::array<uint8_t, 8> writebe64_arr;\n+    WriteBE64(writebe64_arr.data(), random_u64);\n+    assert(ReadBE64(writebe64_arr.data()) == random_u64);\n+\n+    const uint16_t readle16_result = ReadLE16(random_bytes_2.data());\n+    std::array<uint8_t, 2> readle16_arr;\n+    WriteLE16(readle16_arr.data(), readle16_result);\n+    assert(std::memcmp(random_bytes_2.data(), readle16_arr.data(), 2) == 0);\n+\n+    const uint32_t readle32_result = ReadLE32(random_bytes_4.data());\n+    std::array<uint8_t, 4> readle32_arr;\n+    WriteLE32(readle32_arr.data(), readle32_result);\n+    assert(std::memcmp(random_bytes_4.data(), readle32_arr.data(), 4) == 0);\n+\n+    const uint64_t readle64_result = ReadLE64(random_bytes_8.data());\n+    std::array<uint8_t, 8> readle64_arr;\n+    WriteLE64(readle64_arr.data(), readle64_result);\n+    assert(std::memcmp(random_bytes_8.data(), readle64_arr.data(), 8) == 0);\n+\n+    const uint32_t readbe32_result = ReadBE32(random_bytes_4.data());\n+    std::array<uint8_t, 4> readbe32_arr;\n+    WriteBE32(readbe32_arr.data(), readbe32_result);\n+    assert(std::memcmp(random_bytes_4.data(), readbe32_arr.data(), 4) == 0);\n+\n+    const uint64_t readbe64_result = ReadBE64(random_bytes_8.data());\n+    std::array<uint8_t, 8> readbe64_arr;\n+    WriteBE64(readbe64_arr.data(), readbe64_result);\n+    assert(std::memcmp(random_bytes_8.data(), readbe64_arr.data(), 8) == 0);\n+}"
      }
    ]
  }
]