[
  {
    "sha": "9514e9e2fdddb9979b3e75b9a413128357eb1e39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTE0ZTllMmZkZGRiOTk3OWIzZTc1YjlhNDEzMTI4MzU3ZWIxZTM5",
    "commit": {
      "author": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-09-07T20:44:04Z"
      },
      "committer": {
        "name": "Cristian Mircea Messel",
        "email": "mess110@gmail.com",
        "date": "2017-09-07T20:44:04Z"
      },
      "message": "Cleanup wildcard imports in functional tests\n\n* Unless it makes sense\n* Also remove double new lines\n* Remove whitespaces",
      "tree": {
        "sha": "76b36e4560b5006b270a75c16efb624d92ffb044",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/76b36e4560b5006b270a75c16efb624d92ffb044"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9514e9e2fdddb9979b3e75b9a413128357eb1e39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9514e9e2fdddb9979b3e75b9a413128357eb1e39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9514e9e2fdddb9979b3e75b9a413128357eb1e39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9514e9e2fdddb9979b3e75b9a413128357eb1e39/comments",
    "author": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mess110",
      "id": 226170,
      "node_id": "MDQ6VXNlcjIyNjE3MA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/226170?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mess110",
      "html_url": "https://github.com/mess110",
      "followers_url": "https://api.github.com/users/mess110/followers",
      "following_url": "https://api.github.com/users/mess110/following{/other_user}",
      "gists_url": "https://api.github.com/users/mess110/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mess110/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mess110/subscriptions",
      "organizations_url": "https://api.github.com/users/mess110/orgs",
      "repos_url": "https://api.github.com/users/mess110/repos",
      "events_url": "https://api.github.com/users/mess110/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mess110/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "52f8877525d5238f3440e73710507be889d14127",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/52f8877525d5238f3440e73710507be889d14127",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/52f8877525d5238f3440e73710507be889d14127"
      }
    ],
    "stats": {
      "total": 863,
      "additions": 608,
      "deletions": 255
    },
    "files": [
      {
        "sha": "1300726ae55a3bb1eabdc132254867f8c5e63d12",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -10,8 +10,17 @@\n  which are not included in a block and are not currently in the mempool. It has\n  no effect on transactions which are already conflicted or abandoned.\n \"\"\"\n+\n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n class AbandonConflictTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "4726c8f680b21f659544dacfd70884971fd8f48d",
        "filename": "test/functional/assumevalid.py",
        "status": "modified",
        "additions": 16,
        "deletions": 13,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/assumevalid.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -29,23 +29,26 @@\n       block 200. node2 will reject block 102 since it's assumed valid, but it\n       isn't buried by at least two weeks' work.\n \"\"\"\n+\n import time\n \n-from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.blocktools import create_block, create_coinbase\n from test_framework.key import CECKey\n-from test_framework.mininode import (CBlockHeader,\n-                                     COutPoint,\n-                                     CTransaction,\n-                                     CTxIn,\n-                                     CTxOut,\n-                                     NetworkThread,\n-                                     NodeConn,\n-                                     NodeConnCB,\n-                                     msg_block,\n-                                     msg_headers)\n-from test_framework.script import (CScript, OP_TRUE)\n+from test_framework.mininode import (\n+    CBlockHeader,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+    msg_headers,\n+)\n+from test_framework.script import OP_TRUE, CScript\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (p2p_port, assert_equal)\n+from test_framework.util import assert_equal, p2p_port\n \n class BaseNode(NodeConnCB):\n     def send_header_for_blocks(self, new_blocks):"
      },
      {
        "sha": "30fd86986c607d89f574ab477b781b2b747ba788",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 26,
        "deletions": 6,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -8,13 +8,34 @@\n 1351.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP, CScriptNum\n from io import BytesIO\n \n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.mininode import (\n+    CTransaction,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    ToHex,\n+    mininode_lock,\n+    msg_block,\n+    msg_tx,\n+)\n+from test_framework.script import (\n+    OP_1NEGATE,\n+    OP_CHECKLOCKTIMEVERIFY,\n+    OP_DROP,\n+    CScript,\n+    CScriptNum,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+    p2p_port,\n+    wait_until,\n+)\n+\n CLTV_HEIGHT = 1351\n \n # Reject codes that we might receive in this test\n@@ -158,6 +179,5 @@ def run_test(self):\n         node0.send_and_ping(msg_block(block))\n         assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n \n-\n if __name__ == '__main__':\n     BIP65Test().main()"
      },
      {
        "sha": "980d77d95c36a95d3be6b0d9cf63452d8bbf70a6",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -43,14 +43,16 @@\n bip112tx_special - test negative argument to OP_CSV\n \"\"\"\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import ToHex, CTransaction, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import *\n-from io import BytesIO\n import time\n+from decimal import Decimal\n+from io import BytesIO\n+\n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.comptool import TestInstance, TestManager\n+from test_framework.mininode import CTransaction, NetworkThread, ToHex\n+from test_framework.script import OP_CHECKSEQUENCEVERIFY, OP_DROP, CScript\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import assert_equal, get_bip9_status, hex_str_to_bytes\n \n base_relative_locktime = 10\n seq_disable_flag = 1<<31\n@@ -529,6 +531,5 @@ def get_tests(self):\n         ### Missing aspects of test\n         ##  Testing empty stack fails\n \n-\n if __name__ == '__main__':\n     BIP68_112_113Test().main()"
      },
      {
        "sha": "c53e86bddfdf04a3c30d6abfaab9108df211c313",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 21,
        "deletions": 4,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,9 +4,26 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP68 implementation.\"\"\"\n \n+from test_framework.blocktools import (\n+    COIN,\n+    COutPoint,\n+    CScript,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    FromHex,\n+    ToHex,\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.blocktools import *\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    get_bip9_status,\n+    satoshi_round,\n+    sync_blocks,\n+)\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)\n@@ -129,7 +146,7 @@ def test_sequence_lock_confirmed_inputs(self):\n \n             # Track whether any sequence locks used should fail\n             should_pass = True\n-            \n+\n             # Track whether this transaction was built with sequence locks\n             using_sequence_locks = False\n \n@@ -343,7 +360,7 @@ def test_bip68_not_consensus(self):\n         tx2.rehash()\n \n         self.nodes[0].sendrawtransaction(ToHex(tx2))\n-        \n+\n         # Now make an invalid spend of tx2 according to BIP68\n         sequence_value = 100 # 100 block relative locktime\n "
      },
      {
        "sha": "5212a80e242aca6f9e3f5f120c88192695cafa7d",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -15,17 +15,27 @@\n test that enforcement has not triggered (which triggers ACTIVE)\n test that enforcement has triggered\n \"\"\"\n-from io import BytesIO\n+\n+import itertools\n import shutil\n import time\n-import itertools\n+from io import BytesIO\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import CTransaction, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block\n+from test_framework.blocktools import create_block, create_coinbase\n from test_framework.comptool import TestInstance, TestManager\n-from test_framework.script import CScript, OP_1NEGATE, OP_CHECKSEQUENCEVERIFY, OP_DROP\n+from test_framework.mininode import CTransaction, NetworkThread\n+from test_framework.script import (\n+    OP_1NEGATE,\n+    OP_CHECKSEQUENCEVERIFY,\n+    OP_DROP,\n+    CScript,\n+)\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hex_str_to_bytes,\n+)\n \n class BIP9SoftForksTest(ComparisonTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "1c2cfa333f48a67a935dea0cd2b69f29bd459f27",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 19,
        "deletions": 5,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -7,13 +7,27 @@\n Test that the DERSIG soft-fork activates at (regtest) height 1251.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n-from test_framework.blocktools import create_coinbase, create_block\n-from test_framework.script import CScript\n from io import BytesIO\n \n+from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.mininode import (\n+    CTransaction,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_block,\n+    msg_tx,\n+)\n+from test_framework.script import CScript\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    hex_str_to_bytes,\n+    p2p_port,\n+    wait_until,\n+)\n+\n DERSIG_HEIGHT = 1251\n \n # Reject codes that we might receive in this test"
      },
      {
        "sha": "21a8246fefd0cd3d800ada18be29c2fd1c7cf883",
        "filename": "test/functional/bitcoin_cli.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bitcoin_cli.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,7 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoin-cli\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_process_error, get_auth_cookie\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_process_error,\n+    get_auth_cookie,\n+)\n \n class TestBitcoinCli(BitcoinTestFramework):\n "
      },
      {
        "sha": "d956ced2e2846c39869f46e10aa466542208530a",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -17,17 +17,17 @@\n Tests correspond to code in rpc/blockchain.cpp.\n \"\"\"\n \n-from decimal import Decimal\n import http.client\n import subprocess\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n+    assert_is_hash_string,\n+    assert_is_hex_string,\n     assert_raises,\n     assert_raises_jsonrpc,\n-    assert_is_hex_string,\n-    assert_is_hash_string,\n )\n \n class BlockchainTest(BitcoinTestFramework):\n@@ -145,6 +145,5 @@ def _test_stopatheight(self):\n         self.start_node(0)\n         assert_equal(self.nodes[0].getblockcount(), 207)\n \n-\n if __name__ == '__main__':\n     BlockchainTest().main()"
      },
      {
        "sha": "a54f8b6817a9293056889de13010cffd1697ce5f",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -14,21 +14,29 @@\n make assumptions about execution order.\n \"\"\"\n \n+import io\n+from decimal import Decimal\n+\n from segwit import send_to_witness\n-from test_framework.test_framework import BitcoinTestFramework\n from test_framework import blocktools\n from test_framework.mininode import CTransaction\n-from test_framework.util import *\n-\n-import io\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_jsonrpc,\n+    bytes_to_hex_str,\n+    connect_nodes_bi,\n+    hex_str_to_bytes,\n+    sync_mempools,\n+)\n \n # Sequence number that is BIP 125 opt-in and BIP 68-compliant\n BIP125_SEQUENCE_NUMBER = 0xfffffffd\n \n WALLET_PASSPHRASE = \"test\"\n WALLET_PASSPHRASE_TIMEOUT = 3600\n \n-\n class BumpFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n@@ -294,6 +302,5 @@ def submit_block_with_tx(node, tx):\n     node.submitblock(bytes_to_hex_str(block.serialize(True)))\n     return block\n \n-\n if __name__ == \"__main__\":\n     BumpFeeTest().main()"
      },
      {
        "sha": "d6540c7a9d76b3023fa9433b0516b30701e86aa0",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -5,12 +5,12 @@\n to write to an outputfile.\"\"\"\n \n import argparse\n-from collections import defaultdict, namedtuple\n import heapq\n import itertools\n import os\n import re\n import sys\n+from collections import defaultdict, namedtuple\n \n # Matches on the date format at the start of the log event\n TIMESTAMP_PATTERN = re.compile(r\"^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}\\.\\d{6}\")"
      },
      {
        "sha": "3d63341742f59795ab8e33b3cb0b01c0cfba7a9d",
        "filename": "test/functional/dbcrash.py",
        "status": "modified",
        "additions": 13,
        "deletions": 3,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/dbcrash.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -31,10 +31,20 @@\n import sys\n import time\n \n-from test_framework.mininode import *\n-from test_framework.script import *\n+from test_framework.mininode import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    ToHex,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    create_confirmed_utxos,\n+    hex_str_to_bytes,\n+)\n \n HTTP_DISCONNECT_ERRORS = [http.client.CannotSendRequest]\n try:"
      },
      {
        "sha": "5641dd0e6e53afe12bbf6daa6519048f049cc2e3",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,11 +4,16 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test decoding scripts via decodescript RPC command.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import *\n from io import BytesIO\n \n+from test_framework.mininode import CTransaction\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hex_str_to_bytes,\n+)\n+\n class DecodeScriptTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True"
      },
      {
        "sha": "e8dc6e2a5b2e4627e7dea9a55d74e28662d2b02b",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -9,7 +9,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_raises_jsonrpc\n \n class DisableWalletTest (BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "f4dcef7fd88ed35ef983389276ce719d03d73679",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -9,12 +9,13 @@\n the file and should give the reader information about *what* the test\n is testing and *how* it's being tested\n \"\"\"\n+\n # Imports should be in PEP8 ordering (std library first, then third party\n # libraries then local imports).\n from collections import defaultdict\n \n # Avoid wildcard * imports if possible\n-from test_framework.blocktools import (create_block, create_coinbase)\n+from test_framework.blocktools import create_block, create_coinbase\n from test_framework.mininode import (\n     CInv,\n     NetworkThread,"
      },
      {
        "sha": "835ca55ed6bd9a77a1bda132434af83f5fe1cbf7",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -3,6 +3,7 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the -alertnotify option.\"\"\"\n+\n import os\n import time\n "
      },
      {
        "sha": "95556d92238ea1815ea5ea2899387dec13798d41",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,9 +4,18 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from decimal import Decimal\n \n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_greater_than,\n+    assert_greater_than_or_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes_bi,\n+    count_bytes,\n+)\n \n def get_unspent(listunspent, amount):\n     for utx in listunspent:"
      },
      {
        "sha": "eac313cb0770bfafee306e4ce23c8d202e636f5e",
        "filename": "test/functional/getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_longpoll.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,10 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test longpolling with getblocktemplate.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n import threading\n+from decimal import Decimal\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import get_rpc_proxy, random_transaction\n \n class LongpollThread(threading.Thread):\n     def __init__(self, node):\n@@ -68,4 +69,3 @@ def run_test(self):\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()\n-"
      },
      {
        "sha": "dc5eb705cc76c42388628b90388f9c9d7461e1e8",
        "filename": "test/functional/httpbasics.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/httpbasics.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,12 +4,12 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RPC HTTP basics.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n import http.client\n import urllib.parse\n \n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, str_to_b64str\n+\n class HTTPBasicsTest (BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n@@ -103,6 +103,5 @@ def run_test(self):\n         out1 = conn.getresponse()\n         assert_equal(out1.status, http.client.BAD_REQUEST)\n \n-\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "fb2eb71ce3f2eb1a1cd9a93029a09f1fb96050fd",
        "filename": "test/functional/import-rescan.py",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/import-rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/import-rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/import-rescan.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -19,19 +19,23 @@\n happened previously.\n \"\"\"\n \n-from test_framework.authproxy import JSONRPCException\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (connect_nodes, sync_blocks, assert_equal, set_node_times)\n-\n import collections\n import enum\n import itertools\n \n+from test_framework.authproxy import JSONRPCException\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    set_node_times,\n+    sync_blocks,\n+)\n+\n Call = enum.Enum(\"Call\", \"single multi\")\n Data = enum.Enum(\"Data\", \"address pub priv\")\n Rescan = enum.Enum(\"Rescan\", \"no yes late_timestamp\")\n \n-\n class Variant(collections.namedtuple(\"Variant\", \"call data rescan prune\")):\n     \"\"\"Helper for importing one key and verifying scanned transactions.\"\"\"\n \n@@ -186,6 +190,5 @@ def try_rpc(func, *args, **kwargs):\n     except JSONRPCException as e:\n         return None, e.error\n \n-\n if __name__ == \"__main__\":\n     ImportRescanTest().main()"
      },
      {
        "sha": "c30754d2666563d47734f2fd451c0c018e62c203",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -3,8 +3,14 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the importmulti RPC.\"\"\"\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    JSONRPCException,\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_message,\n+)\n \n class ImportMultiTest (BitcoinTestFramework):\n     def set_test_params(self):\n@@ -433,6 +439,5 @@ def run_test (self):\n                 \"timestamp\": \"\",\n             }])\n \n-\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "df361ab7a51434e5bd98d5a2d3c54bd2005cb3a2",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -3,8 +3,11 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the importprunedfunds and removeprunedfunds RPCs.\"\"\"\n+\n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class ImportPrunedFundsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -16,7 +19,7 @@ def run_test(self):\n         self.nodes[0].generate(101)\n \n         self.sync_all()\n-        \n+\n         # address\n         address1 = self.nodes[0].getnewaddress()\n         # pubkey"
      },
      {
        "sha": "77ca79183157fefe742acf1b5b5a760caa96318a",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the invalidateblock RPC.\"\"\"\n \n+import time\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, connect_nodes_bi, sync_blocks\n \n class InvalidateTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "72e5346bf44831ad071791d8547265b006230921",
        "filename": "test/functional/invalidblockrequest.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidblockrequest.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -11,13 +11,20 @@\n re-requested.\n \"\"\"\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n import copy\n import time\n \n+from test_framework.blocktools import (\n+    COIN,\n+    NetworkThread,\n+    create_block,\n+    create_coinbase,\n+    create_transaction,\n+)\n+from test_framework.comptool import RejectResult, TestInstance, TestManager\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import assert_equal\n+\n # Use the ComparisonTestFramework with 1 node: only use --testbinary.\n class InvalidBlockRequestTest(ComparisonTestFramework):\n \n@@ -111,6 +118,5 @@ def get_tests(self):\n \n         yield TestInstance([[block3, RejectResult(16, b'bad-cb-amount')]])\n \n-\n if __name__ == '__main__':\n     InvalidBlockRequestTest().main()"
      },
      {
        "sha": "a9546e08a8e25e5a6f1c8f312fd09096e895c6c9",
        "filename": "test/functional/invalidtxrequest.py",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidtxrequest.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -7,12 +7,17 @@\n In this test we connect to one node over p2p, and test tx requests.\n \"\"\"\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n import time\n \n-\n+from test_framework.blocktools import (\n+    COIN,\n+    NetworkThread,\n+    create_block,\n+    create_coinbase,\n+    create_transaction,\n+)\n+from test_framework.comptool import RejectResult, TestInstance, TestManager\n+from test_framework.test_framework import ComparisonTestFramework\n \n # Use the ComparisonTestFramework with 1 node: only use --testbinary.\n class InvalidTxRequestTest(ComparisonTestFramework):"
      },
      {
        "sha": "f3f008c385c4a7d7f2cbd2b2df4b218331d82462",
        "filename": "test/functional/keypool-topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/keypool-topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/keypool-topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool-topup.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -10,14 +10,11 @@\n - Generate 110 keys (enough to drain the keypool). Store key 90 (in the initial keypool) and key 110 (beyond the initial keypool). Send funds to key 90 and key 110.\n - Stop node1, clear the datadir, move wallet file back into the datadir and restart node1.\n - connect node1 to node0. Verify that they sync and node1 receives its funds.\"\"\"\n+\n import shutil\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    connect_nodes_bi,\n-    sync_blocks,\n-)\n+from test_framework.util import assert_equal, connect_nodes_bi, sync_blocks\n \n class KeypoolRestoreTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "3bec28c88e35683af9f65fbed559bf24d35a3014",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\"\n \n+import time\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class KeyPoolTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "c0c1ba9d662669b0ce980362e5ce218f1cd976df",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,11 +4,19 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listtransactions API.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import CTransaction, COIN\n+from decimal import Decimal\n from io import BytesIO\n \n+from test_framework.mininode import COIN, CTransaction\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_array_result,\n+    assert_equal,\n+    bytes_to_hex_str,\n+    hex_str_to_bytes,\n+    sync_mempools,\n+)\n+\n def txFromHex(hexstring):\n     tx = CTransaction()\n     f = BytesIO(hex_str_to_bytes(hexstring))\n@@ -195,7 +203,5 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")\n         assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n \n-\n if __name__ == '__main__':\n     ListTransactionsTest().main()\n-"
      },
      {
        "sha": "4cc54faba29487ced2a35008a7b038029558b285",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -10,12 +10,19 @@\n if uploadtarget has been reached.\n * Verify that the upload counters are reset after 24 hours.\n \"\"\"\n-from collections import defaultdict\n+\n import time\n+from collections import defaultdict\n \n-from test_framework.mininode import *\n+from test_framework.mininode import (\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_getdata,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, mine_large_block, p2p_port\n \n class TestNode(NodeConnCB):\n     def __init__(self):"
      },
      {
        "sha": "49015fb3ac29273186b286511e74a20448ba6dc5",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -5,7 +5,11 @@\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    create_confirmed_utxos,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n \n class MempoolLimitTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "06305a50fbdc6ad696c5734fe1422249aee91409",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,9 +4,17 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test descendant package tracking code.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from decimal import Decimal\n+\n from test_framework.mininode import COIN\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    satoshi_round,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n@@ -100,7 +108,7 @@ def run_test(self):\n         for x in chain:\n             ancestor_fees += mempool[x]['fee']\n             assert_equal(mempool[x]['ancestorfees'], ancestor_fees * COIN + 1000)\n-        \n+\n         # Undo the prioritisetransaction for later tests\n         self.nodes[0].prioritisetransaction(txid=chain[0], fee_delta=-1000)\n \n@@ -232,7 +240,7 @@ def run_test(self):\n         signedtx = self.nodes[0].signrawtransaction(rawtx)\n         txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n         sync_mempools(self.nodes)\n-        \n+\n         # Now try to disconnect the tip on each node...\n         self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())"
      },
      {
        "sha": "32c731e9933ce1b85c970c18f03e3744dc0e564e",
        "filename": "test/functional/mempool_persist.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_persist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_persist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_persist.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -33,13 +33,14 @@\n     mempool.\n   - Verify that savemempool throws when the RPC is called if\n     node1 can't write to disk.\n-\n \"\"\"\n+\n import os\n import time\n+from decimal import Decimal\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_jsonrpc, wait_until\n \n class MempoolPersistTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "4f27b7ec668d2b1822ea25baf005a425b99c64c8",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -9,7 +9,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_jsonrpc, create_tx\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):"
      },
      {
        "sha": "dd9004c39f12bc1d2af41a00ca4161c728fe4eb4",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, create_tx\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolCoinbaseTest(BitcoinTestFramework):\n@@ -63,6 +63,5 @@ def run_test(self):\n             tx = self.nodes[0].gettransaction(txid)\n             assert(tx[\"confirmations\"] > 0)\n \n-\n if __name__ == '__main__':\n     MempoolCoinbaseTest().main()"
      },
      {
        "sha": "97698b21644a5dc374ecf480050428e0cac3bf85",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -13,7 +13,7 @@\n \"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, assert_raises_jsonrpc, create_tx\n \n # Create one-input, one-output, no-fee transaction:\n class MempoolSpendCoinbaseTest(BitcoinTestFramework):"
      },
      {
        "sha": "0748078cb13a26af207fcb54a36850ff6d249173",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -5,7 +5,11 @@\n \"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes,\n+)\n \n class MerkleBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -78,6 +82,5 @@ def run_test(self):\n         # We can't get a proof if we specify transactions from different blocks\n         assert_raises_jsonrpc(-5, \"Not all transactions found in specified or retrieved block\", self.nodes[2].gettxoutproof, [txid1, txid3])\n \n-\n if __name__ == '__main__':\n     MerkleBlockTest().main()"
      },
      {
        "sha": "90c7d92ab66ffc01bed378048a1569977ba619d3",
        "filename": "test/functional/minchainwork.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/minchainwork.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/minchainwork.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/minchainwork.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -18,7 +18,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import sync_blocks, connect_nodes, assert_equal\n+from test_framework.util import assert_equal, connect_nodes\n \n # 2 hashes required per regtest block (with no difficulty adjustment)\n REGTEST_WORK_PER_BLOCK = 2"
      },
      {
        "sha": "db38aa4c700739f6dcfb548dff86d05b46bcb745",
        "filename": "test/functional/multi_rpc.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multi_rpc.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,14 +4,14 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test multiple RPC users.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import str_to_b64str, assert_equal\n-\n-import os\n import http.client\n+import os\n import urllib.parse\n \n-class HTTPBasicsTest (BitcoinTestFramework):\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, str_to_b64str\n+\n+class HTTPBasicsTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n@@ -148,6 +148,5 @@ def run_test(self):\n         assert_equal(resp.status, 401)\n         conn.close()\n \n-\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "1ddca9b9c60589c5c09b0185e99952ef27d1b075",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -13,13 +13,23 @@\n [Policy/Consensus] Check that the new NULLDUMMY rules are enforced on the 432nd block.\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+import time\n+from io import BytesIO\n+\n+from test_framework.blocktools import (\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.mininode import CTransaction, NetworkThread\n-from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n from test_framework.script import CScript\n-from io import BytesIO\n-import time\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    bytes_to_hex_str,\n+    hex_str_to_bytes,\n+)\n \n NULLDUMMY_ERROR = \"64: non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n "
      },
      {
        "sha": "4f6ddd7d0780ca6048093ae37e9ef23cb44e6201",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 15,
        "deletions": 3,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -48,11 +48,23 @@\n    Node0 should process and the tip should advance.\n \"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+import os\n import time\n+\n from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.mininode import (\n+    CBlockHeader,\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_block,\n+    msg_headers,\n+    msg_inv,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, assert_raises_jsonrpc, p2p_port\n \n class AcceptBlockTest(BitcoinTestFramework):\n     def add_options(self, parser):"
      },
      {
        "sha": "1061f38b8b832f0d1393e76dac349e4a4d745457",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -8,11 +8,15 @@\n Version 2 compact blocks are post-segwit (wtxids)\n \"\"\"\n \n+from test_framework.blocktools import (\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.mininode import *\n+from test_framework.script import OP_TRUE, CScript\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.script import CScript, OP_TRUE\n \n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n class TestNode(NodeConnCB):"
      },
      {
        "sha": "3bb1305406be5feb234c0fc43cea3b1eb5808b2b",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,11 +4,18 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of feefilter messages.\"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n import time\n-\n+from decimal import Decimal\n+\n+from test_framework.mininode import (\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_feefilter,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import p2p_port, sync_blocks, sync_mempools\n \n def hashToHex(hash):\n     return format(hash, '064x')"
      },
      {
        "sha": "3cbf44ac1b2cb60a3b4d17afcdda56f096d906f6",
        "filename": "test/functional/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-fullblocktest.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -11,14 +11,15 @@\n each test.\n \"\"\"\n \n-from test_framework.test_framework import ComparisonTestFramework\n-from test_framework.util import *\n-from test_framework.comptool import TestManager, TestInstance, RejectResult\n-from test_framework.blocktools import *\n+import struct\n import time\n+\n+from test_framework.blocktools import *\n+from test_framework.comptool import RejectResult, TestInstance, TestManager\n from test_framework.key import CECKey\n from test_framework.script import *\n-import struct\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n \n class PreviousSpendableOutput(object):\n     def __init__(self, tx = CTransaction(), n = -1):"
      },
      {
        "sha": "b8d03665b8434d83e11e4cb533c7cd31c47c5a77",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -14,9 +14,22 @@\n and don't receive a VERACK. Unsupported service bits are currently 1 << 5 and\n 1 << 7 (until August 1st 2018).\"\"\"\n \n-from test_framework.mininode import *\n+import time\n+\n+from test_framework.mininode import (\n+    NODE_NETWORK,\n+    NODE_UNSUPPORTED_SERVICE_BIT_5,\n+    NODE_UNSUPPORTED_SERVICE_BIT_7,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_getaddr,\n+    msg_ping,\n+    msg_verack,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import p2p_port, wait_until\n \n banscore = 10\n "
      },
      {
        "sha": "20577d50633425f3c2350b2ee9d34a957d6fb861",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -8,9 +8,14 @@\n filters are not enabled.\n \"\"\"\n \n-from test_framework.mininode import *\n+from test_framework.mininode import (\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_mempool,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_equal, p2p_port\n \n class P2PMempoolTests(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -32,6 +37,6 @@ def run_test(self):\n \n         #mininode must be disconnected at this point\n         assert_equal(len(self.nodes[0].getpeerinfo()), 0)\n-    \n+\n if __name__ == '__main__':\n     P2PMempoolTests().main()"
      },
      {
        "sha": "06e77a522b1b2e189cb37b7ecbe4fdb870b9a2a9",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,15 +4,22 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n \n+import random\n+import time\n+from binascii import hexlify\n+\n+from test_framework.blocktools import (\n+    WITNESS_COMMITMENT_HEADER,\n+    add_witness_commitment,\n+    create_block,\n+    create_coinbase,\n+    get_witness_script,\n+)\n+from test_framework.key import CECKey, CPubKey\n from test_framework.mininode import *\n+from test_framework.script import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment, get_witness_script, WITNESS_COMMITMENT_HEADER\n-from test_framework.key import CECKey, CPubKey\n-import time\n-import random\n-from binascii import hexlify\n \n # The versionbit bit used to signal activation of SegWit\n VB_WITNESS_BIT = 1\n@@ -21,7 +28,6 @@\n \n MAX_SIGOP_COST = 80000\n \n-\n # Calculate the virtual size of a witness block:\n # (base + witness/4)\n def get_virtual_size(witness_block):\n@@ -1944,6 +1950,5 @@ def run_test(self):\n         self.test_upgrade_after_activation(node_id=2)\n         self.test_witness_sigops()\n \n-\n if __name__ == '__main__':\n     SegWitTest().main()"
      },
      {
        "sha": "8171625f28354ca6834daf544233750b36c278e6",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -23,9 +23,14 @@\n \n from time import sleep\n \n-from test_framework.mininode import *\n+from test_framework.mininode import (\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_ping,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import p2p_port\n \n class TestNode(NodeConnCB):\n     def on_version(self, conn, message):"
      },
      {
        "sha": "9214fc38414c839cefc8c34fd2d4b0e15e2e8000",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -8,11 +8,18 @@\n soft-forks, and test that warning alerts are generated.\n \"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+import os\n import re\n+\n from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.mininode import (\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    msg_block,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import p2p_port\n \n VB_PERIOD = 144 # versionbits period length for regtest\n VB_THRESHOLD = 108 # versionbits activation threshold for regtest"
      },
      {
        "sha": "3c7548de7fed52ceef6c01b8ebfee49c6dfd5e20",
        "filename": "test/functional/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/preciousblock.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -8,8 +8,8 @@\n from test_framework.util import (\n     assert_equal,\n     connect_nodes_bi,\n-    sync_chain,\n     sync_blocks,\n+    sync_chain,\n )\n \n def unidirectional_node_sync_via_rpc(node_src, node_dest):"
      },
      {
        "sha": "77f6d4a0e5064bba4c4aff49341973646d1c24e8",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,9 +4,17 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the prioritisetransaction mining RPC.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+import time\n+\n from test_framework.mininode import COIN, MAX_BLOCK_BASE_SIZE\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    create_confirmed_utxos,\n+    create_lots_of_big_transactions,\n+    gen_return_txouts,\n+)\n \n class PrioritiseTransactionTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "15bac61a2b30eeef643c239119544b79359477c4",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -27,17 +27,18 @@\n addnode connect to generic DNS name\n \"\"\"\n \n-import socket\n import os\n+import socket\n \n-from test_framework.socks5 import Socks5Configuration, Socks5Command, Socks5Server, AddressType\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    PORT_MIN,\n-    PORT_RANGE,\n-    assert_equal,\n-)\n from test_framework.netutil import test_ipv6_local\n+from test_framework.socks5 import (\n+    AddressType,\n+    Socks5Command,\n+    Socks5Configuration,\n+    Socks5Server,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import PORT_MIN, PORT_RANGE, assert_equal\n \n RANGE_BEGIN = PORT_MIN + 2 * PORT_RANGE  # Start after p2p and rpc ports\n \n@@ -182,7 +183,7 @@ def networks_dict(d):\n         assert_equal(n1['onion']['proxy'], '%s:%i' % (self.conf2.addr))\n         assert_equal(n1['onion']['proxy_randomize_credentials'], False)\n         assert_equal(n1['onion']['reachable'], True)\n-        \n+\n         n2 = networks_dict(self.nodes[2].getnetworkinfo())\n         for net in ['ipv4','ipv6','onion']:\n             assert_equal(n2[net]['proxy'], '%s:%i' % (self.conf2.addr))"
      },
      {
        "sha": "2959f34116e8c0d38e994d30a70159e7933df360",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -9,10 +9,18 @@\n This test takes 30 mins or more (up to 2 hours)\n \"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-import time\n import os\n+import time\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_jsonrpc,\n+    connect_nodes,\n+    mine_large_block,\n+    sync_blocks,\n+)\n \n MIN_BLOCKS_TO_KEEP = 288\n \n@@ -21,7 +29,6 @@\n # compatible with pruning based on key creation time.\n TIMESTAMP_WINDOW = 2 * 60 * 60\n \n-\n def calc_usage(blockdir):\n     return sum(os.path.getsize(blockdir+f) for f in os.listdir(blockdir) if os.path.isfile(blockdir+f)) / (1024. * 1024.)\n "
      },
      {
        "sha": "97378801a1162c4e2fa40c36fe210403ced4b5e4",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -12,8 +12,14 @@\n    - getrawtransaction\n \"\"\"\n \n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    connect_nodes_bi,\n+)\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):"
      },
      {
        "sha": "c4013dab8b8fd3a9f23148d815a3d507c01fc179",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,8 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listreceivedbyaddress RPC.\"\"\"\n \n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import assert_array_result\n \n def get_sub_array_from_array(object_array, to_match):\n     '''"
      },
      {
        "sha": "9fefb5c73844423b5985288b83b0a7dbe57a4ba3",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -9,9 +9,10 @@\n - Stop the node and restart it with -reindex-chainstate. Verify that the node has reindexed up to block 3.\n \"\"\"\n \n+import time\n+\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n-import time\n \n class ReindexTest(BitcoinTestFramework):\n "
      },
      {
        "sha": "2952edd23b441a0268b6b20d84677624eb0de7be",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,10 +4,10 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RBF code.\"\"\"\n \n+from test_framework.mininode import *\n+from test_framework.script import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.script import *\n-from test_framework.mininode import *\n \n MAX_REPLACEMENT_LIMIT = 100\n "
      },
      {
        "sha": "f38dacc5c79d01ae84ed7d719fa15e60633770b6",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,14 +4,21 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from struct import *\n-from io import BytesIO\n-from codecs import encode\n-\n import http.client\n+import json\n import urllib.parse\n+from codecs import encode\n+from decimal import Decimal\n+from io import BytesIO\n+from struct import pack, unpack\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    connect_nodes_bi,\n+    hex_str_to_bytes,\n+)\n \n def deser_uint256(f):\n     r = 0"
      },
      {
        "sha": "155844c7962b7c85c8dbc3cc455c3eb8684fa32d",
        "filename": "test/functional/rpcbind_test.py",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcbind_test.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -7,9 +7,16 @@\n import socket\n import sys\n \n+from test_framework.netutil import addr_to_hex, all_interfaces, get_bind_addrs\n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n-from test_framework.util import *\n-from test_framework.netutil import *\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    get_datadir_path,\n+    get_rpc_proxy,\n+    rpc_port,\n+    rpc_url,\n+)\n \n class RPCBindTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "bd54df2742247020f364ce586155a9807f615257",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -5,10 +5,7 @@\n \"\"\"Test using named arguments for RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    assert_raises_jsonrpc,\n-)\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class NamedArgumentTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "9945aad8315d2f3449b62a891bcf3ed831d0fc01",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 37,
        "deletions": 5,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,13 +4,45 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the SegWit changeover logic.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n-from test_framework.address import script_to_p2sh, key_to_p2pkh\n-from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n+from decimal import Decimal\n from io import BytesIO\n \n+from test_framework.address import key_to_p2pkh, script_to_p2sh\n+from test_framework.mininode import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    FromHex,\n+    ToHex,\n+    sha256,\n+)\n+from test_framework.script import (\n+    OP_0,\n+    OP_1,\n+    OP_2,\n+    OP_CHECKMULTISIG,\n+    OP_CHECKSIG,\n+    OP_DUP,\n+    OP_EQUAL,\n+    OP_EQUALVERIFY,\n+    OP_HASH160,\n+    OP_TRUE,\n+    CScript,\n+    hash160,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    JSONRPCException,\n+    assert_equal,\n+    assert_raises_jsonrpc,\n+    bytes_to_hex_str,\n+    connect_nodes,\n+    hex_str_to_bytes,\n+    sync_blocks,\n+)\n+\n NODE_0 = 0\n NODE_2 = 2\n WIT_V0 = 0"
      },
      {
        "sha": "55e582fd1b72b47f952271f5e5517ce199282f37",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 17,
        "deletions": 4,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -73,11 +73,24 @@\n    Expect: disconnect.\n \"\"\"\n \n-from test_framework.mininode import *\n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase\n-\n+from test_framework.mininode import (\n+    CBlockHeader,\n+    CInv,\n+    NetworkThread,\n+    NodeConn,\n+    NodeConnCB,\n+    mininode_lock,\n+    msg_block,\n+    msg_getblocks,\n+    msg_getdata,\n+    msg_getheaders,\n+    msg_headers,\n+    msg_inv,\n+    msg_sendheaders,\n+)\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, p2p_port, sync_blocks, wait_until\n \n direct_fetch_response_time = 0.05\n "
      },
      {
        "sha": "f881d20353ffd7b1ebe11b4f91626562b0772b1d",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -5,8 +5,7 @@\n \"\"\"Test transaction signing using the signrawtransaction RPC.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-\n+from test_framework.util import JSONRPCException, assert_equal, assert_raises\n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -138,6 +137,5 @@ def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n \n-\n if __name__ == '__main__':\n     SignRawTransactionsTest().main()"
      },
      {
        "sha": "72e6654ecdeb84adc694f0c5763dcd8f18ec736b",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,10 +4,34 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n \n+import random\n+from decimal import Decimal\n+\n+from test_framework.mininode import (\n+    COIN,\n+    COutPoint,\n+    CTransaction,\n+    CTxIn,\n+    CTxOut,\n+    ToHex,\n+)\n+from test_framework.script import (\n+    OP_1,\n+    OP_2,\n+    OP_DROP,\n+    OP_EQUAL,\n+    OP_HASH160,\n+    OP_TRUE,\n+    CScript,\n+    hash160,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n-from test_framework.script import CScript, OP_1, OP_DROP, OP_2, OP_HASH160, OP_EQUAL, hash160, OP_TRUE\n-from test_framework.mininode import CTransaction, CTxIn, CTxOut, COutPoint, ToHex, COIN\n+from test_framework.util import (\n+    connect_nodes,\n+    satoshi_round,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n # Construct 2 trivial P2SH's and the ScriptSigs that spend them\n # So we can create many transactions without needing to spend"
      },
      {
        "sha": "a9e386151d3f04f546e77e8c91a46ddac286e2f8",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -523,6 +523,5 @@ def _get_uncovered_rpc_commands(self):\n \n         return all_cmds - covered_cmds\n \n-\n if __name__ == '__main__':\n     main()"
      },
      {
        "sha": "fbad7981235c9c2098d98e5cbc03df2d79e5d99d",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -5,7 +5,12 @@\n \"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    sync_blocks,\n+)\n \n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "4b8b8a4770d8679c0d2e86b183f2b52bc155e62c",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,8 +4,16 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there is a double-spend conflict.\"\"\"\n \n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    disconnect_nodes,\n+    find_output,\n+    sync_blocks,\n+)\n \n class TxnMallTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -27,7 +35,7 @@ def run_test(self):\n         for i in range(4):\n             assert_equal(self.nodes[i].getbalance(), starting_balance)\n             self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n-        \n+\n         # Assign coins to foo and bar accounts:\n         node0_address_foo = self.nodes[0].getnewaddress(\"foo\")\n         fund_foo_txid = self.nodes[0].sendfrom(\"\", node0_address_foo, 1219)\n@@ -64,7 +72,7 @@ def run_test(self):\n         # Create two spends using 1 50 BTC coin each\n         txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 40, 0)\n         txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n-        \n+\n         # Have node0 mine a block:\n         if (self.options.mine_block):\n             self.nodes[0].generate(1)\n@@ -93,7 +101,7 @@ def run_test(self):\n         else:\n             assert_equal(tx1[\"confirmations\"], 0)\n             assert_equal(tx2[\"confirmations\"], 0)\n-        \n+\n         # Now give doublespend and its parents to miner:\n         self.nodes[2].sendrawtransaction(fund_foo_tx[\"hex\"])\n         self.nodes[2].sendrawtransaction(fund_bar_tx[\"hex\"])"
      },
      {
        "sha": "2e95b4f3849d93f9600c1c5dd2a6a6e4e50020b9",
        "filename": "test/functional/uptime.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/uptime.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -11,7 +11,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n \n-\n class UptimeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -25,6 +24,5 @@ def _test_uptime(self):\n         self.nodes[0].setmocktime(int(time.time() + wait_time))\n         assert(self.nodes[0].uptime() >= wait_time)\n \n-\n if __name__ == '__main__':\n     UptimeTest().main()"
      },
      {
        "sha": "3b5fe586083f385ee5b4011ec35799dd3b311f10",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -78,54 +78,54 @@ def run_test(self):\n         for account in accounts:\n             address = node.getaccountaddress(account)\n             account_addresses[account] = address\n-            \n+\n             node.getnewaddress(account)\n             assert_equal(node.getaccount(address), account)\n             assert(address in node.getaddressesbyaccount(account))\n-            \n+\n             node.sendfrom(\"\", address, amount_to_send)\n-        \n+\n         node.generate(1)\n-        \n+\n         for i in range(len(accounts)):\n             from_account = accounts[i]\n             to_account = accounts[(i+1) % len(accounts)]\n             to_address = account_addresses[to_account]\n             node.sendfrom(from_account, to_address, amount_to_send)\n-        \n+\n         node.generate(1)\n-        \n+\n         for account in accounts:\n             address = node.getaccountaddress(account)\n             assert(address != account_addresses[account])\n             assert_equal(node.getreceivedbyaccount(account), 2)\n             node.move(account, \"\", node.getbalance(account))\n \n         node.generate(101)\n-        \n+\n         expected_account_balances = {\"\": 5200}\n         for account in accounts:\n             expected_account_balances[account] = 0\n-        \n+\n         assert_equal(node.listaccounts(), expected_account_balances)\n-        \n+\n         assert_equal(node.getbalance(\"\"), 5200)\n-        \n+\n         for account in accounts:\n             address = node.getaccountaddress(\"\")\n             node.setaccount(address, account)\n             assert(address in node.getaddressesbyaccount(account))\n             assert(address not in node.getaddressesbyaccount(\"\"))\n-        \n+\n         for account in accounts:\n             addresses = []\n             for x in range(10):\n                 addresses.append(node.getnewaddress())\n             multisig_address = node.addmultisigaddress(5, addresses, account)\n             node.sendfrom(\"\", multisig_address, 50)\n-        \n+\n         node.generate(101)\n-        \n+\n         for account in accounts:\n             assert_equal(node.getbalance(account), 50)\n "
      },
      {
        "sha": "6f4acd0564128e46ec6b33075e572bb8c9714630",
        "filename": "test/functional/wallet-dump.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-dump.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -9,7 +9,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n-\n def read_dump(file_name, addrs, hd_master_addr_old):\n     \"\"\"\n     Read the given dump, count the addrs that match, count change and reserve."
      },
      {
        "sha": "4772f170afe74b7fd7106d08cb26f5be7b291ee8",
        "filename": "test/functional/wallet-encryption.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-encryption.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -7,10 +7,7 @@\n import time\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    assert_raises_jsonrpc,\n-)\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class WalletEncryptionTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "3eddb4553c31672c3aad89aeb591c0139b7073cc",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -4,13 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test Hierarchical Deterministic wallet function.\"\"\"\n \n-from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (\n-    assert_equal,\n-    connect_nodes_bi,\n-)\n import shutil\n \n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, connect_nodes_bi\n+\n class WalletHDTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.setup_clean_chain = True"
      },
      {
        "sha": "81b3b46ce7a50628a410c29a1b6178116d1c69d2",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -3,8 +3,21 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet.\"\"\"\n+\n+import time\n+from decimal import Decimal\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_array_result,\n+    assert_equal,\n+    assert_fee_amount,\n+    assert_raises_jsonrpc,\n+    connect_nodes_bi,\n+    count_bytes,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n class WalletTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "996aca6411ff56287bc51d426c9ee44a4a3447ec",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -30,11 +30,19 @@\n Shutdown again, restore using importwallet,\n and confirm again balances are correct.\n \"\"\"\n-from random import randint\n+\n+import os\n import shutil\n+from decimal import Decimal\n+from random import randint\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes,\n+    sync_blocks,\n+    sync_mempools,\n+)\n \n class WalletBackupTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -190,6 +198,5 @@ def run_test(self):\n         assert_equal(self.nodes[1].getbalance(), balance1)\n         assert_equal(self.nodes[2].getbalance(), balance2)\n \n-\n if __name__ == '__main__':\n     WalletBackupTest().main()"
      },
      {
        "sha": "634a44adcdecc0cd9a85ca50184cda757aa64896",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -14,10 +14,9 @@\n   transactions are still available, but that the unconfirmed transaction has\n   been zapped.\n \"\"\"\n+\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import (assert_equal,\n-                                 assert_raises_jsonrpc,\n-                                 )\n+from test_framework.util import assert_equal, assert_raises_jsonrpc\n \n class ZapWalletTXesTest (BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "989c78832659f15886bc25d808107180c11d1b96",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9514e9e2fdddb9979b3e75b9a413128357eb1e39/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=9514e9e2fdddb9979b3e75b9a413128357eb1e39",
        "patch": "@@ -3,16 +3,15 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the ZMQ API.\"\"\"\n+\n import configparser\n import os\n import struct\n \n from test_framework.test_framework import BitcoinTestFramework, SkipTest\n-from test_framework.util import (assert_equal,\n-                                 bytes_to_hex_str,\n-                                 )\n+from test_framework.util import assert_equal, bytes_to_hex_str\n \n-class ZMQTest (BitcoinTestFramework):\n+class ZMQTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n "
      }
    ]
  }
]