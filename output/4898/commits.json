[
  {
    "sha": "21255cd57ea7170c67ac1e924f49cf3664d97162",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTI1NWNkNTdlYTcxNzBjNjdhYzFlOTI0ZjQ5Y2YzNjY0ZDk3MTYy",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T15:05:45Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T18:55:36Z"
      },
      "message": "compile with C++0x support",
      "tree": {
        "sha": "d81576143e0b7fc663f398542b220497c0ea0386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d81576143e0b7fc663f398542b220497c0ea0386"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21255cd57ea7170c67ac1e924f49cf3664d97162",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21255cd57ea7170c67ac1e924f49cf3664d97162",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21255cd57ea7170c67ac1e924f49cf3664d97162",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21255cd57ea7170c67ac1e924f49cf3664d97162/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa1c81b945870dfa4cda469083d4b3e2fa8d459",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa1c81b945870dfa4cda469083d4b3e2fa8d459",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa1c81b945870dfa4cda469083d4b3e2fa8d459"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 116,
      "deletions": 0
    },
    "files": [
      {
        "sha": "16962eb04d605220f683db3c30b40224bc2e92e6",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21255cd57ea7170c67ac1e924f49cf3664d97162/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21255cd57ea7170c67ac1e924f49cf3664d97162/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=21255cd57ea7170c67ac1e924f49cf3664d97162",
        "patch": "@@ -308,6 +308,9 @@ fi\n dnl Require little endian\n AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n \n+dnl Enable C++0x\n+AX_CXX_COMPILE_STDCXX_0X\n+\n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n "
      },
      {
        "sha": "d7e8f39ec2e9f784b1736393e17e8bd559079675",
        "filename": "src/m4/ax_cxx_compile_stdcxx_0x.m4",
        "status": "added",
        "additions": 113,
        "deletions": 0,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21255cd57ea7170c67ac1e924f49cf3664d97162/src/m4/ax_cxx_compile_stdcxx_0x.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21255cd57ea7170c67ac1e924f49cf3664d97162/src/m4/ax_cxx_compile_stdcxx_0x.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_cxx_compile_stdcxx_0x.m4?ref=21255cd57ea7170c67ac1e924f49cf3664d97162",
        "patch": "@@ -0,0 +1,113 @@\n+# ============================================================================\n+#  http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_0x.html\n+# ============================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX_0X\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the C++0x\n+#   standard.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 7\n+\n+AU_ALIAS([AC_CXX_COMPILE_STDCXX_0X], [AX_CXX_COMPILE_STDCXX_0X])\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX_0X], [\n+  AC_CACHE_CHECK(if g++ supports C++0x features without additional flags,\n+  ax_cv_cxx_compile_cxx0x_native,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  AC_TRY_COMPILE([\n+  template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check<check<bool>> right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check<int> check_type;\n+    check_type c;\n+    check_type&& cr = static_cast<check_type&&>(c);],,\n+  ax_cv_cxx_compile_cxx0x_native=yes, ax_cv_cxx_compile_cxx0x_native=no)\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=c++0x,\n+  ax_cv_cxx_compile_cxx0x_cxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=c++0x\"\n+  AC_TRY_COMPILE([\n+  template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check<check<bool>> right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check<int> check_type;\n+    check_type c;\n+    check_type&& cr = static_cast<check_type&&>(c);],,\n+  ax_cv_cxx_compile_cxx0x_cxx=yes, ax_cv_cxx_compile_cxx0x_cxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  AC_CACHE_CHECK(if g++ supports C++0x features with -std=gnu++0x,\n+  ax_cv_cxx_compile_cxx0x_gxx,\n+  [AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+  ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\n+  AC_TRY_COMPILE([\n+  template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check<check<bool>> right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check<int> check_type;\n+    check_type c;\n+    check_type&& cr = static_cast<check_type&&>(c);],,\n+  ax_cv_cxx_compile_cxx0x_gxx=yes, ax_cv_cxx_compile_cxx0x_gxx=no)\n+  CXXFLAGS=\"$ac_save_CXXFLAGS\"\n+  AC_LANG_RESTORE\n+  ])\n+\n+  if test \"$ax_cv_cxx_compile_cxx0x_native\" = yes; then\n+    AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n+  elif test \"$ax_cv_cxx_compile_cxx0x_cxx\" = yes; then\n+    AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n+    CXXFLAGS=\"$CXXFLAGS -std=c++0x\"\n+  elif test \"$ax_cv_cxx_compile_cxx0x_gxx\" = yes; then\n+    AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n+    CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\n+  else\n+    AC_MSG_ERROR([*** A compiler with support for C++0x language features is required.])\n+  fi\n+])\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "2cece28cc0df0a907cd2a6ca307e764715b1cab1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2VjZTI4Y2MwZGYwYTkwN2NkMmE2Y2EzMDdlNzY0NzE1YjFjYWIx",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T14:42:40Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T18:55:43Z"
      },
      "message": "use std::unique_ptr",
      "tree": {
        "sha": "54bea9dbd044b376d046579e5a44c4c63bc0de34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54bea9dbd044b376d046579e5a44c4c63bc0de34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2cece28cc0df0a907cd2a6ca307e764715b1cab1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cece28cc0df0a907cd2a6ca307e764715b1cab1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2cece28cc0df0a907cd2a6ca307e764715b1cab1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cece28cc0df0a907cd2a6ca307e764715b1cab1/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21255cd57ea7170c67ac1e924f49cf3664d97162",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21255cd57ea7170c67ac1e924f49cf3664d97162",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21255cd57ea7170c67ac1e924f49cf3664d97162"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "ada03aef051b33cbc09d99b7dde8a0863cf34b63",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "patch": "@@ -16,6 +16,7 @@\n #include \"wallet.h\"\n #endif\n \n+#include <memory>\n #include <boost/thread.hpp>\n \n using namespace std;\n@@ -78,7 +79,7 @@ class TxPriorityCompare\n CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     // Create new block\n-    auto_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n+    std::unique_ptr<CBlockTemplate> pblocktemplate(new CBlockTemplate());\n     if(!pblocktemplate.get())\n         return NULL;\n     CBlock *pblock = &pblocktemplate->block; // pointer for convenience\n@@ -451,7 +452,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             unsigned int nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n             CBlockIndex* pindexPrev = chainActive.Tip();\n \n-            auto_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n+            std::unique_ptr<CBlockTemplate> pblocktemplate(CreateNewBlockWithKey(reservekey));\n             if (!pblocktemplate.get())\n             {\n                 LogPrintf(\"Error in BitcoinMiner: Keypool ran out, please call keypoolrefill before restarting the mining thread\\n\");"
      },
      {
        "sha": "72ba7677994440b11f4fb5e67f5a3da0f65ced87",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 27,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "patch": "@@ -7,6 +7,7 @@\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include <memory>\n #include <boost/test/unit_test.hpp>\n \n BOOST_AUTO_TEST_SUITE(miner_tests)\n@@ -50,15 +51,16 @@ struct {\n BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    CBlockTemplate *pblocktemplate;\n+    std::unique_ptr<CBlockTemplate> pblocktemplate;\n     CMutableTransaction tx,tx2;\n     CScript script;\n     uint256 hash;\n \n     LOCK(cs_main);\n \n     // Simple block creation, nothing special yet:\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n \n     // We can't make transactions until we have inputs\n     // Therefore, load 100 blocks :)\n@@ -83,11 +85,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n-    delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n \n     // block sigops > limit: 1000 CHECKMULTISIG + 1\n     tx.vin.resize(1);\n@@ -104,8 +105,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     mempool.clear();\n \n     // block size > limit\n@@ -124,15 +125,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n         tx.vin[0].prevout.hash = hash;\n     }\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     mempool.clear();\n \n     // orphan in mempool\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     mempool.clear();\n \n     // child with higher priority than parent\n@@ -149,8 +150,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     mempool.clear();\n \n     // coinbase in mempool\n@@ -160,8 +161,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     mempool.clear();\n \n     // invalid (pre-p2sh) txn in mempool\n@@ -178,8 +179,8 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     mempool.clear();\n \n     // double spend txn pair in mempool\n@@ -192,18 +193,18 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     mempool.clear();\n \n     // subsidy changing\n     int nHeight = chainActive.Height();\n     chainActive.Tip()->nHeight = 209999;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     chainActive.Tip()->nHeight = 210000;\n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     chainActive.Tip()->nHeight = nHeight;\n \n     // non-final txs in mempool\n@@ -234,11 +235,11 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n     BOOST_CHECK(!IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n \n     // Neither tx should have make it into the template.\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n-    delete pblocktemplate;\n \n     // However if we advance height and time by one, both will.\n     chainActive.Tip()->nHeight++;\n@@ -247,9 +248,9 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n     BOOST_CHECK(IsFinalTx(tx2));\n \n-    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    pblocktemplate.reset(CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK(pblocktemplate != nullptr);\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n-    delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);"
      },
      {
        "sha": "8744faacf8a7436edfe41d98959a00f760bd6b20",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "patch": "@@ -360,12 +360,11 @@ CTxMemPool::CTxMemPool(const CFeeRate& _minRelayFee) :\n     // to wait a day or two to save a fraction of a penny in fees.\n     // Confirmation times for very-low-fee transactions that take more\n     // than an hour or three to confirm are highly variable.\n-    minerPolicyEstimator = new CMinerPolicyEstimator(25);\n+    minerPolicyEstimator.reset(new CMinerPolicyEstimator(25));\n }\n \n CTxMemPool::~CTxMemPool()\n {\n-    delete minerPolicyEstimator;\n }\n \n void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)"
      },
      {
        "sha": "7fecbcc486f5371474ce4236a45fb39b77b518c1",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "patch": "@@ -7,6 +7,7 @@\n #define BITCOIN_TXMEMPOOL_H\n \n #include <list>\n+#include <memory>\n \n #include \"coins.h\"\n #include \"core.h\"\n@@ -66,7 +67,7 @@ class CTxMemPool\n private:\n     bool fSanityCheck; // Normally false, true if -checkmempool or -regtest\n     unsigned int nTransactionsUpdated;\n-    CMinerPolicyEstimator* minerPolicyEstimator;\n+    std::unique_ptr<CMinerPolicyEstimator> minerPolicyEstimator;\n \n     CFeeRate minRelayFee; // Passed to constructor to avoid dependency on main\n     uint64_t totalTxSize; // sum of all mempool tx' byte sizes"
      },
      {
        "sha": "a90dc5f171222b1346f1830b3fdbdd83e4abf6b7",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "patch": "@@ -15,6 +15,7 @@\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n \n+#include <memory>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/thread.hpp>\n "
      },
      {
        "sha": "89d06950d0fc0afb6ad51a9ba7748bf70053e165",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2cece28cc0df0a907cd2a6ca307e764715b1cab1/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "patch": "@@ -13,6 +13,7 @@\n #include \"util.h\"\n #include \"wallet.h\"\n \n+#include <memory>\n #include <boost/filesystem.hpp>\n #include <boost/foreach.hpp>\n #include <boost/thread.hpp>\n@@ -928,7 +929,7 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n \n     bool fSuccess = allOK;\n-    Db* pdbCopy = new Db(&dbenv.dbenv, 0);\n+    std::unique_ptr<Db> pdbCopy(new Db(&dbenv.dbenv, 0));\n     int ret = pdbCopy->open(NULL,               // Txn pointer\n                             filename.c_str(),   // Filename\n                             \"main\",             // Logical db name\n@@ -969,7 +970,6 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     }\n     ptxn->commit(0);\n     pdbCopy->close(0);\n-    delete pdbCopy;\n \n     return fSuccess;\n }"
      }
    ]
  },
  {
    "sha": "3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTVkYmYxMWZhNmZiYzhmOGYwYjljYzI3ZmRjY2EyMTNiMzY3NzAz",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T16:47:05Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T18:55:50Z"
      },
      "message": "replace boost::assign facilities with initializer lists",
      "tree": {
        "sha": "688f807593567564e2e7444c205dad48c6398800",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/688f807593567564e2e7444c205dad48c6398800"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2cece28cc0df0a907cd2a6ca307e764715b1cab1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2cece28cc0df0a907cd2a6ca307e764715b1cab1"
      }
    ],
    "stats": {
      "total": 163,
      "additions": 70,
      "deletions": 93
    },
    "files": [
      {
        "sha": "2101a88f3089d848c759afa94b74831e7230568d",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -15,11 +15,9 @@\n #include \"core_io.h\"\n \n #include <stdio.h>\n-#include <boost/assign/list_of.hpp>\n #include <boost/algorithm/string.hpp>\n \n using namespace std;\n-using namespace boost::assign;\n \n static bool fCreateBlank;\n static map<string,UniValue> registers;\n@@ -372,7 +370,11 @@ static void MutateTxSign(CMutableTransaction& tx, const string& flagStr)\n             if (!prevOut.isObject())\n                 throw runtime_error(\"expected prevtxs internal object\");\n \n-            map<string,UniValue::VType> types = map_list_of(\"txid\", UniValue::VSTR)(\"vout\",UniValue::VNUM)(\"scriptPubKey\",UniValue::VSTR);\n+            map<string,UniValue::VType> types = {\n+                {\"txid\", UniValue::VSTR},\n+                {\"vout\",UniValue::VNUM},\n+                {\"scriptPubKey\", UniValue::VSTR}\n+            };\n             if (!prevOut.checkObject(types))\n                 throw runtime_error(\"prevtxs internal object typecheck fail\");\n "
      },
      {
        "sha": "b69a2d2265d8b96f67d5efd5828a538f9226bce8",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -10,10 +10,7 @@\n \n #include <assert.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n using namespace std;\n-using namespace boost::assign;\n \n struct SeedSpec6 {\n     uint8_t addr[16];\n@@ -101,11 +98,11 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitnodes.io\", \"seed.bitnodes.io\"));\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(0);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(5);\n-        base58Prefixes[SECRET_KEY] =     list_of(128);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x88)(0xB2)(0x1E);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x88)(0xAD)(0xE4);\n+        base58Prefixes[PUBKEY_ADDRESS] = {0};\n+        base58Prefixes[SCRIPT_ADDRESS] = {5};\n+        base58Prefixes[SECRET_KEY] =     {128};\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};\n \n         convertSeed6(vFixedSeeds, pnSeed6_main, ARRAYLEN(pnSeed6_main));\n \n@@ -157,11 +154,11 @@ class CTestNetParams : public CMainParams {\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"testnet-seed.bluematt.me\"));\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.schildbach.de\", \"testnet-seed.bitcoin.schildbach.de\"));\n \n-        base58Prefixes[PUBKEY_ADDRESS] = list_of(111);\n-        base58Prefixes[SCRIPT_ADDRESS] = list_of(196);\n-        base58Prefixes[SECRET_KEY]     = list_of(239);\n-        base58Prefixes[EXT_PUBLIC_KEY] = list_of(0x04)(0x35)(0x87)(0xCF);\n-        base58Prefixes[EXT_SECRET_KEY] = list_of(0x04)(0x35)(0x83)(0x94);\n+        base58Prefixes[PUBKEY_ADDRESS] = {111};\n+        base58Prefixes[SCRIPT_ADDRESS] = {196};\n+        base58Prefixes[SECRET_KEY]     = {239};\n+        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};\n+        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};\n \n         convertSeed6(vFixedSeeds, pnSeed6_test, ARRAYLEN(pnSeed6_test));\n "
      },
      {
        "sha": "a3ac92ff32925f8e2750acfd0535a98e8c4d2a7a",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -9,10 +9,6 @@\n \n #include <assert.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n-using namespace boost::assign;\n-\n //\n // Main network\n //"
      },
      {
        "sha": "b95aef4c0c801d5f5787ddbd16b2994212710bc8",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 25,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -9,7 +9,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/foreach.hpp>\n \n namespace Checkpoints {\n@@ -37,22 +36,21 @@ namespace Checkpoints {\n     //   (no blocks before with a timestamp after, none after with\n     //    timestamp before)\n     // + Contains no strange transactions\n-    static MapCheckpoints mapCheckpoints =\n-        boost::assign::map_list_of\n-        ( 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\"))\n-        ( 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\"))\n-        ( 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\"))\n-        (105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\"))\n-        (134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\"))\n-        (168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\"))\n-        (193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\"))\n-        (210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\"))\n-        (216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\"))\n-        (225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\"))\n-        (250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\"))\n-        (279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\"))\n-        (295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\"))\n-        ;\n+    static MapCheckpoints mapCheckpoints = {\n+        { 11111, uint256(\"0x0000000069e244f73d78e8fd29ba2fd2ed618bd6fa2ee92559f542fdb26e7c1d\")},\n+        { 33333, uint256(\"0x000000002dd5588a74784eaa7ab0507a18ad16a236e7b1ce69f00d7ddfb5d0a6\")},\n+        { 74000, uint256(\"0x0000000000573993a3c9e41ce34471c079dcf5f52a0e824a81e7f953b8661a20\")},\n+        {105000, uint256(\"0x00000000000291ce28027faea320c8d2b054b2e0fe44a773f3eefb151d6bdc97\")},\n+        {134444, uint256(\"0x00000000000005b12ffd4cd315cd34ffd4a594f430ac814c91184a0d42d2b0fe\")},\n+        {168000, uint256(\"0x000000000000099e61ea72015e79632f216fe6cb33d7899acb35b75c8303b763\")},\n+        {193000, uint256(\"0x000000000000059f452a5f7340de6682a977387c17010ff6e6c3bd83ca8b1317\")},\n+        {210000, uint256(\"0x000000000000048b95347e83192f69cf0366076336c639f9b7228e9ba171342e\")},\n+        {216116, uint256(\"0x00000000000001b4f4b433e81ee46494af945cf96014816a4e2370f11b23df4e\")},\n+        {225430, uint256(\"0x00000000000001c108384350f74090433e7fcf79a606b8e797f065b130575932\")},\n+        {250000, uint256(\"0x000000000000003887df1f29024b06fc2200b55f8af8f35453d7be294df2d214\")},\n+        {279000, uint256(\"0x0000000000000001ae8c72a0b0c301f67e3afca10e819efa9041e458e9bd7e40\")},\n+        {295000, uint256(\"0x00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983\")},\n+    };\n     static const CCheckpointData data = {\n         &mapCheckpoints,\n         1397080064, // * UNIX timestamp of last checkpoint block\n@@ -61,21 +59,19 @@ namespace Checkpoints {\n         60000.0     // * estimated number of transactions per day after checkpoint\n     };\n \n-    static MapCheckpoints mapCheckpointsTestnet =\n-        boost::assign::map_list_of\n-        ( 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\"))\n-        ;\n+    static MapCheckpoints mapCheckpointsTestnet = {\n+        { 546, uint256(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")},\n+    };\n     static const CCheckpointData dataTestnet = {\n         &mapCheckpointsTestnet,\n         1337966069,\n         1488,\n         300\n     };\n \n-    static MapCheckpoints mapCheckpointsRegtest =\n-        boost::assign::map_list_of\n-        ( 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\"))\n-        ;\n+    static MapCheckpoints mapCheckpointsRegtest = {\n+        { 0, uint256(\"0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\")}\n+    };\n     static const CCheckpointData dataRegtest = {\n         &mapCheckpointsRegtest,\n         0,"
      },
      {
        "sha": "c8a74643f179cd4ee9662520145bef22e68cdddc",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -8,7 +8,6 @@\n #include \"script/script.h\"\n #include \"util.h\"\n \n-#include <boost/assign/list_of.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/algorithm/string/split.hpp>"
      },
      {
        "sha": "1d14756b09cc676120117f18b0866cccb764ef15",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -16,8 +16,6 @@\n #include \"main.h\"\n #include \"wallet.h\"\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n-\n #include <QApplication>\n #include <QCheckBox>\n #include <QCursor>\n@@ -406,11 +404,12 @@ QString CoinControlDialog::getPriorityLabel(const CTxMemPool& pool, double dPrio\n {\n     // confirmations -> textual description\n     typedef std::map<unsigned int, QString> PriorityDescription;\n-    const static PriorityDescription priorityDescriptions = boost::assign::map_list_of\n-        (1, tr(\"highest\"))(2, tr(\"higher\"))(3, tr(\"high\"))\n-        (5, tr(\"medium-high\"))(6, tr(\"medium\"))\n-        (10, tr(\"low-medium\"))(15, tr(\"low\"))\n-        (20, tr(\"lower\"));\n+    const static PriorityDescription priorityDescriptions = {\n+        {1, tr(\"highest\")}, {2, tr(\"higher\")}, {3, tr(\"high\")},\n+        {5, tr(\"medium-high\")}, {6, tr(\"medium\")},\n+        {10, tr(\"low-medium\")}, {15, tr(\"low\")},\n+        {20, tr(\"lower\")},\n+    };\n \n     BOOST_FOREACH(const PriorityDescription::value_type& i, priorityDescriptions)\n     {"
      },
      {
        "sha": "401802b4dc330319de9ba7da62a8ba6213154afd",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -19,8 +19,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n-\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n@@ -584,7 +582,7 @@ Value estimatefee(const Array& params, bool fHelp)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type));\n+    RPCTypeCheck(params, {int_type});\n \n     int nBlocks = params[0].get_int();\n     if (nBlocks < 1)\n@@ -616,7 +614,7 @@ Value estimatepriority(const Array& params, bool fHelp)\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(int_type));\n+    RPCTypeCheck(params, {int_type});\n \n     int nBlocks = params[0].get_int();\n     if (nBlocks < 1)"
      },
      {
        "sha": "d8f25a0e6aa7d2be68984b890f27ecfddaaebb33",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -18,12 +18,10 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n using namespace std;\n "
      },
      {
        "sha": "6f0cd677d7932b32206cf68f002123e5acb6acc8",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -21,13 +21,11 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n \n void ScriptPubKeyToJSON(const CScript& scriptPubKey, Object& out, bool fIncludeHex)\n@@ -229,7 +227,7 @@ Value listunspent(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(int_type)(int_type)(array_type));\n+    RPCTypeCheck(params, {int_type, int_type, array_type});\n \n     int nMinDepth = 1;\n     if (params.size() > 0)\n@@ -333,7 +331,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"address\\\\\\\":0.01}\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(array_type)(obj_type));\n+    RPCTypeCheck(params, {array_type, obj_type});\n \n     Array inputs = params[0].get_array();\n     Object sendTo = params[1].get_obj();\n@@ -428,7 +426,7 @@ Value decoderawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decoderawtransaction\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, {str_type});\n \n     CTransaction tx;\n \n@@ -466,7 +464,7 @@ Value decodescript(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type));\n+    RPCTypeCheck(params, {str_type});\n \n     Object r;\n     CScript script;\n@@ -532,7 +530,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"signrawtransaction\", \"\\\"myhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(array_type)(array_type)(str_type), true);\n+    RPCTypeCheck(params, {str_type, array_type, array_type, str_type}, true);\n \n     vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n@@ -602,7 +600,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n             Object prevOut = p.get_obj();\n \n-            RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type));\n+            RPCTypeCheck(prevOut, {{\"txid\", str_type}, {\"vout\", int_type}, {\"scriptPubKey\", str_type}});\n \n             uint256 txid = ParseHashO(prevOut, \"txid\");\n \n@@ -632,7 +630,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             // if redeemScript given and not using the local wallet (private keys\n             // given), add redeemScript to the tempKeystore so it can be signed:\n             if (fGivenKeys && scriptPubKey.IsPayToScriptHash()) {\n-                RPCTypeCheck(prevOut, map_list_of(\"txid\", str_type)(\"vout\", int_type)(\"scriptPubKey\", str_type)(\"redeemScript\",str_type));\n+                RPCTypeCheck(prevOut, {{\"txid\", str_type}, {\"vout\", int_type}, {\"scriptPubKey\", str_type}, {\"redeemScript\", str_type}});\n                 Value v = find_value(prevOut, \"redeemScript\");\n                 if (!(v == Value::null)) {\n                     vector<unsigned char> rsData(ParseHexV(v, \"redeemScript\"));\n@@ -651,15 +649,14 @@ Value signrawtransaction(const Array& params, bool fHelp)\n \n     int nHashType = SIGHASH_ALL;\n     if (params.size() > 3 && params[3].type() != null_type) {\n-        static map<string, int> mapSigHashValues =\n-            boost::assign::map_list_of\n-            (string(\"ALL\"), int(SIGHASH_ALL))\n-            (string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY))\n-            (string(\"NONE\"), int(SIGHASH_NONE))\n-            (string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY))\n-            (string(\"SINGLE\"), int(SIGHASH_SINGLE))\n-            (string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n-            ;\n+        static map<string, int> mapSigHashValues = {\n+            {string(\"ALL\"), int(SIGHASH_ALL)},\n+            {string(\"ALL|ANYONECANPAY\"), int(SIGHASH_ALL|SIGHASH_ANYONECANPAY)},\n+            {string(\"NONE\"), int(SIGHASH_NONE)},\n+            {string(\"NONE|ANYONECANPAY\"), int(SIGHASH_NONE|SIGHASH_ANYONECANPAY)},\n+            {string(\"SINGLE\"), int(SIGHASH_SINGLE)},\n+            {string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY)},\n+        };\n         string strHashType = params[3].get_str();\n         if (mapSigHashValues.count(strHashType))\n             nHashType = mapSigHashValues[strHashType];\n@@ -722,7 +719,7 @@ Value sendrawtransaction(const Array& params, bool fHelp)\n             + HelpExampleRpc(\"sendrawtransaction\", \"\\\"signedhex\\\"\")\n         );\n \n-    RPCTypeCheck(params, list_of(str_type)(bool_type));\n+    RPCTypeCheck(params, {str_type, bool_type});\n \n     // parse hex string from parameter\n     CTransaction tx;"
      },
      {
        "sha": "d635e585a7389f257358fcbd11cea55fe78639eb",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -46,13 +46,13 @@ bool IsRPCRunning();\n /*\n   Type-check arguments; throws JSONRPCError if wrong type given. Does not check that\n   the right number of arguments are passed, just that any passed are the correct type.\n-  Use like:  RPCTypeCheck(params, boost::assign::list_of(str_type)(int_type)(obj_type));\n+  Use like:  RPCTypeCheck(params, {str_type, int_type, obj_type});\n */\n void RPCTypeCheck(const json_spirit::Array& params,\n                   const std::list<json_spirit::Value_type>& typesExpected, bool fAllowNull=false);\n /*\n   Check for expected keys/value types in an Object.\n-  Use like: RPCTypeCheck(object, boost::assign::map_list_of(\"name\", str_type)(\"value\", int_type));\n+  Use like: RPCTypeCheck(object, {{\"name\", str_type}, {\"value\", int_type}});\n */\n void RPCTypeCheck(const json_spirit::Object& o,\n                   const std::map<std::string, json_spirit::Value_type>& typesExpected, bool fAllowNull=false);"
      },
      {
        "sha": "35db21ee63c30b92e2ff7d6fee42486042210391",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -16,13 +16,11 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp>\n #include \"json/json_spirit_utils.h\"\n #include \"json/json_spirit_value.h\"\n \n using namespace std;\n using namespace boost;\n-using namespace boost::assign;\n using namespace json_spirit;\n \n int64_t nWalletUnlockTime;\n@@ -1839,9 +1837,9 @@ Value lockunspent(const Array& params, bool fHelp)\n         );\n \n     if (params.size() == 1)\n-        RPCTypeCheck(params, list_of(bool_type));\n+        RPCTypeCheck(params, {bool_type});\n     else\n-        RPCTypeCheck(params, list_of(bool_type)(array_type));\n+        RPCTypeCheck(params, {bool_type, array_type});\n \n     bool fUnlock = params[0].get_bool();\n \n@@ -1858,7 +1856,7 @@ Value lockunspent(const Array& params, bool fHelp)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected object\");\n         const Object& o = output.get_obj();\n \n-        RPCTypeCheck(o, map_list_of(\"txid\", str_type)(\"vout\", int_type));\n+        RPCTypeCheck(o, {{\"txid\", str_type}, {\"vout\", int_type}});\n \n         string txid = find_value(o, \"txid\").get_str();\n         if (!IsHex(txid))"
      },
      {
        "sha": "88b61bbf8a513eb47fc42fe562479bc33b5184ff",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 8,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "patch": "@@ -18,7 +18,6 @@\n \n #include <stdint.h>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n #include <boost/date_time/posix_time/posix_time_types.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n@@ -113,16 +112,14 @@ static bool CheckNBits(unsigned int nbits1, int64_t time1, unsigned int nbits2,\n \n BOOST_AUTO_TEST_CASE(DoS_checknbits)\n {\n-    using namespace boost::assign; // for 'map_list_of()'\n-\n     // Timestamps,nBits from the bitcoin block chain.\n     // These are the block-chain checkpoint blocks\n     typedef std::map<int64_t, unsigned int> BlockData;\n-    BlockData chainData =\n-        map_list_of(1239852051,486604799)(1262749024,486594666)\n-        (1279305360,469854461)(1280200847,469830746)(1281678674,469809688)\n-        (1296207707,453179945)(1302624061,453036989)(1309640330,437004818)\n-        (1313172719,436789733);\n+    BlockData chainData = {\n+        {1239852051,486604799}, {1262749024,486594666}, {1279305360,469854461},\n+        {1280200847,469830746}, {1281678674,469809688}, {1296207707,453179945},\n+        {1302624061,453036989}, {1309640330,437004818}, {1313172719,436789733},\n+    };\n \n     // Make sure CheckNBits considers every combination of block-chain-lock-in-points\n     // \"sane\":"
      }
    ]
  },
  {
    "sha": "a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmY1NWFkYmVkZGJjZGViZDJhN2FiZmQ0ZjJlN2U5ZDMxMDE1Mzk3",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T08:29:56Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T18:55:57Z"
      },
      "message": "fixed issue with boost scoped enums in C++11",
      "tree": {
        "sha": "491d6a90c58bc7bc20506033ee9bd2ed33a96949",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/491d6a90c58bc7bc20506033ee9bd2ed33a96949"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e5dbf11fa6fbc8f8f0b9cc27fdcca213b367703"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "030aa529cb8772e4acd441f0c962b1466015bc63",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397",
        "patch": "@@ -3,6 +3,14 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+// prevents undefined reference to boost::filesystem::detail::copy_file with C++11\n+#include <boost/version.hpp>\n+#if BOOST_VERSION >= 105100\n+  #define BOOST_NO_CXX11_SCOPED_ENUMS\n+#else\n+  #define BOOST_NO_SCOPED_ENUMS // deprecated as of BOOST 1.51\n+#endif\n+\n #include \"walletdb.h\"\n \n #include \"base58.h\""
      }
    ]
  },
  {
    "sha": "8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTc1NmMyNWI0ZDBlMzZlNzA2MTQ2OGQzZjFhYTg2ODc4MjVjZjhk",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-04-08T01:03:27Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T19:03:12Z"
      },
      "message": "compile with C++11 support",
      "tree": {
        "sha": "40f955b85281716de18338acd7ffc76dd77dd11c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40f955b85281716de18338acd7ffc76dd77dd11c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a756c25b4d0e36e7061468d3f1aa8687825cf8d/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2f55adbeddbcdebd2a7abfd4f2e7e9d31015397"
      }
    ],
    "stats": {
      "total": 134,
      "additions": 134,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f2221ce0ad2a4161b5bca3a2a21d7ff8159fd975",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a756c25b4d0e36e7061468d3f1aa8687825cf8d/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a756c25b4d0e36e7061468d3f1aa8687825cf8d/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
        "patch": "@@ -125,6 +125,7 @@ AC_PROG_CXX\n AC_PROG_CC\n AC_PROG_CPP\n AC_PROG_CXXCPP\n+AX_CXX_COMPILE_STDCXX_11(noext,mandatory)\n AC_PROG_INSTALL\n AC_PROG_OBJC\n AC_PROG_LN_S"
      },
      {
        "sha": "af37acdb5ca2c9f76bffdc1a12edfb862282af56",
        "filename": "src/m4/ax_cxx_compile_stdcxx_11.m4",
        "status": "added",
        "additions": 133,
        "deletions": 0,
        "changes": 133,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a756c25b4d0e36e7061468d3f1aa8687825cf8d/src/m4/ax_cxx_compile_stdcxx_11.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a756c25b4d0e36e7061468d3f1aa8687825cf8d/src/m4/ax_cxx_compile_stdcxx_11.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_cxx_compile_stdcxx_11.m4?ref=8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
        "patch": "@@ -0,0 +1,133 @@\n+# ============================================================================\n+#  http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx_11.html\n+# ============================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_CXX_COMPILE_STDCXX_11([ext|noext],[mandatory|optional])\n+#\n+# DESCRIPTION\n+#\n+#   Check for baseline language coverage in the compiler for the C++11\n+#   standard; if necessary, add switches to CXXFLAGS to enable support.\n+#\n+#   The first argument, if specified, indicates whether you insist on an\n+#   extended mode (e.g. -std=gnu++11) or a strict conformance mode (e.g.\n+#   -std=c++11).  If neither is specified, you get whatever works, with\n+#   preference for an extended mode.\n+#\n+#   The second argument, if specified 'mandatory' or if left unspecified,\n+#   indicates that baseline C++11 support is required and that the macro\n+#   should error out if no mode with that support is found.  If specified\n+#   'optional', then configuration proceeds regardless, after defining\n+#   HAVE_CXX11 if and only if a supporting mode is found.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2008 Benjamin Kosnik <bkoz@redhat.com>\n+#   Copyright (c) 2012 Zack Weinberg <zackw@panix.com>\n+#   Copyright (c) 2013 Roy Stogner <roystgnr@ices.utexas.edu>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 3\n+\n+m4_define([_AX_CXX_COMPILE_STDCXX_11_testbody], [\n+  template <typename T>\n+    struct check\n+    {\n+      static_assert(sizeof(int) <= sizeof(T), \"not big enough\");\n+    };\n+\n+    typedef check<check<bool>> right_angle_brackets;\n+\n+    int a;\n+    decltype(a) b;\n+\n+    typedef check<int> check_type;\n+    check_type c;\n+    check_type&& cr = static_cast<check_type&&>(c);\n+\n+    auto d = a;\n+])\n+\n+AC_DEFUN([AX_CXX_COMPILE_STDCXX_11], [dnl\n+  m4_if([$1], [], [],\n+        [$1], [ext], [],\n+        [$1], [noext], [],\n+        [m4_fatal([invalid argument `$1' to AX_CXX_COMPILE_STDCXX_11])])dnl\n+  m4_if([$2], [], [ax_cxx_compile_cxx11_required=true],\n+        [$2], [mandatory], [ax_cxx_compile_cxx11_required=true],\n+        [$2], [optional], [ax_cxx_compile_cxx11_required=false],\n+        [m4_fatal([invalid second argument `$2' to AX_CXX_COMPILE_STDCXX_11])])dnl\n+  AC_LANG_PUSH([C++])dnl\n+  ac_success=no\n+  AC_CACHE_CHECK(whether $CXX supports C++11 features by default,\n+  ax_cv_cxx_compile_cxx11,\n+  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],\n+    [ax_cv_cxx_compile_cxx11=yes],\n+    [ax_cv_cxx_compile_cxx11=no])])\n+  if test x$ax_cv_cxx_compile_cxx11 = xyes; then\n+    ac_success=yes\n+  fi\n+\n+  m4_if([$1], [noext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for switch in -std=gnu++11 -std=gnu++0x; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+         CXXFLAGS=\"$CXXFLAGS $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+\n+  m4_if([$1], [ext], [], [dnl\n+  if test x$ac_success = xno; then\n+    for switch in -std=c++11 -std=c++0x; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx11_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++11 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXXFLAGS=\"$CXXFLAGS\"\n+         CXXFLAGS=\"$CXXFLAGS $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_11_testbody])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXXFLAGS=\"$ac_save_CXXFLAGS\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXXFLAGS=\"$CXXFLAGS $switch\"\n+        ac_success=yes\n+        break\n+      fi\n+    done\n+  fi])\n+  AC_LANG_POP([C++])\n+  if test x$ax_cxx_compile_cxx11_required = xtrue; then\n+    if test x$ac_success = xno; then\n+      AC_MSG_ERROR([*** A compiler with support for C++11 language features is required.])\n+    fi\n+  else\n+    if test x$ac_success = xno; then\n+      HAVE_CXX11=0\n+      AC_MSG_NOTICE([No compiler with C++11 support was found])\n+    else\n+      HAVE_CXX11=1\n+      AC_DEFINE(HAVE_CXX11,1,\n+                [define if the compiler supports basic C++11 syntax])\n+    fi\n+\n+    AC_SUBST(HAVE_CXX11)\n+  fi\n+])"
      }
    ]
  },
  {
    "sha": "a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2U5ODRhNzIyZjNkYWYzZjAyNmNiODI5MGI4ZThmZmIzMGFiNzI4",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T19:10:21Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T19:10:21Z"
      },
      "message": "test C++11 after failing C++0x",
      "tree": {
        "sha": "f684a7f19764e89abd09d78c3c5704613144447a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f684a7f19764e89abd09d78c3c5704613144447a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e984a722f3daf3f026cb8290b8e8ffb30ab728/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a756c25b4d0e36e7061468d3f1aa8687825cf8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a756c25b4d0e36e7061468d3f1aa8687825cf8d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 1,
      "deletions": 3
    },
    "files": [
      {
        "sha": "df34c82c871b4a913a7b10bf4417e35be95a5d8a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e984a722f3daf3f026cb8290b8e8ffb30ab728/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e984a722f3daf3f026cb8290b8e8ffb30ab728/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
        "patch": "@@ -125,7 +125,6 @@ AC_PROG_CXX\n AC_PROG_CC\n AC_PROG_CPP\n AC_PROG_CXXCPP\n-AX_CXX_COMPILE_STDCXX_11(noext,mandatory)\n AC_PROG_INSTALL\n AC_PROG_OBJC\n AC_PROG_LN_S\n@@ -311,6 +310,7 @@ AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n \n dnl Enable C++0x\n AX_CXX_COMPILE_STDCXX_0X\n+m4_ifndef([HAVE_STDCXX_0X], [AX_CXX_COMPILE_STDCXX_11(noext,mandatory)])\n \n dnl Check for pthread compile/link requirements\n AX_PTHREAD"
      },
      {
        "sha": "acf3bc6accec7d1c5ca1fa413d869eae784be225",
        "filename": "src/m4/ax_cxx_compile_stdcxx_0x.m4",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e984a722f3daf3f026cb8290b8e8ffb30ab728/src/m4/ax_cxx_compile_stdcxx_0x.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e984a722f3daf3f026cb8290b8e8ffb30ab728/src/m4/ax_cxx_compile_stdcxx_0x.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/m4/ax_cxx_compile_stdcxx_0x.m4?ref=a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
        "patch": "@@ -107,7 +107,5 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX_0X], [\n   elif test \"$ax_cv_cxx_compile_cxx0x_gxx\" = yes; then\n     AC_DEFINE(HAVE_STDCXX_0X,,[Define if g++ supports C++0x features. ])\n     CXXFLAGS=\"$CXXFLAGS -std=gnu++0x\"\n-  else\n-    AC_MSG_ERROR([*** A compiler with support for C++0x language features is required.])\n   fi\n ])\n\\ No newline at end of file"
      }
    ]
  },
  {
    "sha": "b74a980dbed16f2a86ed65c746794efe27782c4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzRhOTgwZGJlZDE2ZjJhODZlZDY1Yzc0Njc5NGVmZTI3NzgyYzRm",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T19:28:29Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T19:28:29Z"
      },
      "message": "move C++0x macros",
      "tree": {
        "sha": "a80743d6f15bf69a9fae327b6e3d0aa76bf2cbfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a80743d6f15bf69a9fae327b6e3d0aa76bf2cbfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b74a980dbed16f2a86ed65c746794efe27782c4f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74a980dbed16f2a86ed65c746794efe27782c4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b74a980dbed16f2a86ed65c746794efe27782c4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74a980dbed16f2a86ed65c746794efe27782c4f/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e984a722f3daf3f026cb8290b8e8ffb30ab728",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e984a722f3daf3f026cb8290b8e8ffb30ab728"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "d8b5ef3de5cda58e7d46833bdc7e802fc8142f4b",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b74a980dbed16f2a86ed65c746794efe27782c4f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b74a980dbed16f2a86ed65c746794efe27782c4f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b74a980dbed16f2a86ed65c746794efe27782c4f",
        "patch": "@@ -161,6 +161,10 @@ if test \"x$enable_debug\" = xyes; then\n     fi\n fi \n \n+dnl Enable C++0x\n+AX_CXX_COMPILE_STDCXX_0X\n+m4_ifndef([HAVE_STDCXX_0X], [AX_CXX_COMPILE_STDCXX_11(noext,mandatory)])\n+\n ## TODO: Remove these hard-coded paths and flags. They are here for the sake of\n ##       compatibility with the legacy buildsystem.\n ##\n@@ -308,10 +312,6 @@ fi\n dnl Require little endian\n AC_C_BIGENDIAN([AC_MSG_ERROR(\"Big Endian not supported\")])\n \n-dnl Enable C++0x\n-AX_CXX_COMPILE_STDCXX_0X\n-m4_ifndef([HAVE_STDCXX_0X], [AX_CXX_COMPILE_STDCXX_11(noext,mandatory)])\n-\n dnl Check for pthread compile/link requirements\n AX_PTHREAD\n "
      }
    ]
  },
  {
    "sha": "61b2953a959efb369a55f6774427cf3aacd07354",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWIyOTUzYTk1OWVmYjM2OWE1NWY2Nzc0NDI3Y2YzYWFjZDA3MzU0",
    "commit": {
      "author": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T19:42:49Z"
      },
      "committer": {
        "name": "Kamil Domanski",
        "email": "kdomanski@kdemail.net",
        "date": "2014-09-11T19:42:49Z"
      },
      "message": "be hungry, be foolish",
      "tree": {
        "sha": "1cf7def145c40377fb52e3b151bd861ab12aa283",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cf7def145c40377fb52e3b151bd861ab12aa283"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61b2953a959efb369a55f6774427cf3aacd07354",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b2953a959efb369a55f6774427cf3aacd07354",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61b2953a959efb369a55f6774427cf3aacd07354",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61b2953a959efb369a55f6774427cf3aacd07354/comments",
    "author": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kdomanski",
      "id": 993296,
      "node_id": "MDQ6VXNlcjk5MzI5Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/993296?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kdomanski",
      "html_url": "https://github.com/kdomanski",
      "followers_url": "https://api.github.com/users/kdomanski/followers",
      "following_url": "https://api.github.com/users/kdomanski/following{/other_user}",
      "gists_url": "https://api.github.com/users/kdomanski/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kdomanski/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kdomanski/subscriptions",
      "organizations_url": "https://api.github.com/users/kdomanski/orgs",
      "repos_url": "https://api.github.com/users/kdomanski/repos",
      "events_url": "https://api.github.com/users/kdomanski/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kdomanski/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b74a980dbed16f2a86ed65c746794efe27782c4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b74a980dbed16f2a86ed65c746794efe27782c4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b74a980dbed16f2a86ed65c746794efe27782c4f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f409f0392f0b901aaebf9dd897204eede90c6760",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61b2953a959efb369a55f6774427cf3aacd07354/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61b2953a959efb369a55f6774427cf3aacd07354/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=61b2953a959efb369a55f6774427cf3aacd07354",
        "patch": "@@ -220,7 +220,7 @@ case $host in\n        AC_MSG_ERROR(\"windres not found\")\n      fi\n \n-     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n+     CPPFLAGS=\"$CPPFLAGS -std=c++0x -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB\"\n      LEVELDB_TARGET_FLAGS=\"TARGET_OS=OS_WINDOWS_CROSSCOMPILE\"\n      if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n        CXXFLAGS=\"$CXXFLAGS -w\""
      }
    ]
  }
]