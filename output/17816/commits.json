[
  {
    "sha": "caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWY5MWZhYzkwM2JjZDZkZDZmM2VlOWE4ZGVhNTNlN2IwNmFkYjRk",
    "commit": {
      "author": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T16:43:27Z"
      },
      "committer": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T16:43:27Z"
      },
      "message": "consensus refactor: changed for loops to range based for loops (modern cpp).\nShould not change behavior of consensus itself.",
      "tree": {
        "sha": "ab94c78fe8402c74ddf66e81b5e9d118a52275f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab94c78fe8402c74ddf66e81b5e9d118a52275f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d/comments",
    "author": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6cb80a068dc198832febe456139bed3ae7a1145c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6cb80a068dc198832febe456139bed3ae7a1145c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6cb80a068dc198832febe456139bed3ae7a1145c"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 22,
      "deletions": 22
    },
    "files": [
      {
        "sha": "99aa1cbd31d16c2be039680002290648b5d1d742",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d",
        "patch": "@@ -106,54 +106,54 @@ bool SequenceLocks(const CTransaction &tx, int flags, std::vector<int>* prevHeig\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n {\n-    unsigned int nSigOps = 0;\n+    unsigned int num_sig_ops = 0;\n     for (const auto& txin : tx.vin)\n     {\n-        nSigOps += txin.scriptSig.GetSigOpCount(false);\n+        num_sig_ops += txin.scriptSig.GetSigOpCount(false);\n     }\n     for (const auto& txout : tx.vout)\n     {\n-        nSigOps += txout.scriptPubKey.GetSigOpCount(false);\n+        num_sig_ops += txout.scriptPubKey.GetSigOpCount(false);\n     }\n-    return nSigOps;\n+    return num_sig_ops;\n }\n \n unsigned int GetP2SHSigOpCount(const CTransaction& tx, const CCoinsViewCache& inputs)\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n-    unsigned int nSigOps = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    unsigned int num_sig_ops = 0;\n+    for (const auto txin : tx.vin)\n     {\n-        const Coin& coin = inputs.AccessCoin(tx.vin[i].prevout);\n+        const Coin& coin = inputs.AccessCoin(txin.prevout);\n         assert(!coin.IsSpent());\n         const CTxOut &prevout = coin.out;\n         if (prevout.scriptPubKey.IsPayToScriptHash())\n-            nSigOps += prevout.scriptPubKey.GetSigOpCount(tx.vin[i].scriptSig);\n+            num_sig_ops += prevout.scriptPubKey.GetSigOpCount(txin.scriptSig);\n     }\n-    return nSigOps;\n+    return num_sig_ops;\n }\n \n int64_t GetTransactionSigOpCost(const CTransaction& tx, const CCoinsViewCache& inputs, int flags)\n {\n-    int64_t nSigOps = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n+    int64_t num_sig_ops = GetLegacySigOpCount(tx) * WITNESS_SCALE_FACTOR;\n \n     if (tx.IsCoinBase())\n-        return nSigOps;\n+        return num_sig_ops;\n \n     if (flags & SCRIPT_VERIFY_P2SH) {\n-        nSigOps += GetP2SHSigOpCount(tx, inputs) * WITNESS_SCALE_FACTOR;\n+        num_sig_ops += GetP2SHSigOpCount(tx, inputs) * WITNESS_SCALE_FACTOR;\n     }\n \n-    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    for (const auto txin : tx.vin)\n     {\n-        const Coin& coin = inputs.AccessCoin(tx.vin[i].prevout);\n+        const Coin& coin = inputs.AccessCoin(txin.prevout);\n         assert(!coin.IsSpent());\n         const CTxOut &prevout = coin.out;\n-        nSigOps += CountWitnessSigOps(tx.vin[i].scriptSig, prevout.scriptPubKey, &tx.vin[i].scriptWitness, flags);\n+        num_sig_ops += CountWitnessSigOps(txin.scriptSig, prevout.scriptPubKey, &txin.scriptWitness, flags);\n     }\n-    return nSigOps;\n+    return num_sig_ops;\n }\n \n bool Consensus::CheckTxInputs(const CTransaction& tx, TxValidationState& state, const CCoinsViewCache& inputs, int nSpendHeight, CAmount& txfee)\n@@ -164,9 +164,9 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, TxValidationState& state,\n                          strprintf(\"%s: inputs missing/spent\", __func__));\n     }\n \n-    CAmount nValueIn = 0;\n-    for (unsigned int i = 0; i < tx.vin.size(); ++i) {\n-        const COutPoint &prevout = tx.vin[i].prevout;\n+    CAmount value_in = 0;\n+    for (const auto txin : tx.vin) {\n+        const COutPoint& prevout = txin.prevout;\n         const Coin& coin = inputs.AccessCoin(prevout);\n         assert(!coin.IsSpent());\n \n@@ -177,8 +177,8 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, TxValidationState& state,\n         }\n \n         // Check for negative or overflow input values\n-        nValueIn += coin.out.nValue;\n-        if (!MoneyRange(coin.out.nValue) || !MoneyRange(nValueIn)) {\n+        value_in += coin.out.nValue;\n+        if (!MoneyRange(coin.out.nValue) || !MoneyRange(value_in)) {\n             return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-inputvalues-outofrange\");\n         }\n     }\n@@ -190,7 +190,7 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, TxValidationState& state,\n     }\n \n     // Tally transaction fees\n-    const CAmount txfee_aux = nValueIn - value_out;\n+    const CAmount txfee_aux = value_in - value_out;\n     if (!MoneyRange(txfee_aux)) {\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-fee-outofrange\");\n     }"
      }
    ]
  },
  {
    "sha": "99d84fcd6a6147d47063108bb7f0a7caf6a91a7f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWQ4NGZjZDZhNjE0N2Q0NzA2MzEwOGJiN2YwYTdjYWY2YTkxYTdm",
    "commit": {
      "author": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T16:55:20Z"
      },
      "committer": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T16:55:20Z"
      },
      "message": "fixed some stuff, im an idiot",
      "tree": {
        "sha": "aa09ffae4d48933fde69cd6a1908e6f4cad7f2d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa09ffae4d48933fde69cd6a1908e6f4cad7f2d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f/comments",
    "author": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/caf91fac903bcd6dd6f3ee9a8dea53e7b06adb4d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "03b63f5570c0719a6276c61861c4e041d55f833a",
        "filename": "src/consensus/tx_verify.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f/src/consensus/tx_verify.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f/src/consensus/tx_verify.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.cpp?ref=99d84fcd6a6147d47063108bb7f0a7caf6a91a7f",
        "patch": "@@ -184,9 +184,9 @@ bool Consensus::CheckTxInputs(const CTransaction& tx, TxValidationState& state,\n     }\n \n     const CAmount value_out = tx.GetValueOut();\n-    if (nValueIn < value_out) {\n+    if (value_in < value_out) {\n         return state.Invalid(TxValidationResult::TX_CONSENSUS, \"bad-txns-in-belowout\",\n-            strprintf(\"value in (%s) < value out (%s)\", FormatMoney(nValueIn), FormatMoney(value_out)));\n+            strprintf(\"value in (%s) < value out (%s)\", FormatMoney(value_in), FormatMoney(value_out)));\n     }\n \n     // Tally transaction fees"
      }
    ]
  },
  {
    "sha": "851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTFjZWIwZTliNjYxOWU2YWU5Y2ExZTQ4MGM5YjcwYTlkYTk4MGRj",
    "commit": {
      "author": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T18:05:44Z"
      },
      "committer": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T18:05:44Z"
      },
      "message": "utils refactor: updated atoi, i64tostr, itostr",
      "tree": {
        "sha": "35f3a91d3840ccd279122bdec75785c094883f62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35f3a91d3840ccd279122bdec75785c094883f62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc/comments",
    "author": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99d84fcd6a6147d47063108bb7f0a7caf6a91a7f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99d84fcd6a6147d47063108bb7f0a7caf6a91a7f"
      }
    ],
    "stats": {
      "total": 482,
      "additions": 364,
      "deletions": 118
    },
    "files": [
      {
        "sha": "3158f18c24eacb1609abc23ae12fa38b890365ab",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 364,
        "deletions": 118,
        "changes": 482,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc",
        "patch": "@@ -17,41 +17,282 @@\n static const std::string CHARS_ALPHA_NUM = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n \n static const std::string SAFE_CHARS[] =\n-{\n-    CHARS_ALPHA_NUM + \" .,;-_/:?@()\", // SAFE_CHARS_DEFAULT\n-    CHARS_ALPHA_NUM + \" .,;-_?@\", // SAFE_CHARS_UA_COMMENT\n-    CHARS_ALPHA_NUM + \".-_\", // SAFE_CHARS_FILENAME\n-    CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n+    {\n+        CHARS_ALPHA_NUM + \" .,;-_/:?@()\",            // SAFE_CHARS_DEFAULT\n+        CHARS_ALPHA_NUM + \" .,;-_?@\",                // SAFE_CHARS_UA_COMMENT\n+        CHARS_ALPHA_NUM + \".-_\",                     // SAFE_CHARS_FILENAME\n+        CHARS_ALPHA_NUM + \"!*'();:@&=+$,/?#[]-_.~%\", // SAFE_CHARS_URI\n };\n \n std::string SanitizeString(const std::string& str, int rule)\n {\n-    std::string strResult;\n-    for (std::string::size_type i = 0; i < str.size(); i++)\n-    {\n-        if (SAFE_CHARS[rule].find(str[i]) != std::string::npos)\n-            strResult.push_back(str[i]);\n+    std::string result;\n+    for (auto ch : str) {\n+        if (SAFE_CHARS[rule].find(ch) != std::string::npos)\n+            result.push_back(ch);\n     }\n-    return strResult;\n+    return result;\n }\n \n const signed char p_util_hexdigit[256] =\n-{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,\n-  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n-  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, };\n+    {\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        0,\n+        1,\n+        2,\n+        3,\n+        4,\n+        5,\n+        6,\n+        7,\n+        8,\n+        9,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        0xa,\n+        0xb,\n+        0xc,\n+        0xd,\n+        0xe,\n+        0xf,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        0xa,\n+        0xb,\n+        0xc,\n+        0xd,\n+        0xe,\n+        0xf,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+        -1,\n+};\n \n signed char HexDigit(char c)\n {\n@@ -60,18 +301,17 @@ signed char HexDigit(char c)\n \n bool IsHex(const std::string& str)\n {\n-    for(std::string::const_iterator it(str.begin()); it != str.end(); ++it)\n-    {\n+    for (std::string::const_iterator it(str.begin()); it != str.end(); ++it) {\n         if (HexDigit(*it) < 0)\n             return false;\n     }\n-    return (str.size() > 0) && (str.size()%2 == 0);\n+    return (!str.empty()) && (str.size() % 2 == 0);\n }\n \n bool IsHexNumber(const std::string& str)\n {\n     size_t starting_location = 0;\n-    if (str.size() > 2 && *str.begin() == '0' && *(str.begin()+1) == 'x') {\n+    if (str.size() > 2 && *str.begin() == '0' && *(str.begin() + 1) == 'x') {\n         starting_location = 2;\n     }\n     for (const char c : str.substr(starting_location)) {\n@@ -85,8 +325,7 @@ std::vector<unsigned char> ParseHex(const char* psz)\n {\n     // convert hex dump to vector\n     std::vector<unsigned char> vch;\n-    while (true)\n-    {\n+    while (true) {\n         while (IsSpace(*psz))\n             psz++;\n         signed char c = HexDigit(*psz++);\n@@ -107,33 +346,35 @@ std::vector<unsigned char> ParseHex(const std::string& str)\n     return ParseHex(str.c_str());\n }\n \n-void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n+void SplitHostPort(std::string in, int& portOut, std::string& hostOut)\n+{\n     size_t colon = in.find_last_of(':');\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;\n-    bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n-    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n-    if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n+    bool fBracketed = fHaveColon && (in[0] == '[' && in[colon - 1] == ']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n+    bool fMultiColon = fHaveColon && (in.find_last_of(':', colon - 1) != in.npos);\n+    if (fHaveColon && (colon == 0 || fBracketed || !fMultiColon)) {\n         int32_t n;\n         if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {\n             in = in.substr(0, colon);\n             portOut = n;\n         }\n     }\n-    if (in.size()>0 && in[0] == '[' && in[in.size()-1] == ']')\n-        hostOut = in.substr(1, in.size()-2);\n+    if (in.size() > 0 && in[0] == '[' && in[in.size() - 1] == ']')\n+        hostOut = in.substr(1, in.size() - 2);\n     else\n         hostOut = in;\n }\n \n std::string EncodeBase64(const unsigned char* pch, size_t len)\n {\n-    static const char *pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n+    static const char* pbase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n \n     std::string str;\n     str.reserve(((len + 2) / 3) * 4);\n     ConvertBits<8, 6, true>([&](int v) { str += pbase64[v]; }, pch, pch + len);\n-    while (str.size() % 4) str += '=';\n+    while (str.size() % 4)\n+        str += '=';\n     return str;\n }\n \n@@ -145,21 +386,20 @@ std::string EncodeBase64(const std::string& str)\n std::vector<unsigned char> DecodeBase64(const char* p, bool* pf_invalid)\n {\n     static const int decode64_table[256] =\n-    {\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\n-        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n-        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\n-        29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n-        49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n-    };\n+        {\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1,\n+            -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n+            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28,\n+            29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48,\n+            49, 50, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};\n \n     const char* e = p;\n     std::vector<uint8_t> val;\n@@ -203,12 +443,13 @@ std::string DecodeBase64(const std::string& str, bool* pf_invalid)\n \n std::string EncodeBase32(const unsigned char* pch, size_t len)\n {\n-    static const char *pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n+    static const char* pbase32 = \"abcdefghijklmnopqrstuvwxyz234567\";\n \n     std::string str;\n     str.reserve(((len + 4) / 5) * 8);\n     ConvertBits<8, 5, true>([&](int v) { str += pbase32[v]; }, pch, pch + len);\n-    while (str.size() % 8) str += '=';\n+    while (str.size() % 8)\n+        str += '=';\n     return str;\n }\n \n@@ -220,21 +461,20 @@ std::string EncodeBase32(const std::string& str)\n std::vector<unsigned char> DecodeBase32(const char* p, bool* pf_invalid)\n {\n     static const int decode32_table[256] =\n-    {\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n-        15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1,  0,  1,  2,\n-         3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n-        23, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n-        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\n-    };\n+        {\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\n+            15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 0, 1, 2,\n+            3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n+            23, 24, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n+            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};\n \n     const char* e = p;\n     std::vector<uint8_t> val;\n@@ -280,79 +520,80 @@ NODISCARD static bool ParsePrechecks(const std::string& str)\n {\n     if (str.empty()) // No empty string allowed\n         return false;\n-    if (str.size() >= 1 && (IsSpace(str[0]) || IsSpace(str[str.size()-1]))) // No padding allowed\n+\n+    if (IsSpace(str[0]) || IsSpace(str[str.size() - 1])) // No padding allowed\n         return false;\n     if (!ValidAsCString(str)) // No embedded NUL characters allowed\n         return false;\n     return true;\n }\n \n-bool ParseInt32(const std::string& str, int32_t *out)\n+bool ParseInt32(const std::string& str, int32_t* out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n-    char *endp = nullptr;\n+    char* endp = nullptr;\n     errno = 0; // strtol will not set errno if valid\n     long int n = strtol(str.c_str(), &endp, 10);\n-    if(out) *out = (int32_t)n;\n+    if (out) *out = (int32_t)n;\n     // Note that strtol returns a *long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int32_t>::min() &&\n-        n <= std::numeric_limits<int32_t>::max();\n+           n >= std::numeric_limits<int32_t>::min() &&\n+           n <= std::numeric_limits<int32_t>::max();\n }\n \n-bool ParseInt64(const std::string& str, int64_t *out)\n+bool ParseInt64(const std::string& str, int64_t* out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n-    char *endp = nullptr;\n+    char* endp = nullptr;\n     errno = 0; // strtoll will not set errno if valid\n     long long int n = strtoll(str.c_str(), &endp, 10);\n-    if(out) *out = (int64_t)n;\n+    if (out) *out = (int64_t)n;\n     // Note that strtoll returns a *long long int*, so even if strtol doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *int64_t*.\n     return endp && *endp == 0 && !errno &&\n-        n >= std::numeric_limits<int64_t>::min() &&\n-        n <= std::numeric_limits<int64_t>::max();\n+           n >= std::numeric_limits<int64_t>::min() &&\n+           n <= std::numeric_limits<int64_t>::max();\n }\n \n-bool ParseUInt32(const std::string& str, uint32_t *out)\n+bool ParseUInt32(const std::string& str, uint32_t* out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n     if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n         return false;\n-    char *endp = nullptr;\n+    char* endp = nullptr;\n     errno = 0; // strtoul will not set errno if valid\n     unsigned long int n = strtoul(str.c_str(), &endp, 10);\n-    if(out) *out = (uint32_t)n;\n+    if (out) *out = (uint32_t)n;\n     // Note that strtoul returns a *unsigned long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint32_t*. On 64-bit\n     // platforms the size of these types may be different.\n     return endp && *endp == 0 && !errno &&\n-        n <= std::numeric_limits<uint32_t>::max();\n+           n <= std::numeric_limits<uint32_t>::max();\n }\n \n-bool ParseUInt64(const std::string& str, uint64_t *out)\n+bool ParseUInt64(const std::string& str, uint64_t* out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n     if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoull accepts these by default if they fit in the range\n         return false;\n-    char *endp = nullptr;\n+    char* endp = nullptr;\n     errno = 0; // strtoull will not set errno if valid\n     unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n-    if(out) *out = (uint64_t)n;\n+    if (out) *out = (uint64_t)n;\n     // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint64_t*.\n     return endp && *endp == 0 && !errno &&\n-        n <= std::numeric_limits<uint64_t>::max();\n+           n <= std::numeric_limits<uint64_t>::max();\n }\n \n \n-bool ParseDouble(const std::string& str, double *out)\n+bool ParseDouble(const std::string& str, double* out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n@@ -362,7 +603,7 @@ bool ParseDouble(const std::string& str, double *out)\n     text.imbue(std::locale::classic());\n     double result;\n     text >> result;\n-    if(out) *out = result;\n+    if (out) *out = result;\n     return text.eof() && !text.fail();\n }\n \n@@ -371,8 +612,7 @@ std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n     std::stringstream out;\n     size_t ptr = 0;\n     size_t indented = 0;\n-    while (ptr < in.size())\n-    {\n+    while (ptr < in.size()) {\n         size_t lineend = in.find_first_of('\\n', ptr);\n         if (lineend == std::string::npos) {\n             lineend = in.size();\n@@ -409,12 +649,12 @@ std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n \n std::string i64tostr(int64_t n)\n {\n-    return strprintf(\"%d\", n);\n+    return boost::lexical_cast<std::string>(n); //boost::lexical_cast is faster than std::to_string and others\n }\n \n std::string itostr(int n)\n {\n-    return strprintf(\"%d\", n);\n+    return boost::lexical_cast<std::string>(n);\n }\n \n int64_t atoi64(const char* psz)\n@@ -437,7 +677,11 @@ int64_t atoi64(const std::string& str)\n \n int atoi(const std::string& str)\n {\n+#ifdef _MSC_VER\n     return atoi(str.c_str());\n+#else\n+    return strtol(str.c_str(), nullptr, 10);\n+#endif\n }\n \n /** Upper bound for mantissa.\n@@ -451,12 +695,12 @@ int atoi(const std::string& str)\n static const int64_t UPPER_BOUND = 1000000000000000000LL - 1LL;\n \n /** Helper function for ParseFixedPoint */\n-static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantissa_tzeros)\n+static inline bool ProcessMantissaDigit(char ch, int64_t& mantissa, int& mantissa_tzeros)\n {\n-    if(ch == '0')\n+    if (ch == '0')\n         ++mantissa_tzeros;\n     else {\n-        for (int i=0; i<=mantissa_tzeros; ++i) {\n+        for (int i = 0; i <= mantissa_tzeros; ++i) {\n             if (mantissa > (UPPER_BOUND / 10LL))\n                 return false; /* overflow */\n             mantissa *= 10;\n@@ -467,7 +711,7 @@ static inline bool ProcessMantissaDigit(char ch, int64_t &mantissa, int &mantiss\n     return true;\n }\n \n-bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n+bool ParseFixedPoint(const std::string& val, int decimals, int64_t* amount_out)\n {\n     int64_t mantissa = 0;\n     int64_t exponent = 0;\n@@ -482,8 +726,7 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n         mantissa_sign = true;\n         ++ptr;\n     }\n-    if (ptr < end)\n-    {\n+    if (ptr < end) {\n         if (val[ptr] == '0') {\n             /* pass single 0 */\n             ++ptr;\n@@ -493,23 +736,23 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n                     return false; /* overflow */\n                 ++ptr;\n             }\n-        } else return false; /* missing expected digit */\n-    } else return false; /* empty string or loose '-' */\n-    if (ptr < end && val[ptr] == '.')\n-    {\n+        } else\n+            return false; /* missing expected digit */\n+    } else\n+        return false; /* empty string or loose '-' */\n+    if (ptr < end && val[ptr] == '.') {\n         ++ptr;\n-        if (ptr < end && IsDigit(val[ptr]))\n-        {\n+        if (ptr < end && IsDigit(val[ptr])) {\n             while (ptr < end && IsDigit(val[ptr])) {\n                 if (!ProcessMantissaDigit(val[ptr], mantissa, mantissa_tzeros))\n                     return false; /* overflow */\n                 ++ptr;\n                 ++point_ofs;\n             }\n-        } else return false; /* missing expected digit */\n+        } else\n+            return false; /* missing expected digit */\n     }\n-    if (ptr < end && (val[ptr] == 'e' || val[ptr] == 'E'))\n-    {\n+    if (ptr < end && (val[ptr] == 'e' || val[ptr] == 'E')) {\n         ++ptr;\n         if (ptr < end && val[ptr] == '+')\n             ++ptr;\n@@ -524,7 +767,8 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n                 exponent = exponent * 10 + val[ptr] - '0';\n                 ++ptr;\n             }\n-        } else return false; /* missing expected digit */\n+        } else\n+            return false; /* missing expected digit */\n     }\n     if (ptr != end)\n         return false; /* trailing garbage */\n@@ -545,7 +789,7 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n     if (exponent >= 18)\n         return false; /* cannot represent values larger than or equal to 10^(18-decimals) */\n \n-    for (int i=0; i < exponent; ++i) {\n+    for (int i = 0; i < exponent; ++i) {\n         if (mantissa > (UPPER_BOUND / 10LL) || mantissa < -(UPPER_BOUND / 10LL))\n             return false; /* overflow */\n         mantissa *= 10;\n@@ -562,20 +806,22 @@ bool ParseFixedPoint(const std::string &val, int decimals, int64_t *amount_out)\n std::string ToLower(const std::string& str)\n {\n     std::string r;\n-    for (auto ch : str) r += ToLower((unsigned char)ch);\n+    for (auto ch : str)\n+        r += ToLower((unsigned char)ch);\n     return r;\n }\n \n std::string ToUpper(const std::string& str)\n {\n     std::string r;\n-    for (auto ch : str) r += ToUpper((unsigned char)ch);\n+    for (auto ch : str)\n+        r += ToUpper((unsigned char)ch);\n     return r;\n }\n \n std::string Capitalize(std::string str)\n {\n     if (str.empty()) return str;\n-    str[0] = ToUpper(str.front());\n+    str.at(0) = ToUpper(str.front());\n     return str;\n }"
      }
    ]
  },
  {
    "sha": "752cc2527508e00b26c31b9182f819835600e962",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTJjYzI1Mjc1MDhlMDBiMjZjMzFiOTE4MmY4MTk4MzU2MDBlOTYy",
    "commit": {
      "author": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T18:09:55Z"
      },
      "committer": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T18:09:55Z"
      },
      "message": "utils refactor: updated atoi, i64tostr, itostr to more modern cpp. More range based for loop, also started using str::empty(). Removed <algorithm> header, seemingly not needed.",
      "tree": {
        "sha": "5c7155f3dfe928451ffd82f82ebfa931e5f4d7a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c7155f3dfe928451ffd82f82ebfa931e5f4d7a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/752cc2527508e00b26c31b9182f819835600e962",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/752cc2527508e00b26c31b9182f819835600e962",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/752cc2527508e00b26c31b9182f819835600e962",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/752cc2527508e00b26c31b9182f819835600e962/comments",
    "author": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/851ceb0e9b6619e6ae9ca1e480c9b70a9da980dc"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "1cece75a6d7c4a49c0f45b55594961a20a16822a",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/752cc2527508e00b26c31b9182f819835600e962/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/752cc2527508e00b26c31b9182f819835600e962/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=752cc2527508e00b26c31b9182f819835600e962",
        "patch": "@@ -8,7 +8,6 @@\n \n #include <tinyformat.h>\n \n-#include <algorithm>\n #include <cstdlib>\n #include <cstring>\n #include <errno.h>\n@@ -301,11 +300,11 @@ signed char HexDigit(char c)\n \n bool IsHex(const std::string& str)\n {\n-    for (std::string::const_iterator it(str.begin()); it != str.end(); ++it) {\n-        if (HexDigit(*it) < 0)\n+    for (auto ch : str) {\n+        if (HexDigit(ch) < 0)\n             return false;\n     }\n-    return (!str.empty()) && (str.size() % 2 == 0);\n+    return !str.empty() && str.size() % 2 == 0;\n }\n \n bool IsHexNumber(const std::string& str)\n@@ -360,7 +359,7 @@ void SplitHostPort(std::string in, int& portOut, std::string& hostOut)\n             portOut = n;\n         }\n     }\n-    if (in.size() > 0 && in[0] == '[' && in[in.size() - 1] == ']')\n+    if (!in.empty() && in[0] == '[' && in[in.size() - 1] == ']')\n         hostOut = in.substr(1, in.size() - 2);\n     else\n         hostOut = in;\n@@ -563,7 +562,7 @@ bool ParseUInt32(const std::string& str, uint32_t* out)\n {\n     if (!ParsePrechecks(str))\n         return false;\n-    if (str.size() >= 1 && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n+    if (!str.empty() && str[0] == '-') // Reject negative values, unfortunately strtoul accepts these by default if they fit in the range\n         return false;\n     char* endp = nullptr;\n     errno = 0; // strtoul will not set errno if valid\n@@ -584,7 +583,7 @@ bool ParseUInt64(const std::string& str, uint64_t* out)\n         return false;\n     char* endp = nullptr;\n     errno = 0; // strtoull will not set errno if valid\n-    unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n+    const unsigned long long int n = strtoull(str.c_str(), &endp, 10);\n     if (out) *out = (uint64_t)n;\n     // Note that strtoull returns a *unsigned long long int*, so even if it doesn't report an over/underflow\n     // we still have to check that the returned value is within the range of an *uint64_t*.\n@@ -649,12 +648,12 @@ std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n \n std::string i64tostr(int64_t n)\n {\n-    return boost::lexical_cast<std::string>(n); //boost::lexical_cast is faster than std::to_string and others\n+    return std::to_string(n);\n }\n \n std::string itostr(int n)\n {\n-    return boost::lexical_cast<std::string>(n);\n+    return std::to_string(n);\n }\n \n int64_t atoi64(const char* psz)"
      }
    ]
  },
  {
    "sha": "9ba9a14cabb341d1c9db8f16ab7c071dacae6728",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmE5YTE0Y2FiYjM0MWQxYzlkYjhmMTZhYjdjMDcxZGFjYWU2NzI4",
    "commit": {
      "author": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T18:11:59Z"
      },
      "committer": {
        "name": "Sanjay K",
        "email": "sanjaykdragon@gmail.com",
        "date": "2019-12-28T18:11:59Z"
      },
      "message": "keep p_util_hexdigit compacted",
      "tree": {
        "sha": "e0d4cbc67a8d5ae3d02343322aea87a9bddb03f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e0d4cbc67a8d5ae3d02343322aea87a9bddb03f9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ba9a14cabb341d1c9db8f16ab7c071dacae6728",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ba9a14cabb341d1c9db8f16ab7c071dacae6728",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ba9a14cabb341d1c9db8f16ab7c071dacae6728",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ba9a14cabb341d1c9db8f16ab7c071dacae6728/comments",
    "author": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sanjaykdragon",
      "id": 10261698,
      "node_id": "MDQ6VXNlcjEwMjYxNjk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/10261698?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sanjaykdragon",
      "html_url": "https://github.com/sanjaykdragon",
      "followers_url": "https://api.github.com/users/sanjaykdragon/followers",
      "following_url": "https://api.github.com/users/sanjaykdragon/following{/other_user}",
      "gists_url": "https://api.github.com/users/sanjaykdragon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sanjaykdragon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sanjaykdragon/subscriptions",
      "organizations_url": "https://api.github.com/users/sanjaykdragon/orgs",
      "repos_url": "https://api.github.com/users/sanjaykdragon/repos",
      "events_url": "https://api.github.com/users/sanjaykdragon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sanjaykdragon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "752cc2527508e00b26c31b9182f819835600e962",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/752cc2527508e00b26c31b9182f819835600e962",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/752cc2527508e00b26c31b9182f819835600e962"
      }
    ],
    "stats": {
      "total": 274,
      "additions": 16,
      "deletions": 258
    },
    "files": [
      {
        "sha": "1ae32335ec2dd2878d195ed3ecad3ad5ebf2a11e",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 258,
        "changes": 274,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ba9a14cabb341d1c9db8f16ab7c071dacae6728/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ba9a14cabb341d1c9db8f16ab7c071dacae6728/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=9ba9a14cabb341d1c9db8f16ab7c071dacae6728",
        "patch": "@@ -34,264 +34,22 @@ std::string SanitizeString(const std::string& str, int rule)\n }\n \n const signed char p_util_hexdigit[256] =\n-    {\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        0,\n-        1,\n-        2,\n-        3,\n-        4,\n-        5,\n-        6,\n-        7,\n-        8,\n-        9,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        0xa,\n-        0xb,\n-        0xc,\n-        0xd,\n-        0xe,\n-        0xf,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        0xa,\n-        0xb,\n-        0xc,\n-        0xd,\n-        0xe,\n-        0xf,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-        -1,\n-};\n+{ -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  0,1,2,3,4,5,6,7,8,9,-1,-1,-1,-1,-1,-1,\n+  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,0xa,0xb,0xc,0xd,0xe,0xf,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,\n+  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1, };\n \n signed char HexDigit(char c)\n {"
      }
    ]
  }
]