[
  {
    "sha": "c72906dcc11a73fa06a0adf97557fa756b551bee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzI5MDZkY2MxMWE3M2ZhMDZhMGFkZjk3NTU3ZmE3NTZiNTUxYmVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-28T12:30:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@protonmail.com",
        "date": "2019-10-28T12:31:33Z"
      },
      "message": "refactor: Remove redundant c_str() calls in formatting\n\nOur formatter, tinyformat, *never* needs `c_str()` for strings.\nRemove redundant `c_str()` calls for:\n\n- `strprintf`\n- `LogPrintf`\n- `tfm::format`",
      "tree": {
        "sha": "2cfc335a4d7a75a0bbf20b8d49f04f987ec7266f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2cfc335a4d7a75a0bbf20b8d49f04f987ec7266f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c72906dcc11a73fa06a0adf97557fa756b551bee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c72906dcc11a73fa06a0adf97557fa756b551bee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c72906dcc11a73fa06a0adf97557fa756b551bee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c72906dcc11a73fa06a0adf97557fa756b551bee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a25945318fdc2890a141a28843c2c5af251c9605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a25945318fdc2890a141a28843c2c5af251c9605",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a25945318fdc2890a141a28843c2c5af251c9605"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "62bd1a52f7768df8d7440880bcdff3a818820156",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -36,7 +36,7 @@ int main(int argc, char** argv)\n     SetupBenchArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n \n@@ -53,7 +53,7 @@ int main(int argc, char** argv)\n \n     double scaling_factor;\n     if (!ParseDouble(scaling_str, &scaling_factor)) {\n-        tfm::format(std::cerr, \"Error parsing scaling factor as double: %s\\n\", scaling_str.c_str());\n+        tfm::format(std::cerr, \"Error parsing scaling factor as double: %s\\n\", scaling_str);\n         return EXIT_FAILURE;\n     }\n "
      },
      {
        "sha": "85c5cb06e9ff7c7c97110ab93493f4f2cf316e0f",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -105,7 +105,7 @@ static int AppInitRPC(int argc, char* argv[])\n     SetupCliArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n     if (argc < 2 || HelpRequested(gArgs) || gArgs.IsArgSet(\"-version\")) {\n@@ -119,19 +119,19 @@ static int AppInitRPC(int argc, char* argv[])\n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n \n-        tfm::format(std::cout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage);\n         if (argc < 2) {\n             tfm::format(std::cerr, \"Error: too few parameters\\n\");\n             return EXIT_FAILURE;\n         }\n         return EXIT_SUCCESS;\n     }\n     if (!CheckDataDirOption()) {\n-        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\"));\n         return EXIT_FAILURE;\n     }\n     if (!gArgs.ReadConfigFiles(error, true)) {\n-        tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error reading configuration file: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n     // Check for -chain, -testnet or -regtest parameter (BaseParams() calls are only valid after this clause)\n@@ -393,7 +393,7 @@ static UniValue CallRPC(BaseRequestHandler *rh, const std::string& strMethod, co\n         if (failedToGetAuthCookie) {\n             throw std::runtime_error(strprintf(\n                 \"Could not locate RPC credentials. No authentication cookie could be found, and RPC password is not set.  See -rpcpassword and -stdinrpcpass.  Configuration file: (%s)\",\n-                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n+                GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string()));\n         } else {\n             throw std::runtime_error(\"Authorization failed: Incorrect rpcuser or rpcpassword\");\n         }\n@@ -541,7 +541,7 @@ static int CommandLineRPC(int argc, char *argv[])\n     }\n \n     if (strPrint != \"\") {\n-        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint.c_str());\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint);\n     }\n     return nRet;\n }"
      },
      {
        "sha": "c7af7e0fc86d208dee03287e8925d39eab41b8e3",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -83,7 +83,7 @@ static int AppInitRawTx(int argc, char* argv[])\n     SetupBitcoinTxArgs();\n     std::string error;\n     if (!gArgs.ParseParameters(argc, argv, error)) {\n-        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error);\n         return EXIT_FAILURE;\n     }\n \n@@ -105,7 +105,7 @@ static int AppInitRawTx(int argc, char* argv[])\n             \"\\n\";\n         strUsage += gArgs.GetHelpMessage();\n \n-        tfm::format(std::cout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage);\n \n         if (argc < 2) {\n             tfm::format(std::cerr, \"Error: too few parameters\\n\");\n@@ -724,21 +724,21 @@ static void OutputTxJSON(const CTransaction& tx)\n     TxToUniv(tx, uint256(), entry);\n \n     std::string jsonOutput = entry.write(4);\n-    tfm::format(std::cout, \"%s\\n\", jsonOutput.c_str());\n+    tfm::format(std::cout, \"%s\\n\", jsonOutput);\n }\n \n static void OutputTxHash(const CTransaction& tx)\n {\n     std::string strHexHash = tx.GetHash().GetHex(); // the hex-encoded transaction hash (aka the transaction id)\n \n-    tfm::format(std::cout, \"%s\\n\", strHexHash.c_str());\n+    tfm::format(std::cout, \"%s\\n\", strHexHash);\n }\n \n static void OutputTxHex(const CTransaction& tx)\n {\n     std::string strHex = EncodeHexTx(tx);\n \n-    tfm::format(std::cout, \"%s\\n\", strHex.c_str());\n+    tfm::format(std::cout, \"%s\\n\", strHex);\n }\n \n static void OutputTx(const CTransaction& tx)\n@@ -829,7 +829,7 @@ static int CommandLineRawTx(int argc, char* argv[])\n     }\n \n     if (strPrint != \"\") {\n-        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint.c_str());\n+        tfm::format(nRet == 0 ? std::cout : std::cerr, \"%s\\n\", strPrint);\n     }\n     return nRet;\n }"
      },
      {
        "sha": "917ecd71c53438b418019ff38902fc4911e4078c",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -36,7 +36,7 @@ static bool WalletAppInit(int argc, char* argv[])\n     SetupWalletToolArgs();\n     std::string error_message;\n     if (!gArgs.ParseParameters(argc, argv, error_message)) {\n-        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message.c_str());\n+        tfm::format(std::cerr, \"Error parsing command line arguments: %s\\n\", error_message);\n         return false;\n     }\n     if (argc < 2 || HelpRequested(gArgs)) {\n@@ -48,15 +48,15 @@ static bool WalletAppInit(int argc, char* argv[])\n                                      \"  bitcoin-wallet [options] <command>\\n\\n\" +\n                                      gArgs.GetHelpMessage();\n \n-        tfm::format(std::cout, \"%s\", usage.c_str());\n+        tfm::format(std::cout, \"%s\", usage);\n         return false;\n     }\n \n     // check for printtoconsole, allow -debug\n     LogInstance().m_print_to_console = gArgs.GetBoolArg(\"-printtoconsole\", gArgs.GetBoolArg(\"-debug\", false));\n \n     if (!CheckDataDirOption()) {\n-        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        tfm::format(std::cerr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", gArgs.GetArg(\"-datadir\", \"\"));\n         return false;\n     }\n     // Check for -testnet or -regtest parameter (Params() calls are only valid after this clause)\n@@ -87,7 +87,7 @@ int main(int argc, char* argv[])\n     for(int i = 1; i < argc; ++i) {\n         if (!IsSwitchChar(argv[i][0])) {\n             if (!method.empty()) {\n-                tfm::format(std::cerr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method.c_str(), argv[i]);\n+                tfm::format(std::cerr, \"Error: two methods provided (%s and %s). Only one method should be provided.\\n\", method, argv[i]);\n                 return EXIT_FAILURE;\n             }\n             method = argv[i];"
      },
      {
        "sha": "70c308960cfc061e20748b57b5af8fc21e6b9f60",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -70,7 +70,7 @@ static bool AppInit(int argc, char* argv[])\n             strUsage += \"\\n\" + gArgs.GetHelpMessage();\n         }\n \n-        tfm::format(std::cout, \"%s\", strUsage.c_str());\n+        tfm::format(std::cout, \"%s\", strUsage);\n         return true;\n     }\n "
      },
      {
        "sha": "93221efe9b1312ed30ddf004a16434a794214218",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -943,7 +943,7 @@ bool AppInitParameterInteraction()\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n-        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\").c_str()));\n+        return InitError(strprintf(_(\"Specified blocks directory \\\"%s\\\" does not exist.\").translated, gArgs.GetArg(\"-blocksdir\", \"\")));\n     }\n \n     // parse and validate enabled filter types"
      },
      {
        "sha": "ad91e3f8f66a6d319ad89738d30e08eeb0ac9caf",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -1458,7 +1458,7 @@ static void ThreadMapPort()\n                 if (externalIPAddress[0]) {\n                     CNetAddr resolved;\n                     if (LookupHost(externalIPAddress, resolved, false)) {\n-                        LogPrintf(\"UPnP: ExternalIPAddress = %s\\n\", resolved.ToString().c_str());\n+                        LogPrintf(\"UPnP: ExternalIPAddress = %s\\n\", resolved.ToString());\n                         AddLocal(resolved, LOCAL_UPNP);\n                     }\n                 } else {\n@@ -2692,7 +2692,7 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n     size_t nTotalSize = nMessageSize + CMessageHeader::HEADER_SIZE;\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.command.c_str()), nMessageSize, pnode->GetId());\n+    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.command), nMessageSize, pnode->GetId());\n \n     std::vector<unsigned char> serializedHeader;\n     serializedHeader.reserve(CMessageHeader::HEADER_SIZE);"
      },
      {
        "sha": "11c8f1e13d93c8b2f0551a1d4ded653f31ec69ee",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -45,7 +45,7 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n     if (!fSecure) {\n         LogPrintf(\"%s%s\\n\", strCaption, message);\n     }\n-    tfm::format(std::cerr, \"%s%s\\n\", strCaption.c_str(), message.c_str());\n+    tfm::format(std::cerr, \"%s%s\\n\", strCaption, message);\n     return false;\n }\n \n@@ -96,4 +96,4 @@ void noui_reconnect()\n     noui_ThreadSafeQuestionConn.disconnect();\n     noui_InitMessageConn.disconnect();\n     noui_connect();\n-}\n\\ No newline at end of file\n+}"
      },
      {
        "sha": "a66e4464db387a349b950da1d9ce7a69283e5826",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -517,7 +517,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     uint256 hash = entry.GetTx().GetHash();\n     if (mapMemPoolTxs.count(hash)) {\n         LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy error mempool tx %s already being tracked\\n\",\n-                 hash.ToString().c_str());\n+                 hash.ToString());\n         return;\n     }\n "
      },
      {
        "sha": "487f74c3e11fe5cd9163e39f2d0a92c1c0b97460",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -1602,7 +1602,7 @@ UniValue joinpsbts(const JSONRPCRequest& request)\n     for (auto& psbt : psbtxs) {\n         for (unsigned int i = 0; i < psbt.tx->vin.size(); ++i) {\n             if (!merged_psbt.AddInput(psbt.tx->vin[i], psbt.inputs[i])) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString().c_str(), psbt.tx->vin[i].prevout.n));\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Input %s:%d exists in multiple PSBTs\", psbt.tx->vin[i].prevout.hash.ToString(), psbt.tx->vin[i].prevout.n));\n             }\n         }\n         for (unsigned int i = 0; i < psbt.tx->vout.size(); ++i) {"
      },
      {
        "sha": "4b27ef0ca9399ec6a4482754e412227b4335a2c6",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -645,7 +645,7 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n         }\n         uint32_t p;\n         if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p)) {\n-            error = strprintf(\"Key path value '%s' is not a valid uint32\", std::string(elem.begin(), elem.end()).c_str());\n+            error = strprintf(\"Key path value '%s' is not a valid uint32\", std::string(elem.begin(), elem.end()));\n             return false;\n         } else if (p > 0x7FFFFFFFUL) {\n             error = strprintf(\"Key path value %u is out of range\", p);\n@@ -783,7 +783,7 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n         if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n-            error = strprintf(\"Multi threshold '%s' is not valid\", std::string(threshold.begin(), threshold.end()).c_str());\n+            error = strprintf(\"Multi threshold '%s' is not valid\", std::string(threshold.begin(), threshold.end()));\n             return nullptr;\n         }\n         size_t script_size = 0;"
      },
      {
        "sha": "257093fad1259c64559f38737f228626dbb7d95e",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -173,15 +173,15 @@ void AssertLockHeldInternal(const char* pszName, const char* pszFile, int nLine,\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack)\n         if (i.first == cs)\n             return;\n-    tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+    tfm::format(std::cerr, \"Assertion failed: lock %s not held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n     abort();\n }\n \n void AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs)\n {\n     for (const std::pair<void*, CLockLocation>& i : g_lockstack) {\n         if (i.first == cs) {\n-            tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld().c_str());\n+            tfm::format(std::cerr, \"Assertion failed: lock %s held in %s:%i; locks held:\\n%s\", pszName, pszFile, nLine, LocksHeld());\n             abort();\n         }\n     }"
      },
      {
        "sha": "7da408eda5c4904ed14b3a3d4568864ae75d1c44",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -305,7 +305,7 @@ NODISCARD static bool InterpretOption(std::string key, std::string val, unsigned\n             LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n             val = \"1\";\n         } else {\n-            error = strprintf(\"Negating of %s is meaningless and therefore forbidden\", key.c_str());\n+            error = strprintf(\"Negating of %s is meaningless and therefore forbidden\", key);\n             return false;\n         }\n     }\n@@ -414,7 +414,7 @@ bool ArgsManager::ParseParameters(int argc, const char* const argv[], std::strin\n                 return false;\n             }\n         } else {\n-            error = strprintf(\"Invalid parameter %s\", key.c_str());\n+            error = strprintf(\"Invalid parameter %s\", key);\n             return false;\n         }\n     }\n@@ -688,7 +688,7 @@ void PrintExceptionContinue(const std::exception* pex, const char* pszThread)\n {\n     std::string message = FormatException(pex, pszThread);\n     LogPrintf(\"\\n\\n************************\\n%s\\n\", message);\n-    tfm::format(std::cerr, \"\\n\\n************************\\n%s\\n\", message.c_str());\n+    tfm::format(std::cerr, \"\\n\\n************************\\n%s\\n\", message);\n }\n \n fs::path GetDefaultDataDir()\n@@ -870,7 +870,7 @@ bool ArgsManager::ReadConfigStream(std::istream& stream, const std::string& file\n             if (ignore_invalid_keys) {\n                 LogPrintf(\"Ignoring unknown configuration value %s\\n\", option.first);\n             } else {\n-                error = strprintf(\"Invalid configuration value %s\", option.first.c_str());\n+                error = strprintf(\"Invalid configuration value %s\", option.first);\n                 return false;\n             }\n         }\n@@ -925,7 +925,7 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n                     if (!ReadConfigStream(include_config, to_include, error, ignore_invalid_keys)) {\n                         return false;\n                     }\n-                    LogPrintf(\"Included configuration file %s\\n\", to_include.c_str());\n+                    LogPrintf(\"Included configuration file %s\\n\", to_include);\n                 } else {\n                     error = \"Failed to include configuration file \" + to_include;\n                     return false;\n@@ -945,15 +945,15 @@ bool ArgsManager::ReadConfigFiles(std::string& error, bool ignore_invalid_keys)\n                 }\n             }\n             for (const std::string& to_include : includeconf) {\n-                tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include.c_str());\n+                tfm::format(std::cerr, \"warning: -includeconf cannot be used from included files; ignoring -includeconf=%s\\n\", to_include);\n             }\n         }\n     }\n \n     // If datadir is changed in .conf file:\n     ClearDatadirCache();\n     if (!CheckDataDirOption()) {\n-        error = strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\").c_str());\n+        error = strprintf(\"specified data directory \\\"%s\\\" does not exist.\", gArgs.GetArg(\"-datadir\", \"\"));\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "3b920fdbbb080d40016dbd832c07c9a717b1b076",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c72906dcc11a73fa06a0adf97557fa756b551bee/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c72906dcc11a73fa06a0adf97557fa756b551bee/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=c72906dcc11a73fa06a0adf97557fa756b551bee",
        "patch": "@@ -30,7 +30,7 @@ static std::shared_ptr<CWallet> CreateWallet(const std::string& name, const fs::\n     bool first_run = true;\n     DBErrors load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n-        tfm::format(std::cerr, \"Error creating %s\", name.c_str());\n+        tfm::format(std::cerr, \"Error creating %s\", name);\n         return nullptr;\n     }\n \n@@ -59,28 +59,28 @@ static std::shared_ptr<CWallet> LoadWallet(const std::string& name, const fs::pa\n         bool first_run;\n         load_wallet_ret = wallet_instance->LoadWallet(first_run);\n     } catch (const std::runtime_error&) {\n-        tfm::format(std::cerr, \"Error loading %s. Is wallet being used by another process?\\n\", name.c_str());\n+        tfm::format(std::cerr, \"Error loading %s. Is wallet being used by another process?\\n\", name);\n         return nullptr;\n     }\n \n     if (load_wallet_ret != DBErrors::LOAD_OK) {\n         wallet_instance = nullptr;\n         if (load_wallet_ret == DBErrors::CORRUPT) {\n-            tfm::format(std::cerr, \"Error loading %s: Wallet corrupted\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s: Wallet corrupted\", name);\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NONCRITICAL_ERROR) {\n             tfm::format(std::cerr, \"Error reading %s! All keys read correctly, but transaction data\"\n                             \" or address book entries might be missing or incorrect.\",\n-                name.c_str());\n+                name);\n         } else if (load_wallet_ret == DBErrors::TOO_NEW) {\n             tfm::format(std::cerr, \"Error loading %s: Wallet requires newer version of %s\",\n-                name.c_str(), PACKAGE_NAME);\n+                name, PACKAGE_NAME);\n             return nullptr;\n         } else if (load_wallet_ret == DBErrors::NEED_REWRITE) {\n             tfm::format(std::cerr, \"Wallet needed to be rewritten: restart %s to complete\", PACKAGE_NAME);\n             return nullptr;\n         } else {\n-            tfm::format(std::cerr, \"Error loading %s\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s\", name);\n             return nullptr;\n         }\n     }\n@@ -112,20 +112,20 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         }\n     } else if (command == \"info\") {\n         if (!fs::exists(path)) {\n-            tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name.c_str());\n+            tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n             return false;\n         }\n         std::string error;\n         if (!WalletBatch::VerifyEnvironment(path, error)) {\n-            tfm::format(std::cerr, \"Error loading %s. Is wallet being used by other process?\\n\", name.c_str());\n+            tfm::format(std::cerr, \"Error loading %s. Is wallet being used by other process?\\n\", name);\n             return false;\n         }\n         std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n         if (!wallet_instance) return false;\n         WalletShowInfo(wallet_instance.get());\n         wallet_instance->Flush(true);\n     } else {\n-        tfm::format(std::cerr, \"Invalid command: %s\\n\", command.c_str());\n+        tfm::format(std::cerr, \"Invalid command: %s\\n\", command);\n         return false;\n     }\n "
      }
    ]
  }
]