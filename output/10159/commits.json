[
  {
    "sha": "63062bda1ac0b57cb92e663596650a6e42508f15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzA2MmJkYTFhYzBiNTdjYjkyZTY2MzU5NjY1MGE2ZTQyNTA4ZjE1",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-05T19:19:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-05T22:36:37Z"
      },
      "message": "[tests] color test results and sort alphabetically",
      "tree": {
        "sha": "9ad8154f1b50e021194340ac1296020e78826e66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ad8154f1b50e021194340ac1296020e78826e66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63062bda1ac0b57cb92e663596650a6e42508f15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63062bda1ac0b57cb92e663596650a6e42508f15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63062bda1ac0b57cb92e663596650a6e42508f15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63062bda1ac0b57cb92e663596650a6e42508f15/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c7e73eafa139c29a38f73ab697e2e967a386908d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c7e73eafa139c29a38f73ab697e2e967a386908d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c7e73eafa139c29a38f73ab697e2e967a386908d"
      }
    ],
    "stats": {
      "total": 86,
      "additions": 61,
      "deletions": 25
    },
    "files": [
      {
        "sha": "7cf02218267d33fa66c550163bc27f15ddbcbd8a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 61,
        "deletions": 25,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63062bda1ac0b57cb92e663596650a6e42508f15/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63062bda1ac0b57cb92e663596650a6e42508f15/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=63062bda1ac0b57cb92e663596650a6e42508f15",
        "patch": "@@ -25,6 +25,12 @@\n import re\n import logging\n \n+BOLD = (\"\", \"\")\n+if os.name == 'posix':\n+    # primitive formatting on supported\n+    # terminal via ANSI escape sequences:\n+    BOLD = ('\\033[0m', '\\033[1m')\n+\n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n \n@@ -231,11 +237,6 @@ def main():\n     run_tests(test_list, config[\"environment\"][\"SRCDIR\"], config[\"environment\"][\"BUILDDIR\"], config[\"environment\"][\"EXEEXT\"], args.jobs, args.coverage, passon_args)\n \n def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=False, args=[]):\n-    BOLD = (\"\",\"\")\n-    if os.name == 'posix':\n-        # primitive formatting on supported\n-        # terminal via ANSI escape sequences:\n-        BOLD = ('\\033[0m', '\\033[1m')\n \n     #Set env vars\n     if \"BITCOIND\" not in os.environ:\n@@ -258,42 +259,54 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n         subprocess.check_output([tests_dir + 'create_cache.py'] + flags)\n \n     #Run Tests\n-    all_passed = True\n-    time_sum = 0\n-    time0 = time.time()\n-\n     job_queue = TestHandler(jobs, tests_dir, test_list, flags)\n+    time0 = time.time()\n+    test_results = []\n \n     max_len_name = len(max(test_list, key=len))\n-    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+\n     for _ in range(len(test_list)):\n-        (name, stdout, stderr, status, duration) = job_queue.get_next()\n-        all_passed = all_passed and status != \"Failed\"\n-        time_sum += duration\n-\n-        if status == \"Passed\":\n-            logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], name, BOLD[0], duration))\n-        elif status == \"Skipped\":\n-            logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], name, BOLD[0]))\n+        test_result, stdout, stderr = job_queue.get_next()\n+        test_results.append(test_result)\n+\n+        if test_result.status == \"Passed\":\n+            logging.debug(\"\\n%s%s%s passed, Duration: %s s\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n+        elif test_result.status == \"Skipped\":\n+            logging.debug(\"\\n%s%s%s skipped\" % (BOLD[1], test_result.name, BOLD[0]))\n         else:\n-            print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], name, BOLD[0], duration))\n+            print(\"\\n%s%s%s failed, Duration: %s s\\n\" % (BOLD[1], test_result.name, BOLD[0], test_result.time))\n             print(BOLD[1] + 'stdout:\\n' + BOLD[0] + stdout + '\\n')\n             print(BOLD[1] + 'stderr:\\n' + BOLD[0] + stderr + '\\n')\n \n-        results += \"%s | %s | %s s\\n\" % (name.ljust(max_len_name), status.ljust(7), duration)\n-\n-    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated)\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n-    print(results)\n-    print(\"\\nRuntime: %s s\" % (int(time.time() - time0)))\n+    print_results(test_results, max_len_name, (int(time.time() - time0)))\n \n     if coverage:\n         coverage.report_rpc_coverage()\n \n         logging.debug(\"Cleaning up coverage data\")\n         coverage.cleanup()\n \n+    all_passed = all(map(lambda test_result: test_result.status == \"Passed\", test_results))\n+\n     sys.exit(not all_passed)\n \n+def print_results(test_results, max_len_name, runtime):\n+    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+\n+    test_results.sort(key=lambda result: result.name.lower())\n+    all_passed = True\n+    time_sum = 0\n+\n+    for test_result in test_results:\n+        all_passed = all_passed and test_result.status != \"Failed\"\n+        time_sum += test_result.time\n+        test_result.padding = max_len_name\n+        results += str(test_result)\n+\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n+    results += \"Runtime: %s s\\n\" % (runtime)\n+    print(results)\n+\n class TestHandler:\n     \"\"\"\n     Trigger the testscrips passed in via the list.\n@@ -348,9 +361,32 @@ def get_next(self):\n                         status = \"Failed\"\n                     self.num_running -= 1\n                     self.jobs.remove(j)\n-                    return name, stdout, stderr, status, int(time.time() - time0)\n+\n+                    return TestResult(name, status, int(time.time() - time0)), stdout, stderr\n             print('.', end='', flush=True)\n \n+class TestResult():\n+    def __init__(self, name, status, time):\n+        self.name = name\n+        self.status = status\n+        self.time = time\n+        self.padding = 0\n+\n+    def __repr__(self):\n+        COLOR = (\"\", \"\")\n+        if os.name == 'posix':\n+            # primitive formatting on supported\n+            # terminal via ANSI escape sequences:\n+            if self.status == \"Passed\":\n+                COLOR = ('\\033[0m', '\\033[0;34m')\n+            elif self.status == \"Failed\":\n+                COLOR = ('\\033[0m', '\\033[0;31m')\n+            elif self.status == \"Skipped\":\n+                COLOR = ('\\033[0m', '\\033[1;30m')\n+\n+        return COLOR[1] + \"%s | %s | %s s\\n\" % (self.name.ljust(self.padding), self.status.ljust(7), self.time) + COLOR[0]\n+\n+\n def check_script_list(src_dir):\n     \"\"\"Check scripts directory.\n "
      }
    ]
  },
  {
    "sha": "bb92d839d5aecd41954091435a35e86b35a0a7ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYjkyZDgzOWQ1YWVjZDQxOTU0MDkxNDM1YTM1ZTg2YjM1YTBhN2Nh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-06T17:31:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-06T17:31:47Z"
      },
      "message": "[tests] Add unicode symbols for tests passing/failing/skipping",
      "tree": {
        "sha": "cb68e1e0bb623998b16bf839c97b0fdd2527a438",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cb68e1e0bb623998b16bf839c97b0fdd2527a438"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bb92d839d5aecd41954091435a35e86b35a0a7ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63062bda1ac0b57cb92e663596650a6e42508f15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63062bda1ac0b57cb92e663596650a6e42508f15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63062bda1ac0b57cb92e663596650a6e42508f15"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d40ca9bbc64af9f6514e020cd17683192a457f95",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bb92d839d5aecd41954091435a35e86b35a0a7ca/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bb92d839d5aecd41954091435a35e86b35a0a7ca/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=bb92d839d5aecd41954091435a35e86b35a0a7ca",
        "patch": "@@ -291,7 +291,7 @@ def run_tests(test_list, src_dir, build_dir, exeext, jobs=1, enable_coverage=Fal\n     sys.exit(not all_passed)\n \n def print_results(test_results, max_len_name, runtime):\n-    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS \", \"DURATION\") + BOLD[0]\n+    results = \"\\n\" + BOLD[1] + \"%s | %s | %s\\n\\n\" % (\"TEST\".ljust(max_len_name), \"STATUS   \", \"DURATION\") + BOLD[0]\n \n     test_results.sort(key=lambda result: result.name.lower())\n     all_passed = True\n@@ -384,7 +384,15 @@ def __repr__(self):\n             elif self.status == \"Skipped\":\n                 COLOR = ('\\033[0m', '\\033[1;30m')\n \n-        return COLOR[1] + \"%s | %s | %s s\\n\" % (self.name.ljust(self.padding), self.status.ljust(7), self.time) + COLOR[0]\n+        SYMBOL = \"  \"\n+        if self.status == \"Passed\":\n+            SYMBOL = \"\u2713 \"\n+        elif self.status == \"Failed\":\n+            SYMBOL = \"\u2716 \"\n+        elif self.status == \"Skipped\":\n+            SYMBOL = \"\u25cb \"\n+\n+        return COLOR[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), SYMBOL, self.status.ljust(7), self.time) + COLOR[0]\n \n \n def check_script_list(src_dir):"
      }
    ]
  },
  {
    "sha": "d80baaa514260334077799abbce4d7f16c2a538d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODBiYWFhNTE0MjYwMzM0MDc3Nzk5YWJiY2U0ZDdmMTZjMmE1Mzhk",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-07T13:15:29Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-07T13:15:29Z"
      },
      "message": "fixup - align summary row correctly and make colors/glyphs globals",
      "tree": {
        "sha": "6d227d7f86abca7a4c4277f45ce01f119cacb82d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d227d7f86abca7a4c4277f45ce01f119cacb82d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d80baaa514260334077799abbce4d7f16c2a538d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80baaa514260334077799abbce4d7f16c2a538d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d80baaa514260334077799abbce4d7f16c2a538d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d80baaa514260334077799abbce4d7f16c2a538d/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bb92d839d5aecd41954091435a35e86b35a0a7ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bb92d839d5aecd41954091435a35e86b35a0a7ca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bb92d839d5aecd41954091435a35e86b35a0a7ca"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "c0bbc623a899650736d69e93b129c498f8ce7306",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 17,
        "deletions": 18,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d80baaa514260334077799abbce4d7f16c2a538d/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d80baaa514260334077799abbce4d7f16c2a538d/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=d80baaa514260334077799abbce4d7f16c2a538d",
        "patch": "@@ -25,11 +25,18 @@\n import re\n import logging\n \n-BOLD = (\"\", \"\")\n+# Formatting. Default colors to empty strings.\n+BOLD, BLUE, RED, GREY = (\"\", \"\"), (\"\", \"\"), (\"\", \"\"), (\"\", \"\")\n+TICK = \"\u2713 \"\n+CROSS = \"\u2716 \"\n+CIRCLE = \"\u25cb \"\n if os.name == 'posix':\n     # primitive formatting on supported\n     # terminal via ANSI escape sequences:\n     BOLD = ('\\033[0m', '\\033[1m')\n+    BLUE = ('\\033[0m', '\\033[0;34m')\n+    RED = ('\\033[0m', '\\033[0;31m')\n+    GREY = ('\\033[0m', '\\033[1;30m')\n \n TEST_EXIT_PASSED = 0\n TEST_EXIT_SKIPPED = 77\n@@ -303,7 +310,8 @@ def print_results(test_results, max_len_name, runtime):\n         test_result.padding = max_len_name\n         results += str(test_result)\n \n-    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), str(all_passed).ljust(7), time_sum) + BOLD[0]\n+    status = TICK + \"Passed\" if all_passed else CROSS + \"Failed\"\n+    results += BOLD[1] + \"\\n%s | %s | %s s (accumulated) \\n\" % (\"ALL\".ljust(max_len_name), status.ljust(9), time_sum) + BOLD[0]\n     results += \"Runtime: %s s\\n\" % (runtime)\n     print(results)\n \n@@ -373,26 +381,17 @@ def __init__(self, name, status, time):\n         self.padding = 0\n \n     def __repr__(self):\n-        COLOR = (\"\", \"\")\n-        if os.name == 'posix':\n-            # primitive formatting on supported\n-            # terminal via ANSI escape sequences:\n-            if self.status == \"Passed\":\n-                COLOR = ('\\033[0m', '\\033[0;34m')\n-            elif self.status == \"Failed\":\n-                COLOR = ('\\033[0m', '\\033[0;31m')\n-            elif self.status == \"Skipped\":\n-                COLOR = ('\\033[0m', '\\033[1;30m')\n-\n-        SYMBOL = \"  \"\n         if self.status == \"Passed\":\n-            SYMBOL = \"\u2713 \"\n+            color = BLUE\n+            glyph = TICK\n         elif self.status == \"Failed\":\n-            SYMBOL = \"\u2716 \"\n+            color = RED\n+            glyph = CROSS\n         elif self.status == \"Skipped\":\n-            SYMBOL = \"\u25cb \"\n+            color = GREY\n+            glyph = CIRCLE\n \n-        return COLOR[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), SYMBOL, self.status.ljust(7), self.time) + COLOR[0]\n+        return color[1] + \"%s | %s%s | %s s\\n\" % (self.name.ljust(self.padding), glyph, self.status.ljust(7), self.time) + color[0]\n \n \n def check_script_list(src_dir):"
      }
    ]
  }
]