[
  {
    "sha": "9d55050773d57c0e12005e524f2e54d9e622c6e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDU1MDUwNzczZDU3YzBlMTIwMDVlNTI0ZjJlNTRkOWU2MjJjNmUy",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-06-03T19:55:45Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-10-23T16:02:24Z"
      },
      "message": "Add rules--presently disabled--for using GetMedianTimePast as endpoint for lock-time calculations\n\nThe lock-time code currently uses CBlock::nTime as the cutoff point for time based locked transactions. This has the unfortunate outcome of creating a perverse incentive for miners to lie about the time of a block in order to collect more fees by including transactions that by wall clock determination have not yet matured. By using CBlockIndex::GetMedianTimePast from the prior block instead, the self-interested miner no longer gains from generating blocks with fraudulent timestamps. Users can compensate for this change by simply adding an hour (3600 seconds) to their time-based lock times.\n\nIf enforced, this would be a soft-fork change. This commit only adds the functionality on an unexecuted code path, without changing the behaviour of Bitcoin Core.",
      "tree": {
        "sha": "5e07889ff64f153d39b0a4b06d5e2ac29621153f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e07889ff64f153d39b0a4b06d5e2ac29621153f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d55050773d57c0e12005e524f2e54d9e622c6e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46f74379b86be982b121bcb8c3cfe07fa80bffd0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46f74379b86be982b121bcb8c3cfe07fa80bffd0"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 54,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6d6ce7e0998e9248b65f4ee7fb47bb36216ed76a",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -13,4 +13,10 @@ static const unsigned int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n \n+/** Flags for LockTime() */\n+enum {\n+    /* Use GetMedianTimePast() instead of nTime for end point timestamp. */\n+    LOCKTIME_MEDIAN_TIME_PAST = (1 << 1),\n+};\n+\n #endif // BITCOIN_CONSENSUS_CONSENSUS_H"
      },
      {
        "sha": "499f2c3f767b65f9c282043727ba24f5635eacf1",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 5,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -650,10 +650,35 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx)\n+bool CheckFinalTx(const CTransaction &tx, int flags)\n {\n     AssertLockHeld(cs_main);\n-    return IsFinalTx(tx, chainActive.Height() + 1, GetAdjustedTime());\n+\n+    // By convention a negative value for flags indicates that the\n+    // current network-enforced consensus rules should be used. In\n+    // a future soft-fork scenario that would mean checking which\n+    // rules would be enforced for the next block and setting the\n+    // appropriate flags. At the present time no soft-forks are\n+    // scheduled, so no flags are set.\n+    flags = std::max(flags, 0);\n+\n+    // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n+    // nLockTime because when IsFinalTx() is called within\n+    // CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a\n+    // transaction can be part of the *next* block, we need to call\n+    // IsFinalTx() with one more than chainActive.Height().\n+    const int nBlockHeight = chainActive.Height() + 1;\n+\n+    // Timestamps on the other hand don't get any special treatment,\n+    // because we can't know what timestamp the next block will have,\n+    // and there aren't timestamp applications where it matters.\n+    // However this changes once median past time-locks are enforced:\n+    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n+                             ? chainActive.Tip()->GetMedianTimePast()\n+                             : GetAdjustedTime();\n+\n+    return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n \n unsigned int GetLegacySigOpCount(const CTransaction& tx)\n@@ -797,7 +822,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx))\n+    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -2723,10 +2748,15 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Check that all transactions are finalized\n-    BOOST_FOREACH(const CTransaction& tx, block.vtx)\n-        if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n+    BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n+        int nLockTimeFlags = 0;\n+        int64_t nLockTimeCutoff = (nLockTimeFlags & LOCKTIME_MEDIAN_TIME_PAST)\n+                                ? pindexPrev->GetMedianTimePast()\n+                                : block.GetBlockTime();\n+        if (!IsFinalTx(tx, nHeight, nLockTimeCutoff)) {\n             return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n+    }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n     // if 750 of the last 1,000 blocks are version 2 or greater (51/100 if testnet):"
      },
      {
        "sha": "65732d770f8811d9143764f9bf39f319002e3ab3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -308,8 +308,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n+ *\n+ * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n \n /** \n  * Closure representing one script verification"
      },
      {
        "sha": "053d9cdbc4ecca4fb22f747fb3d2551206f64d3b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -148,6 +148,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         CBlockIndex* pindexPrev = chainActive.Tip();\n         const int nHeight = pindexPrev->nHeight + 1;\n         pblock->nTime = GetAdjustedTime();\n+        const int64_t nMedianTimePast = pindexPrev->GetMedianTimePast();\n         CCoinsViewCache view(pcoinsTip);\n \n         // Priority order to process transactions\n@@ -162,7 +163,12 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->GetTx();\n-            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, pblock->nTime))\n+\n+            int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n+                                    ? nMedianTimePast\n+                                    : pblock->GetBlockTime();\n+\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, nHeight, nLockTimeCutoff))\n                 continue;\n \n             COrphan* porphan = NULL;"
      },
      {
        "sha": "cfe6a4052675fb4c2f6cd4b2ae7b50cf2bd1c5c0",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d55050773d57c0e12005e524f2e54d9e622c6e2/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "patch": "@@ -43,6 +43,9 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n+/** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n+\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types"
      }
    ]
  },
  {
    "sha": "dea8d21fc63e9f442299c97010e4740558f4f037",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZWE4ZDIxZmM2M2U5ZjQ0MjI5OWM5NzAxMGU0NzQwNTU4ZjRmMDM3",
    "commit": {
      "author": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-06-03T22:01:47Z"
      },
      "committer": {
        "name": "Mark Friedenbach",
        "email": "mark@friedenbach.org",
        "date": "2015-10-23T16:02:24Z"
      },
      "message": "Enable policy enforcing GetMedianTimePast as the end point of lock-time constraints\n\nTransactions are not allowed in the memory pool or selected for inclusion in a block until their lock times exceed chainActive.Tip()->GetMedianTimePast(). However blocks including transactions which are only mature under the old rules are still accepted; this is *not* the soft-fork required to actually rely on the new constraint in production.",
      "tree": {
        "sha": "a8a524a4a9f925d263400720a34cbfe4edd4b218",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8a524a4a9f925d263400720a34cbfe4edd4b218"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dea8d21fc63e9f442299c97010e4740558f4f037",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea8d21fc63e9f442299c97010e4740558f4f037",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dea8d21fc63e9f442299c97010e4740558f4f037",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dea8d21fc63e9f442299c97010e4740558f4f037/comments",
    "author": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "maaku",
      "id": 69154,
      "node_id": "MDQ6VXNlcjY5MTU0",
      "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maaku",
      "html_url": "https://github.com/maaku",
      "followers_url": "https://api.github.com/users/maaku/followers",
      "following_url": "https://api.github.com/users/maaku/following{/other_user}",
      "gists_url": "https://api.github.com/users/maaku/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maaku/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
      "organizations_url": "https://api.github.com/users/maaku/orgs",
      "repos_url": "https://api.github.com/users/maaku/repos",
      "events_url": "https://api.github.com/users/maaku/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maaku/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d55050773d57c0e12005e524f2e54d9e622c6e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d55050773d57c0e12005e524f2e54d9e622c6e2"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7027f1402f41a634a51c041f669fb1e21810384f",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea8d21fc63e9f442299c97010e4740558f4f037/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea8d21fc63e9f442299c97010e4740558f4f037/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=dea8d21fc63e9f442299c97010e4740558f4f037",
        "patch": "@@ -44,7 +44,7 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n /** Used as the flags parameter to CheckFinalTx() in non-consensus code */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = 0;\n+static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_MEDIAN_TIME_PAST;\n \n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**"
      },
      {
        "sha": "827525783a36913a3d241804d4f746243032f84c",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dea8d21fc63e9f442299c97010e4740558f4f037/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dea8d21fc63e9f442299c97010e4740558f4f037/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=dea8d21fc63e9f442299c97010e4740558f4f037",
        "patch": "@@ -4,6 +4,7 @@\n \n #include \"chainparams.h\"\n #include \"coins.h\"\n+#include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"main.h\"\n #include \"miner.h\"\n@@ -229,7 +230,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx));\n+    BOOST_CHECK(!CheckFinalTx(tx, LOCKTIME_MEDIAN_TIME_PAST));\n \n     // time locked\n     tx2.vin.resize(1);\n@@ -243,7 +244,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n     mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n-    BOOST_CHECK(!CheckFinalTx(tx2));\n+    BOOST_CHECK(!CheckFinalTx(tx2, LOCKTIME_MEDIAN_TIME_PAST));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n \n@@ -261,7 +262,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     //BOOST_CHECK(CheckFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n-    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 2);\n     delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;"
      }
    ]
  }
]