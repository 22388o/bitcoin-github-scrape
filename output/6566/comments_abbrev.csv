btcdrak,2015-09-23T22:52:48Z,needs rebase\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-142754265,142754265,
maaku,2015-10-16T00:27:20Z,This pull request has been updated to no longer be dependent on #6312 or #6564.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-148560327,148560327,
dcousens,2015-10-16T00:33:24Z,@maaku awesome.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-148561038,148561038,
CodeShark,2015-10-19T02:23:28Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149079502,149079502,
btcdrak,2015-10-19T09:04:23Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149152068,149152068,
maaku,2015-10-19T21:09:35Z,Nits addressed and rebased.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149348318,149348318,
btcdrak,2015-10-19T22:33:42Z,Looks like Travis randomly borked. Needs another force push.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149366494,149366494,
maaku,2015-10-20T00:32:09Z,Travis is happy.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149385143,149385143,
dcousens,2015-10-20T10:16:36Z,"~~How does this mempool-only change stop the miners from just using their own mempool policies?~~\n\n**edit:** nvm\n\n>  This is not the soft-fork required to actually rely on the new constraint in production.\n\n---\n\nconcept ACK,  though I'd prefer to see a plan for merging the soft-fork before accepting this.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149511238,149511238,
btcdrak,2015-10-20T11:20:41Z,@dcousens These rules will be eventually enforced through a soft-fork.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149531485,149531485,
btcdrak,2015-10-20T13:03:57Z,"@dcousens As discussed at the RC meeting on the 15th, we aim to roll this out with CLTV using standard ISM.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149561636,149561636,
rustyrussell,2015-10-21T00:03:22Z,Ack.  Please apply soon :)\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149739706,149739706,
instagibbs,2015-10-21T00:49:45Z,ACK. \n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-149745568,149745568,
jmcorgan,2015-10-21T19:38:16Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150003294,150003294,
afk11,2015-10-21T22:53:57Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150047105,150047105,
rubensayshi,2015-10-22T09:43:21Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150163322,150163322,
gmaxwell,2015-10-22T18:16:42Z,I think this code would be easier to be confident if it was (and would remain) consensus-correct if it introduced a second IsFinal() (or the like) and then used that explicitly from the mempool codepath. The max on the flags is a fairly weird operation. \n\nConcept ACK.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150310861,150310861,
petertodd,2015-10-22T19:40:03Z,"utACK\n\n@gmaxwell's nit doesn't bother me, as the CheckFinalTx() function wasn't supposed to be used in consensus code anyway.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150334351,150334351,
jtimon,2015-10-22T19:44:55Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150335419,150335419,
dcousens,2015-10-23T00:28:50Z,"Agreed with @gmaxwell,  lets remove the flag and just have two functions.\nIt would be trivially short anyway.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150394660,150394660,
luke-jr,2015-10-23T02:41:27Z,"@gmaxwell The max is only in CheckFinalTx (not IsFinal), which is never used for consensus-critical code...\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150416846,150416846,
luke-jr,2015-10-23T02:42:35Z,"utACK, although prefer if at least [this nit](https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42828565) is done before merge.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150417092,150417092,
maaku,2015-10-23T16:03:17Z,I believe that nits have been addressed and this is ready for merge. @laanwj ?\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-150618824,150618824,
luke-jr,2015-11-01T18:57:20Z,"It seems to me BIP 113 is actually a hardfork being treated as a softfork, at least how it currently stands, and this PR will potentially produce invalid blocks. Suggest reverting it and thinking through revising the BIP to be an actual softfork.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152851964,152851964,
sipa,2015-11-01T19:02:39Z,"In my understanding - but this is just a rough check - it seems that Luke is right. A transaction whose locktime is between a block's nTime and its GetMedianTimePast() will be accepted post-BIP113 and not before. That looks like going from invalid to valid, which is a hard fork.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152852216,152852216,
maaku,2015-11-01T19:03:50Z,"Could you explain why it is a hard fork?\nOn Nov 1, 2015 10:58 AM, ""Luke-Jr"" notifications@github.com wrote:\n\n> It seems to me BIP 113 is actually a hardfork being treated as a softfork,\n> at least how it currently stands, and this PR will potentially produce\n> invalid blocks. Suggest reverting it and thinking through revising the BIP\n> to be an actual softfork.\n> \n> â€”\n> Reply to this emai",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152852275,152852275,
maaku,2015-11-01T19:05:49Z,"A valid block cannot have a nTime less than GetMedianTimePast + 1.\nOn Nov 1, 2015 11:03 AM, ""Pieter Wuille"" notifications@github.com wrote:\n\n> In my understanding - but this is just a rough check - it seems that Luke\n> is right. A transaction whose locktime is between a block's nTime and its\n> GetMedianTimePast() will be accepted post-BIP113 and not before. That looks\n> like going from inval",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152852363,152852363,
sipa,2015-11-01T19:09:40Z,"Assume you have a perfect sequence of blocks, where block at height N has timestamp N*600.\n\nBlock 12 has timestamp 7200. Its mediantimepast() is 3600. It is valid as 7200 is >= 3601.\n\nA transaction has nLockTime 5000. It is invalid currently in block 12, as 5000 is below 7200. Post BIP113, it is valid, as it is above 3600.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152852532,152852532,
gmaxwell,2015-11-02T04:49:02Z,"@sipa No, we're being silly.   The requirement is that the txlocktime be _above_ $thing.  Under the old rule $thing was blocktime,  under this rule it is MTP.   Since blocktime is already required to be greater than MTP,  it's fine.\n\n5000 < 7200   so that transaction is valid now.   It is > 3600 so it wouldn't be accepted by MTP.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152912106,152912106,
NicolasDorier,2015-11-02T05:50:49Z,> The requirement is that the txlocktime be above $thing. Under the old rule $thing was blocktime.\n\nSo the requirement is : blocktime < txlocktime\n[blocktime]7200 < [txlocktime]5000  evaluate to false so the transaction is invalid now.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152920714,152920714,
sipa,2015-11-02T05:58:47Z,"Indeed, I was wrong. I assumed that the tx timestamp was supposed to be above the block timestamp - not sure why I made that assumption - and even looking at the code didn't convince me otherwise.\n\nI'm now convinced this is not a problem.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152921915,152921915,
NicolasDorier,2015-11-02T07:33:37Z,> The requirement is that the txlocktime be above $thing\n\nThe requirement is that the txlocktime be _under_ $thing. Not above !\n@sipa your example seemed right and this is indeed a hardfork.\n,https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152942575,152942575,
sipa,2015-11-02T07:47:41Z,"The requirement is the the blocktime is above the txlocktime, not the other way around.\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152944699,152944699,
NicolasDorier,2015-11-02T07:59:25Z,"Got it. This is what I said (txlocktime be under blocktime == blocktime be above txlocktime), but got confused by gmaxwell remark who refuted your point by saying wrongly ""txlocktime be above blocktime"".\n\nI hate comparisons. :(\n",https://github.com/bitcoin/bitcoin/pull/6566#issuecomment-152946091,152946091,
CodeShark,2015-10-19T02:21:01Z,"Minor nit: Other than removing the assertion on cs_main, is there any advantage to calling IsFinalTx directly rather than CheckFinalTx? If that difference could be important I would suggest having two versions of CheckFinalTx, one that does not have the assertion and one that has the assertion and calls the other one, since the rest of the logic seems to just be getting duplicated.\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42332216,42332216,src/main.cpp
btcdrak,2015-10-19T02:33:48Z,style nit: braces not required for this `if`\n,https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42332621,42332621,src/main.cpp
jtimon,2015-10-19T10:07:17Z,"IsFinalTx is compatible with libconsensus, CheckFinalTx (by using globals) is not.\nConsensus functions cannot access globals like chainActive or GetAdjustedTime() directly.\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42354524,42354524,src/main.cpp
maaku,2015-10-19T17:59:07Z,Braces already existed. Principle of smallest diff :)\n,https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42404017,42404017,src/main.cpp
maaku,2015-10-19T18:02:36Z,"This isn't consensus code though. @CodeShark is right, we can save some lines by calling CheckFinalTx with an explicit flags parameter. I've made the change.\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42404520,42404520,src/main.cpp
laanwj,2015-10-22T09:29:02Z,Why is this `(1<<1)` and not `(1<<0)` ? I don't think it interacts with any other flags. Hard to see from the context.\n,https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42727618,42727618,src/consensus/consensus.h
laanwj,2015-10-22T09:31:52Z,"If the value comes from the BIP, please add a reference\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42727916,42727916,src/consensus/consensus.h
laanwj,2015-10-22T09:34:31Z,"Add a comment about the flags field, e.g. where they come from\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42728075,42728075,src/main.h
laanwj,2015-10-22T09:45:00Z,"There's nothing about brace usage for single-statement blocks in the developer-guide, so let's not nit about this. Also personally I like using braces everywhere where possible to avoid famous bugs like\n\n```\nif (something)\n    do_something_else();\n    goto handle_error;\n```\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42728857,42728857,src/main.cpp
btcdrak,2015-10-22T09:54:52Z,"OK, agreed.\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42729640,42729640,src/main.cpp
jtimon,2015-10-22T19:41:30Z,almost-bike-shedding: Are we going to have CheckFinalTx flags or something more generic like Transaction validation flags?\n,https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42796070,42796070,src/consensus/consensus.h
maaku,2015-10-22T19:50:37Z,"Because #6312, which this was originally built on top of, uses `(1<<0)`.\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42797032,42797032,src/consensus/consensus.h
luke-jr,2015-10-23T02:30:29Z,"I suggest this should check that the _correct_ transaction was included.\n\nPreferably, the test should go on to produce a block that translates into the second transaction being included as well.\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42828266,42828266,src/test/miner_tests.cpp
luke-jr,2015-10-23T02:37:54Z,"I don't see why this can't be moved to a const like nMedianTimePast, and skip calculating it for every mempool tx?\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42828565,42828565,src/miner.cpp
maaku,2015-10-23T15:52:08Z,"These flags are passed to `LockTime()`. Adding a bunch of other flag definitions which are not used by `LockTime()` would only cause confusion, I think.\n",https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42881236,42881236,src/consensus/consensus.h
maaku,2015-10-23T15:57:13Z,Any compiler more recent than the 1960's will evaluate an expression consisting entirely of literals at compile time. In this case I prefer the clarity of specifying what is being tested in-line.\n,https://github.com/bitcoin/bitcoin/pull/6566#discussion_r42881848,42881848,src/miner.cpp
NicolasDorier,2015-10-27T02:00:05Z,nLockTimeCutoff assignment could be move outside the loop. \nIs it because nLockTimeFlags will eventually be decided by the version of the transaction ?\n,https://github.com/bitcoin/bitcoin/pull/6566#discussion_r43077185,43077185,src/main.cpp
