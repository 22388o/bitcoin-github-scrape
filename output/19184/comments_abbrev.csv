DrahtBot,2020-06-06 12:51:51,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19306 (refactor: Replace RecursiveMutex with Mutex in CTxMemPool by hebasto)\n* #19134 (test: Replace global wait_until w",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-640056405,640056405,
naumenkogs,2020-06-09 15:41:59,"Concept ACK.\n\nI was reading the description and this part is a bit unclear:\n\n>Transactions are requested from new candidates as soon as old requests expire, or NOTFOUND is received, or invalid transactions are received (i.e. this includes the functionality added by, and replaces,  [#18238](https://github.com/bitcoin/bitcoin/pull/18238) ).\n\nWhy invalid transactions are re-requested? May",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-641389060,641389060,
sipa,2020-06-09 16:29:58,"> Why invalid transactions are re-requested? Maybe I can figure out after reading the code, but right now this is confusing.\n\nIt requires invalid witnesses. When you request a txid T from peer A, and get a response with a transaction with invalid witness, but txid T, then the announcement (T,A) gets marked as COMPLETED.",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-641416882,641416882,
amitiuttarwar,2020-06-18 17:30:19,Concept ACK ,https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-646202215,646202215,
ariard,2020-06-22 09:39:57,"Concept ACK, I think that's a great move to dissociate message paths by class (addr, block, transaction, filters) instead of having all of them melt down in `net_processing`.\n\nI will do an approach ACK soon, but sounds to me this add more reliance on `boost` ? Also as it's a critical part of the codebase how do we build confidence of the correctness of this new transaction request logic implem",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-647405500,647405500,
ajtowns,2020-06-22 17:34:13,"> sounds to me this add more reliance on `boost` ?\n\nIt uses boost multi_index, which is also needed by the mempool (which does lookups by txid and feerate eg). If we found (or created) a replacement for that there, it should work here too, so I don't think it's much of an increase in the dependency.",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-647672729,647672729,
sipa,2020-06-22 18:55:08,"@ariard As @ajtowns said, we're already relying on boost/multi_index for CTxMemPool. I also spent a week or two thinking about how to implement this with custom data structures, but it's... really hard to match the same performance/memory usage characteristics without multi_index. So I think it's just the right tool for the job, plus it's a headers-only library (so it doesn't introduce runtime dep",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-647711219,647711219,
sipa,2020-07-01 04:40:04,"@gmaxwell suggested that the ""first"" feature (the very first peer to announce a transaction gets priority over other outbound or other inbounds) is changed to instead apply to the first not-max-in-flight peer. The idea is that this would prevent an attacker who races announcements, but doesn't respond, will (as soon as they reach their max-in-flight) not be able to interfere with chains of depende",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-652185602,652185602,
practicalswift,2020-07-10 21:29:45,"Concept ACK\n\nVery nice fuzzing harness!",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-656899884,656899884,
sipa,2020-07-18 03:27:54,"I've made a few changes:\n* Instead of having an outbound/inbound flag, `ReceivedInv` now just takes an explicit delay parameter. Entries with delay 0 are preferred. This matches reality more closely (as the `outbound` property wasn't exactly for outbound peers, but also other whitelisted ones). It is also more compatible with the approach taken in #18044 (where the delay becomes a function of bo",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-660416603,660416603,
sipa,2020-07-23 00:39:55,"@ariard Thanks for the thorough review. I'll go over your comments soon, but know there are a few imminent changes first (namely the suggestion https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-652185602, and adding support for wtxid relay tracking from #18044). If you want to help working on the tests, it's probably best to wait until those are complete.",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-662766191,662766191,
jonatack,2020-07-30 05:19:24,"Concept ACK, on first read-through the changes look good, will review when this comes out of draft status.",https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-666121050,666121050,
instagibbs,2020-08-20 19:14:47,concept ACK,https://github.com/bitcoin/bitcoin/pull/19184#issuecomment-677849573,677849573,
jnewbery,2020-06-19 21:14:45,This isn't required. We never copy construct a priority computer.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443046657,443046657,src/txrequest.h
jnewbery,2020-06-19 21:20:01,missing `*`. I don't know if this messes with doxygen parsing.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443048114,443048114,src/txrequest.h
jnewbery,2020-06-19 21:30:10,Is there a reason to specify the underlying type here? Is it required so that it can be packed into 3 bits in the Entry bitfield below?,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443051085,443051085,src/txrequest.h
jnewbery,2020-06-19 21:31:10,nit: sort this above `REQUESTED` so it's next to the other `CANDIDATE_` entries.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443051438,443051438,src/txrequest.h
sipa,2020-06-19 23:26:41,Fixed.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443076494,443076494,src/txrequest.h
sipa,2020-06-19 23:26:47,Fixed.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443076518,443076518,src/txrequest.h
sipa,2020-06-19 23:27:52,"Yeah, my concern is that otherwise an unsigned type may be picked, and I don't know how that would interact with it being used as a bitfield.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443076681,443076681,src/txrequest.h
sipa,2020-06-19 23:29:46,"That doesn't work directly, as EntryTxid's sort order relies on the ordering of these fields. It could use its own enum with the necessary order, that ExtractTxid maps to, but that feels like overkill.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443076966,443076966,src/txrequest.h
ajtowns,2020-06-20 06:09:43,Maybe worth adding a comment in the enum definition that the ordering is relied upon by the code that uses the ByTxid indexes. Reordering in ExtractTxid seems like overkill to me too fwiw.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443105454,443105454,src/txrequest.h
sipa,2020-06-20 17:51:26,Done.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r443148041,443148041,src/txrequest.h
hebasto,2020-06-23 16:12:53,"3d5b4f20015246b7a0dd74b2dc89f389204dd9b8\n\n```suggestion\n#endif // BITCOIN_TXREQUEST_H\n```\n\nSee: [Source code organization](https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#source-code-organization)",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444343931,444343931,src/txrequest.h
hebasto,2020-06-23 16:19:51,"3d5b4f20015246b7a0dd74b2dc89f389204dd9b8\n\nnanonit: the word ""completed"" associates with a ""success"" for me (but I'm not a native English speaker though). These entries are not processed successfully, i.e., a transaction has not been received. Maybe rename `COMPLETED` to more general `PROCESSED` or something similar?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444348343,444348343,src/txrequest.h
hebasto,2020-06-23 16:25:41,"3d5b4f20015246b7a0dd74b2dc89f389204dd9b8\n\nIt is not clear for me why the `ReceivedResponse()` ""should be called whenever a transaction ... was received from a peer"". It is not the case for a `COMPLETED` entry, no?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444351986,444351986,src/txrequest.h
jnewbery,2020-06-23 21:20:50,"I'm trying not to leave too many nits at this stage, but what kind of maniac breaks lines between the type and parameter name?!",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444515524,444515524,src/txrequest.h
jnewbery,2020-06-23 22:29:02,Agree that a comment is sufficient. ,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444543479,444543479,src/txrequest.h
jnewbery,2020-06-23 22:34:19,"I'm getting this build warning:\n\n```\nIn file included from txrequest.cpp:5:0:\n./txrequest.h:158:25: warning: ‘TxRequestTracker::Entry::m_state’ is too small to hold all values of ‘enum class TxRequestTracker::State’\n         State m_state : 3;\n                         ^\n```\n\nconfigure output:\n\n```\n  target os     = linux\n  build os      = linux-gnu\n\n  CC            = ",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444545289,444545289,src/txrequest.h
jnewbery,2020-06-23 22:43:32,"I didn't understand why you were defining this alias until I tried to recompile without and it barfed. Do you think a comment that this is required for the Key Extractor concept (https://www.boost.org/doc/libs/1_54_0/libs/multi_index/doc/reference/key_extraction.html#key_extractors) would help, or is this well known?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444548281,444548281,src/txrequest.h
jnewbery,2020-06-23 22:45:47,"`s/CANDIDATE{OTHER,_DELAYED,_BEST}/CANDIDATE_{NEW,BEST,OTHER}/`",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444549027,444549027,src/txrequest.h
jnewbery,2020-06-24 00:29:53,"I don't think this will ever do anything. By the time we process this orphan transaction, we will have already called `AlreadyHaveTx()` in a `SendMessages()` call.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444579417,444579417,src/net_processing.cpp
jnewbery,2020-06-24 00:37:43,"There's a slight inconsistency here: if the transaction is successfully accepted to the mempool, then we call `AlreadyHaveTx()` immediately to remove it from `g_txrequest`, but if it's an orphan, then we only call `AlreadyHaveTx()` the next time a peer would potentially request it in `SendMessages()` (and I think the `AlreadyHaveTx()` call in `ProcessOrphanTx()` is basically always a no-op).\n\n",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444581417,444581417,src/net_processing.cpp
ajtowns,2020-06-24 00:50:48,"Looks like that warning is kind-of a bug in gcc (you can [apparently](https://gcc.gnu.org/legacy-ml/gcc/2017-10/msg00129.html) put any value from the underlying type in the enum, and it's complaining that they won't all fit), but it's not fixed until gcc 8.4 or 9.3 -- https://gcc.gnu.org/bugzilla/show_bug.cgi?id=61414\n\nEDIT: (the example given in the linked list post for putting values from th",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444584736,444584736,src/txrequest.h
sipa,2020-06-24 02:50:57,"I've struggled with a good name for this, actually, and changed it a few times. The problem is that it corresponds to a number of scenarios:\n\n* We've received the transaction (but we don't know (yet) if it's a valid one)\n* We've received the transaction with an invalid witness\n* We've received a NOTFOUND message for the transaction\n* The request timed out\n\nI don't think `PROCESSED` i",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444615293,444615293,src/txrequest.h
sipa,2020-06-24 02:51:50,`ReceivedResponse` is what marks the entry as `COMPLETED`.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444615509,444615509,src/txrequest.h
sipa,2020-06-24 02:53:14,"@jnewbery Does it help if you remove the `: uint8_t`?\n\nIf this is too annoying we can just store the state as a non-`enum` type.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444615824,444615824,src/txrequest.h
sipa,2020-06-24 02:56:11,🤪,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444616552,444616552,src/txrequest.h
sipa,2020-06-24 03:33:55,Done. Changed to store it as a `uint8_t`.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444625237,444625237,src/txrequest.h
sipa,2020-06-24 03:34:05,Done.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444625278,444625278,src/txrequest.h
sipa,2020-06-24 03:34:16,Fixed.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444625313,444625313,src/txrequest.h
sipa,2020-06-24 03:35:03,"Yes sorry John, you're obviously an idiot if you don't know the boost reference documentation by heart ;)\n\nDone.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444625506,444625506,src/txrequest.h
sipa,2020-06-24 03:35:12,Done.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444625532,444625532,src/txrequest.h
ajtowns,2020-06-24 03:42:48,"Thinking about the case where someone malleates the witness for a tx relayed by txid not wtxid; should we maybe ... I don't know, track the other peers that offered the tx as part of the orphan record, so that we can try getting the correct witness data once we have the parents and can actually see if maybe the witness data was malleated?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444627285,444627285,src/net_processing.cpp
jnewbery,2020-06-24 13:30:33,"Pieter and I were discussing just this yesterday. The behaviour you describe (not rerequesting an orphan transaction from another announcing peer if we later discover that its witness is mutated) also exists in master. As soon as we put a transaction in `mapOrphanTransactions` it'll return true from `AlreadyHave()` and will then be removed from each peer's `TxDownloadState`.\n\nI think it's ok t",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444894338,444894338,src/net_processing.cpp
hebasto,2020-06-28 09:03:53,"272a615fad6f93e1b7f9b6245ce9090d07fb4a51\n\nThere is `SipHashUint256Extra(uint64_t, uint64_t, uint256&, uint32_t)` in the `crypto/siphash` module.\nIs it worth to add the reusable `SipHashUint256Extra64(uint64_t, uint64_t, uint256&, uint64_t)` there?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r446623480,446623480,src/txrequest.h
hebasto,2020-06-28 09:59:41,"272a615fad6f93e1b7f9b6245ce9090d07fb4a51\n\nNo warnings are observed on GCC 9.3.0.\nWhat GCC version you are referring to?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r446629277,446629277,src/txrequest.h
hebasto,2020-06-28 10:41:55,"272a615fad6f93e1b7f9b6245ce9090d07fb4a51\n\nCould passing the `peer` to `SetTimePoint()` improve efficiency by not processing entries related to other peers?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r446633732,446633732,src/txrequest.cpp
hebasto,2020-06-28 12:48:35,"IIUC, `TxRequestTracker::MakeCompleted()` relies on the fact that `COMPLETED` is the last entry in the enum `State`.\nCould a relevant comment be added here to preserve any breakdown in the future?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r446646962,446646962,src/txrequest.h
sipa,2020-07-01 21:36:11,"That's a good suggestion, but I don't think it would actually be desirable (but fortunately, it also wouldn't gain any efficiency). An earlier design of this code worked like that, but I decided to move off that.\n\nSay we're calling `GetRequestable` for peer A. There is a txid T that was announced by peer A and peer B. For some reason, peer B is currently the `CANDIDATE_BEST` peer for T, but it",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r448628973,448628973,src/txrequest.cpp
sipa,2020-07-01 21:37:29,See https://github.com/bitcoin/bitcoin/pull/19184#discussion_r444545289,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r448629480,448629480,src/txrequest.h
sipa,2020-07-01 21:37:57,"I think this may make sense as a follow-up, but probably deserves benchmarks etc.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r448629656,448629656,src/txrequest.h
promag,2020-07-01 21:55:15,"c204530ae289c263f0a9b791bbcd031a552c3253\n\n> and std::next(it) may be deleted in the process\n\nAnd is it safe to use `it` if next is erased? Otherwise I was expecting `lower_bound` call in each iteration.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r448636680,448636680,src/txrequest.cpp
sipa,2020-07-01 22:20:50,"Yes, iterator validation for multi_index entries is like std::set; erasing entries does not affect the validity of iterators to other entries.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r448645723,448645723,src/txrequest.cpp
sipa,2020-07-05 02:53:58,"I prefer to keep the fast-path AlreadyHaveTx calls when transactions/blocks come in, as they may in some cases be much faster than the AlreadyHave detection after GetRequestable (in particular, when the only alternative peer(s) are timing out).\n\nYou're right though that the code is inconsistent: orphans in the orphan pool are considered AlreadyHave, so txids should be reported as AlreadyHaveTx",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r449824561,449824561,src/net_processing.cpp
elichai,2020-07-06 12:17:59,Somewhat related ;) https://github.com/bitcoin/bitcoin/pull/18014,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r450180923,450180923,src/txrequest.h
ariard,2020-07-22 23:08:11,"259bf92\n\nIt wasn't clear at first read if `m_first` was applying for each set or the union of them. Why not restrain `m_first` to non-delayed peer only to favor fastest among more trusted peers ? We always favor non-delayed ones over delayed ones, so in `PromoteCandidateNew`, an entry from the former is likely to be favored but we sorting them uniformly randomly obviously don't favor the faste",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459133311,459133311,src/txrequest.h
ariard,2020-07-22 23:10:23,"259bf92\n\nI think it's a bit confusing to talk about delayed/non-delayed peers. Transaction entries in function of their announcing peers types but we may process those uniformly in other context. Also random order minus bias for first announcer ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459133991,459133991,src/txrequest.h
ariard,2020-07-22 23:12:07,"259bf92\n\nWhat do you mean exactly here ? If a transaction has been successfully received (AlreadyHave() == true) we won't re-request anyway, unless `g_recently_confirmed` rolls over ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459134558,459134558,src/txrequest.h
ariard,2020-07-22 23:24:08,"259bf92\n\nI think you might laid out more high-level properties of transaction request logic here, among others:\n\n""Transaction downloads never guarantee to succeed, namely receiving transaction if you hear about its identifier. Success should be define as a best-effort, guaranteeing we advance towards entry removal for any peer who announced a txid""\n\n""To optimize bandwidth-saving, we li",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459138430,459138430,src/txrequest.h
ariard,2020-07-22 23:27:26,"259bf92\n\nYou should underscore state transition to CANDIDATE_BEST for the highest-scored CANDIDATE_READY. If we reintroduce in-flight rate-limiting we should avoid that a malicious A disconnecting can slowdown fetching from B, unique peer also announcing the malevolent set of txn max-in-flight-sized.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459139468,459139468,src/txrequest.h
ariard,2020-07-22 23:28:41,"259bf92\n\nAh naming is hard, `AlreadyEvaluatedTx`/`AlreadyProcessedTx` to avoid collision with `AlreadyHave` ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459139843,459139843,src/txrequest.h
ariard,2020-07-22 23:29:42,"259bf92\n\nWhy make it configurable ? A minority of nodes tuning this variable would break privacy attackers assumptions ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459140164,459140164,src/txrequest.h
ariard,2020-07-22 23:36:57,"259bf92\n\nActually I think this state only exists between `GetRequestable` and `RequestedTx`. Accessing `AlreadyHave` inside TxRequestTracker would allow to remove it and directly transition from READY to REQUESTED (though you have to tight more `PromoteCandidateNew` and `GetRequestable` because former yells BEST among txid indice). I guess you thought about it but deferred to future work ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459142436,459142436,src/txrequest.h
ariard,2020-07-22 23:40:51,"259fb92 \n\nCan you underscore more rational of m_sequence ? As it is only effect is to implicitly ensure transaction topology-order of GETDATAs if INVs received have been so but without guaranteeing chain of transactions are all fetched from same announcing peer ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459143538,459143538,src/txrequest.h
ariard,2020-07-22 23:42:15,"259fb92\n\nMaybe annotate worst-case memory size of this data structure : `MAX_PEER_ANNOUNCEMENTS` * max_connections * sizeof(Entry) ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459143938,459143938,src/txrequest.h
ariard,2020-07-22 23:43:17,"259fb92\n\nAfter last changes, `PromoteCandidateReady` ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459144236,459144236,src/txrequest.h
ariard,2020-07-23 00:07:39,"259fb92\n\nWe call `ReceivedInv` on the behalf of a peer sending us an orphan tx. Is following scenario plausible ?\n* Malicia sends N txn to Alice and N' conflicting to Bob\n* Malicia sends txB child spending from all parent of N to Alice\n* Alice sends txB to Bob, at reception Bob calls `RequestTx/ReceivedInv` on behalf of Alice\n* Malicia repeats this trick until reaching Alice's  MAX_PEE",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459151052,459151052,src/txrequest.h
ariard,2020-07-23 00:09:30,"259fb92\n\nnit: The first-sorted _READY ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459151500,459151500,src/txrequest.cpp
ariard,2020-07-23 00:12:30,"Time going backward wouldn't be a hint of some clock manipulation and thus we should interpret this as a system failure and halting ? AFAICT, `GetAdjustedTime()` can go backward due to relying on peers clocks but we are relying on `GetTime<T>` here.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459152310,459152310,src/txrequest.cpp
ariard,2020-07-23 00:16:10,"259fb92\n\nMaybe add as a comment ""If transaction has already been evaluated once for this block tip, delete unconditionally all its entries.""\n\nIs this a slight behavior change ?  Previously we would have only delete transaction from download for this peer. If you received a block between peers processing you have flushed `recentRejects` and so here return a different evaluation.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459153327,459153327,src/txrequest.cpp
ariard,2020-07-23 00:20:47,"259fb92\n\nThe ByPeer index second member as true signals a state equal to CANDIDATE_BEST but I'm not sure if you can effectively hit here. An entry state is _BEST only between `GetRequestable` and either `RequestedTx/AlreadyHaveTx`, both of them respectively transitioning to REQUESTED/entry removal.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459154501,459154501,src/txrequest.cpp
ariard,2020-07-23 00:23:34,"259fb92\n\nnit: I think this control flow conditional could be replaced by a method `IsLastCompleted` like we have `IsSelected/IsSelectable`. Easier to reason.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459155219,459155219,src/txrequest.cpp
ariard,2020-07-23 00:26:04,"4f4f2f2\n\nIf `fAlreadyHave==true` call `AlreadyHaveTx` to clean transaction entries early ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459155891,459155891,src/net_processing.cpp
ariard,2020-07-23 00:27:59,"4f4f2f2\n\nMaybe you can parameterize `GetRequestable` with MAX_GETDATA_SZ to avoid leftover marked as REQUESTED but not effectively fetched and thus wasting a `GETDATA_TX_INTERVAL` for them ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459156379,459156379,src/net_processing.cpp
ariard,2020-07-23 00:30:50,"75fd5dc\n\nI think `AlreadyHaveTx` and time-goes-backward of `SetTimePoint` aren't covered? I'll try to add them soon, also `ReceivedResponse` should be called unconditionally at the end of each test to verify clean state ? ",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r459157066,459157066,src/test/txrequest_tests.cpp
sipa,2020-09-21 09:34:47,"The ""first"" concept works differently now. Have a look at https://github.com/bitcoin/bitcoin/pull/19988 to see if your comment still applies.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491907032,491907032,src/txrequest.h
sipa,2020-09-21 09:36:46,"See #19988. The ""delayed""/""nondelayed"" distinction doesn't exist anymore. There is an explicit separate boolean to `ReceivedInv` now for preferred/nonpreferred, and a way to specify reqtime explicitly. (in particular, because txid peers get a delay, even though they're not preferred like outbounds are - so these concepts needed to be split).",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491908086,491908086,src/txrequest.h
sipa,2020-09-21 09:38:49,"It is just clarifying when a transaction is forgotten about, which can happen when either no candidates for a tx remain, or when the transaction is successfully received. Only the first of those two matters to re-requesting, but it's still important to specify that transactions are forgotten about when they're successfully received. See if it's clearer now.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491909245,491909245,src/txrequest.h
sipa,2020-09-21 09:41:57,"No, the description here is about the specification, where the distinction between the various CANDIDATE classes doesn't exist; that's an implementation detail.\n\nThere are many caveats to having in-flight limits... I couldn't come up with a way to do it basically, and then realized it's not desirable either (if a peer is overloaded, but still the only one to announce a tx, we still want to fet",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491911161,491911161,src/txrequest.h
sipa,2020-09-21 09:43:17,"It was made configurable to simplify testing.\n\nIn the new PR the setting is gone, and `RequestedTx` now takes an explicit `exptime` parameter instead.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491911913,491911913,src/txrequest.h
sipa,2020-09-21 09:48:02,"It's not that simple, unfortunately.\n\n`GetRequestable` moves time (making things best/ready if they pass reqtime, making them completed if they pass exptime) for _all_ entries - not just those of the peer `GetRequestable` was called for. This is necessary, as otherwise you can't fairly decide what to give to which peer (the peer you're calling for may have an announcement that just became read",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491916346,491916346,src/txrequest.h
sipa,2020-09-21 09:48:28,"That's it, exactly.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491916756,491916756,src/txrequest.h
sipa,2020-09-21 09:50:40,"Time jumping backwards can happen for completely innocuous reasons, like leap seconds. Only monotonic clocks are guaranteed not to do that.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491918140,491918140,src/txrequest.cpp
sipa,2020-09-21 09:53:35,"> Maybe add as a comment ""If transaction has already been evaluated once for this block tip, delete unconditionally all its entries.""\n\nI don't understand what reevaluation has to do with that. And `TxRequestTracker` doesn't know or care about the concept of blocks. It's just told that a transaction is no longer needed, so it can forget announcements about it. Why the caller decided that was th",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491919691,491919691,src/txrequest.cpp
sipa,2020-09-21 09:54:31,"As explained elsewhere, no, BEST exists for much longer than that, and I'm 99% sure this can be hit.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491920166,491920166,src/txrequest.cpp
sipa,2020-09-21 09:56:17,"The unit tests are completely rewritten. There aren't any for the time-moving-backward though, I'll try to add that soon.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491921188,491921188,src/test/txrequest_tests.cpp
sipa,2020-09-21 09:58:12,"GetRequestable could be parametrized with a limit for the number of returned responses, but that would just be to avoid having it return the same thing multiple times. I don't understand what you mean with ""avoid leftover marked as REQUESTED"" and ""wasting a `GETDATA_TX_INTERVAL`.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r491922251,491922251,src/net_processing.cpp
sipa,2020-09-22 00:12:27,I think you're confused. `MAX_GETDATA_SZ` doesn't stop processing; it only makes the request be split up into multiple GETDATA messages.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492413989,492413989,src/txrequest.h
sipa,2020-09-22 00:26:19,"Actually, that's not necessary anymore. As `ReceivedInv` doesn't have a ""now"" argument anymore, the time of announcement clearly doesn't matter, simply by the API being agnostic of it. I'm adding a test that has a reqtime that decreases, though.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492417297,492417297,src/test/txrequest_tests.cpp
sipa,2020-09-22 00:48:05,"I added a lot of comments explaining the rationale and some analysis to txrequest.h in #19989 \n\n> ""Transaction downloads never guarantee to succeed, namely receiving transaction if you hear about its identifier. Success should be define as a best-effort, guaranteeing we advance towards entry removal for any peer who announced a txid""\n\nI have difficulty parsing what you're trying to say her",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492422381,492422381,src/txrequest.h
sipa,2020-09-22 00:48:24,Renamed to `ForgetTx`.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492422470,492422470,src/txrequest.h
sipa,2020-09-22 00:48:58,Added a comment explaining memory usage bounds.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492422609,492422609,src/txrequest.h
sipa,2020-09-22 00:49:07,Done.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492422651,492422651,src/txrequest.h
sipa,2020-09-22 00:49:23,Done.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492422741,492422741,src/txrequest.cpp
sipa,2020-09-22 00:50:13,"Good idea, done. Added `IsOnlyNonCompleted`.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492422931,492422931,src/txrequest.cpp
sipa,2020-09-22 00:51:33,"I don't think that's necessary - we just have to call `ForgetTx` whenever a transaction *becomes* alreadyhave, and prevent adding announcements for alreadyhave ones. If that's done correctly, an addition `ForgetTx` here would always be a no-op.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r492423311,492423311,src/net_processing.cpp
ariard,2020-09-30 23:12:03,"> I have difficulty parsing what you're trying to say here, but I've added some related comments. Please have a look to see if it's better addressed now.\n\nIIRC I meaned the following. ""Learning about a transaction identifier doesn't guarantee the node will successfully receive the transaction, no more take special steps to ensure it as sending non-solicited GETDATAs. An entry is guarantee to n",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r497850722,497850722,src/txrequest.h
ariard,2020-09-30 23:30:14,"You're right on `MAX_GETDATA_SZ`.\n\nStill, do you think that a third-party can delay transaction announcement between Alice and Bob by forcing her to send him orphans until reaching MAX_PEER_TX_ANNOUNCEMENTS ?",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r497856275,497856275,src/txrequest.h
ariard,2020-09-30 23:33:18,"> Why the caller decided that was the right thing to do is not its concern.\n\nRight, I understand comments should be concerned with other transaction relay mechanisms.",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r497857164,497857164,src/txrequest.cpp
ariard,2020-09-30 23:34:25,This comment was wrong and part of my misunderstanding you pointed above.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r497857473,497857473,src/net_processing.cpp
sipa,2020-09-30 23:38:29,"> Learning about a transaction identifier doesn't guarantee the node will successfully receive the transaction, no more take special steps to ensure it as sending non-solicited GETDATAs.\n\nI still don't understand what you're trying to say.\n\n> The second underscores an important property of new TxRequestTracker design, its state machine always progress towards a terminal state and should ne",https://github.com/bitcoin/bitcoin/pull/19184#discussion_r497858564,497858564,src/txrequest.h
sipa,2020-10-01 02:21:31,I need to think about this more.,https://github.com/bitcoin/bitcoin/pull/19184#discussion_r497948559,497948559,src/txrequest.h
