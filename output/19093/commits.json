[
  {
    "sha": "c9781e92a211d2615a8889dede1b02913c18ecd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTc4MWU5MmEyMTFkMjYxNWE4ODg5ZGVkZTFiMDI5MTNjMThlY2Qx",
    "commit": {
      "author": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-05-24T12:58:56Z"
      },
      "committer": {
        "name": "codeShark149",
        "email": "rajarshi149@gmail.com",
        "date": "2020-08-08T05:50:51Z"
      },
      "message": "RPC: Return transaction fee from testmempoolaccept\n\nThis commit returns 'fee' in the testmempoolaccept rpc results.\n'fee' is only returned if the transaction would be accepted to the mempool.\n\nExisting functional tests are modified to reflect changed behaviour.",
      "tree": {
        "sha": "5d7d378ca5bf97bd3b41450edb168042b017ac47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d7d378ca5bf97bd3b41450edb168042b017ac47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9781e92a211d2615a8889dede1b02913c18ecd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9781e92a211d2615a8889dede1b02913c18ecd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9781e92a211d2615a8889dede1b02913c18ecd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9781e92a211d2615a8889dede1b02913c18ecd1/comments",
    "author": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rajarshimaitra",
      "id": 36541669,
      "node_id": "MDQ6VXNlcjM2NTQxNjY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/36541669?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rajarshimaitra",
      "html_url": "https://github.com/rajarshimaitra",
      "followers_url": "https://api.github.com/users/rajarshimaitra/followers",
      "following_url": "https://api.github.com/users/rajarshimaitra/following{/other_user}",
      "gists_url": "https://api.github.com/users/rajarshimaitra/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rajarshimaitra/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rajarshimaitra/subscriptions",
      "organizations_url": "https://api.github.com/users/rajarshimaitra/orgs",
      "repos_url": "https://api.github.com/users/rajarshimaitra/repos",
      "events_url": "https://api.github.com/users/rajarshimaitra/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rajarshimaitra/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b705b1c98f60ab736df98d62a8d4988f61678d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b705b1c98f60ab736df98d62a8d4988f61678d5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b705b1c98f60ab736df98d62a8d4988f61678d5"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 34,
      "deletions": 14
    },
    "files": [
      {
        "sha": "f16fd11a78e4394bec85c5d4a988ae16bf4d8bf1",
        "filename": "doc/release-notes-19093.md",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9781e92a211d2615a8889dede1b02913c18ecd1/doc/release-notes-19093.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9781e92a211d2615a8889dede1b02913c18ecd1/doc/release-notes-19093.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-19093.md?ref=c9781e92a211d2615a8889dede1b02913c18ecd1",
        "patch": "@@ -0,0 +1,7 @@\n+RPC changes\n+------------\n+\n+### 'testmempoolaccept` improvement\n+\n+`testmempoolaccept` now additionally returns the transaction fee in the result.\n+Fee is only returned if transaction would be accepted in the mempool.\n\\ No newline at end of file"
      },
      {
        "sha": "a257aa60644ea879620d3b2d2921811871dbcdaf",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9781e92a211d2615a8889dede1b02913c18ecd1/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9781e92a211d2615a8889dede1b02913c18ecd1/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=c9781e92a211d2615a8889dede1b02913c18ecd1",
        "patch": "@@ -878,6 +878,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                         {\n                             {RPCResult::Type::STR_HEX, \"txid\", \"The transaction hash in hex\"},\n                             {RPCResult::Type::BOOL, \"allowed\", \"If the mempool allows this tx to be inserted\"},\n+                            {RPCResult::Type::NUM, \"fee\", \"Fee provided in this transaction (only present when 'allowed' is true)\"},\n                             {RPCResult::Type::STR, \"reject-reason\", \"Rejection string (only present when 'allowed' is false)\"},\n                         }},\n                     }\n@@ -924,13 +925,18 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n \n     TxValidationState state;\n     bool test_accept_res;\n+    CAmount fee;\n     {\n         LOCK(cs_main);\n         test_accept_res = AcceptToMemoryPool(mempool, state, std::move(tx),\n-            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true);\n+            nullptr /* plTxnReplaced */, false /* bypass_limits */, max_raw_tx_fee, /* test_accept */ true, &fee);\n     }\n     result_0.pushKV(\"allowed\", test_accept_res);\n-    if (!test_accept_res) {\n+    // Unaccepted transaction can return inaccurate fee.\n+    // Thus only return the fee if transaction passes acceptance test by mempool.\n+    if (test_accept_res) {\n+        result_0.pushKV(\"fee\", fee);\n+    } else {\n         if (state.IsInvalid()) {\n             if (state.GetResult() == TxValidationResult::TX_MISSING_INPUTS) {\n                 result_0.pushKV(\"reject-reason\", \"missing-inputs\");"
      },
      {
        "sha": "2dd87b66fb9d731b6e3dfd2a5b0bc207275856c4",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9781e92a211d2615a8889dede1b02913c18ecd1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9781e92a211d2615a8889dede1b02913c18ecd1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=c9781e92a211d2615a8889dede1b02913c18ecd1",
        "patch": "@@ -475,6 +475,7 @@ class MemPoolAccept\n          */\n         std::vector<COutPoint>& m_coins_to_uncache;\n         const bool m_test_accept;\n+        CAmount* m_fee;\n     };\n \n     // Single transaction acceptance\n@@ -687,6 +688,11 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         return false; // state filled in by CheckTxInputs\n     }\n \n+    // If fee_out is passed, return the fee to the caller\n+    if (args.m_fee) {\n+        *args.m_fee = nFees;\n+    }\n+\n     // Check for non-standard pay-to-script-hash in inputs\n     if (fRequireStandard && !AreInputsStandard(tx, m_view)) {\n         return state.Invalid(TxValidationResult::TX_INPUTS_NOT_STANDARD, \"bad-txns-nonstandard-inputs\");\n@@ -1061,10 +1067,10 @@ bool MemPoolAccept::AcceptSingleTransaction(const CTransactionRef& ptx, ATMPArgs\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n-    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept };\n+    MemPoolAccept::ATMPArgs args { chainparams, state, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept, fee_out };\n     bool res = MemPoolAccept(pool).AcceptSingleTransaction(tx, args);\n     if (!res) {\n         // Remove coins that were not present in the coins cache before calling ATMPW;\n@@ -1083,10 +1089,10 @@ static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPo\n \n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept, CAmount* fee_out)\n {\n     const CChainParams& chainparams = Params();\n-    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept);\n+    return AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, GetTime(), plTxnReplaced, bypass_limits, nAbsurdFee, test_accept, fee_out);\n }\n \n CTransactionRef GetTransaction(const CBlockIndex* const block_index, const CTxMemPool* const mempool, const uint256& hash, const Consensus::Params& consensusParams, uint256& hashBlock)"
      },
      {
        "sha": "99db1f0be8f8015c98aa7f160520e4d94cd223df",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9781e92a211d2615a8889dede1b02913c18ecd1/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9781e92a211d2615a8889dede1b02913c18ecd1/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=c9781e92a211d2615a8889dede1b02913c18ecd1",
        "patch": "@@ -200,10 +200,11 @@ void UnlinkPrunedFiles(const std::set<int>& setFilesToPrune);\n void PruneBlockFilesManual(int nManualPruneHeight);\n \n /** (try to) add transaction to memory pool\n- * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n+ * plTxnReplaced will be appended to with all transactions replaced from mempool\n+ * optionally takes an argument to return tx fee to the caller **/\n bool AcceptToMemoryPool(CTxMemPool& pool, TxValidationState &state, const CTransactionRef &tx,\n                         std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false, CAmount* fee_out=nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);"
      },
      {
        "sha": "8118dd494fe986ddbc811c335632e7a7aaa62e7b",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9781e92a211d2615a8889dede1b02913c18ecd1/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9781e92a211d2615a8889dede1b02913c18ecd1/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=c9781e92a211d2615a8889dede1b02913c18ecd1",
        "patch": "@@ -91,7 +91,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'fee': fee * COIN}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -104,7 +104,7 @@ def run_test(self):\n         ))['hex']\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'fee': (int(coin['amount']) - (0.025)) * COIN}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )\n@@ -127,7 +127,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n-            result_expected=[{'txid': txid_0, 'allowed': True}],\n+            result_expected=[{'txid': txid_0, 'allowed': True, 'fee': (2 * fee * COIN)}],\n             rawtxs=[raw_tx_0],\n         )\n \n@@ -187,7 +187,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n-            result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n+            result_expected=[{'txid': tx.rehash(), 'allowed': True, 'fee': (0.1 - 0.05) * COIN}],\n             rawtxs=[tx.serialize().hex()],\n             maxfeerate=0,\n         )"
      },
      {
        "sha": "57b4061b170c6b5a919d961d130100ab89c95ace",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9781e92a211d2615a8889dede1b02913c18ecd1/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9781e92a211d2615a8889dede1b02913c18ecd1/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=c9781e92a211d2615a8889dede1b02913c18ecd1",
        "patch": "@@ -690,13 +690,13 @@ def test_standardness_v0(self):\n         if not self.segwit_active:\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'fee': 1000}])\n             # Create the same output as tx3, but by replacing tx\n             tx3_out = tx3.vout[0]\n             tx3 = tx\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n-            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True, 'fee': 11000}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)"
      }
    ]
  }
]