jonatack,2020-05-28 18:33:41,ISTM there is no need to close #19063 and open another PR. Better to have rebased on the original PR.,https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-635522548,635522548,
rajarshimaitra,2020-05-29 07:23:44,"I am not sure how to do that. The branch for that pr in my repo is gone. That PR somehow got a ton of commit the last time i tried to push. I tried to fix it by rebasing but wasn't working, and then it went much more messy and my local branch got deleted. So i opened a new one. It feels its better to close the previous one as i have no way to update it. \n\nSorry for the mess. ",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-635808154,635808154,
rajarshimaitra,2020-05-29 16:03:15,Thanks for the review. Updated and rebased. ,https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-636053472,636053472,
rajarshimaitra,2020-06-01 13:35:50,"Thanks @promag for the review and comment. \nI am not very familiar with release notes update protocols, is this something that I should change as part of this PR? \nAlso, can you elaborate a little on the testing part that you mentioned?  ",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-636864855,636864855,
luke-jr,2020-06-08 17:23:37,"https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#release-notes\n\nhttps://github.com/bitcoin/bitcoin/blob/master/test/functional/README.md",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-640764747,640764747,
rajarshimaitra,2020-06-09 10:39:54,"Thanks @luke-jr  for the review. Updated and rebased. \n\n@promag I have added a release note. Let me know if any modification needed there. \n\nRegarding the extra functional test, `testmempoolaccept` will always return the fee as long as the transaction is accepted in mempool. Fee will only be absent from the result if transaction acceptance check fails, which is already covered in the exist",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-641203481,641203481,
DrahtBot,2020-06-18 02:14:05,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19339 (validation: re-delegate absurd fee checking from mempool to clients by gzhao408)\n\nIf you consider this pull requ",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-645727019,645727019,
rajarshimaitra,2020-07-26 06:10:50,">I'm wondering why you decided to return fee instead of feerate? I think we typically use feerate to decide whether a fee is reasonable, although a user might prefer to just see a fee amount. It's a quick conversion between the two and I don't have a strong opinion, but was wondering what your rationale was?\n\nThat's a good proposal. I didn't thought about it, but it makes sense to report the f",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-663940658,663940658,
MarcoFalke,2020-07-26 09:17:20,"I am starting to think that it could even return the same info that `getmempoolentry` returns (except the DEPRECATED fields and the mempool entry time). (Maybe hidden behind a `verbosity` switch, if someone only wants a boolean acceptance result)",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-663963257,663963257,
rajarshimaitra,2020-08-08 06:21:30,Thanks @jnewbery for the review. Updated as per your suggestions and rebased. ,https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-670831622,670831622,
jnewbery,2020-08-11 12:26:15,"Code review ACK c9781e92a211d2615a8889dede1b02913c18ecd1\n\ns390 failure in travis is unrelated to this PR. I've restarted the job.",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-671915290,671915290,
jarrad,2020-08-25 04:42:00,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-679613131,679613131,
MarcoFalke,2020-09-07 13:23:07,"I still consider my comment a bug that should be fixed before merge. Also my proposed change would be a breaking RPC change, and I wouldn't want to expose users to that. So better get it right the first time and avoid another ""lets do it later"" like e.g. #19543. ",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-688323402,688323402,
MarcoFalke,2020-09-07 13:27:43,"(Ok, just adding new fields to an object is not a breaking change. Only if the new fields were wrapped into another object, but that probably doesn't make sense here)",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-688326005,688326005,
jnewbery,2020-09-07 13:31:53,"I've chatted to Marco offline and agree that this PR should be changed to add `vsize` and `fees.base`, to be consistent with `getmempoolentry`. If we want to add other fields later (eg `fees.modified`), that's not a breaking change. We shouldn't add `fee`, since that's deprecated in `getmempoolentry`.",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-688328487,688328487,
glozow,2020-09-07 17:06:59,"I agree with @MarcoFalke. \nI also had a few comments on my PR about these changes and it felt unfair to force @rajarshimaitra to follow them just because I wanted to use this code... so [here's a branch](https://github.com/gzhao408/bitcoin/commit/898f6e9297b73c4deb4f03208e446c0dd5b92970) that applies the suggestions from my PR. I incorporated Marco's comment as well, so it now returns a `fees` o",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-688440705,688440705,
rajarshimaitra,2020-09-10 05:56:57,"Hi, Sorry I got busy with other works and couldn't check the updates here lately. Honestly, I am a little overwhelmed with all the discussions regarding this, couldn't really follow up on what's happening where.\nSo if someone can explain in simple terms what I need to do, if anything, to make this PR mergeable would be happy to make the changes and close this.    ",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-690005151,690005151,
jnewbery,2020-09-10 13:16:14,"Hi @rajarshimaitra . Thanks for your work on this. It sounds like @gzhao408 has a bit more time than you to make the final changes here, so I'd suggest that she open a PR that takes your branch and makes those last minor changes to get this merged. What do you think?",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-690280547,690280547,
glozow,2020-09-10 13:22:29,"> It sounds like @gzhao408 has a bit more time than you to make the final changes here, so I'd suggest that she open a PR that takes your branch and makes those last minor changes to get this merged.\n\nYep I can do that! @rajarshimaitra you'll be co-author of the commit (the branch adding the suggested changes is a cherry-pick from yours). Does this sound alright to you?",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-690285289,690285289,
rajarshimaitra,2020-09-10 15:10:16,@jnewbery and @gzhao408 yes that sounds good to me. As I have lost touch over this it would be better if she takes over and do the last changes. ACK from me. ,https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-690355317,690355317,
jnewbery,2020-09-15 16:59:50,"New version is at #19940 . Thanks for your hard work on this @rajarshimaitra !\n\n@jonatack @MarcoFalke @fjahr @promag @luke-jr - mind re-reviewing the new version at #19940? It's this branch with some minor updates.",https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-692845932,692845932,
MarcoFalke,2020-05-29 12:23:12,"```suggestion\n    CAmount fee_out;\n```\n\nNo need to initialize. Also could clarify that this is an out parameter?",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432446944,432446944,src/rpc/rawtransaction.cpp
MarcoFalke,2020-05-29 12:25:04,"double negatives are hard to follow (probably explains why you had to add a dev comment). Easier would be to write\n\n```cpp\nif (test_accept_res) {\n push fee\n} else {\n puls reject reason\n}\n```\n\nfor self-documenting code",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432447903,432447903,src/rpc/rawtransaction.cpp
MarcoFalke,2020-05-29 12:25:31,"```suggestion\n        CAmount* m_fee;\n```\n\nsee dev notes",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432448145,432448145,src/validation.cpp
MarcoFalke,2020-05-29 12:27:13,"please move the fee arg before the test arg, so that non-testing callers can use this as well (without having to specify that they don't test)",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432448983,432448983,src/validation.cpp
MarcoFalke,2020-05-29 12:28:22,please no floating point in tests. Decimal is good enough,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432449537,432449537,test/functional/mempool_accept.py
MarcoFalke,2020-05-29 12:28:35,Same,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432449641,432449641,test/functional/mempool_accept.py
rajarshimaitra,2020-05-29 12:53:28,Done.,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432462183,432462183,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-05-29 12:53:42,"makes sense, done.",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432462291,432462291,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-05-29 12:55:05,My mistake. Fixed. ,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432463025,432463025,src/validation.cpp
rajarshimaitra,2020-05-29 12:57:13,"This is creating a problem where a non-testing `AcceptToMemoryPoolWithTime` doesn't want the returning fee. One instance is in `LoadMempool` where the call is like below\n```\nif (nTime + nExpiryTimeout > nNow) {\n                LOCK(cs_main);\n                AcceptToMemoryPoolWithTime(chainparams, pool, state, tx, Time,\n                    nullptr /* plTxnReplaced */, false /* bypass_limi",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432464178,432464178,src/validation.cpp
rajarshimaitra,2020-05-29 13:37:02,"I am a little confused here, i used `int` because `Decimal` wasn't asserting with `int` type return value in fee. `0.025` is the output value in btc which is already used few lines above while constructing the tx and many other floating point amounts are used elsewhere. What exactly you are suggesting to change here?  ",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432487317,432487317,test/functional/mempool_accept.py
MarcoFalke,2020-05-29 13:43:37,Nevemind. I wrote this test and used floating point in the first place. :sweat_smile: :cold_sweat: ,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432491304,432491304,test/functional/mempool_accept.py
rajarshimaitra,2020-05-29 14:06:51,"Also i was wondering cant a non-testing call use something like `(..., false, &fee)` to use the `fee` while passing `false` in `test_accept`? As `test_accept` doesn't have a default value, the caller always need to specify `false` in case of nontesting anyway. Thats what happening in the above call too. ",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432505679,432505679,src/validation.cpp
MarcoFalke,2020-05-29 14:39:15,"Ok, fair enough. No need to change if it is too involved.",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r432531988,432531988,src/validation.cpp
luke-jr,2020-06-08 18:09:40,Should be on one line,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r436898256,436898256,src/rpc/rawtransaction.cpp
luke-jr,2020-06-08 18:10:13,"```suggestion\n    if (args.m_fee) {\n```",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r436898547,436898547,src/validation.cpp
rajarshimaitra,2020-06-09 10:24:14,Done.,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r437304286,437304286,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-06-09 10:24:20,Done. ,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r437304343,437304343,src/validation.cpp
luke-jr,2020-06-09 19:14:31,Typo,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r437659627,437659627,doc/release-notes-19093.md
luke-jr,2020-06-10 00:19:40,Typo,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r437792235,437792235,src/validation.h
rajarshimaitra,2020-06-10 07:54:47,Fixed.,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r437930862,437930862,doc/release-notes-19093.md
rajarshimaitra,2020-06-10 07:54:53,Fixed,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r437930905,437930905,src/validation.h
glowang,2020-06-20 23:47:58,"Could you elaborate on the consideration behind only passing back fee rate if the transaction is accepted? Late to the party, so I might have missed it if this was asked earlier by a different reviewer.\n\nI think we should still pass back fee even if rejected, because In validation.h, we can see that one potential reason of rejection is`TX_MEMPOOL_POLICY`, which includes reasons such as mempool",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r443168242,443168242,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-06-21 06:30:00,"The rationale behind not returning fees in case of rejection was mempool policy is not the only reason why a transaction might be rejected. In case of ill-formed transactions, returning a fee might cause a problem because it might try to return something that doesn't make sense. If I am not mistaken then it will return 0 fee for ill-formed transactions. Seeing a `fee=0` along with `allowed=false` ",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r443186948,443186948,src/rpc/rawtransaction.cpp
glowang,2020-06-24 15:11:18,">  If I am not mistaken then it will return 0 fee for ill-formed transactions.\n\n@rajarshimaitra would you mind pointing me to the area in source code to look more into it? I did some searching myself but wasn't able to find where this happens. ",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r444968652,444968652,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-06-24 18:16:15,"Check here.\n\nhttps://github.com/bitcoin/bitcoin/blob/205b87d2f6bd01285de50ba742e32e4ab1298b13/src/validation.cpp#L688-L691\n\nif `CheckTxInputs` fails, `nFess` will be 0. Look inside `CheckTxInputs` to see what makes it fail.",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r445082704,445082704,src/rpc/rawtransaction.cpp
jnewbery,2020-08-04 14:25:46,no need for two empty lines here.,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r465091218,465091218,src/validation.cpp
jnewbery,2020-08-04 14:27:01,nit: no need for this inline comment. It's clear from the code what this variable is doing.,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r465092158,465092158,src/rpc/rawtransaction.cpp
jnewbery,2020-08-04 14:30:31,"No need for a comment to say what the code is doing. If you want to comment here, it should be to explain _why_ the code is doing this, eg ""if mempool acceptance failed, the returned fee may not be accurate, so only return it to the caller if the tx would be accepted."" or similar.",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r465094751,465094751,src/rpc/rawtransaction.cpp
jnewbery,2020-08-04 14:36:39,"""Fee is only returned if transaction would be accepted to the mempool."" is more accurate (testmempoolaccept doesn't actually accept transactions to the mempool).",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r465099357,465099357,doc/release-notes-19093.md
rajarshimaitra,2020-08-08 05:47:29,Removed this comment.,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r467366480,467366480,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-08-08 05:47:47,Updated this comment to better express the intent. ,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r467366492,467366492,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-08-08 05:49:02,updated.,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r467366587,467366587,doc/release-notes-19093.md
MarcoFalke,2020-08-14 05:35:15,"* This will put the fee in raw satoshis? I don't think we do this anywhere else.\n* Have you seen https://github.com/bitcoin/bitcoin/pull/19093#issuecomment-663963257? Specifically, it would be better for the caller to have the feerate instead of the absolute fee. Otherwise, the caller is forced to implement a witness-aware tx-deserializer to determine the virtual size. `getmempoolentry` returns ",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470419314,470419314,src/rpc/rawtransaction.cpp
rajarshimaitra,2020-08-14 07:31:37,"Hmm. Now that I am thinking it makes sense to return `feerate`. Do you want the `fees` to be changed into `feerate`? \n\n> I am starting to think that it could even return the same info that `getmempoolinfo` returns\n\nLittle confused on this one as `getmepoolinfo` returns the following\n```\nResult:\n{\n  ""loaded"": true|false         (boolean) True if the mempool is fully loaded\n  ""size",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470458161,470458161,src/rpc/rawtransaction.cpp
MarcoFalke,2020-08-14 07:55:57,"Sorry, typo. Should have been getmempool**entry** in the other comment as well",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470468963,470468963,src/rpc/rawtransaction.cpp
jnewbery,2020-08-14 08:59:16,"This seems like scope creep. I think returning the fee is fine to start with, and unblocks #19339. Could we defer adding more details to a later PR?",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470501013,470501013,src/rpc/rawtransaction.cpp
MarcoFalke,2020-08-14 09:17:23,"* Changing the type to `STR_AMOUNT` like in all other places should be done for consistency and to protect against mistakes. I consider this a bug that should be fixed before merge.\n* Removing the field `fee` and replacing it with something else later is a breaking rpc change. For the sanity of our users we should keep breaking rpc changes at a minimum.",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470509990,470509990,src/rpc/rawtransaction.cpp
MarcoFalke,2020-08-14 09:20:20,"Does #19339 need the rpc changes? If not, then this can trivially be unblocked by cherry-picking this pull and undoing the RPC changes. I think an internal (non-rpc) change can go in earlier, as it doesn't have the breaking rpc change concerns.",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470511423,470511423,src/rpc/rawtransaction.cpp
jnewbery,2020-08-14 09:39:15,"Good point about cherry picking the non-rpc changes.\n\nSeparately, I think `fee` is a useful value to return to the user, since it's exact (unlike feerate which might be rounded).",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470520927,470520927,src/rpc/rawtransaction.cpp
MarcoFalke,2020-08-14 09:44:03,"Agree, since `getmempoolentry` also returns the absolute fee (and the vsize)",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r470523193,470523193,src/rpc/rawtransaction.cpp
glozow,2020-08-24 16:13:11,"Yeah good point, I only need the fee from ATMP for #19339 so I'll just use that. @rajarshimaitra is listed as coauthor on there, and can continue iterating on the RPC stuff here.",https://github.com/bitcoin/bitcoin/pull/19093#discussion_r475730021,475730021,src/rpc/rawtransaction.cpp
fjahr,2020-08-24 22:16:23,nit: to match your naming elsewhere you could have called this `m_fee_out`,https://github.com/bitcoin/bitcoin/pull/19093#discussion_r475925039,475925039,src/validation.cpp
