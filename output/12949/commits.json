[
  {
    "sha": "fae58eca934b5c7165b589c3bec1751d1b432b48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU1OGVjYTkzNGI1YzcxNjViNTg5YzNiZWMxNzUxZDFiNDMyYjQ4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-11T17:51:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-11T18:59:53Z"
      },
      "message": "tests: Avoid copies of CTransaction",
      "tree": {
        "sha": "5d0c8b10608dcced118dc59d7812f8498fcfc012",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d0c8b10608dcced118dc59d7812f8498fcfc012"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae58eca934b5c7165b589c3bec1751d1b432b48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJazlspAAoJEM4rdWl+aaVItx8L/jbuSALoRj9arD0620QUYETR\niHbfh9FpDLdYBXbUMjkrAoMWHemwEKYtjh7DSxDC6ceY+sEHOQEYZpRLFcRDsKDt\nYn9H20ah5c6wNWU+JSccaduPoe341jRmSKJB48L86QVDPIM9IBXFImYmw1SBLAEf\n0ZtplCyuXQjhq6lS82FJ0zF2cCC4EJgUwZtnIN1Tze16dEI38myGnNCAtsaao6Ze\nCKdv9yOyuxQZEb0kzgvmAtcsL/2Ll2oFrpeAzIH8H2rzLJB0hdm57ZTjrrTUr7kT\nYTIrWTEaz5KdoHnkyWy0xJ8ir0Ktr7aU02wNpQN59T4pqKypSSyv+ydLWuUDc4tJ\nEfdIo9OX3ul3whJOz8a17B4Jl5aN3BSF6SvpvY6BLO2I6bNn/cQrPrKE7ePAReff\nxbkf1Wghgkj5z+26wcqxfKEgClU8QnC1ZRDr3eLRan9PrmrDIB0nNjXDCS9oR+rU\ntpwkrlW1gtbUxbtjmtj13vhQTZLVujjWMNMwgijTeg==\n=VUwJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d0c8b10608dcced118dc59d7812f8498fcfc012\nparent b1fdfc1a8c072f798305f21d5e69207c9e1bed89\nauthor MarcoFalke <falke.marco@gmail.com> 1523469088 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1523473193 -0400\n\ntests: Avoid copies of CTransaction\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae58eca934b5c7165b589c3bec1751d1b432b48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae58eca934b5c7165b589c3bec1751d1b432b48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae58eca934b5c7165b589c3bec1751d1b432b48/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1fdfc1a8c072f798305f21d5e69207c9e1bed89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1fdfc1a8c072f798305f21d5e69207c9e1bed89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1fdfc1a8c072f798305f21d5e69207c9e1bed89"
      }
    ],
    "stats": {
      "total": 74,
      "additions": 39,
      "deletions": 35
    },
    "files": [
      {
        "sha": "e05a5e3d1eda351cd9536c0b981823efa5a89e20",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -9,7 +9,7 @@\n #include <list>\n #include <vector>\n \n-static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n+static void AddTx(const CMutableTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n {\n     int64_t nTime = 0;\n     unsigned int nHeight = 1;"
      },
      {
        "sha": "4100519d48b74fa933586ee3b895cd2ef6be2459",
        "filename": "src/bench/verify_script.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -71,7 +71,7 @@ static void VerifyScriptBench(benchmark::State& state)\n     CScript scriptPubKey = CScript() << witnessversion << ToByteVector(pubkeyHash);\n     CScript scriptSig;\n     CScript witScriptPubkey = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkeyHash) << OP_EQUALVERIFY << OP_CHECKSIG;\n-    CTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    const CMutableTransaction& txCredit = BuildCreditingTransaction(scriptPubKey);\n     CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n     CScriptWitness& witness = txSpend.vin[0].scriptWitness;\n     witness.stack.emplace_back();"
      },
      {
        "sha": "8cffacbffeed771ed3f1cfb87ac9e1b0a9a66d16",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 10,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -52,16 +52,16 @@ static CBlock BuildBlockTestCase() {\n }\n \n // Number of shared use_counts we expect for a tx we haven't touched\n-// == 2 (mempool + our copy from the GetSharedTx call)\n-#define SHARED_TX_OFFSET 2\n+// (block + mempool + our copy from the GetSharedTx call)\n+constexpr long SHARED_TX_OFFSET{3};\n \n BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n {\n     CTxMemPool pool;\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n-    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n     LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n@@ -161,7 +161,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n-    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(block.vtx[2]));\n     LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n@@ -188,7 +188,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n         BOOST_CHECK( partialBlock.IsTxAvailable(1));\n         BOOST_CHECK( partialBlock.IsTxAvailable(2));\n \n-        BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n+        BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1); // +1 because of partialBlock\n \n         CBlock block2;\n         {\n@@ -203,6 +203,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n             partialBlock.FillBlock(block2, {block.vtx[1]}); // Current implementation doesn't check txn here, but don't require that\n             partialBlock = tmp;\n         }\n+        BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 2); // +2 because of partialBlock and block2\n         bool mutated;\n         BOOST_CHECK(block.hashMerkleRoot != BlockMerkleRoot(block2, &mutated));\n \n@@ -213,13 +214,15 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n         BOOST_CHECK_EQUAL(block.hashMerkleRoot.ToString(), BlockMerkleRoot(block3, &mutated).ToString());\n         BOOST_CHECK(!mutated);\n \n+        BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 3); // +2 because of partialBlock and block2 and block3\n+\n         txhash = block.vtx[2]->GetHash();\n         block.vtx.clear();\n         block2.vtx.clear();\n         block3.vtx.clear();\n-        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1); // + 1 because of partialBlockCopy.\n+        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1 - 1); // + 1 because of partialBlock; -1 because of block.\n     }\n-    BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n+    BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET - 1); // -1 because of block\n }\n \n BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n@@ -228,7 +231,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n     TestMemPoolEntryHelper entry;\n     CBlock block(BuildBlockTestCase());\n \n-    pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(*block.vtx[1]));\n+    pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(block.vtx[1]));\n     LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n@@ -268,9 +271,9 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n         txhash = block.vtx[1]->GetHash();\n         block.vtx.clear();\n         block2.vtx.clear();\n-        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1); // + 1 because of partialBlockCopy.\n+        BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1 - 1); // + 1 because of partialBlock; -1 because of block.\n     }\n-    BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n+    BOOST_CHECK_EQUAL(pool.mapTx.find(txhash)->GetSharedTx().use_count(), SHARED_TX_OFFSET - 1); // -1 because of block\n }\n \n BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)"
      },
      {
        "sha": "066f6328a60746d4b3d95af3a8609419d5d351d6",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -19,7 +19,7 @@\n BOOST_FIXTURE_TEST_SUITE(multisig_tests, BasicTestingSetup)\n \n CScript\n-sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction, int whichIn)\n+sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction, int whichIn)\n {\n     uint256 hash = SignatureHash(scriptPubKey, transaction, whichIn, SIGHASH_ALL, 0, SigVersion::BASE);\n "
      },
      {
        "sha": "a06b573b3708ca556c72af07d5acd3722872be0f",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -1029,7 +1029,7 @@ BOOST_AUTO_TEST_CASE(script_PushData)\n }\n \n CScript\n-sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transaction)\n+sign_multisig(const CScript& scriptPubKey, const std::vector<CKey>& keys, const CTransaction& transaction)\n {\n     uint256 hash = SignatureHash(scriptPubKey, transaction, 0, SIGHASH_ALL, 0, SigVersion::BASE);\n \n@@ -1053,7 +1053,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n     return result;\n }\n CScript\n-sign_multisig(CScript scriptPubKey, const CKey &key, CTransaction transaction)\n+sign_multisig(const CScript& scriptPubKey, const CKey& key, const CTransaction& transaction)\n {\n     std::vector<CKey> keys;\n     keys.push_back(key);"
      },
      {
        "sha": "eba58e0042e46b0a4a72088cadf282c129c3017e",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -23,7 +23,7 @@ class CSerializeMethodsTestSingle\n     CTransactionRef txval;\n public:\n     CSerializeMethodsTestSingle() = default;\n-    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, CTransaction txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), txval(MakeTransactionRef(txvalin))\n+    CSerializeMethodsTestSingle(int intvalin, bool boolvalin, std::string stringvalin, const char* charstrvalin, const CTransactionRef& txvalin) : intval(intvalin), boolval(boolvalin), stringval(std::move(stringvalin)), txval(txvalin)\n     {\n         memcpy(charstrval, charstrvalin, sizeof(charstrval));\n     }\n@@ -350,8 +350,9 @@ BOOST_AUTO_TEST_CASE(class_methods)\n     std::string stringval(\"testing\");\n     const char charstrval[16] = \"testing charstr\";\n     CMutableTransaction txval;\n-    CSerializeMethodsTestSingle methodtest1(intval, boolval, stringval, charstrval, txval);\n-    CSerializeMethodsTestMany methodtest2(intval, boolval, stringval, charstrval, txval);\n+    CTransactionRef tx_ref{MakeTransactionRef(txval)};\n+    CSerializeMethodsTestSingle methodtest1(intval, boolval, stringval, charstrval, tx_ref);\n+    CSerializeMethodsTestMany methodtest2(intval, boolval, stringval, charstrval, tx_ref);\n     CSerializeMethodsTestSingle methodtest3;\n     CSerializeMethodsTestMany methodtest4;\n     CDataStream ss(SER_DISK, PROTOCOL_VERSION);"
      },
      {
        "sha": "b72df1604f5362db019f6ab5e9a6269f341721f6",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -123,7 +123,7 @@ TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n     {\n         std::vector<CMutableTransaction> noTxns;\n         CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n-        coinbaseTxns.push_back(*b.vtx[0]);\n+        m_coinbase_txns.push_back(b.vtx[0]);\n     }\n }\n \n@@ -164,12 +164,12 @@ TestChain100Setup::~TestChain100Setup()\n \n \n CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CMutableTransaction &tx) {\n-    CTransaction txn(tx);\n-    return FromTx(txn);\n+    return FromTx(MakeTransactionRef(tx));\n }\n \n-CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransaction &txn) {\n-    return CTxMemPoolEntry(MakeTransactionRef(txn), nFee, nTime, nHeight,\n+CTxMemPoolEntry TestMemPoolEntryHelper::FromTx(const CTransactionRef& tx)\n+{\n+    return CTxMemPoolEntry(tx, nFee, nTime, nHeight,\n                            spendsCoinbase, sigOpCost, lp);\n }\n "
      },
      {
        "sha": "1f91eb622c9f1d592d5a7498e55ea44c26665713",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -87,7 +87,7 @@ struct TestChain100Setup : public TestingSetup {\n \n     ~TestChain100Setup();\n \n-    std::vector<CTransaction> coinbaseTxns; // For convenience, coinbase transactions\n+    std::vector<CTransactionRef> m_coinbase_txns; // For convenience, coinbase transactions\n     CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };\n \n@@ -107,8 +107,8 @@ struct TestMemPoolEntryHelper\n         nFee(0), nTime(0), nHeight(1),\n         spendsCoinbase(false), sigOpCost(4) { }\n \n-    CTxMemPoolEntry FromTx(const CMutableTransaction &tx);\n-    CTxMemPoolEntry FromTx(const CTransaction &tx);\n+    CTxMemPoolEntry FromTx(const CMutableTransaction& tx);\n+    CTxMemPoolEntry FromTx(const CTransactionRef& tx);\n \n     // Change the default value\n     TestMemPoolEntryHelper &Fee(CAmount _fee) { nFee = _fee; return *this; }"
      },
      {
        "sha": "c08de7cd7ce7e13bc68a89aad4322163ab4965d0",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -48,7 +48,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n     {\n         spends[i].nVersion = 1;\n         spends[i].vin.resize(1);\n-        spends[i].vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+        spends[i].vin[0].prevout.hash = m_coinbase_txns[0]->GetHash();\n         spends[i].vin[0].prevout.n = 0;\n         spends[i].vout.resize(1);\n         spends[i].vout[0].nValue = 11*CENT;\n@@ -167,7 +167,7 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n \n     spend_tx.nVersion = 1;\n     spend_tx.vin.resize(1);\n-    spend_tx.vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+    spend_tx.vin[0].prevout.hash = m_coinbase_txns[0]->GetHash();\n     spend_tx.vin[0].prevout.n = 0;\n     spend_tx.vout.resize(4);\n     spend_tx.vout[0].nValue = 11*CENT;"
      },
      {
        "sha": "be7e39639e578b1e5c16c7c79e21214c1767c857",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae58eca934b5c7165b589c3bec1751d1b432b48/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae58eca934b5c7165b589c3bec1751d1b432b48/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fae58eca934b5c7165b589c3bec1751d1b432b48",
        "patch": "@@ -119,14 +119,14 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // will pick up both blocks, not just the first.\n     const int64_t BLOCK_TIME = chainActive.Tip()->GetBlockTimeMax() + 5;\n     SetMockTime(BLOCK_TIME);\n-    coinbaseTxns.emplace_back(*CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n-    coinbaseTxns.emplace_back(*CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+    m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+    m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n     // Set key birthday to block time increased by the timestamp window, so\n     // rescan will start at the block time.\n     const int64_t KEY_TIME = BLOCK_TIME + TIMESTAMP_WINDOW;\n     SetMockTime(KEY_TIME);\n-    coinbaseTxns.emplace_back(*CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n+    m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n     LOCK(cs_main);\n \n@@ -157,9 +157,9 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n \n         LOCK(wallet.cs_wallet);\n         BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3U);\n-        BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103U);\n-        for (size_t i = 0; i < coinbaseTxns.size(); ++i) {\n-            bool found = wallet.GetWalletTx(coinbaseTxns[i].GetHash());\n+        BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);\n+        for (size_t i = 0; i < m_coinbase_txns.size(); ++i) {\n+            bool found = wallet.GetWalletTx(m_coinbase_txns[i]->GetHash());\n             bool expected = i >= 100;\n             BOOST_CHECK_EQUAL(found, expected);\n         }\n@@ -178,7 +178,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n     CWallet wallet(\"dummy\", WalletDatabase::CreateDummy());\n-    CWalletTx wtx(&wallet, MakeTransactionRef(coinbaseTxns.back()));\n+    CWalletTx wtx(&wallet, m_coinbase_txns.back());\n     LOCK2(cs_main, wallet.cs_wallet);\n     wtx.hashBlock = chainActive.Tip()->GetBlockHash();\n     wtx.nIndex = 0;"
      }
    ]
  }
]