[
  {
    "sha": "2600db6c36c11bf49a0a113ee2e2274406ade61c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjAwZGI2YzM2YzExYmY0OWEwYTExM2VlMmUyMjc0NDA2YWRlNjFj",
    "commit": {
      "author": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-14T13:39:03Z"
      },
      "committer": {
        "name": "Sebastian Falbesoner",
        "email": "sebastian.falbesoner@gmail.com",
        "date": "2021-09-14T13:51:21Z"
      },
      "message": "test: fix misleading fee unit in mempool_limit.py\n\nThe helper `send_large_txs` in its current interface has a fee_rate\nparameter, implying that it would create a transaction with exactly that\nrate. Unfortunately, this fee rate is only passed to MiniWallet's\n`create_self_transfer` method, which can't know that we append several\ntx outputs after, increasing the tx's vsize and decreasing it's fee rate\naccordingly.\n\nIn our case, the fee rate is off by several orders of magnitude, as the\ntx's vsize changes changes from 96 to 67552 vbytes (>700x), i.e. the\nvalue passed to this function is neither really a fee rate nor an\nabsolute fee, but something in-between, which is very confusing.\n\nClarify the interface by passing an absolute fee that is deducted in the end\n(and verified, via testmempoolaccept) and also describe how we come up with the\nvalue passed.",
      "tree": {
        "sha": "e6ee4ed066bbb2d4130159f176bced196256196a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6ee4ed066bbb2d4130159f176bced196256196a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2600db6c36c11bf49a0a113ee2e2274406ade61c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2600db6c36c11bf49a0a113ee2e2274406ade61c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2600db6c36c11bf49a0a113ee2e2274406ade61c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2600db6c36c11bf49a0a113ee2e2274406ade61c/comments",
    "author": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theStack",
      "id": 91535,
      "node_id": "MDQ6VXNlcjkxNTM1",
      "avatar_url": "https://avatars.githubusercontent.com/u/91535?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theStack",
      "html_url": "https://github.com/theStack",
      "followers_url": "https://api.github.com/users/theStack/followers",
      "following_url": "https://api.github.com/users/theStack/following{/other_user}",
      "gists_url": "https://api.github.com/users/theStack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theStack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theStack/subscriptions",
      "organizations_url": "https://api.github.com/users/theStack/orgs",
      "repos_url": "https://api.github.com/users/theStack/repos",
      "events_url": "https://api.github.com/users/theStack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theStack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5ede2aa7f083d3d2c75693fa8ddce30aa939a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5ede2aa7f083d3d2c75693fa8ddce30aa939a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5ede2aa7f083d3d2c75693fa8ddce30aa939a47"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 19,
      "deletions": 8
    },
    "files": [
      {
        "sha": "79f6f9dc708344b071aa13f1bf602a4cda81f80f",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 19,
        "deletions": 8,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2600db6c36c11bf49a0a113ee2e2274406ade61c/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2600db6c36c11bf49a0a113ee2e2274406ade61c/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=2600db6c36c11bf49a0a113ee2e2274406ade61c",
        "patch": "@@ -7,8 +7,14 @@\n from decimal import Decimal\n \n from test_framework.blocktools import COINBASE_MATURITY\n+from test_framework.messages import COIN\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, gen_return_txouts\n+from test_framework.util import (\n+    assert_equal,\n+    assert_greater_than,\n+    assert_raises_rpc_error,\n+    gen_return_txouts,\n+)\n from test_framework.wallet import MiniWallet\n \n \n@@ -23,16 +29,19 @@ def set_test_params(self):\n         ]]\n         self.supports_cli = False\n \n-    def send_large_txs(self, node, miniwallet, txouts, fee_rate, tx_batch_size):\n+    def send_large_txs(self, node, miniwallet, txouts, fee, tx_batch_size):\n         for _ in range(tx_batch_size):\n-            tx = miniwallet.create_self_transfer(from_node=node, fee_rate=fee_rate)['tx']\n+            tx = miniwallet.create_self_transfer(from_node=node, fee_rate=0, mempool_valid=False)['tx']\n             for txout in txouts:\n                 tx.vout.append(txout)\n+            tx.vout[0].nValue -= int(fee * COIN)\n+            res = node.testmempoolaccept([tx.serialize().hex()])[0]\n+            assert_equal(res['fees']['base'], fee)\n             miniwallet.sendrawtransaction(from_node=node, tx_hex=tx.serialize().hex())\n \n     def run_test(self):\n         txouts = gen_return_txouts()\n-        node=self.nodes[0]\n+        node = self.nodes[0]\n         miniwallet = MiniWallet(node)\n         relayfee = node.getnetworkinfo()['relayfee']\n \n@@ -54,13 +63,15 @@ def run_test(self):\n         self.log.info('Create a mempool tx that will be evicted')\n         tx_to_be_evicted_id = miniwallet.send_self_transfer(from_node=node, fee_rate=relayfee)[\"txid\"]\n \n-        # Increase the tx fee rate massively to give the subsequent transactions a higher priority in the mempool\n-        base_fee = relayfee * 1000\n+        # Increase the tx fee rate to give the subsequent transactions a higher priority in the mempool\n+        # The tx has an approx. vsize of 65k, i.e. multiplying the previous fee rate (in sats/kvB)\n+        # by 130 should result in a fee that corresponds to 2x of that fee rate\n+        base_fee = relayfee * 130\n \n         self.log.info(\"Fill up the mempool with txs with higher fee rate\")\n         for batch_of_txid in range(num_of_batches):\n-            fee_rate=(batch_of_txid + 1) * base_fee\n-            self.send_large_txs(node, miniwallet, txouts, fee_rate, tx_batch_size)\n+            fee = (batch_of_txid + 1) * base_fee\n+            self.send_large_txs(node, miniwallet, txouts, fee, tx_batch_size)\n \n         self.log.info('The tx should be evicted by now')\n         # The number of transactions created should be greater than the ones present in the mempool"
      }
    ]
  }
]