[
  {
    "sha": "845c86d128fb97d55d125e63653def38729bd2ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NDVjODZkMTI4ZmI5N2Q1NWQxMjVlNjM2NTNkZWYzODcyOWJkMmVk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-07-21T06:32:25Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2014-11-07T20:13:46Z"
      },
      "message": "Do not use third party services for IP detection.\n\nThis is a simplified re-do of closed pull #3088.\n\nThis patch eliminates the privacy and reliability problematic use\nof centralized web services for discovering the node's addresses\nfor advertisement.\n\nThe Bitcoin protocol already allows your peers to tell you what\nIP they think you have, but this data isn't trustworthy since\nthey could lie. So the challenge is using it without creating a\nDOS vector.\n\nTo accomplish this we adopt an approach similar to the one used\nby P2Pool: If we're announcing and don't have a better address\ndiscovered (e.g. via UPNP) or configured we just announce to\neach peer the address that peer told us. Since peers could\nalready replace, forge, or drop our address messages this cannot\ncreate a new vulnerability... but if even one of our peers is\ngiving us a good address we'll eventually make a useful\nadvertisement.\n\nWe also may randomly use the peer-provided address for the\ndaily rebroadcast even if we otherwise have a seemingly routable\naddress, just in case we've been misconfigured (e.g. by UPNP).\n\nTo avoid privacy problems, we only do these things if discovery\nis enabled.",
      "tree": {
        "sha": "1afeba7816baa72623cbfc6058f21d01fe1e2749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1afeba7816baa72623cbfc6058f21d01fe1e2749"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/845c86d128fb97d55d125e63653def38729bd2ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/845c86d128fb97d55d125e63653def38729bd2ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/845c86d128fb97d55d125e63653def38729bd2ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/845c86d128fb97d55d125e63653def38729bd2ed/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06037f3f46463e65ab74e0f34ba5f7a869d053fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06037f3f46463e65ab74e0f34ba5f7a869d053fd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06037f3f46463e65ab74e0f34ba5f7a869d053fd"
      }
    ],
    "stats": {
      "total": 209,
      "additions": 61,
      "deletions": 148
    },
    "files": [
      {
        "sha": "ee93fedd25877b275da408e4488790d960b593d4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/845c86d128fb97d55d125e63653def38729bd2ed/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/845c86d128fb97d55d125e63653def38729bd2ed/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=845c86d128fb97d55d125e63653def38729bd2ed",
        "patch": "@@ -574,6 +574,9 @@ bool AppInit2(boost::thread_group& threadGroup)\n         // to protect privacy, do not listen by default if a default proxy server is specified\n         if (SoftSetBoolArg(\"-listen\", false))\n             LogPrintf(\"AppInit2 : parameter interaction: -proxy set -> setting -listen=0\\n\");\n+        // to protect privacy, do not discover addresses by default\n+        if (SoftSetBoolArg(\"-discover\", false))\n+            LogPrintf(\"AppInit2 : parameter interaction: -proxy set -> setting -discover=0\\n\");\n     }\n \n     if (!GetBoolArg(\"-listen\", true)) {"
      },
      {
        "sha": "9f87a1100798f97b135eeadad77b8bd9fbc9bd5b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 21,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/845c86d128fb97d55d125e63653def38729bd2ed/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/845c86d128fb97d55d125e63653def38729bd2ed/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=845c86d128fb97d55d125e63653def38729bd2ed",
        "patch": "@@ -3474,12 +3474,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         else\n             pfrom->fRelayTxes = true;\n \n-        if (pfrom->fInbound && addrMe.IsRoutable())\n-        {\n-            pfrom->addrLocal = addrMe;\n-            SeenLocal(addrMe);\n-        }\n-\n         // Disconnect if we connected to ourself\n         if (nNonce == nLocalHostNonce && nNonce > 1)\n         {\n@@ -3488,6 +3482,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n+        pfrom->addrLocal = addrMe;\n+        if (pfrom->fInbound && addrMe.IsRoutable())\n+        {\n+            SeenLocal(addrMe);\n+        }\n+\n         // Be shy and don't send version until we hear\n         if (pfrom->fInbound)\n             pfrom->PushVersion();\n@@ -3508,7 +3508,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             {\n                 CAddress addr = GetLocalAddress(&pfrom->addr);\n                 if (addr.IsRoutable())\n+                {\n+                    pfrom->PushAddress(addr);\n+                } else if (IsPeerAddrLocalGood(pfrom)) {\n+                    addr.SetIP(pfrom->addrLocal);\n                     pfrom->PushAddress(addr);\n+                }\n             }\n \n             // Get recent addresses\n@@ -4371,24 +4376,18 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         static int64_t nLastRebroadcast;\n         if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n         {\n+            LOCK(cs_vNodes);\n+            BOOST_FOREACH(CNode* pnode, vNodes)\n             {\n-                LOCK(cs_vNodes);\n-                BOOST_FOREACH(CNode* pnode, vNodes)\n-                {\n-                    // Periodically clear setAddrKnown to allow refresh broadcasts\n-                    if (nLastRebroadcast)\n-                        pnode->setAddrKnown.clear();\n+                // Periodically clear setAddrKnown to allow refresh broadcasts\n+                if (nLastRebroadcast)\n+                    pnode->setAddrKnown.clear();\n \n-                    // Rebroadcast our address\n-                    if (fListen)\n-                    {\n-                        CAddress addr = GetLocalAddress(&pnode->addr);\n-                        if (addr.IsRoutable())\n-                            pnode->PushAddress(addr);\n-                    }\n-                }\n+                // Rebroadcast our address\n+                AdvertizeLocal(pnode);\n             }\n-            nLastRebroadcast = GetTime();\n+            if (!vNodes.empty())\n+                nLastRebroadcast = GetTime();\n         }\n \n         //"
      },
      {
        "sha": "a66875a89447c81e69ff8f050995802bca51580f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 125,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/845c86d128fb97d55d125e63653def38729bd2ed/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/845c86d128fb97d55d125e63653def38729bd2ed/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=845c86d128fb97d55d125e63653def38729bd2ed",
        "patch": "@@ -142,16 +142,19 @@ bool GetLocal(CService& addr, const CNetAddr *paddrPeer)\n }\n \n // get best local address for a particular peer as a CAddress\n+// Otherwise, return the unroutable 0.0.0.0 but filled in with\n+// the normal parameters, since the IP may be changed to a useful\n+// one by discovery.\n CAddress GetLocalAddress(const CNetAddr *paddrPeer)\n {\n-    CAddress ret(CService(\"0.0.0.0\",0),0);\n+    CAddress ret(CService(\"0.0.0.0\",GetListenPort()),0);\n     CService addr;\n     if (GetLocal(addr, paddrPeer))\n     {\n         ret = CAddress(addr);\n-        ret.nServices = nLocalServices;\n-        ret.nTime = GetAdjustedTime();\n     }\n+    ret.nServices = nLocalServices;\n+    ret.nTime = GetAdjustedTime();\n     return ret;\n }\n \n@@ -205,21 +208,38 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n     }\n }\n \n-// used when scores of local addresses may have changed\n-// pushes better local address to peers\n-void static AdvertizeLocal()\n+int GetnScore(const CService& addr)\n {\n-    LOCK(cs_vNodes);\n-    BOOST_FOREACH(CNode* pnode, vNodes)\n+    LOCK(cs_mapLocalHost);\n+    if (mapLocalHost.count(addr) == LOCAL_NONE)\n+        return 0;\n+    return mapLocalHost[addr].nScore;\n+}\n+\n+// Is our peer's addrLocal potentially useful as an external IP source?\n+bool IsPeerAddrLocalGood(CNode *pnode)\n+{\n+    return fDiscover && pnode->addr.IsRoutable() && pnode->addrLocal.IsRoutable() &&\n+           !IsLimited(pnode->addrLocal.GetNetwork());\n+}\n+\n+// pushes our own address to a peer\n+void AdvertizeLocal(CNode *pnode)\n+{\n+    if (fListen && pnode->fSuccessfullyConnected)\n     {\n-        if (pnode->fSuccessfullyConnected)\n+        CAddress addrLocal = GetLocalAddress(&pnode->addr);\n+        // If discovery is enabled, sometimes give our peer the address it\n+        // tells us that it sees us as in case it has a better idea of our\n+        // address than we do.\n+        if (IsPeerAddrLocalGood(pnode) && (!addrLocal.IsRoutable() ||\n+             GetRand((GetnScore(addrLocal) > LOCAL_MANUAL) ? 8:2) == 0))\n         {\n-            CAddress addrLocal = GetLocalAddress(&pnode->addr);\n-            if (addrLocal.IsRoutable() && (CService)addrLocal != (CService)pnode->addrLocal)\n-            {\n-                pnode->PushAddress(addrLocal);\n-                pnode->addrLocal = addrLocal;\n-            }\n+            addrLocal.SetIP(pnode->addrLocal);\n+        }\n+        if (addrLocal.IsRoutable())\n+        {\n+            pnode->PushAddress(addrLocal);\n         }\n     }\n }\n@@ -257,8 +277,6 @@ bool AddLocal(const CService& addr, int nScore)\n         SetReachable(addr.GetNetwork());\n     }\n \n-    AdvertizeLocal();\n-\n     return true;\n }\n \n@@ -296,12 +314,10 @@ bool SeenLocal(const CService& addr)\n             return false;\n         mapLocalHost[addr].nScore++;\n     }\n-\n-    AdvertizeLocal();\n-\n     return true;\n }\n \n+\n /** check whether a given address is potentially local */\n bool IsLocal(const CService& addr)\n {\n@@ -323,114 +339,12 @@ bool IsReachable(const CNetAddr& addr)\n     return IsReachable(net);\n }\n \n-bool GetMyExternalIP2(const CService& addrConnect, const char* pszGet, const char* pszKeyword, CNetAddr& ipRet)\n-{\n-    SOCKET hSocket;\n-    if (!ConnectSocket(addrConnect, hSocket))\n-        return error(\"GetMyExternalIP() : connection to %s failed\", addrConnect.ToString());\n-\n-    send(hSocket, pszGet, strlen(pszGet), MSG_NOSIGNAL);\n-\n-    string strLine;\n-    while (RecvLine(hSocket, strLine))\n-    {\n-        if (strLine.empty()) // HTTP response is separated from headers by blank line\n-        {\n-            while (true)\n-            {\n-                if (!RecvLine(hSocket, strLine))\n-                {\n-                    CloseSocket(hSocket);\n-                    return false;\n-                }\n-                if (pszKeyword == NULL)\n-                    break;\n-                if (strLine.find(pszKeyword) != string::npos)\n-                {\n-                    strLine = strLine.substr(strLine.find(pszKeyword) + strlen(pszKeyword));\n-                    break;\n-                }\n-            }\n-            CloseSocket(hSocket);\n-            if (strLine.find(\"<\") != string::npos)\n-                strLine = strLine.substr(0, strLine.find(\"<\"));\n-            strLine = strLine.substr(strspn(strLine.c_str(), \" \\t\\n\\r\"));\n-            while (strLine.size() > 0 && isspace(strLine[strLine.size()-1]))\n-                strLine.resize(strLine.size()-1);\n-            CService addr(strLine,0,true);\n-            LogPrintf(\"GetMyExternalIP() received [%s] %s\\n\", strLine, addr.ToString());\n-            if (!addr.IsValid() || !addr.IsRoutable())\n-                return false;\n-            ipRet.SetIP(addr);\n-            return true;\n-        }\n-    }\n-    CloseSocket(hSocket);\n-    return error(\"GetMyExternalIP() : connection closed\");\n-}\n-\n-bool GetMyExternalIP(CNetAddr& ipRet)\n-{\n-    CService addrConnect;\n-    const char* pszGet;\n-    const char* pszKeyword;\n-\n-    for (int nLookup = 0; nLookup <= 1; nLookup++)\n-    for (int nHost = 1; nHost <= 1; nHost++)\n-    {\n-        // We should be phasing out our use of sites like these. If we need\n-        // replacements, we should ask for volunteers to put this simple\n-        // php file on their web server that prints the client IP:\n-        //  <?php echo $_SERVER[\"REMOTE_ADDR\"]; ?>\n-        if (nHost == 1)\n-        {\n-            addrConnect = CService(\"91.198.22.70\", 80); // checkip.dyndns.org\n-\n-            if (nLookup == 1)\n-            {\n-                CService addrIP(\"checkip.dyndns.org\", 80, true);\n-                if (addrIP.IsValid())\n-                    addrConnect = addrIP;\n-            }\n-\n-            pszGet = \"GET / HTTP/1.1\\r\\n\"\n-                     \"Host: checkip.dyndns.org\\r\\n\"\n-                     \"User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)\\r\\n\"\n-                     \"Connection: close\\r\\n\"\n-                     \"\\r\\n\";\n-\n-            pszKeyword = \"Address:\";\n-        }\n-\n-        if (GetMyExternalIP2(addrConnect, pszGet, pszKeyword, ipRet))\n-            return true;\n-    }\n-\n-    return false;\n-}\n-\n-void ThreadGetMyExternalIP()\n-{\n-    CNetAddr addrLocalHost;\n-    if (GetMyExternalIP(addrLocalHost))\n-    {\n-        LogPrintf(\"GetMyExternalIP() returned %s\\n\", addrLocalHost.ToStringIP());\n-        AddLocal(addrLocalHost, LOCAL_HTTP);\n-    }\n-}\n-\n-\n-\n-\n-\n void AddressCurrentlyConnected(const CService& addr)\n {\n     addrman.Connected(addr);\n }\n \n \n-\n-\n uint64_t CNode::nTotalBytesRecv = 0;\n uint64_t CNode::nTotalBytesSent = 0;\n CCriticalSection CNode::cs_totalBytesRecv;\n@@ -1687,9 +1601,6 @@ void static Discover(boost::thread_group& threadGroup)\n     }\n #endif\n \n-    // Don't use external IPv4 discovery, when -onlynet=\"IPv6\"\n-    if (!IsLimited(NET_IPV4))\n-        threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"ext-ip\", &ThreadGetMyExternalIP));\n }\n \n void StartNode(boost::thread_group& threadGroup)"
      },
      {
        "sha": "e48acf564463d00595028f4a4c97208535baf97f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/845c86d128fb97d55d125e63653def38729bd2ed/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/845c86d128fb97d55d125e63653def38729bd2ed/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=845c86d128fb97d55d125e63653def38729bd2ed",
        "patch": "@@ -60,7 +60,6 @@ unsigned int SendBufferSize();\n \n void AddOneShot(std::string strDest);\n bool RecvLine(SOCKET hSocket, std::string& strLine);\n-bool GetMyExternalIP(CNetAddr& ipRet);\n void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const std::string& addrName);\n@@ -96,12 +95,13 @@ enum\n     LOCAL_IF,     // address a local interface listens on\n     LOCAL_BIND,   // address explicit bound to\n     LOCAL_UPNP,   // address reported by UPnP\n-    LOCAL_HTTP,   // address reported by whatismyip.com and similar\n     LOCAL_MANUAL, // address explicitly specified (-externalip=)\n \n     LOCAL_MAX\n };\n \n+bool IsPeerAddrLocalGood(CNode *pnode);\n+void AdvertizeLocal(CNode *pnode);\n void SetLimited(enum Network net, bool fLimited = true);\n bool IsLimited(enum Network net);\n bool IsLimited(const CNetAddr& addr);"
      }
    ]
  }
]