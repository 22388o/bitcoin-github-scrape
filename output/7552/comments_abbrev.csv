jonasschnelli,2016-02-18T14:36:52Z,Concept ACK.\n,https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-185748475,185748475,
dcousens,2016-02-19T01:47:00Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-186007936,186007936,
gmaxwell,2016-02-19T01:51:55Z,"Concept-ACK. \n\nShould the sense of final and non-standard be inverted in the options?  It would be surprising to pass a transaction to this RPC, have it pass.... then find that the network won't accept it.  Practically speaking, except for special cases and developers standardness is pretty much as forceful as validity.\n\nAn obvious future  extension wrt finality would be adding a field in the ",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-186009324,186009324,
dcousens,2016-02-19T04:20:14Z,"~~@gmaxwell would it not be easier to make an optional parameter the estimated block height?~~\n~~This would probably need to be specified for each transaction if we're passing a list (so you can do CSV chains etc).~~\nOr would it be better to just give that feedback to the user as the ""earliest possible block height"" it could be included in? [per transaction]\n\n**edit:** As suggested by @gmaxwel",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-186043461,186043461,
laanwj,2016-02-19T08:25:52Z,"> it would be surprising to pass a transaction to this RPC, have it pass.... then find that the network won't accept it. \n\nThat's why those checks are enabled (true) by default. For specific cases they could be disabled. Only for the coinbase check I couldn't think of any reason why one'd want to disable it, so I left that out.\n\n> An obvious future extension wrt finality would be adding a fiel",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-186115328,186115328,
instagibbs,2016-02-19T22:15:30Z,"~~concept~~ tested ACK, this is great for testing smart contract stuff with timelocks.\n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-186431705,186431705,
jtimon,2016-02-20T03:03:19Z,"concept ack, but this is very incomplete, I suggest we keep it open without merging too fast.\n\nWe're arbitrarily calling IsStandardTx() but not AreInputsStandard(). Those are just two easily functions containing relay/ming policy, but there's much more related code spread out there.\n\nNit: Remove call to IsStandardTx() in verifytx, we can make another rpc call (or add an option in this one) cal",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-186494512,186494512,
dcousens,2016-02-21T16:05:39Z,"IMHO agreed this would be best implemented by `Consensus::VerifyTx` or the like.\n\nI also like the idea of a parameter for rejection based purely on consensus,  and irrespective of local node policy. \n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-186850691,186850691,
laanwj,2016-03-03T13:35:25Z,@jtimon I don't feel like doing all kinds of refactors here (too much risk to break other things). Please just review this for correctness.\n,https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-191762997,191762997,
laanwj,2016-03-03T13:37:37Z,"> I also like the idea of a parameter for rejection based purely on consensus, and irrespective of local node policy.\n\nRight - that's possible already. Disable `check_standard`, and possible `check_final`, or am I missing something?\n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-191763466,191763466,
jtimon,2016-03-03T13:46:15Z,"Fair enough, concept ack.\nI would still prefer a more generic and extensible option than bool check_standard (string policy=""default""/""none"" ?).\nI still don't know why isstandard is called but areinputsstandard isn't. There's more to-be-consensus code out of here (that's what I mean by this is incomplete ).\n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-191765744,191765744,
laanwj,2016-03-03T13:47:37Z,"> I still don't know why isstandard is called but areinputsstandard isn't. \n\nYes, that's a legit bug (I added it to TODOs in the opening post)\n\n> I would still prefer a more generic and extensible option than bool check_standard (string policy=""default""/""none"" ?).\n\nWhat other options would you imagine there? Adding more options to the options structure is free, so there could always be a ""st",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-191766051,191766051,
laanwj,2016-03-18T14:00:12Z,I've factored out the transaction verification to a (local) VerifyTransaction function.\n,https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-198373650,198373650,
laanwj,2016-03-28T09:27:30Z,"Too much disagreement on how this should be implemented, not going to bother anymore.\n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-202319726,202319726,
jtimon,2016-03-28T11:04:06Z,"I donâ€™t understand why this is closed. I asked to wait for some refactors first. You said no, fair enough, they can be done later. Then you create the verifyTx function, but not in the consensus package or dir, and including policy code. I can't say I like that (I'm not going to link to the VerifyTx I like anymore because as said it requieres refactors and I was waiting for 0.12.1 first. I guess I",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-202341478,202341478,
laanwj,2016-03-28T11:17:44Z,"> But why not continue with your original version? Wasn't I the only person complaining and didn't I said fair enough and concept ACK?\n> I really can't see ""too much disagreement here, unless you're talking about some conversation on IRC\n\nWell someone else on IRC was worried that the output of this doesn't exactly match the output of `sendrawtransaction`.\n\n```\n<runeks> wumpus: Awesome! Looks",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-202344232,202344232,
jtimon,2016-03-28T11:27:31Z,"Thank you.\n\nWhy the additional requirement of this having to return the same as sendrawtx?\n\nWouldn't everything be much easier if VerifyTx ONLY did consensus checks? As said we can have a VerifyAndAcceptTx later thatalso does relay/mempool policy stuff as well (but, yeah, I agree the policy code needs many refactors if you want to use any of the fee-related code in the CtxMempool and AcceptToM",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-202345945,202345945,
laanwj,2016-03-28T12:05:31Z,"> Why the additional requirement of this having to return the same as sendrawtx?\n\nThat is the default assumption. I suppose if we can document the differences (e.g. no mempool replacement, no fee checks) that'd help.\n\nIf you want to do only consensus checks you can already do that with this code, just disable the standardness check (and possibly the use mempool flag). I do think checking stand",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-202357406,202357406,
jtimon,2016-03-29T13:21:46Z,"Well, yeah, documenting the differences seems much simpler to make the relay/mempool policy checks complete. So called ""standardness"" is encapsulated in policy/policy.o and its dependencies, but completing the rest of the policy checks won't be so simple I think.\nI would rather complete consensus or to-be-consensus checks first (ie bips 68, 112 and 113).\nWith or without ""standardness"", I may bac",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-202890836,202890836,
NicolasDorier,2016-07-15T11:20:48Z,"Wouldn't the easiest way to make this feature is to create a dummy block, with a dummy coinbase, and add the transaction inside it and call ConnectBlock with fJustCheck to true ?\n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-232926799,232926799,
jtimon,2016-07-15T11:39:35Z,"I don't think the goal of this PR was offering the functionality the ""easiest way"", but since it was checking policy things as well, I'm not sure I ever understood the PR.\nIn any case, what you propose (which doesn't sound very elegant) would also not be complete: currently you would need to also call ContextualCheckBlock() with that dummy block for the tx to be fully verified.\n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-232930602,232930602,
NicolasDorier,2016-07-15T14:02:53Z,"At the API level, I think users care only about one parameter: Whether we check against Node Policy or Consensus Policy. I think the current PR was attempting too many options.\n\nI'll probably try to make it later since this PR already did most of the heavy work.\n",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-232958986,232958986,
laanwj,2016-07-18T06:55:03Z,"> Wouldn't the easiest way to make this feature is to create a dummy block, with a dummy coinbase, and add the transaction inside it and call ConnectBlock with fJustCheck to true ?\n\nOriginally I meant this as a pre-check whether `sendrawtransaction` will accept a chain of transactions.\nCreating a dummy block would work to check consensus validity only.\n\n>  I think the current PR was attemptin",https://github.com/bitcoin/bitcoin/pull/7552#issuecomment-233246956,233246956,
MarcoFalke,2016-02-25T14:15:48Z,Nit: Appears to be [missing](https://xkcd.com/859/) the left parenthesis.\n,https://github.com/bitcoin/bitcoin/pull/7552#discussion_r54099802,54099802,src/rpc/rawtransaction.cpp
instagibbs,2016-02-25T14:18:00Z,or adding a superfluous right one\n,https://github.com/bitcoin/bitcoin/pull/7552#discussion_r54100122,54100122,src/rpc/rawtransaction.cpp
jtimon,2016-02-25T19:22:20Z,"As said I would leave this out for now, until we have more relay/mining policy encapsulated to expose here in a more generic way.\nEDIT: I didn't noticed that you are also using this for choosing the script flags...then I guess I would one of these:\n\nA) Replace this parameter with a flags one and leave calling to IsStandardTx() for later.\nB) Maintain IsStandardTx() but also add AreInputsStandar",https://github.com/bitcoin/bitcoin/pull/7552#discussion_r54148608,54148608,src/rpc/rawtransaction.cpp
mrbandrews,2016-03-10T16:12:47Z,"I wrote some code to test the ordering of dependent tx's, then realized this code here does the same thing my code did.  If you want to also test calling verifyrawtransaxtions with dependent tx's, you could add this code at this point.  It was suggested to me to copy-paste the git diff result: \n\n``` diff\ndiff --git a/qa/rpc-tests/rawtransactions.py b/qa/rpc-tests/rawtransactions.py\nindex 9039b",https://github.com/bitcoin/bitcoin/pull/7552#discussion_r55703411,55703411,qa/rpc-tests/rawtransactions.py
laanwj,2016-03-11T08:08:15Z,"Thanks, will add that test!\n",https://github.com/bitcoin/bitcoin/pull/7552#discussion_r55800385,55800385,qa/rpc-tests/rawtransactions.py
MarcoFalke,2016-03-14T15:26:17Z,"```\nAssertion failed: \n\n  File ""/home/travis/build/bitcoin/bitcoin/bitcoin-x86_64-unknown-linux-gnu/qa/rpc-tests/test_framework/test_framework.py"", line 135, in main\n\n    self.run_test()\n\n  File ""/home/travis/build/bitcoin/bitcoin/bitcoin-x86_64-unknown-linux-gnu/qa/rpc-tests/rawtransactions.py"", line 64, in run_test\n\n    assert(err['code'] == 16)\n```\n",https://github.com/bitcoin/bitcoin/pull/7552#discussion_r56018288,56018288,qa/rpc-tests/rawtransactions.py
laanwj,2016-03-14T17:29:39Z,"Hmm, interesting, so CheckSequenceLocks actually looks up the inputs, moving it after HaveInputs\n(more consistent with AcceptToMemoryPool anyhow)\n",https://github.com/bitcoin/bitcoin/pull/7552#discussion_r56040564,56040564,qa/rpc-tests/rawtransactions.py
