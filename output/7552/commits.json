[
  {
    "sha": "add22596b16a9ea394438b381114cb13656a1983",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGQyMjU5NmIxNmE5ZWEzOTQ0MzhiMzgxMTE0Y2IxMzY1NmExOTgz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-17T17:44:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:35:59Z"
      },
      "message": "rpc: Add `verifyrawtransactions` call\n\nAdd a RPC call to verify a set of raw transactions without propagating them.\n\nImplements #4162.\n\n    verifyrawtransactions [\"hexstring\",...] ( options )\n\n    Verifies one or more raw transactions (serialized, hex-encoded). If transactions depend on each other, they must be provided in order.\n\n    Arguments:\n    1. [\"hexstring\",...] (array of strings, required) The hex string of the raw transactions)\n    2. options   (json object, optional)\n         {\n           \"include_mempool\"          (boolean, optional, default=true) Whether to include the mem pool\n           \"check_final\"              (boolean, optional, default=true) Check that the transactions will be final by next block\n           \"check_standard\"           (boolean, optional, default=true) Perform transaction standard checks\n         }\n\n    Result:\n    null if the verification was successful, otherwise an error object:\n    {\n      \"index\":n,                (numeric) Index in transactions array of failed transaction\n      \"hash\":\"hex\",             (string) Transaction hash of failed transaction\n      \"code\": n,                (numeric) Reject code\n      \"reason\": \"text\"          (string) Reject reason\n      \"debug_message\": \"text\"   (string) Reject debug message\n    }",
      "tree": {
        "sha": "50f49ee823f12ee667deebeb03bd7b922bbbf708",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50f49ee823f12ee667deebeb03bd7b922bbbf708"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/add22596b16a9ea394438b381114cb13656a1983",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/add22596b16a9ea394438b381114cb13656a1983",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/add22596b16a9ea394438b381114cb13656a1983",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/add22596b16a9ea394438b381114cb13656a1983/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29e1131c4642459349a0ed4737121fb1902f8a47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29e1131c4642459349a0ed4737121fb1902f8a47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29e1131c4642459349a0ed4737121fb1902f8a47"
      }
    ],
    "stats": {
      "total": 119,
      "additions": 119,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d636fc06ae3ef2dc10cf56f403d142d9e6fd974a",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/add22596b16a9ea394438b381114cb13656a1983/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/add22596b16a9ea394438b381114cb13656a1983/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=add22596b16a9ea394438b381114cb13656a1983",
        "patch": "@@ -100,6 +100,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"prioritisetransaction\", 2 },\n     { \"setban\", 2 },\n     { \"setban\", 3 },\n+    { \"verifyrawtransactions\", 0 },\n+    { \"verifyrawtransactions\", 1 },\n };\n \n class CRPCConvertTable"
      },
      {
        "sha": "13122b52fa2e664a17952fb57fcd251712d34cc0",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/add22596b16a9ea394438b381114cb13656a1983/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/add22596b16a9ea394438b381114cb13656a1983/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=add22596b16a9ea394438b381114cb13656a1983",
        "patch": "@@ -839,3 +839,118 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n \n     return hashTx.GetHex();\n }\n+\n+UniValue verifyrawtransactions(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() < 1 || params.size() > 2)\n+        throw runtime_error(\n+            \"verifyrawtransactions [\\\"hexstring\\\",...] ( options )\\n\"\n+            \"\\nVerifies one or more raw transactions (serialized, hex-encoded). If transactions depend on each other, they must be provided in order.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. [\\\"hexstring\\\",...] (array of strings, required) The hex string of the raw transactions)\\n\"\n+            \"2. options   (json object, optional)\\n\"\n+            \"     {\\n\"\n+            \"       \\\"include_mempool\\\"          (boolean, optional, default=true) Whether to include the mem pool\\n\"\n+            \"       \\\"check_final\\\"              (boolean, optional, default=true) Check that the transactions will be final by next block\\n\"\n+            \"       \\\"check_standard\\\"           (boolean, optional, default=true) Perform transaction standard checks\\n\"\n+            \"     }\\n\"\n+            \"\\nResult:\\n\"\n+            \"null if the verification was successful, otherwise an error object:\\n\"\n+            \"{\\n\"\n+            \"  \\\"index\\\":n,                (numeric) Index in transactions array of failed transaction\\n\"\n+            \"  \\\"hash\\\":\\\"hex\\\",             (string) Transaction hash of failed transaction\\n\"\n+            \"  \\\"code\\\": n,                (numeric) Reject code\\n\"\n+            \"  \\\"reason\\\": \\\"text\\\"          (string) Reject reason\\n\"\n+            \"  \\\"debug_message\\\": \\\"text\\\"   (string) Reject debug message\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            \"\\nCreate a transaction\\n\"\n+            + HelpExampleCli(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\" : \\\\\\\"mytxid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\" \\\"{\\\\\\\"myaddress\\\\\\\":0.01}\\\"\") +\n+            \"Sign the transaction, and get back the hex\\n\"\n+            + HelpExampleCli(\"signrawtransaction\", \"\\\"myhex\\\"\") +\n+            \"\\nVerify the transaction (signed hex)\\n\"\n+            + HelpExampleCli(\"verifyrawtransactions\", \"'[\\\"signedhex\\\"]'\") +\n+            \"\\nAs a json rpc call\\n\"\n+            + HelpExampleRpc(\"verifyrawtransactions\", \"[\\\"signedhex\\\"]\")\n+        );\n+\n+    LOCK2(cs_main,mempool.cs);\n+\n+    // Parse parameters\n+    std::vector<std::string> hexes;\n+    bool includeMempool = true;\n+    bool checkFinal = true;\n+    bool checkStandard = true;\n+    if (params.size() < 1)\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"Missing transactions argument\");\n+    if (params[0].isArray()) {\n+        for (size_t i=0; i<params[0].size(); ++i)\n+            hexes.push_back(params[0][i].get_str());\n+    } else {\n+        throw JSONRPCError(RPC_TYPE_ERROR, \"First argument must be an array of strings\");\n+    }\n+    if (params.size() > 1) {\n+        const UniValue &options = params[1];\n+        if (!options.isObject())\n+            throw JSONRPCError(RPC_TYPE_ERROR, \"Second argument must be an object specifying options\");\n+        UniValue o;\n+        o = find_value(options, \"include_mempool\");\n+        if (o.isBool())\n+            includeMempool = o.get_bool();\n+        o = find_value(options, \"check_final\");\n+        if (o.isBool())\n+            checkFinal = o.get_bool();\n+        o = find_value(options, \"check_standard\");\n+        if (o.isBool())\n+            checkStandard = o.get_bool();\n+    }\n+\n+    // Parse hex strings as transactions\n+    std::vector<CTransaction> txes;\n+    for (size_t i=0; i<hexes.size(); ++i) {\n+        CTransaction tx;\n+        if (!DecodeHexTx(tx, hexes[i]))\n+            throw JSONRPCError(RPC_DESERIALIZATION_ERROR, strprintf(\"TX decode failed (index %i)\", i));\n+        txes.push_back(tx);\n+    }\n+\n+    // Check transactions, one by one, inserting them into a temporary cache\n+    CCoinsViewMemPool coinsTipMempool(pcoinsTip, mempool);\n+    CCoinsViewCache view(includeMempool ? (CCoinsView*)&coinsTipMempool : pcoinsTip);\n+    int height = chainActive.Height() + 1;\n+    for (size_t i=0; i<txes.size(); ++i) {\n+        const CTransaction &tx = txes[i];\n+        bool ok = true;\n+        CValidationState state;\n+        if (ok)\n+            ok = CheckTransaction(tx, state);\n+        if (ok && checkStandard) {\n+            std::string reason;\n+            if (!IsStandardTx(tx, reason)) {\n+                ok = false;\n+                state.DoS(0, false, REJECT_NONSTANDARD, reason);\n+            }\n+        }\n+        if (ok && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n+            ok = false;\n+            state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+        }\n+        if (ok) {\n+            ok = CheckInputs(tx, state, view, true,\n+                checkStandard ? STANDARD_SCRIPT_VERIFY_FLAGS : MANDATORY_SCRIPT_VERIFY_FLAGS,\n+                true);\n+        }\n+        if (ok) {\n+            UpdateCoins(tx, state, view, height);\n+        } else {\n+            UniValue rv(UniValue::VOBJ);\n+            rv.push_back(Pair(\"index\", (int)i));\n+            rv.push_back(Pair(\"hash\", tx.GetHash().ToString()));\n+            rv.push_back(Pair(\"code\", (int)state.GetRejectCode()));\n+            rv.push_back(Pair(\"reason\", state.GetRejectReason()));\n+            rv.push_back(Pair(\"debug_message\", state.GetDebugMessage()));\n+            return rv;\n+        }\n+    }\n+    return NullUniValue;\n+}"
      },
      {
        "sha": "c38aaa1c68fe7d619cfec6e9896d57d1f396d86c",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/add22596b16a9ea394438b381114cb13656a1983/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/add22596b16a9ea394438b381114cb13656a1983/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=add22596b16a9ea394438b381114cb13656a1983",
        "patch": "@@ -307,6 +307,7 @@ static const CRPCCommand vRPCCommands[] =\n     { \"rawtransactions\",    \"getrawtransaction\",      &getrawtransaction,      true  },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false },\n     { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"verifyrawtransactions\",  &verifyrawtransactions,  true  },\n \n     /* Utility functions */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },"
      },
      {
        "sha": "ee821eb08befcd1a7a0b3feac384f28a9095d02c",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/add22596b16a9ea394438b381114cb13656a1983/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/add22596b16a9ea394438b381114cb13656a1983/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=add22596b16a9ea394438b381114cb13656a1983",
        "patch": "@@ -219,6 +219,7 @@ extern UniValue createrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decoderawtransaction(const UniValue& params, bool fHelp);\n extern UniValue decodescript(const UniValue& params, bool fHelp);\n extern UniValue signrawtransaction(const UniValue& params, bool fHelp);\n+extern UniValue verifyrawtransactions(const UniValue& params, bool fHelp);\n extern UniValue sendrawtransaction(const UniValue& params, bool fHelp);\n extern UniValue gettxoutproof(const UniValue& params, bool fHelp);\n extern UniValue verifytxoutproof(const UniValue& params, bool fHelp);"
      }
    ]
  },
  {
    "sha": "eb76988fbc18735a9bf0b48936caf73354e9030d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYjc2OTg4ZmJjMTg3MzVhOWJmMGI0ODkzNmNhZjczMzU0ZTkwMzBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-18T09:52:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:35:59Z"
      },
      "message": "squashme: improve logic, add tests",
      "tree": {
        "sha": "9e7120f9707a0a4eddd107eab0523e5aaded31fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9e7120f9707a0a4eddd107eab0523e5aaded31fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eb76988fbc18735a9bf0b48936caf73354e9030d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb76988fbc18735a9bf0b48936caf73354e9030d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eb76988fbc18735a9bf0b48936caf73354e9030d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb76988fbc18735a9bf0b48936caf73354e9030d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "add22596b16a9ea394438b381114cb13656a1983",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/add22596b16a9ea394438b381114cb13656a1983",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/add22596b16a9ea394438b381114cb13656a1983"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 81,
      "deletions": 12
    },
    "files": [
      {
        "sha": "fadc7752bdb82ceec937db76adf66cb1e204245d",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb76988fbc18735a9bf0b48936caf73354e9030d/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb76988fbc18735a9bf0b48936caf73354e9030d/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=eb76988fbc18735a9bf0b48936caf73354e9030d",
        "patch": "@@ -10,6 +10,7 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n+from binascii import unhexlify,hexlify\n \n # Create one-input, one-output, no-fee transaction:\n class RawTransactionsTest(BitcoinTestFramework):\n@@ -56,6 +57,14 @@ def run_test(self):\n         rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n         rawtx   = self.nodes[2].signrawtransaction(rawtx)\n \n+        # check missing input also using verifyrawtransactions\n+        err   = self.nodes[2].verifyrawtransactions([rawtx['hex']])\n+        assert(err is not None)\n+        assert(err['index'] == 0)\n+        assert(err['code'] == 16)\n+        assert(err['reason'].startswith('bad-txns-inputs-missingorspent'))\n+\n+        # check sendrawtransaction\n         errorString = \"\"\n         try:\n             rawtx   = self.nodes[2].sendrawtransaction(rawtx['hex'])\n@@ -64,6 +73,61 @@ def run_test(self):\n \n         assert(\"Missing inputs\" in errorString)\n \n+        #################################\n+        # validaterawtransactions tests #\n+        #################################\n+        inputs  = []\n+        outputs = { self.nodes[0].getnewaddress() : 4.998 }\n+        rawtx   = self.nodes[2].createrawtransaction(inputs, outputs)\n+\n+        # check that unfunded transaction is invalid\n+        err   = self.nodes[2].verifyrawtransactions([rawtx])\n+        assert(err is not None)\n+        assert(err['index'] == 0)\n+        assert(err['code'] == 16)\n+        assert(err['reason'].startswith('bad-txns-vin-empty'))\n+\n+        rawtx   = self.nodes[2].fundrawtransaction(rawtx)\n+        rawtx   = rawtx['hex']\n+\n+        # check that unsigned transaction is invalid\n+        err   = self.nodes[2].verifyrawtransactions([rawtx])\n+        assert(err is not None)\n+        assert(err['index'] == 0)\n+        assert(err['code'] == 16)\n+        assert(err['reason'].startswith('mandatory-script-verify-flag-failed (Operation not valid with the current stack size)'))\n+\n+        rawtx   = self.nodes[2].signrawtransaction(rawtx)\n+        rawtx   = rawtx['hex']\n+\n+        # check that transaction is fully valid\n+        err   = self.nodes[2].verifyrawtransactions([rawtx])\n+        assert(err is None)\n+\n+        # check that duplicate transaction causes missing/spent inputs error\n+        # in second transaction\n+        err   = self.nodes[2].verifyrawtransactions([rawtx,rawtx])\n+        assert(err is not None)\n+        assert(err['index'] == 1)\n+        assert(err['code'] == 16)\n+        assert(err['reason'].startswith('bad-txns-inputs-missingorspent'))\n+\n+        # corrupt the transaction output to invalidate the signature, will result in EVAL_FALSE\n+        rawtx = bytearray(unhexlify(rawtx))\n+        rawtx[-10] = rawtx[-10] ^ 0xff\n+        rawtx = hexlify(rawtx)\n+        err   = self.nodes[2].verifyrawtransactions([rawtx])\n+        assert(err['index'] == 0)\n+        assert(err['code'] == 16)\n+        assert(err['reason'].startswith('mandatory-script-verify-flag-failed (Script evaluated without error but finished with a false/empty top stack element)'))\n+\n+        # loose coinbase transaction should be rejected\n+        rawtx = '01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff4d04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73ffffffff0100f2052a01000000434104678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5fac00000000'\n+        err   = self.nodes[2].verifyrawtransactions([rawtx])\n+        assert(err['index'] == 0)\n+        assert(err['code'] == 16)\n+        assert(err['reason'].startswith('coinbase'))\n+\n         #########################\n         # RAW TX MULTISIG TESTS #\n         #########################\n@@ -132,6 +196,7 @@ def run_test(self):\n         \n         rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n         assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n+\n         self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n         self.sync_all()"
      },
      {
        "sha": "a680d2e8c303493157ff8777799aef25834cc998",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 12,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eb76988fbc18735a9bf0b48936caf73354e9030d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eb76988fbc18735a9bf0b48936caf73354e9030d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=eb76988fbc18735a9bf0b48936caf73354e9030d",
        "patch": "@@ -920,27 +920,31 @@ UniValue verifyrawtransactions(const UniValue& params, bool fHelp)\n     int height = chainActive.Height() + 1;\n     for (size_t i=0; i<txes.size(); ++i) {\n         const CTransaction &tx = txes[i];\n-        bool ok = true;\n         CValidationState state;\n-        if (ok)\n-            ok = CheckTransaction(tx, state);\n-        if (ok && checkStandard) {\n+        if (state.IsValid())\n+            CheckTransaction(tx, state);\n+        if (state.IsValid() && checkStandard) {\n             std::string reason;\n             if (!IsStandardTx(tx, reason)) {\n-                ok = false;\n-                state.DoS(0, false, REJECT_NONSTANDARD, reason);\n+                state.Invalid(false, REJECT_NONSTANDARD, reason);\n             }\n         }\n-        if (ok && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n-            ok = false;\n-            state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n+        if (state.IsValid() && tx.IsCoinBase()) {\n+            state.Invalid(false, REJECT_INVALID, \"coinbase\");\n         }\n-        if (ok) {\n-            ok = CheckInputs(tx, state, view, true,\n+        if (state.IsValid() && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n+            state.Invalid(false, REJECT_NONSTANDARD, \"non-final\");\n+        }\n+        // Do this check separately because CheckInputs will set code 0 and no reason for missing inputs\n+        if (state.IsValid() && !view.HaveInputs(tx)) {\n+            state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n+        }\n+        if (state.IsValid()) {\n+            CheckInputs(tx, state, view, true,\n                 checkStandard ? STANDARD_SCRIPT_VERIFY_FLAGS : MANDATORY_SCRIPT_VERIFY_FLAGS,\n                 true);\n         }\n-        if (ok) {\n+        if (state.IsValid()) {\n             UpdateCoins(tx, state, view, height);\n         } else {\n             UniValue rv(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "509da5dea4e638d2b971d9c829cc8f2327d1443b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDlkYTVkZWE0ZTYzOGQyYjk3MWQ5YzgyOWNjOGYyMzI3ZDE0NDNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-19T08:58:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:36:00Z"
      },
      "message": "squashme: check for invalid options\n\nFor future extensibility it's important that unrecognized options are rejected.",
      "tree": {
        "sha": "acfc33f8a51859556b0be94d2c95dcaf511934fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acfc33f8a51859556b0be94d2c95dcaf511934fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/509da5dea4e638d2b971d9c829cc8f2327d1443b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/509da5dea4e638d2b971d9c829cc8f2327d1443b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/509da5dea4e638d2b971d9c829cc8f2327d1443b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/509da5dea4e638d2b971d9c829cc8f2327d1443b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb76988fbc18735a9bf0b48936caf73354e9030d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb76988fbc18735a9bf0b48936caf73354e9030d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb76988fbc18735a9bf0b48936caf73354e9030d"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 23,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0dcf6529513ab57bd2657584d0f9bd0c80ef230a",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509da5dea4e638d2b971d9c829cc8f2327d1443b/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509da5dea4e638d2b971d9c829cc8f2327d1443b/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=509da5dea4e638d2b971d9c829cc8f2327d1443b",
        "patch": "@@ -128,6 +128,17 @@ def run_test(self):\n         assert(err['code'] == 16)\n         assert(err['reason'].startswith('coinbase'))\n \n+        # passing no transactions at all is always successful, albeit boring\n+        err   = self.nodes[2].verifyrawtransactions([])\n+        assert(err is None)\n+\n+        # invalid option name\n+        try:\n+            err   = self.nodes[2].verifyrawtransactions([],{'check_transaction_color':False})\n+            assert(false) # invalid option must cause exception\n+        except JSONRPCException,e:\n+            assert(e.error['code'] == -8) # RPC_INVALID_PARAMETER\n+\n         #########################\n         # RAW TX MULTISIG TESTS #\n         #########################"
      },
      {
        "sha": "7058a9abc4d069e4311baea3e0d61dbcf3a35388",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/509da5dea4e638d2b971d9c829cc8f2327d1443b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/509da5dea4e638d2b971d9c829cc8f2327d1443b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=509da5dea4e638d2b971d9c829cc8f2327d1443b",
        "patch": "@@ -893,16 +893,18 @@ UniValue verifyrawtransactions(const UniValue& params, bool fHelp)\n         const UniValue &options = params[1];\n         if (!options.isObject())\n             throw JSONRPCError(RPC_TYPE_ERROR, \"Second argument must be an object specifying options\");\n-        UniValue o;\n-        o = find_value(options, \"include_mempool\");\n-        if (o.isBool())\n-            includeMempool = o.get_bool();\n-        o = find_value(options, \"check_final\");\n-        if (o.isBool())\n-            checkFinal = o.get_bool();\n-        o = find_value(options, \"check_standard\");\n-        if (o.isBool())\n-            checkStandard = o.get_bool();\n+        std::vector<std::string> keys = options.getKeys();\n+        const std::vector<UniValue> &values = options.getValues();\n+        for (unsigned int i=0; i<keys.size(); ++i) {\n+            if (keys[i] == \"include_mempool\")\n+                includeMempool = values[i].get_bool();\n+            else if (keys[i] == \"check_final\")\n+                checkFinal = values[i].get_bool();\n+            else if (keys[i] == \"check_standard\")\n+                checkStandard = values[i].get_bool();\n+            else\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Unknown option \" + keys[i]);\n+        }\n     }\n \n     // Parse hex strings as transactions"
      }
    ]
  },
  {
    "sha": "a8c26fcbed763409a73882edd7c8872cefa31bff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGMyNmZjYmVkNzYzNDA5YTczODgyZWRkN2M4ODcyY2VmYTMxYmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-19T09:18:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:36:00Z"
      },
      "message": "squashme: add test for include_mempool option",
      "tree": {
        "sha": "68fcd95b25837d76992b0d10eb2a36715d4d0f47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68fcd95b25837d76992b0d10eb2a36715d4d0f47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8c26fcbed763409a73882edd7c8872cefa31bff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c26fcbed763409a73882edd7c8872cefa31bff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8c26fcbed763409a73882edd7c8872cefa31bff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c26fcbed763409a73882edd7c8872cefa31bff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "509da5dea4e638d2b971d9c829cc8f2327d1443b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/509da5dea4e638d2b971d9c829cc8f2327d1443b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/509da5dea4e638d2b971d9c829cc8f2327d1443b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 19,
      "deletions": 1
    },
    "files": [
      {
        "sha": "41b75761d0e1afcddef624be989c06f6f9c796bf",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 19,
        "deletions": 1,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8c26fcbed763409a73882edd7c8872cefa31bff/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8c26fcbed763409a73882edd7c8872cefa31bff/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=a8c26fcbed763409a73882edd7c8872cefa31bff",
        "patch": "@@ -208,7 +208,25 @@ def run_test(self):\n         rawTxSigned = self.nodes[2].signrawtransaction(rawTx, inputs)\n         assert_equal(rawTxSigned['complete'], True) #node2 can sign the tx compl., own two of three keys\n \n-        self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n+        newTxId = self.nodes[2].sendrawtransaction(rawTxSigned['hex'])\n+\n+        # after syncing up mempools, check that verifyrawtransactions against\n+        # mempool and against chain will now diverge when an output from the\n+        # previously constructed transaction is used\n+        self.sync_all()\n+        inputs = [{ \"txid\" : newTxId, \"vout\" : 0 }]\n+        outputs = { self.nodes[0].getnewaddress() : 2.19 }\n+        rawTx2 = self.nodes[0].createrawtransaction(inputs, outputs)\n+        rawTx2 = self.nodes[0].signrawtransaction(rawTx2)\n+        rawTx2 = rawTx2['hex']\n+        err   = self.nodes[0].verifyrawtransactions([rawTx2],{'include_mempool':True})\n+        assert(err is None)\n+        err   = self.nodes[0].verifyrawtransactions([rawTx2],{'include_mempool':False})\n+        assert(err is not None)\n+        assert(err['code'] == 16)\n+        assert(err['reason'].startswith('bad-txns-inputs-missingorspent'))\n+\n+        # mine the transaction into a block and check end result\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n         self.sync_all()\n         self.nodes[0].generate(1)"
      }
    ]
  },
  {
    "sha": "d1cda05535473c360e85591ec60776fd95c6ecb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWNkYTA1NTM1NDczYzM2MGU4NTU5MWVjNjA3NzZmZDk1YzZlY2I0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-19T09:21:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:36:00Z"
      },
      "message": "squashme: obvious end result test",
      "tree": {
        "sha": "075fee7ef64c070a8034d3270a5c10a6f033c3cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/075fee7ef64c070a8034d3270a5c10a6f033c3cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1cda05535473c360e85591ec60776fd95c6ecb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1cda05535473c360e85591ec60776fd95c6ecb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1cda05535473c360e85591ec60776fd95c6ecb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1cda05535473c360e85591ec60776fd95c6ecb4/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8c26fcbed763409a73882edd7c8872cefa31bff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8c26fcbed763409a73882edd7c8872cefa31bff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8c26fcbed763409a73882edd7c8872cefa31bff"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9039bc65640e84c217b8d31d1477e1eeb30aabd4",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1cda05535473c360e85591ec60776fd95c6ecb4/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1cda05535473c360e85591ec60776fd95c6ecb4/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=d1cda05535473c360e85591ec60776fd95c6ecb4",
        "patch": "@@ -232,6 +232,9 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n         assert_equal(self.nodes[0].getbalance(), bal+Decimal('50.00000000')+Decimal('2.19000000')) #block reward + tx\n+        # now that its ancester is in a block, the transaction should pass verification without mempool as well\n+        err   = self.nodes[0].verifyrawtransactions([rawTx2],{'include_mempool':False})\n+        assert(err is None)\n \n if __name__ == '__main__':\n     RawTransactionsTest().main()"
      }
    ]
  },
  {
    "sha": "0352287d038a895b4fdd3f45a4848a3914e42b46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzUyMjg3ZDAzOGE4OTViNGZkZDNmNDVhNDg0OGEzOTE0ZTQyYjQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-14T14:17:08Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:36:00Z"
      },
      "message": "squashme: call CheckSequenceLocks and AreInputsStandard",
      "tree": {
        "sha": "59ce763c04f11c791491032b6f2f40d67ab961b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59ce763c04f11c791491032b6f2f40d67ab961b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0352287d038a895b4fdd3f45a4848a3914e42b46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0352287d038a895b4fdd3f45a4848a3914e42b46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0352287d038a895b4fdd3f45a4848a3914e42b46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0352287d038a895b4fdd3f45a4848a3914e42b46/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1cda05535473c360e85591ec60776fd95c6ecb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1cda05535473c360e85591ec60776fd95c6ecb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1cda05535473c360e85591ec60776fd95c6ecb4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c5db3587caa225409cb2d75347273218ca948685",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0352287d038a895b4fdd3f45a4848a3914e42b46/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0352287d038a895b4fdd3f45a4848a3914e42b46/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=0352287d038a895b4fdd3f45a4848a3914e42b46",
        "patch": "@@ -934,13 +934,24 @@ UniValue verifyrawtransactions(const UniValue& params, bool fHelp)\n         if (state.IsValid() && tx.IsCoinBase()) {\n             state.Invalid(false, REJECT_INVALID, \"coinbase\");\n         }\n+        // Only accept nLockTime-using transactions that can be mined in the next\n+        // block\n         if (state.IsValid() && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n             state.Invalid(false, REJECT_NONSTANDARD, \"non-final\");\n         }\n+        // Only accept BIP68 sequence locked transactions that can be mined in the next\n+        // block\n+        if (state.IsValid() && checkFinal && !CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n+            state.Invalid(false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+        }\n         // Do this check separately because CheckInputs will set code 0 and no reason for missing inputs\n         if (state.IsValid() && !view.HaveInputs(tx)) {\n             state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n         }\n+        // Check for non-standard pay-to-script-hash in inputs\n+        if (state.IsValid() && checkStandard && !AreInputsStandard(tx, view)) {\n+            state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+        }\n         if (state.IsValid()) {\n             CheckInputs(tx, state, view, true,\n                 checkStandard ? STANDARD_SCRIPT_VERIFY_FLAGS : MANDATORY_SCRIPT_VERIFY_FLAGS,"
      }
    ]
  },
  {
    "sha": "1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTcxNDA3MGU0NmU5NjRkN2I1YWEyYzZmZjdkYTc1NTJhMmI1YmMy",
    "commit": {
      "author": {
        "name": "mrbandrews",
        "email": "bandrewsny@gmail.com",
        "date": "2016-03-14T14:18:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:36:00Z"
      },
      "message": "test: Add dependent transaction test for `verifyrawtransactions`",
      "tree": {
        "sha": "f44ee6f8ce47401970c3a2af8a88f7c8406531e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f44ee6f8ce47401970c3a2af8a88f7c8406531e5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2/comments",
    "author": {
      "login": "mrbandrews",
      "id": 7504522,
      "node_id": "MDQ6VXNlcjc1MDQ1MjI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7504522?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mrbandrews",
      "html_url": "https://github.com/mrbandrews",
      "followers_url": "https://api.github.com/users/mrbandrews/followers",
      "following_url": "https://api.github.com/users/mrbandrews/following{/other_user}",
      "gists_url": "https://api.github.com/users/mrbandrews/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mrbandrews/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mrbandrews/subscriptions",
      "organizations_url": "https://api.github.com/users/mrbandrews/orgs",
      "repos_url": "https://api.github.com/users/mrbandrews/repos",
      "events_url": "https://api.github.com/users/mrbandrews/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mrbandrews/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0352287d038a895b4fdd3f45a4848a3914e42b46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0352287d038a895b4fdd3f45a4848a3914e42b46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0352287d038a895b4fdd3f45a4848a3914e42b46"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9dd8c84875ec84b22e9c26eb7a2c8c7c30d899a6",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2",
        "patch": "@@ -226,6 +226,19 @@ def run_test(self):\n         assert(err['code'] == 16)\n         assert(err['reason'].startswith('bad-txns-inputs-missingorspent'))\n \n+        #check ordering of dependent tx's in verifyrawtransactions\n+        parent  = rawTxSigned['hex']\n+        child   = rawTx2\n+        err1     = self.nodes[2].verifyrawtransactions([parent, child], {'include_mempool':True})\n+        err2     = self.nodes[2].verifyrawtransactions([parent, child], {'include_mempool':False})\n+        assert(err1 is None and err2 is None)\n+\n+        # out-of-order succeeds with mempool, fails without\n+        err1     = self.nodes[2].verifyrawtransactions([child, parent], {'include_mempool':True})\n+        err2     = self.nodes[2].verifyrawtransactions([child, parent], {'include_mempool':False})\n+        assert(err1 is None and err2 is not None)\n+        assert(err2['reason'].startswith('bad-txns-inputs-missingorspent'))\n+\n         # mine the transaction into a block and check end result\n         rawTx = self.nodes[0].decoderawtransaction(rawTxSigned['hex'])\n         self.sync_all()"
      }
    ]
  },
  {
    "sha": "fffdc98d9951d180f20f0c85174968e14dd47fbf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmZkYzk4ZDk5NTFkMTgwZjIwZjBjODUxNzQ5NjhlMTRkZDQ3ZmJm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-14T17:33:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:36:01Z"
      },
      "message": "squashme: move CheckSequenceLocks after HaveInputs\n\nmore consistent with AcceptToMemoryPool",
      "tree": {
        "sha": "21eb51fc2d95323f4ce960293d3de795ab2955ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21eb51fc2d95323f4ce960293d3de795ab2955ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fffdc98d9951d180f20f0c85174968e14dd47fbf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fffdc98d9951d180f20f0c85174968e14dd47fbf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fffdc98d9951d180f20f0c85174968e14dd47fbf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fffdc98d9951d180f20f0c85174968e14dd47fbf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a714070e46e964d7b5aa2c6ff7da7552a2b5bc2"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "adf810e9030e652aaa187731cfb5434d8fffabd3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fffdc98d9951d180f20f0c85174968e14dd47fbf/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fffdc98d9951d180f20f0c85174968e14dd47fbf/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fffdc98d9951d180f20f0c85174968e14dd47fbf",
        "patch": "@@ -939,15 +939,17 @@ UniValue verifyrawtransactions(const UniValue& params, bool fHelp)\n         if (state.IsValid() && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n             state.Invalid(false, REJECT_NONSTANDARD, \"non-final\");\n         }\n+        // Do this check separately because CheckInputs will set code 0 and no reason for missing inputs\n+        if (state.IsValid() && !view.HaveInputs(tx)) {\n+            state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n+        }\n         // Only accept BIP68 sequence locked transactions that can be mined in the next\n         // block\n+        // This check is done after HaveInputs because CheckSequenceLocks looks up the inputs.\n+        // TODO: pass in the view into CheckSequenceLocks\n         if (state.IsValid() && checkFinal && !CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n             state.Invalid(false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n-        // Do this check separately because CheckInputs will set code 0 and no reason for missing inputs\n-        if (state.IsValid() && !view.HaveInputs(tx)) {\n-            state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n-        }\n         // Check for non-standard pay-to-script-hash in inputs\n         if (state.IsValid() && checkStandard && !AreInputsStandard(tx, view)) {\n             state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");"
      }
    ]
  },
  {
    "sha": "da0595da66571d8fc36632df4d519dd981dca16d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYTA1OTVkYTY2NTcxZDhmYzM2NjMyZGY0ZDUxOWRkOTgxZGNhMTZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:51:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-18T13:51:20Z"
      },
      "message": "squashme: Factor out to VerifyTransaction function\n\nLocal for now, but this could, in time, be shared by\nvarious places that want to verify transactions.",
      "tree": {
        "sha": "1b912807b08f5808213e663e9e5d91f5962aef7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b912807b08f5808213e663e9e5d91f5962aef7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/da0595da66571d8fc36632df4d519dd981dca16d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0595da66571d8fc36632df4d519dd981dca16d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/da0595da66571d8fc36632df4d519dd981dca16d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0595da66571d8fc36632df4d519dd981dca16d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fffdc98d9951d180f20f0c85174968e14dd47fbf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fffdc98d9951d180f20f0c85174968e14dd47fbf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fffdc98d9951d180f20f0c85174968e14dd47fbf"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 42,
      "deletions": 37
    },
    "files": [
      {
        "sha": "c8fafc8a298cf204250dae9463036141c5f4f817",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 37,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/da0595da66571d8fc36632df4d519dd981dca16d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/da0595da66571d8fc36632df4d519dd981dca16d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=da0595da66571d8fc36632df4d519dd981dca16d",
        "patch": "@@ -840,6 +840,47 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n     return hashTx.GetHex();\n }\n \n+static bool VerifyTransaction(const CTransaction& tx, CValidationState& state, CCoinsViewCache &view, bool checkFinal, bool checkStandard)\n+{\n+    if (state.IsValid())\n+        CheckTransaction(tx, state);\n+    if (state.IsValid() && checkStandard) {\n+        std::string reason;\n+        if (!IsStandardTx(tx, reason)) {\n+            state.Invalid(false, REJECT_NONSTANDARD, reason);\n+        }\n+    }\n+    if (state.IsValid() && tx.IsCoinBase()) {\n+        state.Invalid(false, REJECT_INVALID, \"coinbase\");\n+    }\n+    // Only accept nLockTime-using transactions that can be mined in the next\n+    // block\n+    if (state.IsValid() && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n+        state.Invalid(false, REJECT_NONSTANDARD, \"non-final\");\n+    }\n+    // Do this check separately because CheckInputs will set code 0 and no reason for missing inputs\n+    if (state.IsValid() && !view.HaveInputs(tx)) {\n+        state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n+    }\n+    // Only accept BIP68 sequence locked transactions that can be mined in the next\n+    // block\n+    // This check is done after HaveInputs because CheckSequenceLocks looks up the inputs.\n+    // TODO: pass in the view into CheckSequenceLocks\n+    if (state.IsValid() && checkFinal && !CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n+        state.Invalid(false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+    }\n+    // Check for non-standard pay-to-script-hash in inputs\n+    if (state.IsValid() && checkStandard && !AreInputsStandard(tx, view)) {\n+        state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+    }\n+    if (state.IsValid()) {\n+        CheckInputs(tx, state, view, true,\n+            checkStandard ? STANDARD_SCRIPT_VERIFY_FLAGS : MANDATORY_SCRIPT_VERIFY_FLAGS,\n+            true);\n+    }\n+    return state.IsValid();\n+}\n+\n UniValue verifyrawtransactions(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() < 1 || params.size() > 2)\n@@ -923,43 +964,7 @@ UniValue verifyrawtransactions(const UniValue& params, bool fHelp)\n     for (size_t i=0; i<txes.size(); ++i) {\n         const CTransaction &tx = txes[i];\n         CValidationState state;\n-        if (state.IsValid())\n-            CheckTransaction(tx, state);\n-        if (state.IsValid() && checkStandard) {\n-            std::string reason;\n-            if (!IsStandardTx(tx, reason)) {\n-                state.Invalid(false, REJECT_NONSTANDARD, reason);\n-            }\n-        }\n-        if (state.IsValid() && tx.IsCoinBase()) {\n-            state.Invalid(false, REJECT_INVALID, \"coinbase\");\n-        }\n-        // Only accept nLockTime-using transactions that can be mined in the next\n-        // block\n-        if (state.IsValid() && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n-            state.Invalid(false, REJECT_NONSTANDARD, \"non-final\");\n-        }\n-        // Do this check separately because CheckInputs will set code 0 and no reason for missing inputs\n-        if (state.IsValid() && !view.HaveInputs(tx)) {\n-            state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n-        }\n-        // Only accept BIP68 sequence locked transactions that can be mined in the next\n-        // block\n-        // This check is done after HaveInputs because CheckSequenceLocks looks up the inputs.\n-        // TODO: pass in the view into CheckSequenceLocks\n-        if (state.IsValid() && checkFinal && !CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n-            state.Invalid(false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n-        }\n-        // Check for non-standard pay-to-script-hash in inputs\n-        if (state.IsValid() && checkStandard && !AreInputsStandard(tx, view)) {\n-            state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n-        }\n-        if (state.IsValid()) {\n-            CheckInputs(tx, state, view, true,\n-                checkStandard ? STANDARD_SCRIPT_VERIFY_FLAGS : MANDATORY_SCRIPT_VERIFY_FLAGS,\n-                true);\n-        }\n-        if (state.IsValid()) {\n+        if (VerifyTransaction(tx, state, view, checkFinal, checkStandard)) {\n             UpdateCoins(tx, state, view, height);\n         } else {\n             UniValue rv(UniValue::VOBJ);"
      }
    ]
  },
  {
    "sha": "70ad9e320d0da7729c4e6e92d0ecadfda8ee8075",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MGFkOWUzMjBkMGRhNzcyOWM0ZTZlOTJkMGVjYWRmZGE4ZWU4MDc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-22T08:17:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-22T08:17:36Z"
      },
      "message": "squashme: restructure VerifyTransaction\n\nUse a more familiar structure now that VerifyTransaction is a function.",
      "tree": {
        "sha": "b7cfb7f9d08c9ce6cd963fa4d3a2e875f8b31b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7cfb7f9d08c9ce6cd963fa4d3a2e875f8b31b21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "da0595da66571d8fc36632df4d519dd981dca16d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/da0595da66571d8fc36632df4d519dd981dca16d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/da0595da66571d8fc36632df4d519dd981dca16d"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 19,
      "deletions": 20
    },
    "files": [
      {
        "sha": "241f085d1e04fa7069e75e22c055733ad53ed36f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 20,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=70ad9e320d0da7729c4e6e92d0ecadfda8ee8075",
        "patch": "@@ -842,43 +842,42 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n \n static bool VerifyTransaction(const CTransaction& tx, CValidationState& state, CCoinsViewCache &view, bool checkFinal, bool checkStandard)\n {\n-    if (state.IsValid())\n-        CheckTransaction(tx, state);\n-    if (state.IsValid() && checkStandard) {\n+    if (!CheckTransaction(tx, state))\n+        return false; // CheckTransaction fills in state\n+    if (checkStandard) {\n         std::string reason;\n         if (!IsStandardTx(tx, reason)) {\n-            state.Invalid(false, REJECT_NONSTANDARD, reason);\n+            return state.Invalid(false, REJECT_NONSTANDARD, reason);\n         }\n     }\n-    if (state.IsValid() && tx.IsCoinBase()) {\n-        state.Invalid(false, REJECT_INVALID, \"coinbase\");\n+    if (tx.IsCoinBase()) {\n+        return state.Invalid(false, REJECT_INVALID, \"coinbase\");\n     }\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block\n-    if (state.IsValid() && checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n-        state.Invalid(false, REJECT_NONSTANDARD, \"non-final\");\n+    if (checkFinal && !CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n+        return state.Invalid(false, REJECT_NONSTANDARD, \"non-final\");\n     }\n     // Do this check separately because CheckInputs will set code 0 and no reason for missing inputs\n-    if (state.IsValid() && !view.HaveInputs(tx)) {\n-        state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n+    if (!view.HaveInputs(tx)) {\n+        return state.Invalid(false, REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n     }\n     // Only accept BIP68 sequence locked transactions that can be mined in the next\n     // block\n     // This check is done after HaveInputs because CheckSequenceLocks looks up the inputs.\n     // TODO: pass in the view into CheckSequenceLocks\n-    if (state.IsValid() && checkFinal && !CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n-        state.Invalid(false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n+    if (checkFinal && !CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS)) {\n+        return state.Invalid(false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n     }\n     // Check for non-standard pay-to-script-hash in inputs\n-    if (state.IsValid() && checkStandard && !AreInputsStandard(tx, view)) {\n-        state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n+    if (checkStandard && !AreInputsStandard(tx, view)) {\n+        return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n     }\n-    if (state.IsValid()) {\n-        CheckInputs(tx, state, view, true,\n-            checkStandard ? STANDARD_SCRIPT_VERIFY_FLAGS : MANDATORY_SCRIPT_VERIFY_FLAGS,\n-            true);\n-    }\n-    return state.IsValid();\n+    if (!CheckInputs(tx, state, view, true,\n+        checkStandard ? STANDARD_SCRIPT_VERIFY_FLAGS : MANDATORY_SCRIPT_VERIFY_FLAGS,\n+        true))\n+        return false; // CheckInputs fills in state\n+    return true;\n }\n \n UniValue verifyrawtransactions(const UniValue& params, bool fHelp)"
      }
    ]
  },
  {
    "sha": "85f77799a27ec34f500a6f8e748b5267d87d5318",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NWY3Nzc5OWEyN2VjMzRmNTAwYTZmOGU3NDhiNTI2N2Q4N2Q1MzE4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-24T11:23:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-24T11:23:37Z"
      },
      "message": "squashme: update release notes for new `verifyrawtransactions` RPC",
      "tree": {
        "sha": "f01e74a13857faf5adbbf5118c36869fa3240512",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f01e74a13857faf5adbbf5118c36869fa3240512"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85f77799a27ec34f500a6f8e748b5267d87d5318",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f77799a27ec34f500a6f8e748b5267d87d5318",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85f77799a27ec34f500a6f8e748b5267d87d5318",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85f77799a27ec34f500a6f8e748b5267d87d5318/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "70ad9e320d0da7729c4e6e92d0ecadfda8ee8075",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/70ad9e320d0da7729c4e6e92d0ecadfda8ee8075"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "75dd67f45d3bc2ccdc7459a9cc49b892e28f0369",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85f77799a27ec34f500a6f8e748b5267d87d5318/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85f77799a27ec34f500a6f8e748b5267d87d5318/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=85f77799a27ec34f500a6f8e748b5267d87d5318",
        "patch": "@@ -21,6 +21,11 @@ It is recommended to use this for sensitive information such as wallet\n passphrases, as command-line arguments can usually be read from the process\n table by any user on the system.\n \n+New RPC functionality\n+----------------------\n+\n+- `verifyrawtransactions` Verifies one or more raw transactions (serialized, hex-encoded). If transactions depend on each other, they must be provided in order.\n+\n 0.13.0 Change log\n =================\n "
      }
    ]
  }
]