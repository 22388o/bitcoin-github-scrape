dergoegge,2021-06-26 15:12:51,"Over the last 24h i ran a blocks-only node that saw 106 blocks and downloaded 3.8MB in `cmpctblock` messages. Thats an average of 12KB bytes per `cmpctblock` message received from three high-bandwidth peers. Only 26KB would have been downloaded if `headers` messages would have been used instead.\nAssuming an average block size of 1.38MB the `cmpctblock` messages represented **2.5%** of downloaded",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-869016710,869016710,
fanquake,2021-07-01 02:46:44,@jnewbery @amitiuttarwar @sipa @ajtowns Any thoughts?,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-871869724,871869724,
ajtowns,2021-07-02 05:20:06,"Seems workable? Compact blocks should be seeing:\n\n * 12kB for short tx ids per cmpctblock message announcing a new block (for each high bw peer per block)\n * 2kB per getblocktxn message asking for the tx data (per block)\n * ~0 overhead for blocktxn message providing the block txns\n\nWhich should be ~38kB per block or about 5MB per day/144 blocks. Legacy block relay should just be:\n\n",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-872723147,872723147,
jnewbery,2021-07-02 12:58:27,utACK 6dfee13f650521f7542df0926aff01af9ac6a328,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-872977968,872977968,
naumenkogs,2021-07-07 11:57:46,"Is this true for transactions received via `sendrawtransaction`? What if some node, for whatever reason, receives all transactions, while having blocks-only mode?  For them, compact blocks are going to be beneficial, but this PR will disable it?",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-875542706,875542706,
dergoegge,2021-07-08 18:14:02,">  For them, compact blocks are going to be beneficial, but this PR will disable it?\n\n@naumenkogs yes this PR would disable compact blocks even if txs were received through `sendrawtransaction` and i think overall that's ok since that seems like an edge case to me. I would presume most blocks-only nodes don't submit enough txs through `sendrawtransaction` for this to matter, especially not con",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-876644398,876644398,
naumenkogs,2021-07-09 05:46:09,"I think [2] is better than [1].\n\nWhether we want to add a new config option for this use case or just implement what you suggested originally â€”Â my personal choice would be to ask for thoughts at the #bitcoin-core-dev meeting.",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-876930777,876930777,
jnewbery,2021-07-09 08:36:04,"> yes this PR would disable compact blocks even if txs were received through sendrawtransaction and i think overall that's ok since that seems like an edge case to me.\n\nI agree that this seems like an edge case that wouldn't actually be used. Compact blocks exist to improve propagation speed/efficiency when a node is participating in tx relay. I'd prefer not to add a configuration option that ",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-877017862,877017862,
naumenkogs,2021-07-09 08:55:42,">I agree that this seems like an edge case that wouldn't actually be used. Compact blocks exist to improve propagation speed/efficiency when a node is participating in tx relay. I'd prefer not to add a configuration option that we don't expect to be used, or to increase the complexity of this PR.\n\nTo be clear, my worry is that some miners use the following setting:\n`A node in blocks-only mod",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-877030117,877030117,
sipa,2021-07-19 15:59:53,@naumenkogs That seems very unlikely to me.,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-882665490,882665490,
DrahtBot,2021-07-23 01:16:23,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#20799](https://github.com/bitcoin/bitcoin/pull/20799) (net processing: Only support version 2 compact blocks by jnewbery",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-885337899,885337899,
theStack,2021-08-04 14:23:09,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-892702469,892702469,
willcl-ark,2021-08-04 16:39:21,"utACK.\n\nPerhaps a new test case in `p2p_compactblocks.py` or `p2p_compactblocks_hb.py` might be a good addition here, or in a follow-up? This changes behaviour but doesn't fail any tests.",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-892806688,892806688,
LarryRuane,2021-08-04 18:06:21,"utACK 6dfee13f650521f7542df0926aff01af9ac6a328\nbut (as others have said) a test would be nice",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-892863104,892863104,
dergoegge,2021-08-09 20:45:59,"Thanks for the review @jnewbery! I took all your suggestions.\n\nI also added two new test cases:\nOne to test that on regular low bandwidth connections (no blocksonly nodes involved) `getdata(CMPCT)` is still sent. 8b1b308555382ea1b7390615371ecaa066c4af3b\nAnd one to test that blocksonly nodes still serve compact blocks in hb and lb mode. 8c4159aeccdad58a71ff61b3e21b26a4f24a6029",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-895531146,895531146,
jonatack,2021-08-10 17:13:48,"Started looking at this PR.  Rebased to current master, debug build is clean, <strike>but the new test times out for me locally on every run (out of five).</strike>\n\n<details><summary>test output</summary><p>\n\n```\n$ test/functional/p2p_compactblocks_blocksonly.py \n2021-08-10T15:36:10.388000Z TestFramework (INFO): Initializing test directory /tmp/bitcoin_func_test_ypwy_8d2\n2021-08-10T",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-896164568,896164568,
amitiuttarwar,2021-08-10 20:01:47,"@jonatack that's odd. I tried rebasing on master & the tests are passing ðŸ¤” \n\nAnd based on the logs you posted, I don't see why rebasing would cause a difference. The test file introduced is new, and I don't believe anything has changed recently around compact block p2p messages. Do you have any more info you can offer? ",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-896280776,896280776,
jonatack,2021-08-10 20:13:34,"It's late but I'll try again tomorrow (and do a review, looks like an interesting PR). I rebased and did a debug build with clang 13 on debian before running the test. Maybe it was spurious.",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-896288047,896288047,
jonatack,2021-08-10 21:06:18,"Ok, the test runs fine. Here is what happened: I forgot about the footgun on master that currently doesn't build when DEBUG_ADDRMAN is defined. I built with my bash alias that does a debug build with that, the build failed, I didn't notice, and so I was running the test on the wrong build. I just verified that the failure I reported occurs on master. Apologies for the noise! Will review tomorrow.",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-896316519,896316519,
dergoegge,2021-08-10 21:30:30,"@jnewbery great suggestions! Incorporated them all again.\n\n[`nocmpct_blocksonly_0`](https://github.com/dergoegge/bitcoin/tree/nocmpct_blocksonly_0) -> [`nocmpct_blocksonly_1`](https://github.com/dergoegge/bitcoin/tree/nocmpct_blocksonly_1)\n\n<details>\n<summary>git range-diff nocmpct_blocksonly_0...nocmpct_blocksonly_1</summary>\n\n```\n1:  5a29943a9 ! 1:  e58cfb118 [test] Test that blo",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-896328217,896328217,
jnewbery,2021-08-11 09:46:58,utACK e21f2e4f04c5f15eccac529c6e8c59aba5283351,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-896678716,896678716,
jonatack,2021-08-12 09:09:15,Consider also updating `doc/reduce-traffic.md` regarding the effects of setting `-blocksonly` (maybe also in the Memory Pool section of `doc/reduce-memory.md`).,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-897474657,897474657,
dergoegge,2021-08-13 16:56:24,"@jonatack Thanks for the review! I took most of your suggestions.\n\nI did not modify 6dfee13f650521f7542df0926aff01af9ac6a328 because i don't want to invalidate the utACKs that this commit has already gotten. I will make a follow up PR for those suggestions as well as the other doc changes (Release note, `doc/reduce-traffic.md`).\n\n[`nocmpct_blocksonly_1`](https://github.com/dergoegge/bitcoi",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-898596046,898596046,
jonatack,2021-08-16 10:43:04,"> I did not modify [6dfee13](https://github.com/bitcoin/bitcoin/commit/6dfee13f650521f7542df0926aff01af9ac6a328) because i don't want to invalidate the utACKs that this commit has already gotten\n\nYour mileage may vary. In review feedback a year ago it was suggested to me to not worry too much about invalidating ACKs and I ended up ""invalidating"" 7 ACKs on that pull, which was subsequently merg",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-899409929,899409929,
jnewbery,2021-08-16 13:38:11,ACK ae54485c406bcf88c94450ffceabf709d5a18379,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-899518549,899518549,
dergoegge,2021-09-04 11:35:43,"Thanks @rajarshimaitra and @jonatack for the reviews and advice!\n\n[`nocmpct_blocksonly_2`](https://github.com/dergoegge/bitcoin/tree/nocmpct_blocksonly_2) -> [`nocmpct_blocksonly_3`](https://github.com/dergoegge/bitcoin/tree/nocmpct_blocksonly_3)\n\n<details>\n<summary>git range-diff nocmpct_blocksonly_2...nocmpct_blocksonly_3</summary>\n\n```\n1:  1bd2f889c ! 1:  ac90610e1 [test] Test t",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-912959004,912959004,
naumenkogs,2021-09-22 07:15:42,ACK f30eb1fe4a62fd9c927ba57b2a549678bde3f3c7,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-924653198,924653198,
dergoegge,2021-09-22 20:24:45,"[`nocmpct_blocksonly_3`](https://github.com/dergoegge/bitcoin/tree/nocmpct_blocksonly_3) -> [`nocmpct_blocksonly_4`](https://github.com/dergoegge/bitcoin/tree/nocmpct_blocksonly_4)\n\n<details>\n<summary>git range-diff nocmpct_blocksonly_3...nocmpct_blocksonly_4</summary>\n\n```\n1:  ac90610e1 ! 1:  df6794e80 [test] Test that -blocksonly nodes do not request high bandwidth mode.\n    @@ tes",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-925302854,925302854,
jnewbery,2021-09-23 10:13:06,Code review ACK c24c52d51cc8faaa79dc554c64ca6d1ee231f112,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-925678312,925678312,
naumenkogs,2021-09-24 12:00:43,ACK c24c52d,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-926569816,926569816,
dergoegge,2021-09-29 08:55:55,"Rebased on latest master.\n\n@jnewbery @theStack @jonatack @naumenkogs @rajarshimaitra I would appreciate it if you folks could have another look and re-ACK since i think this is pretty close to being ready :)",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-929976680,929976680,
naumenkogs,2021-09-29 10:52:05,ACK 18c5b23a0f7adf9a08bcaa967ed800badf62d90a,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-930065752,930065752,
rajarshimaitra,2021-09-29 16:06:00,tACK https://github.com/bitcoin/bitcoin/pull/22340/commits/18c5b23a0f7adf9a08bcaa967ed800badf62d90a,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-930318410,930318410,
jnewbery,2021-09-29 16:18:29,"reACK 18c5b23a0f\n\nDid the rebase myself and verified the same result.",https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-930329146,930329146,
fanquake,2021-10-01 06:45:47,This has been merged.,https://github.com/bitcoin/bitcoin/pull/22340#issuecomment-931954516,931954516,
jnewbery,2021-07-02 09:23:50,"I think you can just exit this function immediately if `!m_ignore_incoming_txs`:\n\n```diff\n void PeerManagerImpl::MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid)\n {\n     AssertLockHeld(cs_main);\n+\n+    // Never request high-bandwidth mode from peers if we're blocks-only. Our\n+    // mempool will not contain the transactions necessary to reconstruct the\n+    // compact block.\",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r662872834,662872834,src/net_processing.cpp
jnewbery,2021-07-02 09:25:05,"Can I convince you to make this conditional a bit more readable:\n\n```diff\n-                    if (!m_ignore_incoming_txs && nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                    if (!m_ignore_incoming_txs\n+                        && nodestate->fSupportsDesiredCmpctVersion",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r662873537,662873537,src/net_processing.cpp
rajarshimaitra,2021-08-04 13:52:15,"Maybe its better to add here that we are also not sending getdata(CMPCT) in case of block-only? \n\nMy initial confusion was what about the low-band with case, and I missed the getdata(CMPCT) part in the code. \n\nIt would help clarify the doc a little better.    ",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r682637215,682637215,src/net_processing.cpp
rajarshimaitra,2021-08-04 14:54:01,Is there any reason why we use `MaybeSetPeerAsAnnouncingHeaderAndIDs` instead of `MaybeSetPeerAsAnncouncingCompactBlocks`? Are they different things?,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r682694454,682694454,src/net_processing.cpp
jnewbery,2021-08-05 09:53:20,This isn't the right place for that documentation. This function is for sending `sendcmpct(hb=true)` to the three peers that sent us blocks most recently.,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r683306717,683306717,src/net_processing.cpp
dergoegge,2021-08-06 12:36:01,"In [BIP 152](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki#headerandshortids) the structure that is used for the `cmcptblock` message is called `HeaderAndShortIDs`.\nI am assuming that this were the name came from. The function was introduced in the initial compact block PR: https://github.com/bitcoin/bitcoin/pull/8068",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r684200376,684200376,src/net_processing.cpp
rajarshimaitra,2021-08-06 16:42:40,"Thanks @jnewbery, that makes sense.",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r684369129,684369129,src/net_processing.cpp
rajarshimaitra,2021-08-06 16:46:10,"Hmm, I guess it comes from there. Still a little hard to guess, as the name seems quite generic (Headers and IDs). It also doesn't have any doc comment above it indicate it's related to compact blocks. Could help with some pointers.  ",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r684371206,684371206,src/net_processing.cpp
jnewbery,2021-08-06 18:12:40,I agree that headers-and-ids is not very helpful here (and in a few other places in the code). Maybe it could be updated in a different PR.,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r684419963,684419963,src/net_processing.cpp
jnewbery,2021-08-09 13:59:46,"If you use the cached chain, all the nodes will already be out of IBD:\n\n```diff\ndiff --git a/test/functional/p2p_compactblocks_blocksonly.py b/test/functional/p2p_compactblocks_blocksonly.py\nindex b97fdfdb14..bf486d8eda 100755\n--- a/test/functional/p2p_compactblocks_blocksonly.py\n+++ b/test/functional/p2p_compactblocks_blocksonly.py\n@@ -25,7 +25,6 @@ from test_framework.messages impo",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r685218980,685218980,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-09 15:39:45,"Alternatively, just generate the block on the node:\n\n```diff\ndiff --git a/test/functional/p2p_compactblocks_blocksonly.py b/test/functional/p2p_compactblocks_blocksonly.py\nindex b97fdfdb14..b55dddc01a 100755\n--- a/test/functional/p2p_compactblocks_blocksonly.py\n+++ b/test/functional/p2p_compactblocks_blocksonly.py\n@@ -7,17 +7,14 @@\n from test_framework.test_framework import Bitcoin",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r685306116,685306116,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-09 15:40:02,Please sort imports :slightly_smiling_face: ,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r685306379,685306379,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-09 15:47:41,"This assumes that the node will send `sendcmpct` synchronously and before responding to the `ping` above. That's true right now, since `MaybeSetPeerAsAnnouncingHeaderAndIDs` is called in the synchronous `BlockChecked()` validation interface callback, but that may change in the future. (I'd like to change this to remove the synchronous `BlockChecked` callback).\n\nA less racy way to do this would",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r685312787,685312787,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-09 15:52:39,"No need for ""Part 1"" or ""Part 2"" in these logs (tests have a habit of being rearranged, so these logs will fall out of date)",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r685317001,685317001,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-10 14:09:03,"```suggestion\n        # node2 produces blocks which get passed to the rest of the nodes\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686056461,686056461,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-10 14:18:39,"Should be 4 now that there are 4 nodes? Or maybe even better:\n\n```suggestion\n        for node in self.nodes:\n            assert not node.getblockchaininfo()['initialblockdownload']\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686065386,686065386,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-10 14:49:12,"```suggestion\n        for conn in [p2p_conn_blocksonly, p2p_conn_high_bw, p2p_conn_low_bw]:\n            assert_equal(conn.message_count['sendcmpct'], 2)\n            conn.send_and_ping(msg_sendcmpct(announce=False, version=2))\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686094198,686094198,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-10 14:52:14,"If you separate the test for existence of the `cmpctblock` message from the test of its hash, you don't need the `sync_send_with_ping()` call:\n\n```suggestion\n                if 'cmpctblock' not in p2p_conn_blocksonly.last_message:\n                    return False\n                sha256 = p2p_conn_blocksonly.last_message['cmpctblock'].header_and_shortids.header.rehash()\n```\n\nI'd als",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686097074,686097074,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 15:44:24,"e58cfb11875728d90716577f34482ddddb898cdb pico-nit, unless this test has been under development since 2019 (maybe it has!)\n```suggestion\n# Copyright (c) 2021-2021 The Bitcoin Core developers\n```\n\n(yes, there is an automated update script run occasionally but IDK if it's smart enough to set the start year) ",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686955459,686955459,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 15:50:09,"e58cfb11 suggestion stolen from review of #22651, feel free to ignore\n```diff\n-        self.num_nodes = 4\n         self.extra_args = [[""-blocksonly""], [], [], []]\n+        self.num_nodes = len(self.extra_args)\n```\n",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686960157,686960157,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 16:01:17,"e58cfb11875728d90716577f34482ddddb898cdb \n```suggestion\n        # node2 produces blocks that are passed to the rest of the nodes\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686969838,686969838,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 16:10:31,"```suggestion\n        self.log.info(""Test -blocksonly nodes do not select peers for BIP152 high bandwidth mode"")\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686977088,686977088,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 16:11:26,"c99978d9 missing space ""insteadof"" + other suggestions while here\n```diff\n-        self.log.info(""Test that blocksonly nodes send getdata(BLOCK) instead""\n-                      ""of getdata(CMPCT) in low bandwidth mode."")\n+        self.log.info(""Test -blocksonly nodes send getdata(BLOCK) instead""\n+                      "" of getdata(CMPCT) in BIP152 low bandwidth mode"")\n```\n",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686977814,686977814,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 16:12:10,"770c5f1a s/bandwdith/bandwidth/ + minor suggestions while here\n```suggestion\n        self.log.info(""Test getdata(CMPCT) is still sent on BIP152 low bandwidth connections"")\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686978385,686978385,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 16:12:33,"```suggestion\n        self.log.info(""Test -blocksonly nodes still serve compact blocks"")\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686978680,686978680,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 16:20:07,"c99978d added the low bandwidth node as a sanity check\n```diff\n+\n+        p2p_conn_low_bw.send_message(msg_headers(headers=[CBlockHeader(block1)]))\n+        p2p_conn_low_bw.sync_send_with_ping()\n+        assert_equal(p2p_conn_low_bw.last_message['getdata'].inv, [CInv(MSG_CMPCT_BLOCK, block1.sha256)])\n```\n",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r686984726,686984726,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 17:17:07,"770c5f1a ""bitcoind node""...which one?",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r687026270,687026270,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 17:20:37,"e58cfb11 added the low bandwidth node as a sanity check\n```diff\n+\n+        p2p_conn_low_bw.send_and_ping(msg_block(block0))\n+        assert_equal(int(self.nodes[1].getbestblockhash(), 16), block0.sha256)\n+        p2p_conn_low_bw.wait_until(lambda: p2p_conn_high_bw.message_count['sendcmpct'] == 3)\n+        assert_equal(p2p_conn_low_bw.last_message['sendcmpct'].announce, True)\n```\n",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r687028672,687028672,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 17:24:31,"e21f2e4\n```suggestion\n        # Request high bandwidth mode from the -blocksonly node\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r687031407,687031407,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 17:37:58,"e58cfb11875728d90716577f34482ddddb898cdb in general, ISTM mentioning BIP152 makes ""high/low bandwidth mode"" more clear\n```diff\n-        # A normal node participating in transaction relay should request high\n-        # bandwidth mode upon receiving a new valid block at the tip.\n+        # A normal node participating in transaction relay should request BIP152\n+        # high bandwidth mode",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r687040731,687040731,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 17:38:33,"e58cfb11875728d90716577f34482ddddb898cdb (micro-nit in general): blocksonly -> -blocksonly (or) blocks-only, the former might make clear for newer people that it is a config option and the latter describes the state clearly",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r687041175,687041175,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-11 17:52:21,"6dfee13 in general, ISTM that mentioning BIP152 makes ""high/low bandwidth mode"" more clear, especially for newer people\n```suggestion\n    // Never request BIP152 high-bandwidth mode from peers if we're blocks-only. Our\n```",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r687050643,687050643,src/net_processing.cpp
jonatack,2021-08-11 17:53:08,6dfee13f650521f7542df0926aff01af9ac6a328 Perhaps add a comment here as well (feel free to ignore).,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r687051208,687051208,src/net_processing.cpp
dergoegge,2021-08-13 17:03:46,will do this in a follow up PR.,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r688658700,688658700,src/net_processing.cpp
dergoegge,2021-08-13 17:03:55,will do this in a follow up PR.,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r688658778,688658778,src/net_processing.cpp
jonatack,2021-08-16 09:47:16,"(micro style nits only if you retouch now or later, feel free to ignore)\n\n- s/BIP 152/BIP152/ on this one line (as elsewhere)\n- in general the test logging doesn't use EOL full stops/periods\n- in general `s/Test that/Test/` in the test logging, as all the `that`'s are needlessly verbose and add horizontal space (just my opinion though)",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r689391914,689391914,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-08-16 13:35:53,"I don't think this is an improvement. Yes, it means that you don't need to change this line if the number of nodes in the test changes, but on the other hand I think it's very useful for people reading the code to be able to see at a glance how many nodes are used in the test. Making this a `len(list_of_some_length)` makes it less readable.",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r689543553,689543553,test/functional/p2p_compactblocks_blocksonly.py
jonatack,2021-08-16 13:42:20,That's fair.,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r689548769,689548769,test/functional/p2p_compactblocks_blocksonly.py
rajarshimaitra,2021-08-17 05:55:38,"```suggestion\n        self.setup_nodes()\n        # Start network with everyone disconnected\n        self.sync_all()\n```\nNot required, as its evident by definition. But wouldn't hurt having commented to specify we want an unconnected network topology. Also done in `p2p_comapctblocks_hb.py`. ",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r690056675,690056675,test/functional/p2p_compactblocks_blocksonly.py
rajarshimaitra,2021-08-17 06:46:33,It seems `message_count['sendcmpct']` is already at 2 before reaching here. So the code isn't waiting for anything. Maybe we should wait for some other things that changes after previous step? Like `block` count or `inv` count? ,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r690081504,690081504,test/functional/p2p_compactblocks_blocksonly.py
dergoegge,2021-09-04 11:30:01,Changed it to wait for the  expected `block` count and after that assert that the `sendcmpct` count is still 2.,https://github.com/bitcoin/bitcoin/pull/22340#discussion_r702273124,702273124,test/functional/p2p_compactblocks_blocksonly.py
dergoegge,2021-09-04 11:30:40,"I disagree on the third point because omitting the `that` does not sound like correct english to me. (i am not a native english speaker so i might be totally wrong)\nAlso a lot of the other tests also have the `that` so i kept it here.",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r702273189,702273189,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-09-22 08:18:51,"I think this would be clearer if it was explicit about the number of nodes:\n\n```suggestion\n        self.num_nodes = 3\n```\n\nChecking the number of test nodes is one of the first things I do when reading a functional test. It should be immediately obvious what the topology of the test is.",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r713703646,713703646,test/functional/p2p_compactblocks_blocksonly.py
jnewbery,2021-09-22 08:23:40,"This seems wrong. The `message_count` property is counting how many message of each type has been received _from_ the bitcoind node since the start of the test. Here, you're _sending_ a `block` message, and then waiting for the count of _received_ `block` messages to be 1.\n\nI think here it'd be better to `send_and_ping()` the block message as you were before, and then use RPC to verify that th",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r713707938,713707938,test/functional/p2p_compactblocks_blocksonly.py
dergoegge,2021-09-22 20:24:27,"You are right, thanks for catching this!",https://github.com/bitcoin/bitcoin/pull/22340#discussion_r714283242,714283242,test/functional/p2p_compactblocks_blocksonly.py
