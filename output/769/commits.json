[
  {
    "sha": "39f0d9686095bce469dbfa52333331a5d15c6545",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWYwZDk2ODYwOTViY2U0NjlkYmZhNTIzMzMzMzFhNWQxNWM2NTQ1",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-01-19T18:30:54Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2012-01-19T18:30:54Z"
      },
      "message": "Make transactions with extra data in their scriptSig's non-standard.",
      "tree": {
        "sha": "cbbe1525c2faee1ba826c1a3ab6a8e36e95f7230",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cbbe1525c2faee1ba826c1a3ab6a8e36e95f7230"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39f0d9686095bce469dbfa52333331a5d15c6545",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f0d9686095bce469dbfa52333331a5d15c6545",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39f0d9686095bce469dbfa52333331a5d15c6545",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39f0d9686095bce469dbfa52333331a5d15c6545/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "43cda5f325f53e8941efa7f712aed66e3fde172a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/43cda5f325f53e8941efa7f712aed66e3fde172a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/43cda5f325f53e8941efa7f712aed66e3fde172a"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 67,
      "deletions": 11
    },
    "files": [
      {
        "sha": "db7977dfd87f49c8542cd53fcfb5a1ed99112daa",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 5,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f0d9686095bce469dbfa52333331a5d15c6545/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f0d9686095bce469dbfa52333331a5d15c6545/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=39f0d9686095bce469dbfa52333331a5d15c6545",
        "patch": "@@ -293,18 +293,33 @@ bool CTransaction::AreInputsStandard(const MapPrevTx& mapInputs) const\n         const CScript& prevScript = prev.scriptPubKey;\n         if (!Solver(prevScript, whichType, vSolutions))\n             return false;\n+        int nArgsExpected = ScriptSigArgsExpected(whichType, vSolutions);\n+\n+        // Transactions with extra stuff in their scriptSigs are\n+        // non-standard. Note that this EvalScript() call will\n+        // be quick, because if there are any operations\n+        // beside \"push data\" in the scriptSig the\n+        // IsStandard() call returns false\n+        vector<vector<unsigned char> > stack;\n+        if (!EvalScript(stack, vin[i].scriptSig, *this, i, 0))\n+            return false;\n+\n         if (whichType == TX_SCRIPTHASH)\n         {\n-            vector<vector<unsigned char> > stack;\n-\n-            if (!EvalScript(stack, vin[i].scriptSig, *this, i, 0))\n-                return false;\n             if (stack.empty())\n                 return false;\n             CScript subscript(stack.back().begin(), stack.back().end());\n-            if (!::IsStandard(subscript))\n+            vector<vector<unsigned char> > vSolutions2;\n+            txnouttype whichType2;\n+            if (!Solver(subscript, whichType2, vSolutions2))\n                 return false;\n+            if (whichType2 == TX_SCRIPTHASH)\n+                return false;\n+            nArgsExpected += ScriptSigArgsExpected(whichType2, vSolutions2);\n         }\n+\n+        if (stack.size() != nArgsExpected)\n+            return false;\n     }\n \n     return true;"
      },
      {
        "sha": "c0523855bdb094afc0eefad69d9dee00f5aa880d",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f0d9686095bce469dbfa52333331a5d15c6545/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f0d9686095bce469dbfa52333331a5d15c6545/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=39f0d9686095bce469dbfa52333331a5d15c6545",
        "patch": "@@ -1312,6 +1312,25 @@ bool Solver(const CKeyStore& keystore, const CScript& scriptPubKey, uint256 hash\n     return false;\n }\n \n+int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions)\n+{\n+    switch (t)\n+    {\n+    case TX_NONSTANDARD:\n+        return -1;\n+    case TX_PUBKEY:\n+        return 1;\n+    case TX_PUBKEYHASH:\n+        return 2;\n+    case TX_MULTISIG:\n+        if (vSolutions.size() < 1 || vSolutions[0].size() < 1)\n+            return -1;\n+        return vSolutions[0][0] + 1;\n+    case TX_SCRIPTHASH:\n+        return 1; // doesn't include args needed by the script\n+    }\n+    return -1;\n+}\n \n bool IsStandard(const CScript& scriptPubKey)\n {"
      },
      {
        "sha": "4760b99a9bc772130d8b997ea031bde2dcc6f328",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f0d9686095bce469dbfa52333331a5d15c6545/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f0d9686095bce469dbfa52333331a5d15c6545/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=39f0d9686095bce469dbfa52333331a5d15c6545",
        "patch": "@@ -560,6 +560,7 @@ class CScript : public std::vector<unsigned char>\n \n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, int nHashType);\n bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<std::vector<unsigned char> >& vSolutionsRet);\n+int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned char> >& vSolutions);\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n bool ExtractAddress(const CScript& scriptPubKey, CBitcoinAddress& addressRet);"
      },
      {
        "sha": "540019c739e9519f501d17f40d3e81ed8a272cf4",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f0d9686095bce469dbfa52333331a5d15c6545/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f0d9686095bce469dbfa52333331a5d15c6545/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=39f0d9686095bce469dbfa52333331a5d15c6545",
        "patch": "@@ -293,6 +293,15 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n \n     BOOST_CHECK(txTo.AreInputsStandard(mapInputs));\n \n+    // Make sure adding crap to the scriptSigs makes them non-standard:\n+    for (int i = 0; i < 3; i++)\n+    {\n+        CScript t = txTo.vin[i].scriptSig;\n+        txTo.vin[i].scriptSig = (CScript() << 11) + t;\n+        BOOST_CHECK(!txTo.AreInputsStandard(mapInputs));\n+        txTo.vin[i].scriptSig = t;\n+    }\n+\n     CTransaction txToNonStd;\n     txToNonStd.vout.resize(1);\n     txToNonStd.vout[0].scriptPubKey.SetBitcoinAddress(key[1].GetPubKey());"
      },
      {
        "sha": "04a3d29dc9e4e7644477190f2323cb525eda85a4",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39f0d9686095bce469dbfa52333331a5d15c6545/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39f0d9686095bce469dbfa52333331a5d15c6545/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=39f0d9686095bce469dbfa52333331a5d15c6545",
        "patch": "@@ -24,8 +24,9 @@ BOOST_AUTO_TEST_CASE(basic_transaction_tests)\n \n //\n // Helper: create two dummy transactions, each with\n-// two outputs.  The first has 11 and 50 CENT outputs,\n-// the second 21 and 22 CENT outputs.\n+// two outputs.  The first has 11 and 50 CENT outputs\n+// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n+// paid to a TX_PUBKEYHASH.\n //\n static std::vector<CTransaction>\n SetupDummyInputs(CBasicKeyStore& keystoreRet, MapPrevTx& inputsRet)\n@@ -44,9 +45,9 @@ SetupDummyInputs(CBasicKeyStore& keystoreRet, MapPrevTx& inputsRet)\n     // Create some dummy input transactions\n     dummyTransactions[0].vout.resize(2);\n     dummyTransactions[0].vout[0].nValue = 11*CENT;\n-    dummyTransactions[0].vout[0].scriptPubKey.SetBitcoinAddress(key[0].GetPubKey());\n+    dummyTransactions[0].vout[0].scriptPubKey << key[0].GetPubKey() << OP_CHECKSIG;\n     dummyTransactions[0].vout[1].nValue = 50*CENT;\n-    dummyTransactions[0].vout[1].scriptPubKey.SetBitcoinAddress(key[1].GetPubKey());\n+    dummyTransactions[0].vout[1].scriptPubKey << key[1].GetPubKey() << OP_CHECKSIG;\n     inputsRet[dummyTransactions[0].GetHash()] = make_pair(CTxIndex(), dummyTransactions[0]);\n \n     dummyTransactions[1].vout.resize(2);\n@@ -69,17 +70,28 @@ BOOST_AUTO_TEST_CASE(test_Get)\n     t1.vin.resize(3);\n     t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n     t1.vin[0].prevout.n = 1;\n-    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();;\n+    t1.vin[0].scriptSig << std::vector<unsigned char>(65, 0);\n+    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();\n     t1.vin[1].prevout.n = 0;\n-    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();;\n+    t1.vin[1].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();\n     t1.vin[2].prevout.n = 1;\n+    t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n     t1.vout.resize(2);\n     t1.vout[0].nValue = 90*CENT;\n     t1.vout[0].scriptPubKey << OP_1;\n \n     BOOST_CHECK(t1.AreInputsStandard(dummyInputs));\n     BOOST_CHECK_EQUAL(t1.GetSigOpCount(dummyInputs), 3);\n     BOOST_CHECK_EQUAL(t1.GetValueIn(dummyInputs), (50+21+22)*CENT);\n+\n+    // Adding extra junk to the scriptSig should make it non-standard:\n+    t1.vin[0].scriptSig << OP_11;\n+    BOOST_CHECK(!t1.AreInputsStandard(dummyInputs));\n+\n+    // ... as should not having enough:\n+    t1.vin[0].scriptSig = CScript();\n+    BOOST_CHECK(!t1.AreInputsStandard(dummyInputs));\n }\n \n BOOST_AUTO_TEST_CASE(test_GetThrow)"
      }
    ]
  }
]