[
  {
    "sha": "951a44e9cd6cf2b8058244f3f95181c5ba683fdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTFhNDRlOWNkNmNmMmI4MDU4MjQ0ZjNmOTUxODFjNWJhNjgzZmRk",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-09-19T06:36:23Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-09-19T06:36:23Z"
      },
      "message": "Drop unused setRange arg to BerkeleyBatch::ReadAtCursor",
      "tree": {
        "sha": "e5675535a8fd371561e3b299f65f1e7ca839bdde",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5675535a8fd371561e3b299f65f1e7ca839bdde"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/951a44e9cd6cf2b8058244f3f95181c5ba683fdd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJboe5oAAoJEG7l83hfeLNFFmYH/jJIiZz+Aj3gVgHYRsK93fr7\n/kgj5Dr1u/LE00n76PUEWgUZUGBl/rW6c8BtMl15ZFjgrOEmf5K0fEbH7i3L7oPX\nOb9tDh0dLzimTOq1AgR5XPyHv1lPFprR0jhzeTrMmajAIj1wDJ459RY+aGblQ7Ql\nIS/A95BfrCjMyYbFnlYNmD5Drs5vPTkMfzH7M0QIIkUcEoFibPuNa8nqkTLILlHr\nYw2cl9HEzZae59hfLszCjk8JWgZ9YaC1mu9G6HqiJkQgvW1oMcR7OEm7UQPgA2fU\nr4xZNbl6VmCP4/i/KOltIPxBqCjUYr/q16RVhGT6uh+Y2eJgdnFmNJRskq5opxg=\n=abCJ\n-----END PGP SIGNATURE-----",
        "payload": "tree e5675535a8fd371561e3b299f65f1e7ca839bdde\nparent d26278988fbfc71dc558f7b2c60a184e8091450b\nauthor Ben Woosley <ben.woosley@gmail.com> 1537338983 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1537338983 -0400\n\nDrop unused setRange arg to BerkeleyBatch::ReadAtCursor\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951a44e9cd6cf2b8058244f3f95181c5ba683fdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/951a44e9cd6cf2b8058244f3f95181c5ba683fdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951a44e9cd6cf2b8058244f3f95181c5ba683fdd/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d26278988fbfc71dc558f7b2c60a184e8091450b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d26278988fbfc71dc558f7b2c60a184e8091450b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d26278988fbfc71dc558f7b2c60a184e8091450b"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 2,
      "deletions": 8
    },
    "files": [
      {
        "sha": "15577e66f16a4c9385fc74f4251e201c9b484611",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/951a44e9cd6cf2b8058244f3f95181c5ba683fdd/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/951a44e9cd6cf2b8058244f3f95181c5ba683fdd/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=951a44e9cd6cf2b8058244f3f95181c5ba683fdd",
        "patch": "@@ -315,20 +315,14 @@ class BerkeleyBatch\n         return pcursor;\n     }\n \n-    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue, bool setRange = false)\n+    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue)\n     {\n         // Read at cursor\n         Dbt datKey;\n-        unsigned int fFlags = DB_NEXT;\n-        if (setRange) {\n-            datKey.set_data(ssKey.data());\n-            datKey.set_size(ssKey.size());\n-            fFlags = DB_SET_RANGE;\n-        }\n         Dbt datValue;\n         datKey.set_flags(DB_DBT_MALLOC);\n         datValue.set_flags(DB_DBT_MALLOC);\n-        int ret = pcursor->get(&datKey, &datValue, fFlags);\n+        int ret = pcursor->get(&datKey, &datValue, DB_NEXT);\n         if (ret != 0)\n             return ret;\n         else if (datKey.get_data() == nullptr || datValue.get_data() == nullptr)"
      }
    ]
  },
  {
    "sha": "1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTlmOWY3ZTVlMmU3M2ZiODMyZjViOTZhZDdlOWU1Nzk1NGYzZjNj",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-09-19T06:38:40Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-12T23:43:52Z"
      },
      "message": "Introduce SafeDbt to handle DB_DBT_MALLOC raii-style\n\nThis provides additional exception-safety and case handling for the proper\nfreeing of the associated buffers.",
      "tree": {
        "sha": "0604ef70ee47416fd3603cbed6243b921a0ba14c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0604ef70ee47416fd3603cbed6243b921a0ba14c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJb6hA6AAoJEG7l83hfeLNFtLkH/3n5Xxcc7WMhNXnJTrUQuwZ+\njYP4XAWd4b6OsE81M/03T97DRAi8sSPtCri5AWRmklUS1QVViDyI7SLjpyhQXxAs\nuu+JhEKk4VGJ7bKyRZxhDoDReFJnTA+DEGtMkU1YMMpNb2EdcgAGVEcvzQ7hQdhL\nNbWYjxao4POW3k4Htem9MFUnMDWiWQQTgPY0pNCJ4qYyay0uSSBcXfNnJETtxDuZ\ng2Dmmq6smlXjMF5b67TgYniowr3jLqfGvKK9+RwExJvgS2JIF9LUW51wu+wRCMFV\nTSelRwHewgh5/aQ67zToZRvbLu4asyDZ16OlAPXTLyhnd4UaiOyU0j9L4SGzF/Q=\n=CPz/\n-----END PGP SIGNATURE-----",
        "payload": "tree 0604ef70ee47416fd3603cbed6243b921a0ba14c\nparent 951a44e9cd6cf2b8058244f3f95181c5ba683fdd\nauthor Ben Woosley <ben.woosley@gmail.com> 1537339120 -0400\ncommitter Ben Woosley <ben.woosley@gmail.com> 1542066232 -0500\n\nIntroduce SafeDbt to handle DB_DBT_MALLOC raii-style\n\nThis provides additional exception-safety and case handling for the proper\nfreeing of the associated buffers.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "951a44e9cd6cf2b8058244f3f95181c5ba683fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951a44e9cd6cf2b8058244f3f95181c5ba683fdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/951a44e9cd6cf2b8058244f3f95181c5ba683fdd"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 70,
      "deletions": 40
    },
    "files": [
      {
        "sha": "9bac3c49ccfc9bc99fb88af170f26d8e4028b40a",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
        "patch": "@@ -247,6 +247,45 @@ BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string&\n     return (fRecovered ? VerifyResult::RECOVER_OK : VerifyResult::RECOVER_FAIL);\n }\n \n+BerkeleyBatch::SafeDbt::SafeDbt(u_int32_t flags)\n+{\n+    m_dbt.set_flags(flags);\n+}\n+\n+BerkeleyBatch::SafeDbt::SafeDbt(void *data, size_t size)\n+    : m_dbt(data, size)\n+{\n+}\n+\n+BerkeleyBatch::SafeDbt::~SafeDbt()\n+{\n+    if (m_dbt.get_data() != nullptr) {\n+        // Clear memory, e.g. in case it was a private key\n+        memory_cleanse(m_dbt.get_data(), m_dbt.get_size());\n+        // under DB_DBT_MALLOC, data is malloced by the Dbt, but must be\n+        // freed by the caller.\n+        // https://docs.oracle.com/cd/E17275_01/html/api_reference/C/dbt.html\n+        if (m_dbt.get_flags() & DB_DBT_MALLOC) {\n+            free(m_dbt.get_data());\n+        }\n+    }\n+}\n+\n+const void* BerkeleyBatch::SafeDbt::get_data() const\n+{\n+    return m_dbt.get_data();\n+}\n+\n+u_int32_t BerkeleyBatch::SafeDbt::get_size() const\n+{\n+    return m_dbt.get_size();\n+}\n+\n+BerkeleyBatch::SafeDbt::operator Dbt*()\n+{\n+    return &m_dbt;\n+}\n+\n bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;"
      },
      {
        "sha": "73cbff98fbcd68c4c5b90ccef15b412d46dd4415",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 31,
        "deletions": 40,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
        "patch": "@@ -166,10 +166,27 @@ class BerkeleyDatabase\n     bool IsDummy() { return env == nullptr; }\n };\n \n-\n /** RAII class that provides access to a Berkeley database */\n class BerkeleyBatch\n {\n+    /** RAII class that automatically cleanses its data on destruction */\n+    class SafeDbt final {\n+        Dbt m_dbt;\n+\n+    public:\n+        // construct Dbt with data or flags\n+        SafeDbt(u_int32_t flags = 0);\n+        SafeDbt(void *data, size_t size);\n+        ~SafeDbt();\n+\n+        // delegate to Dbt\n+        const void* get_data() const;\n+        u_int32_t get_size() const;\n+\n+        // conversion operator to access the underlying Dbt\n+        operator Dbt*();\n+    };\n+\n protected:\n     Db* pdb;\n     std::string strFile;\n@@ -197,7 +214,6 @@ class BerkeleyBatch\n     /* verifies the database file */\n     static bool VerifyDatabaseFile(const fs::path& file_path, std::string& warningStr, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n \n-public:\n     template <typename K, typename T>\n     bool Read(const K& key, T& value)\n     {\n@@ -208,13 +224,11 @@ class BerkeleyBatch\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n-        Dbt datKey(ssKey.data(), ssKey.size());\n+        SafeDbt datKey(ssKey.data(), ssKey.size());\n \n         // Read\n-        Dbt datValue;\n-        datValue.set_flags(DB_DBT_MALLOC);\n-        int ret = pdb->get(activeTxn, &datKey, &datValue, 0);\n-        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        SafeDbt datValue(DB_DBT_MALLOC);\n+        int ret = pdb->get(activeTxn, datKey, datValue, 0);\n         bool success = false;\n         if (datValue.get_data() != nullptr) {\n             // Unserialize value\n@@ -225,10 +239,6 @@ class BerkeleyBatch\n             } catch (const std::exception&) {\n                 // In this case success remains 'false'\n             }\n-\n-            // Clear and free memory\n-            memory_cleanse(datValue.get_data(), datValue.get_size());\n-            free(datValue.get_data());\n         }\n         return ret == 0 && success;\n     }\n@@ -245,20 +255,16 @@ class BerkeleyBatch\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n-        Dbt datKey(ssKey.data(), ssKey.size());\n+        SafeDbt datKey(ssKey.data(), ssKey.size());\n \n         // Value\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         ssValue.reserve(10000);\n         ssValue << value;\n-        Dbt datValue(ssValue.data(), ssValue.size());\n+        SafeDbt datValue(ssValue.data(), ssValue.size());\n \n         // Write\n-        int ret = pdb->put(activeTxn, &datKey, &datValue, (fOverwrite ? 0 : DB_NOOVERWRITE));\n-\n-        // Clear memory in case it was a private key\n-        memory_cleanse(datKey.get_data(), datKey.get_size());\n-        memory_cleanse(datValue.get_data(), datValue.get_size());\n+        int ret = pdb->put(activeTxn, datKey, datValue, (fOverwrite ? 0 : DB_NOOVERWRITE));\n         return (ret == 0);\n     }\n \n@@ -274,13 +280,10 @@ class BerkeleyBatch\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n-        Dbt datKey(ssKey.data(), ssKey.size());\n+        SafeDbt datKey(ssKey.data(), ssKey.size());\n \n         // Erase\n-        int ret = pdb->del(activeTxn, &datKey, 0);\n-\n-        // Clear memory\n-        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        int ret = pdb->del(activeTxn, datKey, 0);\n         return (ret == 0 || ret == DB_NOTFOUND);\n     }\n \n@@ -294,13 +297,10 @@ class BerkeleyBatch\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         ssKey.reserve(1000);\n         ssKey << key;\n-        Dbt datKey(ssKey.data(), ssKey.size());\n+        SafeDbt datKey(ssKey.data(), ssKey.size());\n \n         // Exists\n-        int ret = pdb->exists(activeTxn, &datKey, 0);\n-\n-        // Clear memory\n-        memory_cleanse(datKey.get_data(), datKey.get_size());\n+        int ret = pdb->exists(activeTxn, datKey, 0);\n         return (ret == 0);\n     }\n \n@@ -318,11 +318,9 @@ class BerkeleyBatch\n     int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue)\n     {\n         // Read at cursor\n-        Dbt datKey;\n-        Dbt datValue;\n-        datKey.set_flags(DB_DBT_MALLOC);\n-        datValue.set_flags(DB_DBT_MALLOC);\n-        int ret = pcursor->get(&datKey, &datValue, DB_NEXT);\n+        SafeDbt datKey(DB_DBT_MALLOC);\n+        SafeDbt datValue(DB_DBT_MALLOC);\n+        int ret = pcursor->get(datKey, datValue, DB_NEXT);\n         if (ret != 0)\n             return ret;\n         else if (datKey.get_data() == nullptr || datValue.get_data() == nullptr)\n@@ -335,16 +333,9 @@ class BerkeleyBatch\n         ssValue.SetType(SER_DISK);\n         ssValue.clear();\n         ssValue.write((char*)datValue.get_data(), datValue.get_size());\n-\n-        // Clear and free memory\n-        memory_cleanse(datKey.get_data(), datKey.get_size());\n-        memory_cleanse(datValue.get_data(), datValue.get_size());\n-        free(datKey.get_data());\n-        free(datValue.get_data());\n         return 0;\n     }\n \n-public:\n     bool TxnBegin()\n     {\n         if (!pdb || activeTxn)"
      }
    ]
  },
  {
    "sha": "4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTg2YTBhY2Q5YWMzY2EzOTJmMDU4NGE1ZmQwNzlhODU2ZTVlNGJh",
    "commit": {
      "author": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-25T02:49:08Z"
      },
      "committer": {
        "name": "Ben Woosley",
        "email": "ben.woosley@gmail.com",
        "date": "2018-11-25T03:05:48Z"
      },
      "message": "Make SafeDbt DB_DBT_MALLOC on default initialization\n\nIf we're constructing the SafeDbt without provided data, it is always malloced,\nso that is the case we expose.\n\nAlso run clang-format.",
      "tree": {
        "sha": "33c6ddfc06796a2b7e5bb98da1076969c02c5080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/33c6ddfc06796a2b7e5bb98da1076969c02c5080"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJb+hHiAAoJEG7l83hfeLNFU8kIAIYJRzHd0FVmwgjUyUohGrgV\nyIw+y/eikJNW2fwfY0OYH5OJAabSs6oWzWf3vqT/52JxtpGdxAt6urWWHNAz0dvu\nGX1/F8e9dZG17N9JRt+MjrCRXE34oahnxdG0iSnLKIx6Q7JwHRDfPdeLEVL70PcD\nToYvQw7Pt3JN+JjQSsLnIG+tD1ggmwXmqVSltqolNK9b64mCU6aP6akUUfG17JDM\nVFlrcjB1koiS4dNtm//YrPhjpJRhFx4jSt4ElgiS1YJzM253WzkL0roVvzzCt7wM\nxMMhkz1aABTEVMN5Qy08SYwo34r45kWXGwsfWbgksssqdow0Kzbs0JueXya1/UM=\n=mzGV\n-----END PGP SIGNATURE-----",
        "payload": "tree 33c6ddfc06796a2b7e5bb98da1076969c02c5080\nparent 1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c\nauthor Ben Woosley <ben.woosley@gmail.com> 1543114148 -0600\ncommitter Ben Woosley <ben.woosley@gmail.com> 1543115148 -0600\n\nMake SafeDbt DB_DBT_MALLOC on default initialization\n\nIf we're constructing the SafeDbt without provided data, it is always malloced,\nso that is the case we expose.\n\nAlso run clang-format.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba/comments",
    "author": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Empact",
      "id": 5470,
      "node_id": "MDQ6VXNlcjU0NzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5470?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Empact",
      "html_url": "https://github.com/Empact",
      "followers_url": "https://api.github.com/users/Empact/followers",
      "following_url": "https://api.github.com/users/Empact/following{/other_user}",
      "gists_url": "https://api.github.com/users/Empact/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Empact/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Empact/subscriptions",
      "organizations_url": "https://api.github.com/users/Empact/orgs",
      "repos_url": "https://api.github.com/users/Empact/repos",
      "events_url": "https://api.github.com/users/Empact/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Empact/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a9f9f7e5e2e73fb832f5b96ad7e9e57954f3f3c"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "b3ae3b92abe1fb667c48a46d43665c68276f9b7b",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba",
        "patch": "@@ -247,12 +247,12 @@ BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string&\n     return (fRecovered ? VerifyResult::RECOVER_OK : VerifyResult::RECOVER_FAIL);\n }\n \n-BerkeleyBatch::SafeDbt::SafeDbt(u_int32_t flags)\n+BerkeleyBatch::SafeDbt::SafeDbt()\n {\n-    m_dbt.set_flags(flags);\n+    m_dbt.set_flags(DB_DBT_MALLOC);\n }\n \n-BerkeleyBatch::SafeDbt::SafeDbt(void *data, size_t size)\n+BerkeleyBatch::SafeDbt::SafeDbt(void* data, size_t size)\n     : m_dbt(data, size)\n {\n }"
      },
      {
        "sha": "25e1cdafa55e333bcb3c3ad485fca742e7ee0920",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=4a86a0acd9ac3ca392f0584a5fd079a856e5e4ba",
        "patch": "@@ -170,13 +170,15 @@ class BerkeleyDatabase\n class BerkeleyBatch\n {\n     /** RAII class that automatically cleanses its data on destruction */\n-    class SafeDbt final {\n+    class SafeDbt final\n+    {\n         Dbt m_dbt;\n \n     public:\n-        // construct Dbt with data or flags\n-        SafeDbt(u_int32_t flags = 0);\n-        SafeDbt(void *data, size_t size);\n+        // construct Dbt with internally-managed data\n+        SafeDbt();\n+        // construct Dbt with provided data\n+        SafeDbt(void* data, size_t size);\n         ~SafeDbt();\n \n         // delegate to Dbt\n@@ -227,7 +229,7 @@ class BerkeleyBatch\n         SafeDbt datKey(ssKey.data(), ssKey.size());\n \n         // Read\n-        SafeDbt datValue(DB_DBT_MALLOC);\n+        SafeDbt datValue;\n         int ret = pdb->get(activeTxn, datKey, datValue, 0);\n         bool success = false;\n         if (datValue.get_data() != nullptr) {\n@@ -318,8 +320,8 @@ class BerkeleyBatch\n     int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue)\n     {\n         // Read at cursor\n-        SafeDbt datKey(DB_DBT_MALLOC);\n-        SafeDbt datValue(DB_DBT_MALLOC);\n+        SafeDbt datKey;\n+        SafeDbt datValue;\n         int ret = pcursor->get(datKey, datValue, DB_NEXT);\n         if (ret != 0)\n             return ret;"
      }
    ]
  }
]