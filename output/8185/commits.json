[
  {
    "sha": "658307e8353f484f50fc3c5f2b01d903522da3b9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTgzMDdlODM1M2Y0ODRmNTBmYzNjNWYyYjAxZDkwMzUyMmRhM2I5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-26T12:34:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T20:47:27Z"
      },
      "message": "test: Add more thorough test for dbwrapper iterators\n\nGithub-Pull: #7992\nRebased-From: 84c13e759dbb0de282e2c8ce43d77f4d52fda6d9 6030625631c62b0ffab2ac545c8351fa59dca483 269a4402a8617a539a70b2c332e86f0fe292a7a6",
      "tree": {
        "sha": "d9fd6ad4086ba8fed4035aa5365a92f2f1b82d9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9fd6ad4086ba8fed4035aa5365a92f2f1b82d9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/658307e8353f484f50fc3c5f2b01d903522da3b9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/658307e8353f484f50fc3c5f2b01d903522da3b9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/658307e8353f484f50fc3c5f2b01d903522da3b9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/658307e8353f484f50fc3c5f2b01d903522da3b9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f8d574e8f6521c07ae204b4f8b61d1534f03c21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8d574e8f6521c07ae204b4f8b61d1534f03c21",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8d574e8f6521c07ae204b4f8b61d1534f03c21"
      }
    ],
    "stats": {
      "total": 123,
      "additions": 122,
      "deletions": 1
    },
    "files": [
      {
        "sha": "663688761e0f1ef6dd2e7b63670e780199d317c3",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/658307e8353f484f50fc3c5f2b01d903522da3b9/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/658307e8353f484f50fc3c5f2b01d903522da3b9/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=658307e8353f484f50fc3c5f2b01d903522da3b9",
        "patch": "@@ -93,6 +93,7 @@ CBlockIndex* CBlockIndex::GetAncestor(int height)\n             pindexWalk = pindexWalk->pskip;\n             heightWalk = heightSkip;\n         } else {\n+            assert(pindexWalk->pprev);\n             pindexWalk = pindexWalk->pprev;\n             heightWalk--;\n         }"
      },
      {
        "sha": "08f09712e26cfd6e638437eedec8f39422e07389",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 1,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/658307e8353f484f50fc3c5f2b01d903522da3b9/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/658307e8353f484f50fc3c5f2b01d903522da3b9/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=658307e8353f484f50fc3c5f2b01d903522da3b9",
        "patch": "@@ -203,5 +203,125 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n     BOOST_CHECK(odbw.Read(key, res3));\n     BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n }\n- \n+\n+BOOST_AUTO_TEST_CASE(iterator_ordering)\n+{\n+    path ph = temp_directory_path() / unique_path();\n+    CDBWrapper dbw(ph, (1 << 20), true, false, false);\n+    for (int x=0x00; x<256; ++x) {\n+        uint8_t key = x;\n+        uint32_t value = x*x;\n+        BOOST_CHECK(dbw.Write(key, value));\n+    }\n+\n+    boost::scoped_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    for (int c=0; c<2; ++c) {\n+        int seek_start;\n+        if (c == 0)\n+            seek_start = 0x00;\n+        else\n+            seek_start = 0x80;\n+        it->Seek((uint8_t)seek_start);\n+        for (int x=seek_start; x<256; ++x) {\n+            uint8_t key;\n+            uint32_t value;\n+            BOOST_CHECK(it->Valid());\n+            if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n+                break;\n+            BOOST_CHECK(it->GetKey(key));\n+            BOOST_CHECK(it->GetValue(value));\n+            BOOST_CHECK_EQUAL(key, x);\n+            BOOST_CHECK_EQUAL(value, x*x);\n+            it->Next();\n+        }\n+        BOOST_CHECK(!it->Valid());\n+    }\n+}\n+\n+struct StringContentsSerializer {\n+    // Used to make two serialized objects the same while letting them have a different lengths\n+    // This is a terrible idea\n+    string str;\n+    StringContentsSerializer() {}\n+    StringContentsSerializer(const string& inp) : str(inp) {}\n+\n+    StringContentsSerializer& operator+=(const string& s) {\n+        str += s;\n+        return *this;\n+    }\n+    StringContentsSerializer& operator+=(const StringContentsSerializer& s) { return *this += s.str; }\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        if (ser_action.ForRead()) {\n+            str.clear();\n+            char c = 0;\n+            while (true) {\n+                try {\n+                    READWRITE(c);\n+                    str.push_back(c);\n+                } catch (const std::ios_base::failure& e) {\n+                    break;\n+                }\n+            }\n+        } else {\n+            for (size_t i = 0; i < str.size(); i++)\n+                READWRITE(str[i]);\n+        }\n+    }\n+};\n+\n+BOOST_AUTO_TEST_CASE(iterator_string_ordering)\n+{\n+    char buf[10];\n+\n+    path ph = temp_directory_path() / unique_path();\n+    CDBWrapper dbw(ph, (1 << 20), true, false, false);\n+    for (int x=0x00; x<10; ++x) {\n+        for (int y = 0; y < 10; y++) {\n+            sprintf(buf, \"%d\", x);\n+            StringContentsSerializer key(buf);\n+            for (int z = 0; z < y; z++)\n+                key += key;\n+            uint32_t value = x*x;\n+            BOOST_CHECK(dbw.Write(key, value));\n+        }\n+    }\n+\n+    boost::scoped_ptr<CDBIterator> it(const_cast<CDBWrapper*>(&dbw)->NewIterator());\n+    for (int c=0; c<2; ++c) {\n+        int seek_start;\n+        if (c == 0)\n+            seek_start = 0;\n+        else\n+            seek_start = 5;\n+        sprintf(buf, \"%d\", seek_start);\n+        StringContentsSerializer seek_key(buf);\n+        it->Seek(seek_key);\n+        for (int x=seek_start; x<10; ++x) {\n+            for (int y = 0; y < 10; y++) {\n+                sprintf(buf, \"%d\", x);\n+                string exp_key(buf);\n+                for (int z = 0; z < y; z++)\n+                    exp_key += exp_key;\n+                StringContentsSerializer key;\n+                uint32_t value;\n+                BOOST_CHECK(it->Valid());\n+                if (!it->Valid()) // Avoid spurious errors about invalid iterator's key and value in case of failure\n+                    break;\n+                BOOST_CHECK(it->GetKey(key));\n+                BOOST_CHECK(it->GetValue(value));\n+                BOOST_CHECK_EQUAL(key.str, exp_key);\n+                BOOST_CHECK_EQUAL(value, x*x);\n+                it->Next();\n+            }\n+        }\n+        BOOST_CHECK(!it->Valid());\n+    }\n+}\n+\n+\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "2d2b04543d81084ec307b43fc5c4b237bef5222c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDJiMDQ1NDNkODEwODRlYzMwN2I0M2ZjNWM0YjIzN2JlZjUyMjJj",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-05-06T09:00:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T20:52:04Z"
      },
      "message": "Reenable multithread scheduler test\n\nGithub-Pull: #8016\nRebased-From: db18ab28c7a74bb289bfe6a5f9a4a9f963f71c0b 166e4b0dfa283fbdedc9a6a1e83296500c853a31",
      "tree": {
        "sha": "8760b6b73da4d6d63a5a99391b39172905883e4c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8760b6b73da4d6d63a5a99391b39172905883e4c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d2b04543d81084ec307b43fc5c4b237bef5222c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2b04543d81084ec307b43fc5c4b237bef5222c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2b04543d81084ec307b43fc5c4b237bef5222c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2b04543d81084ec307b43fc5c4b237bef5222c/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "658307e8353f484f50fc3c5f2b01d903522da3b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/658307e8353f484f50fc3c5f2b01d903522da3b9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/658307e8353f484f50fc3c5f2b01d903522da3b9"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "52777b61f96c8dfe12455eda77355500d6585369",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2b04543d81084ec307b43fc5c4b237bef5222c/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2b04543d81084ec307b43fc5c4b237bef5222c/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=2d2b04543d81084ec307b43fc5c4b237bef5222c",
        "patch": "@@ -79,6 +79,7 @@ void CScheduler::serviceQueue()\n         }\n     }\n     --nThreadsServicingQueue;\n+    newTaskScheduled.notify_one();\n }\n \n void CScheduler::stop(bool drain)"
      },
      {
        "sha": "aa12dfbd54f8f00456f1173d045ae1b697d02a2b",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d2b04543d81084ec307b43fc5c4b237bef5222c/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d2b04543d81084ec307b43fc5c4b237bef5222c/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=2d2b04543d81084ec307b43fc5c4b237bef5222c",
        "patch": "@@ -40,7 +40,6 @@ static void MicroSleep(uint64_t n)\n #endif\n }\n \n-#if 0 /* Disabled for now because there is a race condition issue in this test - see #6540 */\n BOOST_AUTO_TEST_CASE(manythreads)\n {\n     seed_insecure_rand(false);\n@@ -116,6 +115,5 @@ BOOST_AUTO_TEST_CASE(manythreads)\n     }\n     BOOST_CHECK_EQUAL(counterSum, 200);\n }\n-#endif\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "4fd6008105a719796b51195a4ebaebc5763f283c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmQ2MDA4MTA1YTcxOTc5NmI1MTE5NWE0ZWJhZWJjNTc2M2YyODNj",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-05-17T21:54:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T21:30:18Z"
      },
      "message": "travis: 'make check' in parallel and verbose\n\nGithub-Pull: #8072\nRebased-From: 401ae654b247d80e29e76ebd094e9e37409941bd",
      "tree": {
        "sha": "ada927bb9093e71f01032539d6123530355cf101",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ada927bb9093e71f01032539d6123530355cf101"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4fd6008105a719796b51195a4ebaebc5763f283c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fd6008105a719796b51195a4ebaebc5763f283c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4fd6008105a719796b51195a4ebaebc5763f283c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fd6008105a719796b51195a4ebaebc5763f283c/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d2b04543d81084ec307b43fc5c4b237bef5222c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d2b04543d81084ec307b43fc5c4b237bef5222c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d2b04543d81084ec307b43fc5c4b237bef5222c"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3f84c7be8ac127581701111e77ca7fec696f0acf",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4fd6008105a719796b51195a4ebaebc5763f283c/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4fd6008105a719796b51195a4ebaebc5763f283c/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=4fd6008105a719796b51195a4ebaebc5763f283c",
        "patch": "@@ -75,7 +75,7 @@ script:\n     - ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( cat config.log && false)\n     - make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL V=1 ; false )\n     - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n-    - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+    - if [ \"$RUN_TESTS\" = \"true\" ]; then make $MAKEJOBS check VERBOSE=1; fi\n     - if [ \"$RUN_TESTS\" = \"true\" ]; then qa/pull-tester/rpc-tests.py --coverage; fi\n after_script:\n     - if [ \"$TRAVIS_PULL_REQUEST\" != \"false\" ]; then (echo \"Upload goes here. Something like: scp -r $BASE_OUTDIR server\" || echo \"upload failed\"); fi"
      }
    ]
  },
  {
    "sha": "4ffd309b25596564a0cf51bddfcaebbba2d656e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZmZkMzA5YjI1NTk2NTY0YTBjZjUxYmRkZmNhZWJiYmEyZDY1NmUz",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-03-04T20:08:10Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T21:44:55Z"
      },
      "message": "Create SingleNodeConnCB class for RPC tests\n\n(cherry picked from commit 5fa66e4682a59047d2ed2934760ccc052fd85f50)",
      "tree": {
        "sha": "6f55881c203582b8581dadf1568aba35abda7f62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f55881c203582b8581dadf1568aba35abda7f62"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ffd309b25596564a0cf51bddfcaebbba2d656e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ffd309b25596564a0cf51bddfcaebbba2d656e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ffd309b25596564a0cf51bddfcaebbba2d656e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ffd309b25596564a0cf51bddfcaebbba2d656e3/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4fd6008105a719796b51195a4ebaebc5763f283c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4fd6008105a719796b51195a4ebaebc5763f283c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4fd6008105a719796b51195a4ebaebc5763f283c"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 41,
      "deletions": 15
    },
    "files": [
      {
        "sha": "be45fecb5b32ab6029b47c5f0c365bace2c919dc",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ffd309b25596564a0cf51bddfcaebbba2d656e3/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ffd309b25596564a0cf51bddfcaebbba2d656e3/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=4ffd309b25596564a0cf51bddfcaebbba2d656e3",
        "patch": "@@ -7,7 +7,6 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.comptool import wait_until\n import time\n \n '''"
      },
      {
        "sha": "a1935bab9125494579f5caa5969501dea15e8c81",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ffd309b25596564a0cf51bddfcaebbba2d656e3/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ffd309b25596564a0cf51bddfcaebbba2d656e3/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=4ffd309b25596564a0cf51bddfcaebbba2d656e3",
        "patch": "@@ -27,20 +27,6 @@\n \n global mininode_lock\n \n-def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n-    attempt = 0\n-    elapsed = 0\n-\n-    while attempt < attempts and elapsed < timeout:\n-        with mininode_lock:\n-            if predicate():\n-                return True\n-        attempt += 1\n-        elapsed += 0.05\n-        time.sleep(0.05)\n-\n-    return False\n-\n class RejectResult(object):\n     '''\n     Outcome that expects rejection of a transaction or block."
      },
      {
        "sha": "c0bb123cd1185b4f2f195e19281c683237fd9987",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ffd309b25596564a0cf51bddfcaebbba2d656e3/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ffd309b25596564a0cf51bddfcaebbba2d656e3/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=4ffd309b25596564a0cf51bddfcaebbba2d656e3",
        "patch": "@@ -1009,6 +1009,21 @@ def __repr__(self):\n         return \"msg_reject: %s %d %s [%064x]\" \\\n             % (self.message, self.code, self.reason, self.data)\n \n+# Helper function\n+def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+    attempt = 0\n+    elapsed = 0\n+\n+    while attempt < attempts and elapsed < timeout:\n+        with mininode_lock:\n+            if predicate():\n+                return True\n+        attempt += 1\n+        elapsed += 0.05\n+        time.sleep(0.05)\n+\n+    return False\n+\n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):\n@@ -1085,6 +1100,32 @@ def on_close(self, conn): pass\n     def on_mempool(self, conn): pass\n     def on_pong(self, conn, message): pass\n \n+# More useful callbacks and functions for NodeConnCB's which have a single NodeConn\n+class SingleNodeConnCB(NodeConnCB):\n+    def __init__(self):\n+        NodeConnCB.__init__(self)\n+        self.connection = None\n+        self.ping_counter = 1\n+        self.last_pong = msg_pong()\n+\n+    def add_connection(self, conn):\n+        self.connection = conn\n+\n+    # Wrapper for the NodeConn's send_message function\n+    def send_message(self, message):\n+        self.connection.send_message(message)\n+\n+    def on_pong(self, conn, message):\n+        self.last_pong = message\n+\n+    # Sync up with the node\n+    def sync_with_ping(self, timeout=30):\n+        def received_pong():\n+            return (self.last_pong.nonce == self.ping_counter)\n+        self.send_message(msg_ping(nonce=self.ping_counter))\n+        success = wait_until(received_pong, timeout)\n+        self.ping_counter += 1\n+        return success\n \n # The actual NodeConn class\n # This class provides an interface for a p2p connection to a specified node"
      }
    ]
  },
  {
    "sha": "80b6bfaeaa42b983a6b6503f28a280bad6e9a73b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGI2YmZhZWFhNDJiOTgzYTZiNjUwM2YyOGEyODBiYWQ2ZTlhNzNi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-25T13:21:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T21:51:53Z"
      },
      "message": "test_framework: detect failure of bitcoind startup\n\nGithub-Pull: #7744\nRebased-From: 018b60c5ea703ed12edcde034a185f79e77e5576",
      "tree": {
        "sha": "59d317ea551451e31ae00c88af0234dcb3d6dc11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59d317ea551451e31ae00c88af0234dcb3d6dc11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ffd309b25596564a0cf51bddfcaebbba2d656e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ffd309b25596564a0cf51bddfcaebbba2d656e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ffd309b25596564a0cf51bddfcaebbba2d656e3"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 40,
      "deletions": 20
    },
    "files": [
      {
        "sha": "875b6cf72aa6b30a3fd5d2d81c01e9a05140d4a4",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 40,
        "deletions": 20,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=80b6bfaeaa42b983a6b6503f28a280bad6e9a73b",
        "patch": "@@ -20,6 +20,7 @@\n import subprocess\n import time\n import re\n+import errno\n \n from . import coverage\n from .authproxy import AuthServiceProxy, JSONRPCException\n@@ -143,11 +144,33 @@ def initialize_datadir(dirname, n):\n         f.write(\"listenonion=0\\n\")\n     return datadir\n \n+def rpc_url(i, rpchost=None):\n+    return \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n+\n+def wait_for_bitcoind_start(process, url, i):\n+    '''\n+    Wait for bitcoind to start. This means that RPC is accessible and fully initialized.\n+    Raise an exception if bitcoind exits during initialization.\n+    '''\n+    while True:\n+        if process.poll() is not None:\n+            raise Exception('bitcoind exited with status %i during initialization' % process.returncode)\n+        try:\n+            rpc = get_rpc_proxy(url, i)\n+            blocks = rpc.getblockcount()\n+            break # break out of loop on success\n+        except IOError as e:\n+            if e.errno != errno.ECONNREFUSED: # Port not yet open?\n+                raise # unknown IO error\n+        except JSONRPCException as e: # Initialization phase\n+            if e.error['code'] != -28: # RPC in warmup?\n+                raise # unkown JSON RPC exception\n+        time.sleep(0.25)\n+\n def initialize_chain(test_dir):\n     \"\"\"\n     Create (or copy from cache) a 200-block-long chain and\n     4 wallets.\n-    bitcoind and bitcoin-cli must be in search path.\n     \"\"\"\n \n     if (not os.path.isdir(os.path.join(\"cache\",\"node0\"))\n@@ -160,7 +183,6 @@ def initialize_chain(test_dir):\n             if os.path.isdir(os.path.join(\"cache\",\"node\"+str(i))):\n                 shutil.rmtree(os.path.join(\"cache\",\"node\"+str(i)))\n \n-        devnull = open(os.devnull, \"w\")\n         # Create cache directories, run bitcoinds:\n         for i in range(4):\n             datadir=initialize_datadir(\"cache\", i)\n@@ -169,19 +191,15 @@ def initialize_chain(test_dir):\n                 args.append(\"-connect=127.0.0.1:\"+str(p2p_port(0)))\n             bitcoind_processes[i] = subprocess.Popen(args)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n-            subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir,\n-                                    \"-rpcwait\", \"getblockcount\"], stdout=devnull)\n+                print \"initialize_chain: bitcoind started, waiting for RPC to come up\"\n+            wait_for_bitcoind_start(bitcoind_processes[i], rpc_url(i), i)\n             if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-                print \"initialize_chain: bitcoin-cli -rpcwait getblockcount completed\"\n-        devnull.close()\n+                print \"initialize_chain: RPC succesfully started\"\n \n         rpcs = []\n-\n         for i in range(4):\n             try:\n-                url = \"http://rt:rt@127.0.0.1:%d\" % (rpc_port(i),)\n-                rpcs.append(get_rpc_proxy(url, i))\n+                rpcs.append(get_rpc_proxy(rpc_url(i), i))\n             except:\n                 sys.stderr.write(\"Error connecting to \"+url+\"\\n\")\n                 sys.exit(1)\n@@ -257,17 +275,12 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     args = [ binary, \"-datadir=\"+datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-blockprioritysize=50000\", \"-mocktime=\"+str(get_mocktime()) ]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args)\n-    devnull = open(os.devnull, \"w\")\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: bitcoind started, calling bitcoin-cli -rpcwait getblockcount\"\n-    subprocess.check_call([ os.getenv(\"BITCOINCLI\", \"bitcoin-cli\"), \"-datadir=\"+datadir] +\n-                          _rpchost_to_args(rpchost)  +\n-                          [\"-rpcwait\", \"getblockcount\"], stdout=devnull)\n+        print \"start_node: bitcoind started, waiting for RPC to come up\"\n+    url = rpc_url(i, rpchost)\n+    wait_for_bitcoind_start(bitcoind_processes[i], url, i)\n     if os.getenv(\"PYTHON_DEBUG\", \"\"):\n-        print \"start_node: calling bitcoin-cli -rpcwait getblockcount returned\"\n-    devnull.close()\n-    url = \"http://rt:rt@%s:%d\" % (rpchost or '127.0.0.1', rpc_port(i))\n-\n+        print \"start_node: RPC succesfully started\"\n     proxy = get_rpc_proxy(url, i, timeout=timewait)\n \n     if COVERAGE_DIR:\n@@ -281,7 +294,14 @@ def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, binary=None):\n     \"\"\"\n     if extra_args is None: extra_args = [ None for i in range(num_nodes) ]\n     if binary is None: binary = [ None for i in range(num_nodes) ]\n-    return [ start_node(i, dirname, extra_args[i], rpchost, binary=binary[i]) for i in range(num_nodes) ]\n+    rpcs = []\n+    try:\n+        for i in range(num_nodes):\n+            rpcs.append(start_node(i, dirname, extra_args[i], rpchost, binary=binary[i]))\n+    except: # If one node failed to start, stop the others\n+        stop_nodes(rpcs)\n+        raise\n+    return rpcs\n \n def log_filename(dirname, n_node, logname):\n     return os.path.join(dirname, \"node\"+str(n_node), \"regtest\", logname)"
      }
    ]
  },
  {
    "sha": "afbc000b0bcf98050d45781bc07a71f3afc7e764",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmJjMDAwYjBiY2Y5ODA1MGQ0NTc4MWJjMDdhNzFmM2FmYzdlNzY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-03-28T09:44:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T21:55:27Z"
      },
      "message": "test_framework: python3.4 authproxy compat\n\nGithub-Pull: #7751\nRebased-From: d7b80b54fbb73acc92ddee84697ac4cc10d4d336 e7e48ba66cb597621a30945da9ca7fc36a6dc84c",
      "tree": {
        "sha": "b4cc721b4e837c75a414378210a77b0cc0653620",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4cc721b4e837c75a414378210a77b0cc0653620"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/afbc000b0bcf98050d45781bc07a71f3afc7e764",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afbc000b0bcf98050d45781bc07a71f3afc7e764",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/afbc000b0bcf98050d45781bc07a71f3afc7e764",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afbc000b0bcf98050d45781bc07a71f3afc7e764/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80b6bfaeaa42b983a6b6503f28a280bad6e9a73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80b6bfaeaa42b983a6b6503f28a280bad6e9a73b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1eb277259226563834b09ecc3e1568188a6dc80e",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/afbc000b0bcf98050d45781bc07a71f3afc7e764/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/afbc000b0bcf98050d45781bc07a71f3afc7e764/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=afbc000b0bcf98050d45781bc07a71f3afc7e764",
        "patch": "@@ -61,7 +61,7 @@ def __init__(self, rpc_error):\n \n def EncodeDecimal(o):\n     if isinstance(o, decimal.Decimal):\n-        return round(o, 8)\n+        return str(o)\n     raise TypeError(repr(o) + \" is not JSON serializable\")\n \n class AuthServiceProxy(object):\n@@ -92,11 +92,10 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n             self.__conn = connection\n         elif self.__url.scheme == 'https':\n             self.__conn = httplib.HTTPSConnection(self.__url.hostname, port,\n-                                                  None, None, False,\n-                                                  timeout)\n+                                                  timeout=timeout)\n         else:\n             self.__conn = httplib.HTTPConnection(self.__url.hostname, port,\n-                                                 False, timeout)\n+                                                 timeout=timeout)\n \n     def __getattr__(self, name):\n         if name.startswith('__') and name.endswith('__'):"
      }
    ]
  },
  {
    "sha": "3036282c7a69c20c4918ba29e221128e7afec8ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDM2MjgyYzdhNjljMjBjNDkxOGJhMjllMjIxMTI4ZTdhZmVjOGZm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-03T18:35:57Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:01:08Z"
      },
      "message": "[qa] httpbasics: Actually test second connection\n\nGithub-Pull: #7802\nRebased-From: fa24456d0c4cd0f6571bcf3d8f1f51d8d4242a3e",
      "tree": {
        "sha": "1f521623455819d17fbd3f9e7a5710757b90fa59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f521623455819d17fbd3f9e7a5710757b90fa59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3036282c7a69c20c4918ba29e221128e7afec8ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3036282c7a69c20c4918ba29e221128e7afec8ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3036282c7a69c20c4918ba29e221128e7afec8ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3036282c7a69c20c4918ba29e221128e7afec8ff/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afbc000b0bcf98050d45781bc07a71f3afc7e764",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afbc000b0bcf98050d45781bc07a71f3afc7e764",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afbc000b0bcf98050d45781bc07a71f3afc7e764"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 9,
      "deletions": 9
    },
    "files": [
      {
        "sha": "cf37976a4ed8558653d1043a5ba00ba988be6ce7",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3036282c7a69c20c4918ba29e221128e7afec8ff/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3036282c7a69c20c4918ba29e221128e7afec8ff/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=3036282c7a69c20c4918ba29e221128e7afec8ff",
        "patch": "@@ -36,13 +36,13 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert('\"error\":null' in out1)\n+        assert(b'\"error\":null' in out1)\n         assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n-        out2 = conn.getresponse().read()\n-        assert('\"error\":null' in out1) #must also response with a correct json-rpc message\n+        out1 = conn.getresponse().read()\n+        assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n         assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n@@ -53,13 +53,13 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert('\"error\":null' in out1)\n+        assert(b'\"error\":null' in out1)\n         assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n-        out2 = conn.getresponse().read()\n-        assert('\"error\":null' in out1) #must also response with a correct json-rpc message\n+        out1 = conn.getresponse().read()\n+        assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n         assert(conn.sock!=None) #according to http/1.1 connection must still be open!\n         conn.close()\n \n@@ -70,7 +70,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert('\"error\":null' in out1)\n+        assert(b'\"error\":null' in out1)\n         assert(conn.sock==None) #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n@@ -82,7 +82,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert('\"error\":null' in out1)\n+        assert(b'\"error\":null' in out1)\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n@@ -93,7 +93,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert('\"error\":null' in out1)\n+        assert(b'\"error\":null' in out1)\n         assert(conn.sock!=None) #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size"
      }
    ]
  },
  {
    "sha": "ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDJmMGUzYWMxMTJhZDhiZWIzNmRiY2VjYmRkODA2MjAxZGM5YWU4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-03-20T17:56:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:01:51Z"
      },
      "message": "[qa] maxblocksinflight: Actually enable test\n\nGithub-Pull: #7803\nRebased-From: fac724c78f281168ea174c36cada4f95112aea6d",
      "tree": {
        "sha": "0e930425603d58b00913ba61b114d7f2eae4842d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e930425603d58b00913ba61b114d7f2eae4842d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3036282c7a69c20c4918ba29e221128e7afec8ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3036282c7a69c20c4918ba29e221128e7afec8ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3036282c7a69c20c4918ba29e221128e7afec8ff"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 26,
      "deletions": 30
    },
    "files": [
      {
        "sha": "ec4bb5d6f3f954541ec5dec7fc9899c99e55478a",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 26,
        "deletions": 30,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8",
        "patch": "@@ -41,40 +41,36 @@ def add_new_connection(self, connection):\n         self.disconnectOkay = False\n \n     def run(self):\n-        try:\n-            fail = False\n-            self.connection.rpc.generate(1) # Leave IBD\n-\n-            numBlocksToGenerate = [ 8, 16, 128, 1024 ]\n-            for count in range(len(numBlocksToGenerate)):\n-                current_invs = []\n-                for i in range(numBlocksToGenerate[count]):\n-                    current_invs.append(CInv(2, random.randrange(0, 1<<256)))\n-                    if len(current_invs) >= 50000:\n-                        self.connection.send_message(msg_inv(current_invs))\n-                        current_invs = []\n-                if len(current_invs) > 0:\n+        self.connection.rpc.generate(1)  # Leave IBD\n+\n+        numBlocksToGenerate = [8, 16, 128, 1024]\n+        for count in range(len(numBlocksToGenerate)):\n+            current_invs = []\n+            for i in range(numBlocksToGenerate[count]):\n+                current_invs.append(CInv(2, random.randrange(0, 1 << 256)))\n+                if len(current_invs) >= 50000:\n                     self.connection.send_message(msg_inv(current_invs))\n-                \n-                # Wait and see how many blocks were requested\n-                time.sleep(2)\n-\n-                total_requests = 0\n-                with mininode_lock:\n-                    for key in self.blockReqCounts:\n-                        total_requests += self.blockReqCounts[key]\n-                        if self.blockReqCounts[key] > 1:\n-                            raise AssertionError(\"Error, test failed: block %064x requested more than once\" % key)\n-                if total_requests > MAX_REQUESTS:\n-                    raise AssertionError(\"Error, too many blocks (%d) requested\" % total_requests)\n-                print \"Round %d: success (total requests: %d)\" % (count, total_requests)\n-        except AssertionError as e:\n-            print \"TEST FAILED: \", e.args\n+                    current_invs = []\n+            if len(current_invs) > 0:\n+                self.connection.send_message(msg_inv(current_invs))\n+\n+            # Wait and see how many blocks were requested\n+            time.sleep(2)\n+\n+            total_requests = 0\n+            with mininode_lock:\n+                for key in self.blockReqCounts:\n+                    total_requests += self.blockReqCounts[key]\n+                    if self.blockReqCounts[key] > 1:\n+                        raise AssertionError(\"Error, test failed: block %064x requested more than once\" % key)\n+            if total_requests > MAX_REQUESTS:\n+                raise AssertionError(\"Error, too many blocks (%d) requested\" % total_requests)\n+            print \"Round %d: success (total requests: %d)\" % (count, total_requests)\n \n         self.disconnectOkay = True\n         self.connection.disconnect_node()\n \n-        \n+\n class MaxBlocksInFlightTest(BitcoinTestFramework):\n     def add_options(self, parser):\n         parser.add_option(\"--testbinary\", dest=\"testbinary\",\n@@ -86,7 +82,7 @@ def setup_chain(self):\n         initialize_chain_clean(self.options.tmpdir, 1)\n \n     def setup_network(self):\n-        self.nodes = start_nodes(1, self.options.tmpdir, \n+        self.nodes = start_nodes(1, self.options.tmpdir,\n                                  extra_args=[['-debug', '-whitelist=127.0.0.1']],\n                                  binary=[self.options.testbinary])\n "
      }
    ]
  },
  {
    "sha": "d5a9de352c1dd11085442e293e22edaf4b2d4839",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNWE5ZGUzNTJjMWRkMTEwODU0NDJlMjkzZTIyZWRhZjRiMmQ0ODM5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-07T13:21:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:03:57Z"
      },
      "message": "tests: Check Content-Type header returned from RPC server\n\nGithub-Pull: #7833\nRebased-From: 5078ca45438e8f8d8e7cd937659887fb8ec70038",
      "tree": {
        "sha": "0ea490e502901c8b8cdb62c7f46d690ec74fd59b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ea490e502901c8b8cdb62c7f46d690ec74fd59b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d5a9de352c1dd11085442e293e22edaf4b2d4839",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a9de352c1dd11085442e293e22edaf4b2d4839",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d5a9de352c1dd11085442e293e22edaf4b2d4839",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a9de352c1dd11085442e293e22edaf4b2d4839/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed2f0e3ac112ad8beb36dbcecbdd806201dc9ae8"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e5f7ab36561671e6e885d4643cce32acd35289d6",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d5a9de352c1dd11085442e293e22edaf4b2d4839/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d5a9de352c1dd11085442e293e22edaf4b2d4839/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=d5a9de352c1dd11085442e293e22edaf4b2d4839",
        "patch": "@@ -154,6 +154,11 @@ def _get_response(self):\n             raise JSONRPCException({\n                 'code': -342, 'message': 'missing HTTP response from server'})\n \n+        content_type = http_response.getheader('Content-Type')\n+        if content_type != 'application/json':\n+            raise JSONRPCException({\n+                'code': -342, 'message': 'non-JSON HTTP response with \\'%i %s\\' from server' % (http_response.status, http_response.reason)})\n+\n         responsedata = http_response.read().decode('utf8')\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n         if \"error\" in response and response[\"error\"] is None:"
      }
    ]
  },
  {
    "sha": "697ed8c8279a1ac915b71db06a03f9ed85b9f334",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTdlZDhjODI3OWExYWM5MTViNzFkYjA2YTAzZjllZDg1YjlmMzM0",
    "commit": {
      "author": {
        "name": "Elliot Olds",
        "email": "elliotolds@gmail.com",
        "date": "2016-03-10T11:12:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:07:50Z"
      },
      "message": "Check if zmq is installed in tests, update docs\n\nGithub-Pull: #7635\nRebased-From: 2ab835ae6c02de14264896d571c0bba230a1e9f0",
      "tree": {
        "sha": "afccfcb1d0d94afac048b9e54cf3ccc79f32671b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/afccfcb1d0d94afac048b9e54cf3ccc79f32671b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/697ed8c8279a1ac915b71db06a03f9ed85b9f334",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/697ed8c8279a1ac915b71db06a03f9ed85b9f334",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/697ed8c8279a1ac915b71db06a03f9ed85b9f334",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/697ed8c8279a1ac915b71db06a03f9ed85b9f334/comments",
    "author": {
      "login": "elliotolds",
      "id": 5849793,
      "node_id": "MDQ6VXNlcjU4NDk3OTM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5849793?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/elliotolds",
      "html_url": "https://github.com/elliotolds",
      "followers_url": "https://api.github.com/users/elliotolds/followers",
      "following_url": "https://api.github.com/users/elliotolds/following{/other_user}",
      "gists_url": "https://api.github.com/users/elliotolds/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/elliotolds/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/elliotolds/subscriptions",
      "organizations_url": "https://api.github.com/users/elliotolds/orgs",
      "repos_url": "https://api.github.com/users/elliotolds/repos",
      "events_url": "https://api.github.com/users/elliotolds/events{/privacy}",
      "received_events_url": "https://api.github.com/users/elliotolds/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5a9de352c1dd11085442e293e22edaf4b2d4839",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5a9de352c1dd11085442e293e22edaf4b2d4839",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5a9de352c1dd11085442e293e22edaf4b2d4839"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 22,
      "deletions": 2
    },
    "files": [
      {
        "sha": "85b1985560c8f9cb15a7f4691eb2906aec364909",
        "filename": "README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/697ed8c8279a1ac915b71db06a03f9ed85b9f334/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/697ed8c8279a1ac915b71db06a03f9ed85b9f334/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=697ed8c8279a1ac915b71db06a03f9ed85b9f334",
        "patch": "@@ -55,10 +55,10 @@ submit new unit tests for old code. Unit tests can be compiled and run\n \n There are also [regression and integration tests](/qa) of the RPC interface, written\n in Python, that are run automatically on the build server.\n-These tests can be run with: `qa/pull-tester/rpc-tests.py`\n+These tests can be run (if the [test dependencies](/qa) are installed) with: `qa/pull-tester/rpc-tests.py`\n \n The Travis CI system makes sure that every pull request is built for Windows\n-and Linux, OSX, and that unit and sanity tests are automatically run.\n+and Linux, OS X, and that unit and sanity tests are automatically run.\n \n ### Manual Quality Assurance (QA) Testing\n "
      },
      {
        "sha": "2b476c4d8d93f9bd07c2cd1d60f544c14d671665",
        "filename": "qa/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/697ed8c8279a1ac915b71db06a03f9ed85b9f334/qa/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/697ed8c8279a1ac915b71db06a03f9ed85b9f334/qa/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/README.md?ref=697ed8c8279a1ac915b71db06a03f9ed85b9f334",
        "patch": "@@ -5,6 +5,17 @@ Every pull request to the bitcoin repository is built and run through\n the regression test suite. You can also run all or only individual\n tests locally.\n \n+Test dependencies\n+=================\n+Before running the tests, the following must be installed.\n+\n+Unix\n+----\n+The python-zmq library is required. On Ubuntu or Debian it can be installed via: \n+```\n+sudo apt-get install python-zmq\n+```\n+\n Running tests\n =============\n "
      },
      {
        "sha": "56e19f5e38916e8acbd031595f90f0fdc9800f1b",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/697ed8c8279a1ac915b71db06a03f9ed85b9f334/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/697ed8c8279a1ac915b71db06a03f9ed85b9f334/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=697ed8c8279a1ac915b71db06a03f9ed85b9f334",
        "patch": "@@ -40,6 +40,15 @@\n     ENABLE_UTILS=0\n if 'ENABLE_ZMQ' not in vars():\n     ENABLE_ZMQ=0\n+    \n+# python-zmq may not be installed. Handle this gracefully and with some helpful info\n+if ENABLE_ZMQ:\n+    try:\n+        import zmq\n+    except ImportError:\n+        print(\"WARNING: \\\"import zmq\\\" failed. Setting ENABLE_ZMQ=0. \" \\\n+            \"To run zmq tests, see dependency info in /qa/README.md.\")\n+        ENABLE_ZMQ=0\n \n ENABLE_COVERAGE=0\n "
      }
    ]
  },
  {
    "sha": "e0b1bbeae026859540c62247156b8839d556ee9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGIxYmJlYWUwMjY4NTk1NDBjNjIyNDcxNTZiODgzOWQ1NTZlZTlh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-09T19:14:18Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:11:51Z"
      },
      "message": "[qa] pull-tester: Don't mute zmq ImportError\n\nGithub-Pull: #7851\nRebased-From: fa05e22e919b7e2e816606f0c0d3dea1bd325bfd faa4f22342b682a5ead1bbb8587facd761b4ac2d fae1f4ebfe6be4426685b22166f5367c92ba0833",
      "tree": {
        "sha": "4e99b470aa1ac0a3def38e7b47478c05579f6d6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e99b470aa1ac0a3def38e7b47478c05579f6d6a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0b1bbeae026859540c62247156b8839d556ee9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0b1bbeae026859540c62247156b8839d556ee9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0b1bbeae026859540c62247156b8839d556ee9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0b1bbeae026859540c62247156b8839d556ee9a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "697ed8c8279a1ac915b71db06a03f9ed85b9f334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/697ed8c8279a1ac915b71db06a03f9ed85b9f334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/697ed8c8279a1ac915b71db06a03f9ed85b9f334"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 62,
      "deletions": 63
    },
    "files": [
      {
        "sha": "73c225199f7dfaa57f65df2813687fc011884d86",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 62,
        "deletions": 63,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0b1bbeae026859540c62247156b8839d556ee9a/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0b1bbeae026859540c62247156b8839d556ee9a/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=e0b1bbeae026859540c62247156b8839d556ee9a",
        "patch": "@@ -40,15 +40,6 @@\n     ENABLE_UTILS=0\n if 'ENABLE_ZMQ' not in vars():\n     ENABLE_ZMQ=0\n-    \n-# python-zmq may not be installed. Handle this gracefully and with some helpful info\n-if ENABLE_ZMQ:\n-    try:\n-        import zmq\n-    except ImportError:\n-        print(\"WARNING: \\\"import zmq\\\" failed. Setting ENABLE_ZMQ=0. \" \\\n-            \"To run zmq tests, see dependency info in /qa/README.md.\")\n-        ENABLE_ZMQ=0\n \n ENABLE_COVERAGE=0\n \n@@ -76,11 +67,25 @@\n if \"BITCOINCLI\" not in os.environ:\n     os.environ[\"BITCOINCLI\"] = buildDir + '/src/bitcoin-cli' + EXEEXT\n \n-#Disable Windows tests by default\n if EXEEXT == \".exe\" and \"-win\" not in opts:\n-    print \"Win tests currently disabled.  Use -win option to enable\"\n+    # https://github.com/bitcoin/bitcoin/commit/d52802551752140cf41f0d9a225a43e84404d3e9\n+    # https://github.com/bitcoin/bitcoin/pull/5677#issuecomment-136646964\n+    print \"Win tests currently disabled by default.  Use -win option to enable\"\n+    sys.exit(0)\n+\n+if not (ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n+    print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n     sys.exit(0)\n \n+# python-zmq may not be installed. Handle this gracefully and with some helpful info\n+if ENABLE_ZMQ:\n+    try:\n+        import zmq\n+    except ImportError as e:\n+        print(\"ERROR: \\\"import zmq\\\" failed. Set ENABLE_ZMQ=0 or \" \\\n+            \"to run zmq tests, see dependency info in /qa/README.md.\")\n+        raise e\n+\n #Tests\n testScripts = [\n     'bip68-112-113-p2p.py',\n@@ -118,6 +123,9 @@\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n ]\n+if ENABLE_ZMQ:\n+    testScripts.append('zmq_test.py')\n+\n testScriptsExt = [\n     'bip9-softforks.py',\n     'bip65-cltv.py',\n@@ -141,65 +149,56 @@\n     'replace-by-fee.py',\n ]\n \n-#Enable ZMQ tests\n-if ENABLE_ZMQ == 1:\n-    testScripts.append('zmq_test.py')\n-\n-\n def runtests():\n     coverage = None\n \n     if ENABLE_COVERAGE:\n         coverage = RPCCoverage()\n         print(\"Initializing coverage directory at %s\\n\" % coverage.dir)\n \n-    if(ENABLE_WALLET == 1 and ENABLE_UTILS == 1 and ENABLE_BITCOIND == 1):\n-        rpcTestDir = buildDir + '/qa/rpc-tests/'\n-        run_extended = '-extended' in opts\n-        cov_flag = coverage.flag if coverage else ''\n-        flags = \" --srcdir %s/src %s %s\" % (buildDir, cov_flag, passOn)\n-\n-        #Run Tests\n-        for i in range(len(testScripts)):\n-            if (len(opts) == 0\n-                    or (len(opts) == 1 and \"-win\" in opts )\n-                    or run_extended\n-                    or testScripts[i] in opts\n-                    or re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n-\n-                print(\"Running testscript %s%s%s ...\" % (bold[1], testScripts[i], bold[0]))\n-                time0 = time.time()\n-                subprocess.check_call(\n-                    rpcTestDir + testScripts[i] + flags, shell=True)\n-                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n-\n-                # exit if help is called so we print just one set of\n-                # instructions\n-                p = re.compile(\" -h| --help\")\n-                if p.match(passOn):\n-                    sys.exit(0)\n-\n-        # Run Extended Tests\n-        for i in range(len(testScriptsExt)):\n-            if (run_extended or testScriptsExt[i] in opts\n-                    or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n-\n-                print(\n-                    \"Running 2nd level testscript \"\n-                    + \"%s%s%s ...\" % (bold[1], testScriptsExt[i], bold[0]))\n-                time0 = time.time()\n-                subprocess.check_call(\n-                    rpcTestDir + testScriptsExt[i] + flags, shell=True)\n-                print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n-\n-        if coverage:\n-            coverage.report_rpc_coverage()\n-\n-            print(\"Cleaning up coverage data\")\n-            coverage.cleanup()\n-\n-    else:\n-        print \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\"\n+    rpcTestDir = buildDir + '/qa/rpc-tests/'\n+    run_extended = '-extended' in opts\n+    cov_flag = coverage.flag if coverage else ''\n+    flags = \" --srcdir %s/src %s %s\" % (buildDir, cov_flag, passOn)\n+\n+    #Run Tests\n+    for i in range(len(testScripts)):\n+        if (len(opts) == 0\n+                or (len(opts) == 1 and \"-win\" in opts )\n+                or run_extended\n+                or testScripts[i] in opts\n+                or re.sub(\".py$\", \"\", testScripts[i]) in opts ):\n+\n+            print(\"Running testscript %s%s%s ...\" % (bold[1], testScripts[i], bold[0]))\n+            time0 = time.time()\n+            subprocess.check_call(\n+                rpcTestDir + testScripts[i] + flags, shell=True)\n+            print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n+\n+            # exit if help is called so we print just one set of\n+            # instructions\n+            p = re.compile(\" -h| --help\")\n+            if p.match(passOn):\n+                sys.exit(0)\n+\n+    # Run Extended Tests\n+    for i in range(len(testScriptsExt)):\n+        if (run_extended or testScriptsExt[i] in opts\n+                or re.sub(\".py$\", \"\", testScriptsExt[i]) in opts):\n+\n+            print(\n+                \"Running 2nd level testscript \"\n+                + \"%s%s%s ...\" % (bold[1], testScriptsExt[i], bold[0]))\n+            time0 = time.time()\n+            subprocess.check_call(\n+                rpcTestDir + testScriptsExt[i] + flags, shell=True)\n+            print(\"Duration: %s s\\n\" % (int(time.time() - time0)))\n+\n+    if coverage:\n+        coverage.report_rpc_coverage()\n+\n+        print(\"Cleaning up coverage data\")\n+        coverage.cleanup()\n \n \n class RPCCoverage(object):"
      }
    ]
  },
  {
    "sha": "7a8348994bb7b86a0445f8e333b3b1dc27252753",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTgzNDg5OTRiYjdiODZhMDQ0NWY4ZTMzM2IzYjFkYzI3MjUyNzUz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-04-19T20:18:38Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:20:33Z"
      },
      "message": "Tests: Fix deserialization of reject messages\n\nGithub-Pull: #7912\nRebased-From: 807fa47a1e5c9f072d7dbf549bf17f66c47dbf46",
      "tree": {
        "sha": "a8743d47630b11ae04e6a8c73ab859baba16fdc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a8743d47630b11ae04e6a8c73ab859baba16fdc2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a8348994bb7b86a0445f8e333b3b1dc27252753",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8348994bb7b86a0445f8e333b3b1dc27252753",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8348994bb7b86a0445f8e333b3b1dc27252753",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8348994bb7b86a0445f8e333b3b1dc27252753/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0b1bbeae026859540c62247156b8839d556ee9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0b1bbeae026859540c62247156b8839d556ee9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0b1bbeae026859540c62247156b8839d556ee9a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "ece5a15589d4fce1ac39b8c5158cb1e4c31692a1",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a8348994bb7b86a0445f8e333b3b1dc27252753/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a8348994bb7b86a0445f8e333b3b1dc27252753/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=7a8348994bb7b86a0445f8e333b3b1dc27252753",
        "patch": "@@ -983,6 +983,7 @@ def __repr__(self):\n \n class msg_reject(object):\n     command = b\"reject\"\n+    REJECT_MALFORMED = 1\n \n     def __init__(self):\n         self.message = b\"\"\n@@ -994,14 +995,16 @@ def deserialize(self, f):\n         self.message = deser_string(f)\n         self.code = struct.unpack(\"<B\", f.read(1))[0]\n         self.reason = deser_string(f)\n-        if (self.message == \"block\" or self.message == \"tx\"):\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n             self.data = deser_uint256(f)\n \n     def serialize(self):\n         r = ser_string(self.message)\n         r += struct.pack(\"<B\", self.code)\n         r += ser_string(self.reason)\n-        if (self.message == \"block\" or self.message == \"tx\"):\n+        if (self.code != self.REJECT_MALFORMED and\n+                (self.message == b\"block\" or self.message == b\"tx\")):\n             r += ser_uint256(self.data)\n         return r\n "
      }
    ]
  },
  {
    "sha": "493b89e959f58939fd683cb0a6f1a58287543308",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OTNiODllOTU5ZjU4OTM5ZmQ2ODNjYjBhNmYxYTU4Mjg3NTQzMzA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-23T12:35:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:22:41Z"
      },
      "message": "[qa] test_framework: Properly print exceptions and assert empty dict\n\nGithub-Pull: #7951\nRebased-From: 5555528b47b7d33a5b963c076e6bb09ee25931b5 fada064f67302502f6b51d9d22927381c2707cbb",
      "tree": {
        "sha": "5ac1f30fca79ff471a745e90ca9083a7440e4654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ac1f30fca79ff471a745e90ca9083a7440e4654"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/493b89e959f58939fd683cb0a6f1a58287543308",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/493b89e959f58939fd683cb0a6f1a58287543308",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/493b89e959f58939fd683cb0a6f1a58287543308",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/493b89e959f58939fd683cb0a6f1a58287543308/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a8348994bb7b86a0445f8e333b3b1dc27252753",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a8348994bb7b86a0445f8e333b3b1dc27252753",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a8348994bb7b86a0445f8e333b3b1dc27252753"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1dd1f707eedeffc9495d48e1118a9bd423bd1318",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/493b89e959f58939fd683cb0a6f1a58287543308/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/493b89e959f58939fd683cb0a6f1a58287543308/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=493b89e959f58939fd683cb0a6f1a58287543308",
        "patch": "@@ -93,7 +93,7 @@ def deser_uint256(f):\n \n \n def ser_uint256(u):\n-    rs = \"\"\n+    rs = b\"\"\n     for i in xrange(8):\n         rs += struct.pack(\"<I\", u & 0xFFFFFFFFL)\n         u >>= 32\n@@ -191,7 +191,7 @@ def deser_string_vector(f):\n \n \n def ser_string_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n@@ -624,7 +624,7 @@ def deserialize(self, f):\n         self.vchSig = deser_string(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += ser_string(self.vchMsg)\n         r += ser_string(self.vchSig)\n         return r\n@@ -988,7 +988,7 @@ class msg_reject(object):\n     def __init__(self):\n         self.message = b\"\"\n         self.code = 0\n-        self.reason = \"\"\n+        self.reason = b\"\"\n         self.data = 0L\n \n     def deserialize(self, f):"
      },
      {
        "sha": "0ac7b8a27e66d847ea43964fb4c226fb5b070e9f",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/493b89e959f58939fd683cb0a6f1a58287543308/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/493b89e959f58939fd683cb0a6f1a58287543308/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=493b89e959f58939fd683cb0a6f1a58287543308",
        "patch": "@@ -143,7 +143,7 @@ def main(self):\n             print(\"Assertion failed: \"+ str(e))\n             traceback.print_tb(sys.exc_info()[2])\n         except Exception as e:\n-            print(\"Unexpected exception caught during testing: \"+str(e))\n+            print(\"Unexpected exception caught during testing: \" + repr(e))\n             traceback.print_tb(sys.exc_info()[2])\n \n         if not self.options.noshutdown:"
      },
      {
        "sha": "9bfc42231422dbf2ce98e095903b0f4392e82860",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/493b89e959f58939fd683cb0a6f1a58287543308/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/493b89e959f58939fd683cb0a6f1a58287543308/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=493b89e959f58939fd683cb0a6f1a58287543308",
        "patch": "@@ -488,7 +488,7 @@ def assert_array_result(object_array, to_match, expected, should_not_find = Fals\n         in object_array\n         \"\"\"\n     if should_not_find == True:\n-        expected = { }\n+        assert_equal(expected, { })\n     num_matched = 0\n     for item in object_array:\n         all_match = True"
      }
    ]
  },
  {
    "sha": "c0fe8b5c7df00f94cb7b4fd082edcd234530677a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMGZlOGI1YzdkZjAwZjk0Y2I3YjRmZDA4MmVkY2QyMzQ1MzA2Nzdh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-30T21:16:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:25:22Z"
      },
      "message": "[qa] smartfees: Properly use ordered dict\n\nGithub-Pull: #7980\nRebased-From: fa17f93fbd2889c020849b941a94c5bd8a619a3c 43bbcd075355630544a530f3cc52014edb3787b2",
      "tree": {
        "sha": "4289d4581b9f61953ea77c784b2392b3dc3b68c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4289d4581b9f61953ea77c784b2392b3dc3b68c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c0fe8b5c7df00f94cb7b4fd082edcd234530677a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0fe8b5c7df00f94cb7b4fd082edcd234530677a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c0fe8b5c7df00f94cb7b4fd082edcd234530677a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0fe8b5c7df00f94cb7b4fd082edcd234530677a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "493b89e959f58939fd683cb0a6f1a58287543308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/493b89e959f58939fd683cb0a6f1a58287543308",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/493b89e959f58939fd683cb0a6f1a58287543308"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7239e5a0da825ba088201a292b99c59ed90bb190",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c0fe8b5c7df00f94cb7b4fd082edcd234530677a/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c0fe8b5c7df00f94cb7b4fd082edcd234530677a/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=c0fe8b5c7df00f94cb7b4fd082edcd234530677a",
        "patch": "@@ -7,6 +7,7 @@\n # Test fee estimation code\n #\n \n+from collections import OrderedDict\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n \n@@ -22,7 +23,7 @@\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     '''\n     Create and send a transaction with a random fee.\n-    The transaction pays to a trival P2SH script, and assumes that its inputs\n+    The transaction pays to a trivial P2SH script, and assumes that its inputs\n     are of the same form.\n     The function takes a list of confirmed outputs and unconfirmed outputs\n     and attempts to use the confirmed list first for its inputs.\n@@ -49,10 +50,10 @@ def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee\n         if total_in <= amount + fee:\n             raise RuntimeError(\"Insufficient funds: need %d, have %d\"%(amount+fee, total_in))\n     outputs = {}\n-    outputs[P2SH_1] = total_in - amount - fee\n-    outputs[P2SH_2] = amount\n+    outputs = OrderedDict([(P2SH_1, total_in - amount - fee),\n+                           (P2SH_2, amount)])\n     rawtx = from_node.createrawtransaction(inputs, outputs)\n-    # Createrawtransaction constructions a transaction that is ready to be signed\n+    # createrawtransaction constructs a transaction that is ready to be signed.\n     # These transactions don't need to be signed, but we still have to insert the ScriptSig\n     # that will satisfy the ScriptPubKey.\n     completetx = rawtx[0:10]\n@@ -78,12 +79,10 @@ def split_inputs(from_node, txins, txouts, initial_split = False):\n     '''\n     prevtxout = txins.pop()\n     inputs = []\n-    outputs = {}\n     inputs.append({ \"txid\" : prevtxout[\"txid\"], \"vout\" : prevtxout[\"vout\"] })\n     half_change = satoshi_round(prevtxout[\"amount\"]/2)\n     rem_change = prevtxout[\"amount\"] - half_change  - Decimal(\"0.00001000\")\n-    outputs[P2SH_1] = half_change\n-    outputs[P2SH_2] = rem_change\n+    outputs = OrderedDict([(P2SH_1, half_change), (P2SH_2, rem_change)])\n     rawtx = from_node.createrawtransaction(inputs, outputs)\n     # If this is the initial split we actually need to sign the transaction\n     # Otherwise we just need to insert the property ScriptSig\n@@ -224,7 +223,7 @@ def transact_and_mine(self, numblocks, mining_node):\n             sync_mempools(self.nodes[0:3],.1)\n             mined = mining_node.getblock(mining_node.generate(1)[0],True)[\"tx\"]\n             sync_blocks(self.nodes[0:3],.1)\n-            #update which txouts are confirmed\n+            # update which txouts are confirmed\n             newmem = []\n             for utx in self.memutxo:\n                 if utx[\"txid\"] in mined:"
      }
    ]
  },
  {
    "sha": "dc38a53d56141b7d4cf5b88b91ce7363c7930d39",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYzM4YTUzZDU2MTQxYjdkNGNmNWI4OGI5MWNlNzM2M2M3OTMwZDM5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-01-04T12:54:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-06-09T22:33:26Z"
      },
      "message": "[qa] Move create_tx() to util.py\n\n(cherry picked from commit fa8cd46f39778925eaf2caf812cccd9fb8503368)",
      "tree": {
        "sha": "bf121fdcbc2a86768cfad9a762e6ca38b7d657a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf121fdcbc2a86768cfad9a762e6ca38b7d657a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dc38a53d56141b7d4cf5b88b91ce7363c7930d39",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc38a53d56141b7d4cf5b88b91ce7363c7930d39",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dc38a53d56141b7d4cf5b88b91ce7363c7930d39",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dc38a53d56141b7d4cf5b88b91ce7363c7930d39/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0fe8b5c7df00f94cb7b4fd082edcd234530677a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0fe8b5c7df00f94cb7b4fd082edcd234530677a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0fe8b5c7df00f94cb7b4fd082edcd234530677a"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 8,
      "deletions": 32
    },
    "files": [
      {
        "sha": "1b0d52000494c7b1b77c01e9fc81330867670c68",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "modified",
        "additions": 5,
        "deletions": 13,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc38a53d56141b7d4cf5b88b91ce7363c7930d39/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc38a53d56141b7d4cf5b88b91ce7363c7930d39/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=dc38a53d56141b7d4cf5b88b91ce7363c7930d39",
        "patch": "@@ -25,14 +25,6 @@ def setup_network(self):\n         self.is_network_split = False\n         self.sync_all()\n \n-    def create_tx(self, from_txid, to_address, amount):\n-        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n-        outputs = { to_address : amount }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signresult = self.nodes[0].signrawtransaction(rawtx)\n-        assert_equal(signresult[\"complete\"], True)\n-        return signresult[\"hex\"]\n-\n     def run_test(self):\n         start_count = self.nodes[0].getblockcount()\n \n@@ -52,9 +44,9 @@ def run_test(self):\n         # and make sure the mempool code behaves correctly.\n         b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = self.create_tx(coinbase_txids[1], node1_address, 50)\n-        spend_102_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n-        spend_103_raw = self.create_tx(coinbase_txids[3], node0_address, 50)\n+        spend_101_raw = create_tx(self.nodes[0], coinbase_txids[1], node1_address, 50)\n+        spend_102_raw = create_tx(self.nodes[0], coinbase_txids[2], node0_address, 50)\n+        spend_103_raw = create_tx(self.nodes[0], coinbase_txids[3], node0_address, 50)\n \n         # Create a block-height-locked transaction which will be invalid after reorg\n         timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 50})\n@@ -71,8 +63,8 @@ def run_test(self):\n         assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n-        spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n-        spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n+        spend_102_1_raw = create_tx(self.nodes[0], spend_102_id, node1_address, 50)\n+        spend_103_1_raw = create_tx(self.nodes[0], spend_103_id, node1_address, 50)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)"
      },
      {
        "sha": "60552e77c0728d1fad121e8b8b19b76f02244b15",
        "filename": "qa/rpc-tests/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc38a53d56141b7d4cf5b88b91ce7363c7930d39/qa/rpc-tests/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc38a53d56141b7d4cf5b88b91ce7363c7930d39/qa/rpc-tests/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_resurrect_test.py?ref=dc38a53d56141b7d4cf5b88b91ce7363c7930d39",
        "patch": "@@ -21,14 +21,6 @@ def setup_network(self):\n         self.nodes.append(start_node(0, self.options.tmpdir, args))\n         self.is_network_split = False\n \n-    def create_tx(self, from_txid, to_address, amount):\n-        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n-        outputs = { to_address : amount }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signresult = self.nodes[0].signrawtransaction(rawtx)\n-        assert_equal(signresult[\"complete\"], True)\n-        return signresult[\"hex\"]\n-\n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()\n         # Spend block 1/2/3's coinbase transactions\n@@ -43,13 +35,13 @@ def run_test(self):\n \n         b = [ self.nodes[0].getblockhash(n) for n in range(1, 4) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends1_raw = [ self.create_tx(txid, node0_address, 50) for txid in coinbase_txids ]\n+        spends1_raw = [ create_tx(self.nodes[0], txid, node0_address, 50) for txid in coinbase_txids ]\n         spends1_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends1_raw ]\n \n         blocks = []\n         blocks.extend(self.nodes[0].generate(1))\n \n-        spends2_raw = [ self.create_tx(txid, node0_address, 49.99) for txid in spends1_id ]\n+        spends2_raw = [ create_tx(self.nodes[0], txid, node0_address, 49.99) for txid in spends1_id ]\n         spends2_id = [ self.nodes[0].sendrawtransaction(tx) for tx in spends2_raw ]\n \n         blocks.extend(self.nodes[0].generate(1))"
      },
      {
        "sha": "bf789817c143872b724979ce22418ba78c8ae88f",
        "filename": "qa/rpc-tests/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dc38a53d56141b7d4cf5b88b91ce7363c7930d39/qa/rpc-tests/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dc38a53d56141b7d4cf5b88b91ce7363c7930d39/qa/rpc-tests/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_spendcoinbase.py?ref=dc38a53d56141b7d4cf5b88b91ce7363c7930d39",
        "patch": "@@ -26,14 +26,6 @@ def setup_network(self):\n         self.nodes.append(start_node(0, self.options.tmpdir, args))\n         self.is_network_split = False\n \n-    def create_tx(self, from_txid, to_address, amount):\n-        inputs = [{ \"txid\" : from_txid, \"vout\" : 0}]\n-        outputs = { to_address : amount }\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signresult = self.nodes[0].signrawtransaction(rawtx)\n-        assert_equal(signresult[\"complete\"], True)\n-        return signresult[\"hex\"]\n-\n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()\n         assert_equal(chain_height, 200)\n@@ -44,7 +36,7 @@ def run_test(self):\n         # is too immature to spend.\n         b = [ self.nodes[0].getblockhash(n) for n in range(101, 103) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spends_raw = [ self.create_tx(txid, node0_address, 50) for txid in coinbase_txids ]\n+        spends_raw = [ create_tx(self.nodes[0], txid, node0_address, 50) for txid in coinbase_txids ]\n \n         spend_101_id = self.nodes[0].sendrawtransaction(spends_raw[0])\n "
      }
    ]
  }
]