[
  {
    "sha": "a49503402b6bc21e3878e151c07529941d36aed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDk1MDM0MDJiNmJjMjFlMzg3OGUxNTFjMDc1Mjk5NDFkMzZhZWQw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-05-15T04:21:11Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-06-20T15:02:00Z"
      },
      "message": "Make and get the multisig redeemscript and destination in one function instead of two\n\nInstead of creating a redeemScript with CreateMultisigRedeemscript and\nthen getting the destination with AddAndGetDestinationForScript, do\nboth in the same function.\n\nCreateMultisigRedeemscript is changed to AddAndGetMultisigDestination.\nIt creates the redeemScript and returns it via an output parameter. Then\nit calls AddAndGetDestinationForScript to add the destination to the\nkeystore and get the proper destination.\n\nThis allows us to inspect the public keys in the redeemScript before creating\nthe destination so that the correct destination is used when uncompressed\npubkeys are in the multisig.",
      "tree": {
        "sha": "5cd120a2b03b9335450ef8799b380aa574860e51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cd120a2b03b9335450ef8799b380aa574860e51"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49503402b6bc21e3878e151c07529941d36aed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49503402b6bc21e3878e151c07529941d36aed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a49503402b6bc21e3878e151c07529941d36aed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49503402b6bc21e3878e151c07529941d36aed0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65526fc8666fef35ef908dbc225f706bef642c7e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65526fc8666fef35ef908dbc225f706bef642c7e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65526fc8666fef35ef908dbc225f706bef642c7e"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 53,
      "deletions": 12
    },
    "files": [
      {
        "sha": "5ecf734210b1858220a0ad7ba4d342f80a3210fb",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49503402b6bc21e3878e151c07529941d36aed0/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49503402b6bc21e3878e151c07529941d36aed0/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=a49503402b6bc21e3878e151c07529941d36aed0",
        "patch": "@@ -130,9 +130,9 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    const CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n     CBasicKeyStore keystore;\n-    const CTxDestination dest = AddAndGetDestinationForScript(keystore, inner, output_type);\n+    CScript inner;\n+    const CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, keystore, inner);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"address\", EncodeDestination(dest));"
      },
      {
        "sha": "4642cf16b1fcb1b874cb2c77e3b5db0b06dbddeb",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49503402b6bc21e3878e151c07529941d36aed0/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49503402b6bc21e3878e151c07529941d36aed0/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=a49503402b6bc21e3878e151c07529941d36aed0",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <key_io.h>\n #include <keystore.h>\n+#include <outputtype.h>\n #include <rpc/util.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n@@ -150,8 +151,8 @@ CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in)\n     return vchPubKey;\n }\n \n-// Creates a multisig redeemscript from a given list of public keys and number required.\n-CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys)\n+// Creates a multisig address from a given list of public keys, number of signatures required, and the address type\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out)\n {\n     // Gather public keys\n     if (required < 1) {\n@@ -164,13 +165,24 @@ CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Number of keys involved in the multisignature address creation > 16\\nReduce the number\");\n     }\n \n-    CScript result = GetScriptForMultisig(required, pubkeys);\n+    script_out = GetScriptForMultisig(required, pubkeys);\n \n-    if (result.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, (strprintf(\"redeemScript exceeds size limit: %d > %d\", result.size(), MAX_SCRIPT_ELEMENT_SIZE)));\n+    if (script_out.size() > MAX_SCRIPT_ELEMENT_SIZE) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, (strprintf(\"redeemScript exceeds size limit: %d > %d\", script_out.size(), MAX_SCRIPT_ELEMENT_SIZE)));\n     }\n \n-    return result;\n+    // Check if any keys are uncompressed. If so, the type is legacy\n+    for (const CPubKey& pk : pubkeys) {\n+        if (!pk.IsCompressed()) {\n+            type = OutputType::LEGACY;\n+            break;\n+        }\n+    }\n+\n+    // Make the address\n+    CTxDestination dest = AddAndGetDestinationForScript(keystore, script_out, type);\n+\n+    return dest;\n }\n \n class DescribeAddressVisitor : public boost::static_visitor<UniValue>"
      },
      {
        "sha": "0eb2fef5c34ff56074aed581b63dba22102650ba",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49503402b6bc21e3878e151c07529941d36aed0/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49503402b6bc21e3878e151c07529941d36aed0/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=a49503402b6bc21e3878e151c07529941d36aed0",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_RPC_UTIL_H\n \n #include <node/transaction.h>\n+#include <outputtype.h>\n #include <pubkey.h>\n #include <rpc/protocol.h>\n #include <script/standard.h>\n@@ -70,7 +71,7 @@ extern std::string HelpExampleRpc(const std::string& methodname, const std::stri\n \n CPubKey HexToPubKey(const std::string& hex_in);\n CPubKey AddrToPubKey(CKeyStore* const keystore, const std::string& addr_in);\n-CScript CreateMultisigRedeemscript(const int required, const std::vector<CPubKey>& pubkeys);\n+CTxDestination AddAndGetMultisigDestination(const int required, const std::vector<CPubKey>& pubkeys, OutputType type, CKeyStore& keystore, CScript& script_out);\n \n UniValue DescribeAddress(const CTxDestination& dest);\n "
      },
      {
        "sha": "69e8f0b16c2d90b5ddb636cf6aef55b5fd118c1c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49503402b6bc21e3878e151c07529941d36aed0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49503402b6bc21e3878e151c07529941d36aed0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a49503402b6bc21e3878e151c07529941d36aed0",
        "patch": "@@ -1023,8 +1023,8 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = CreateMultisigRedeemscript(required, pubkeys);\n-    CTxDestination dest = AddAndGetDestinationForScript(*pwallet, inner, output_type);\n+    CScript inner;\n+    CTxDestination dest = AddAndGetMultisigDestination(required, pubkeys, output_type, *pwallet, inner);\n     pwallet->SetAddressBook(dest, label, \"send\");\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "58010f7c2e69ae81e40a3f00166e026f7653d058",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 29,
        "deletions": 1,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49503402b6bc21e3878e151c07529941d36aed0/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49503402b6bc21e3878e151c07529941d36aed0/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=a49503402b6bc21e3878e151c07529941d36aed0",
        "patch": "@@ -7,9 +7,13 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n+    assert_equal,\n )\n-import decimal\n+from test_framework.key import ECPubKey\n \n+import binascii\n+import decimal\n+import itertools\n \n class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -44,6 +48,30 @@ def run_test(self):\n \n         self.checkbalances()\n \n+        # Test mixed compressed and uncompressed pubkeys\n+        self.log.info('Mixed compressed and uncompressed multisigs are not allowed')\n+        pk0 = node0.getaddressinfo(node0.getnewaddress())['pubkey']\n+        pk1 = node1.getaddressinfo(node1.getnewaddress())['pubkey']\n+        pk2 = node2.getaddressinfo(node2.getnewaddress())['pubkey']\n+\n+        # decompress pk2\n+        pk_obj = ECPubKey()\n+        pk_obj.set(binascii.unhexlify(pk2))\n+        pk_obj.compressed = False\n+        pk2 = binascii.hexlify(pk_obj.get_bytes()).decode()\n+\n+        # Check all permutations of keys because order matters apparently\n+        for keys in itertools.permutations([pk0, pk1, pk2]):\n+            # Results should be the same as this legacy one\n+            legacy_addr = node0.createmultisig(2, keys, 'legacy')['address']\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'legacy')['address'])\n+\n+            # Generate addresses with the segwit types. These should all make legacy addresses\n+            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'bech32')['address'])\n+            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'p2sh-segwit')['address'])\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'bech32')['address'])\n+            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'p2sh-segwit')['address'])\n+\n     def check_addmultisigaddress_errors(self):\n         self.log.info('Check that addmultisigaddress fails when the private keys are missing')\n         addresses = [self.nodes[1].getnewaddress(address_type='legacy') for _ in range(2)]"
      }
    ]
  }
]