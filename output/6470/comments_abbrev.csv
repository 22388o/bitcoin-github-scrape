laanwj,2015-07-24T07:56:29Z,"re: GetRand slowness, wouldn't insecure_rand() be good enough here?\nIf you need both fast and cryptographic randomness you'd have to wait for #5885\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124409428,124409428,
sipa,2015-07-24T17:53:58Z,I like the approach; I'll review the code in detail soon.\n,https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124598997,124598997,
dgenr8,2015-07-25T16:26:24Z,"The idea that a transaction must be ""paid for"" when evicted by an unrelated transaction is mistaken.  It creates zero incentive for the evicted author to pay more fees in the future.  He got what he wanted -- his tx was relayed.\n\nIf the decision does not affect the cost, the cost should not affect the decision.\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124859207,124859207,
sipa,2015-07-25T16:35:41Z,"The assumption is that when a transaction is evicted, it won't be mined, thus it won't have paid anything at all.\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124859721,124859721,
dgenr8,2015-07-25T16:55:29Z,"@sipa In that case, it also received no benefit.\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124861731,124861731,
sipa,2015-07-25T17:09:33Z,"It got relayed, which has network costs.\n\nThe purpose of this payment requirement is to prevent someone from spamming the network by constantly replacing the lowest priority one, and only paying once.\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124862722,124862722,
dgenr8,2015-07-25T17:24:09Z,"For DoS protection, all that's needed is (new fee/kb) - (old fee/kb) >= (minimum fee/kb).\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-124863335,124863335,
sipa,2015-07-27T14:36:04Z,"@dgenr8 No, that would let a small transaction erase a large transaction, making space for several new transactions to be cheaply relayed.\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125227514,125227514,
morcos,2015-07-27T15:40:56Z,"@jtimon I'd like to add some sanity checking for the command line arguments that are passed in.  I assume that should go in init.cpp?  Where is the appropriate place for me to store variables such as hard cap, mempool expiry time, etc..  so they aren't recalculated every time.   \n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125249073,125249073,
sipa,2015-07-27T16:28:15Z,Needs rebase.\n,https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125264497,125264497,
dgenr8,2015-07-27T18:31:33Z,"> that would let a small transaction erase a large transaction, making space for several new transactions to be cheaply relayed\n\n@sipa That is good.  You don't want a 500KB spam-monster tx paying (minimum fee/kb) to require a regular-sized tx to pay 1001 \* (minimum fee/kb) to dislodge it.  Bad guy could get 1000 little txes relayed anyway by sending them first -- the pay-for-evicted rule create",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125298357,125298357,
sdaftuar,2015-07-27T18:37:51Z,"@dgenr8 While that is a potential problem for optimizing what gets into the mempool, note that this PR is attempting to provide a solution so that many small transactions can be used to evict large transaction packages.\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125300493,125300493,
morcos,2015-07-27T19:51:47Z,"@dgenr8 This conversation has been spread over a couple of PR's and IRC, so I apologize if I'm repeating a prior argument, but I think it would be good to explain the reasoning behind the logic in this pull.\n\nPrior to limiting the mempool (or having RBF implemented), we had protection against bandwidth spamming attacks by requiring all transactions that were relayed to be accepted into the mempo",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125324736,125324736,
dgenr8,2015-07-28T00:43:02Z,"@morcos Thanks.  I feel the capping part of this pull is too complex, and could be simplifed (a little) by removing the ""pay for eviction"" idea, which has no good incentive effect.\n\nThe person paid is the miner, who doesn't need to be paid ~double to mine the evictor tx.  The person who pays is the unlucky evictor.  Evictee gets a chance at cheap fees, and others who come after eviction could pa",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125392790,125392790,
morcos,2015-07-28T21:23:32Z,"I rebased, addressed many of the comments and did some various cleanups in place.\n\nPlease note I changed the defaults for `-maxmempool` and `-mempoolexpiry`  to 500MB and 1 week respectively.  \n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125757726,125757726,
jtimon,2015-07-29T10:34:04Z,"@morcos everybody is creating new globals in main, but I hate that. I would at the very least move them to globals/server ot something, but whatever...\nIt would be much nicer if you make them an attribute of an existing class that is used as a global (say, mempool or globalPolicy). Here's a commit in which you can see what I would like to move towards: https://github.com/jtimon/bitcoin/commit/5a4",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125915125,125915125,
morcos,2015-07-29T14:23:33Z,@jtimon OK thanks.  Yes I'm going to leave them as locals for now and if we end up adding sanity checking it can just be done separately in init.cpp for now.  But I do like your idea of moving them to a policy class.  It puts all the logic of what are the reasonable parameters for these arguments in the same place..\n,https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-125968349,125968349,
ABISprotocol,2015-07-30T02:35:35Z,"I have a few questions,\n\n1)  I noted that @morcos stated that he ""removed the floating relay fee commit,"" but is there another commit added that provides some (roughly) equivalent function?   It strikes me that having a floating relay fee added has a necessary dynamic effect ~ the purpose of the floating relay, as discussed in #6455, is to dampen the effect of the limited memory pool, and make i",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-126163605,126163605,
sipa,2015-07-30T13:05:12Z,Testing & benchmarking.\n,https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-126316075,126316075,
morcos,2015-07-30T16:31:57Z,"@ABISprotocol, I still believe we need a floating relay fee.  I just think it needs to act over a much longer time horizon and be less abusable than the one implemented in the commit I removed.  \n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-126394733,126394733,
ABISprotocol,2015-08-03T07:44:50Z,"@morcos @sipa In what pull request or issue should I look for the floating relay fee, or is that TBD?\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-127150364,127150364,
morcos,2015-08-03T15:32:54Z,"@ABISprotocol This was the commit I removed, https://github.com/sipa/bitcoin/commit/6498673f99da9976df170052648ff2f0026210d2.  But I think the correct answer is TBD.\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-127278779,127278779,
ABISprotocol,2015-08-05T01:01:22Z,"@morcos @sipa Please refer to the number of the pull request for the the floating relay fee in this one at such time when it is created so that the discussion / progress on this can be followed.  So far I have been following this as follows:\n#6201\n#6455\nI'm assuming there will be another pullreq (with a floating relay fee) TBD, my request is that when it is created, please refer to the number o",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-127808520,127808520,
morcos,2015-08-05T15:54:16Z,Rebased now that #6498 has been merged \n,https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-128047761,128047761,
morcos,2015-08-14T19:03:03Z,Rebased and squashed various cleanups and small changes into the last commit.\n,https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-131210519,131210519,
morcos,2015-09-02T17:20:35Z,"Closing in lieu of #6557, will reopen if we decide for some reason we want the mempool limiting without the descendant package tracking...\n",https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-137177406,137177406,
ABISprotocol,2015-09-03T06:08:20Z,I'm beginning to wonder just how far down the rabbit hole this all goes.  And what happened to the floating relay fee bit?\n,https://github.com/bitcoin/bitcoin/pull/6470#issuecomment-137346005,137346005,
jtimon,2015-07-23T23:16:33Z,"Can't `- GetArg(""-mempoolexpiry"", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60` be inside pool.Expire?, it may become an attribute of the txmempool in the future or something.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35382668,35382668,src/main.cpp
jtimon,2015-07-23T23:18:33Z,s/mempool/pool don't use the global when you have the parameter\n,https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35382823,35382823,src/main.cpp
jtimon,2015-07-23T23:29:37Z,Can't all this code around pool.addUnchecked be moved to a new mempool method that internally calls pool.addUnchecked ?\nYou could go further. stagedelete and nFeesDeleted could just be ctxmempool attributes so that you don't need to pass it to pool.RemoveStagedAndAddUnchecked (or whatever you want to call the method) and pool.StageTrimToSize (or whatever you want to call the method)\n,https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35383584,35383584,src/main.cpp
jtimon,2015-07-23T23:51:10Z,"Can't all this new code be part of  mempool.StageTrimToSize ?\nIn fact, I would go further and take anything that depends on nFeesDeleted to txmempool as well (including `csFreeLimiter` `GetBoolArg(""-relaypriority"", true)` and `GetMinRelayFee`).\nI would also move https://github.com/bitcoin/bitcoin/blob/master/src/main.cpp#L785 there and have all mempool-replacement-related things in one place: tx",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35384695,35384695,src/main.cpp
sipa,2015-07-27T14:39:06Z,"I would prefer not doing that, and keeping CTxMempool as much as possible a dumb data structure - the decisions about what happens to it (policy?) should stay out of it, IMHO.\n\nEDIT: We're already failing at that pretty badly anyway, it seems, with the feerate index and the trim code inside CTxMempool. Too bad, but disregard this comment.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35542402,35542402,src/main.cpp
sipa,2015-07-27T14:43:31Z,"@jtimon Let's first find a solution to the problem at hand.\n\nCode movement that goes into the master branch conflicts with everything, so complicates changes that we want in backports too.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35542959,35542959,src/main.cpp
sipa,2015-07-27T14:50:16Z,Agree.\n,https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35543788,35543788,src/main.cpp
sipa,2015-07-27T14:53:56Z,"Storing attributes inside CTxMempool just to avoid passing them around seems ugly. It would be incompatible with some multithreaded modifications, for example.\n\nA cleaner way to do this is having a separate TxMempoolStagedChange class for example that is calculated from an add/delete, kept by AcceptToMemoryPool during validation, and finally applied to the mempool or thrown away.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35544286,35544286,src/main.cpp
sipa,2015-07-27T14:55:36Z,Please use { } around the then block.\n,https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35544529,35544529,src/main.cpp
sipa,2015-07-27T15:08:58Z,"This comment is technically no longer true since the majority of transactions are being skipped. Maybe the code should be removed altogether now, or does it still offer a benefit? In any case, the comment needs addressing.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35546403,35546403,src/txmempool.cpp
sipa,2015-07-27T15:10:35Z,"Comment should say 10, not 32 - or just refer to the failmax variable.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35546588,35546588,src/txmempool.cpp
morcos,2015-07-27T15:20:36Z,"Agree the comment needs changing, but the check is still valuable.  No reason to continue checking further transactions at this point, even if we haven't used up all of our fails.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35547904,35547904,src/txmempool.cpp
sipa,2015-07-27T15:53:11Z,"@morcos If this method call returns false, do we need to wipe stagedelete/nFeesDeleted, or are they guaranteed to be empty/zero?\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35551967,35551967,src/main.cpp
morcos,2015-07-27T16:18:19Z,"@sipa   Neither is the answer.  Perhaps it needs commenting though.  If the transaction is accepted into the reserve space and stagedelete is non-empty then it is both safe and desirable to evict any transactions that were staged.   If the transaction is not accepted into the reserve space, then as before we return failure from ATMP before we have a chance to evict anything.\n\nThe one slight cave",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35554882,35554882,src/main.cpp
sipa,2015-07-27T16:22:57Z,"ACK, understood. That seems fine, but could probably use a comment.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35555411,35555411,src/main.cpp
sipa,2015-07-27T16:25:43Z,"Do you mind turning these into arguments, that get passed from the 2 callsites instead?\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35555690,35555690,src/txmempool.cpp
morcos,2015-07-27T20:18:29Z,"No objection to changing, but just want to understand what the style request is related to this.   All then blocks should have braces or only because the else block is multi-line?  A single-line then block without braces appears as example code in developer-notes.md.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35581287,35581287,src/main.cpp
sipa,2015-07-27T20:25:03Z,"Oh, I thought we changed that. Never mind then.\n\nI personally dislike those, as they easily lead to mistakes when merging\ndifferent patches (see the OSX SSL bug that was likely the result of it),\nbut I shouldn't ask that as long as our notes use it.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35582107,35582107,src/main.cpp
jtimon,2015-07-29T10:03:09Z,"The fact is that braces are not necessary in our clang style. And btw, when they're used, the shouldn't be in the next line but in the same line as the if/for/while. I'm happy changing the style, but that's in clang-format.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35744318,35744318,src/main.cpp
jtimon,2015-07-29T10:37:21Z,"It is just as easy to move things from txmempool to the policy dir than it is from main (if not easier, given that main is always the part with more development conflicts [unrelated things in theory conflict in code there]).\nBut whatever, I guess it will be a new global in main...\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35746508,35746508,src/main.cpp
jtimon,2015-07-29T10:42:40Z,"With or without attributes, this code could be just a single-line call to a method in the pool (for example, a modified version of addUnchecked):\n\n```\n+        // Delete staged transactions to actually make space in mempool\n+        if (!stagedelete.empty()) {\n+            LogPrint(""mempool"", ""Removing %u transactions (%d fees) from the mempool to make space for %s\n"", stagedelete.size(), nFe",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35746831,35746831,src/main.cpp
jtimon,2015-07-29T10:46:25Z,"Ok, moving existing code is one thing. But putting new code in txmempool instead of main doesn't make things harder to backport.\nIt feels like I'm always trying to control main.cpp's diet, but when I look somewhere else everybody gives him candy in high quantity. If we keep doing this, main.cpp is always going to be fat no matter how many things I move out of it.\n",https://github.com/bitcoin/bitcoin/pull/6470#discussion_r35747045,35747045,src/main.cpp
