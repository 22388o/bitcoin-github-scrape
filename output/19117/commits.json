[
  {
    "sha": "985f0d8992348a3029b8d712c055e7f54e17744f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ODVmMGQ4OTkyMzQ4YTMwMjliOGQ3MTJjMDU1ZTdmNTRlMTc3NDRm",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-04T18:33:52Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-05-31T17:39:06Z"
      },
      "message": "RPC: Add getrpcwhitelist method",
      "tree": {
        "sha": "91c62c896996624c3ea3844394c74f1f71f3cc6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91c62c896996624c3ea3844394c74f1f71f3cc6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/985f0d8992348a3029b8d712c055e7f54e17744f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/985f0d8992348a3029b8d712c055e7f54e17744f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/985f0d8992348a3029b8d712c055e7f54e17744f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/985f0d8992348a3029b8d712c055e7f54e17744f/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dec067f5a019fbeea0403efcfc501238a114d095",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dec067f5a019fbeea0403efcfc501238a114d095",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dec067f5a019fbeea0403efcfc501238a114d095"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 117,
      "deletions": 0
    },
    "files": [
      {
        "sha": "148fbfa0557e1c560976494055ddbd6f90bd3ff6",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985f0d8992348a3029b8d712c055e7f54e17744f/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985f0d8992348a3029b8d712c055e7f54e17744f/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=985f0d8992348a3029b8d712c055e7f54e17744f",
        "patch": "@@ -319,3 +319,8 @@ void StopHTTPRPC()\n         httpRPCTimerInterface.reset();\n     }\n }\n+\n+const std::set<std::string>& GetWhitelistedRpcs(const std::string& user_name)\n+{\n+    return g_rpc_whitelist.at(user_name);\n+}"
      },
      {
        "sha": "e63a5dc056b0d624a760586a3f42be81a610be26",
        "filename": "src/httprpc.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985f0d8992348a3029b8d712c055e7f54e17744f/src/httprpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985f0d8992348a3029b8d712c055e7f54e17744f/src/httprpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.h?ref=985f0d8992348a3029b8d712c055e7f54e17744f",
        "patch": "@@ -5,6 +5,9 @@\n #ifndef BITCOIN_HTTPRPC_H\n #define BITCOIN_HTTPRPC_H\n \n+#include <set>\n+#include <string>\n+\n namespace util {\n class Ref;\n } // namespace util\n@@ -33,4 +36,8 @@ void InterruptREST();\n  */\n void StopREST();\n \n+/** Returns a collection of whitelisted RPCs for the given user\n+ */\n+const std::set<std::string>& GetWhitelistedRpcs(const std::string& user_name);\n+\n #endif"
      },
      {
        "sha": "5f3bcdc21d794ad057b24bc6b1344e52abeb039c",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985f0d8992348a3029b8d712c055e7f54e17744f/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985f0d8992348a3029b8d712c055e7f54e17744f/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=985f0d8992348a3029b8d712c055e7f54e17744f",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <rpc/server.h>\n \n+#include <httprpc.h>\n #include <rpc/util.h>\n #include <shutdown.h>\n #include <sync.h>\n@@ -240,12 +241,44 @@ static UniValue getrpcinfo(const JSONRPCRequest& request)\n     return result;\n }\n \n+static UniValue getrpcwhitelist(const JSONRPCRequest& request)\n+{\n+    RPCHelpMan{\"getrpcwhitelist\",\n+                \"\\nReturns whitelisted RPCs for the current user.\\n\",\n+                {},\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::ARR, \"methods\", \"List of RPCs that the user is allowed to call\",\n+                        {\n+                            {RPCResult::Type::STR, \"rpc\", \"rpc command\"},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getrpcwhitelist\", \"\")\n+                + HelpExampleRpc(\"getrpcwhitelist\", \"\")},\n+            }.Check(request);\n+\n+    UniValue whitelisted_rpcs(UniValue::VARR);\n+    const std::set<std::string>& whitelist = GetWhitelistedRpcs(request.authUser);\n+    for (const auto& rpc : whitelist) {\n+        whitelisted_rpcs.push_back(rpc);\n+    }\n+\n+    UniValue result(UniValue::VOBJ);\n+    result.pushKV(\"methods\", whitelisted_rpcs);\n+\n+    return result;\n+}\n+\n // clang-format off\n static const CRPCCommand vRPCCommands[] =\n { //  category              name                      actor (function)         argNames\n   //  --------------------- ------------------------  -----------------------  ----------\n     /* Overall control/query calls */\n     { \"control\",            \"getrpcinfo\",             &getrpcinfo,             {}  },\n+    { \"control\",            \"getrpcwhitelist\",        &getrpcwhitelist,        {}  },\n     { \"control\",            \"help\",                   &help,                   {\"command\"}  },\n     { \"control\",            \"stop\",                   &stop,                   {\"wait\"}  },\n     { \"control\",            \"uptime\",                 &uptime,                 {}  },"
      },
      {
        "sha": "d83d316bbeb30e2bd5d2b955363f6349033becf0",
        "filename": "test/functional/rpc_getrpcwhitelist.py",
        "status": "added",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985f0d8992348a3029b8d712c055e7f54e17744f/test/functional/rpc_getrpcwhitelist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985f0d8992348a3029b8d712c055e7f54e17744f/test/functional/rpc_getrpcwhitelist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getrpcwhitelist.py?ref=985f0d8992348a3029b8d712c055e7f54e17744f",
        "patch": "@@ -0,0 +1,70 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test getrpcwhitelist RPC call.\n+\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    get_datadir_path,\n+    str_to_b64str\n+)\n+import http.client\n+import json\n+import os\n+import urllib.parse\n+\n+def call_rpc(node, settings, rpc):\n+    url = urllib.parse.urlparse(node.url)\n+    headers = {\"Authorization\": \"Basic \" + str_to_b64str('{}:{}'.format(settings[0], settings[2]))}\n+    conn = http.client.HTTPConnection(url.hostname, url.port)\n+    conn.connect()\n+    conn.request('POST', '/', '{\"method\": \"' + rpc + '\"}', headers)\n+    resp = conn.getresponse()\n+    code = resp.status\n+    if code == 200:\n+        json_ret = json.loads(resp.read().decode())\n+    else:\n+        json_ret = {\"result\": None}\n+    conn.close()\n+    return {\"status\": code, \"json\": json_ret['result']}\n+\n+class RPCWhitelistTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 1\n+\n+    def setup_chain(self):\n+        super().setup_chain()\n+        self.settings = [\"dummy\",\n+                         \"4e799db4b65924f4468b1c9ff3a68109$5fcd282dcaf4ae74599934a543626c0a11e7e83ead30f07b182058ead8e85da9\",\n+                         \"dummypwd\",\n+                         \"getbalance,getrpcwhitelist,getwalletinfo\"]\n+        self.settings_forbidden = [\"dummy2\",\n+                        \"f3d319f64b076012f75626c9d895fced$7f55381a24fda02c5de7c18fc377f56fc573149b4d6f83daa9fd584210b51f99\",\n+                        \"dummy2pwd\",\n+                        \"getbalance,getwalletinfo\"]\n+\n+        # declare rpc-whitelisting entries\n+        with open(os.path.join(get_datadir_path(self.options.tmpdir, 0), \"bitcoin.conf\"), 'a', encoding='utf8') as f:\n+            f.write(\"\\nrpcwhitelistdefault=0\\n\")\n+            f.write(\"rpcauth={}:{}\\n\".format(self.settings[0], self.settings[1]))\n+            f.write(\"rpcwhitelist={}:{}\\n\".format(self.settings[0], self.settings[3]))\n+            f.write(\"rpcauth={}:{}\\n\".format(self.settings_forbidden[0], self.settings_forbidden[1]))\n+            f.write(\"rpcwhitelist={}:{}\\n\".format(self.settings_forbidden[0], self.settings_forbidden[3]))\n+\n+    def run_test(self):\n+        self.log.info(\"Test getrpcwhitelist\")\n+        whitelisted = self.settings[3].split(',')\n+\n+        # should return allowed rpcs\n+        result = call_rpc(self.nodes[0], self.settings, 'getrpcwhitelist')\n+        assert_equal(200, result['status'])\n+        assert_equal(result['json']['methods'], whitelisted)\n+        # should fail because user has no rpcwhitelist-rpc entry in bitcoin.conf\n+        result = call_rpc(self.nodes[0], self.settings_forbidden, 'getrpcwhitelist')\n+        assert_equal(result['status'], 403)\n+\n+if __name__ == \"__main__\":\n+    RPCWhitelistTest().main()"
      },
      {
        "sha": "7eef7df969213355d34cc7155832f5abec4f6af9",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985f0d8992348a3029b8d712c055e7f54e17744f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985f0d8992348a3029b8d712c055e7f54e17744f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=985f0d8992348a3029b8d712c055e7f54e17744f",
        "patch": "@@ -149,6 +149,7 @@\n     'rpc_psbt.py --descriptors',\n     'rpc_users.py',\n     'rpc_whitelist.py',\n+    'rpc_getrpcwhitelist.py',\n     'feature_proxy.py',\n     'rpc_signrawtransaction.py',\n     'wallet_groups.py',"
      },
      {
        "sha": "76bf413731f97a95a683e36aff3a5f1f3c1b283c",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/985f0d8992348a3029b8d712c055e7f54e17744f/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/985f0d8992348a3029b8d712c055e7f54e17744f/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=985f0d8992348a3029b8d712c055e7f54e17744f",
        "patch": "@@ -10,6 +10,7 @@ export LC_ALL=C\n \n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n+    \"httprpc -> rpc/server -> httprpc\"\n     \"index/txindex -> validation -> index/txindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\""
      }
    ]
  },
  {
    "sha": "94fad2edec5c7022486c535925a67293373cacf4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGZhZDJlZGVjNWM3MDIyNDg2YzUzNTkyNWE2NzI5MzM3M2NhY2Y0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-05-31T00:23:48Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-05-31T17:39:06Z"
      },
      "message": "RPC: getrpcwhitelist: Return methods as a JSON Object for future expansion to sub-call permissions",
      "tree": {
        "sha": "e4aac86e2f78d86a2e2e0f1c09134348383ee35d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4aac86e2f78d86a2e2e0f1c09134348383ee35d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94fad2edec5c7022486c535925a67293373cacf4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fad2edec5c7022486c535925a67293373cacf4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94fad2edec5c7022486c535925a67293373cacf4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fad2edec5c7022486c535925a67293373cacf4/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "985f0d8992348a3029b8d712c055e7f54e17744f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/985f0d8992348a3029b8d712c055e7f54e17744f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/985f0d8992348a3029b8d712c055e7f54e17744f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "979a162185e2aaf5f34386172096476a7c49ce2b",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94fad2edec5c7022486c535925a67293373cacf4/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94fad2edec5c7022486c535925a67293373cacf4/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=94fad2edec5c7022486c535925a67293373cacf4",
        "patch": "@@ -260,10 +260,10 @@ static UniValue getrpcwhitelist(const JSONRPCRequest& request)\n                 + HelpExampleRpc(\"getrpcwhitelist\", \"\")},\n             }.Check(request);\n \n-    UniValue whitelisted_rpcs(UniValue::VARR);\n+    UniValue whitelisted_rpcs(UniValue::VOBJ);\n     const std::set<std::string>& whitelist = GetWhitelistedRpcs(request.authUser);\n     for (const auto& rpc : whitelist) {\n-        whitelisted_rpcs.push_back(rpc);\n+        whitelisted_rpcs.pushKV(rpc, NullUniValue);\n     }\n \n     UniValue result(UniValue::VOBJ);"
      },
      {
        "sha": "91fa9ce7416a065b2a19cfd7955378f858ed2457",
        "filename": "test/functional/rpc_getrpcwhitelist.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94fad2edec5c7022486c535925a67293373cacf4/test/functional/rpc_getrpcwhitelist.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94fad2edec5c7022486c535925a67293373cacf4/test/functional/rpc_getrpcwhitelist.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getrpcwhitelist.py?ref=94fad2edec5c7022486c535925a67293373cacf4",
        "patch": "@@ -56,7 +56,7 @@ def setup_chain(self):\n \n     def run_test(self):\n         self.log.info(\"Test getrpcwhitelist\")\n-        whitelisted = self.settings[3].split(',')\n+        whitelisted = {method: None for method in self.settings[3].split(',')}\n \n         # should return allowed rpcs\n         result = call_rpc(self.nodes[0], self.settings, 'getrpcwhitelist')"
      }
    ]
  }
]