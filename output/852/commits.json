[
  {
    "sha": "d64e124cf4212a9e5b4607c4f752a0c2921bc308",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjRlMTI0Y2Y0MjEyYTllNWI0NjA3YzRmNzUyYTBjMjkyMWJjMzA4",
    "commit": {
      "author": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2012-02-16T20:08:32Z"
      },
      "committer": {
        "name": "Chris Moore",
        "email": "dooglus@gmail.com",
        "date": "2012-02-16T20:08:58Z"
      },
      "message": "Fix #846.  Allow negative options such as \"nolisten=1\" in bitcoin.conf as well as on the command line.",
      "tree": {
        "sha": "e8a5de135eba5f53f3e226933c45cac01f065e0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8a5de135eba5f53f3e226933c45cac01f065e0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d64e124cf4212a9e5b4607c4f752a0c2921bc308",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d64e124cf4212a9e5b4607c4f752a0c2921bc308",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d64e124cf4212a9e5b4607c4f752a0c2921bc308",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d64e124cf4212a9e5b4607c4f752a0c2921bc308/comments",
    "author": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dooglus",
      "id": 573356,
      "node_id": "MDQ6VXNlcjU3MzM1Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/573356?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dooglus",
      "html_url": "https://github.com/dooglus",
      "followers_url": "https://api.github.com/users/dooglus/followers",
      "following_url": "https://api.github.com/users/dooglus/following{/other_user}",
      "gists_url": "https://api.github.com/users/dooglus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dooglus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dooglus/subscriptions",
      "organizations_url": "https://api.github.com/users/dooglus/orgs",
      "repos_url": "https://api.github.com/users/dooglus/repos",
      "events_url": "https://api.github.com/users/dooglus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dooglus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b7c25e0c1346256be12310264ea5cc4ce7794118",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b7c25e0c1346256be12310264ea5cc4ce7794118",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b7c25e0c1346256be12310264ea5cc4ce7794118"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 21,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f1af91de27939bf1f63c8a9127d41e430fc70c00",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 11,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d64e124cf4212a9e5b4607c4f752a0c2921bc308/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d64e124cf4212a9e5b4607c4f752a0c2921bc308/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d64e124cf4212a9e5b4607c4f752a0c2921bc308",
        "patch": "@@ -454,6 +454,21 @@ vector<unsigned char> ParseHex(const string& str)\n     return ParseHex(str.c_str());\n }\n \n+static void InterpretNegativeSetting(string name, map<string, string>& mapSettingsRet)\n+{\n+    // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n+    if (name.find(\"-no\") == 0)\n+    {\n+        std::string positive(\"-\");\n+        positive.append(name.begin()+3, name.end());\n+        if (mapSettingsRet.count(positive) == 0)\n+        {\n+            bool value = !GetBoolArg(name);\n+            mapSettingsRet[positive] = (value ? \"1\" : \"0\");\n+        }\n+    }\n+}\n+\n void ParseParameters(int argc, const char*const argv[])\n {\n     mapArgs.clear();\n@@ -494,17 +509,8 @@ void ParseParameters(int argc, const char*const argv[])\n             name = singleDash;\n         }\n \n-        //  interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1, as long as -foo not set)\n-        if (name.find(\"-no\") == 0)\n-        {\n-            std::string positive(\"-\");\n-            positive.append(name.begin()+3, name.end());\n-            if (mapArgs.count(positive) == 0)\n-            {\n-                bool value = !GetBoolArg(name);\n-                mapArgs[positive] = (value ? \"1\" : \"0\");\n-            }\n-        }\n+        // interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1) as long as -foo not set\n+        InterpretNegativeSetting(name, mapArgs);\n     }\n }\n \n@@ -920,7 +926,11 @@ void ReadConfigFile(map<string, string>& mapSettingsRet,\n         // Don't overwrite existing settings so command line settings override bitcoin.conf\n         string strKey = string(\"-\") + it->string_key;\n         if (mapSettingsRet.count(strKey) == 0)\n+        {\n             mapSettingsRet[strKey] = it->value[0];\n+            //  interpret nofoo=1 as foo=0 (and nofoo=0 as foo=1) as long as foo not set)\n+            InterpretNegativeSetting(strKey, mapSettingsRet);\n+        }\n         mapMultiSettingsRet[strKey].push_back(it->value[0]);\n     }\n }"
      }
    ]
  }
]