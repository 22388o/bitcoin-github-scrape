DrahtBot,2019-05-31 15:49:40,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16083](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16083.html) ([WIP] transaction fees in getblock by Felix",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-497760360,497760360,
MarcoFalke,2019-05-31 16:05:14,"Concept ACK, but is this complete? It seems that for example `wallet.cpp` should not depend on `net.h` and `txmempool.h` (txs are submitted via the chain interface).",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-497766208,497766208,
dongcarl,2019-05-31 17:55:03,@practicalswift Are you finding these manually or is there a static analysis tool that you use?,https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-497803417,497803417,
practicalswift,2019-06-02 08:29:04,"@MarcoFalke Oh, good catch! My analysis script was a bit too conservative which made it miss the mentioned removal opportunities. I re-ran the analysis and removed quite a few more unused includes. Thanks for noticing! The removals should be complete now: let me know if you find any completeness counterexamples (false negatives) or removals that look incorrect (false positives) in the updated vers",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-498010601,498010601,
promag,2019-06-02 21:31:01,"I think this is great even if incomplete (considering we are in the begin of 0.19). Say goodbye to some fake circular dependencies.\n\nutACK eca9767.",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-498067065,498067065,
fanquake,2019-06-03 13:01:45,"utACK https://github.com/bitcoin/bitcoin/pull/16129/commits/eca97676737174ac6ff775c60e3798c69fb67f4a\n\n If there's a way to automate away this checking (which I think @dongcarl is alluding too), that'd be great.\n\nI probably see a slight speedup during compiling. A few iterations of `make clean; time make -j6`\n\nmaster (c7cfd20a77ce57d200b3b9e5e0dfb0d63818abdc)\n```bash\nreal	0m20.960s",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-498246793,498246793,
MarcoFalke,2019-06-05 08:59:31,@fanquake It seems you are using `ccache`?,https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-498999908,498999908,
MarcoFalke,2019-06-05 09:16:12,"utACK eca97676737174ac6ff775c60e3798c69fb67f4a\n\nGood to see some heavy unused includes such as net and validation go from wallet et al.\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nutACK eca97676737174ac6ff775c60e3798c69fb67f4a\n\nGood to see some heavy unused includes such as net and validatio",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-499005393,499005393,
MarcoFalke,2019-06-05 09:39:52,"Unless there are objections, this will be merged within the next week or so.",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-499013384,499013384,
sdaftuar,2019-06-05 09:51:29,"> Unless there are objections, this will be merged within the next week or so.\n\nNot an objection, but I do think that in general we should consider whether any of the conflicting PRs  should have priority over pure refactor PRs like this.  (I don't have an opinion myself, as I have not reviewed any of the PRs that conflict to see how important they are or how close they are to being merged.)",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-499017365,499017365,
MarcoFalke,2019-06-05 09:56:12,"I did check them and they are all WIP, test-only or refactoring themselves. ",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-499018868,499018868,
MarcoFalke,2019-06-06 14:31:22,"<details><summary>Memory usage before</summary>\n\n| File name | RSS (kB) |\n|--|----|\n| addrdb.cpp | 339432 |\n| addrman.cpp | 308212 |\n| arith_uint256.cpp | 72260 |\n| banman.cpp | 268376 |\n| base58.cpp | 96548 |\n| bech32.cpp | 69608 |\n| blockencodings.cpp | 485452 |\n| blockfilter.cpp | 179224 |\n| bloom.cpp | 163444 |\n| chain.cpp | 185280 |\n| chainparamsbase.cpp | 235344 |",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-499519545,499519545,
MarcoFalke,2019-06-06 14:44:25,"Thanks for working on this. See related issues:\n\n*  Building requires >1GB memory #6658 \n*  Cleanup code by using forward declarations and other methods... #2767 ",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-499525006,499525006,
practicalswift,2019-06-07 14:21:10,@MarcoFalke Thanks for quantifying the results. I want to replicate your numbers: how did you perform the measurements - using `time` or something else? :-),https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-499903864,499903864,
MarcoFalke,2019-06-08 08:13:49,"Yeah, I run gcc through `/usr/bin/time`.",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-500106043,500106043,
practicalswift,2019-06-17 22:31:58,"Post-merge ""before vs after"" statistics for this PR using a tool I've written to measure the impact a PR has on memory usage and compile times. It outputs Markdown tables for easy use here on GitHub :-) \n\nSeems like this PR cut max memory usage (RSS) and total compile time by roughly 2 %.\n\n---\n\nComparing max memory usage (RSS) between old revision 58e291cfad12fa85af87d093acfa7b44702e35",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-502875291,502875291,
practicalswift,2019-06-20 10:15:58,"@fanquake @promag @MarcoFalke As reviewers of this PR you might be interested in reviewing and/or concept ACK:ing the follow-up PR #16238 which does essentially the same thing but for C++ standard library headers and C compatibility headers.\n\nThat PR brings another reduction (-838 MB) in accumulated max memory usage (RSS) during a build :-)",https://github.com/bitcoin/bitcoin/pull/16129#issuecomment-503968830,503968830,
MarcoFalke,2019-06-05 09:06:33,"We always include the corresponding header file into the cpp file, because they are one module. For some reason core_io is the header file for both core_read and core_write...",https://github.com/bitcoin/bitcoin/pull/16129#discussion_r290644894,290644894,src/core_read.cpp
practicalswift,2019-06-06 06:04:45,"Oh, yes of course! Thanks for noticing. The unexpected file naming fooled me. Now fixed by adding a commit -- didn't squash in order to not invalidate the many utACK:s. Let me know if you prefer a squash anyway.",https://github.com/bitcoin/bitcoin/pull/16129#discussion_r291030772,291030772,src/core_read.cpp
