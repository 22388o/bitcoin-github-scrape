[
  {
    "sha": "81f9c68d04c774c59a1f458c69620dc69279880c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MWY5YzY4ZDA0Yzc3NGM1OWExZjQ1OGM2OTYyMGRjNjkyNzk4ODBj",
    "commit": {
      "author": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-02-20T17:56:54Z"
      },
      "committer": {
        "name": "NicolasDorier",
        "email": "nicolas.dorier@gmail.com",
        "date": "2016-03-31T17:18:46Z"
      },
      "message": "Remove STANDARD_LOCKTIME_VERIFY_FLAGS and mempool policy's flags\n\nRemove flags from CheckFinalTx and removeForReorg.\nMTP is always enforced since 0.11.2 in mempool.\nSee release notes: https://bitcoin.org/en/release/v0.11.2",
      "tree": {
        "sha": "339ce98e00b7e04901e3c22edfcec7ebdd68e7f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/339ce98e00b7e04901e3c22edfcec7ebdd68e7f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/81f9c68d04c774c59a1f458c69620dc69279880c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81f9c68d04c774c59a1f458c69620dc69279880c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/81f9c68d04c774c59a1f458c69620dc69279880c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/81f9c68d04c774c59a1f458c69620dc69279880c/comments",
    "author": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "NicolasDorier",
      "id": 3020646,
      "node_id": "MDQ6VXNlcjMwMjA2NDY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3020646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NicolasDorier",
      "html_url": "https://github.com/NicolasDorier",
      "followers_url": "https://api.github.com/users/NicolasDorier/followers",
      "following_url": "https://api.github.com/users/NicolasDorier/following{/other_user}",
      "gists_url": "https://api.github.com/users/NicolasDorier/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NicolasDorier/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NicolasDorier/subscriptions",
      "organizations_url": "https://api.github.com/users/NicolasDorier/orgs",
      "repos_url": "https://api.github.com/users/NicolasDorier/repos",
      "events_url": "https://api.github.com/users/NicolasDorier/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NicolasDorier/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "28ad4d9fc2be102786a8c6c32ebecb466b2a03dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/28ad4d9fc2be102786a8c6c32ebecb466b2a03dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/28ad4d9fc2be102786a8c6c32ebecb466b2a03dd"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 19,
      "deletions": 37
    },
    "files": [
      {
        "sha": "59cc76dc1a9142322466bdff7488e0e22eaaae0a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 18,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81f9c68d04c774c59a1f458c69620dc69279880c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81f9c68d04c774c59a1f458c69620dc69279880c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=81f9c68d04c774c59a1f458c69620dc69279880c",
        "patch": "@@ -681,18 +681,10 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n     return true;\n }\n \n-bool CheckFinalTx(const CTransaction &tx, int flags)\n+bool CheckFinalTx(const CTransaction &tx)\n {\n     AssertLockHeld(cs_main);\n \n-    // By convention a negative value for flags indicates that the\n-    // current network-enforced consensus rules should be used. In\n-    // a future soft-fork scenario that would mean checking which\n-    // rules would be enforced for the next block and setting the\n-    // appropriate flags. At the present time no soft-forks are\n-    // scheduled, so no flags are set.\n-    flags = std::max(flags, 0);\n-\n     // CheckFinalTx() uses chainActive.Height()+1 to evaluate\n     // nLockTime because when IsFinalTx() is called within\n     // CBlock::AcceptBlock(), the height of the block *being*\n@@ -705,10 +697,8 @@ bool CheckFinalTx(const CTransaction &tx, int flags)\n     // less than the median time of the previous block they're contained in.\n     // When the next block is created its previous block will be the current\n     // chain tip, so we use that to calculate the median time passed to\n-    // IsFinalTx() if LOCKTIME_MEDIAN_TIME_PAST is set.\n-    const int64_t nBlockTime = (flags & LOCKTIME_MEDIAN_TIME_PAST)\n-                             ? chainActive.Tip()->GetMedianTimePast()\n-                             : GetAdjustedTime();\n+    // IsFinalTx()\n+    const int64_t nBlockTime = chainActive.Tip()->GetMedianTimePast();\n \n     return IsFinalTx(tx, nBlockHeight, nBlockTime);\n }\n@@ -1013,7 +1003,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet.\n-    if (!CheckFinalTx(tx, STANDARD_LOCKTIME_VERIFY_FLAGS))\n+    if (!CheckFinalTx(tx))\n         return state.DoS(0, false, REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -1113,7 +1103,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         // be mined yet.\n         // Must keep pool.cs for this unless we change CheckSequenceLocks to take a\n         // CoinsViewCache instead of create its own\n-        if (!CheckSequenceLocks(tx, STANDARD_LOCKTIME_VERIFY_FLAGS, &lp))\n+        if (!CheckSequenceLocks(tx, LOCKTIME_VERIFY_SEQUENCE, &lp))\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"non-BIP68-final\");\n         }\n \n@@ -2854,7 +2844,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n     }\n \n     if (fBlocksDisconnected) {\n-        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n         LimitMempoolSize(mempool, GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000, GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60);\n     }\n     mempool.check(pcoinsTip);\n@@ -2965,7 +2955,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state, consensusParams)) {\n-            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n             return false;\n         }\n     }\n@@ -2983,7 +2973,7 @@ bool InvalidateBlock(CValidationState& state, const Consensus::Params& consensus\n     }\n \n     InvalidChainFound(pindex);\n-    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1, STANDARD_LOCKTIME_VERIFY_FLAGS);\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n     return true;\n }\n "
      },
      {
        "sha": "f0ecda2978b9ffef23bf49d7eaa6eb07bb37caec",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81f9c68d04c774c59a1f458c69620dc69279880c/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81f9c68d04c774c59a1f458c69620dc69279880c/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=81f9c68d04c774c59a1f458c69620dc69279880c",
        "patch": "@@ -370,10 +370,8 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime);\n  * Check if transaction will be final in the next block to be created.\n  *\n  * Calls IsFinalTx() with current block height and appropriate block time.\n- *\n- * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain"
      },
      {
        "sha": "9ef0279d1fa0d3cc9f646eccdada5a13e498d0b0",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81f9c68d04c774c59a1f458c69620dc69279880c/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81f9c68d04c774c59a1f458c69620dc69279880c/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=81f9c68d04c774c59a1f458c69620dc69279880c",
        "patch": "@@ -138,9 +138,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n         if (chainparams.MineBlocksOnDemand())\n             pblock->nVersion = GetArg(\"-blockversion\", pblock->nVersion);\n \n-        int64_t nLockTimeCutoff = (STANDARD_LOCKTIME_VERIFY_FLAGS & LOCKTIME_MEDIAN_TIME_PAST)\n-                                ? nMedianTimePast\n-                                : pblock->GetBlockTime();\n+        int64_t nLockTimeCutoff = nMedianTimePast;\n \n         bool fPriorityBlock = nBlockPrioritySize > 0;\n         if (fPriorityBlock) {"
      },
      {
        "sha": "242289478f4add803675db37271a1dca772e0c87",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81f9c68d04c774c59a1f458c69620dc69279880c/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81f9c68d04c774c59a1f458c69620dc69279880c/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=81f9c68d04c774c59a1f458c69620dc69279880c",
        "patch": "@@ -46,10 +46,6 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n \n-/** Used as the flags parameter to sequence and nLocktime checks in non-consensus code. */\n-static const unsigned int STANDARD_LOCKTIME_VERIFY_FLAGS = LOCKTIME_VERIFY_SEQUENCE |\n-                                                           LOCKTIME_MEDIAN_TIME_PAST;\n-\n bool IsStandard(const CScript& scriptPubKey, txnouttype& whichType);\n     /**\n      * Check for standard transaction types"
      },
      {
        "sha": "196a7f45273b54a7c933f093a61a490a9cac092b",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81f9c68d04c774c59a1f458c69620dc69279880c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81f9c68d04c774c59a1f458c69620dc69279880c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=81f9c68d04c774c59a1f458c69620dc69279880c",
        "patch": "@@ -284,7 +284,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // non-final txs in mempool\n     SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n-    int flags = LOCKTIME_VERIFY_SEQUENCE|LOCKTIME_MEDIAN_TIME_PAST;\n+    int flags = LOCKTIME_VERIFY_SEQUENCE;\n     // height map\n     std::vector<int> prevheights;\n \n@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = 0;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(100000000L).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(tx)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n     BOOST_CHECK(SequenceLocks(tx, flags, &prevheights, CreateBlockIndex(chainActive.Tip()->nHeight + 2))); // Sequence locks pass on 2nd block\n \n@@ -313,7 +313,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 2;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(tx)); // Locktime passes\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail\n \n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n@@ -329,7 +329,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.nLockTime = chainActive.Tip()->nHeight + 1;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(tx)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast())); // Locktime passes on 2nd block\n \n@@ -340,7 +340,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = baseheight + 4;\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Time(GetTime()).FromTx(tx));\n-    BOOST_CHECK(!CheckFinalTx(tx, flags)); // Locktime fails\n+    BOOST_CHECK(!CheckFinalTx(tx)); // Locktime fails\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n     BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 2, chainActive.Tip()->GetMedianTimePast() + 1)); // Locktime passes 1 second later\n \n@@ -349,7 +349,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     prevheights[0] = chainActive.Tip()->nHeight + 1;\n     tx.nLockTime = 0;\n     tx.vin[0].nSequence = 0;\n-    BOOST_CHECK(CheckFinalTx(tx, flags)); // Locktime passes\n+    BOOST_CHECK(CheckFinalTx(tx)); // Locktime passes\n     BOOST_CHECK(TestSequenceLocks(tx, flags)); // Sequence locks pass\n     tx.vin[0].nSequence = 1;\n     BOOST_CHECK(!TestSequenceLocks(tx, flags)); // Sequence locks fail"
      },
      {
        "sha": "7feaef7fbccea1ff9829f6775991519102ab19a7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81f9c68d04c774c59a1f458c69620dc69279880c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81f9c68d04c774c59a1f458c69620dc69279880c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=81f9c68d04c774c59a1f458c69620dc69279880c",
        "patch": "@@ -519,7 +519,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n     }\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n@@ -528,7 +528,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n-        if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags, &lp, validLP)) {\n+        if (!CheckFinalTx(tx) || !CheckSequenceLocks(tx, LOCKTIME_VERIFY_SEQUENCE, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n             transactionsToRemove.push_back(tx);"
      },
      {
        "sha": "33655635a20d40b6e4ab01451c64bfdd2c76f3f5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/81f9c68d04c774c59a1f458c69620dc69279880c/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/81f9c68d04c774c59a1f458c69620dc69279880c/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=81f9c68d04c774c59a1f458c69620dc69279880c",
        "patch": "@@ -505,7 +505,7 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n     void removeRecursive(const CTransaction &tx, std::list<CTransaction>& removed);\n-    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);"
      }
    ]
  }
]