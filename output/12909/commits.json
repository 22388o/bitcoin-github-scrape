[
  {
    "sha": "fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWMwZGIwZmY4ZTcyY2EzMGEwZGE4YTY0ZmMxZDExNWRkMmQ2Zjhj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-07T16:12:46Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-04-23T14:49:21Z"
      },
      "message": "wallet: Make fee settings non-static members",
      "tree": {
        "sha": "d12d25bb207858129003ef6c33956f6c8a3fcdcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d12d25bb207858129003ef6c33956f6c8a3fcdcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJa3fJxAAoJEM4rdWl+aaVIVacMAKdD+xuAXbm8t9/AF+SOFP1t\nTRxHiWlnm4w6ydvBJ5qvR+XuPjcxVqChtKAXCRqobWPIlq8OeHeQ/hntv2z+2Azt\nqs2EQx+Jh1Psy+DyYCx6XRy62eeQkwRlcStVgxizus5imD8/cGWA7VyJ82deTHCk\nGUqw6ZyH8gTcTiBCWMbRvDEiWOOzix96TLThTeU5BQbNTgQD9aF7ZAkWiFfPf/5X\nleZsihVYHr6ReIFi+qhNR9BrNsRBx/tQr+6PKKu53O7f0yzw73zLrTuQr108lHs9\n2BaXQ7rXUKrmRcqfdAbabbqF4ZcajSdVwJPKIiaglyJa/k1MQQUSAQLGhGWDdbf7\nhhwX6C8LAV8Q323X2bALhN4wHu9ZEwvZq+F1jExPH0ns6AvELBE5CWHd6u2K51nS\nKYuxugbCw5L/J69xQ01RJZMTByoonb9q07ssOJ0OFB9PdFpwK4BIRQrle17QhuqT\n64d659NRChibk6XVcjTi/crCh2SddxrBsLkGspiKGA==\n=zvUf\n-----END PGP SIGNATURE-----",
        "payload": "tree d12d25bb207858129003ef6c33956f6c8a3fcdcb\nparent d5b2e98250f6b2a8b70d12893fee371f27fc4400\nauthor MarcoFalke <falke.marco@gmail.com> 1523117566 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1524494961 -0400\n\nwallet: Make fee settings non-static members\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d5b2e98250f6b2a8b70d12893fee371f27fc4400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d5b2e98250f6b2a8b70d12893fee371f27fc4400",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d5b2e98250f6b2a8b70d12893fee371f27fc4400"
      }
    ],
    "stats": {
      "total": 373,
      "additions": 186,
      "deletions": 187
    },
    "files": [
      {
        "sha": "55786c807fa2ae17add05b1ac468e0fb46719673",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -191,20 +191,6 @@ class NodeImpl : public Node\n         }\n     }\n     bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n-    unsigned int getTxConfirmTarget() override { CHECK_WALLET(return ::nTxConfirmTarget); }\n-    CAmount getRequiredFee(unsigned int tx_bytes) override { CHECK_WALLET(return GetRequiredFee(tx_bytes)); }\n-    CAmount getMinimumFee(unsigned int tx_bytes,\n-        const CCoinControl& coin_control,\n-        int* returned_target,\n-        FeeReason* reason) override\n-    {\n-        FeeCalculation fee_calc;\n-        CAmount result;\n-        CHECK_WALLET(result = GetMinimumFee(tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc));\n-        if (returned_target) *returned_target = fee_calc.returnedTarget;\n-        if (reason) *reason = fee_calc.reason;\n-        return result;\n-    }\n     CAmount getMaxTxFee() override { return ::maxTxFee; }\n     CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) override\n     {"
      },
      {
        "sha": "3cebe53eb081ab78fb8ce067c94f5771f2ec2322",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -26,11 +26,9 @@ class Coin;\n class RPCTimerInterface;\n class UniValue;\n class proxyType;\n-enum class FeeReason;\n struct CNodeStateStats;\n \n namespace interfaces {\n-\n class Handler;\n class Wallet;\n \n@@ -152,18 +150,6 @@ class Node\n     //! Get network active.\n     virtual bool getNetworkActive() = 0;\n \n-    //! Get tx confirm target.\n-    virtual unsigned int getTxConfirmTarget() = 0;\n-\n-    //! Get required fee.\n-    virtual CAmount getRequiredFee(unsigned int tx_bytes) = 0;\n-\n-    //! Get minimum fee.\n-    virtual CAmount getMinimumFee(unsigned int tx_bytes,\n-        const CCoinControl& coin_control,\n-        int* returned_target,\n-        FeeReason* reason) = 0;\n-\n     //! Get max tx fee.\n     virtual CAmount getMaxTxFee() = 0;\n "
      },
      {
        "sha": "f4dfdae8aef4af8e7bfdd03bc8dde2423797cff4",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -9,6 +9,8 @@\n #include <consensus/validation.h>\n #include <interfaces/handler.h>\n #include <net.h>\n+#include <policy/feerate.h>\n+#include <policy/fees.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <script/ismine.h>\n@@ -20,6 +22,7 @@\n #include <uint256.h>\n #include <validation.h>\n #include <wallet/feebumper.h>\n+#include <wallet/fees.h>\n #include <wallet/wallet.h>\n \n namespace interfaces {\n@@ -403,6 +406,20 @@ class WalletImpl : public Wallet\n         }\n         return result;\n     }\n+    CAmount getRequiredFee(unsigned int tx_bytes) override { return GetRequiredFee(m_wallet, tx_bytes); }\n+    CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) override\n+    {\n+        FeeCalculation fee_calc;\n+        CAmount result;\n+        result = GetMinimumFee(m_wallet, tx_bytes, coin_control, ::mempool, ::feeEstimator, &fee_calc);\n+        if (returned_target) *returned_target = fee_calc.returnedTarget;\n+        if (reason) *reason = fee_calc.reason;\n+        return result;\n+    }\n+    unsigned int getConfirmTarget() override { return m_wallet.m_confirm_target; }\n     bool hdEnabled() override { return m_wallet.IsHDEnabled(); }\n     OutputType getDefaultAddressType() override { return m_wallet.m_default_address_type; }\n     OutputType getDefaultChangeType() override { return m_wallet.m_default_change_type; }"
      },
      {
        "sha": "2a03f6c60a887bd5b150ef30f50244b90f45d02c",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -22,8 +22,10 @@\n #include <vector>\n \n class CCoinControl;\n+class CFeeRate;\n class CKey;\n class CWallet;\n+enum class FeeReason;\n enum class OutputType;\n struct CRecipient;\n \n@@ -218,6 +220,18 @@ class Wallet\n     //! Return wallet transaction output information.\n     virtual std::vector<WalletTxOut> getCoins(const std::vector<COutPoint>& outputs) = 0;\n \n+    //! Get required fee.\n+    virtual CAmount getRequiredFee(unsigned int tx_bytes) = 0;\n+\n+    //! Get minimum fee.\n+    virtual CAmount getMinimumFee(unsigned int tx_bytes,\n+        const CCoinControl& coin_control,\n+        int* returned_target,\n+        FeeReason* reason) = 0;\n+\n+    //! Get tx confirm target.\n+    virtual unsigned int getConfirmTarget() = 0;\n+\n     // Return whether HD enabled.\n     virtual bool hdEnabled() = 0;\n "
      },
      {
        "sha": "b08de27041ae5ab05171340cad2c449e2a5c4a16",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -509,7 +509,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = model->node().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);\n+        nPayFee = model->wallet().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);\n \n         if (nPayAmount > 0)\n         {"
      },
      {
        "sha": "261ab7a948e67e25782030d59aeacee61f0b028f",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -114,7 +114,7 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     if (!settings.contains(\"nSmartFeeSliderPosition\"))\n         settings.setValue(\"nSmartFeeSliderPosition\", 0);\n     if (!settings.contains(\"nTransactionFee\"))\n-        settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_TRANSACTION_FEE);\n+        settings.setValue(\"nTransactionFee\", (qint64)DEFAULT_PAY_TX_FEE);\n     if (!settings.contains(\"fPayOnlyMinFee\"))\n         settings.setValue(\"fPayOnlyMinFee\", false);\n     ui->groupFee->setId(ui->radioSmartFee, 0);\n@@ -175,7 +175,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n-        ui->customFee->setSingleStep(model->node().getRequiredFee(1000));\n+        ui->customFee->setSingleStep(model->wallet().getRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n@@ -193,7 +193,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n             settings.remove(\"nSmartFeeSliderPosition\");\n         }\n         if (settings.value(\"nConfTarget\").toInt() == 0)\n-            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->node().getTxConfirmTarget()));\n+            ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(model->wallet().getConfirmTarget()));\n         else\n             ui->confTargetSelector->setCurrentIndex(getIndexForConfTarget(settings.value(\"nConfTarget\").toInt()));\n     }\n@@ -629,7 +629,7 @@ void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n \n void SendCoinsDialog::setMinimumFee()\n {\n-    ui->customFee->setValue(model->node().getRequiredFee(1000));\n+    ui->customFee->setValue(model->wallet().getRequiredFee(1000));\n }\n \n void SendCoinsDialog::updateFeeSectionControls()\n@@ -661,7 +661,7 @@ void SendCoinsDialog::updateMinFeeLabel()\n {\n     if (model && model->getOptionsModel())\n         ui->checkBoxMinimumFee->setText(tr(\"Pay only the required fee of %1\").arg(\n-            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->node().getRequiredFee(1000)) + \"/kB\")\n+            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), model->wallet().getRequiredFee(1000)) + \"/kB\")\n         );\n }\n \n@@ -675,7 +675,7 @@ void SendCoinsDialog::updateCoinControlState(CCoinControl& ctrl)\n     // Avoid using global defaults when sending money from the GUI\n     // Either custom fee will be used or if not selected, the confirmation target from dropdown box\n     ctrl.m_confirm_target = getConfTargetForIndex(ui->confTargetSelector->currentIndex());\n-    ctrl.signalRbf = ui->optInRBF->isChecked();\n+    ctrl.m_signal_bip125_rbf = ui->optInRBF->isChecked();\n }\n \n void SendCoinsDialog::updateSmartFeeLabel()\n@@ -687,7 +687,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     int returned_target;\n     FeeReason reason;\n-    CFeeRate feeRate = CFeeRate(model->node().getMinimumFee(1000, coin_control, &returned_target, &reason));\n+    CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, coin_control, &returned_target, &reason));\n \n     ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n "
      },
      {
        "sha": "8f30a2a871f8e2725159816ab25264df638b8e57",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -486,7 +486,7 @@ bool WalletModel::saveReceiveRequest(const std::string &sAddress, const int64_t\n bool WalletModel::bumpFee(uint256 hash)\n {\n     CCoinControl coin_control;\n-    coin_control.signalRbf = true;\n+    coin_control.m_signal_bip125_rbf = true;\n     std::vector<std::string> errors;\n     CAmount old_fee;\n     CAmount new_fee;"
      },
      {
        "sha": "2f08162ee49bb6b883a434a6bc8a181ee897a129",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -26,12 +26,12 @@ class CCoinControl\n     bool fAllowWatchOnly;\n     //! Override automatic min/max checks on fee, m_feerate must be set if true\n     bool fOverrideFeeRate;\n-    //! Override the default payTxFee if set\n+    //! Override the wallet's m_pay_tx_fee if set\n     boost::optional<CFeeRate> m_feerate;\n     //! Override the default confirmation target if set\n     boost::optional<unsigned int> m_confirm_target;\n-    //! Signal BIP-125 replace by fee.\n-    bool signalRbf;\n+    //! Override the wallet's m_signal_rbf if set\n+    boost::optional<bool> m_signal_bip125_rbf;\n     //! Fee estimation mode to control arguments to estimateSmartFee\n     FeeEstimateMode m_fee_mode;\n \n@@ -50,7 +50,7 @@ class CCoinControl\n         m_feerate.reset();\n         fOverrideFeeRate = false;\n         m_confirm_target.reset();\n-        signalRbf = fWalletRbf;\n+        m_signal_bip125_rbf.reset();\n         m_fee_mode = FeeEstimateMode::UNSET;\n     }\n "
      },
      {
        "sha": "4d70dde72a173c63b3fcd9ace75eaf2e97e43908",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -134,7 +134,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n                                                                 FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxNewTxSize)), FormatMoney(::incrementalRelayFee.GetFee(maxNewTxSize))));\n             return Result::INVALID_PARAMETER;\n         }\n-        CAmount requiredFee = GetRequiredFee(maxNewTxSize);\n+        CAmount requiredFee = GetRequiredFee(*wallet, maxNewTxSize);\n         if (total_fee < requiredFee) {\n             errors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n@@ -143,7 +143,7 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n         new_fee = total_fee;\n         nNewFeeRate = CFeeRate(total_fee, maxNewTxSize);\n     } else {\n-        new_fee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        new_fee = GetMinimumFee(*wallet, maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(new_fee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate\n@@ -194,14 +194,14 @@ Result CreateTransaction(const CWallet* wallet, const uint256& txid, const CCoin\n \n     // If the output would become dust, discard it (converting the dust to fee)\n     poutput->nValue -= nDelta;\n-    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(::feeEstimator))) {\n+    if (poutput->nValue <= GetDustThreshold(*poutput, GetDiscardRate(*wallet, ::feeEstimator))) {\n         LogPrint(BCLog::RPC, \"Bumping fee and discarding dust output\\n\");\n         new_fee += poutput->nValue;\n         mtx.vout.erase(mtx.vout.begin() + nOutput);\n     }\n \n     // Mark new tx not replaceable, if requested.\n-    if (!coin_control.signalRbf) {\n+    if (!coin_control.m_signal_bip125_rbf.get_value_or(wallet->m_signal_rbf)) {\n         for (auto& input : mtx.vin) {\n             if (input.nSequence < 0xfffffffe) input.nSequence = 0xfffffffe;\n         }"
      },
      {
        "sha": "8d576a6689efa4100c6ecc61b0a9e5fdd6820c0c",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -13,15 +13,15 @@\n #include <wallet/wallet.h>\n \n \n-CAmount GetRequiredFee(unsigned int nTxBytes)\n+CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes)\n {\n-    return std::max(CWallet::minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n+    return GetRequiredFeeRate(wallet).GetFee(nTxBytes);\n }\n \n \n-CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n {\n-    CAmount fee_needed = GetMinimumFeeRate(coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);\n+    CAmount fee_needed = GetMinimumFeeRate(wallet, coin_control, pool, estimator, feeCalc).GetFee(nTxBytes);\n     // Always obey the maximum\n     if (fee_needed > maxTxFee) {\n         fee_needed = maxTxFee;\n@@ -30,48 +30,48 @@ CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, c\n     return fee_needed;\n }\n \n-CFeeRate GetRequiredFeeRate()\n+CFeeRate GetRequiredFeeRate(const CWallet& wallet)\n {\n-    return std::max(CWallet::minTxFee, ::minRelayTxFee);\n+    return std::max(wallet.m_min_fee, ::minRelayTxFee);\n }\n \n-CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc)\n {\n     /* User control of how to calculate fee uses the following parameter precedence:\n        1. coin_control.m_feerate\n        2. coin_control.m_confirm_target\n-       3. payTxFee (user-set global variable)\n-       4. nTxConfirmTarget (user-set global variable)\n+       3. m_pay_tx_fee (user-set member variable of wallet)\n+       4. m_confirm_target (user-set member variable of wallet)\n        The first parameter that is set is used.\n     */\n-    CFeeRate feerate_needed ;\n+    CFeeRate feerate_needed;\n     if (coin_control.m_feerate) { // 1.\n         feerate_needed = *(coin_control.m_feerate);\n         if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n         // Allow to override automatic min/max check over coin control instance\n         if (coin_control.fOverrideFeeRate) return feerate_needed;\n     }\n-    else if (!coin_control.m_confirm_target && ::payTxFee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for global payTxFee\n-        feerate_needed = ::payTxFee;\n+    else if (!coin_control.m_confirm_target && wallet.m_pay_tx_fee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for wallet member m_pay_tx_fee\n+        feerate_needed = wallet.m_pay_tx_fee;\n         if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n     }\n     else { // 2. or 4.\n         // We will use smart fee estimation\n-        unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n+        unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : wallet.m_confirm_target;\n         // By default estimates are economical iff we are signaling opt-in-RBF\n-        bool conservative_estimate = !coin_control.signalRbf;\n+        bool conservative_estimate = !coin_control.m_signal_bip125_rbf.get_value_or(wallet.m_signal_rbf);\n         // Allow to override the default fee estimate mode over the CoinControl instance\n         if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n         else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n \n         feerate_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate);\n         if (feerate_needed == CFeeRate(0)) {\n-            // if we don't have enough data for estimateSmartFee, then use fallbackFee\n-            feerate_needed = CWallet::fallbackFee;\n+            // if we don't have enough data for estimateSmartFee, then use fallback fee\n+            feerate_needed = wallet.m_fallback_fee;\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n \n             // directly return if fallback fee is disabled (feerate 0 == disabled)\n-            if (CWallet::fallbackFee == CFeeRate(0)) return feerate_needed;\n+            if (wallet.m_fallback_fee == CFeeRate(0)) return feerate_needed;\n         }\n         // Obey mempool min fee when using smart fee estimation\n         CFeeRate min_mempool_feerate = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n@@ -81,21 +81,21 @@ CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& p\n         }\n     }\n \n-    // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    CFeeRate required_feerate = GetRequiredFeeRate();\n+    // prevent user from paying a fee below the required fee rate\n+    CFeeRate required_feerate = GetRequiredFeeRate(wallet);\n     if (required_feerate > feerate_needed) {\n         feerate_needed = required_feerate;\n         if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n     }\n     return feerate_needed;\n }\n \n-CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator)\n+CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator)\n {\n     unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);\n     // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n-    discard_rate = (discard_rate == CFeeRate(0)) ? CWallet::m_discard_rate : std::min(discard_rate, CWallet::m_discard_rate);\n+    discard_rate = (discard_rate == CFeeRate(0)) ? wallet.m_discard_rate : std::min(discard_rate, wallet.m_discard_rate);\n     // Discard rate must be at least dustRelayFee\n     discard_rate = std::max(discard_rate, ::dustRelayFee);\n     return discard_rate;"
      },
      {
        "sha": "b3cd064abc230486f83d0076282f5c617123b903",
        "filename": "src/wallet/fees.h",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.h?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -12,35 +12,36 @@ class CBlockPolicyEstimator;\n class CCoinControl;\n class CFeeRate;\n class CTxMemPool;\n+class CWallet;\n struct FeeCalculation;\n \n /**\n- * Return the minimum required fee taking into account the\n- * floating relay fee and user set minimum transaction fee\n+ * Return the minimum required absolute fee for this size\n+ * based on the required fee rate\n  */\n-CAmount GetRequiredFee(unsigned int nTxBytes);\n+CAmount GetRequiredFee(const CWallet& wallet, unsigned int nTxBytes);\n \n /**\n  * Estimate the minimum fee considering user set parameters\n  * and the required fee\n  */\n-CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n+CAmount GetMinimumFee(const CWallet& wallet, unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n \n /**\n  * Return the minimum required feerate taking into account the\n- * floating relay feerate and user set minimum transaction feerate\n+ * minimum relay feerate and user set minimum transaction feerate\n  */\n-CFeeRate GetRequiredFeeRate();\n+CFeeRate GetRequiredFeeRate(const CWallet& wallet);\n \n /**\n  * Estimate the minimum fee rate considering user set parameters\n  * and the required fee\n  */\n-CFeeRate GetMinimumFeeRate(const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n+CFeeRate GetMinimumFeeRate(const CWallet& wallet, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation* feeCalc);\n \n /**\n  * Return the maximum feerate for discarding change.\n  */\n-CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator);\n+CFeeRate GetDiscardRate(const CWallet& wallet, const CBlockPolicyEstimator& estimator);\n \n #endif // BITCOIN_WALLET_FEES_H"
      },
      {
        "sha": "c4ceba6dfad72cb55a574d751dc4c871a9dc6426",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 53,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -64,7 +64,7 @@ std::string WalletInit::GetHelpString(bool showDebug) const\n     strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n                                                             CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n-                                                            CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n+                                                            CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n     strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n@@ -149,55 +149,6 @@ bool WalletInit::ParameterInteraction() const\n         InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n                     _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n \n-    if (gArgs.IsArgSet(\"-mintxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n-            return InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n-        if (n > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n-        CWallet::minTxFee = CFeeRate(n);\n-    }\n-\n-    g_wallet_allow_fallback_fee = Params().IsFallbackFeeEnabled();\n-    if (gArgs.IsArgSet(\"-fallbackfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n-        CWallet::fallbackFee = CFeeRate(nFeePerK);\n-        g_wallet_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n-    }\n-    if (gArgs.IsArgSet(\"-discardfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n-                        _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n-        CWallet::m_discard_rate = CFeeRate(nFeePerK);\n-    }\n-    if (gArgs.IsArgSet(\"-paytxfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK))\n-            return InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n-\n-        payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n     if (gArgs.IsArgSet(\"-maxtxfee\"))\n     {\n         CAmount nMaxFee = 0;\n@@ -212,9 +163,6 @@ bool WalletInit::ParameterInteraction() const\n                                        gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n         }\n     }\n-    nTxConfirmTarget = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fWalletRbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n \n     return true;\n }"
      },
      {
        "sha": "0d4928e3560607197635a80fe3c6678f02a0a147",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -529,7 +529,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n     CCoinControl coin_control;\n     if (!request.params[5].isNull()) {\n-        coin_control.signalRbf = request.params[5].get_bool();\n+        coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n     if (!request.params[6].isNull()) {\n@@ -1108,7 +1108,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n \n     CCoinControl coin_control;\n     if (!request.params[5].isNull()) {\n-        coin_control.signalRbf = request.params[5].get_bool();\n+        coin_control.m_signal_bip125_rbf = request.params[5].get_bool();\n     }\n \n     if (!request.params[6].isNull()) {\n@@ -2757,10 +2757,10 @@ UniValue settxfee(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1) {\n         throw std::runtime_error(\n             \"settxfee amount\\n\"\n-            \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n+            \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"\\nResult\\n\"\n@@ -2769,13 +2769,13 @@ UniValue settxfee(const JSONRPCRequest& request)\n             + HelpExampleCli(\"settxfee\", \"0.00001\")\n             + HelpExampleRpc(\"settxfee\", \"0.00001\")\n         );\n+    }\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    // Amount\n     CAmount nAmount = AmountFromValue(request.params[0]);\n \n-    payTxFee = CFeeRate(nAmount, 1000);\n+    pwallet->m_pay_tx_fee = CFeeRate(nAmount, 1000);\n     return true;\n }\n \n@@ -2836,9 +2836,9 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n     if (pwallet->IsCrypted()) {\n         obj.pushKV(\"unlocked_until\", pwallet->nRelockTime);\n     }\n-    obj.pushKV(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK()));\n+    obj.pushKV(\"paytxfee\", ValueFromAmount(pwallet->m_pay_tx_fee.GetFeePerK()));\n     if (!masterKeyID.IsNull())\n-         obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n+        obj.pushKV(\"hdmasterkeyid\", masterKeyID.GetHex());\n     return obj;\n }\n \n@@ -3217,7 +3217,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n             subtractFeeFromOutputs = options[\"subtractFeeFromOutputs\"].get_array();\n \n         if (options.exists(\"replaceable\")) {\n-            coinControl.signalRbf = options[\"replaceable\"].get_bool();\n+            coinControl.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"conf_target\")) {\n             if (options.exists(\"feeRate\")) {\n@@ -3406,7 +3406,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     // optional parameters\n     CAmount totalFee = 0;\n     CCoinControl coin_control;\n-    coin_control.signalRbf = true;\n+    coin_control.m_signal_bip125_rbf = true;\n     if (!request.params[1].isNull()) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n@@ -3430,7 +3430,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n         }\n \n         if (options.exists(\"replaceable\")) {\n-            coin_control.signalRbf = options[\"replaceable\"].get_bool();\n+            coin_control.m_signal_bip125_rbf = options[\"replaceable\"].get_bool();\n         }\n         if (options.exists(\"estimate_mode\")) {\n             if (!FeeModeFromString(options[\"estimate_mode\"].get_str(), coin_control.m_fee_mode)) {"
      },
      {
        "sha": "ad3dd4cd2c144eb2b4ee8bb586cfbd559e82d61d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 74,
        "deletions": 35,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -72,29 +72,8 @@ CWallet* GetWallet(const std::string& name)\n     return nullptr;\n }\n \n-/** Transaction fee set by the user */\n-CFeeRate payTxFee(DEFAULT_TRANSACTION_FEE);\n-unsigned int nTxConfirmTarget = DEFAULT_TX_CONFIRM_TARGET;\n-bool bSpendZeroConfChange = DEFAULT_SPEND_ZEROCONF_CHANGE;\n-bool fWalletRbf = DEFAULT_WALLET_RBF;\n-bool g_wallet_allow_fallback_fee = true; //<! will be defined via chainparams\n-\n const uint32_t BIP32_HARDENED_KEY_LIMIT = 0x80000000;\n \n-/**\n- * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n- * Override with -mintxfee\n- */\n-CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);\n-/**\n- * If fee estimation does not have enough data to provide estimates, use this fee instead.\n- * Has no effect if not using fee estimation\n- * Override with -fallbackfee\n- */\n-CFeeRate CWallet::fallbackFee = CFeeRate(DEFAULT_FALLBACK_FEE);\n-\n-CFeeRate CWallet::m_discard_rate = CFeeRate(DEFAULT_DISCARD_FEE);\n-\n const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n \n /** @defgroup mapWallet\n@@ -2054,7 +2033,7 @@ bool CWalletTx::IsTrusted() const\n         return true;\n     if (nDepth < 0)\n         return false;\n-    if (!bSpendZeroConfChange || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n+    if (!pwallet->m_spend_zero_conf_change || !IsFromMe(ISMINE_ALL)) // using wtx's cached debit\n         return false;\n \n     // Don't trust unconfirmed transactions from us unless they are in the mempool.\n@@ -2490,10 +2469,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         FeeCalculation feeCalc;\n         CCoinControl temp;\n         temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(temp, ::mempool, ::feeEstimator, &feeCalc);\n+        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, ::mempool, ::feeEstimator, &feeCalc);\n \n         // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+        CAmount cost_of_change = GetDiscardRate(*this, ::feeEstimator).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n         // Filter by the min conf specs and add to utxo_pool and calculate effective value\n         for (const COutput &output : vCoins)\n@@ -2590,11 +2569,11 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n     bool res = nTargetValue <= nValueFromPresetInputs ||\n         SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 6, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n         SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(1, 1, 0), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, nMaxChainLength/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (bSpendZeroConfChange && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n-        (bSpendZeroConfChange && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, 2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::min((size_t)4, nMaxChainLength/3)), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength/2), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, nMaxChainLength), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used)) ||\n+        (m_spend_zero_conf_change && !fRejectLongChains && SelectCoinsMinConf(nTargetValue - nValueFromPresetInputs, CoinEligibilityFilter(0, 1, std::numeric_limits<uint64_t>::max()), vCoins, setCoinsRet, nValueRet, coin_selection_params, bnb_used));\n \n     // because SelectCoinsMinConf clears the setCoinsRet, we now add the possible inputs to the coinset\n     setCoinsRet.insert(setPresetCoins.begin(), setPresetCoins.end());\n@@ -2813,10 +2792,10 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout, SER_DISK, 0);\n \n-            CFeeRate discard_rate = GetDiscardRate(::feeEstimator);\n+            CFeeRate discard_rate = GetDiscardRate(*this, ::feeEstimator);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n \n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n@@ -2940,8 +2919,8 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                     return false;\n                 }\n \n-                nFeeNeeded = GetMinimumFee(nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !g_wallet_allow_fallback_fee) {\n+                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, ::mempool, ::feeEstimator, &feeCalc);\n+                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n                     strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n                     return false;\n@@ -2968,7 +2947,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);\n+                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, ::mempool, ::feeEstimator, nullptr);\n                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;\n@@ -3035,7 +3014,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n         // to avoid conflicting with other possible uses of nSequence,\n         // and in the spirit of \"smallest possible change from prior\n         // behavior.\"\n-        const uint32_t nSequence = coin_control.signalRbf ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n+        const uint32_t nSequence = coin_control.m_signal_bip125_rbf.get_value_or(m_signal_rbf) ? MAX_BIP125_RBF_SEQUENCE : (CTxIn::SEQUENCE_FINAL - 1);\n         for (const auto& coin : selected_coins) {\n             txNew.vin.push_back(CTxIn(coin.outpoint, CScript(), nSequence));\n         }\n@@ -4080,6 +4059,66 @@ CWallet* CWallet::CreateWalletFromFile(const std::string& name, const fs::path&\n         return nullptr;\n     }\n \n+    if (gArgs.IsArgSet(\"-mintxfee\")) {\n+        CAmount n = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n+            InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n+            return nullptr;\n+        }\n+        if (n > HIGH_TX_FEE_PER_KB) {\n+            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n+        }\n+        walletInstance->m_min_fee = CFeeRate(n);\n+    }\n+\n+    walletInstance->m_allow_fallback_fee = Params().IsFallbackFeeEnabled();\n+    if (gArgs.IsArgSet(\"-fallbackfee\")) {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n+            InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n+            return nullptr;\n+        }\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+        }\n+        walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n+        walletInstance->m_allow_fallback_fee = nFeePerK != 0; //disable fallback fee in case value was set to 0, enable if non-null value\n+    }\n+    if (gArgs.IsArgSet(\"-discardfee\")) {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n+            InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n+            return nullptr;\n+        }\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+            InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n+                        _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n+        }\n+        walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n+    }\n+    if (gArgs.IsArgSet(\"-paytxfee\")) {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n+            InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n+            return nullptr;\n+        }\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n+        }\n+        walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n+        if (walletInstance->m_pay_tx_fee < ::minRelayTxFee) {\n+            InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n+            return nullptr;\n+        }\n+    }\n+    walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    walletInstance->m_spend_zero_conf_change = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    walletInstance->m_signal_rbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n+\n     LogPrintf(\" wallet      %15dms\\n\", GetTimeMillis() - nStart);\n \n     // Try to top up keypool. No-op if the wallet is locked."
      },
      {
        "sha": "780c82ac36351bec4fda9cc07597e95f4966563f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -38,22 +38,13 @@ bool HasWallets();\n std::vector<CWallet*> GetWallets();\n CWallet* GetWallet(const std::string& name);\n \n-/**\n- * Settings\n- */\n-extern CFeeRate payTxFee;\n-extern unsigned int nTxConfirmTarget;\n-extern bool bSpendZeroConfChange;\n-extern bool fWalletRbf;\n-extern bool g_wallet_allow_fallback_fee;\n-\n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n //! -paytxfee default\n-static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n+constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n //! -fallbackfee default\n static const CAmount DEFAULT_FALLBACK_FEE = 20000;\n-//! -m_discard_rate default\n+//! -discardfee default\n static const CAmount DEFAULT_DISCARD_FEE = 10000;\n //! -mintxfee default\n static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n@@ -968,9 +959,19 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool DummySignTx(CMutableTransaction &txNew, const std::vector<CTxOut> &txouts) const;\n     bool DummySignInput(CTxIn &tx_in, const CTxOut &txout) const;\n \n-    static CFeeRate minTxFee;\n-    static CFeeRate fallbackFee;\n-    static CFeeRate m_discard_rate;\n+    CFeeRate m_pay_tx_fee{DEFAULT_PAY_TX_FEE};\n+    unsigned int m_confirm_target{DEFAULT_TX_CONFIRM_TARGET};\n+    bool m_spend_zero_conf_change{DEFAULT_SPEND_ZEROCONF_CHANGE};\n+    bool m_signal_rbf{DEFAULT_WALLET_RBF};\n+    bool m_allow_fallback_fee{true}; //<! will be defined via chainparams\n+    CFeeRate m_min_fee{DEFAULT_TRANSACTION_MINFEE}; //!< Override with -mintxfee\n+    /**\n+     * If fee estimation does not have enough data to provide estimates, use this fee instead.\n+     * Has no effect if not using fee estimation\n+     * Override with -fallbackfee\n+     */\n+    CFeeRate m_fallback_fee{DEFAULT_FALLBACK_FEE};\n+    CFeeRate m_discard_rate{DEFAULT_DISCARD_FEE};\n     OutputType m_default_address_type{DEFAULT_ADDRESS_TYPE};\n     OutputType m_default_change_type{OutputType::NONE}; // Default to OutputType::NONE if not set by -changetype\n "
      },
      {
        "sha": "7fabb3846b4dd28da0662d0867a1b958f9604d28",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fac0db0ff8e72ca30a0da8a64fc1d115dd2d6f8c",
        "patch": "@@ -150,5 +150,12 @@ def run_test(self):\n         assert_equal(batch[0][\"result\"][\"chain\"], \"regtest\")\n         assert_equal(batch[1][\"result\"][\"walletname\"], \"w1\")\n \n+        self.log.info('Check for per-wallet settxfee call')\n+        assert_equal(w1.getwalletinfo()['paytxfee'], 0)\n+        assert_equal(w2.getwalletinfo()['paytxfee'], 0)\n+        w2.settxfee(4.0)\n+        assert_equal(w1.getwalletinfo()['paytxfee'], 0)\n+        assert_equal(w2.getwalletinfo()['paytxfee'], 4.0)\n+\n if __name__ == '__main__':\n     MultiWalletTest().main()"
      }
    ]
  }
]