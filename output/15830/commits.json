[
  {
    "sha": "627bf65b077aafeee305eb809fe01e6c2f43a88f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjdiZjY1YjA3N2FhZmVlZTMwNWViODA5ZmUwMWU2YzJmNDNhODhm",
    "commit": {
      "author": {
        "name": "Martin Erlandsson",
        "email": "martin@megabit.se",
        "date": "2019-04-16T12:49:42Z"
      },
      "committer": {
        "name": "Martin Erlandsson",
        "email": "merland@users.noreply.github.com",
        "date": "2019-04-23T12:22:52Z"
      },
      "message": "Describe log files + consistent paths",
      "tree": {
        "sha": "50eb5371fc7e3592dc2161bb7a3e7ac39abdb4b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50eb5371fc7e3592dc2161bb7a3e7ac39abdb4b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/627bf65b077aafeee305eb809fe01e6c2f43a88f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627bf65b077aafeee305eb809fe01e6c2f43a88f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/627bf65b077aafeee305eb809fe01e6c2f43a88f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627bf65b077aafeee305eb809fe01e6c2f43a88f/comments",
    "author": {
      "login": "merland",
      "id": 453092,
      "node_id": "MDQ6VXNlcjQ1MzA5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/453092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/merland",
      "html_url": "https://github.com/merland",
      "followers_url": "https://api.github.com/users/merland/followers",
      "following_url": "https://api.github.com/users/merland/following{/other_user}",
      "gists_url": "https://api.github.com/users/merland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/merland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/merland/subscriptions",
      "organizations_url": "https://api.github.com/users/merland/orgs",
      "repos_url": "https://api.github.com/users/merland/repos",
      "events_url": "https://api.github.com/users/merland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/merland/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "merland",
      "id": 453092,
      "node_id": "MDQ6VXNlcjQ1MzA5Mg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/453092?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/merland",
      "html_url": "https://github.com/merland",
      "followers_url": "https://api.github.com/users/merland/followers",
      "following_url": "https://api.github.com/users/merland/following{/other_user}",
      "gists_url": "https://api.github.com/users/merland/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/merland/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/merland/subscriptions",
      "organizations_url": "https://api.github.com/users/merland/orgs",
      "repos_url": "https://api.github.com/users/merland/repos",
      "events_url": "https://api.github.com/users/merland/events{/privacy}",
      "received_events_url": "https://api.github.com/users/merland/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "598323911e930d67e678e464353eb570ad3bf2b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598323911e930d67e678e464353eb570ad3bf2b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/598323911e930d67e678e464353eb570ad3bf2b7"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 29,
      "deletions": 19
    },
    "files": [
      {
        "sha": "3fb55f2df04971070be94ea8d6a87d041c1be5b3",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627bf65b077aafeee305eb809fe01e6c2f43a88f/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627bf65b077aafeee305eb809fe01e6c2f43a88f/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=627bf65b077aafeee305eb809fe01e6c2f43a88f",
        "patch": "@@ -66,7 +66,7 @@ By default, up to 4 tests will be run in parallel by test_runner. To specify\n how many jobs to run, append `--jobs=n`\n \n The individual tests and the test_runner harness have many command-line\n-options. Run `test_runner.py -h` to see them all.\n+options. Run `test/functional/test_runner.py -h` to see them all.\n \n #### Troubleshooting and debugging test failures\n \n@@ -79,7 +79,7 @@ killed all its bitcoind nodes), then there may be a port conflict which will\n cause the test to fail. It is recommended that you run the tests on a system\n where no other bitcoind processes are running.\n \n-On linux, the test_framework will warn if there is another\n+On linux, the test framework will warn if there is another\n bitcoind process running when the tests are started.\n \n If there are zombie bitcoind processes after test failure, you can kill them\n@@ -108,12 +108,19 @@ tests will fail. If this happens, remove the cache directory (and make\n sure bitcoind processes are stopped as above):\n \n ```bash\n-rm -rf cache\n+rm -rf test/cache\n killall bitcoind\n ```\n \n ##### Test logging\n \n+The test framework logs to two files:\n+ * `<test data directory>/test_framework.log`\n+ * `<test data directory>/node<number>/regtest/debug.log`.\n+\n+The first line of the test output provides the test data directory path. The\n+node number is the relevant test node, from node1 to node4.\n+\n The tests contain logging at different levels (debug, info, warning, etc). By\n default:\n \n@@ -133,7 +140,7 @@ aggregate log by running the `combine_logs.py` script. The output can be plain\n text, colorized text or html. For example:\n \n ```\n-combine_logs.py -c <test data directory> | less -r\n+test/functional/combine_logs.py -c <test data directory> | less -r\n ```\n \n will pipe the colorized logs from the test into less."
      },
      {
        "sha": "0be9e2cf02482a7a8f3519f729afe3753c0a94b9",
        "filename": "test/functional/README.md",
        "status": "modified",
        "additions": 18,
        "deletions": 15,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/627bf65b077aafeee305eb809fe01e6c2f43a88f/test/functional/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/627bf65b077aafeee305eb809fe01e6c2f43a88f/test/functional/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/README.md?ref=627bf65b077aafeee305eb809fe01e6c2f43a88f",
        "patch": "@@ -4,13 +4,13 @@\n \n #### Example test\n \n-The [example_test.py](example_test.py) is a heavily commented example of a test case that uses both\n-the RPC and P2P interfaces. If you are writing your first test, copy that file\n-and modify to fit your needs.\n+The file [test/functional/example_test.py](example_test.py) is a heavily commented example\n+of a test case that uses both the RPC and P2P interfaces. If you are writing your first test, copy\n+that file and modify to fit your needs.\n \n #### Coverage\n \n-Running `test_runner.py` with the `--coverage` argument tracks which RPCs are\n+Running `test/functional/test_runner.py` with the `--coverage` argument tracks which RPCs are\n called by the tests and prints a report of uncovered RPCs in the summary. This\n can be used (along with the `--extended` argument) to find out which RPCs we\n don't have test cases for.\n@@ -82,7 +82,7 @@ P2P messages. These can be found in the following source files:\n \n #### Using the P2P interface\n \n-- `messages.py` contains all the definitions for objects that pass\n+- [messages.py](test_framework/messages.py) contains all the definitions for objects that pass\n over the network (`CBlock`, `CTransaction`, etc, along with the network-level\n wrappers for them, `msg_block`, `msg_tx`, etc).\n \n@@ -96,32 +96,35 @@ the Bitcoin Core node application logic. For custom behaviour, subclass the\n P2PInterface object and override the callback methods.\n \n - Can be used to write tests where specific P2P protocol behavior is tested.\n-Examples tests are `p2p_unrequested_blocks.py`, `p2p_compactblocks.py`.\n+Examples tests are [p2p_unrequested_blocks.py](p2p_unrequested_blocks.py),\n+[p2p_compactblocks.py](p2p_compactblocks.py).\n \n-### test-framework modules\n+### Test framework modules\n+The following are useful modules for test developers. They are located in\n+[test/functional/test_framework/](test_framework).\n \n-#### [test_framework/authproxy.py](test_framework/authproxy.py)\n+#### [authproxy.py](test_framework/authproxy.py)\n Taken from the [python-bitcoinrpc repository](https://github.com/jgarzik/python-bitcoinrpc).\n \n-#### [test_framework/test_framework.py](test_framework/test_framework.py)\n+#### [test_framework.py](test_framework/test_framework.py)\n Base class for functional tests.\n \n-#### [test_framework/util.py](test_framework/util.py)\n+#### [util.py](test_framework/util.py)\n Generally useful functions.\n \n-#### [test_framework/mininode.py](test_framework/mininode.py)\n+#### [mininode.py](test_framework/mininode.py)\n Basic code to support P2P connectivity to a bitcoind.\n \n-#### [test_framework/script.py](test_framework/script.py)\n+#### [script.py](test_framework/script.py)\n Utilities for manipulating transaction scripts (originally from python-bitcoinlib)\n \n-#### [test_framework/key.py](test_framework/key.py)\n+#### [key.py](test_framework/key.py)\n Wrapper around OpenSSL EC_Key (originally from python-bitcoinlib)\n \n-#### [test_framework/bignum.py](test_framework/bignum.py)\n+#### [bignum.py](test_framework/bignum.py)\n Helpers for script.py\n \n-#### [test_framework/blocktools.py](test_framework/blocktools.py)\n+#### [blocktools.py](test_framework/blocktools.py)\n Helper functions for creating blocks and transactions.\n \n ### Benchmarking with perf"
      }
    ]
  }
]