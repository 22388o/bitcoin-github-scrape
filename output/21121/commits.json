[
  {
    "sha": "9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YTNiYmU4ZmM1N2Q4ODkxOWFjZDRlYWRiYzk2MTI0NzExZjE3ZWMy",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-01-25T19:51:38Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-16T20:23:00Z"
      },
      "message": "[test] Introduce a unit test helper to create a valid mempool transaction.",
      "tree": {
        "sha": "ed94fff1955c62629edd6127757518211e8fa86d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed94fff1955c62629edd6127757518211e8fa86d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a3bbe8fc57d88919acd4eadbc96124711f17ec2/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "92fee79dab384acea47bf20741a9847a58253330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/92fee79dab384acea47bf20741a9847a58253330",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/92fee79dab384acea47bf20741a9847a58253330"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 66,
      "deletions": 0
    },
    "files": [
      {
        "sha": "03ab3f523de44afa99a91b7871ed0c192ad99c1c",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 49,
        "deletions": 0,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a3bbe8fc57d88919acd4eadbc96124711f17ec2/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a3bbe8fc57d88919acd4eadbc96124711f17ec2/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
        "patch": "@@ -260,6 +260,55 @@ CBlock TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransa\n     return block;\n }\n \n+\n+CMutableTransaction TestChain100Setup::CreateValidMempoolTransaction(CTransactionRef input_transaction,\n+                                                                     int input_vout,\n+                                                                     int input_height,\n+                                                                     CKey input_signing_key,\n+                                                                     CScript output_destination,\n+                                                                     CAmount output_amount)\n+{\n+    // Transaction we will submit to the mempool\n+    CMutableTransaction mempool_txn;\n+\n+    // Create an input\n+    COutPoint outpoint_to_spend(input_transaction->GetHash(), input_vout);\n+    CTxIn input(outpoint_to_spend);\n+    mempool_txn.vin.push_back(input);\n+\n+    // Create an output\n+    CTxOut output(output_amount, output_destination);\n+    mempool_txn.vout.push_back(output);\n+\n+    // Sign the transaction\n+    // - Add the signing key to a keystore\n+    FillableSigningProvider keystore;\n+    keystore.AddKey(input_signing_key);\n+    // - Populate a CoinsViewCache with the unspent output\n+    CCoinsView coins_view;\n+    CCoinsViewCache coins_cache(&coins_view);\n+    AddCoins(coins_cache, *input_transaction.get(), input_height);\n+    // - Use GetCoin to properly populate utxo_to_spend,\n+    Coin utxo_to_spend;\n+    assert(coins_cache.GetCoin(outpoint_to_spend, utxo_to_spend));\n+    // - Then add it to a map to pass in to SignTransaction\n+    std::map<COutPoint, Coin> input_coins;\n+    input_coins.insert({outpoint_to_spend, utxo_to_spend});\n+    // - Default signature hashing type\n+    int nHashType = SIGHASH_ALL;\n+    std::map<int, std::string> input_errors;\n+    assert(SignTransaction(mempool_txn, &keystore, input_coins, nHashType, input_errors));\n+\n+    // Add transaction to the mempool\n+    {\n+        LOCK(cs_main);\n+        const MempoolAcceptResult result = AcceptToMemoryPool(*m_node.mempool.get(), MakeTransactionRef(mempool_txn), /* bypass_limits */ false);\n+        assert(result.m_result_type == MempoolAcceptResult::ResultType::VALID);\n+    }\n+\n+    return mempool_txn;\n+}\n+\n TestChain100Setup::~TestChain100Setup()\n {\n     gArgs.ForceSetArg(\"-segwitheight\", \"0\");"
      },
      {
        "sha": "33f24e7c448315bd47a5ca54fabab7bdb4d50806",
        "filename": "src/test/util/setup_common.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a3bbe8fc57d88919acd4eadbc96124711f17ec2/src/test/util/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a3bbe8fc57d88919acd4eadbc96124711f17ec2/src/test/util/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.h?ref=9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
        "patch": "@@ -123,6 +123,23 @@ struct TestChain100Setup : public RegTestingSetup {\n     //! Mine a series of new blocks on the active chain.\n     void mineBlocks(int num_blocks);\n \n+    /**\n+     * Create a transaction and submit to the mempool.\n+     *\n+     * @param input_transaction  The transaction to spend\n+     * @param input_vout         The vout to spend from the input_transaction\n+     * @param input_height       The height of the block that included the input_transaction\n+     * @param input_signing_key  The key to spend the input_transaction\n+     * @param output_destination Where to send the output\n+     * @param output_amount      How much to send\n+     */\n+    CMutableTransaction CreateValidMempoolTransaction(CTransactionRef input_transaction,\n+                                                      int input_vout,\n+                                                      int input_height,\n+                                                      CKey input_signing_key,\n+                                                      CScript output_destination,\n+                                                      CAmount output_amount = CAmount(1 * COIN));\n+\n     ~TestChain100Setup();\n \n     bool m_deterministic;"
      }
    ]
  },
  {
    "sha": "a2d908e1daa1d1be74568bd7d1d04b724da7d79c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmQ5MDhlMWRhYTFkMWJlNzQ1NjhiZDdkMWQwNGI3MjRkYTdkNzlj",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-02T23:07:06Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-16T20:23:00Z"
      },
      "message": "[test] Throw error instead of segfaulting in failure scenario\n\nIf the miner code is faulty and does not include any transactions in a block,\nthe code segfaults when it tries to access block transactions. Instead, add a\ncheck that safely aborts the process.",
      "tree": {
        "sha": "a68736f6662dd5dea5b4f416db0ffca4bc951246",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a68736f6662dd5dea5b4f416db0ffca4bc951246"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2d908e1daa1d1be74568bd7d1d04b724da7d79c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d908e1daa1d1be74568bd7d1d04b724da7d79c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d908e1daa1d1be74568bd7d1d04b724da7d79c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d908e1daa1d1be74568bd7d1d04b724da7d79c/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a3bbe8fc57d88919acd4eadbc96124711f17ec2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a3bbe8fc57d88919acd4eadbc96124711f17ec2"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c06283a583198f089ccaa19f6343fdcdb6d51a5",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2d908e1daa1d1be74568bd7d1d04b724da7d79c/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2d908e1daa1d1be74568bd7d1d04b724da7d79c/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=a2d908e1daa1d1be74568bd7d1d04b724da7d79c",
        "patch": "@@ -123,6 +123,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     m_node.mempool->addUnchecked(entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n     std::unique_ptr<CBlockTemplate> pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 4);\n     BOOST_CHECK(pblocktemplate->block.vtx[1]->GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2]->GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3]->GetHash() == hashMediumFeeTx);\n@@ -157,6 +158,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     hashLowFeeTx = tx.GetHash();\n     m_node.mempool->addUnchecked(entry.Fee(feeToUse+2).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 6);\n     BOOST_CHECK(pblocktemplate->block.vtx[4]->GetHash() == hashFreeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[5]->GetHash() == hashLowFeeTx);\n \n@@ -191,6 +193,7 @@ void MinerTestingSetup::TestPackageSelection(const CChainParams& chainparams, co\n     tx.vout[0].nValue = 100000000 - 10000; // 10k satoshi fee\n     m_node.mempool->addUnchecked(entry.Fee(10000).FromTx(tx));\n     pblocktemplate = AssemblerForTest(chainparams).CreateNewBlock(scriptPubKey);\n+    BOOST_REQUIRE_EQUAL(pblocktemplate->block.vtx.size(), 9);\n     BOOST_CHECK(pblocktemplate->block.vtx[8]->GetHash() == hashLowFeeTx2);\n }\n "
      }
    ]
  },
  {
    "sha": "df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjZhNWZjMWRmZjNiMWI3YzJmMmI2N2FhZDFmZjE3Y2FjOTlmN2I2",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-11T02:30:51Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-16T20:23:00Z"
      },
      "message": "[util] Change GetMockTime to return chrono type instead of int",
      "tree": {
        "sha": "b1edc583b5a7304383570837f28bdd19d86b51ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1edc583b5a7304383570837f28bdd19d86b51ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a2d908e1daa1d1be74568bd7d1d04b724da7d79c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2d908e1daa1d1be74568bd7d1d04b724da7d79c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a2d908e1daa1d1be74568bd7d1d04b724da7d79c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 7,
      "deletions": 6
    },
    "files": [
      {
        "sha": "529bb11d5bd0ff2d7fe584ed14fb232c35ad6db8",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
        "patch": "@@ -203,9 +203,9 @@ std::string BCLog::Logger::LogTimestampStr(const std::string& str)\n             strStamped.pop_back();\n             strStamped += strprintf(\".%06dZ\", nTimeMicros%1000000);\n         }\n-        int64_t mocktime = GetMockTime();\n-        if (mocktime) {\n-            strStamped += \" (mocktime: \" + FormatISO8601DateTime(mocktime) + \")\";\n+        std::chrono::seconds mocktime = GetMockTime();\n+        if (mocktime > 0s) {\n+            strStamped += \" (mocktime: \" + FormatISO8601DateTime(count_seconds(mocktime)) + \")\";\n         }\n         strStamped += ' ' + str;\n     } else"
      },
      {
        "sha": "2589ec12a04a9a87c1d7c21a8ec80827d3bdc2a8",
        "filename": "src/util/time.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6/src/util/time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6/src/util/time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.cpp?ref=df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
        "patch": "@@ -53,9 +53,9 @@ void SetMockTime(int64_t nMockTimeIn)\n     nMockTime.store(nMockTimeIn, std::memory_order_relaxed);\n }\n \n-int64_t GetMockTime()\n+std::chrono::seconds GetMockTime()\n {\n-    return nMockTime.load(std::memory_order_relaxed);\n+    return std::chrono::seconds(nMockTime.load(std::memory_order_relaxed));\n }\n \n int64_t GetTimeMillis()"
      },
      {
        "sha": "38edc71de1905fce6b6c177e52f35093c0a0c4c9",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
        "patch": "@@ -45,8 +45,9 @@ int64_t GetSystemTimeInSeconds(); // Like GetTime(), but not mockable\n \n /** For testing. Set e.g. with the setmocktime rpc, or -mocktime argument */\n void SetMockTime(int64_t nMockTimeIn);\n+\n /** For testing */\n-int64_t GetMockTime();\n+std::chrono::seconds GetMockTime();\n \n /** Return system time (or mocked time, if set) */\n template <typename T>"
      }
    ]
  },
  {
    "sha": "47a7a1687d276bfa8769dee4bb78e8725f67a50e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2E3YTE2ODdkMjc2YmZhODc2OWRlZTRiYjc4ZTg3MjVmNjdhNTBl",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-12T18:23:45Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-16T20:23:00Z"
      },
      "message": "[util] Introduce a SetMockTime that takes chrono time",
      "tree": {
        "sha": "d46255108b13e0e5ec1bece599946dcdfe1fa92b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d46255108b13e0e5ec1bece599946dcdfe1fa92b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47a7a1687d276bfa8769dee4bb78e8725f67a50e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a7a1687d276bfa8769dee4bb78e8725f67a50e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47a7a1687d276bfa8769dee4bb78e8725f67a50e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a7a1687d276bfa8769dee4bb78e8725f67a50e/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df6a5fc1dff3b1b7c2f2b67aad1ff17cac99f7b6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7b0eb8fd8e447fa6f9d48e6cde1f80408b06774e",
        "filename": "src/util/time.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a7a1687d276bfa8769dee4bb78e8725f67a50e/src/util/time.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a7a1687d276bfa8769dee4bb78e8725f67a50e/src/util/time.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.cpp?ref=47a7a1687d276bfa8769dee4bb78e8725f67a50e",
        "patch": "@@ -53,6 +53,11 @@ void SetMockTime(int64_t nMockTimeIn)\n     nMockTime.store(nMockTimeIn, std::memory_order_relaxed);\n }\n \n+void SetMockTime(std::chrono::seconds mock_time_in)\n+{\n+    nMockTime.store(mock_time_in.count(), std::memory_order_relaxed);\n+}\n+\n std::chrono::seconds GetMockTime()\n {\n     return std::chrono::seconds(nMockTime.load(std::memory_order_relaxed));"
      },
      {
        "sha": "52679a26473cb292d9f154bdee49cfd7608f173a",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47a7a1687d276bfa8769dee4bb78e8725f67a50e/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47a7a1687d276bfa8769dee4bb78e8725f67a50e/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=47a7a1687d276bfa8769dee4bb78e8725f67a50e",
        "patch": "@@ -46,6 +46,9 @@ int64_t GetSystemTimeInSeconds(); // Like GetTime(), but not mockable\n /** For testing. Set e.g. with the setmocktime rpc, or -mocktime argument */\n void SetMockTime(int64_t nMockTimeIn);\n \n+/** For testing. Set e.g. with the setmocktime rpc, or -mocktime argument */\n+void SetMockTime(std::chrono::seconds mock_time_in);\n+\n /** For testing */\n std::chrono::seconds GetMockTime();\n "
      }
    ]
  },
  {
    "sha": "1363b6c27dbd2614fd555d148ea624ed8b95f14e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzYzYjZjMjdkYmQyNjE0ZmQ1NTVkMTQ4ZWE2MjRlZDhiOTVmMTRl",
    "commit": {
      "author": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-04T02:35:23Z"
      },
      "committer": {
        "name": "Amiti Uttarwar",
        "email": "amiti@uttarwar.org",
        "date": "2021-02-16T20:23:00Z"
      },
      "message": "[doc / util] Use comments to clarify time unit for int64_t type.",
      "tree": {
        "sha": "bc70bf821e9cf84062670fd547cc55db660e573b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc70bf821e9cf84062670fd547cc55db660e573b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1363b6c27dbd2614fd555d148ea624ed8b95f14e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1363b6c27dbd2614fd555d148ea624ed8b95f14e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1363b6c27dbd2614fd555d148ea624ed8b95f14e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1363b6c27dbd2614fd555d148ea624ed8b95f14e/comments",
    "author": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47a7a1687d276bfa8769dee4bb78e8725f67a50e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47a7a1687d276bfa8769dee4bb78e8725f67a50e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47a7a1687d276bfa8769dee4bb78e8725f67a50e"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c4f930781a1445a92157ee9db4908323b2e663c5",
        "filename": "src/util/time.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1363b6c27dbd2614fd555d148ea624ed8b95f14e/src/util/time.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1363b6c27dbd2614fd555d148ea624ed8b95f14e/src/util/time.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/time.h?ref=1363b6c27dbd2614fd555d148ea624ed8b95f14e",
        "patch": "@@ -43,7 +43,12 @@ int64_t GetTimeMicros();\n /** Returns the system time (not mockable) */\n int64_t GetSystemTimeInSeconds(); // Like GetTime(), but not mockable\n \n-/** For testing. Set e.g. with the setmocktime rpc, or -mocktime argument */\n+/**\n+ * DEPRECATED\n+ * Use SetMockTime with chrono type\n+ *\n+ * @param[in] nMockTimeIn Time in seconds.\n+ */\n void SetMockTime(int64_t nMockTimeIn);\n \n /** For testing. Set e.g. with the setmocktime rpc, or -mocktime argument */"
      }
    ]
  }
]