amitiuttarwar,2021-02-09 01:54:04,"the failing test seems unrelated. The failure is in `feature_assumevalid.py`, which seems hard to impact from changes that exclusively touch the unit tests, unit test framework, and some comments :) ",https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-775595337,775595337,
DrahtBot,2021-02-09 03:40:47,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-775637714,775637714,
laanwj,2021-02-10 13:11:35,"Code review ACK e7573304b7e112b6b7f49c79c25fce36a5440209\n\nThe new function is added but not used (so not tested), I would prefer if it was, but I guess it can wait until #21061.",https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-776696006,776696006,
amitiuttarwar,2021-02-12 04:26:15,"@vasild- thanks for the review! I've taken all your suggestions locally, but I'm currently getting a linker error when trying to `#include <boost/test/unit_test.hpp>` in `setup_common.cpp` (to use `BOOST_REQUIRE`). I'll dig into it more tomorrow, but just dropping a line here incase you (or anybody else) knows the cause off hand. ",https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-777960611,777960611,
vasild,2021-02-12 15:12:55,"@amitiuttarwar, I see no boost code is used in `setup_common.cpp`. Maybe it would be easier to use `assert()` inside `CreateValidMempoolTransaction()` instead or somehow signal a failure from that method and make the callers use `BOOST_REQUIRE()` to ensure that it succeeded.",https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-778253143,778253143,
MarcoFalke,2021-02-12 15:27:09,"It is only allowed to use boost in the unit tests, not the fuzz tests (or other tests). setup_common is used by all test and bench libraries.",https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-778261597,778261597,
amitiuttarwar,2021-02-12 19:00:41,"ah interesting. used `asserts` instead. thanks! \n\ntook all the feedback. \n- added asserts to `CreateValidMempool` helper\n- changed `GetMockTime` to return chrono time, updated the call sites\n- introduced a `SetMockTime` that takes in chrono time, did not update call sites, but documented in the notes that the `int64_t` is deprecated and the chrono one should be used\n\nthis means that ",https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-778387486,778387486,
amitiuttarwar,2021-02-12 19:45:16,fixed a silent merge conflict since the function signature of ATMP has changed. updated #21061 to use e020cd6 to test the helper. ,https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-778413486,778413486,
amitiuttarwar,2021-02-15 22:20:08,updated to incorporate feedback from @vasild ,https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-779472863,779472863,
vasild,2021-02-16 16:40:44,ACK 903bbf7f1068da0c27b99401483444f037a17840,https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-779960668,779960668,
amitiuttarwar,2021-02-16 20:24:38,rebased ,https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-780096301,780096301,
vasild,2021-02-17 09:10:54,ACK 1363b6c27dbd2614fd555d148ea624ed8b95f14e,https://github.com/bitcoin/bitcoin/pull/21121#issuecomment-780413994,780413994,
laanwj,2021-02-10 13:09:47,"Probably more of a hassle, but another way to document would be to use `std::chrono` types with explicit units.",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r573713098,573713098,src/util/time.h
amitiuttarwar,2021-02-10 18:43:14,"yeah, I took a quick look at changing the signature to a chrono type, but ended up taking the efficient/lazy way for now. there are a couple tweaks that would need to be made to switch it over, nothing difficult but not currently at the top of my priority list\n\nso I thought leaving a comment was the smallest way to help :) ",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r573981587,573981587,src/util/time.h
vasild,2021-02-11 10:36:31,"nit\n\n```suggestion\n    CTxIn input(outpoint_to_spend);\n```\n\nThe last two arguments have default values equal to the above.",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r574396383,574396383,src/test/util/setup_common.cpp
vasild,2021-02-11 10:45:07,Maybe `assert()` or `BOOST_REQUIRE()` that `GetCoin()` returns `true`?,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r574401946,574401946,src/test/util/setup_common.cpp
vasild,2021-02-11 10:46:56,"nit\n\n```suggestion\n    COutPoint outpoint_to_spend(input_transaction->GetHash(), input_vout);\n```",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r574403104,574403104,src/test/util/setup_common.cpp
vasild,2021-02-11 10:54:16,"The prototype of `AddCoins()` is:\n\n```cpp\nvoid AddCoins(CCoinsViewCache& cache, const CTransaction& tx, int nHeight, bool check = false);\n```\n\nI think the above call implicitly converts `false` to `0` for the 3rd argument `nHeight`. Maybe that should be:\n\n```suggestion\n    const int height = 123;\n    AddCoins(coins_cache, *input_transaction.get(), height);\n```",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r574407638,574407638,src/test/util/setup_common.cpp
vasild,2021-02-11 10:57:43,`assert()` or `BOOST_REQUIRE()` a successful sign?,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r574409892,574409892,src/test/util/setup_common.cpp
vasild,2021-02-11 11:00:35,`assert()` or `BOOST_REQUIRE()` a success here?,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r574411812,574411812,src/test/util/setup_common.cpp
vasild,2021-02-11 11:10:32,"The implementation assumes that the key to spend `input_transaction:input_vout` is `this->coinbaseKey`. Indeed all callers of this in #21061 pass some tx from `this->m_coinbase_txns[]`.\n\nThis is not clear from the above prototype. Maybe document this explicitly or even better - pass the spend key here, together with `input_transaction` and `input_vout`.",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r574417478,574417478,src/test/util/setup_common.h
amitiuttarwar,2021-02-12 18:46:43,"in the latest push, I updated the function signature of `GetMockTime`, with updated call sites. I also overloaded `SetMockTime` to take in chronos. This does mean I introduced another function that doesn't get used until #21061, so I can remove if you'd prefer. ",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575450955,575450955,src/util/time.h
amitiuttarwar,2021-02-12 18:48:41,done,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575452023,575452023,src/test/util/setup_common.cpp
amitiuttarwar,2021-02-12 18:48:57,done,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575452175,575452175,src/test/util/setup_common.cpp
amitiuttarwar,2021-02-12 18:49:47,done,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575452579,575452579,src/test/util/setup_common.cpp
amitiuttarwar,2021-02-12 18:51:37,"good catch! I updated so the height is a param that's passed in. It seems to not matter for my use cases, but since this is a helper it definitely is better to have consistency in the data structure. thanks :) ",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575453458,575453458,src/test/util/setup_common.cpp
amitiuttarwar,2021-02-12 18:51:46,done,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575453527,575453527,src/test/util/setup_common.cpp
amitiuttarwar,2021-02-12 18:52:05,done,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575453671,575453671,src/test/util/setup_common.cpp
amitiuttarwar,2021-02-12 18:52:29,good point! extracted `input_signing_key` as a param to be passed in. ,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r575453883,575453883,src/test/util/setup_common.h
vasild,2021-02-15 13:54:12,"Shouldn't that be `!=` instead of `==`? Or:\n\n```suggestion\n        if (mocktime > 0) {\n```",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r576207710,576207710,src/logging.cpp
vasild,2021-02-15 13:57:13,"```suggestion\n            strStamped += "" (mocktime: "" + FormatISO8601DateTime(count_seconds(mocktime)) + "")"";\n```\n\nThis will prevent silent surprises if `GetMockTime()` is changed some day to return something else than `std::chrono::seconds`, e.g. `std::chrono:milliseconds`.",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r576209663,576209663,src/logging.cpp
amitiuttarwar,2021-02-15 22:01:57,🤦‍♀️ good catch. ,https://github.com/bitcoin/bitcoin/pull/21121#discussion_r576445111,576445111,src/logging.cpp
amitiuttarwar,2021-02-15 22:19:06,"fixed. can't compare chrono time directly to an int, so I updated to `if (mocktime > 0s)` to keep the comparison in chronos. ",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r576450338,576450338,src/logging.cpp
amitiuttarwar,2021-02-15 22:19:27,"cool, didn't know about these helpers. updated. thanks!",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r576450421,576450421,src/logging.cpp
jonasschnelli,2021-02-18 19:31:53,"Somehow this leads to a ""comparison of integers of different signs"" on bitcoinbuilds.org:\nhttps://bitcoinbuilds.org/index.php?ansilog=982c61cf-6969-4001-bebc-dc215e5d29a4.log#l1906\nMaybe only happening on older boost versions?",https://github.com/bitcoin/bitcoin/pull/21121#discussion_r578691834,578691834,src/test/miner_tests.cpp
