DrahtBot,2021-04-19 03:52:24,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23497](https://github.com/bitcoin/bitcoin/pull/23497) (Add `src/node/` and `src/wallet/` code to `node::` and `wallet::`",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-822147133,822147133,
laanwj,2021-05-17 18:27:31,"Concept ACK, I think this is an elegant approach.",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-842538559,842538559,
fjahr,2021-05-26 23:41:04,"Addressed comments by @promag , thank you!\n\nI also fixed a comment I had overlooked and added a new commit at the end because I realized that we can skip the pruning stuff in `index/base` if the node is not actually pruning. With the new behavior especially this prevents locking `cs_main`. Happy to squash this but I am still checking that this is 100% safe and want to make sure it is looked at",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-849190916,849190916,
fjahr,2021-06-01 23:17:54,"> How about keeping some blocks before the deepest prune blocker?\n\nInteresting. That should help make it a bit more robust. I added this but set it pretty low for now (10), looking for feedback if it should be higher. I also encapsulated the logic for getting the deepest prune height into it's own function to not have more logic in `FlushStateToDisk`.\n\nAlso rebased.",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-852550603,852550603,
jonatack,2021-07-20 10:15:33,Nudge to update.,https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-883275390,883275390,
MarcoFalke,2021-07-20 14:38:47,"Removed from high-prio for now due to inactivity, but can be added back",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-883447438,883447438,
fjahr,2021-09-05 23:38:33,"Sorry for the long wait, I should have addressed all the feedback for now and also optimized the test a bit further.",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-913247703,913247703,
ryanofsky,2021-09-07 14:46:41,"> Sorry for the long wait, I should have addressed all the feedback for now and also optimized the test a bit further.\n\nThanks for updating this! I want to review it more soon, and it would be great to have feedback also from @jamesob because I think there is or could be some interaction between this and https://github.com/bitcoin/bitcoin/pull/15606#pullrequestreview-692965905:\n\n>* More st",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-914368128,914368128,
jamesob,2021-09-07 15:09:00,"> it would be great to have feedback also from @jamesob\n\nYep, will plan to review this in the next few days.",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-914391121,914391121,
fjahr,2021-09-29 23:23:23,Rebased and addressed @ryanofsky 's comments. Thanks for reviewing!,https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-930617542,930617542,
fjahr,2021-10-03 20:04:09,"Rebased and beefed up the wait time one last block sync that caused a CI failure previously. I think it was a normal timeout because I could not reproduce it locally and there are a lot of blocks being produced. Comparable tests in terms of number of blocks also use longer sync times.\n\nI kindly ask other reviewers to weigh in on @ryanofsky 's feedback here if you have a preference: https://git",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-933016580,933016580,
jonatack,2021-10-05 19:59:39,"Concept ACK, will have a look.",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-934744129,934744129,
MarcoFalke,2021-11-10 17:26:31,Test failue: https://github.com/bitcoin/bitcoin/pull/21726#discussion_r745556769,https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-965570260,965570260,
DrahtBot,2021-11-16 04:03:32,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/21726#issuecomment-969837222,969837222,
MarcoFalke,2021-04-19 05:49:00,"This function doesn't use any member of BlockManager, so could be stand-alone? Also, I think you can avoid this check by having the caller pass a `const CBlockIndex& start_block`.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r615556639,615556639,src/validation.cpp
fjahr,2021-05-13 18:55:13,Thanks! I made the changes as suggested.,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r632032296,632032296,src/validation.cpp
achow101,2021-05-24 19:42:35,"In 5d23ddf5ff3bd1e5d4f6b85440d9ad0c59bb9994 ""Add prune blockers to BlockManager""\n\nSince this has `EXCLUSIVE_LOCKS_REQUIRED`, I think it should also have `AssertLockHeld` in here too.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r638228451,638228451,src/validation.cpp
fjahr,2021-05-24 22:13:42,"Right, fixed!",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r638325082,638325082,src/validation.cpp
promag,2021-05-24 23:11:22,"bfe9719e29d7947e2ffa9b510cd078e8a09b5d03\n\nnit, `GetLastPrunedBlock`?",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r638347138,638347138,src/node/blockstorage.cpp
promag,2021-05-24 23:13:19,"b5a239390fd1b31c7e6107a2e6c35658a2b4697c\n\nnit, `const std::string&`.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r638347828,638347828,src/validation.h
promag,2021-05-24 23:15:37,"b5a239390fd1b31c7e6107a2e6c35658a2b4697c\n\nHow can it be `nullptr`?",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r638348578,638348578,src/validation.cpp
promag,2021-05-24 23:16:45,"b5a239390fd1b31c7e6107a2e6c35658a2b4697c\n\nShould check/assert it only goes forward when updating?",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r638348949,638348949,src/validation.cpp
promag,2021-05-24 23:18:33,"d18677006d3d48ca7654039ea6e267164a2690e0\n\nnit, use ternary? `block ? block : ::ChainActive().Genesis()`",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r638349497,638349497,src/index/base.cpp
fjahr,2021-05-26 23:36:05,"I am not sure. The way I use it right now it can also go down with reorgs. I am undecided what the right course is. Only going up avoids a potential footgun, with going down it could react to (highly unlikely) deep reorg. If I add this I think I would do it so that setting a lower number is simply a no op:\n\n```\nif (m_prune_blockers[name] < block) m_prune_blockers[name] = block;\n```",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r640188761,640188761,src/validation.cpp
fjahr,2021-05-26 23:36:10,done,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r640188783,640188783,src/index/base.cpp
fjahr,2021-05-26 23:36:20,I guess it should never be `nullptr`. Dropped that if statement.,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r640188853,640188853,src/validation.cpp
fjahr,2021-05-26 23:36:37,done,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r640188945,640188945,src/validation.h
fjahr,2021-05-26 23:36:45,done,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r640188998,640188998,src/node/blockstorage.cpp
promag,2021-05-26 23:41:48,But what should happen if the block is already pruned?,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r640190703,640190703,src/validation.cpp
fjahr,2021-06-01 20:46:34,"Hm, that would mean the node would have to restart with `-reindex` anyway, right?",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r643467366,643467366,src/validation.cpp
ryanofsky,2021-06-02 15:46:54,"In commit ""refactor: Introduce GetLastPruneBlock helper function"" (292d508e956bfe5b05e6ee685415063c2a0f04af)\n\nNote: Here and in the other location below there's no more CHECK_NONFATAL so there would be segfault instead of an exception if the tip was null. Doesn't seem like a problem, but if were for some reason, GetLastPrunedBlock argument could be a pointer instead of a reference and the chec",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r644094388,644094388,src/rpc/blockchain.cpp
ryanofsky,2021-06-02 16:04:50,"In commit ""Add prune blockers to BlockManager"" (9f8d6a9a8f7d113ae12306c72a773830b5725e37)\n\nWould be good to have a descriptive comment like:\n\n```c++\n//! Map from external index name to most recent block the index can tolerate being pruned.\n//!\n//! @note Internally, only blocks at height (block->nHeight + PRUNE_BLOCKER_BUFFER) and\n//! below will be pruned, but callers should avoid a",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r644109721,644109721,src/validation.h
ryanofsky,2021-06-02 16:12:07,"In commit ""Add prune blockers to BlockManager"" (9f8d6a9a8f7d113ae12306c72a773830b5725e37)\n\nJust a style suggestion, so feel free to ignore, but usage of this function seems awkward to understand with last_prune being an input and an output parameter. I think FlushStateToDisk would be easier to read with the code in this function just inlined there (which is the only place where it is called).",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r644115299,644115299,src/validation.cpp
ryanofsky,2021-06-02 17:23:40,"In commit ""Add prune blockers to BlockManager"" (9f8d6a9a8f7d113ae12306c72a773830b5725e37):\n\nre: https://github.com/bitcoin/bitcoin/pull/21726#discussion_r643467366\n\n> Hm, that would mean the node would have to restart with `-reindex` anyway, right?\n\nIt would be nice to have a test for this case if there isn't one. does seem like like if there was reorg and a block needed by the index w",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r644173288,644173288,src/validation.cpp
ryanofsky,2021-06-02 18:06:23,"In commit ""Add prune blockers to BlockManager"" (9f8d6a9a8f7d113ae12306c72a773830b5725e37):\n\nWould it make sense to use a log category here `LogPrint(BCLog::PRUNE, ...)` instead of printing unconditionally? Also in the future it could be nice to unify this print with the prints in the FindFilesToPrune functions and print the full pruning status in a consistent way on just one line.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r644205509,644205509,src/validation.cpp
dergoegge,2021-06-19 10:15:05,"```suggestion\n        const int blocker_height = blocker.second->nHeight - PRUNE_BLOCKER_BUFFER;\n```\nShouldn't we subtract here if we want to keep `PRUNE_BLOCKER_BUFFER` blocks **before** the deepest blocker?\n\nfrom the logs of a test run:\n```\nnode1 2021-06-19T12:10:06.022496Z [init] [validation.cpp:3803] [GetLastPruneBlockerHeight] coinstatsindex limited pruning to height 10\n...\n",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r654778191,654778191,src/validation.cpp
dergoegge,2021-06-19 12:22:15,"Wouldn't it make more sense to wait for the indexes to sync *after* pruning?\nOtherwise it is pretty much guaranteed that the index data at the tip (700) is available after pruning.\n\nIn general i think it would be good for the test to check for expected prune blocker heights somehow. (not sure if that is possible, i dont know that much about the functional tests)",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r654789987,654789987,test/functional/feature_index_prune.py
jonatack,2021-06-28 13:50:49,"Error building this branch at e365e87a72cc4 rebased to current master at 8cdf91735f2b, looks like it needs updating:\n```rake\nindex/base.cpp:373:9: error: use of undeclared identifier 'g_chainman'\n        g_chainman.m_blockman.UpdatePruneBlocker(GetName(), block ? block : ::ChainActive().Genesis());\n        ^\nindex/base.cpp:373:79: error: no member named 'ChainActive' in the global namesp",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r659805048,659805048,src/index/base.cpp
fjahr,2021-09-05 22:58:17,"right üôÑ thanks, fixed!",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702488378,702488378,src/validation.cpp
fjahr,2021-09-05 23:01:08,"Yeah, I agree, I added a log category. I am leaving unifying for a potential follow-up to not complicate this PR further.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702488632,702488632,src/validation.cpp
fjahr,2021-09-05 23:01:39,Added!,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702488725,702488725,src/validation.h
fjahr,2021-09-05 23:01:59,Done,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702488743,702488743,src/validation.cpp
fjahr,2021-09-05 23:02:32,"Thanks, fixed.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702488827,702488827,src/index/base.cpp
fjahr,2021-09-05 23:05:33,"> Wouldn't it make more sense to wait for the indexes to sync _after_ pruning?\n> Otherwise it is pretty much guaranteed that the index data at the tip (700) is available after pruning.\n\nYes, that would be good, but unless I am misunderstanding your comment, what we would be testing then is a race condition which would make the test flaky.\n\n> In general i think it would be good for the te",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702489106,702489106,test/functional/feature_index_prune.py
fjahr,2021-09-05 23:30:04,"True, I changed the function to take a pointer and added a CHECK_NONFATAL to be more consistent with the previous code.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702492020,702492020,src/rpc/blockchain.cpp
fjahr,2021-09-05 23:37:40,"Yes, I added functional tests for the -reindex case.\n\nI am looking into the sanity check assert idea don't have a clear opinion yet.\n\n",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r702492978,702492978,src/validation.cpp
jamesob,2021-09-09 13:53:02,"https://github.com/bitcoin/bitcoin/pull/21726/commits/2c815adc881fa90f14887e2ec33ccb11ef964387\n\nNote: ensured `active_chain.Tip()` will not ever be nullptr here because `g_txindex` et al are started in init.cpp after genesis block load.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r705355682,705355682,src/index/base.cpp
jamesob,2021-09-09 14:13:57,"https://github.com/bitcoin/bitcoin/pull/21726/commits/9c70676aded6e2c9c4719fd5039f27a2c16a54fb\n\nI'm curious why the method below is marked as requiring cs_main, but this data structure isn't marked as guarded by cs_main - is that intentional?",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r705377815,705377815,src/validation.h
dergoegge,2021-09-11 12:50:40,"nit: make the code match the log statement (`pruneheight` is here still set to 248 while the indices best block is 700)\n```suggestion\n            assert_greater_than(pruneheight_new, 700)\n```\n",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r706609540,706609540,test/functional/feature_index_prune.py
dergoegge,2021-09-11 15:04:47,"I am able to put any value here besides 690 and the test still passes.\n\nThis is because [`assert_debug_log`](https://github.com/bitcoin/bitcoin/blob/5c0f46ca46e23a161649b5150baa01020dc85e48/test/functional/test_framework/test_node.py#L381) is a generator and meant to be used in combination with `with`:\n```python\nwith assert_debug_log(...):\n  # some other code that prints the (un)expected",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r706623557,706623557,test/functional/feature_index_prune.py
ryanofsky,2021-09-20 17:28:51,"In commit ""refactor: Introduce GetLastPruneBlock helper function"" (2c815adc881fa90f14887e2ec33ccb11ef964387)\n\nThis doesn't seem to actually return the last block that is pruned. It seems to return the next block that has data. So maybe should be called `GetFirstNonPrunedBlock`? It also seems like `pruneblockchain` RPC documentation describes this incorrectly while `getblockchaininfo` describes",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r712372589,712372589,src/node/blockstorage.h
fjahr,2021-09-22 21:59:31,"Not intentional, just an oversight. Fixed!",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r714341113,714341113,src/validation.h
fjahr,2021-09-22 21:59:55,"Makes sense, fixed!",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r714341348,714341348,test/functional/feature_index_prune.py
fjahr,2021-09-22 22:02:39,"True, I fixed this and went with with the name `GetFirstStoredBlock` inspired by the docs in `getblockchaininfo`. I also added an extra commit to fix the docs in `pruneblockchain`. I think fixing the docs is the right approach rather than change the behavior but I kept it in the separate commit in case there are different opinions on that.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r714342652,714342652,src/node/blockstorage.h
fjahr,2021-09-22 22:09:36,Thanks a lot for the detailed feedback! I fixed this using your suggested approach in the two locations where I wanted to do the check.,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r714345854,714345854,test/functional/feature_index_prune.py
ryanofsky,2021-09-23 02:11:16,"In commit ""refactor: Introduce GetFirstStoredlock helper function"" (4ebe3a51da88589f23e243045a9e392701dfbbad)\n\nFunction name is spelled wrong in commit message",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r714427353,714427353,src/node/blockstorage.h
ryanofsky,2021-09-23 17:52:44,"In commit ""Index: Use prune blockers for blockfilterindex"" (7db7f26e97665c048b3f614c092899addd658f4f)\n\nCan we add an assert here:\n\n```\nassert(!fPruneMode || AllowPrune());\n```\n\nI know there is startup code that prevents the indexes which don't support AllowPrune from being enabled at the same time as the prune option, but you could imagine someone adding a new index where AllowPrun",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r715026559,715026559,src/index/base.cpp
ryanofsky,2021-09-23 18:33:43,"In commit ""Index: Use prune blockers for blockfilterindex"" (7db7f26e97665c048b3f614c092899addd658f4f)\n\nI think it would be good if the commit message noted the minor change in behavior here: Previously pruning code would keep the blockfilter index best block and later blocks, and now an extra 10 previous blocks(PRUNE_BLOCKER_BUFFER) will be kept.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r715054451,715054451,src/validation.cpp
ryanofsky,2021-09-23 18:40:49,"In commit ""Index: Skip pruning checks when node is not pruning"" (70b9e4f6abda5d6dd38504d9149ddc79b33961ce)\n\nWhat is the motivation for this commit? It just seems to be disabling error checking and making the code more complicated and interdependent. Is there a real performance benefit or some other reason to do this?",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r715059159,715059159,src/index/base.cpp
ryanofsky,2021-09-23 19:31:22,"In commit ""Index: Use prune blockers for blockfilterindex"" (7db7f26e97665c048b3f614c092899addd658f4f)\n\nI'm seeing a segfault this line starting in the ""Index: Use prune blockers"" commit and continuing up to the """"Index: Skip pruning checks"" commit in the `feature_blockfilterindex_prune.py` test because `blocker.second` is null. It would probably be good to not insert null prune blockers or jus",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r715093019,715093019,src/validation.cpp
fjahr,2021-09-29 23:18:33,fixed,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r718948137,718948137,src/node/blockstorage.h
fjahr,2021-09-29 23:18:46,Added,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r718948229,718948229,src/index/base.cpp
fjahr,2021-09-29 23:18:56,Added a note in the commit message,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r718948310,718948310,src/validation.cpp
fjahr,2021-09-29 23:19:08,"I did not do performance tests on this change, it will probably not be huge but if we can get it, why not? But my main motivation is that I think that these checks are not necessary unless the conditions hold. I think it makes code easier to understand if sections that are not relevant are skipped explicitly. But I can see how this might be missing a comment for clarity, happy to add that if you a",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r718948387,718948387,src/index/base.cpp
fjahr,2021-09-29 23:22:40,"Oh, TIL that `Genesis()` can return a `nullptr` and does so initially when reindexing. I never really checked and assumed this couldn't happen since the Genesis block is hardcoded. Well, good to know and this should be fixed now.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r718949709,718949709,src/validation.cpp
ryanofsky,2021-09-30 16:51:01,"> I think it makes code easier to understand if sections that are not relevant are skipped explicitly.\n\nI would love to visit the planet where `if (!m_synced && (fPruneMode || fHavePruned) && !fReindex)` is easier to understand than `if (!m_synced)`. In general I don't think code is easier to read with special cases, and all else equal I wouldn't think that skipping checks would be a great ide",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r719590304,719590304,src/index/base.cpp
fjahr,2021-10-03 19:25:36,"I agree with you that the line is harder to understand after the change but in exchange for that, it makes explicit that the code inside the block is only relevant and needs to run if this evaluates to true. Let's wait for more feedback as a tie-breaker, of course, I am happy to remove it if others agree with you :)",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r720875101,720875101,src/index/base.cpp
dergoegge,2021-10-05 19:53:30,"> it makes explicit that the code inside the block is only relevant and needs to run if this evaluates to true\n\nI don't have a strong opinion but i agree with this statement and think the change should stay.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r722607995,722607995,src/index/base.cpp
jonatack,2021-10-06 14:09:25,"Note to self, check if #22932 lock annotations/guards need to be updated if this pull is merged (at first look tentatively seems ok).",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723316569,723316569,src/node/blockstorage.cpp
jonatack,2021-10-06 14:14:56,"19c360e\n```suggestion\n                    RPCResult::Type::NUM, """", ""The height of the first block that is still stored after pruning.""},\n```",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723322094,723322094,src/rpc/blockchain.cpp
jonatack,2021-10-06 14:16:06,"18e768f\n```suggestion\n/** The number of blocks to keep below the deepest prune blocker. */\n```",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723323453,723323453,src/validation.h
jonatack,2021-10-06 14:21:16,18e768f Perhaps just inline this one-line function.,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723329132,723329132,src/validation.cpp
jonatack,2021-10-06 14:33:02,"18e768f missing headers for `unordered_map` and `std::min/max` in this commit\n```diff\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -54,9 +54,11 @@\n #include <warnings.h>\n \n+#include <algorithm>\n #include <numeric>\n #include <optional>\n #include <string>\n+#include <unordered_map>\n\n--- a/src/validation.h\n+++ b/src/validation.h\n@@ -34,6 +34,7 @@\n #include <thre",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723340964,723340964,src/validation.h
jonatack,2021-10-06 14:35:21,"18e768f style nits and missing space\n```diff\n-            for (auto const& blocker : m_blockman.m_prune_blockers) {\n-                const int blocker_height = blocker.second->nHeight - PRUNE_BLOCKER_BUFFER;\n+            for (const auto& blocker : m_blockman.m_prune_blockers) {\n+                const int blocker_height{blocker.second->nHeight - PRUNE_BLOCKER_BUFFER};\n                 i",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723343409,723343409,src/validation.cpp
jonatack,2021-10-06 15:08:42,"1b51e212 see #22741\n```suggestion\n            self.generate(self.nodes[0], 250)\n```",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723377801,723377801,test/functional/feature_index_prune.py
jonatack,2021-10-06 15:43:31,"86121153164a05a5d not sure, but it seems there should be a demonstrated clear improvement and documentation of the intention in both places.",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723411364,723411364,src/index/base.cpp
jonatack,2021-10-06 15:59:24,"This test is now time-consuming enough (16 minutes for me locally) that it might be best to place it in the extended scripts. Or at least, at the top (rather than the bottom) of the base scripts. Even better, find a way to speed it up :)\n```python\nEXTENDED_SCRIPTS = [\n    # These tests are not run by default.\n    # Longest test should go first, to favor running tests in parallel\n    'fea",https://github.com/bitcoin/bitcoin/pull/21726#discussion_r723429759,723429759,test/functional/test_runner.py
MarcoFalke,2021-11-09 12:10:25,still not fixed?,https://github.com/bitcoin/bitcoin/pull/21726#discussion_r745556769,745556769,test/functional/feature_index_prune.py
