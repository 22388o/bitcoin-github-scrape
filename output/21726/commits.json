[
  {
    "sha": "2ab6acf3004818260905855afa6c07309e39942b",
    "node_id": "C_kwDOABII59oAKDJhYjZhY2YzMDA0ODE4MjYwOTA1ODU1YWZhNmMwNzMwOWUzOTk0MmI",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-18T14:48:52Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:33:06Z"
      },
      "message": "refactor: Introduce GetFirstStoredBlock helper function",
      "tree": {
        "sha": "4f2102d7aa5bd692b12427ed00be04a87f31a661",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f2102d7aa5bd692b12427ed00be04a87f31a661"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ab6acf3004818260905855afa6c07309e39942b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBXIVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNaVsP/2cEyT5dPc0cODwciBBg6IhRrYyx\nBrRZCkrKucwE+YKV/enZfff9vIwWINUKoT/SgJJ0oEfmG72F1UWBJUUcokpzEXGg\njZU/xRtZ4+ZRTKGPna5Mcm64x93qWpbCtP9B3E/2XBGaw31tyxtnYeu8OqPIiXLJ\nJMqcAWa+3jOQnXKM1Uq5DSVKjSapBpghnpxgl30DSkR3SRmMjWooyIONI+92saWc\nIWXfz2Tmx+hDHnkVXQC3BBCzXO1SPckDDzdDWMyKRvV56IEXyBpWxwPirBhfAXLr\nr6H0+ZZ6/+S1zs4kPlUKwPYvA/o/a7R94cIt4AJye/JbGgAZJj1yptbZ/5jZmJyl\nkOam/Gh7Kqe7IBq67UlbljBA6OY8N5V8oxqKE57Og5tHv6r9gMxBUGgFNvq7PwNa\nHm3AW6C0Ow9tH7odXTudWKxw4AyK5hvg8tFtWBS8FfAnrOHBXVhqi57qiN13/KjT\nNUkyCYZZxUSxUhz3XP5ZCj0AThlGmj3SZX2ocU5Hfp35K1muxN+ZBn1u3R7f5+PL\nIKcCq6FyDm5H6pYxvUBd3zLIIXZyMJlbatAKnjF6qdrGaFd0vSwb0W53i2Qoy/aA\n6N5iykGjdMpZHupm+KuuHSE9bMVDH0eQwawhfG1VN7Of3bA7QDxv4BoMrsRlBbj4\n6k7bUoHqB9rPcbZi\n=XPen\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f2102d7aa5bd692b12427ed00be04a87f31a661\nparent 446b706696451ae1a66ac416f347d734c5741d7c\nauthor Fabian Jahr <fjahr@protonmail.com> 1618757332 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289586 +0200\n\nrefactor: Introduce GetFirstStoredBlock helper function\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab6acf3004818260905855afa6c07309e39942b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ab6acf3004818260905855afa6c07309e39942b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab6acf3004818260905855afa6c07309e39942b/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "446b706696451ae1a66ac416f347d734c5741d7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/446b706696451ae1a66ac416f347d734c5741d7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/446b706696451ae1a66ac416f347d734c5741d7c"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 17,
      "deletions": 18
    },
    "files": [
      {
        "sha": "bf6dc637c79fa6bb7ce06f37919137bd8da33767",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab6acf3004818260905855afa6c07309e39942b/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab6acf3004818260905855afa6c07309e39942b/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=2ab6acf3004818260905855afa6c07309e39942b",
        "patch": "@@ -72,11 +72,7 @@ bool BaseIndex::Init()\n         if (!m_best_block_index) {\n             // index is not built yet\n             // make sure we have all block data back to the genesis\n-            const CBlockIndex* block = active_chain.Tip();\n-            while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n-                block = block->pprev;\n-            }\n-            prune_violation = block != active_chain.Genesis();\n+            prune_violation = GetFirstStoredBlock(active_chain.Tip()) != active_chain.Genesis();\n         }\n         // in case the index has a best block set and is not fully synced\n         // check if we have the required blocks to continue building the index"
      },
      {
        "sha": "1976b13c55463230dc235794279d398673a294f5",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab6acf3004818260905855afa6c07309e39942b/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab6acf3004818260905855afa6c07309e39942b/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=2ab6acf3004818260905855afa6c07309e39942b",
        "patch": "@@ -51,6 +51,15 @@ bool IsBlockPruned(const CBlockIndex* pblockindex)\n     return (fHavePruned && !(pblockindex->nStatus & BLOCK_HAVE_DATA) && pblockindex->nTx > 0);\n }\n \n+const CBlockIndex* GetFirstStoredBlock(const CBlockIndex* start_block) {\n+    CHECK_NONFATAL(start_block);\n+    const CBlockIndex* last_block = start_block;\n+    while (last_block->pprev && (last_block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n+        last_block = last_block->pprev;\n+    }\n+    return last_block;\n+}\n+\n // If we're using -prune with -reindex, then delete block files that will be ignored by the\n // reindex.  Since reindexing works by starting at block file 0 and looping until a blockfile\n // is missing, do the same here to delete any later block files after a gap.  Also delete all"
      },
      {
        "sha": "5daf7c59da10e79ee2f6a553201720d4b1c4c6f1",
        "filename": "src/node/blockstorage.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab6acf3004818260905855afa6c07309e39942b/src/node/blockstorage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab6acf3004818260905855afa6c07309e39942b/src/node/blockstorage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.h?ref=2ab6acf3004818260905855afa6c07309e39942b",
        "patch": "@@ -48,6 +48,9 @@ extern uint64_t nPruneTarget;\n //! Check whether the block associated with this index entry is pruned or not.\n bool IsBlockPruned(const CBlockIndex* pblockindex);\n \n+//! Find the first block that is not pruned\n+const CBlockIndex* GetFirstStoredBlock(const CBlockIndex* start_block);\n+\n void CleanupBlockRevFiles();\n \n /** Open a block file (blk?????.dat) */"
      },
      {
        "sha": "ed0f8cce2a025ca2cb32df0327649436a72223fb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 13,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ab6acf3004818260905855afa6c07309e39942b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ab6acf3004818260905855afa6c07309e39942b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2ab6acf3004818260905855afa6c07309e39942b",
        "patch": "@@ -1073,12 +1073,9 @@ static RPCHelpMan pruneblockchain()\n     }\n \n     PruneBlockFilesManual(active_chainstate, height);\n-    const CBlockIndex* block = active_chain.Tip();\n-    CHECK_NONFATAL(block);\n-    while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n-        block = block->pprev;\n-    }\n-    return uint64_t(block->nHeight);\n+    const CBlockIndex* last_block = GetFirstStoredBlock(active_chain.Tip());\n+\n+    return static_cast<uint64_t>(last_block->nHeight);\n },\n     };\n }\n@@ -1491,13 +1488,7 @@ RPCHelpMan getblockchaininfo()\n     obj.pushKV(\"size_on_disk\",          CalculateCurrentUsage());\n     obj.pushKV(\"pruned\",                fPruneMode);\n     if (fPruneMode) {\n-        const CBlockIndex* block = tip;\n-        CHECK_NONFATAL(block);\n-        while (block->pprev && (block->pprev->nStatus & BLOCK_HAVE_DATA)) {\n-            block = block->pprev;\n-        }\n-\n-        obj.pushKV(\"pruneheight\",        block->nHeight);\n+        obj.pushKV(\"pruneheight\", GetFirstStoredBlock(tip)->nHeight);\n \n         // if 0, execution bypasses the whole if block.\n         bool automatic_pruning = (gArgs.GetIntArg(\"-prune\", 0) != 1);"
      }
    ]
  },
  {
    "sha": "19c360e6853e939dfd28a839b9ad59df9d0601ef",
    "node_id": "C_kwDOABII59oAKDE5YzM2MGU2ODUzZTkzOWRmZDI4YTgzOWI5YWQ1OWRmOWQwNjAxZWY",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-09-21T22:49:24Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:33:07Z"
      },
      "message": "RPC: Fix pruneblockchain return documentation",
      "tree": {
        "sha": "cc265da66b348926e28ca3f65e27c3cc6a7eac61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc265da66b348926e28ca3f65e27c3cc6a7eac61"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19c360e6853e939dfd28a839b9ad59df9d0601ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBXMVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN23EP/R4hAW8PC5TmQVhWRiRBlqpN4bK3\nTxeCYVn7H/KpW5XiuhQfqf5x52c+yWEnBRlnFLMRvHJ3fF7pioNJif2t9QMIQg8p\nElKgiRT51k9xFwqHwUO2Qak+jupl4Nm6mFxE/kzNdfZJPdu2JyweU0aA2NYo7PaU\nVx1P9oxD33491r5LJcoEPy6Q0NlnoxtHY9qCemAgl8OuPSiP9vafULYpFjH/VIy1\n0Ie5aufe1d+zRcKFAqfKp/80hwuvC+mBKz1j0rE+yNsGzIp2BkdQ3gwSwGMay9RV\n6dsfII42nYsgiriHUn4sinM9jl2C5o1wdJkUWTLwH9kGxyAUYoK6PhViYDduYlnf\nlSJr3jkdFVbedJFtNz1YCdft7EpeizxI6hdG4MI+qTFrWi9CNX79uZcewrLc4YQK\nZ9TQva+NyKBLcTJpTGuK7ZbOxgrpAS06CZPXx6/lN3+NzKDMZUUuYxEvQni52paC\n22xtir4YJfdJDRgXLW9UK94WB2Lo/QXs80Gh6tGKVwhO3HWRKe2VSaQZMsoyBZ2p\nHm90lm1pkOlO7LV6L875BhmddhQ+OfIulqMMu8eVcBLF1L1gKFmb7lsQx56gJNuX\nwrBAn2wurCVTAyDWHsYb+BEHQfhWzlEigFhnnvXSIUffmLZ0nq1Kui4j9gbz+3gB\nwlqqszahYyuqBs1W\n=QECK\n-----END PGP SIGNATURE-----",
        "payload": "tree cc265da66b348926e28ca3f65e27c3cc6a7eac61\nparent 2ab6acf3004818260905855afa6c07309e39942b\nauthor Fabian Jahr <fjahr@protonmail.com> 1632264564 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289587 +0200\n\nRPC: Fix pruneblockchain return documentation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c360e6853e939dfd28a839b9ad59df9d0601ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19c360e6853e939dfd28a839b9ad59df9d0601ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c360e6853e939dfd28a839b9ad59df9d0601ef/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ab6acf3004818260905855afa6c07309e39942b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ab6acf3004818260905855afa6c07309e39942b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ab6acf3004818260905855afa6c07309e39942b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "567e29b636c28fd0df276243f48e902351cc326c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19c360e6853e939dfd28a839b9ad59df9d0601ef/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19c360e6853e939dfd28a839b9ad59df9d0601ef/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=19c360e6853e939dfd28a839b9ad59df9d0601ef",
        "patch": "@@ -1031,7 +1031,7 @@ static RPCHelpMan pruneblockchain()\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n-                    RPCResult::Type::NUM, \"\", \"Height of the last block pruned\"},\n+                    RPCResult::Type::NUM, \"\", \"Height of the first block that is still stored after pruning\"},\n                 RPCExamples{\n                     HelpExampleCli(\"pruneblockchain\", \"1000\")\n             + HelpExampleRpc(\"pruneblockchain\", \"1000\")"
      }
    ]
  },
  {
    "sha": "18e768f666b6d972ce0768fd5d699325ece44673",
    "node_id": "C_kwDOABII59oAKDE4ZTc2OGY2NjZiNmQ5NzJjZTA3NjhmZDVkNjk5MzI1ZWNlNDQ2NzM",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-05-13T17:13:08Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:33:07Z"
      },
      "message": "validation: Add prune blockers to BlockManager",
      "tree": {
        "sha": "901b39541ef852c89ff9dcc20783ec07254514cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/901b39541ef852c89ff9dcc20783ec07254514cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18e768f666b6d972ce0768fd5d699325ece44673",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBXMVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNf2QP/3Ef90K+7J2Vuq3GJ6jgcZnqfype\nq0x7GG7106+ApRLzTJhKudcQIJvM8xBzd1/3PRA497F2z4RHELQD3Y7pTQ1cPAVw\nUqI6SpgC2UoB2IWFZUusru/ZrXl5Mcp/NAa3VRQg5XcWchjD4qtX8GlzVyPIlJjW\nkHS8lSBtV6TeoiFwaGvnJ+XxJMxFJhrh4BsZoQjDKtzViCqn8vhXncudnE2TrSND\nT23zmO5Pn87fyST5ZghZ4vZBDjMQcZjgSeWuwcAYXN4+OQxKUm/AgyXhTx3Uysn0\nvTtrWEdiSHapdGGG7CqMhfLfeFUD3ig78YHdTYDMxqhQfRHBFMtCjU5yWBYJN1rU\nxEy1GZhGEoGAqAPj3T1P5oAhKPvlWWSOiJM639o0KsIGyr/m7RhMbbe5jsWwt6TY\nKeF5yNzfz98TP04ztWZECgM0S/7y9T7IYZ4IHiF3HC9niW2GdWvdZ1B9nNtpgTsz\nWsPc8LNGeidxFTxE7XiTV8gpo5i/7qhN8f+7vQfFc2Wsp+BF2/eKPzU7DJVbTs6s\nRJUzrSapTx/2bI3o/wj0RuMUx+CC/zDjv78gp3n1mseItFkc/uiC++zSXMKc1GWp\nKiHLwmLV9z5vHwkqH1TaMhaTaubN99SM6UoToD641Z7LZui3FKKmuP7qG1lM1sr1\n1Cc4Nj9Mmh2cP/ml\n=M0ke\n-----END PGP SIGNATURE-----",
        "payload": "tree 901b39541ef852c89ff9dcc20783ec07254514cf\nparent 19c360e6853e939dfd28a839b9ad59df9d0601ef\nauthor Fabian Jahr <fjahr@protonmail.com> 1620925988 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289587 +0200\n\nvalidation: Add prune blockers to BlockManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e768f666b6d972ce0768fd5d699325ece44673",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18e768f666b6d972ce0768fd5d699325ece44673",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e768f666b6d972ce0768fd5d699325ece44673/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19c360e6853e939dfd28a839b9ad59df9d0601ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19c360e6853e939dfd28a839b9ad59df9d0601ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19c360e6853e939dfd28a839b9ad59df9d0601ef"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 26,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4a60bf42a0820cb3f4aafa4665b68ade48202530",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e768f666b6d972ce0768fd5d699325ece44673/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e768f666b6d972ce0768fd5d699325ece44673/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=18e768f666b6d972ce0768fd5d699325ece44673",
        "patch": "@@ -1954,6 +1954,15 @@ bool CChainState::FlushStateToDisk(\n                last_prune = std::max(1, std::min(last_prune, index.GetSummary().best_block_height));\n             });\n \n+            for (auto const& blocker : m_blockman.m_prune_blockers) {\n+                const int blocker_height = blocker.second->nHeight - PRUNE_BLOCKER_BUFFER;\n+                last_prune = std::max(1, std::min(last_prune, blocker_height));\n+                if (last_prune == blocker_height) {\n+                    LogPrint(BCLog::PRUNE,\"%s limited pruning to height %d\\n\", blocker.first, blocker_height);\n+                }\n+            }\n+\n+\n             if (nManualPruneHeight > 0) {\n                 LOG_TIME_MILLIS_WITH_CATEGORY(\"find files to prune (manual)\", BCLog::BENCH);\n \n@@ -3594,6 +3603,11 @@ void BlockManager::FindFilesToPrune(std::set<int>& setFilesToPrune, uint64_t nPr\n            nLastBlockWeCanPrune, count);\n }\n \n+void BlockManager::UpdatePruneBlocker(const std::string& name, const CBlockIndex* block) {\n+    AssertLockHeld(::cs_main);\n+    m_prune_blockers[name] = block;\n+}\n+\n CBlockIndex * BlockManager::InsertBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "1c08dcf59ec37ee1b52f12c59bfccdd966e4f44e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18e768f666b6d972ce0768fd5d699325ece44673/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18e768f666b6d972ce0768fd5d699325ece44673/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=18e768f666b6d972ce0768fd5d699325ece44673",
        "patch": "@@ -88,6 +88,8 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // one 128MB block file + added 15% undo data = 147MB greater for a total of 545MB\n // Setting the target to >= 550 MiB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n+/** Blocks to keep below deepest prune blocker */\n+static constexpr int PRUNE_BLOCKER_BUFFER{10};\n \n /** Current sync state passed to tip changed callbacks. */\n enum class SynchronizationState {\n@@ -480,6 +482,16 @@ class BlockManager\n      */\n     int GetSpendHeight(const CCoinsViewCache& inputs) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n+    /**\n+     * Map from external index name to most recent block the index can tolerate being pruned.\n+     *\n+     * @note Internally, only blocks at height (block->nHeight - PRUNE_BLOCKER_BUFFER) and\n+     * below will be pruned, but callers should avoid assuming any particular buffer size.\n+     */\n+    std::unordered_map<std::string, const CBlockIndex*> m_prune_blockers GUARDED_BY(::cs_main);\n+\n+    void UpdatePruneBlocker(const std::string& name, const CBlockIndex* block) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     ~BlockManager() {\n         Unload();\n     }"
      }
    ]
  },
  {
    "sha": "4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
    "node_id": "C_kwDOABII59oAKDRmMTZiYTFlZDcwMmRkZGI4NjBmMmRiZTgyODNkMzg5ZmVmNGM2ZDM",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-04-18T21:06:18Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:33:07Z"
      },
      "message": "Index: Use prune blockers for blockfilterindex\n\nPrior to this change blocks could be pruned up to the last block before the blockfilterindex current best block. This change also introduces an aditional buffer of 10 blocks (PRUNE_BLOCKER_BUFFER) that will not be pruned before the best block.",
      "tree": {
        "sha": "b3aa33d0173b9fb105f29f5e73b3cf7afe7365df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b3aa33d0173b9fb105f29f5e73b3cf7afe7365df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBXMVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN4dAQAKE3swD4AP+iPlUjo6TgrcPKMUDU\nlA3MJ4HKYdzquRXPUNDGjrPCClOu9RLwPZeiuzFLzb0ldU0D5YJDAr86Eovkul5Z\nXZfMIGZYwJV5YlXDcVm2ITi5lLt1qRxy9Jn6valXMWqrXL/1mqjUdnxrCF3Zc2Ye\nXbOs5G+ArsmkZakTMvT8bY8SYMi5HRZJfqapcNQBcEqJNmNTiD/QPtxpXy+vItW2\n/6zzgyMpUaXVGOWfaiY/oLSSAcWBMmltyI9i5dq2ARbPqrvrCSvIw43lpvRCx06m\nyw7uftjFjBCb2V6r8j2aJEtXR5y/wi2vcSVo1dDflTHXQdgVeH/AinLSRZqbDDMW\nCTmf3uoOI8fYwg7kBwfuc6drqIs/OJPMrqv0n5LC6gRMdBd630O38FJXFK2JVgYd\nqmJmJn/KOqhk99p3+KDihVslOAnsXQz0Ba9OXBwvBN4wHFQQ1w3Yi22yurz6NHXc\nZ7Kc+M1Vkf2odvrIzPAve+1RlNp3Dj3YxImOTZ9/GHyQwxKjpfsb3MSRslOoL2D/\nwcEdUABHc8APtkUok/zxXNrVQ8dYhot8GJTzp4rxwPBChIch0l+vqOsarzb5tL6Y\ne5FmRh1hpACd6mupx8fvXuV7+Ezac/S9HuVX83XCopTDiHDAB038EbOORy9oKy1U\nV6Uw397txE2ZK9WH\n=fr16\n-----END PGP SIGNATURE-----",
        "payload": "tree b3aa33d0173b9fb105f29f5e73b3cf7afe7365df\nparent 18e768f666b6d972ce0768fd5d699325ece44673\nauthor Fabian Jahr <fjahr@protonmail.com> 1618779978 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289587 +0200\n\nIndex: Use prune blockers for blockfilterindex\n\nPrior to this change blocks could be pruned up to the last block before the blockfilterindex current best block. This change also introduces an aditional buffer of 10 blocks (PRUNE_BLOCKER_BUFFER) that will not be pruned before the best block.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18e768f666b6d972ce0768fd5d699325ece44673",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18e768f666b6d972ce0768fd5d699325ece44673",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18e768f666b6d972ce0768fd5d699325ece44673"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 29,
      "deletions": 15
    },
    "files": [
      {
        "sha": "b793d83e664c1d2047911fb0861f6618b5f6bd12",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 8,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "patch": "@@ -62,9 +62,9 @@ bool BaseIndex::Init()\n     LOCK(cs_main);\n     CChain& active_chain = m_chainstate->m_chain;\n     if (locator.IsNull()) {\n-        m_best_block_index = nullptr;\n+        SetBestBlockIndex(nullptr);\n     } else {\n-        m_best_block_index = m_chainstate->m_blockman.FindForkInGlobalIndex(active_chain, locator);\n+        SetBestBlockIndex(m_chainstate->m_blockman.FindForkInGlobalIndex(active_chain, locator));\n     }\n     m_synced = m_best_block_index.load() == active_chain.Tip();\n     if (!m_synced) {\n@@ -127,7 +127,7 @@ void BaseIndex::ThreadSync()\n         int64_t last_locator_write_time = 0;\n         while (true) {\n             if (m_interrupt) {\n-                m_best_block_index = pindex;\n+                SetBestBlockIndex(pindex);\n                 // No need to handle errors in Commit. If it fails, the error will be already be\n                 // logged. The best way to recover is to continue, as index cannot be corrupted by\n                 // a missed commit to disk for an advanced index state.\n@@ -139,7 +139,7 @@ void BaseIndex::ThreadSync()\n                 LOCK(cs_main);\n                 const CBlockIndex* pindex_next = NextSyncBlock(pindex, m_chainstate->m_chain);\n                 if (!pindex_next) {\n-                    m_best_block_index = pindex;\n+                    SetBestBlockIndex(pindex);\n                     m_synced = true;\n                     // No need to handle errors in Commit. See rationale above.\n                     Commit();\n@@ -161,7 +161,7 @@ void BaseIndex::ThreadSync()\n             }\n \n             if (last_locator_write_time + SYNC_LOCATOR_WRITE_INTERVAL < current_time) {\n-                m_best_block_index = pindex;\n+                SetBestBlockIndex(pindex);\n                 last_locator_write_time = current_time;\n                 // No need to handle errors in Commit. See rationale above.\n                 Commit();\n@@ -214,10 +214,10 @@ bool BaseIndex::Rewind(const CBlockIndex* current_tip, const CBlockIndex* new_ti\n     // out of sync may be possible but a users fault.\n     // In case we reorg beyond the pruned depth, ReadBlockFromDisk would\n     // throw and lead to a graceful shutdown\n-    m_best_block_index = new_tip;\n+    SetBestBlockIndex(new_tip);\n     if (!Commit()) {\n         // If commit fails, revert the best block index to avoid corruption.\n-        m_best_block_index = current_tip;\n+        SetBestBlockIndex(current_tip);\n         return false;\n     }\n \n@@ -258,7 +258,7 @@ void BaseIndex::BlockConnected(const std::shared_ptr<const CBlock>& block, const\n     }\n \n     if (WriteBlock(*block, pindex)) {\n-        m_best_block_index = pindex;\n+        SetBestBlockIndex(pindex);\n     } else {\n         FatalError(\"%s: Failed to write block %s to index\",\n                    __func__, pindex->GetBlockHash().ToString());\n@@ -365,3 +365,13 @@ IndexSummary BaseIndex::GetSummary() const\n     summary.best_block_height = m_best_block_index ? m_best_block_index.load()->nHeight : 0;\n     return summary;\n }\n+\n+void BaseIndex::SetBestBlockIndex(const CBlockIndex* block) {\n+    assert(!fPruneMode || AllowPrune());\n+\n+    m_best_block_index = block;\n+    if (AllowPrune() && block) {\n+        LOCK(::cs_main);\n+        m_chainstate->m_blockman.UpdatePruneBlocker(GetName(), block);\n+    }\n+}"
      },
      {
        "sha": "fb8b6e1eb8b7b8e3904bb1055c53dc2107171786",
        "filename": "src/index/base.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/base.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/base.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.h?ref=4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "patch": "@@ -103,6 +103,8 @@ class BaseIndex : public CValidationInterface\n     /// Get the name of the index for display in logs.\n     virtual const char* GetName() const = 0;\n \n+    virtual bool AllowPrune() const = 0;\n+\n public:\n     /// Destructor interrupts sync thread if running and blocks until it exits.\n     virtual ~BaseIndex();\n@@ -125,6 +127,8 @@ class BaseIndex : public CValidationInterface\n \n     /// Get a summary of the index and its state.\n     IndexSummary GetSummary() const;\n+\n+    void SetBestBlockIndex(const CBlockIndex* block);\n };\n \n #endif // BITCOIN_INDEX_BASE_H"
      },
      {
        "sha": "c3a31057cc87d54a6ef4f3d048d3f0a05ff63d68",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "patch": "@@ -51,6 +51,8 @@ class BlockFilterIndex final : public BaseIndex\n \n     const char* GetName() const override { return m_name.c_str(); }\n \n+    bool AllowPrune() const override { return true; }\n+\n public:\n     /** Constructs the index, which becomes available to be queried. */\n     explicit BlockFilterIndex(BlockFilterType filter_type,"
      },
      {
        "sha": "a33187ccfc5edd436b4df67e5d6558665258cf37",
        "filename": "src/index/coinstatsindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/coinstatsindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/coinstatsindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.h?ref=4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "patch": "@@ -47,6 +47,8 @@ class CoinStatsIndex final : public BaseIndex\n \n     const char* GetName() const override { return \"coinstatsindex\"; }\n \n+    bool AllowPrune() const override { return false; }\n+\n public:\n     // Constructs the index, which becomes available to be queried.\n     explicit CoinStatsIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);"
      },
      {
        "sha": "d53bc5962193fbe1688eaa121fe0b7c5bdd5cb2e",
        "filename": "src/index/txindex.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/txindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/index/txindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.h?ref=4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "patch": "@@ -27,6 +27,8 @@ class TxIndex final : public BaseIndex\n \n     const char* GetName() const override { return \"txindex\"; }\n \n+    bool AllowPrune() const override { return false; }\n+\n public:\n     /// Constructs the index, which becomes available to be queried.\n     explicit TxIndex(size_t n_cache_size, bool f_memory = false, bool f_wipe = false);"
      },
      {
        "sha": "f6f77be31c18ce71143b9372095629d45024b0be",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "patch": "@@ -18,7 +18,6 @@\n #include <deploymentstatus.h>\n #include <flatfile.h>\n #include <hash.h>\n-#include <index/blockfilterindex.h>\n #include <logging.h>\n #include <logging/timer.h>\n #include <node/blockstorage.h>\n@@ -1947,12 +1946,9 @@ bool CChainState::FlushStateToDisk(\n         CoinsCacheSizeState cache_state = GetCoinsCacheSizeState();\n         LOCK(cs_LastBlockFile);\n         if (fPruneMode && (fCheckForPruning || nManualPruneHeight > 0) && !fReindex) {\n-            // make sure we don't prune above the blockfilterindexes bestblocks\n+            // make sure we don't prune above any of the prune blockers bestblocks\n             // pruning is height-based\n             int last_prune = m_chain.Height(); // last height we can prune\n-            ForEachBlockFilterIndex([&](BlockFilterIndex& index) {\n-               last_prune = std::max(1, std::min(last_prune, index.GetSummary().best_block_height));\n-            });\n \n             for (auto const& blocker : m_blockman.m_prune_blockers) {\n                 const int blocker_height = blocker.second->nHeight - PRUNE_BLOCKER_BUFFER;"
      },
      {
        "sha": "df18995839edd749155818d445998e53bac48b71",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "patch": "@@ -11,8 +11,6 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util/system -> chainparamsbase\"\n     \"node/blockstorage -> validation -> node/blockstorage\"\n-    \"index/blockfilterindex -> node/blockstorage -> validation -> index/blockfilterindex\"\n-    \"index/base -> validation -> index/blockfilterindex -> index/base\"\n     \"index/coinstatsindex -> node/coinstats -> index/coinstatsindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"policy/rbf -> txmempool -> validation -> policy/rbf\""
      }
    ]
  },
  {
    "sha": "ba7af3ca89feecbaab482ff82fe33c9d5582386f",
    "node_id": "C_kwDOABII59oAKGJhN2FmM2NhODlmZWVjYmFhYjQ4MmZmODJmZTMzYzlkNTU4MjM4NmY",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-05-13T17:20:47Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:34:18Z"
      },
      "message": "Index: Allow coinstatsindex with pruning enabled",
      "tree": {
        "sha": "ff9cbb582ea56a409525f1949699740b120243c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff9cbb582ea56a409525f1949699740b120243c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba7af3ca89feecbaab482ff82fe33c9d5582386f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBbwVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN+fYP/ifD1MV6kU9etSDpztzePIIkCy5S\nXZ7YrZx78P0Ony5WshIQ5/NgffmXQiJwLQeLbmVR6Sxo2EzCSCrYaKq6gQoLXgcM\nQ8I3F7r55Y82yIFUxXGLqhgKGDVQnunhuEaIFXbUb1uRHLZMSvee0/wD0xrMBSDB\nBk9d6ik+essx5yWWTjGi4qYRQEqlWFMAA7keONnioXYEoF6tbzM57xTLtuzzvU8G\n9cRx8lV1+H6HqyWBYNS1giyqw+eAa80MQ4iCI5Zqpry9dgbz0cj5CnJN7KgVLZR6\nOwW0Llh27GAJGOA1hAbVXVXoKeotgVg+ZOBV9Hp7RwuaZLBxL5yky690GEJ89E1a\nSwor03jKaumpYapN1Gz7N2qXvQFwaZdzSe9beHz9IgH53bBnT7FRSMD5cmluJwPc\nul8NdcTrgVEV9meTLIDfFMu+dxlGyqLdjZgjyRQnpxOOuZbDT25vvevqeeV6CXs9\njbbXBr/Rlvar+n8S1ErXb4PMPYOsuElVY114OBtR2kO8JfmGGsFW3bEnDVoaQuZx\nElWFtoCwhr/LFqCmvGOJS+WCqZ4AWp1SJFnx4BAEWLKC9ed9PGu3kCob8NRgQyFB\ns/tMYBX0PqouIgIbDrOazARFSbU2n6XxbChia57sTA7H2fPJmoIRSRHLsIbF9D8Z\nhH4F3NpKkL1OK1p1\n=Mk/s\n-----END PGP SIGNATURE-----",
        "payload": "tree ff9cbb582ea56a409525f1949699740b120243c2\nparent 4f16ba1ed702dddb860f2dbe8283d389fef4c6d3\nauthor Fabian Jahr <fjahr@protonmail.com> 1620926447 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289658 +0200\n\nIndex: Allow coinstatsindex with pruning enabled\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7af3ca89feecbaab482ff82fe33c9d5582386f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7af3ca89feecbaab482ff82fe33c9d5582386f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7af3ca89feecbaab482ff82fe33c9d5582386f/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f16ba1ed702dddb860f2dbe8283d389fef4c6d3"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "233fe369e7737ba7d322ae14ed1cab73ca325dc3",
        "filename": "src/index/coinstatsindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7af3ca89feecbaab482ff82fe33c9d5582386f/src/index/coinstatsindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7af3ca89feecbaab482ff82fe33c9d5582386f/src/index/coinstatsindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/coinstatsindex.h?ref=ba7af3ca89feecbaab482ff82fe33c9d5582386f",
        "patch": "@@ -47,7 +47,7 @@ class CoinStatsIndex final : public BaseIndex\n \n     const char* GetName() const override { return \"coinstatsindex\"; }\n \n-    bool AllowPrune() const override { return false; }\n+    bool AllowPrune() const override { return true; }\n \n public:\n     // Constructs the index, which becomes available to be queried."
      },
      {
        "sha": "b98e8f18583de597f5c151fbc641feda34c10d4f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7af3ca89feecbaab482ff82fe33c9d5582386f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7af3ca89feecbaab482ff82fe33c9d5582386f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ba7af3ca89feecbaab482ff82fe33c9d5582386f",
        "patch": "@@ -397,7 +397,7 @@ void SetupServerArgs(ArgsManager& argsman)\n         -GetNumCores(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-persistmempool\", strprintf(\"Whether to save the mempool on shutdown and load on restart (default: %u)\", DEFAULT_PERSIST_MEMPOOL), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-pid=<file>\", strprintf(\"Specify pid file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_PID_FILENAME), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n-    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -coinstatsindex. \"\n+    argsman.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n     argsman.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", ArgsManager::ALLOW_ANY, OptionsCategory::OPTIONS);\n@@ -842,12 +842,10 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n         nLocalServices = ServiceFlags(nLocalServices | NODE_COMPACT_FILTERS);\n     }\n \n-    // if using block pruning, then disallow txindex and coinstatsindex\n+    // if using block pruning, then disallow txindex\n     if (args.GetIntArg(\"-prune\", 0)) {\n         if (args.GetBoolArg(\"-txindex\", DEFAULT_TXINDEX))\n             return InitError(_(\"Prune mode is incompatible with -txindex.\"));\n-        if (args.GetBoolArg(\"-coinstatsindex\", DEFAULT_COINSTATSINDEX))\n-            return InitError(_(\"Prune mode is incompatible with -coinstatsindex.\"));\n     }\n \n     // If -forcednsseed is set to true, ensure -dnsseed has not been set to false"
      },
      {
        "sha": "7f167fa25074abe40fb41bfa50c3132b4d11deae",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba7af3ca89feecbaab482ff82fe33c9d5582386f/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba7af3ca89feecbaab482ff82fe33c9d5582386f/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=ba7af3ca89feecbaab482ff82fe33c9d5582386f",
        "patch": "@@ -140,10 +140,6 @@ def test_invalid_command_line_options(self):\n             expected_msg='Error: Prune mode is incompatible with -txindex.',\n             extra_args=['-prune=550', '-txindex'],\n         )\n-        self.nodes[0].assert_start_raises_init_error(\n-            expected_msg='Error: Prune mode is incompatible with -coinstatsindex.',\n-            extra_args=['-prune=550', '-coinstatsindex'],\n-        )\n \n     def test_height_min(self):\n         assert os.path.isfile(os.path.join(self.prunedir, \"blk00000.dat\")), \"blk00000.dat is missing, pruning too early\""
      }
    ]
  },
  {
    "sha": "1b51e21290856c55370d5dfe9ea9221cbd9ab700",
    "node_id": "C_kwDOABII59oAKDFiNTFlMjEyOTA4NTZjNTUzNzBkNWRmZTllYTkyMjFjYmQ5YWI3MDA",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-05-13T17:32:09Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:34:20Z"
      },
      "message": "test: Update test for indices on pruned nodes",
      "tree": {
        "sha": "6b5d944d8c459296cc0ca284996d9ec4a77ae25b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6b5d944d8c459296cc0ca284996d9ec4a77ae25b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b51e21290856c55370d5dfe9ea9221cbd9ab700",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBbwVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNKCYQAIrzb734eN/XQVdhuV302UAtYuwo\nNxboF0WvZSIe8ahtHFVzyw/aLmKTxVaQZyLV1Gh5OezOvFE3pefCpiJakMuw8/gc\n53PBfA+eKJNFWpFNCOvqBggeYbwSagsQs5u4Wy1aH5D6Vvi+MZvaWKovJidTdfRd\nwLS2wMW/cQfQZ9i5mBUDgcgE6K83HLdJverTDWj6pWnAMCHRDLmwrpxBxNakpdQI\neyF2KTBEZK/Mz0lIaKKVUU3a8Xbqcpk992h1GblZoGfgRD8KTL/kQYR9uMW0nt9r\nOwLnBNiRWuLPhjLY4UA0g7Ltfr/UcxtSVUaWI/K1XsbYphS3ox1vvwyNzHazR3B8\n5Gxyp1JcfT5wI12B+8LG2B2Y3pYIOcMi8HH9Tch49+rl3QhaF6ndeg879pikBzI/\nKCrhJWT7qzeXpS7GnMbx9eEcpADPQWL37L0ngRxAjfbdCN09EHfqhet//QKMG92V\n7Fh0mVGLfmcBhxX35YzljN3ZPr1O0y8RotOfH/dmD+UVhwMX0VknE+6AUAVWWk9R\nEJ9UDCbwsi5mBqgDCZWd/UmEE9FgwacM9WZiRQIYV1EzusRqtJCbX2mAFXbRRQar\n6rObz2yug885/grJKiYklhhmWWFXo1HYH4hbrP1HaFeTEPembW/9dt5dMeCV0YBV\nBetAOygd71BN0pXJ\n=4wRs\n-----END PGP SIGNATURE-----",
        "payload": "tree 6b5d944d8c459296cc0ca284996d9ec4a77ae25b\nparent ba7af3ca89feecbaab482ff82fe33c9d5582386f\nauthor Fabian Jahr <fjahr@protonmail.com> 1620927129 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289660 +0200\n\ntest: Update test for indices on pruned nodes\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b51e21290856c55370d5dfe9ea9221cbd9ab700",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b51e21290856c55370d5dfe9ea9221cbd9ab700",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b51e21290856c55370d5dfe9ea9221cbd9ab700/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ba7af3ca89feecbaab482ff82fe33c9d5582386f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba7af3ca89feecbaab482ff82fe33c9d5582386f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba7af3ca89feecbaab482ff82fe33c9d5582386f"
      }
    ],
    "stats": {
      "total": 137,
      "additions": 101,
      "deletions": 36
    },
    "files": [
      {
        "sha": "2a9969dd4fe04c7480e68bfc7c6581a7cde151aa",
        "filename": "test/functional/feature_blockfilterindex_prune.py",
        "status": "modified",
        "additions": 101,
        "deletions": 36,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b51e21290856c55370d5dfe9ea9221cbd9ab700/test/functional/feature_blockfilterindex_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b51e21290856c55370d5dfe9ea9221cbd9ab700/test/functional/feature_blockfilterindex_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_blockfilterindex_prune.py?ref=1b51e21290856c55370d5dfe9ea9221cbd9ab700",
        "patch": "@@ -1,67 +1,132 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n+# Copyright (c) 2020-2021 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Test blockfilterindex in conjunction with prune.\"\"\"\n+\"\"\"Test indices in conjunction with prune.\"\"\"\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n+    p2p_port,\n )\n \n \n-class FeatureBlockfilterindexPruneTest(BitcoinTestFramework):\n+class FeatureIndexPruneTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 1\n-        self.extra_args = [[\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"]]\n+        self.num_nodes = 4\n+        self.extra_args = [\n+            [\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"],\n+            [\"-fastprune\", \"-prune=1\", \"-coinstatsindex=1\"],\n+            [\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\", \"-coinstatsindex=1\"],\n+            []\n+        ]\n \n     def sync_index(self, height):\n-        expected = {'basic block filter index': {'synced': True, 'best_block_height': height}}\n-        self.wait_until(lambda: self.nodes[0].getindexinfo() == expected)\n+        expected_filter = {\n+            'basic block filter index': {'synced': True, 'best_block_height': height},\n+        }\n+        self.wait_until(lambda: self.nodes[0].getindexinfo() == expected_filter)\n+\n+        expected_stats = {\n+            'coinstatsindex': {'synced': True, 'best_block_height': height}\n+        }\n+        self.wait_until(lambda: self.nodes[1].getindexinfo() == expected_stats)\n+\n+        expected = {**expected_filter, **expected_stats}\n+        self.wait_until(lambda: self.nodes[2].getindexinfo() == expected)\n+\n+    def reconnect_nodes(self):\n+        self.connect_nodes(0,1)\n+        self.connect_nodes(0,2)\n+        self.connect_nodes(0,3)\n+\n+    def mine_batches(self, n):\n+        for _ in range(n):\n+            self.nodes[0].generate(250)\n+            self.sync_blocks()\n \n     def run_test(self):\n-        self.log.info(\"check if we can access a blockfilter when pruning is enabled but no blocks are actually pruned\")\n+        filter_nodes = [self.nodes[0], self.nodes[2]]\n+        stats_nodes = [self.nodes[1], self.nodes[2]]\n+\n+        self.log.info(\"check if we can access blockfilters and coinstats when pruning is enabled but no blocks are actually pruned\")\n         self.sync_index(height=200)\n-        assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n+        tip = self.nodes[0].getbestblockhash()\n+        for node in filter_nodes:\n+            assert_greater_than(len(node.getblockfilter(tip)['filter']), 0)\n+        for node in stats_nodes:\n+            assert(node.gettxoutsetinfo(hash_type=\"muhash\", hash_or_height=tip)['muhash'])\n+\n         # Mine two batches of blocks to avoid hitting NODE_NETWORK_LIMITED_MIN_BLOCKS disconnection\n-        self.generate(self.nodes[0], 250)\n-        self.sync_all()\n-        self.generate(self.nodes[0], 250)\n-        self.sync_all()\n+        self.mine_batches(2)\n         self.sync_index(height=700)\n \n+        for node in self.nodes[:2]:\n+            with node.assert_debug_log(['limited pruning to height 690']):\n+                pruneheight_new = node.pruneblockchain(400)\n+                assert_equal(pruneheight_new, 248)\n+\n         self.log.info(\"prune some blocks\")\n-        pruneheight = self.nodes[0].pruneblockchain(400)\n-        assert_equal(pruneheight, 248)\n+        for node in self.nodes[:2]:\n+            pruneheight = node.pruneblockchain(400)\n+            assert_equal(pruneheight, 248)\n+\n+        self.log.info(\"check if we can access the tips blockfilter and coinstats when we have pruned some blocks\")\n+        tip = self.nodes[0].getbestblockhash()\n+        for node in filter_nodes:\n+            assert_greater_than(len(node.getblockfilter(tip)['filter']), 0)\n+        for node in stats_nodes:\n+            assert(node.gettxoutsetinfo(hash_type=\"muhash\", hash_or_height=tip)['muhash'])\n+\n+        self.log.info(\"check if we can access the blockfilter and coinstats of a pruned block\")\n+        height_hash = self.nodes[0].getblockhash(2)\n+        for node in filter_nodes:\n+            assert_greater_than(len(node.getblockfilter(height_hash)['filter']), 0)\n+        for node in stats_nodes:\n+            assert(node.gettxoutsetinfo(hash_type=\"muhash\", hash_or_height=height_hash)['muhash'])\n+\n+        self.log.info(\"restart nodes without indices\")\n+        for i in range(3):\n+            self.restart_node(i, extra_args=[\"-fastprune\", \"-prune=1\"])\n+        self.reconnect_nodes()\n \n-        self.log.info(\"check if we can access the tips blockfilter when we have pruned some blocks\")\n-        assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getbestblockhash())['filter']), 0)\n+        self.log.info(\"make sure trying to access the indices throws errors\")\n+        for node in filter_nodes:\n+            msg = \"Index is not enabled for filtertype basic\"\n+            assert_raises_rpc_error(-1, msg, node.getblockfilter, height_hash)\n+        for node in stats_nodes:\n+            msg = \"Querying specific block heights requires coinstatsindex\"\n+            assert_raises_rpc_error(-8, msg, node.gettxoutsetinfo, \"muhash\", height_hash)\n \n-        self.log.info(\"check if we can access the blockfilter of a pruned block\")\n-        assert_greater_than(len(self.nodes[0].getblockfilter(self.nodes[0].getblockhash(2))['filter']), 0)\n+        self.mine_batches(4)\n \n-        self.log.info(\"start node without blockfilterindex\")\n-        self.restart_node(0, extra_args=[\"-fastprune\", \"-prune=1\"])\n+        self.log.info(\"prune further than the indices best blocks while the indices are disabled\")\n+        for i in range(3):\n+            pruneheight_new = self.nodes[i].pruneblockchain(1000)\n+            assert_greater_than(pruneheight_new, 700)\n+            self.stop_node(i)\n \n-        self.log.info(\"make sure accessing the blockfilters throws an error\")\n-        assert_raises_rpc_error(-1, \"Index is not enabled for filtertype basic\", self.nodes[0].getblockfilter, self.nodes[0].getblockhash(2))\n-        self.generate(self.nodes[0], 1000)\n+        self.log.info(\"make sure we get an init error when starting the nodes again with the indices\")\n+        filter_msg = \"Error: basic block filter index best block of the index goes beyond pruned data. Please disable the index or reindex (which will download the whole blockchain again)\"\n+        stats_msg = \"Error: coinstatsindex best block of the index goes beyond pruned data. Please disable the index or reindex (which will download the whole blockchain again)\"\n+        for i, msg in enumerate([filter_msg, stats_msg, filter_msg]):\n+            self.nodes[i].assert_start_raises_init_error(extra_args=self.extra_args[i], expected_msg=msg)\n \n-        self.log.info(\"prune below the blockfilterindexes best block while blockfilters are disabled\")\n-        pruneheight_new = self.nodes[0].pruneblockchain(1000)\n-        assert_greater_than(pruneheight_new, pruneheight)\n-        self.stop_node(0)\n+        self.log.info(\"make sure the nodes start again with the indices and an additional -reindex arg\")\n+        ip_port = \"127.0.0.1:\" + str(p2p_port(3))\n+        for i in range(3):\n+            # The nodes need to be reconnected to the non-pruning node upon restart, otherwise they will be stuck\n+            restart_args = self.extra_args[i]+[\"-reindex\", f\"-connect={ip_port}\"]\n+            self.restart_node(i, extra_args=restart_args)\n \n-        self.log.info(\"make sure we get an init error when starting the node again with block filters\")\n-        self.nodes[0].assert_start_raises_init_error(\n-            extra_args=[\"-fastprune\", \"-prune=1\", \"-blockfilterindex=1\"],\n-            expected_msg=\"Error: basic block filter index best block of the index goes beyond pruned data. Please disable the index or reindex (which will download the whole blockchain again)\",\n-        )\n+        self.sync_blocks(timeout=300)\n \n-        self.log.info(\"make sure the node starts again with the -reindex arg\")\n-        self.start_node(0, extra_args=[\"-fastprune\", \"-prune=1\", \"-blockfilterindex\", \"-reindex\"])\n+        for node in self.nodes[:2]:\n+            with node.assert_debug_log(['limited pruning to height 1690']):\n+                pruneheight_new = node.pruneblockchain(1000)\n+                assert_equal(pruneheight_new, 998)\n \n \n if __name__ == '__main__':\n-    FeatureBlockfilterindexPruneTest().main()\n+    FeatureIndexPruneTest().main()"
      }
    ]
  },
  {
    "sha": "10eb269e04c3306ba3749e2d178253747319a565",
    "node_id": "C_kwDOABII59oAKDEwZWIyNjllMDRjMzMwNmJhMzc0OWUyZDE3ODI1Mzc0NzMxOWE1NjU",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-05-13T17:33:08Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:34:21Z"
      },
      "message": "move-only: Rename index + pruning functional test",
      "tree": {
        "sha": "8245cfdadc87ca16fdc416a3655f0d6d8c28d9d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8245cfdadc87ca16fdc416a3655f0d6d8c28d9d1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10eb269e04c3306ba3749e2d178253747319a565",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBb0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN6QgP/0No/5U9Pz9GJBKCpzK/9AJ3CWkS\nNOR2icov9vaGG359MAOj29CEX6e//nn6ssDG8dIXSu60Pth/Cn2UQUkhpsQXGQPt\nt17/kH36qKcqEXQLX1Yux+UUPcj02Y+bHMCIQeCaAed74morVlFDeCA0abxWuuGS\nPB2bZVAnG1f2HtJLkrvHbDngL1CiuOPXNs3iBazOjCDidFTMtegXNdkpQzhjyOhm\nYohYgmL6djJj3m5mwIGRoOjvsViNCDCvl/FHxoLpJU0J3/4A0zbWeoV1jbn1vgM6\nGDX95vHnT1TNG7eAkbS5GI/ql/ZJn+EWVqroEuhHUuGJjMk+voDhzzRyg+f27tP+\n7k0uf7JjhzJXwDuNdYy8OyWzKvK1zk2q8C3yDN8sNvn06RuXUAnbiEFctqcrhRXq\nHuhJPVDbKIhYCsEVzbDe8aYkXlNKtvuXFl6hRqDFB9ILq6aNSbJks7CHGl/8dL7J\ndu8+N58QPssPSYh6nzKPkYoQJXz8EuUYKtRsPerVpM8oENC+01R0UfYO07A0HiC/\no6TAf1na7du89SN/ByyB06RWcmY0Gyh0U8sfgoraGJCfd9u804WBuSIhZ60coVSe\nZX+d7mr1O73IPVXqvk1RgmQQ4nHG8ZPn/pMfeZheLtb6X9CLL+a1JnSFhTvznDYY\ngzyGgTRZkpfSQm4z\n=BWkc\n-----END PGP SIGNATURE-----",
        "payload": "tree 8245cfdadc87ca16fdc416a3655f0d6d8c28d9d1\nparent 1b51e21290856c55370d5dfe9ea9221cbd9ab700\nauthor Fabian Jahr <fjahr@protonmail.com> 1620927188 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289661 +0200\n\nmove-only: Rename index + pruning functional test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10eb269e04c3306ba3749e2d178253747319a565",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10eb269e04c3306ba3749e2d178253747319a565",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10eb269e04c3306ba3749e2d178253747319a565/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b51e21290856c55370d5dfe9ea9221cbd9ab700",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b51e21290856c55370d5dfe9ea9221cbd9ab700",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b51e21290856c55370d5dfe9ea9221cbd9ab700"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "2a9969dd4fe04c7480e68bfc7c6581a7cde151aa",
        "filename": "test/functional/feature_index_prune.py",
        "status": "renamed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10eb269e04c3306ba3749e2d178253747319a565/test/functional/feature_index_prune.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10eb269e04c3306ba3749e2d178253747319a565/test/functional/feature_index_prune.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_index_prune.py?ref=10eb269e04c3306ba3749e2d178253747319a565",
        "previous_filename": "test/functional/feature_blockfilterindex_prune.py"
      },
      {
        "sha": "d751bdc4bd0aed870713aa97e1392855146ddf5a",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10eb269e04c3306ba3749e2d178253747319a565/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10eb269e04c3306ba3749e2d178253747319a565/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=10eb269e04c3306ba3749e2d178253747319a565",
        "patch": "@@ -310,7 +310,7 @@\n     'feature_help.py',\n     'feature_shutdown.py',\n     'p2p_ibd_txrelay.py',\n-    'feature_blockfilterindex_prune.py'\n+    'feature_index_prune.py'\n     # Don't append tests at the end to avoid merge conflicts\n     # Put them in a random line within the section that fits their approximate run-time\n ]"
      }
    ]
  },
  {
    "sha": "86121153164a05a5da9812010f0bfdab434bec1f",
    "node_id": "C_kwDOABII59oAKDg2MTIxMTUzMTY0YTA1YTVkYTk4MTIwMTBmMGJmZGFiNDM0YmVjMWY",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-05-26T23:22:55Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2021-10-03T19:34:21Z"
      },
      "message": "Index: Skip pruning checks when node is not pruning",
      "tree": {
        "sha": "c9cbc8845f1f0bbca033c5a5936d2bfa724d5290",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9cbc8845f1f0bbca033c5a5936d2bfa724d5290"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86121153164a05a5da9812010f0bfdab434bec1f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAmFaBb0VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jN+ZAP/iCf3BbCw5KzwHlQqa3pVIYoWRba\nl5ZIuPIf6LvbvLG28BA0FASafi1pHtJnd1jhOArfNM/2dhlfUXsQ+buIalb3L/ci\n5GCo51sBz6hpv/m82p4ULgQQyD5nfJM3KAZuwsTPbkkDD2KXAx5itEWzCG8R3C9P\nItLVknYPZIYjDRkaHiOQBOzA4Z8J8uwD0kLXI3qtv68u8QiOsZXMjyI501eX6+0u\n/+S95vAFu36hKQoZ/KdFrMXBs7Ert23trqEeNA6mjmswskdcCb3RydWDjJv5puI1\nXt6A9z37eyK1XMnkNado/h5ZUSx7x+qC5xzWn4Hs2qdvzvpze9w4bGszh/7bZN+n\nhNUHDBBX62aGoX3wRos6RUIx6RUjUW9gGwwqXWrBAAof3winqwwhEmNLEvuletZ2\n4sfnHmiDIoj/3KfwFCw3D+1Nfty0C2G1Aq9V6Vq8sl9CW6YTZrKzkJDQ6WVrcmJJ\nxRRLp9ROzmpkkM9HQzvbCtE8gJT7kxPOZ8sUdekaIhIrmSXaq1RKujuKzR18AqEw\n7iLf/kxb85wTMhiJgjP+PQaYckxd7wF2Oo1VhQBFwJlWCkTUOSeI/6L1RHBy/nbP\nf/LTuOumvqTpiizKbo6soRIB0QLz2TfkXXo6IJxpZonhuKbA2BO1RLiYNcHVb90C\nXiFJC7vZg11jEskl\n=IJPV\n-----END PGP SIGNATURE-----",
        "payload": "tree c9cbc8845f1f0bbca033c5a5936d2bfa724d5290\nparent 10eb269e04c3306ba3749e2d178253747319a565\nauthor Fabian Jahr <fjahr@protonmail.com> 1622071375 +0200\ncommitter Fabian Jahr <fjahr@protonmail.com> 1633289661 +0200\n\nIndex: Skip pruning checks when node is not pruning\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86121153164a05a5da9812010f0bfdab434bec1f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86121153164a05a5da9812010f0bfdab434bec1f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86121153164a05a5da9812010f0bfdab434bec1f/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "10eb269e04c3306ba3749e2d178253747319a565",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10eb269e04c3306ba3749e2d178253747319a565",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10eb269e04c3306ba3749e2d178253747319a565"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "81be1f868aeb3d7a5bec6123884c4643bce36606",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86121153164a05a5da9812010f0bfdab434bec1f/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86121153164a05a5da9812010f0bfdab434bec1f/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=86121153164a05a5da9812010f0bfdab434bec1f",
        "patch": "@@ -67,7 +67,7 @@ bool BaseIndex::Init()\n         SetBestBlockIndex(m_chainstate->m_blockman.FindForkInGlobalIndex(active_chain, locator));\n     }\n     m_synced = m_best_block_index.load() == active_chain.Tip();\n-    if (!m_synced) {\n+    if (!m_synced && (fPruneMode || fHavePruned) && !fReindex) {\n         bool prune_violation = false;\n         if (!m_best_block_index) {\n             // index is not built yet\n@@ -370,7 +370,7 @@ void BaseIndex::SetBestBlockIndex(const CBlockIndex* block) {\n     assert(!fPruneMode || AllowPrune());\n \n     m_best_block_index = block;\n-    if (AllowPrune() && block) {\n+    if (AllowPrune() && block && (fPruneMode || fHavePruned) && !fReindex) {\n         LOCK(::cs_main);\n         m_chainstate->m_blockman.UpdatePruneBlocker(GetName(), block);\n     }"
      }
    ]
  }
]