DrahtBot,2020-07-27 23:26:59,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17977 (Implement BIP 340-342 validation (Schnorr/taproot/tapscript) by sipa)\n\nIf you consider this pull request importa",https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-664689148,664689148,
instagibbs,2020-07-30 20:39:27,"I have mild preference for other PR but\n\nutACK https://github.com/bitcoin/bitcoin/pull/19601/commits/2f450929c8fa29a56afe0a05cc482cea71c23ada",https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-666681271,666681271,
sipa,2020-08-04 19:35:25,I prefer this PR over #18071 (but see nit above).,https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-668785825,668785825,
practicalswift,2020-08-05 16:14:33,"Concept ACK\n\nI prefer this PR over the alternative (#1807)1: this one is simpler and thus more likely to be used correctly by callers.\n\nAdding `NODISCARD` to `SHA256Uint256` would be nice as observed by sipa.",https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-669287841,669287841,
JeremyRubin,2020-08-07 03:38:16,rebased and added NODISCARD.,https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-670303708,670303708,
jnewbery,2020-08-07 19:23:54,Code review ACK 9ab4cafabda227ccee5b241d7690fc67f9a27221,https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-670675045,670675045,
practicalswift,2020-08-08 04:08:09,Nit: Could add unit tests for the newly introduced functions?,https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-670820415,670820415,
practicalswift,2020-08-09 06:35:35,"> On tests: I think it's ok as is in this case because `CSHA256` is tested extensively and the `GetHash()` function is used in several test cases as a utility. If the `GetSHA256()` would be used inside `GetHash()` it would be covered through those as well.\n\nAFAICT `SHA256Uint256` is used in `src/script/interpreter.cpp` but not tested directly, or indirectly via a call from another tested funct",https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-671013896,671013896,
JeremyRubin,2020-08-09 17:08:22,"We should be hitting the PrecomputedTransactionData init all across the tests, and then validation would fail in numerous places if those have an error.",https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-671076956,671076956,
JeremyRubin,2020-08-09 17:10:07,"In fact I'd go as far as to say if this code *isn't* already widely tested, we have bigger problems (because it would mean we have no tests covering our PrecomputedTransactionData).",https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-671077151,671077151,
sipa,2020-08-09 17:12:32,"It's also an absolutely trivial function. Testing is important, but there is no point in wasting effort on more than a covering test for a single-line wrapper around otherwise very well-tested code.",https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-671077392,671077392,
jnewbery,2020-08-24 09:15:47,@sipa @instagibbs mind re-reviewing this? It's a fairly basic change and it'd be nice to get it merged to simplify #19055 and #17977,https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-679010560,679010560,
instagibbs,2020-08-24 13:13:44,reACK https://github.com/bitcoin/bitcoin/pull/19601/commits/9ab4cafabda227ccee5b241d7690fc67f9a27221,https://github.com/bitcoin/bitcoin/pull/19601#issuecomment-679118322,679118322,
sipa,2020-08-03 20:02:32,Why this weird double assignment? `= SHA256Uint256(GetPrevoutsSHA256(txTo))` is shorter and more clear IMO.,https://github.com/bitcoin/bitcoin/pull/19601#discussion_r464632733,464632733,src/script/interpreter.cpp
JeremyRubin,2020-08-04 00:28:09,"This PR was made before https://github.com/bitcoin/bitcoin/pull/17977#discussion_r461316301 was added (or before I saw it at least).\n\nI specifically made it so it would be easy on rebase to switch the first assignment and argument to SHA256Uint256 to `m_hash_prevouts` for taproot, but now since that logic is all different it's not clear that this is an easier rebase. In any case, this part of ",https://github.com/bitcoin/bitcoin/pull/19601#discussion_r464731026,464731026,src/script/interpreter.cpp
sipa,2020-08-04 19:34:53,Don't worry about such trivial rebasing impact on #17977.,https://github.com/bitcoin/bitcoin/pull/19601#discussion_r465284130,465284130,src/script/interpreter.cpp
sipa,2020-08-04 19:36:12,Perhaps add `NODISCARD` here to guard against the issue you pointed out in the other PR.,https://github.com/bitcoin/bitcoin/pull/19601#discussion_r465284834,465284834,src/hash.h
jnewbery,2020-08-07 11:57:09,#17977 adds doxygen comments for this functions (https://github.com/bitcoin/bitcoin/pull/17977/files#diff-be2905e2f5218ecdbe4e55637dac75f3R1352). Mind doing the same here?,https://github.com/bitcoin/bitcoin/pull/19601#discussion_r466994129,466994129,src/script/interpreter.cpp
JeremyRubin,2020-08-07 18:09:03,"done\n",https://github.com/bitcoin/bitcoin/pull/19601#discussion_r467193729,467193729,src/script/interpreter.cpp
fjahr,2020-08-08 18:59:43,"nit to consider if you retouch: this should work as well and might be a bit more concise (removing the first line in the function as well)\n\n```suggestion\n        uint256 result = GetSHA256();\n```\n\nThe whole function could even be written like this (but I think I slightly prefer the version above to this one):\n\n```\n        uint256 sha256 = GetSHA256();\n        ctx.Reset().Write(",https://github.com/bitcoin/bitcoin/pull/19601#discussion_r467494123,467494123,src/hash.h
JeremyRubin,2020-08-25 00:12:29,"resolving as a fixlater -- at some point, the SHA256 crypto interfaces are going to span-ified, and at that point this code will be touched up anyways :)",https://github.com/bitcoin/bitcoin/pull/19601#discussion_r475988636,475988636,src/hash.h
