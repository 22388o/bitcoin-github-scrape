[
  {
    "sha": "8045214acc1701f1b1f7228217fe5f36f91e38d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MDQ1MjE0YWNjMTcwMWYxYjFmNzIyODIxN2ZlNWYzNmY5MWUzOGQ3",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-22T09:07:23Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-10-22T09:10:25Z"
      },
      "message": "Avoid unintended unsigned integer wraparounds in FormatScript(...) and SplitHostPort(...)",
      "tree": {
        "sha": "c4bbe78d82c1359646bcb24f92073f9885da3887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4bbe78d82c1359646bcb24f92073f9885da3887"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8045214acc1701f1b1f7228217fe5f36f91e38d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8045214acc1701f1b1f7228217fe5f36f91e38d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8045214acc1701f1b1f7228217fe5f36f91e38d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8045214acc1701f1b1f7228217fe5f36f91e38d7/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0e51394139822137ca090f23e60cfe0cad4d123",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0e51394139822137ca090f23e60cfe0cad4d123",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0e51394139822137ca090f23e60cfe0cad4d123"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "db48d25d3a97f524d66b45de916bb78411db5cd1",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8045214acc1701f1b1f7228217fe5f36f91e38d7/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8045214acc1701f1b1f7228217fe5f36f91e38d7/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=8045214acc1701f1b1f7228217fe5f36f91e38d7",
        "patch": "@@ -58,7 +58,7 @@ std::string FormatScript(const CScript& script)\n         ret += strprintf(\"0x%x \", HexStr(it2, script.end()));\n         break;\n     }\n-    return ret.substr(0, ret.size() - 1);\n+    return ret.size() > 0 ? ret.substr(0, ret.size() - 1) : ret;\n }\n \n const std::map<unsigned char, std::string> mapSigHashTypes = {"
      },
      {
        "sha": "1690034e4be15f899d7f5d9e9d72cdce0dd8493d",
        "filename": "src/utilstrencodings.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8045214acc1701f1b1f7228217fe5f36f91e38d7/src/utilstrencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8045214acc1701f1b1f7228217fe5f36f91e38d7/src/utilstrencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/utilstrencodings.cpp?ref=8045214acc1701f1b1f7228217fe5f36f91e38d7",
        "patch": "@@ -109,7 +109,7 @@ void SplitHostPort(std::string in, int &portOut, std::string &hostOut) {\n     // if a : is found, and it either follows a [...], or no other : is in the string, treat it as port separator\n     bool fHaveColon = colon != in.npos;\n     bool fBracketed = fHaveColon && (in[0]=='[' && in[colon-1]==']'); // if there is a colon, and in[0]=='[', colon is not 0, so in[colon-1] is safe\n-    bool fMultiColon = fHaveColon && (in.find_last_of(':',colon-1) != in.npos);\n+    bool fMultiColon = fHaveColon && colon != 0 && (in.find_last_of(':', colon - 1) != in.npos);\n     if (fHaveColon && (colon==0 || fBracketed || !fMultiColon)) {\n         int32_t n;\n         if (ParseInt32(in.substr(colon + 1), &n) && n > 0 && n < 0x10000) {"
      }
    ]
  }
]