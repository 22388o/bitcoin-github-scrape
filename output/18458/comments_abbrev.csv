practicalswift,2020-03-29 12:17:49,"Concept ACK\n\nVery nice to see a `NO_THREAD_SAFETY_ANALYSIS` annotation go :)\n\nFWIW:\n\n```\n$ git grep -E ""^[^/]*NO_THREAD_SAFETY_ANALYSIS"" -- "":(exclude)src/leveldb/"" "":(exclude)src/threadsafety.h""\nsrc/net.h:    void Stop() NO_THREAD_SAFETY_ANALYSIS;\nsrc/wallet/wallet.h:    CAmount GetAvailableCredit(bool fUseCache = true, const isminefilter& filter = ISMINE_SPENDABLE) const NO_THR",https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-605627371,605627371,
MarcoFalke,2020-03-29 13:36:26,Fixed circular dependency as requested by @laanwj and @sipa ,https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-605636751,605636751,
MarcoFalke,2020-03-29 15:51:05,"Took suggestion by @promag \n\n> You could also add annotation to Stop.\n\nNo, that would be incorrect. The locks are *not needed* for the correct functionality of the connection manager itself. They are only needed when the connection manager is used in the context of a full node that also runs net processing and a scheduler. I think init.cpp is the best place to document this, since that is ",https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-605657525,605657525,
promag,2020-03-29 16:01:25,Code review ACK fa369651c5523f393e0bfcfa328b8e27006711aa.,https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-605658859,605658859,
DrahtBot,2020-03-29 19:34:29,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #14053 (Add address-based index (attempt 4?) by marcinja)\n\nIf you consider this pull request important, please also help",https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-605687795,605687795,
MarcoFalke,2020-04-02 16:54:53,Would be nice to get one or two more ACKs on this,https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-607966426,607966426,
promag,2020-04-02 23:29:59,"ACK ACK, you are welcome.",https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-608145379,608145379,
laanwj,2020-04-06 18:54:17,ACK fa369651c5523f393e0bfcfa328b8e27006711aa,https://github.com/bitcoin/bitcoin/pull/18458#issuecomment-609974801,609974801,
laanwj,2020-03-28 16:00:00,"It seems like kind of a layer violation to import these here, but, I don't know a better solution either.\n",https://github.com/bitcoin/bitcoin/pull/18458#discussion_r399677924,399677924,src/net.cpp
MarcoFalke,2020-03-28 16:32:39,"Agree that it is a layer violation. If I included it via the header, it would be a circular dependency according to some linter we run. But the same pattern is used in a lot of other places, see `git grep 'extern RecursiveMutex cs_main;'`. Those philosophical locking ""issues"" and code dependencies/layer violations can be fixed later, if needed.",https://github.com/bitcoin/bitcoin/pull/18458#discussion_r399681547,399681547,src/net.cpp
sipa,2020-03-28 18:48:00,"This is pretty ugly, but I see it may be needed. Agreed with fixing it this way for now.\n\nFWIW, IMO having an 'extern' like this is as much a circular dependency as what you're trying to avoid, just one that isn't detected by the linter.",https://github.com/bitcoin/bitcoin/pull/18458#discussion_r399695830,399695830,src/net.cpp
MarcoFalke,2020-03-28 19:16:31,At least with `extern` we can avoid including the full header and littering the namespace here ;),https://github.com/bitcoin/bitcoin/pull/18458#discussion_r399698672,399698672,src/net.cpp
MarcoFalke,2020-03-29 13:36:02,Fixed,https://github.com/bitcoin/bitcoin/pull/18458#discussion_r399798852,399798852,src/net.cpp
