[
  {
    "sha": "e0cf3e429707a7dd054e0396e67ee378bdc83d44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMGNmM2U0Mjk3MDdhN2RkMDU0ZTAzOTZlNjdlZTM3OGJkYzgzZDQ0",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-17T21:56:43Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-18T16:27:05Z"
      },
      "message": "Encapsulate mempool policy.\n\nThis code is an adaption of jtimon's commit 3d03f15 for turning policy globals into attributes of a policy class.",
      "tree": {
        "sha": "4d0a5bd175a7a55ef57c779b3887b6859d8a2075",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d0a5bd175a7a55ef57c779b3887b6859d8a2075"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e0cf3e429707a7dd054e0396e67ee378bdc83d44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cf3e429707a7dd054e0396e67ee378bdc83d44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cf3e429707a7dd054e0396e67ee378bdc83d44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cf3e429707a7dd054e0396e67ee378bdc83d44/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b70a64d62c6e64288762d062414cc979f880c54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b70a64d62c6e64288762d062414cc979f880c54",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b70a64d62c6e64288762d062414cc979f880c54"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 83,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ac713eae70401800ba38c5944b11c8606196e067",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "patch": "@@ -122,6 +122,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   noui.h \\\n   policy/fees.h \\\n+  policy/mempool.h \\\n   policy/policy.h \\\n   policy/rbf.h \\\n   pow.h \\\n@@ -189,6 +190,7 @@ libbitcoin_server_a_SOURCES = \\\n   net.cpp \\\n   noui.cpp \\\n   policy/fees.cpp \\\n+  policy/mempool.cpp \\\n   policy/policy.cpp \\\n   pow.cpp \\\n   rest.cpp \\"
      },
      {
        "sha": "3a4cd678f6524b0954c7fde86dcffdb56fc91911",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "patch": "@@ -22,6 +22,7 @@\n #include \"main.h\"\n #include \"miner.h\"\n #include \"net.h\"\n+#include \"policy/mempool.h\"\n #include \"policy/policy.h\"\n #include \"rpc/server.h\"\n #include \"script/standard.h\"\n@@ -485,6 +486,8 @@ std::string HelpMessage(HelpMessageMode mode)\n \n     AppendParamsHelpMessages(strUsage, showDebug);\n \n+    mempoolPolicy.AppendHelpMessages(strUsage, showDebug);\n+\n     strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-acceptnonstdtxn\", strprintf(\"Relay and mine \\\"non-standard\\\" transactions (%sdefault: %u)\", \"testnet/regtest only; \", !Params(CBaseChainParams::TESTNET).RequireStandard()));\n@@ -971,6 +974,12 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         else\n             return InitError(AmountErrMsg(\"minrelaytxfee\", mapArgs[\"-minrelaytxfee\"]));\n     }\n+    try {\n+        mempoolPolicy.InitFromArgs();\n+    } catch(const std::exception& e) {\n+        return InitError(strprintf(_(\"Error while initializing mempool policy: %s\"), e.what()));\n+    }\n+\n \n     fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n     if (Params().RequireStandard() && !fRequireStandard)"
      },
      {
        "sha": "62d0b53765b2cf85d0b14048364c91a8ed65616a",
        "filename": "src/policy/mempool.cpp",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/policy/mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/policy/mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/mempool.cpp?ref=e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2015-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"policy/mempool.h\"\n+\n+#include \"tinyformat.h\"\n+#include \"util.h\"\n+#include \"utilstrencodings.h\"\n+\n+MempoolPolicy mempoolPolicy;\n+\n+void MempoolPolicy::InitFromArgs()\n+{\n+}\n+\n+std::vector<std::pair<std::string, std::string> > MempoolPolicy::GetOptionsHelp(bool showDebug) const\n+{\n+    std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    return optionsHelp;\n+}\n+\n+void MempoolPolicy::AppendHelpMessages(std::string& strUsage, bool showDebug)\n+{\n+    strUsage += HelpMessageGroup(_(\"Mempool Policy options:\"));\n+    AppendMessagesOpt(strUsage, GetOptionsHelp(showDebug));\n+}"
      },
      {
        "sha": "0269c0121fbffb0cdaecc330851f16b739deaad7",
        "filename": "src/policy/mempool.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/policy/mempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/policy/mempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/mempool.h?ref=e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2015-2016 The Bitcoin developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_MEMPOOLPOLICY_H\n+#define BITCOIN_MEMPOOLPOLICY_H\n+\n+#include <string>\n+#include <vector>\n+\n+/**\n+ * \\class MempoolPolicy\n+ * Encapsulate parameters needed for mempool policy\n+ */\n+class MempoolPolicy\n+{\n+public:\n+    void InitFromArgs();\n+    /**\n+     * @return a formatted HelpMessage string with the mempool policy options\n+     */\n+    std::vector<std::pair<std::string, std::string> > GetOptionsHelp(bool showDebug) const;\n+    /**\n+     * Append a help string for the options of the selected policy.\n+     * @param strUsage a formatted HelpMessage string with mempool policy\n+     * options appended to the string\n+     */\n+    void AppendHelpMessages(std::string& strUsage, bool showDebug);\n+};\n+\n+extern MempoolPolicy mempoolPolicy;\n+\n+#endif // BITCOIN_MEMPOOLPOLICY_H"
      },
      {
        "sha": "1a6222d8728b94ae3157e74fa5cf8724c203277f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "patch": "@@ -429,6 +429,12 @@ std::string HelpMessageOpt(const std::string &option, const std::string &message\n            std::string(\"\\n\\n\");\n }\n \n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp)\n+{\n+    for (unsigned int i=0; i < optionsHelp.size(); i++)\n+        strUsage += HelpMessageOpt(optionsHelp[i].first, optionsHelp[i].second);\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "09bbe3712e7743b2f084a48c31ee1e88d4c0133f",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e0cf3e429707a7dd054e0396e67ee378bdc83d44/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "patch": "@@ -209,6 +209,12 @@ std::string HelpMessageGroup(const std::string& message);\n  */\n std::string HelpMessageOpt(const std::string& option, const std::string& message);\n \n+/**\n+ * @param strUsage a help message string where the additoinal option descriptions will be appended\n+ * @param optionsHelp a vector of string pairs to iteratively call HelpMessageOpt on\n+ */\n+void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp);\n+\n /**\n  * Return the number of physical cores available on the current system.\n  * @note This does not count virtual cores, such as those provided by HyperThreading"
      }
    ]
  },
  {
    "sha": "6ca4925442806e014dad90fbc651ab133d726315",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2Y2E0OTI1NDQyODA2ZTAxNGRhZDkwZmJjNjUxYWIxMzNkNzI2MzE1",
    "commit": {
      "author": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-18T18:10:56Z"
      },
      "committer": {
        "name": "Alex Morcos",
        "email": "morcos@chaincode.com",
        "date": "2016-02-18T18:10:56Z"
      },
      "message": "Move minRelayTxFee to be attribute of MempoolPolicy object.",
      "tree": {
        "sha": "ae8988c07956646355f49fc1b360cfdf4b131493",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae8988c07956646355f49fc1b360cfdf4b131493"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6ca4925442806e014dad90fbc651ab133d726315",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca4925442806e014dad90fbc651ab133d726315",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6ca4925442806e014dad90fbc651ab133d726315",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6ca4925442806e014dad90fbc651ab133d726315/comments",
    "author": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "morcos",
      "id": 4360349,
      "node_id": "MDQ6VXNlcjQzNjAzNDk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4360349?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/morcos",
      "html_url": "https://github.com/morcos",
      "followers_url": "https://api.github.com/users/morcos/followers",
      "following_url": "https://api.github.com/users/morcos/following{/other_user}",
      "gists_url": "https://api.github.com/users/morcos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/morcos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/morcos/subscriptions",
      "organizations_url": "https://api.github.com/users/morcos/orgs",
      "repos_url": "https://api.github.com/users/morcos/repos",
      "events_url": "https://api.github.com/users/morcos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/morcos/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e0cf3e429707a7dd054e0396e67ee378bdc83d44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e0cf3e429707a7dd054e0396e67ee378bdc83d44"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 96,
      "deletions": 60
    },
    "files": [
      {
        "sha": "ced6bc200b8a563e7cec10488b2720e9727c4cdd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 25,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -470,8 +470,6 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(\"Limit size of signature cache to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE));\n         strUsage += HelpMessageOpt(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE));\n     }\n-    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n-        CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE)));\n     strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees (in %s) to use in a single wallet transaction or raw transaction; setting this too low may abort large transactions (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MAXFEE)));\n     strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n@@ -779,11 +777,6 @@ static std::string ResolveErrMsg(const char * const optname, const std::string&\n     return strprintf(_(\"Cannot resolve -%s address: '%s'\"), optname, strBind);\n }\n \n-static std::string AmountErrMsg(const char * const optname, const std::string& strValue)\n-{\n-    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n-}\n-\n void InitLogging()\n {\n     fPrintToConsole = GetBoolArg(\"-printtoconsole\", false);\n@@ -960,20 +953,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     if (nConnectTimeout <= 0)\n         nConnectTimeout = DEFAULT_CONNECT_TIMEOUT;\n \n-    // Fee-per-kilobyte amount considered the same as \"free\"\n-    // If you are mining, be careful setting this:\n-    // if you set it to zero then\n-    // a transaction spammer can cheaply fill blocks using\n-    // 1-satoshi-fee transactions. It should be set above the real\n-    // cost to you of processing a transaction.\n-    if (mapArgs.count(\"-minrelaytxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n-            ::minRelayTxFee = CFeeRate(n);\n-        else\n-            return InitError(AmountErrMsg(\"minrelaytxfee\", mapArgs[\"-minrelaytxfee\"]));\n-    }\n     try {\n         mempoolPolicy.InitFromArgs();\n     } catch(const std::exception& e) {\n@@ -1012,10 +991,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (nFeePerK > HIGH_TX_FEE_PER_KB)\n             InitWarning(_(\"-paytxfee is set very high! This is the transaction fee you will pay if you send a transaction.\"));\n         payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n+        if (payTxFee < mempoolPolicy.GetMinRelayFeeRate())\n         {\n             return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       mapArgs[\"-paytxfee\"], ::minRelayTxFee.ToString()));\n+                                       mapArgs[\"-paytxfee\"], mempoolPolicy.GetMinRelayFeeRate().ToString()));\n         }\n     }\n     if (mapArgs.count(\"-maxtxfee\"))\n@@ -1026,10 +1005,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         if (nMaxFee > HIGH_MAX_TX_FEE)\n             InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        if (CFeeRate(maxTxFee, 1000) < mempoolPolicy.GetMinRelayFeeRate())\n         {\n             return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       mapArgs[\"-maxtxfee\"], ::minRelayTxFee.ToString()));\n+                                       mapArgs[\"-maxtxfee\"], mempoolPolicy.GetMinRelayFeeRate().ToString()));\n         }\n     }\n     nTxConfirmTarget = GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);"
      },
      {
        "sha": "9a61f2a793dad7dc7dcc63e1c6b7ec7b2c16762f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -18,6 +18,7 @@\n #include \"init.h\"\n #include \"merkleblock.h\"\n #include \"net.h\"\n+#include \"policy/mempool.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/block.h\"\n@@ -78,10 +79,9 @@ bool fAlerts = DEFAULT_ALERTS;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n \n-CFeeRate minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n-CTxMemPool mempool(::minRelayTxFee);\n+CTxMemPool mempool(mempoolPolicy.GetMinRelayFeeRate());\n \n struct COrphanTx {\n     CTransaction tx;\n@@ -1107,15 +1107,15 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         CAmount mempoolRejectFee = pool.GetMinFee(GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n         if (mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n-        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < ::minRelayTxFee.GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n+        } else if (GetBoolArg(\"-relaypriority\", DEFAULT_RELAYPRIORITY) && nModifiedFees < mempoolPolicy.GetMinRelayFeeRate().GetFee(nSize) && !AllowFree(entry.GetPriority(chainActive.Height() + 1))) {\n             // Require that free transactions have sufficient priority to be mined in the next block.\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n         }\n \n         // Continuously rate-limit free (really, very-low-fee) transactions\n         // This mitigates 'penny-flooding' -- sending thousands of free transactions just to\n         // be annoying or make others' transactions take longer to confirm.\n-        if (fLimitFree && nModifiedFees < ::minRelayTxFee.GetFee(nSize))\n+        if (fLimitFree && nModifiedFees < mempoolPolicy.GetMinRelayFeeRate().GetFee(nSize))\n         {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n@@ -1294,13 +1294,13 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             // Finally in addition to paying more fees than the conflicts the\n             // new transaction must pay for its own bandwidth.\n             CAmount nDeltaFees = nModifiedFees - nConflictingFees;\n-            if (nDeltaFees < ::minRelayTxFee.GetFee(nSize))\n+            if (nDeltaFees < mempoolPolicy.GetMinRelayFeeRate().GetFee(nSize))\n             {\n                 return state.DoS(0,\n                         error(\"AcceptToMemoryPool: rejecting replacement %s, not enough additional fees to relay; %s < %s\",\n                               hash.ToString(),\n                               FormatMoney(nDeltaFees),\n-                              FormatMoney(::minRelayTxFee.GetFee(nSize))),\n+                              FormatMoney(mempoolPolicy.GetMinRelayFeeRate().GetFee(nSize))),\n                         REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n             }\n         }"
      },
      {
        "sha": "64303c0d88a0f763fb5b1077ce0909b29e382864",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -46,8 +46,6 @@ static const bool DEFAULT_ALERTS = true;\n static const bool DEFAULT_WHITELISTRELAY = true;\n /** Default for DEFAULT_WHITELISTFORCERELAY. */\n static const bool DEFAULT_WHITELISTFORCERELAY = true;\n-/** Default for -minrelaytxfee, minimum relay fee for transactions */\n-static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n //! -maxtxfee default\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n //! Discourage users to set fees higher than this amount (in satoshis) per kB\n@@ -149,8 +147,7 @@ extern unsigned int nBytesPerSigOp;\n extern bool fCheckBlockIndex;\n extern bool fCheckpointsEnabled;\n extern size_t nCoinCacheUsage;\n-/** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n-extern CFeeRate minRelayTxFee;\n+\n /** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n extern CAmount maxTxFee;\n extern bool fAlerts;"
      },
      {
        "sha": "2a5fc1515ec5f8805248fb89876b1e0645fb029f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -15,6 +15,7 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/mempool.h\"\n #include \"policy/policy.h\"\n #include \"pow.h\"\n #include \"primitives/transaction.h\"\n@@ -205,7 +206,7 @@ CBlockTemplate* CreateNewBlock(const CChainParams& chainparams, const CScript& s\n                 waitPriMap.clear();\n             }\n             if (!priorityTx &&\n-                (iter->GetModifiedFee() < ::minRelayTxFee.GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n+                (iter->GetModifiedFee() < mempoolPolicy.GetMinRelayFeeRate().GetFee(nTxSize) && nBlockSize >= nBlockMinSize)) {\n                 break;\n             }\n             if (nBlockSize + nTxSize >= nBlockMaxSize) {"
      },
      {
        "sha": "cbf237bfe8655d4b658422b589c30a0630cc52ef",
        "filename": "src/policy/mempool.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/policy/mempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/policy/mempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/mempool.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -6,17 +6,40 @@\n \n #include \"tinyformat.h\"\n #include \"util.h\"\n+#include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\"\n \n MempoolPolicy mempoolPolicy;\n \n+MempoolPolicy::MempoolPolicy()\n+{\n+    minRelayFeeRate = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n+}\n+\n void MempoolPolicy::InitFromArgs()\n {\n+    // Fee-per-kilobyte amount considered the same as \"free\"\n+    // If you are mining, be careful setting this:\n+    // if you set it to zero then\n+    // a transaction spammer can cheaply fill blocks using\n+    // 1-satoshi-fee transactions. It should be set above the real\n+    // cost to you of processing a transaction.\n+    if (mapArgs.count(\"-minrelaytxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0) {\n+            minRelayFeeRate = CFeeRate(n);\n+        }\n+        else\n+            throw std::runtime_error(AmountErrMsg(\"minrelaytxfee\", mapArgs[\"-minrelaytxfee\"]));\n+    }\n }\n \n std::vector<std::pair<std::string, std::string> > MempoolPolicy::GetOptionsHelp(bool showDebug) const\n {\n     std::vector<std::pair<std::string, std::string> > optionsHelp;\n+    optionsHelp.push_back(std::make_pair(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for relaying, mining and transaction creation (default: %s)\"),\n+                                                                           CURRENCY_UNIT, FormatMoney(DEFAULT_MIN_RELAY_TX_FEE))));\n     return optionsHelp;\n }\n \n@@ -25,3 +48,13 @@ void MempoolPolicy::AppendHelpMessages(std::string& strUsage, bool showDebug)\n     strUsage += HelpMessageGroup(_(\"Mempool Policy options:\"));\n     AppendMessagesOpt(strUsage, GetOptionsHelp(showDebug));\n }\n+\n+CFeeRate MempoolPolicy::GetMinRelayFeeRate()\n+{\n+    return minRelayFeeRate;\n+}\n+\n+void MempoolPolicy::SetMinRelayFeeRate(CFeeRate newFeeRate)\n+{\n+    minRelayFeeRate = newFeeRate;\n+}"
      },
      {
        "sha": "c297223b722d03ff9e8c5da1e14e0c5f02a25aa7",
        "filename": "src/policy/mempool.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/policy/mempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/policy/mempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/mempool.h?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -8,13 +8,19 @@\n #include <string>\n #include <vector>\n \n+#include \"amount.h\"\n+\n+//Mempool policy defaults\n+static const unsigned int DEFAULT_MIN_RELAY_TX_FEE = 1000;\n+\n /**\n  * \\class MempoolPolicy\n  * Encapsulate parameters needed for mempool policy\n  */\n class MempoolPolicy\n {\n public:\n+    MempoolPolicy();\n     void InitFromArgs();\n     /**\n      * @return a formatted HelpMessage string with the mempool policy options\n@@ -26,6 +32,13 @@ class MempoolPolicy\n      * options appended to the string\n      */\n     void AppendHelpMessages(std::string& strUsage, bool showDebug);\n+\n+    /** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n+    CFeeRate GetMinRelayFeeRate();\n+    /** Setter for testing */\n+    void SetMinRelayFeeRate(CFeeRate newFeeRate);\n+private:\n+    CFeeRate minRelayFeeRate;\n };\n \n extern MempoolPolicy mempoolPolicy;"
      },
      {
        "sha": "5dd0dcb6b076476b4ef0df722fb77bf4e1e29a7a",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -8,6 +8,7 @@\n #include \"policy/policy.h\"\n \n #include \"main.h\"\n+#include \"policy/mempool.h\"\n #include \"tinyformat.h\"\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n@@ -102,7 +103,7 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n         else if ((whichType == TX_MULTISIG) && (!fIsBareMultisigStd)) {\n             reason = \"bare-multisig\";\n             return false;\n-        } else if (txout.IsDust(::minRelayTxFee)) {\n+        } else if (txout.IsDust(mempoolPolicy.GetMinRelayFeeRate())) {\n             reason = \"dust\";\n             return false;\n         }"
      },
      {
        "sha": "3dab3a20c7483a66dd4cf0fd9178eafda9c976e0",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -15,7 +15,8 @@\n \n #include \"coincontrol.h\"\n #include \"init.h\"\n-#include \"main.h\" // For minRelayTxFee\n+#include \"main.h\" //for mempool\n+#include \"policy/mempool.h\"\n #include \"wallet/wallet.h\"\n \n #include <boost/assign/list_of.hpp> // for 'map_list_of()'\n@@ -468,7 +469,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         {\n             CTxOut txout(amount, (CScript)std::vector<unsigned char>(24, 0));\n             txDummy.vout.push_back(txout);\n-            if (txout.IsDust(::minRelayTxFee))\n+            if (txout.IsDust(mempoolPolicy.GetMinRelayFeeRate()))\n                fDust = true;\n         }\n     }\n@@ -569,10 +570,10 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n             if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n-                if (txout.IsDust(::minRelayTxFee))\n+                if (txout.IsDust(mempoolPolicy.GetMinRelayFeeRate()))\n                 {\n                     if (CoinControlDialog::fSubtractFeeFromAmount) // dust-change will be raised until no dust\n-                        nChange = txout.GetDustThreshold(::minRelayTxFee);\n+                        nChange = txout.GetDustThreshold(mempoolPolicy.GetMinRelayFeeRate());\n                     else\n                     {\n                         nPayFee += nChange;"
      },
      {
        "sha": "48106378661ea3dc10617553b8e9b74900322e1a",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -11,7 +11,7 @@\n \n #include \"primitives/transaction.h\"\n #include \"init.h\"\n-#include \"main.h\" // For minRelayTxFee\n+#include \"policy/mempool.h\"\n #include \"protocol.h\"\n #include \"script/script.h\"\n #include \"script/standard.h\"\n@@ -238,7 +238,7 @@ bool isDust(const QString& address, const CAmount& amount)\n     CTxDestination dest = CBitcoinAddress(address.toStdString()).Get();\n     CScript script = GetScriptForDestination(dest);\n     CTxOut txOut(amount, script);\n-    return txOut.IsDust(::minRelayTxFee);\n+    return txOut.IsDust(mempoolPolicy.GetMinRelayFeeRate());\n }\n \n QString HtmlEscape(const QString& str, bool fMultiLine)"
      },
      {
        "sha": "bd56863954285333b4b2a81bbcdb1f46e56387de",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -10,7 +10,7 @@\n \n #include \"base58.h\"\n #include \"chainparams.h\"\n-#include \"main.h\" // For minRelayTxFee\n+#include \"policy/mempool.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n #include \"wallet/wallet.h\"\n@@ -582,7 +582,7 @@ bool PaymentServer::processPaymentRequest(const PaymentRequestPlus& request, Sen\n \n         // Extract and check amounts\n         CTxOut txOut(sendingTo.second, sendingTo.first);\n-        if (txOut.IsDust(::minRelayTxFee)) {\n+        if (txOut.IsDust(mempoolPolicy.GetMinRelayFeeRate())) {\n             Q_EMIT message(tr(\"Payment request error\"), tr(\"Requested payment amount of %1 is too small (considered dust).\")\n                 .arg(BitcoinUnits::formatWithUnit(optionsModel->getDisplayUnit(), sendingTo.second)),\n                 CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "aff5958df3cf22d76ad668351cf43a4f0b9dcc18",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -17,7 +17,7 @@\n \n #include \"base58.h\"\n #include \"coincontrol.h\"\n-#include \"main.h\" // mempool and minRelayTxFee\n+#include \"main.h\" // mempool\n #include \"ui_interface.h\"\n #include \"txmempool.h\"\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "0e9fc7d30ef80a319b5a905049a81ad982edfde5",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -7,6 +7,7 @@\n #include \"clientversion.h\"\n #include \"init.h\"\n #include \"main.h\"\n+#include \"policy/mempool.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"rpc/server.h\"\n@@ -102,7 +103,7 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"unlocked_until\", nWalletUnlockTime));\n     obj.push_back(Pair(\"paytxfee\",      ValueFromAmount(payTxFee.GetFeePerK())));\n #endif\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(mempoolPolicy.GetMinRelayFeeRate().GetFeePerK())));\n     obj.push_back(Pair(\"errors\",        GetWarnings(\"statusbar\")));\n     return obj;\n }"
      },
      {
        "sha": "ed05228f0ba7a0edf1bb484222f5960bf113034b",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"main.h\"\n+#include \"policy/mempool.h\"\n #include \"net.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n@@ -494,7 +495,7 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"timeoffset\",    GetTimeOffset()));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));\n     obj.push_back(Pair(\"networks\",      GetNetworksInfo()));\n-    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK())));\n+    obj.push_back(Pair(\"relayfee\",      ValueFromAmount(mempoolPolicy.GetMinRelayFeeRate().GetFeePerK())));\n     UniValue localAddresses(UniValue::VARR);\n     {\n         LOCK(cs_mapLocalHost);"
      },
      {
        "sha": "41edea86c816cb3741fd82c52b51cc53ef5055a4",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -197,7 +197,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Test that if the mempool is limited, estimateSmartFee won't return a value below the mempool min fee\n     // and that estimateSmartPriority returns essentially an infinite value\n     mpool.addUnchecked(tx.GetHash(),  entry.Fee(feeV[0][5]).Time(GetTime()).Priority(priV[1][5]).Height(blocknum).FromTx(tx, &mpool));\n-    // evict that transaction which should set a mempool min fee of minRelayTxFee + feeV[0][5]\n+    // evict that transaction which should set a mempool min fee of minRelayFeeRate + feeV[0][5]\n     mpool.TrimToSize(1);\n     BOOST_CHECK(mpool.GetMinFee(1).GetFeePerK() > feeV[0][5]);\n     for (int i = 1; i < 10; i++) {"
      },
      {
        "sha": "0f5aa576a04340220e3376b8ddcf0040121b7999",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -12,6 +12,7 @@\n #include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\" // For CheckTransaction\n+#include \"policy/mempool.h\"\n #include \"policy/policy.h\"\n #include \"script/script.h\"\n #include \"script/script_error.h\"\n@@ -336,7 +337,7 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n     BOOST_CHECK(IsStandardTx(t, reason));\n \n     // Check dust with default relay fee:\n-    CAmount nDustThreshold = 182 * minRelayTxFee.GetFeePerK()/1000 * 3;\n+    CAmount nDustThreshold = 182 * mempoolPolicy.GetMinRelayFeeRate().GetFeePerK()/1000 * 3;\n     BOOST_CHECK_EQUAL(nDustThreshold, 546);\n     // dust:\n     t.vout[0].nValue = nDustThreshold - 1;\n@@ -347,14 +348,14 @@ BOOST_AUTO_TEST_CASE(test_IsStandard)\n \n     // Check dust with odd relay fee to verify rounding:\n     // nDustThreshold = 182 * 1234 / 1000 * 3\n-    minRelayTxFee = CFeeRate(1234);\n+    mempoolPolicy.SetMinRelayFeeRate(CFeeRate(1234));\n     // dust:\n     t.vout[0].nValue = 672 - 1;\n     BOOST_CHECK(!IsStandardTx(t, reason));\n     // not dust:\n     t.vout[0].nValue = 672;\n     BOOST_CHECK(IsStandardTx(t, reason));\n-    minRelayTxFee = CFeeRate(DEFAULT_MIN_RELAY_TX_FEE);\n+    mempoolPolicy.SetMinRelayFeeRate(CFeeRate(DEFAULT_MIN_RELAY_TX_FEE));\n \n     t.vout[0].scriptPubKey = CScript() << OP_1;\n     BOOST_CHECK(!IsStandardTx(t, reason));"
      },
      {
        "sha": "34f0eb52a2666488dcfc06c77008d4901c0c4fab",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -435,6 +435,11 @@ void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::s\n         strUsage += HelpMessageOpt(optionsHelp[i].first, optionsHelp[i].second);\n }\n \n+std::string AmountErrMsg(const char * const optname, const std::string& strValue)\n+{\n+    return strprintf(_(\"Invalid amount for -%s=<amount>: '%s'\"), optname, strValue);\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "47263192cafb06b1a0364a5b5ddbf4fc7709e1b7",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -215,6 +215,8 @@ std::string HelpMessageOpt(const std::string& option, const std::string& message\n  */\n void AppendMessagesOpt(std::string& strUsage, const std::vector<std::pair<std::string, std::string> >& optionsHelp);\n \n+std::string AmountErrMsg(const char * const optname, const std::string& strValue);\n+\n /**\n  * Return the number of physical cores available on the current system.\n  * @note This does not count virtual cores, such as those provided by HyperThreading"
      },
      {
        "sha": "a20b50d5b6b7379eb7ef3ef9c33daeefdddce21e",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6ca4925442806e014dad90fbc651ab133d726315/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6ca4925442806e014dad90fbc651ab133d726315/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6ca4925442806e014dad90fbc651ab133d726315",
        "patch": "@@ -15,6 +15,7 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"policy/mempool.h\"\n #include \"policy/policy.h\"\n #include \"primitives/block.h\"\n #include \"primitives/transaction.h\"\n@@ -2037,7 +2038,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                         }\n                     }\n \n-                    if (txout.IsDust(::minRelayTxFee))\n+                    if (txout.IsDust(mempoolPolicy.GetMinRelayFeeRate()))\n                     {\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n@@ -2111,16 +2112,16 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                     // We do not move dust-change to fees, because the sender would end up paying more than requested.\n                     // This would be against the purpose of the all-inclusive feature.\n                     // So instead we raise the change and deduct from the recipient.\n-                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(::minRelayTxFee))\n+                    if (nSubtractFeeFromAmount > 0 && newTxOut.IsDust(mempoolPolicy.GetMinRelayFeeRate()))\n                     {\n-                        CAmount nDust = newTxOut.GetDustThreshold(::minRelayTxFee) - newTxOut.nValue;\n+                        CAmount nDust = newTxOut.GetDustThreshold(mempoolPolicy.GetMinRelayFeeRate()) - newTxOut.nValue;\n                         newTxOut.nValue += nDust; // raise change until no more dust\n                         for (unsigned int i = 0; i < vecSend.size(); i++) // subtract from first recipient\n                         {\n                             if (vecSend[i].fSubtractFeeFromAmount)\n                             {\n                                 txNew.vout[i].nValue -= nDust;\n-                                if (txNew.vout[i].IsDust(::minRelayTxFee))\n+                                if (txNew.vout[i].IsDust(mempoolPolicy.GetMinRelayFeeRate()))\n                                 {\n                                     strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                                     return false;\n@@ -2132,7 +2133,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n-                    if (newTxOut.IsDust(::minRelayTxFee))\n+                    if (newTxOut.IsDust(mempoolPolicy.GetMinRelayFeeRate()))\n                     {\n                         nFeeRet += nChange;\n                         reservekey.ReturnKey();\n@@ -2214,7 +2215,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 // If we made it here and we aren't even able to meet the relay fee on the next pass, give up\n                 // because we must be at the maximum allowed fee.\n-                if (nFeeNeeded < ::minRelayTxFee.GetFee(nBytes))\n+                if (nFeeNeeded < mempoolPolicy.GetMinRelayFeeRate().GetFee(nBytes))\n                 {\n                     strFailReason = _(\"Transaction too large for fee policy\");\n                     return false;\n@@ -2299,7 +2300,7 @@ bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB & pw\n \n CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n {\n-    return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n+    return std::max(minTxFee.GetFee(nTxBytes), mempoolPolicy.GetMinRelayFeeRate().GetFee(nTxBytes));\n }\n \n CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarget, const CTxMemPool& pool)\n@@ -2314,7 +2315,7 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n         if (nFeeNeeded == 0)\n             nFeeNeeded = fallbackFee.GetFee(nTxBytes);\n     }\n-    // prevent user from paying a fee below minRelayTxFee or minTxFee\n+    // prevent user from paying a fee below minRelayFeeRate or minTxFee\n     nFeeNeeded = std::max(nFeeNeeded, GetRequiredFee(nTxBytes));\n     // But always obey the maximum\n     if (nFeeNeeded > maxTxFee)"
      }
    ]
  }
]