[
  {
    "sha": "76bf97213f4b153dd3ccf1314088a73c4804601d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmJmOTcyMTNmNGIxNTNkZDNjY2YxMzE0MDg4YTczYzQ4MDQ2MDFk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-01-03T11:24:58Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-01-04T00:56:37Z"
      },
      "message": "scripts: fix check-symbols & check-security argument passing\n\nThe first argument in bin_PROGRAMS (bitcoind) was being silently\ndropped and never passed into the check-security.py or check-symbols.py scripts.\n\nThis has been the case since the scripts were added to the makefile in\nhttps://github.com/bitcoin/bitcoin/commit/f3d3eaf78eb51238d799d8f20a585550d1567719.\n\nExample of the behavior:\n\n```python\n# touch a, touch b, touch c\n# python3 args.py < a b c\n\nimport sys\nif __name__ == '__main__':\n    print(sys.argv)\n    # ['args.py', 'b', 'c']\n\n    # if you add some lines to \"a\",\n    # you'll see them here..\n    for line in sys.stdin:\n        print(line)\n```",
      "tree": {
        "sha": "e6daa7c26080b9ed26b40a9f8c3d1ff55cedd2cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6daa7c26080b9ed26b40a9f8c3d1ff55cedd2cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76bf97213f4b153dd3ccf1314088a73c4804601d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl4P4sUACgkQLuufXMCV\nJsF9lA//QojEtQR3oh/zJrczIoOoGoknmsTZyk2O5xxruLauk1fbvj5BIW21twgt\nujecbv34g9UeVfNOUgX7/o9Q+3jf8S3ibjUkADYnm3k6lYN+wy73mOZGl1KQSYC7\nA3LDE9si7NRPx6eLdretZc3VDa7X4ypVpjIqekKNCaTlBH41Jb8EPfteZtXyHT0p\nN8RMBGYPj/2ozMzMNIX8am+Qq5do05one0mPp9IxQ0XwiyHfOertVvfESFCSNBH8\niAqvbX9zHJz1b3AvkjvHaeIBeTOwjj6s0n7g7YSp0h0ANNhKCWbT4ZdBBgBYgumg\nbTHbAW7sAsRlcBVzJl0BAN8cIPMzoXii6TKGFhT2KQ8tVnJFjmScYQfHRpF7CdX0\nq8s4MNIFH2cKpkZ7CClnZfCDcuisO4XOGrAtgqTQATX7tj82IGhZlidvEgWlfplM\nE2QVuxhaJxStHUfzBP+x0jeHB5PowNAEDhAdK2RZBv7kEOROgWY8mZ1KsQOl9QZ7\nmMw6IuwB3X57tbdtCkwBkbaLthY/ud6WezFJDdsTeSAzFVS0hKWPu+EM9zCxir21\nE0z6fhJf4bulcnJQTTwTtcnduK7DXx9BuE6phJG872pe1tkGLzwjKPufy/aEPb27\nn/W/iln2eYAi0uesQw5dNPDjs7+dvw3T9NGYtAo9VQxZh7TiKNI=\n=aH5J\n-----END PGP SIGNATURE-----",
        "payload": "tree e6daa7c26080b9ed26b40a9f8c3d1ff55cedd2cf\nparent 816464198c34a373229e865d76f4bc0ca8f127dc\nauthor fanquake <fanquake@gmail.com> 1578050698 +0800\ncommitter fanquake <fanquake@gmail.com> 1578099397 +0800\n\nscripts: fix check-symbols & check-security argument passing\n\nThe first argument in bin_PROGRAMS (bitcoind) was being silently\ndropped and never passed into the check-security.py or check-symbols.py scripts.\n\nThis has been the case since the scripts were added to the makefile in\nhttps://github.com/bitcoin/bitcoin/commit/f3d3eaf78eb51238d799d8f20a585550d1567719.\n\nExample of the behavior:\n\n```python\n# touch a, touch b, touch c\n# python3 args.py < a b c\n\nimport sys\nif __name__ == '__main__':\n    print(sys.argv)\n    # ['args.py', 'b', 'c']\n\n    # if you add some lines to \"a\",\n    # you'll see them here..\n    for line in sys.stdin:\n        print(line)\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76bf97213f4b153dd3ccf1314088a73c4804601d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76bf97213f4b153dd3ccf1314088a73c4804601d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76bf97213f4b153dd3ccf1314088a73c4804601d/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "816464198c34a373229e865d76f4bc0ca8f127dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816464198c34a373229e865d76f4bc0ca8f127dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/816464198c34a373229e865d76f4bc0ca8f127dc"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "5ae945ac69ef34f8de94baa28dad9478dd0b1493",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76bf97213f4b153dd3ccf1314088a73c4804601d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76bf97213f4b153dd3ccf1314088a73c4804601d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=76bf97213f4b153dd3ccf1314088a73c4804601d",
        "patch": "@@ -704,13 +704,13 @@ clean-local:\n check-symbols: $(bin_PROGRAMS)\n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\"\n-\t$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py < $(bin_PROGRAMS)\n+\t$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n endif\n \n check-security: $(bin_PROGRAMS)\n if HARDEN\n \t@echo \"Checking binary security...\"\n-\t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py < $(bin_PROGRAMS)\n+\t$(AM_V_at) READELF=$(READELF) OBJDUMP=$(OBJDUMP) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/security-check.py $(bin_PROGRAMS)\n endif\n \n if EMBEDDED_LEVELDB"
      }
    ]
  },
  {
    "sha": "c491368d8cfddf3a5b6d574f10ed67492fcecbed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDkxMzY4ZDhjZmRkZjNhNWI2ZDU3NGYxMGVkNjc0OTJmY2VjYmVk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-01-03T11:34:58Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-01-04T03:24:42Z"
      },
      "message": "scripts: add MACHO dylib checking to symbol-check.py",
      "tree": {
        "sha": "965cc7283e053f501c1c45b181376dfed5c8c08b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/965cc7283e053f501c1c45b181376dfed5c8c08b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c491368d8cfddf3a5b6d574f10ed67492fcecbed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl4QBXoACgkQLuufXMCV\nJsEEkA//YVMjsFdu2NGj7nbCvDkuL9+TxgWNsUC744M18JZ/ZaTpS4W2vVgF724V\nO0PKMkkCStjdnMAhaMrrHHIMqZYYXPsDKrwuE2BxhtnWl3BsNAhV2BMJvb89Y40g\n/d6MAycqIPoGnDmd58a0/UGPMxLW61GkhGlFU+ZijCT7bCh9H0ZKQocWvukaqLQ+\n32Rlb3JkfQi7nKSMNxLAR1yQaw174qK6TeudmsNAlvOpx70wVd7v/avctmN/Kmu9\nxgcnoew8T9KdrzG/T+BrY/XqmhjX7XfNtUk8Qzmjq2zGkpFb1WsBY4DsFVQx9fZf\nkL6W8x3mDPft7m2Ng5NvD9U6EuJHAKOd9Vt3GJMeZqOj3eU3Rlu7qRz39ZCafuL4\nM/DDBHl/r5CFn9KJzuV8vPuUzjmZVOZtmuZRC6lG01LBi33dfoQbpgdUi2HAp3Me\n7B6xibD3j0gNgMz3858BHKJdddFPuFU8IzRQ4BVt0wSBOyxtiznYS1FzbeUckG+q\nXHdidbyVT2H61tUlwjiMQxECWOEDYh9Ve84OknPr/47VPRzQynrbCP4GsgHSOgx2\nuCbuQOwMrSbx8JhU0kzOaSFVBts0LWHoQTncbnAEoLgf7gPYA1v0rU8ozF/QnYvZ\nEm4WAD31Bhi4GGDrHoX6LlMorgbc+Mlq7SSO3H8sveOf8z6t1zA=\n=NvRA\n-----END PGP SIGNATURE-----",
        "payload": "tree 965cc7283e053f501c1c45b181376dfed5c8c08b\nparent 76bf97213f4b153dd3ccf1314088a73c4804601d\nauthor fanquake <fanquake@gmail.com> 1578051298 +0800\ncommitter fanquake <fanquake@gmail.com> 1578108282 +0800\n\nscripts: add MACHO dylib checking to symbol-check.py\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c491368d8cfddf3a5b6d574f10ed67492fcecbed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c491368d8cfddf3a5b6d574f10ed67492fcecbed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c491368d8cfddf3a5b6d574f10ed67492fcecbed/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76bf97213f4b153dd3ccf1314088a73c4804601d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76bf97213f4b153dd3ccf1314088a73c4804601d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76bf97213f4b153dd3ccf1314088a73c4804601d"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 128,
      "deletions": 28
    },
    "files": [
      {
        "sha": "515a0d8fc600db30505e0c58c391953ec84eb15c",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c491368d8cfddf3a5b6d574f10ed67492fcecbed/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c491368d8cfddf3a5b6d574f10ed67492fcecbed/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=c491368d8cfddf3a5b6d574f10ed67492fcecbed",
        "patch": "@@ -103,17 +103,21 @@ Perform basic security checks on a series of executables.\n symbol-check.py\n ===============\n \n-A script to check that the (Linux) executables produced by gitian only contain\n-allowed gcc, glibc and libstdc++ version symbols. This makes sure they are\n-still compatible with the minimum supported Linux distribution versions.\n+A script to check that the executables produced by gitian only contain\n+certain symbols and are only linked against allowed libraries.\n+\n+For Linux this means checking for allowed gcc, glibc and libstdc++ version symbols.\n+This makes sure they are still compatible with the minimum supported distribution versions.\n+\n+For macOS we check that the executables are only linked against libraries we allow.\n \n Example usage after a gitian build:\n \n     find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n \n-If only supported symbols are used the return value will be 0 and the output will be empty.\n+If no errors occur the return value will be 0 and the output will be empty.\n \n-If there are 'unsupported' symbols, the return value will be 1 a list like this will be printed:\n+If there are any errors the return value will be 1 and output like this will be printed:\n \n     .../64/test_bitcoin: symbol memcpy from unsupported version GLIBC_2.14\n     .../64/test_bitcoin: symbol __fdelt_chk from unsupported version GLIBC_2.15"
      },
      {
        "sha": "f92d997621058edfb92356b748c5e1b36e1d0f8d",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 113,
        "deletions": 23,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c491368d8cfddf3a5b6d574f10ed67492fcecbed/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c491368d8cfddf3a5b6d574f10ed67492fcecbed/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=c491368d8cfddf3a5b6d574f10ed67492fcecbed",
        "patch": "@@ -15,6 +15,7 @@\n import re\n import sys\n import os\n+from typing import List, Optional, Tuple\n \n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n@@ -52,8 +53,10 @@\n }\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n+OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n+\n # Allowed NEEDED libraries\n-ALLOWED_LIBRARIES = {\n+ELF_ALLOWED_LIBRARIES = {\n # bitcoind and bitcoin-qt\n 'libgcc_s.so.1', # GCC base support\n 'libc.so.6', # C library\n@@ -79,6 +82,25 @@\n 'AArch64':(2,17),\n 'RISC-V': (2,27)\n }\n+\n+MACHO_ALLOWED_LIBRARIES = {\n+# bitcoind and bitcoin-qt\n+'libc++.1.dylib', # C++ Standard Library\n+'libSystem.B.dylib', # libc, libm, libpthread, libinfo\n+# bitcoin-qt only\n+'AppKit', # user interface\n+'ApplicationServices', # common application tasks.\n+'Carbon', # deprecated c back-compat API\n+'CoreFoundation', # low level func, data types\n+'CoreGraphics', # 2D rendering\n+'CoreServices', # operating system services\n+'CoreText', # interface for laying out text and handling fonts.\n+'Foundation', # base layer functionality for apps/frameworks\n+'ImageIO', # read and write image file formats.\n+'IOKit', # user-space access to hardware devices and drivers.\n+'libobjc.A.dylib', # Objective-C runtime library\n+}\n+\n class CPPFilt(object):\n     '''\n     Demangle C++ symbol names.\n@@ -98,15 +120,15 @@ def close(self):\n         self.proc.stdout.close()\n         self.proc.wait()\n \n-def read_symbols(executable, imports=True):\n+def read_symbols(executable, imports=True) -> List[Tuple[str, str, str]]:\n     '''\n-    Parse an ELF executable and return a list of (symbol,version) tuples\n+    Parse an ELF executable and return a list of (symbol,version, arch) tuples\n     for dynamic, imported symbols.\n     '''\n     p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', '-h', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n-        raise IOError('Could not read symbols for %s: %s' % (executable, stderr.strip()))\n+        raise IOError('Could not read symbols for {}: {}'.format(executable, stderr.strip()))\n     syms = []\n     for line in stdout.splitlines():\n         line = line.split()\n@@ -121,7 +143,7 @@ def read_symbols(executable, imports=True):\n                 syms.append((sym, version, arch))\n     return syms\n \n-def check_version(max_versions, version, arch):\n+def check_version(max_versions, version, arch) -> bool:\n     if '_' in version:\n         (lib, _, ver) = version.rpartition('_')\n     else:\n@@ -132,7 +154,7 @@ def check_version(max_versions, version, arch):\n         return False\n     return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n \n-def read_libraries(filename):\n+def elf_read_libraries(filename) -> List[str]:\n     p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n     (stdout, stderr) = p.communicate()\n     if p.returncode:\n@@ -148,26 +170,94 @@ def read_libraries(filename):\n                 raise ValueError('Unparseable (NEEDED) specification')\n     return libraries\n \n-if __name__ == '__main__':\n+def check_imported_symbols(filename) -> bool:\n     cppfilt = CPPFilt()\n+    ok = True\n+    for sym, version, arch in read_symbols(filename, True):\n+        if version and not check_version(MAX_VERSIONS, version, arch):\n+            print('{}: symbol {} from unsupported version {}'.format(filename, cppfilt(sym), version))\n+            ok = False\n+    return ok\n+\n+def check_exported_symbols(filename) -> bool:\n+    cppfilt = CPPFilt()\n+    ok = True\n+    for sym,version,arch in read_symbols(filename, False):\n+        if arch == 'RISC-V' or sym in IGNORE_EXPORTS:\n+            continue\n+        print('{}: export of symbol {} not allowed'.format(filename, cppfilt(sym)))\n+        ok = False\n+    return ok\n+\n+def check_ELF_libraries(filename) -> bool:\n+    ok = True\n+    for library_name in elf_read_libraries(filename):\n+        if library_name not in ELF_ALLOWED_LIBRARIES:\n+            print('{}: NEEDED library {} is not allowed'.format(filename, library_name))\n+            ok = False\n+    return ok\n+\n+def macho_read_libraries(filename) -> List[str]:\n+    p = subprocess.Popen([OTOOL_CMD, '-L', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if len(tokens) == 1: # skip executable name\n+            continue\n+        libraries.append(tokens[0].split('/')[-1])\n+    return libraries\n+\n+def check_MACHO_libraries(filename) -> bool:\n+    ok = True\n+    for dylib in macho_read_libraries(filename):\n+        if dylib not in MACHO_ALLOWED_LIBRARIES:\n+            print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n+            ok = False\n+    return ok\n+\n+CHECKS = {\n+'ELF': [\n+    ('IMPORTED_SYMBOLS', check_imported_symbols),\n+    ('EXPORTED_SYMBOLS', check_exported_symbols),\n+    ('LIBRARY_DEPENDENCIES', check_ELF_libraries)\n+],\n+'MACHO': [\n+    ('DYNAMIC_LIBRARIES', check_MACHO_libraries)\n+]\n+}\n+\n+def identify_executable(executable) -> Optional[str]:\n+    with open(filename, 'rb') as f:\n+        magic = f.read(4)\n+    if magic.startswith(b'MZ'):\n+        return 'PE'\n+    elif magic.startswith(b'\\x7fELF'):\n+        return 'ELF'\n+    elif magic.startswith(b'\\xcf\\xfa'):\n+        return 'MACHO'\n+    return None\n+\n+if __name__ == '__main__':\n     retval = 0\n     for filename in sys.argv[1:]:\n-        # Check imported symbols\n-        for sym,version,arch in read_symbols(filename, True):\n-            if version and not check_version(MAX_VERSIONS, version, arch):\n-                print('%s: symbol %s from unsupported version %s' % (filename, cppfilt(sym), version))\n-                retval = 1\n-        # Check exported symbols\n-        if arch != 'RISC-V':\n-            for sym,version,arch in read_symbols(filename, False):\n-                if sym in IGNORE_EXPORTS:\n-                    continue\n-                print('%s: export of symbol %s not allowed' % (filename, cppfilt(sym)))\n-                retval = 1\n-        # Check dependency libraries\n-        for library_name in read_libraries(filename):\n-            if library_name not in ALLOWED_LIBRARIES:\n-                print('%s: NEEDED library %s is not allowed' % (filename, library_name))\n+        try:\n+            etype = identify_executable(filename)\n+            if etype is None:\n+                print('{}: unknown format'.format(filename))\n                 retval = 1\n+                continue\n \n+            failed = []\n+            for (name, func) in CHECKS[etype]:\n+                if not func(filename):\n+                    failed.append(name)\n+            if failed:\n+                print('{}: failed {}'.format(filename, ' '.join(failed)))\n+                retval = 1\n+        except IOError:\n+            print('{}: cannot open'.format(filename))\n+            retval = 1\n     sys.exit(retval)"
      },
      {
        "sha": "cbc911550ce93b7d8cd086066a5fc0681f828aba",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c491368d8cfddf3a5b6d574f10ed67492fcecbed/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c491368d8cfddf3a5b6d574f10ed67492fcecbed/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=c491368d8cfddf3a5b6d574f10ed67492fcecbed",
        "patch": "@@ -138,6 +138,7 @@ script: |\n     CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n     make ${MAKEOPTS}\n     make ${MAKEOPTS} -C src check-security\n+    make ${MAKEOPTS} -C src check-symbols\n     make install-strip DESTDIR=${INSTALLPATH}\n \n     make osx_volname"
      },
      {
        "sha": "54353b03cf83923fef8a7691325f245133de1035",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c491368d8cfddf3a5b6d574f10ed67492fcecbed/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c491368d8cfddf3a5b6d574f10ed67492fcecbed/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=c491368d8cfddf3a5b6d574f10ed67492fcecbed",
        "patch": "@@ -702,6 +702,11 @@ clean-local:\n \t$(AM_V_GEN) $(WINDRES) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(CPPFLAGS) -DWINDRES_PREPROC -i $< -o $@\n \n check-symbols: $(bin_PROGRAMS)\n+if TARGET_DARWIN\n+\t@echo \"Checking macOS dynamic libraries...\"\n+\t$(AM_V_at) OTOOL=$(OTOOL) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)\n+endif\n+\n if GLIBC_BACK_COMPAT\n \t@echo \"Checking glibc back compat...\"\n \t$(AM_V_at) READELF=$(READELF) CPPFILT=$(CPPFILT) $(PYTHON) $(top_srcdir)/contrib/devtools/symbol-check.py $(bin_PROGRAMS)"
      }
    ]
  }
]