[
  {
    "sha": "78f06e4af76b6e4550b8eed5a521684140a4fc5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGYwNmU0YWY3NmI2ZTQ1NTBiOGVlZDVhNTIxNjg0MTQwYTRmYzVm",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-16T13:01:09Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-07-16T13:01:09Z"
      },
      "message": "Migrate gitian-build.sh to python",
      "tree": {
        "sha": "9b2802fb9a671c290ef02cddd31f1620cc4f6f14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b2802fb9a671c290ef02cddd31f1620cc4f6f14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78f06e4af76b6e4550b8eed5a521684140a4fc5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f06e4af76b6e4550b8eed5a521684140a4fc5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78f06e4af76b6e4550b8eed5a521684140a4fc5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f06e4af76b6e4550b8eed5a521684140a4fc5f/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "17943f77bda22d515e29662d31c8ac936b85f470",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/17943f77bda22d515e29662d31c8ac936b85f470",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/17943f77bda22d515e29662d31c8ac936b85f470"
      }
    ],
    "stats": {
      "total": 614,
      "additions": 201,
      "deletions": 413
    },
    "files": [
      {
        "sha": "f6ecb52d8aa2c92671d2d2f4f31714a6cc6e8f3d",
        "filename": "contrib/gitian-build.py",
        "status": "added",
        "additions": 201,
        "deletions": 0,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f06e4af76b6e4550b8eed5a521684140a4fc5f/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f06e4af76b6e4550b8eed5a521684140a4fc5f/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=78f06e4af76b6e4550b8eed5a521684140a4fc5f",
        "patch": "@@ -0,0 +1,201 @@\n+#!/usr/bin/env python3\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'git', 'apt-cacher-ng']\n+    if args.kvm:\n+        programs += ['python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    elif args.docker:\n+        programs += ['docker.io']\n+    else:\n+        programs += ['lxc', 'debootstrap']\n+    subprocess.check_call(['sudo', 'apt-get', 'install', '-qq'] + programs)\n+    if not os.path.isdir('gitian.sigs'):\n+        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    if not os.path.isdir('bitcoin-detached-sigs'):\n+        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    if not os.path.isdir('gitian-builder'):\n+        subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'bionic', '--arch', 'amd64']\n+    if args.docker:\n+        make_image_prog += ['--docker']\n+    elif not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz'])\n+    subprocess.check_call(['wget', '-N', '-P', 'inputs', 'https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch'])\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-i', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    subprocess.check_call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+\n+    os.chdir(workdir)\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(usage='%(prog)s [options] signer version')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default='2', help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default='2000', help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-d', '--docker', action='store_true', dest='docker', help='Use Docker instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-D', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    if args.buildsign:\n+        args.build=True\n+        args.sign=True\n+\n+    if args.kvm and args.docker:\n+        raise Exception('Error: cannot have both kvm and docker')\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    # Set enviroment variable USE_LXC or USE_DOCKER, let gitian-builder know that we use lxc or docker\n+    if args.docker:\n+        os.environ['USE_DOCKER'] = '1'\n+    elif not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.11.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    # Signer and version shouldn't be empty\n+    if args.signer == '':\n+        print(script_name+': Missing signer.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+    if args.version == '':\n+        print(script_name+': Missing version.')\n+        print('Try '+script_name+' --help for more information')\n+        exit(1)\n+\n+    # Add leading 'v' for tags\n+    args.commit = ('' if args.commit else 'v') + args.version\n+    print(args.commit)\n+\n+    if args.setup:\n+        setup()\n+\n+    os.chdir('bitcoin')\n+    subprocess.check_call(['git', 'fetch'])\n+    subprocess.check_call(['git', 'checkout', args.commit])\n+    os.chdir(workdir)\n+\n+    if args.build:\n+        build()\n+\n+    if args.sign:\n+        sign()\n+\n+    if args.verify:\n+        verify()\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "d8735807118b411d74f6c9f20fb976735e9d69ad",
        "filename": "contrib/gitian-build.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 413,
        "changes": 413,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/17943f77bda22d515e29662d31c8ac936b85f470/contrib/gitian-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/17943f77bda22d515e29662d31c8ac936b85f470/contrib/gitian-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.sh?ref=17943f77bda22d515e29662d31c8ac936b85f470",
        "patch": "@@ -1,413 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2016 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C\n-# What to do\n-sign=false\n-verify=false\n-build=false\n-\n-# Systems to build\n-linux=true\n-windows=true\n-osx=true\n-\n-# Other Basic variables\n-SIGNER=\n-VERSION=\n-commit=false\n-url=https://github.com/bitcoin/bitcoin\n-proc=2\n-mem=2000\n-lxc=true\n-docker=false\n-osslTarUrl=http://downloads.sourceforge.net/project/osslsigncode/osslsigncode/osslsigncode-1.7.1.tar.gz\n-osslPatchUrl=https://bitcoincore.org/cfields/osslsigncode-Backports-to-1.7.1.patch\n-scriptName=$(basename -- \"$0\")\n-signProg=\"gpg --detach-sign\"\n-commitFiles=true\n-\n-# Help Message\n-read -d '' usage <<- EOF\n-Usage: $scriptName [-c|u|v|b|s|B|o|h|j|m|] signer version\n-\n-Run this script from the directory containing the bitcoin, gitian-builder, gitian.sigs, and bitcoin-detached-sigs.\n-\n-Arguments:\n-signer          GPG signer to sign each build assert file\n-version\t\tVersion number, commit, or branch to build. If building a commit or branch, the -c option must be specified\n-\n-Options:\n--c|--commit\tIndicate that the version argument is for a commit or branch\n--u|--url\tSpecify the URL of the repository. Default is https://github.com/bitcoin/bitcoin\n--v|--verify \tVerify the Gitian build\n--b|--build\tDo a Gitian build\n--s|--sign\tMake signed binaries for Windows and Mac OSX\n--B|--buildsign\tBuild both signed and unsigned binaries\n--o|--os\t\tSpecify which Operating Systems the build is for. Default is lwx. l for linux, w for windows, x for osx\n--j\t\tNumber of processes to use. Default 2\n--m\t\tMemory to allocate in MiB. Default 2000\n---kvm           Use KVM instead of LXC\n---docker        Use Docker instead of LXC\n---setup         Set up the Gitian building environment. Uses LXC. If you want to use KVM, use the --kvm option. Only works on Debian-based systems (Ubuntu, Debian)\n---detach-sign   Create the assert file for detached signing. Will not commit anything.\n---no-commit     Do not commit anything to git\n--h|--help\tPrint this help message\n-EOF\n-\n-# Get options and arguments\n-while :; do\n-    case $1 in\n-        # Verify\n-        -v|--verify)\n-\t    verify=true\n-            ;;\n-        # Build\n-        -b|--build)\n-\t    build=true\n-            ;;\n-        # Sign binaries\n-        -s|--sign)\n-\t    sign=true\n-            ;;\n-        # Build then Sign\n-        -B|--buildsign)\n-\t    sign=true\n-\t    build=true\n-            ;;\n-        # PGP Signer\n-        -S|--signer)\n-\t    if [ -n \"$2\" ]\n-\t    then\n-\t\tSIGNER=\"$2\"\n-\t\tshift\n-\t    else\n-\t\techo 'Error: \"--signer\" requires a non-empty argument.'\n-\t\texit 1\n-\t    fi\n-           ;;\n-        # Operating Systems\n-        -o|--os)\n-\t    if [ -n \"$2\" ]\n-\t    then\n-\t\tlinux=false\n-\t\twindows=false\n-\t\tosx=false\n-\t\tif [[ \"$2\" = *\"l\"* ]]\n-\t\tthen\n-\t\t    linux=true\n-\t\tfi\n-\t\tif [[ \"$2\" = *\"w\"* ]]\n-\t\tthen\n-\t\t    windows=true\n-\t\tfi\n-\t\tif [[ \"$2\" = *\"x\"* ]]\n-\t\tthen\n-\t\t    osx=true\n-\t\tfi\n-\t\tshift\n-\t    else\n-\t\techo 'Error: \"--os\" requires an argument containing an l (for linux), w (for windows), or x (for Mac OSX)'\n-\t\texit 1\n-\t    fi\n-\t    ;;\n-\t# Help message\n-\t-h|--help)\n-\t    echo \"$usage\"\n-\t    exit 0\n-\t    ;;\n-\t# Commit or branch\n-\t-c|--commit)\n-\t    commit=true\n-\t    ;;\n-\t# Number of Processes\n-\t-j)\n-\t    if [ -n \"$2\" ]\n-\t    then\n-\t\tproc=$2\n-\t\tshift\n-\t    else\n-\t\techo 'Error: \"-j\" requires an argument'\n-\t\texit 1\n-\t    fi\n-\t    ;;\n-\t# Memory to allocate\n-\t-m)\n-\t    if [ -n \"$2\" ]\n-\t    then\n-\t\tmem=$2\n-\t\tshift\n-\t    else\n-\t\techo 'Error: \"-m\" requires an argument'\n-\t\texit 1\n-\t    fi\n-\t    ;;\n-\t# URL\n-\t-u)\n-\t    if [ -n \"$2\" ]\n-\t    then\n-\t\turl=$2\n-\t\tshift\n-\t    else\n-\t\techo 'Error: \"-u\" requires an argument'\n-\t\texit 1\n-\t    fi\n-\t    ;;\n-        # kvm\n-        --kvm)\n-            lxc=false\n-            ;;\n-        # docker\n-        --docker)\n-            if [[ $lxc = false ]]\n-            then\n-                echo 'Error: cannot have both kvm and docker'\n-                exit 1\n-            fi\n-            lxc=false\n-            docker=true\n-            ;;\n-        # Detach sign\n-        --detach-sign)\n-            signProg=\"true\"\n-            commitFiles=false\n-            ;;\n-        # Commit files\n-        --no-commit)\n-            commitFiles=false\n-            ;;\n-        # Setup\n-        --setup)\n-            setup=true\n-            ;;\n-\t*)               # Default case: If no more options then break out of the loop.\n-             break\n-    esac\n-    shift\n-done\n-\n-# Set up LXC\n-if [[ $lxc = true ]]\n-then\n-    export USE_LXC=1\n-fi\n-\n-# Setup docker\n-if [[ $docker = true ]]\n-then\n-    export USE_DOCKER=1\n-fi\n-\n-# Check for OSX SDK\n-if [[ ! -e \"gitian-builder/inputs/MacOSX10.11.sdk.tar.gz\" && $osx == true ]]\n-then\n-    echo \"Cannot build for OSX, SDK does not exist. Will build for other OSes\"\n-    osx=false\n-fi\n-\n-# Get signer\n-if [[ -n \"$1\" ]]\n-then\n-    SIGNER=\"$1\"\n-    shift\n-fi\n-\n-# Get version\n-if [[ -n \"$1\" ]]\n-then\n-    VERSION=$1\n-    COMMIT=$VERSION\n-    shift\n-fi\n-\n-# Check that a signer is specified\n-if [[ \"$SIGNER\" == \"\" ]]\n-then\n-    echo \"$scriptName: Missing signer.\"\n-    echo \"Try $scriptName --help for more information\"\n-    exit 1\n-fi\n-\n-# Check that a version is specified\n-if [[ $VERSION == \"\" ]]\n-then\n-    echo \"$scriptName: Missing version.\"\n-    echo \"Try $scriptName --help for more information\"\n-    exit 1\n-fi\n-\n-# Add a \"v\" if no -c\n-if [[ $commit = false ]]\n-then\n-\tCOMMIT=\"v${VERSION}\"\n-fi\n-echo ${COMMIT}\n-\n-# Setup build environment\n-if [[ $setup = true ]]\n-then\n-    sudo apt-get install ruby apache2 git apt-cacher-ng python-vm-builder qemu-kvm qemu-utils\n-    git clone https://github.com/bitcoin-core/gitian.sigs.git\n-    git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n-    git clone https://github.com/devrandom/gitian-builder.git\n-    pushd ./gitian-builder\n-    if [[ -n \"$USE_LXC\" ]]\n-    then\n-        sudo apt-get install lxc\n-        bin/make-base-vm --suite bionic --arch amd64 --lxc\n-    elif [[ -n \"$USE_DOCKER\" ]]\n-    then\n-        sudo apt-get install docker-ce\n-        bin/make-base-vm --suite bionic --arch amd64 --docker\n-    else\n-        bin/make-base-vm --suite bionic --arch amd64\n-    fi\n-    popd\n-fi\n-\n-# Set up build\n-pushd ./bitcoin\n-git fetch\n-git checkout ${COMMIT}\n-popd\n-\n-# Build\n-if [[ $build = true ]]\n-then\n-\t# Make output folder\n-\tmkdir -p ./bitcoin-binaries/${VERSION}\n-\t\n-\t# Build Dependencies\n-\techo \"\"\n-\techo \"Building Dependencies\"\n-\techo \"\"\n-\tpushd ./gitian-builder\t\n-\tmkdir -p inputs\n-\twget -N -P inputs $osslPatchUrl\n-\twget -N -P inputs $osslTarUrl\n-\tmake -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n-\n-\t# Linux\n-\tif [[ $linux = true ]]\n-\tthen\n-            echo \"\"\n-\t    echo \"Compiling ${VERSION} Linux\"\n-\t    echo \"\"\n-\t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/${VERSION}\n-\tfi\n-\t# Windows\n-\tif [[ $windows = true ]]\n-\tthen\n-\t    echo \"\"\n-\t    echo \"Compiling ${VERSION} Windows\"\n-\t    echo \"\"\n-\t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n-\t    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../bitcoin-binaries/${VERSION}\n-\tfi\n-\t# Mac OSX\n-\tif [[ $osx = true ]]\n-\tthen\n-\t    echo \"\"\n-\t    echo \"Compiling ${VERSION} Mac OSX\"\n-\t    echo \"\"\n-\t    ./bin/gbuild -j ${proc} -m ${mem} --commit bitcoin=${COMMIT} --url bitcoin=${url} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n-\t    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../bitcoin-binaries/${VERSION}\n-\tfi\n-\tpopd\n-\n-        if [[ $commitFiles = true ]]\n-        then\n-\t    # Commit to gitian.sigs repo\n-            echo \"\"\n-            echo \"Committing ${VERSION} Unsigned Sigs\"\n-            echo \"\"\n-            pushd gitian.sigs\n-            git add ${VERSION}-linux/\"${SIGNER}\"\n-            git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n-            git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n-            git commit -a -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n-            popd\n-        fi\n-fi\n-\n-# Verify the build\n-if [[ $verify = true ]]\n-then\n-\t# Linux\n-\tpushd ./gitian-builder\n-\techo \"\"\n-\techo \"Verifying v${VERSION} Linux\"\n-\techo \"\"\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-\t# Windows\n-\techo \"\"\n-\techo \"Verifying v${VERSION} Windows\"\n-\techo \"\"\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-\t# Mac OSX\t\n-\techo \"\"\n-\techo \"Verifying v${VERSION} Mac OSX\"\n-\techo \"\"\t\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-\t# Signed Windows\n-\techo \"\"\n-\techo \"Verifying v${VERSION} Signed Windows\"\n-\techo \"\"\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t# Signed Mac OSX\n-\techo \"\"\n-\techo \"Verifying v${VERSION} Signed Mac OSX\"\n-\techo \"\"\n-\t./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\t\n-\tpopd\n-fi\n-\n-# Sign binaries\n-if [[ $sign = true ]]\n-then\n-\t\n-        pushd ./gitian-builder\n-\t# Sign Windows\n-\tif [[ $windows = true ]]\n-\tthen\n-\t    echo \"\"\n-\t    echo \"Signing ${VERSION} Windows\"\n-\t    echo \"\"\n-\t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-\t    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/${VERSION}\n-\t    mv build/out/bitcoin-*win32-setup.exe ../bitcoin-binaries/${VERSION}\n-\tfi\n-\t# Sign Mac OSX\n-\tif [[ $osx = true ]]\n-\tthen\n-\t    echo \"\"\n-\t    echo \"Signing ${VERSION} Mac OSX\"\n-\t    echo \"\"\n-\t    ./bin/gbuild -i --commit signature=${COMMIT} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t    ./bin/gsign -p \"$signProg\" --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-\t    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/${VERSION}/bitcoin-${VERSION}-osx.dmg\n-\tfi\n-\tpopd\n-\n-        if [[ $commitFiles = true ]]\n-        then\n-            # Commit Sigs\n-            pushd gitian.sigs\n-            echo \"\"\n-            echo \"Committing ${VERSION} Signed Sigs\"\n-            echo \"\"\n-            git add ${VERSION}-win-signed/\"${SIGNER}\"\n-            git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-            git commit -a -m \"Add ${VERSION} signed binary sigs for ${SIGNER}\"\n-            popd\n-        fi\n-fi"
      }
    ]
  }
]