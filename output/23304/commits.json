[
  {
    "sha": "18c0addc80bc8e25df97019eb5b847cd7cd9c562",
    "node_id": "C_kwDOABII59oAKDE4YzBhZGRjODBiYzhlMjVkZjk3MDE5ZWI1Yjg0N2NkN2NkOWM1NjI",
    "commit": {
      "author": {
        "name": "Rob Fielding",
        "email": "rob@g17.co.nz",
        "date": "2021-10-14T04:32:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-03T13:13:42Z"
      },
      "message": "Add size check on meta.key_origin.path\n\nResolves segfault on legacy wallet\n\nLog warning when meta.key_origin.path is below expected size",
      "tree": {
        "sha": "e5e73f9e5d40040ca0677821e2770b2e22dbf636",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5e73f9e5d40040ca0677821e2770b2e22dbf636"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18c0addc80bc8e25df97019eb5b847cd7cd9c562",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c0addc80bc8e25df97019eb5b847cd7cd9c562",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18c0addc80bc8e25df97019eb5b847cd7cd9c562",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c0addc80bc8e25df97019eb5b847cd7cd9c562/comments",
    "author": {
      "login": "rooprob",
      "id": 124807,
      "node_id": "MDQ6VXNlcjEyNDgwNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/124807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rooprob",
      "html_url": "https://github.com/rooprob",
      "followers_url": "https://api.github.com/users/rooprob/followers",
      "following_url": "https://api.github.com/users/rooprob/following{/other_user}",
      "gists_url": "https://api.github.com/users/rooprob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rooprob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rooprob/subscriptions",
      "organizations_url": "https://api.github.com/users/rooprob/orgs",
      "repos_url": "https://api.github.com/users/rooprob/repos",
      "events_url": "https://api.github.com/users/rooprob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rooprob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ff65b696f3c6f6e17a790c6646249163ddb39eda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ff65b696f3c6f6e17a790c6646249163ddb39eda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ff65b696f3c6f6e17a790c6646249163ddb39eda"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b88e455cc1073565318a9c6303a8685df213c174",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18c0addc80bc8e25df97019eb5b847cd7cd9c562/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18c0addc80bc8e25df97019eb5b847cd7cd9c562/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=18c0addc80bc8e25df97019eb5b847cd7cd9c562",
        "patch": "@@ -375,11 +375,18 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n         if (it != mapKeyMetadata.end()){\n             CKeyMetadata meta = it->second;\n             if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n-                bool internal = (meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT) != 0;\n-                int64_t index = meta.key_origin.path[2] & ~BIP32_HARDENED_KEY_LIMIT;\n-\n-                if (!TopUpInactiveHDChain(meta.hd_seed_id, index, internal)) {\n-                    WalletLogPrintf(\"%s: Adding inactive seed keys failed\\n\", __func__);\n+                if (meta.key_origin.path.size() < 3) {\n+                    WalletLogPrintf(\"%s: Adding inactive seed keys failed, insufficient path size: %d, has_key_origin: %s\\n\",\n+                                    __func__,\n+                                    meta.key_origin.path.size(),\n+                                    meta.has_key_origin);\n+                } else {\n+                    bool internal = (meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT) != 0;\n+                    int64_t index = meta.key_origin.path[2] & ~BIP32_HARDENED_KEY_LIMIT;\n+\n+                    if (!TopUpInactiveHDChain(meta.hd_seed_id, index, internal)) {\n+                        WalletLogPrintf(\"%s: Adding inactive seed keys failed\\n\", __func__);\n+                    }\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "95fc3b9c81aec366a03d9b7683290da7f23f77cd",
    "node_id": "C_kwDOABII59oAKDk1ZmMzYjljODFhZWMzNjZhMDNkOWI3NjgzMjkwZGE3ZjIzZjc3Y2Q",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T18:43:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-03T13:13:42Z"
      },
      "message": "wallet: Parse hdKeypath if key_origin is not available\n\nWhen topping up an inactive HD chain, either key_origin will be\navailable and we can use the path given there, or we need to figure out\nthe path from the string hdKeypath.",
      "tree": {
        "sha": "1695636d294cbc54138ff4ccf366ca5d0aed11ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1695636d294cbc54138ff4ccf366ca5d0aed11ef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95fc3b9c81aec366a03d9b7683290da7f23f77cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95fc3b9c81aec366a03d9b7683290da7f23f77cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95fc3b9c81aec366a03d9b7683290da7f23f77cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95fc3b9c81aec366a03d9b7683290da7f23f77cd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18c0addc80bc8e25df97019eb5b847cd7cd9c562",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18c0addc80bc8e25df97019eb5b847cd7cd9c562",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18c0addc80bc8e25df97019eb5b847cd7cd9c562"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 13,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ad74b9af8161b35cb60b889598c93e9ab4e40a9f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95fc3b9c81aec366a03d9b7683290da7f23f77cd/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95fc3b9c81aec366a03d9b7683290da7f23f77cd/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=95fc3b9c81aec366a03d9b7683290da7f23f77cd",
        "patch": "@@ -375,14 +375,22 @@ void LegacyScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n         if (it != mapKeyMetadata.end()){\n             CKeyMetadata meta = it->second;\n             if (!meta.hd_seed_id.IsNull() && meta.hd_seed_id != m_hd_chain.seed_id) {\n-                if (meta.key_origin.path.size() < 3) {\n-                    WalletLogPrintf(\"%s: Adding inactive seed keys failed, insufficient path size: %d, has_key_origin: %s\\n\",\n+                std::vector<uint32_t> path;\n+                if (meta.has_key_origin) {\n+                    path = meta.key_origin.path;\n+                } else if (!ParseHDKeypath(meta.hdKeypath, path)) {\n+                    WalletLogPrintf(\"%s: Adding inactive seed keys failed, invalid hdKeypath: %s\\n\",\n                                     __func__,\n-                                    meta.key_origin.path.size(),\n+                                    meta.hdKeypath);\n+                }\n+                if (path.size() != 3) {\n+                    WalletLogPrintf(\"%s: Adding inactive seed keys failed, invalid path size: %d, has_key_origin: %s\\n\",\n+                                    __func__,\n+                                    path.size(),\n                                     meta.has_key_origin);\n                 } else {\n-                    bool internal = (meta.key_origin.path[1] & ~BIP32_HARDENED_KEY_LIMIT) != 0;\n-                    int64_t index = meta.key_origin.path[2] & ~BIP32_HARDENED_KEY_LIMIT;\n+                    bool internal = (path[1] & ~BIP32_HARDENED_KEY_LIMIT) != 0;\n+                    int64_t index = path[2] & ~BIP32_HARDENED_KEY_LIMIT;\n \n                     if (!TopUpInactiveHDChain(meta.hd_seed_id, index, internal)) {\n                         WalletLogPrintf(\"%s: Adding inactive seed keys failed\\n\", __func__);"
      }
    ]
  },
  {
    "sha": "768d94db612c85c2d0304e8b65c3d30c41d43b24",
    "node_id": "C_kwDOABII59oAKDc2OGQ5NGRiNjEyYzg1YzJkMDMwNGU4YjY1YzNkMzBjNDFkNDNiMjQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T22:22:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-03T13:13:42Z"
      },
      "message": "wallet: Properly set hd chain counters when loading\n\nWhen build CHDChains out of CKeyMetadata, the chain counters are\nactually 1 based, not 0 based, so 1 must be added to each index.",
      "tree": {
        "sha": "670320e394a42428877d1acb66788e34f42c7eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/670320e394a42428877d1acb66788e34f42c7eac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/768d94db612c85c2d0304e8b65c3d30c41d43b24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/768d94db612c85c2d0304e8b65c3d30c41d43b24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/768d94db612c85c2d0304e8b65c3d30c41d43b24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/768d94db612c85c2d0304e8b65c3d30c41d43b24/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95fc3b9c81aec366a03d9b7683290da7f23f77cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95fc3b9c81aec366a03d9b7683290da7f23f77cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95fc3b9c81aec366a03d9b7683290da7f23f77cd"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8ae29a276a4ae1abf43f69cf7ff422399aa3b857",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/768d94db612c85c2d0304e8b65c3d30c41d43b24/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/768d94db612c85c2d0304e8b65c3d30c41d43b24/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=768d94db612c85c2d0304e8b65c3d30c41d43b24",
        "patch": "@@ -556,9 +556,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 }\n                 if (internal) {\n                     chain.nVersion = CHDChain::VERSION_HD_CHAIN_SPLIT;\n-                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index);\n+                    chain.nInternalChainCounter = std::max(chain.nInternalChainCounter, index + 1);\n                 } else {\n-                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index);\n+                    chain.nExternalChainCounter = std::max(chain.nExternalChainCounter, index + 1);\n                 }\n             }\n         } else if (strType == DBKeys::WATCHMETA) {"
      }
    ]
  },
  {
    "sha": "966d29d13e7a01f8d1eaa11be8158205212ec1f8",
    "node_id": "C_kwDOABII59oAKDk2NmQyOWQxM2U3YTAxZjhkMWVhYTExYmU4MTU4MjA1MjEyZWMxZjg",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T19:27:27Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-03T13:13:42Z"
      },
      "message": "wallet: Refactor TopUp to be able to top up inactive chains too\n\nRefactors TopUp so that it also tops up inactive chains. The bulk of\nTopUp is moved to TopUpChain.\n\nCHDChain also has 2 new in memory variables to track its highest used\nindexes. This is used only for inactive hd chains so that they can be\ntopped up later in the same session (e.g. if the wallet is encrypted and\nnot unlocked at the time of MarkUnusedAddresses).",
      "tree": {
        "sha": "dc990cdd5b7c4907799f9425adfeb522e00e72f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc990cdd5b7c4907799f9425adfeb522e00e72f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/966d29d13e7a01f8d1eaa11be8158205212ec1f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966d29d13e7a01f8d1eaa11be8158205212ec1f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/966d29d13e7a01f8d1eaa11be8158205212ec1f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966d29d13e7a01f8d1eaa11be8158205212ec1f8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "768d94db612c85c2d0304e8b65c3d30c41d43b24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/768d94db612c85c2d0304e8b65c3d30c41d43b24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/768d94db612c85c2d0304e8b65c3d30c41d43b24"
      }
    ],
    "stats": {
      "total": 110,
      "additions": 62,
      "deletions": 48
    },
    "files": [
      {
        "sha": "2da64dc927651f58b6796b9118d867c8e58b422b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 48,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966d29d13e7a01f8d1eaa11be8158205212ec1f8/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966d29d13e7a01f8d1eaa11be8158205212ec1f8/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=966d29d13e7a01f8d1eaa11be8158205212ec1f8",
        "patch": "@@ -321,36 +321,21 @@ bool LegacyScriptPubKeyMan::TopUpInactiveHDChain(const CKeyID seed_id, int64_t i\n {\n     LOCK(cs_KeyStore);\n \n-    if (m_storage.IsLocked()) return false;\n-\n     auto it = m_inactive_hd_chains.find(seed_id);\n     if (it == m_inactive_hd_chains.end()) {\n         return false;\n     }\n \n     CHDChain& chain = it->second;\n \n-    // Top up key pool\n-    int64_t target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n-\n-    // \"size\" of the keypools. Not really the size, actually the difference between index and the chain counter\n-    // Since chain counter is 1 based and index is 0 based, one of them needs to be offset by 1.\n-    int64_t kp_size = (internal ? chain.nInternalChainCounter : chain.nExternalChainCounter) - (index + 1);\n+    if (internal) {\n+        chain.m_next_internal_index = std::max(chain.m_next_internal_index, index + 1);\n+    } else {\n+        chain.m_next_external_index = std::max(chain.m_next_external_index, index + 1);\n+    }\n \n-    // make sure the keypool fits the user-selected target (-keypool)\n-    int64_t missing = std::max(target_size - kp_size, (int64_t) 0);\n+    TopUpChain(chain, 0);\n \n-    if (missing > 0) {\n-        WalletBatch batch(m_storage.GetDatabase());\n-        for (int64_t i = missing; i > 0; --i) {\n-            GenerateNewKey(batch, chain, internal);\n-        }\n-        if (internal) {\n-            WalletLogPrintf(\"inactive seed with id %s added %d internal keys\\n\", HexStr(seed_id), missing);\n-        } else {\n-            WalletLogPrintf(\"inactive seed with id %s added %d keys\\n\", HexStr(seed_id), missing);\n-        }\n-    }\n     return true;\n }\n \n@@ -1264,44 +1249,70 @@ bool LegacyScriptPubKeyMan::TopUp(unsigned int kpSize)\n     if (!CanGenerateKeys()) {\n         return false;\n     }\n-    {\n-        LOCK(cs_KeyStore);\n \n-        if (m_storage.IsLocked()) return false;\n+    if (!TopUpChain(m_hd_chain, kpSize)) {\n+        return false;\n+    }\n+    for (auto& [chain_id, chain] : m_inactive_hd_chains) {\n+        if (!TopUpChain(chain, kpSize)) {\n+            return false;\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+    return true;\n+}\n+\n+bool LegacyScriptPubKeyMan::TopUpChain(CHDChain& chain, unsigned int kpSize)\n+{\n+    LOCK(cs_KeyStore);\n \n-        // Top up key pool\n-        unsigned int nTargetSize;\n-        if (kpSize > 0)\n-            nTargetSize = kpSize;\n-        else\n-            nTargetSize = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    if (m_storage.IsLocked()) return false;\n \n-        // count amount of available keys (internal, external)\n-        // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n-        int64_t missingExternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n-        int64_t missingInternal = std::max(std::max((int64_t) nTargetSize, (int64_t) 1) - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n+    // Top up key pool\n+    unsigned int nTargetSize;\n+    if (kpSize > 0)\n+        nTargetSize = kpSize;\n+    else\n+        nTargetSize = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 0);\n+    int64_t target = std::max((int64_t) nTargetSize, (int64_t) 1);\n+\n+    // count amount of available keys (internal, external)\n+    // make sure the keypool of external and internal keys fits the user selected target (-keypool)\n+    int64_t missingExternal;\n+    int64_t missingInternal;\n+    if (chain == m_hd_chain) {\n+        missingExternal = std::max(target - (int64_t)setExternalKeyPool.size(), (int64_t) 0);\n+        missingInternal = std::max(target - (int64_t)setInternalKeyPool.size(), (int64_t) 0);\n+    } else {\n+        missingExternal = std::max(target - (chain.nExternalChainCounter - chain.m_next_external_index), (int64_t) 0);\n+        missingInternal = std::max(target - (chain.nInternalChainCounter - chain.m_next_internal_index), (int64_t) 0);\n+    }\n \n-        if (!IsHDEnabled() || !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))\n-        {\n-            // don't create extra internal keys\n-            missingInternal = 0;\n+    if (!IsHDEnabled() || !m_storage.CanSupportFeature(FEATURE_HD_SPLIT))\n+    {\n+        // don't create extra internal keys\n+        missingInternal = 0;\n+    }\n+    bool internal = false;\n+    WalletBatch batch(m_storage.GetDatabase());\n+    for (int64_t i = missingInternal + missingExternal; i--;)\n+    {\n+        if (i < missingInternal) {\n+            internal = true;\n         }\n-        bool internal = false;\n-        WalletBatch batch(m_storage.GetDatabase());\n-        for (int64_t i = missingInternal + missingExternal; i--;)\n-        {\n-            if (i < missingInternal) {\n-                internal = true;\n-            }\n \n-            CPubKey pubkey(GenerateNewKey(batch, m_hd_chain, internal));\n+        CPubKey pubkey(GenerateNewKey(batch, chain, internal));\n+        if (chain == m_hd_chain) {\n             AddKeypoolPubkeyWithDB(pubkey, internal, batch);\n         }\n-        if (missingInternal + missingExternal > 0) {\n+    }\n+    if (missingInternal + missingExternal > 0) {\n+        if (chain == m_hd_chain) {\n             WalletLogPrintf(\"keypool added %d keys (%d internal), size=%u (%u internal)\\n\", missingInternal + missingExternal, missingInternal, setInternalKeyPool.size() + setExternalKeyPool.size() + set_pre_split_keypool.size(), setInternalKeyPool.size());\n+        } else {\n+            WalletLogPrintf(\"inactive seed with id %s added %d external keys, %d internal keys\\n\", HexStr(chain.seed_id), missingExternal, missingInternal);\n         }\n     }\n-    NotifyCanGetAddressesChanged();\n     return true;\n }\n "
      },
      {
        "sha": "19be6eb325b17ac96b6a347eb98c6b189c013dce",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966d29d13e7a01f8d1eaa11be8158205212ec1f8/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966d29d13e7a01f8d1eaa11be8158205212ec1f8/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=966d29d13e7a01f8d1eaa11be8158205212ec1f8",
        "patch": "@@ -341,6 +341,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n      */\n     bool TopUpInactiveHDChain(const CKeyID seed_id, int64_t index, bool internal);\n \n+    bool TopUpChain(CHDChain& chain ,unsigned int size);\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n "
      },
      {
        "sha": "428f3d36ec0de7dce0f4cd80444c74b90e6605c1",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/966d29d13e7a01f8d1eaa11be8158205212ec1f8/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/966d29d13e7a01f8d1eaa11be8158205212ec1f8/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=966d29d13e7a01f8d1eaa11be8158205212ec1f8",
        "patch": "@@ -90,6 +90,8 @@ class CHDChain\n     uint32_t nExternalChainCounter;\n     uint32_t nInternalChainCounter;\n     CKeyID seed_id; //!< seed hash160\n+    int64_t m_next_external_index{0}; // Next index in the keypool to be used. Memory only.\n+    int64_t m_next_internal_index{0}; // Next index in the keypool to be used. Memory only.\n \n     static const int VERSION_HD_BASE        = 1;\n     static const int VERSION_HD_CHAIN_SPLIT = 2;"
      }
    ]
  },
  {
    "sha": "ee93c29ec5a28f817853be5008cf32e245b5f5ff",
    "node_id": "C_kwDOABII59oAKGVlOTNjMjllYzVhMjhmODE3ODUzYmU1MDA4Y2YzMmUyNDViNWY1ZmY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-18T20:24:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-03T13:13:42Z"
      },
      "message": "tests: Tests for inactive HD chains\n\ntest cases are added for inactive HD chains: a basic case, a case\nwhere the wallet is encrypted, and a case for the 21605 segfault.",
      "tree": {
        "sha": "758b245a0a8706fc57a6a188494a4e8d3f0751fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/758b245a0a8706fc57a6a188494a4e8d3f0751fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee93c29ec5a28f817853be5008cf32e245b5f5ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee93c29ec5a28f817853be5008cf32e245b5f5ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee93c29ec5a28f817853be5008cf32e245b5f5ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee93c29ec5a28f817853be5008cf32e245b5f5ff/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "966d29d13e7a01f8d1eaa11be8158205212ec1f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/966d29d13e7a01f8d1eaa11be8158205212ec1f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/966d29d13e7a01f8d1eaa11be8158205212ec1f8"
      }
    ],
    "stats": {
      "total": 197,
      "additions": 197,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5868cbb974614801f848b12857c17608430f2c21",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee93c29ec5a28f817853be5008cf32e245b5f5ff/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee93c29ec5a28f817853be5008cf32e245b5f5ff/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=ee93c29ec5a28f817853be5008cf32e245b5f5ff",
        "patch": "@@ -690,6 +690,9 @@ def __init__(self, rpc, cli=False, descriptors=False):\n     def __getattr__(self, name):\n         return getattr(self.rpc, name)\n \n+    def createwallet_passthrough(self, *args, **kwargs):\n+        return self.__getattr__(\"createwallet\")(*args, **kwargs)\n+\n     def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase='', avoid_reuse=None, descriptors=None, load_on_startup=None, external_signer=None):\n         if descriptors is None:\n             descriptors = self.descriptors"
      },
      {
        "sha": "32c02b156e88797f3a8a5847edeea2970ed17d84",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee93c29ec5a28f817853be5008cf32e245b5f5ff/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee93c29ec5a28f817853be5008cf32e245b5f5ff/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=ee93c29ec5a28f817853be5008cf32e245b5f5ff",
        "patch": "@@ -274,6 +274,7 @@\n     'wallet_send.py --descriptors',\n     'wallet_create_tx.py --descriptors',\n     'wallet_taproot.py',\n+    'wallet_inactive_hdchains.py',\n     'p2p_fingerprint.py',\n     'feature_uacomment.py',\n     'wallet_coinbase_category.py --legacy-wallet',"
      },
      {
        "sha": "ca75fdd1b3010c1e421757eef4c4d155fa124620",
        "filename": "test/functional/wallet_inactive_hdchains.py",
        "status": "added",
        "additions": 193,
        "deletions": 0,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee93c29ec5a28f817853be5008cf32e245b5f5ff/test/functional/wallet_inactive_hdchains.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee93c29ec5a28f817853be5008cf32e245b5f5ff/test/functional/wallet_inactive_hdchains.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_inactive_hdchains.py?ref=ee93c29ec5a28f817853be5008cf32e245b5f5ff",
        "patch": "@@ -0,0 +1,193 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"\n+Test Inactive HD Chains.\n+\"\"\"\n+import os\n+import shutil\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+)\n+\n+\n+class InactiveHDChainsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-keypool=10\"], [\"-nowallet\", \"-keypool=10\"]]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_bdb()\n+        self.skip_if_no_previous_releases()\n+\n+    def setup_nodes(self):\n+        self.add_nodes(self.num_nodes, extra_args=self.extra_args, versions=[\n+            None,\n+            170200, # 0.17.2 Does not have the key metadata upgrade\n+        ])\n+\n+        self.start_nodes()\n+        self.init_wallet(0)\n+\n+    def test_basic(self):\n+        self.log.info(\"Test basic case for inactive HD chains\")\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.nodes[0].createwallet(wallet_name=\"basic_base\", descriptors=False, blank=True)\n+        self.nodes[0].createwallet(wallet_name=\"basic_test\", descriptors=False, blank=True)\n+        base_wallet = self.nodes[0].get_wallet_rpc(\"basic_base\")\n+        test_wallet = self.nodes[0].get_wallet_rpc(\"basic_test\")\n+\n+        # Setup both wallets with the same HD seed\n+        seed = get_generate_key()\n+        base_wallet.sethdseed(True, seed.privkey)\n+        test_wallet.sethdseed(True, seed.privkey)\n+\n+        # Generate a new HD seed on the test wallet\n+        test_wallet.sethdseed()\n+\n+        # Get the address at index 6\n+        for _ in range(0, 5):\n+            base_wallet.getnewaddress()\n+        addr1 = base_wallet.getnewaddress()\n+        assert test_wallet.getaddressinfo(addr1)[\"ismine\"]\n+        # Get the address at index 13\n+        for _ in range(0, 6):\n+            base_wallet.getnewaddress()\n+        addr2 = base_wallet.getnewaddress()\n+        assert not test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+\n+        # Send to first address on the old seed\n+        txid = default.sendtoaddress(addr1, 10)\n+        self.generate(self.nodes[0], 1)\n+        test_wallet.gettransaction(txid)\n+\n+        # The test wallet should now know about the second address as it\n+        # should have generated it in the inactive chain's keypool\n+        assert test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+\n+        # Send to second address on the old seed\n+        txid = default.sendtoaddress(addr2, 10)\n+        self.generate(self.nodes[0], 1)\n+        test_wallet.gettransaction(txid)\n+\n+    def test_encrypted_wallet(self):\n+        self.log.info(\"Test inactive HD chains when wallet is encrypted\")\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.nodes[0].createwallet(wallet_name=\"enc_base\", descriptors=False, blank=True)\n+        self.nodes[0].createwallet(wallet_name=\"enc_test\", descriptors=False, blank=True)\n+        base_wallet = self.nodes[0].get_wallet_rpc(\"enc_base\")\n+        test_wallet = self.nodes[0].get_wallet_rpc(\"enc_test\")\n+\n+        # Setup both wallets with the same HD seed\n+        seed = get_generate_key()\n+        base_wallet.sethdseed(True, seed.privkey)\n+        test_wallet.sethdseed(True, seed.privkey)\n+\n+        # Encrypting will generate a new HD seed and flush the keypool\n+        test_wallet.encryptwallet(\"pass\")\n+\n+        # Get the address at index 6\n+        for _ in range(0, 5):\n+            base_wallet.getnewaddress()\n+        addr1 = base_wallet.getnewaddress()\n+        assert test_wallet.getaddressinfo(addr1)[\"ismine\"]\n+        # Get the address at index 13\n+        for _ in range(0, 6):\n+            base_wallet.getnewaddress()\n+        addr2 = base_wallet.getnewaddress()\n+        assert not test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+\n+        # Send to first address on the old seed\n+        txid = default.sendtoaddress(addr1, 10)\n+        self.generate(self.nodes[0], 1)\n+        test_wallet.gettransaction(txid)\n+\n+        # The test wallet will not be able to generate the topped up keypool\n+        # until it is unlocked. So it still should not know about the second address\n+        assert not test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+        test_wallet.walletpassphrase(\"pass\", 1)\n+\n+        # The test wallet should now know about the second address as it\n+        # should have generated it in the inactive chain's keypool\n+        assert test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+\n+        # Send to second address on the old seed\n+        txid = default.sendtoaddress(addr2, 10)\n+        self.generate(self.nodes[0], 1)\n+        test_wallet.gettransaction(txid)\n+\n+    def test_without_upgraded_keymeta(self):\n+        # Test that it is possible to top up inactive hd chains even if there is no key origin\n+        # in CKeyMetadata. This tests for the segfault reported in\n+        # https://github.com/bitcoin/bitcoin/issues/21605\n+        self.log.info(\"Test that topping up inactive HD chains does not need upgraded key origin\")\n+        default = self.nodes[0].get_wallet_rpc(self.default_wallet_name)\n+\n+        self.nodes[0].createwallet(wallet_name=\"keymeta_base\", descriptors=False, blank=True)\n+        self.nodes[1].createwallet_passthrough(wallet_name=\"keymeta_test\")\n+        base_wallet = self.nodes[0].get_wallet_rpc(\"keymeta_base\")\n+        test_wallet = self.nodes[1].get_wallet_rpc(\"keymeta_test\")\n+\n+        # Setup both wallets with the same HD seed\n+        seed = get_generate_key()\n+        base_wallet.sethdseed(True, seed.privkey)\n+        test_wallet.sethdseed(True, seed.privkey)\n+\n+        # Encrypting will generate a new HD seed and flush the keypool\n+        test_wallet.encryptwallet(\"pass\")\n+\n+        # Copy test wallet to node 0\n+        test_wallet.unloadwallet()\n+        test_wallet_dir = os.path.join(self.nodes[1].datadir, \"regtest/wallets/keymeta_test\")\n+        new_test_wallet_dir = os.path.join(self.nodes[0].datadir, \"regtest/wallets/keymeta_test\")\n+        shutil.copytree(test_wallet_dir, new_test_wallet_dir)\n+        self.nodes[0].loadwallet(\"keymeta_test\")\n+        test_wallet = self.nodes[0].get_wallet_rpc(\"keymeta_test\")\n+\n+        # Get the address at index 6\n+        for _ in range(0, 5):\n+            base_wallet.getnewaddress()\n+        addr1 = base_wallet.getnewaddress()\n+        assert test_wallet.getaddressinfo(addr1)[\"ismine\"]\n+        # Get the address at index 13\n+        for _ in range(0, 6):\n+            base_wallet.getnewaddress()\n+        addr2 = base_wallet.getnewaddress()\n+        assert not test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+\n+        # Send to first address on the old seed\n+        txid = default.sendtoaddress(addr1, 10)\n+        self.generate(self.nodes[0], 1)\n+        test_wallet.gettransaction(txid)\n+\n+        # The test wallet will not be able to generate the topped up keypool\n+        # until it is unlocked. So it still should not know about the second address\n+        assert not test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+        test_wallet.walletpassphrase(\"pass\", 1)\n+\n+        # The test wallet should now know about the second address as it\n+        # should have generated it in the inactive chain's keypool\n+        assert test_wallet.getaddressinfo(addr2)[\"ismine\"]\n+\n+        # Send to second address on the old seed\n+        txid = default.sendtoaddress(addr2, 10)\n+        self.generate(self.nodes[0], 1)\n+        test_wallet.gettransaction(txid)\n+\n+    def run_test(self):\n+        self.generate(self.nodes[0], 101)\n+\n+        self.test_basic()\n+        self.test_encrypted_wallet()\n+        self.test_without_upgraded_keymeta()\n+\n+\n+if __name__ == '__main__':\n+    InactiveHDChainsTest().main()"
      }
    ]
  }
]