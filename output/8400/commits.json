[
  {
    "sha": "0ff4375c93bd159233282de5a33ad2e6c1e79841",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmY0Mzc1YzkzYmQxNTkyMzMyODJkZTVhMzNhZDJlNmMxZTc5ODQx",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:30:28Z"
      },
      "committer": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:30:28Z"
      },
      "message": "[qa]: add parsing for '<host>:<port>' argument form to rpc_url()",
      "tree": {
        "sha": "e605a5671343d3ffe0201b0d4fc50d26bd6c2821",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e605a5671343d3ffe0201b0d4fc50d26bd6c2821"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff4375c93bd159233282de5a33ad2e6c1e79841",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df9ea42b888b0b5c0fa5866f012338c8f16374c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df9ea42b888b0b5c0fa5866f012338c8f16374c"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8aa34265c54471a3b15de761a6370517d99fab0a",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0ff4375c93bd159233282de5a33ad2e6c1e79841/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0ff4375c93bd159233282de5a33ad2e6c1e79841/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=0ff4375c93bd159233282de5a33ad2e6c1e79841",
        "patch": "@@ -171,7 +171,15 @@ def rpc_auth_pair(n):\n \n def rpc_url(i, rpchost=None):\n     rpc_u, rpc_p = rpc_auth_pair(i)\n-    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, rpchost or '127.0.0.1', rpc_port(i))\n+    host = '127.0.0.1'\n+    port = rpc_port(i)\n+    if rpchost:\n+        parts = rpchost.split(':')\n+        if len(parts) == 2:\n+            host, port = parts\n+        else:\n+            host = rpchost\n+    return \"http://%s:%s@%s:%d\" % (rpc_u, rpc_p, host, int(port))\n \n def wait_for_bitcoind_start(process, url, i):\n     '''"
      }
    ]
  },
  {
    "sha": "9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmJiNDE0YjgwMGNmNzFmOTNmMTVkMmNiNWQ0Y2YzMmM3MjI5NGU2",
    "commit": {
      "author": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:31:05Z"
      },
      "committer": {
        "name": "whythat",
        "email": "yuri.zhykin@gmail.com",
        "date": "2016-07-24T22:31:05Z"
      },
      "message": "[qa]: enable rpcbind_test",
      "tree": {
        "sha": "48cd8b9726e5a859c2a5cfee465c3517de398ea0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48cd8b9726e5a859c2a5cfee465c3517de398ea0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "0ff4375c93bd159233282de5a33ad2e6c1e79841",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff4375c93bd159233282de5a33ad2e6c1e79841",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff4375c93bd159233282de5a33ad2e6c1e79841"
      }
    ],
    "stats": {
      "total": 221,
      "additions": 93,
      "deletions": 128
    },
    "files": [
      {
        "sha": "84ab9d92c5090ebc86f2a417d915d0d09c59a4cb",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
        "patch": "@@ -158,7 +158,7 @@\n     'txn_clone.py --mineblock',\n     'forknotify.py',\n     'invalidateblock.py',\n-#    'rpcbind_test.py', #temporary, bug in libevent, see #6655\n+    'rpcbind_test.py',\n     'smartfees.py',\n     'maxblocksinflight.py',\n     'p2p-acceptblock.py',"
      },
      {
        "sha": "bf1cc8712611a7e962fc5dc0cfb9e70a7545ed59",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 92,
        "deletions": 127,
        "changes": 219,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bbb414b800cf71f93f15d2cb5d4cf32c72294e6/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=9bbb414b800cf71f93f15d2cb5d4cf32c72294e6",
        "patch": "@@ -5,143 +5,108 @@\n \n # Test for -rpcbind, as well as -rpcallowip and -rpcconnect\n \n-# TODO extend this test from the test framework (like all other tests)\n-\n import tempfile\n import traceback\n \n+from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.netutil import *\n \n-def run_bind_test(tmpdir, allow_ips, connect_to, addresses, expected):\n-    '''\n-    Start a node with requested rpcallowip and rpcbind parameters,\n-    then try to connect, and check if the set of bound addresses\n-    matches the expected set.\n-    '''\n-    expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n-    base_args = ['-disablewallet', '-nolisten']\n-    if allow_ips:\n-        base_args += ['-rpcallowip=' + x for x in allow_ips]\n-    binds = ['-rpcbind='+addr for addr in addresses]\n-    nodes = start_nodes(self.num_nodes, tmpdir, [base_args + binds], connect_to)\n-    try:\n-        pid = bitcoind_processes[0].pid\n-        assert_equal(set(get_bind_addrs(pid)), set(expected))\n-    finally:\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-\n-def run_allowip_test(tmpdir, allow_ips, rpchost, rpcport):\n-    '''\n-    Start a node with rpcwallow IP, and request getinfo\n-    at a non-localhost IP.\n-    '''\n-    base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n-    nodes = start_nodes(self.num_nodes, tmpdir, [base_args])\n-    try:\n-        # connect to node through non-loopback interface\n-        url = \"http://rt:rt@%s:%d\" % (rpchost, rpcport,)\n-        node = get_rpc_proxy(url, 1)\n-        node.getinfo()\n-    finally:\n-        node = None # make sure connection will be garbage collected and closed\n-        stop_nodes(nodes)\n-        wait_bitcoinds()\n-\n-\n-def run_test(tmpdir):\n-    assert(sys.platform.startswith('linux')) # due to OS-specific network stats queries, this test works only on Linux\n-    # find the first non-loopback interface for testing\n-    non_loopback_ip = None\n-    for name,ip in all_interfaces():\n-        if ip != '127.0.0.1':\n-            non_loopback_ip = ip\n-            break\n-    if non_loopback_ip is None:\n-        assert(not 'This test requires at least one non-loopback IPv4 interface')\n-    print(\"Using interface %s for testing\" % non_loopback_ip)\n+class RPCBindTest(BitcoinTestFramework):\n \n-    defaultport = rpc_port(0)\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n \n-    # check default without rpcallowip (IPv4 and IPv6 localhost)\n-    run_bind_test(tmpdir, None, '127.0.0.1', [],\n-        [('127.0.0.1', defaultport), ('::1', defaultport)])\n-    # check default with rpcallowip (IPv6 any)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', [],\n-        [('::0', defaultport)])\n-    # check only IPv4 localhost (explicit)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n-        [('127.0.0.1', defaultport)])\n-    # check only IPv4 localhost (explicit) with alternative port\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n-        [('127.0.0.1', 32171)])\n-    # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n-        [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n-    # check only IPv6 localhost (explicit)\n-    run_bind_test(tmpdir, ['[::1]'], '[::1]', ['[::1]'],\n-        [('::1', defaultport)])\n-    # check both IPv4 and IPv6 localhost (explicit)\n-    run_bind_test(tmpdir, ['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n-        [('127.0.0.1', defaultport), ('::1', defaultport)])\n-    # check only non-loopback interface\n-    run_bind_test(tmpdir, [non_loopback_ip], non_loopback_ip, [non_loopback_ip],\n-        [(non_loopback_ip, defaultport)])\n-\n-    # Check that with invalid rpcallowip, we are denied\n-    run_allowip_test(tmpdir, [non_loopback_ip], non_loopback_ip, defaultport)\n-    try:\n-        run_allowip_test(tmpdir, ['1.1.1.1'], non_loopback_ip, defaultport)\n-        assert(not 'Connection not denied by rpcallowip as expected')\n-    except ValueError:\n+    def setup_network(self):\n         pass\n \n-def main():\n-    import optparse\n-\n-    parser = optparse.OptionParser(usage=\"%prog [options]\")\n-    parser.add_option(\"--nocleanup\", dest=\"nocleanup\", default=False, action=\"store_true\",\n-                      help=\"Leave bitcoinds and test.* datadir on exit or error\")\n-    parser.add_option(\"--srcdir\", dest=\"srcdir\", default=\"../../src\",\n-                      help=\"Source directory containing bitcoind/bitcoin-cli (default: %default%)\")\n-    parser.add_option(\"--tmpdir\", dest=\"tmpdir\", default=tempfile.mkdtemp(prefix=\"test\"),\n-                      help=\"Root directory for datadirs\")\n-    (options, args) = parser.parse_args()\n-\n-    os.environ['PATH'] = options.srcdir+\":\"+os.environ['PATH']\n-\n-    check_json_precision()\n-\n-    success = False\n-    nodes = []\n-    try:\n-        print(\"Initializing test directory \"+options.tmpdir)\n-        if not os.path.isdir(options.tmpdir):\n-            os.makedirs(options.tmpdir)\n-        initialize_chain(options.tmpdir)\n-\n-        run_test(options.tmpdir)\n-\n-        success = True\n-\n-    except AssertionError as e:\n-        print(\"Assertion failed: \"+e.message)\n-    except Exception as e:\n-        print(\"Unexpected exception caught during testing: \"+str(e))\n-        traceback.print_tb(sys.exc_info()[2])\n-\n-    if not options.nocleanup:\n-        print(\"Cleaning up\")\n-        wait_bitcoinds()\n-        shutil.rmtree(options.tmpdir)\n+    def setup_nodes(self):\n+        pass\n \n-    if success:\n-        print(\"Tests successful\")\n-        sys.exit(0)\n-    else:\n-        print(\"Failed\")\n-        sys.exit(1)\n+    def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n+        '''\n+        Start a node with requested rpcallowip and rpcbind parameters,\n+        then try to connect, and check if the set of bound addresses\n+        matches the expected set.\n+        '''\n+        expected = [(addr_to_hex(addr), port) for (addr, port) in expected]\n+        base_args = ['-disablewallet', '-nolisten']\n+        if allow_ips:\n+            base_args += ['-rpcallowip=' + x for x in allow_ips]\n+        binds = ['-rpcbind='+addr for addr in addresses]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n+        try:\n+            pid = bitcoind_processes[0].pid\n+            assert_equal(set(get_bind_addrs(pid)), set(expected))\n+        finally:\n+            stop_nodes(self.nodes)\n+            wait_bitcoinds()\n+\n+    def run_allowip_test(self, allow_ips, rpchost, rpcport):\n+        '''\n+        Start a node with rpcwallow IP, and request getinfo\n+        at a non-localhost IP.\n+        '''\n+        base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n+        try:\n+            # connect to node through non-loopback interface\n+            node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+            node.getinfo()\n+        finally:\n+            node = None # make sure connection will be garbage collected and closed\n+            stop_nodes(self.nodes)\n+            wait_bitcoinds()\n+\n+    def run_test(self):\n+        # due to OS-specific network stats queries, this test works only on Linux\n+        assert(sys.platform.startswith('linux'))\n+        # find the first non-loopback interface for testing\n+        non_loopback_ip = None\n+        for name,ip in all_interfaces():\n+            if ip != '127.0.0.1':\n+                non_loopback_ip = ip\n+                break\n+        if non_loopback_ip is None:\n+            assert(not 'This test requires at least one non-loopback IPv4 interface')\n+        print(\"Using interface %s for testing\" % non_loopback_ip)\n+\n+        defaultport = rpc_port(0)\n+\n+        # check default without rpcallowip (IPv4 and IPv6 localhost)\n+        self.run_bind_test(None, '127.0.0.1', [],\n+            [('127.0.0.1', defaultport), ('::1', defaultport)])\n+        # check default with rpcallowip (IPv6 any)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', [],\n+            [('::0', defaultport)])\n+        # check only IPv4 localhost (explicit)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1'],\n+            [('127.0.0.1', defaultport)])\n+        # check only IPv4 localhost (explicit) with alternative port\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171'],\n+            [('127.0.0.1', 32171)])\n+        # check only IPv4 localhost (explicit) with multiple alternative ports on same host\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1:32171', ['127.0.0.1:32171', '127.0.0.1:32172'],\n+            [('127.0.0.1', 32171), ('127.0.0.1', 32172)])\n+        # check only IPv6 localhost (explicit)\n+        self.run_bind_test(['[::1]'], '[::1]', ['[::1]'],\n+            [('::1', defaultport)])\n+        # check both IPv4 and IPv6 localhost (explicit)\n+        self.run_bind_test(['127.0.0.1'], '127.0.0.1', ['127.0.0.1', '[::1]'],\n+            [('127.0.0.1', defaultport), ('::1', defaultport)])\n+        # check only non-loopback interface\n+        self.run_bind_test([non_loopback_ip], non_loopback_ip, [non_loopback_ip],\n+            [(non_loopback_ip, defaultport)])\n+\n+        # Check that with invalid rpcallowip, we are denied\n+        self.run_allowip_test([non_loopback_ip], non_loopback_ip, defaultport)\n+        try:\n+            self.run_allowip_test(['1.1.1.1'], non_loopback_ip, defaultport)\n+            assert(not 'Connection not denied by rpcallowip as expected')\n+        except JSONRPCException:\n+            pass\n \n if __name__ == '__main__':\n-    main()\n+    RPCBindTest ().main ()"
      }
    ]
  }
]