[
  {
    "sha": "e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMzgwODE4NDZkODg5ZmNiYmJjNmNhNGE0ZDNiY2EyNjgwN2ZkZTJm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-10T15:54:25Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-10T15:54:25Z"
      },
      "message": "Revert \"[TESTS] Move base58 to own module to break circular dependency\"\n\nThis reverts commit c75de5da5fdd3a304f9da3d8a2e0370d1723ddd0.",
      "tree": {
        "sha": "556102915a88e2923dd10fbdc244dbf11f8e4b25",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/556102915a88e2923dd10fbdc244dbf11f8e4b25"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38081846d889fcbbbc6ca4a4d3bca26807fde2f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6762a627ecb89ba8d4ed81a049a5d802e6dd75c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 71,
      "deletions": 74
    },
    "files": [
      {
        "sha": "9506b63f82081f9345529e848d231b531ace0e58",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 69,
        "deletions": 2,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e38081846d889fcbbbc6ca4a4d3bca26807fde2f/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e38081846d889fcbbbc6ca4a4d3bca26807fde2f/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
        "patch": "@@ -5,13 +5,15 @@\n \"\"\"Encode and decode BASE58, P2PKH and P2SH addresses.\"\"\"\n \n import enum\n+import unittest\n \n-from .base58 import byte_to_base58\n-from .script import hash160, sha256, CScript, OP_0\n+from .script import hash256, hash160, sha256, CScript, OP_0\n from .util import hex_str_to_bytes\n \n from . import segwit_addr\n \n+from test_framework.util import assert_equal\n+\n ADDRESS_BCRT1_UNSPENDABLE = 'bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj'\n ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR = 'addr(bcrt1qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq3xueyj)#juyq9d97'\n # Coins sent to this address can be spent with a witness stack of just OP_TRUE\n@@ -23,6 +25,52 @@ class AddressType(enum.Enum):\n     p2sh_segwit = 'p2sh-segwit'\n     legacy = 'legacy'  # P2PKH\n \n+\n+chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n+\n+\n+def byte_to_base58(b, version):\n+    result = ''\n+    str = b.hex()\n+    str = chr(version).encode('latin-1').hex() + str\n+    checksum = hash256(hex_str_to_bytes(str)).hex()\n+    str += checksum[:8]\n+    value = int('0x'+str,0)\n+    while value > 0:\n+        result = chars[value % 58] + result\n+        value //= 58\n+    while (str[:2] == '00'):\n+        result = chars[0] + result\n+        str = str[2:]\n+    return result\n+\n+\n+def base58_to_byte(s, verify_checksum=True):\n+    if not s:\n+        return b''\n+    n = 0\n+    for c in s:\n+        n *= 58\n+        assert c in chars\n+        digit = chars.index(c)\n+        n += digit\n+    h = '%x' % n\n+    if len(h) % 2:\n+        h = '0' + h\n+    res = n.to_bytes((n.bit_length() + 7) // 8, 'big')\n+    pad = 0\n+    for c in s:\n+        if c == chars[0]:\n+            pad += 1\n+        else:\n+            break\n+    res = b'\\x00' * pad + res\n+    if verify_checksum:\n+        assert_equal(hash256(res[:-4])[:4], res[-4:])\n+\n+    return res[1:-4], int(res[0])\n+\n+\n def keyhash_to_p2pkh(hash, main = False):\n     assert len(hash) == 20\n     version = 0 if main else 111\n@@ -80,3 +128,22 @@ def check_script(script):\n     if (type(script) is bytes or type(script) is CScript):\n         return script\n     assert False\n+\n+\n+class TestFrameworkScript(unittest.TestCase):\n+    def test_base58encodedecode(self):\n+        def check_base58(data, version):\n+            self.assertEqual(base58_to_byte(byte_to_base58(data, version)), (data, version))\n+\n+        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 111)\n+        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 111)\n+        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n+        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 0)\n+        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 0)\n+        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n+        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n+        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n+        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)"
      },
      {
        "sha": "3dab3569d0c1c246d25b4dfcacdc4ef7b34926e2",
        "filename": "test/functional/test_framework/base58.py",
        "status": "removed",
        "additions": 0,
        "deletions": 70,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2/test/functional/test_framework/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6762a627ecb89ba8d4ed81a049a5d802e6dd75c2/test/functional/test_framework/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/base58.py?ref=6762a627ecb89ba8d4ed81a049a5d802e6dd75c2",
        "patch": "@@ -1,70 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Encode BASE58.\"\"\"\n-\n-import unittest\n-\n-from .messages import hash256\n-from .util import hex_str_to_bytes, assert_equal\n-\n-chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n-\n-def byte_to_base58(b, version):\n-    result = ''\n-    str = b.hex()\n-    str = chr(version).encode('latin-1').hex() + str\n-    checksum = hash256(hex_str_to_bytes(str)).hex()\n-    str += checksum[:8]\n-    value = int('0x'+str,0)\n-    while value > 0:\n-        result = chars[value % 58] + result\n-        value //= 58\n-    while (str[:2] == '00'):\n-        result = chars[0] + result\n-        str = str[2:]\n-    return result\n-\n-def base58_to_byte(s, verify_checksum=True):\n-    if not s:\n-        return b''\n-    n = 0\n-    for c in s:\n-        n *= 58\n-        assert c in chars\n-        digit = chars.index(c)\n-        n += digit\n-    h = '%x' % n\n-    if len(h) % 2:\n-        h = '0' + h\n-    res = n.to_bytes((n.bit_length() + 7) // 8, 'big')\n-    pad = 0\n-    for c in s:\n-        if c == chars[0]:\n-            pad += 1\n-        else:\n-            break\n-    res = b'\\x00' * pad + res\n-    if verify_checksum:\n-        assert_equal(hash256(res[:-4])[:4], res[-4:])\n-\n-    return res[1:-4], int(res[0])\n-\n-class TestFrameworkScript(unittest.TestCase):\n-    def test_base58encodedecode(self):\n-        def check_base58(data, version):\n-            self.assertEqual(base58_to_byte(byte_to_base58(data, version)), (data, version))\n-\n-        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 111)\n-        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 111)\n-        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 111)\n-        check_base58(b'\\x1f\\x8e\\xa1p*{\\xd4\\x94\\x1b\\xca\\tA\\xb8R\\xc4\\xbb\\xfe\\xdb.\\x05', 0)\n-        check_base58(b':\\x0b\\x05\\xf4\\xd7\\xf6l;\\xa7\\x00\\x9fE50)l\\x84\\\\\\xc9\\xcf', 0)\n-        check_base58(b'A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n-        check_base58(b'\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n-        check_base58(b'\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)\n-        check_base58(b'\\0\\0\\0A\\xc1\\xea\\xf1\\x11\\x80%Y\\xba\\xd6\\x1b`\\xd6+\\x1f\\x89|c\\x92\\x8a', 0)"
      },
      {
        "sha": "f2d6fba4a6f8b8f76cd2dd2f54d6279cfbe0d883",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e38081846d889fcbbbc6ca4a4d3bca26807fde2f/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e38081846d889fcbbbc6ca4a4d3bca26807fde2f/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
        "patch": "@@ -8,7 +8,7 @@\n anything but tests.\"\"\"\n import random\n \n-from .base58 import byte_to_base58\n+from .address import byte_to_base58\n \n def modinv(a, n):\n     \"\"\"Compute the modular inverse of a modulo n"
      },
      {
        "sha": "0ea65c68b87d55af677d2367731f0b51ea9a35f5",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e38081846d889fcbbbc6ca4a4d3bca26807fde2f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e38081846d889fcbbbc6ca4a4d3bca26807fde2f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
        "patch": "@@ -67,7 +67,7 @@\n TEST_EXIT_SKIPPED = 77\n \n TEST_FRAMEWORK_MODULES = [\n-    \"base58\",\n+    \"address\",\n     \"blocktools\",\n     \"script\",\n ]"
      }
    ]
  },
  {
    "sha": "b216b0b71f7853d747af8b712fc250c699f3c320",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjE2YjBiNzFmNzg1M2Q3NDdhZjhiNzEyZmMyNTBjNjk5ZjNjMzIw",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-10T15:56:44Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-10T15:56:44Z"
      },
      "message": "[tests] sort imports in rpc_createmultisig.py",
      "tree": {
        "sha": "910c6b2422bdab4d4f22d579ef1470dbfa3851ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/910c6b2422bdab4d4f22d579ef1470dbfa3851ad"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b216b0b71f7853d747af8b712fc250c699f3c320",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b216b0b71f7853d747af8b712fc250c699f3c320",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b216b0b71f7853d747af8b712fc250c699f3c320",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b216b0b71f7853d747af8b712fc250c699f3c320/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e38081846d889fcbbbc6ca4a4d3bca26807fde2f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e38081846d889fcbbbc6ca4a4d3bca26807fde2f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 6,
      "deletions": 7
    },
    "files": [
      {
        "sha": "c5ec7fdecb7ad0d7aac8a2d06bb072959d756f5d",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b216b0b71f7853d747af8b712fc250c699f3c320/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b216b0b71f7853d747af8b712fc250c699f3c320/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=b216b0b71f7853d747af8b712fc250c699f3c320",
        "patch": "@@ -3,21 +3,20 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test multisig RPCs\"\"\"\n+import binascii\n+import decimal\n+import itertools\n+import json\n+import os\n \n from test_framework.authproxy import JSONRPCException\n from test_framework.descriptors import descsum_create, drop_origins\n+from test_framework.key import ECPubKey, ECKey, bytes_to_wif\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n     assert_equal,\n )\n-from test_framework.key import ECPubKey, ECKey, bytes_to_wif\n-\n-import binascii\n-import decimal\n-import itertools\n-import json\n-import os\n \n class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):"
      }
    ]
  },
  {
    "sha": "3a83a01694160f2e722e1bc90a328bd569b8e109",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTgzYTAxNjk0MTYwZjJlNzIyZTFiYzkwYTMyOGJkNTY5YjhlMTA5",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-10T16:10:02Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-06-10T16:10:02Z"
      },
      "message": "[tests] move generate_wif_key to wallet_util.py\n\ngenerate_wif_key is a wallet utility function. Move\nit from the EC key module to the wallet util module.",
      "tree": {
        "sha": "1b8118897c9c83688f975fb40ededecb948a8b82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b8118897c9c83688f975fb40ededecb948a8b82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a83a01694160f2e722e1bc90a328bd569b8e109",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a83a01694160f2e722e1bc90a328bd569b8e109",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a83a01694160f2e722e1bc90a328bd569b8e109",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a83a01694160f2e722e1bc90a328bd569b8e109/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b216b0b71f7853d747af8b712fc250c699f3c320",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b216b0b71f7853d747af8b712fc250c699f3c320",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b216b0b71f7853d747af8b712fc250c699f3c320"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 15,
      "deletions": 18
    },
    "files": [
      {
        "sha": "3c81a4a4e2714722a096773981ba3a84f2eada90",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a83a01694160f2e722e1bc90a328bd569b8e109/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a83a01694160f2e722e1bc90a328bd569b8e109/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=3a83a01694160f2e722e1bc90a328bd569b8e109",
        "patch": "@@ -11,12 +11,13 @@\n \n from test_framework.authproxy import JSONRPCException\n from test_framework.descriptors import descsum_create, drop_origins\n-from test_framework.key import ECPubKey, ECKey, bytes_to_wif\n+from test_framework.key import ECPubKey, ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n     assert_equal,\n )\n+from test_framework.wallet_util import bytes_to_wif\n \n class RpcCreateMultiSigTest(BitcoinTestFramework):\n     def set_test_params(self):"
      },
      {
        "sha": "912c0ca978e31dc0fb70593240f6dd2f2a00c482",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a83a01694160f2e722e1bc90a328bd569b8e109/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a83a01694160f2e722e1bc90a328bd569b8e109/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=3a83a01694160f2e722e1bc90a328bd569b8e109",
        "patch": "@@ -8,8 +8,6 @@\n anything but tests.\"\"\"\n import random\n \n-from .address import byte_to_base58\n-\n def modinv(a, n):\n     \"\"\"Compute the modular inverse of a modulo n\n \n@@ -386,14 +384,3 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n-\n-def bytes_to_wif(b, compressed=True):\n-    if compressed:\n-        b += b'\\x01'\n-    return byte_to_base58(b, 239)\n-\n-def generate_wif_key():\n-    # Makes a WIF privkey for imports\n-    k = ECKey()\n-    k.generate()\n-    return bytes_to_wif(k.get_bytes(), k.is_compressed)"
      },
      {
        "sha": "b9c0fb669101274ee9be95167488de3c625b6823",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a83a01694160f2e722e1bc90a328bd569b8e109/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a83a01694160f2e722e1bc90a328bd569b8e109/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=3a83a01694160f2e722e1bc90a328bd569b8e109",
        "patch": "@@ -6,17 +6,15 @@\n from collections import namedtuple\n \n from test_framework.address import (\n+    byte_to_base58,\n     key_to_p2pkh,\n     key_to_p2sh_p2wpkh,\n     key_to_p2wpkh,\n     script_to_p2sh,\n     script_to_p2sh_p2wsh,\n     script_to_p2wsh,\n )\n-from test_framework.key import (\n-    bytes_to_wif,\n-    ECKey,\n-)\n+from test_framework.key import ECKey\n from test_framework.script import (\n     CScript,\n     OP_0,\n@@ -120,3 +118,14 @@ def test_address(node, address, **kwargs):\n                 raise AssertionError(\"key {} unexpectedly returned in getaddressinfo.\".format(key))\n         elif addr_info[key] != value:\n             raise AssertionError(\"key {} value {} did not match expected value {}\".format(key, addr_info[key], value))\n+\n+def bytes_to_wif(b, compressed=True):\n+    if compressed:\n+        b += b'\\x01'\n+    return byte_to_base58(b, 239)\n+\n+def generate_wif_key():\n+    # Makes a WIF privkey for imports\n+    k = ECKey()\n+    k.generate()\n+    return bytes_to_wif(k.get_bytes(), k.is_compressed)"
      }
    ]
  }
]