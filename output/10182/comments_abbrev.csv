laanwj,2017-04-11T07:31:42Z,">  I've been tempted down the reverse_lock RAII path many times before, but in my experience the potential usage points for such a class in a codebase are usually too few to justify its existence.\n\n`reverse_lock` was introduced to fix an issue with the lock not getting released in case of exceptions, and you may have reintroduced that issue by effectively reverting the code to previous state. ",https://github.com/bitcoin/bitcoin/pull/10182#issuecomment-293175405,293175405,
tjps,2017-04-11T07:32:27Z,I realize that now based on @dcousens comment.  I'll add it back in.,https://github.com/bitcoin/bitcoin/pull/10182#issuecomment-293175568,293175568,
theuni,2017-04-11T14:22:17Z,"@tjps Nice work.\n\nUnfortunately though, this is a bit more complicated than just switching out the primitives.\n\nboost::thread is interruptible, meaning that the scheduler thread as well as the workers will terminate soonafter a call to threadGroup.interrupt_all(). When switching to std::thread and std::condition_variable, we have to handle that manually instead. That's a good thing though,",https://github.com/bitcoin/bitcoin/pull/10182#issuecomment-293279095,293279095,
tjps,2017-05-01T19:02:36Z,Sorry to let this slide - all valid points raised.  Scuttling this PR to cleanup the backlog.,https://github.com/bitcoin/bitcoin/pull/10182#issuecomment-298403810,298403810,
dcousens,2017-04-11T07:20:57Z,is `f` guaranteed not to throw?   my understanding was that was a potential reason for the use of RAII here,https://github.com/bitcoin/bitcoin/pull/10182#discussion_r110829908,110829908,src/scheduler.cpp
tjps,2017-04-11T07:41:41Z,"You make a good point, I totally missed the exception safety as a feature of reverse_lock. Added it back.",https://github.com/bitcoin/bitcoin/pull/10182#discussion_r110833253,110833253,src/scheduler.cpp
