[
  {
    "sha": "8f9353cec31f99985a885153e47642e0deca2dc4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjkzNTNjZWMzMWY5OTk4NWE4ODUxNTNlNDc2NDJlMGRlY2EyZGM0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T01:17:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-18T20:36:11Z"
      },
      "message": "walletdb: Handle cursor internally\n\nInstead of returning a Dbc (BDB cursor object) and having the caller\ndeal with the cursor, make BerkeleyBatch handle the cursor internally.\n\nThis prepares BerkeleyBatch to work with other database systems as Dbc\nobjects are BDB specific.",
      "tree": {
        "sha": "bd91378cd5c30f9f67de1efe28919c8749e40b44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd91378cd5c30f9f67de1efe28919c8749e40b44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f9353cec31f99985a885153e47642e0deca2dc4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9353cec31f99985a885153e47642e0deca2dc4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9353cec31f99985a885153e47642e0deca2dc4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9353cec31f99985a885153e47642e0deca2dc4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbd7a91fdf3ff801fe5e4107e8346d0d6d11a899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbd7a91fdf3ff801fe5e4107e8346d0d6d11a899",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbd7a91fdf3ff801fe5e4107e8346d0d6d11a899"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 53,
      "deletions": 34
    },
    "files": [
      {
        "sha": "6b1b53faa119b4e0cfdc726856026b1094cb7eb8",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 19,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f9353cec31f99985a885153e47642e0deca2dc4/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f9353cec31f99985a885153e47642e0deca2dc4/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=8f9353cec31f99985a885153e47642e0deca2dc4",
        "patch": "@@ -335,7 +335,7 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n }\n \n \n-BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr)\n+BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr)\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n@@ -442,6 +442,7 @@ void BerkeleyBatch::Close()\n         activeTxn->abort();\n     activeTxn = nullptr;\n     pdb = nullptr;\n+    CloseCursor();\n \n     if (fFlushOnClose)\n         Flush();\n@@ -528,17 +529,17 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                         fSuccess = false;\n                     }\n \n-                    Dbc* pcursor = db.GetCursor();\n-                    if (pcursor)\n+                    if (db.CreateCursor())\n                         while (fSuccess) {\n                             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n                             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-                            int ret1 = db.ReadAtCursor(pcursor, ssKey, ssValue);\n-                            if (ret1 == DB_NOTFOUND) {\n-                                pcursor->close();\n+                            bool complete;\n+                            bool ret1 = db.ReadAtCursor(ssKey, ssValue, complete);\n+                            if (complete) {\n+                                db.CloseCursor();\n                                 break;\n-                            } else if (ret1 != 0) {\n-                                pcursor->close();\n+                            } else if (!ret1) {\n+                                db.CloseCursor();\n                                 fSuccess = false;\n                                 break;\n                             }\n@@ -738,27 +739,32 @@ void BerkeleyDatabase::ReloadDbEnv()\n     }\n }\n \n-Dbc* BerkeleyBatch::GetCursor()\n+bool BerkeleyBatch::CreateCursor()\n {\n+    assert(!m_cursor);\n     if (!pdb)\n-        return nullptr;\n-    Dbc* pcursor = nullptr;\n-    int ret = pdb->cursor(nullptr, &pcursor, 0);\n+        return false;\n+    int ret = pdb->cursor(nullptr, &m_cursor, 0);\n     if (ret != 0)\n-        return nullptr;\n-    return pcursor;\n+        return false;\n+    return true;\n }\n \n-int BerkeleyBatch::ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue)\n+bool BerkeleyBatch::ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete)\n {\n+    complete = false;\n+    if (m_cursor == nullptr) return false;\n     // Read at cursor\n     SafeDbt datKey;\n     SafeDbt datValue;\n-    int ret = pcursor->get(datKey, datValue, DB_NEXT);\n+    int ret = m_cursor->get(datKey, datValue, DB_NEXT);\n+    if (ret == DB_NOTFOUND) {\n+        complete = true;\n+    }\n     if (ret != 0)\n-        return ret;\n+        return false;\n     else if (datKey.get_data() == nullptr || datValue.get_data() == nullptr)\n-        return 99999;\n+        return false;\n \n     // Convert to streams\n     ssKey.SetType(SER_DISK);\n@@ -767,7 +773,14 @@ int BerkeleyBatch::ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& s\n     ssValue.SetType(SER_DISK);\n     ssValue.clear();\n     ssValue.write((char*)datValue.get_data(), datValue.get_size());\n-    return 0;\n+    return true;\n+}\n+\n+void BerkeleyBatch::CloseCursor()\n+{\n+    if (!m_cursor) return;\n+    m_cursor->close();\n+    m_cursor = nullptr;\n }\n \n bool BerkeleyBatch::TxnBegin()"
      },
      {
        "sha": "ff50bd9e74c6ff7b263e9f5890ae563eb7ecbe8f",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f9353cec31f99985a885153e47642e0deca2dc4/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f9353cec31f99985a885153e47642e0deca2dc4/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=8f9353cec31f99985a885153e47642e0deca2dc4",
        "patch": "@@ -198,6 +198,7 @@ class BerkeleyBatch\n     Db* pdb;\n     std::string strFile;\n     DbTxn* activeTxn;\n+    Dbc* m_cursor;\n     bool fReadOnly;\n     bool fFlushOnClose;\n     BerkeleyEnvironment *env;\n@@ -284,8 +285,9 @@ class BerkeleyBatch\n         return HasKey(ssKey);\n     }\n \n-    Dbc* GetCursor();\n-    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue);\n+    bool CreateCursor();\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete);\n+    void CloseCursor();\n     bool TxnBegin();\n     bool TxnCommit();\n     bool TxnAbort();"
      },
      {
        "sha": "1f3056d8f52f810194d1b36ac878c11b9ecfc680",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f9353cec31f99985a885153e47642e0deca2dc4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f9353cec31f99985a885153e47642e0deca2dc4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8f9353cec31f99985a885153e47642e0deca2dc4",
        "patch": "@@ -699,8 +699,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n \n         // Get cursor\n-        Dbc* pcursor = m_batch.GetCursor();\n-        if (!pcursor)\n+        if (!m_batch.CreateCursor())\n         {\n             pwallet->WalletLogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -711,11 +710,15 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             // Read next record\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = m_batch.ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n+            bool complete;\n+            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            if (complete) {\n+                m_batch.CloseCursor();\n                 break;\n-            else if (ret != 0)\n+            }\n+            else if (!ret)\n             {\n+                m_batch.CloseCursor();\n                 pwallet->WalletLogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -742,8 +745,8 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             if (!strErr.empty())\n                 pwallet->WalletLogPrintf(\"%s\\n\", strErr);\n         }\n-        pcursor->close();\n     } catch (...) {\n+        m_batch.CloseCursor();\n         result = DBErrors::CORRUPT;\n     }\n \n@@ -849,8 +852,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n         }\n \n         // Get cursor\n-        Dbc* pcursor = m_batch.GetCursor();\n-        if (!pcursor)\n+        if (!m_batch.CreateCursor())\n         {\n             LogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -861,11 +863,13 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n             // Read next record\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = m_batch.ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n+            bool complete;\n+            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            if (complete) {\n+                m_batch.CloseCursor();\n                 break;\n-            else if (ret != 0)\n-            {\n+            } else if (!ret) {\n+                m_batch.CloseCursor();\n                 LogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -880,8 +884,8 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n                 ssValue >> vWtx.back();\n             }\n         }\n-        pcursor->close();\n     } catch (...) {\n+        m_batch.CloseCursor();\n         result = DBErrors::CORRUPT;\n     }\n "
      }
    ]
  },
  {
    "sha": "31d39e7655b814db94ea3abe94c932d8d1b977e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQzOWU3NjU1YjgxNGRiOTRlYTNhYmU5NGM5MzJkOGQxYjk3N2U2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T18:37:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-18T23:42:04Z"
      },
      "message": "walletdb: Combine VerifyDatabaseFile and VerifyEnvironment\n\nCombine these two functions into a single Verify function that is a\nmember of WalletDatabase. Additionally, these are no longer static.",
      "tree": {
        "sha": "b2ebe36ab7452b6e4799dab2fd1568975bbe8eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2ebe36ab7452b6e4799dab2fd1568975bbe8eef"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d39e7655b814db94ea3abe94c932d8d1b977e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d39e7655b814db94ea3abe94c932d8d1b977e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31d39e7655b814db94ea3abe94c932d8d1b977e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d39e7655b814db94ea3abe94c932d8d1b977e6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f9353cec31f99985a885153e47642e0deca2dc4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f9353cec31f99985a885153e47642e0deca2dc4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f9353cec31f99985a885153e47642e0deca2dc4"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 22,
      "deletions": 29
    },
    "files": [
      {
        "sha": "b3e11dd4231acadf134b1f7ca5fb6ff59528ab7a",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=31d39e7655b814db94ea3abe94c932d8d1b977e6",
        "patch": "@@ -292,11 +292,10 @@ BerkeleyBatch::SafeDbt::operator Dbt*()\n     return &m_dbt;\n }\n \n-bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr)\n+bool BerkeleyDatabase::VerifyNotInUse(bilingual_str& errorStr)\n {\n-    std::string walletFile;\n-    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n+    fs::path file_path = walletDir / strFile;\n \n     LogPrintf(\"Using BerkeleyDB version %s\\n\", BerkeleyDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", file_path.string());\n@@ -309,16 +308,19 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str&\n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr)\n+bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n {\n-    std::string walletFile;\n-    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n+    fs::path file_path = walletDir / strFile;\n \n-    if (fs::exists(walletDir / walletFile))\n+    if (!VerifyNotInUse(errorStr)) {\n+        return false;\n+    }\n+\n+    if (fs::exists(file_path))\n     {\n-        if (!env->Verify(walletFile)) {\n-            errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), walletFile);\n+        if (!env->Verify(strFile)) {\n+            errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), file_path);\n             return false;\n         }\n     }"
      },
      {
        "sha": "30e55df363f689fd109738b0d0240cdb132ba5de",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=31d39e7655b814db94ea3abe94c932d8d1b977e6",
        "patch": "@@ -141,6 +141,11 @@ class BerkeleyDatabase\n     unsigned int nLastFlushed;\n     int64_t nLastWalletUpdate;\n \n+    /** Verifies that the database file is not in use */\n+    bool VerifyNotInUse(bilingual_str& error);\n+    /** Verifies the environment and database file */\n+    bool Verify(bilingual_str& error);\n+\n     /**\n      * Pointer to shared database environment.\n      *\n@@ -216,10 +221,6 @@ class BerkeleyBatch\n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     static bool PeriodicFlush(BerkeleyDatabase& database);\n-    /* verifies the database environment */\n-    static bool VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr);\n-    /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr);\n \n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "481bf589c3dc0d8ac79986276b2239ccfd23a2df",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=31d39e7655b814db94ea3abe94c932d8d1b977e6",
        "patch": "@@ -3708,15 +3708,13 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     std::unique_ptr<WalletDatabase> database = CreateWalletDatabase(wallet_path);\n \n     try {\n-        if (!WalletBatch::VerifyEnvironment(wallet_path, error_string)) {\n-            return false;\n-        }\n+        return database->Verify(error_string);\n     } catch (const fs::filesystem_error& e) {\n         error_string = Untranslated(strprintf(\"Error loading wallet %s. %s\", location.GetName(), fsbridge::get_filesystem_error_message(e)));\n         return false;\n     }\n \n-    return WalletBatch::VerifyDatabaseFile(wallet_path, error_string);\n+    assert(false);\n }\n \n std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)"
      },
      {
        "sha": "3cda854f2234d6b26b2217d1f4eadad1338836dc",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=31d39e7655b814db94ea3abe94c932d8d1b977e6",
        "patch": "@@ -977,16 +977,6 @@ void MaybeCompactWalletDB()\n     fOneThread = false;\n }\n \n-bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr)\n-{\n-    return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n-}\n-\n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str& errorStr)\n-{\n-    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, errorStr);\n-}\n-\n bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)\n {\n     return WriteIC(std::make_pair(DBKeys::DESTDATA, std::make_pair(address, key)), value);"
      },
      {
        "sha": "c06253ca3097f416e83c0721bba38eb3b2606b20",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d39e7655b814db94ea3abe94c932d8d1b977e6/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=31d39e7655b814db94ea3abe94c932d8d1b977e6",
        "patch": "@@ -112,7 +112,7 @@ static bool SalvageWallet(const fs::path& path)\n     // Initialize the environment before recovery\n     bilingual_str error_string;\n     try {\n-        WalletBatch::VerifyEnvironment(path, error_string);\n+        database->Verify(error_string);\n     } catch (const fs::filesystem_error& e) {\n         error_string = Untranslated(strprintf(\"Error loading wallet. %s\", fsbridge::get_filesystem_error_message(e)));\n     }\n@@ -141,10 +141,12 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             return false;\n         }\n         bilingual_str error;\n-        if (!WalletBatch::VerifyEnvironment(path, error)) {\n+        std::unique_ptr<WalletDatabase> database = CreateWalletDatabase(path);\n+        if (!database->VerifyNotInUse(error)) {\n             tfm::format(std::cerr, \"%s\\nError loading %s. Is wallet being used by other process?\\n\", error.original, name);\n             return false;\n         }\n+        database.reset();\n \n         if (command == \"info\") {\n             std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);"
      }
    ]
  },
  {
    "sha": "0bbfd0652f4a6b56dff7f07f786dcee683237652",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYmJmZDA2NTJmNGE2YjU2ZGZmN2YwN2Y3ODZkY2VlNjgzMjM3NjUy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T18:39:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-18T23:44:45Z"
      },
      "message": "walletdb: Move PeriodicFlush into WalletDatabase\n\nMake PeriodicFlush a non-static member of WalletDatabase instead of\nWalletBatch.",
      "tree": {
        "sha": "0a0227f2b12d79be5b348740cae27ed520186567",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a0227f2b12d79be5b348740cae27ed520186567"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0bbfd0652f4a6b56dff7f07f786dcee683237652",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bbfd0652f4a6b56dff7f07f786dcee683237652",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0bbfd0652f4a6b56dff7f07f786dcee683237652",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bbfd0652f4a6b56dff7f07f786dcee683237652/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31d39e7655b814db94ea3abe94c932d8d1b977e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d39e7655b814db94ea3abe94c932d8d1b977e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31d39e7655b814db94ea3abe94c932d8d1b977e6"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 6,
      "deletions": 9
    },
    "files": [
      {
        "sha": "61773062a40876133dd134d74d2711033c0fe769",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bbfd0652f4a6b56dff7f07f786dcee683237652/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bbfd0652f4a6b56dff7f07f786dcee683237652/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=0bbfd0652f4a6b56dff7f07f786dcee683237652",
        "patch": "@@ -627,14 +627,12 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n     }\n }\n \n-bool BerkeleyBatch::PeriodicFlush(BerkeleyDatabase& database)\n+bool BerkeleyDatabase::PeriodicFlush()\n {\n-    if (database.IsDummy()) {\n+    if (IsDummy()) {\n         return true;\n     }\n     bool ret = false;\n-    BerkeleyEnvironment *env = database.env.get();\n-    const std::string& strFile = database.strFile;\n     TRY_LOCK(cs_db, lockDb);\n     if (lockDb)\n     {"
      },
      {
        "sha": "c53af96d9353175560aab83032ba2b973fb3016b",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bbfd0652f4a6b56dff7f07f786dcee683237652/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bbfd0652f4a6b56dff7f07f786dcee683237652/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=0bbfd0652f4a6b56dff7f07f786dcee683237652",
        "patch": "@@ -131,6 +131,9 @@ class BerkeleyDatabase\n     /** Make sure all changes are flushed to disk.\n      */\n     void Flush(bool shutdown);\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    bool PeriodicFlush();\n \n     void IncrementUpdateCounter();\n \n@@ -218,10 +221,6 @@ class BerkeleyBatch\n     void Flush();\n     void Close();\n \n-    /* flush the wallet passively (TRY_LOCK)\n-       ideal to be called periodically */\n-    static bool PeriodicFlush(BerkeleyDatabase& database);\n-\n     template <typename K, typename T>\n     bool Read(const K& key, T& value)\n     {"
      },
      {
        "sha": "a0aacfda8debcd7f5a16f2dfd11ce92009dfe68a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0bbfd0652f4a6b56dff7f07f786dcee683237652/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0bbfd0652f4a6b56dff7f07f786dcee683237652/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0bbfd0652f4a6b56dff7f07f786dcee683237652",
        "patch": "@@ -968,7 +968,7 @@ void MaybeCompactWalletDB()\n         }\n \n         if (dbh.nLastFlushed != nUpdateCounter && GetTime() - dbh.nLastWalletUpdate >= 2) {\n-            if (BerkeleyBatch::PeriodicFlush(dbh)) {\n+            if (dbh.PeriodicFlush()) {\n                 dbh.nLastFlushed = nUpdateCounter;\n             }\n         }"
      }
    ]
  },
  {
    "sha": "a927f2982321e9886fc706c8c15bc2e27646cb69",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOTI3ZjI5ODIzMjFlOTg4NmZjNzA2YzhjMTViYzJlMjc2NDZjYjY5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T19:31:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-18T23:44:45Z"
      },
      "message": "walletdb: Move Rewrite into BerkeleyDatabase\n\nMake Rewrite actually a member of BerkeleyDatabase instead of a static\nfunction in BerkeleyBatch",
      "tree": {
        "sha": "a3577f7a997d7166a0c4d51933b42eed89374ade",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3577f7a997d7166a0c4d51933b42eed89374ade"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a927f2982321e9886fc706c8c15bc2e27646cb69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a927f2982321e9886fc706c8c15bc2e27646cb69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a927f2982321e9886fc706c8c15bc2e27646cb69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a927f2982321e9886fc706c8c15bc2e27646cb69/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0bbfd0652f4a6b56dff7f07f786dcee683237652",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0bbfd0652f4a6b56dff7f07f786dcee683237652",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0bbfd0652f4a6b56dff7f07f786dcee683237652"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 3,
      "deletions": 12
    },
    "files": [
      {
        "sha": "60aa9f77404136841469bdbef41015b2fb7b9688",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 10,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a927f2982321e9886fc706c8c15bc2e27646cb69/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a927f2982321e9886fc706c8c15bc2e27646cb69/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=a927f2982321e9886fc706c8c15bc2e27646cb69",
        "patch": "@@ -497,13 +497,11 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     Open(true);\n }\n \n-bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n+bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n {\n-    if (database.IsDummy()) {\n+    if (IsDummy()) {\n         return true;\n     }\n-    BerkeleyEnvironment *env = database.env.get();\n-    const std::string& strFile = database.strFile;\n     while (true) {\n         {\n             LOCK(cs_db);\n@@ -517,7 +515,7 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                 LogPrintf(\"BerkeleyBatch::Rewrite: Rewriting %s...\\n\", strFile);\n                 std::string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n-                    BerkeleyBatch db(database, \"r\");\n+                    BerkeleyBatch db(*this, \"r\");\n                     std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n \n                     int ret = pdbCopy->open(nullptr,               // Txn pointer\n@@ -667,11 +665,6 @@ bool BerkeleyDatabase::PeriodicFlush()\n     return ret;\n }\n \n-bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n-{\n-    return BerkeleyBatch::Rewrite(*this, pszSkip);\n-}\n-\n bool BerkeleyDatabase::Backup(const std::string& strDest) const\n {\n     if (IsDummy()) {"
      },
      {
        "sha": "a3b60ca1d8eb2c5907431ccc25d8a4d978d73cbd",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a927f2982321e9886fc706c8c15bc2e27646cb69/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a927f2982321e9886fc706c8c15bc2e27646cb69/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=a927f2982321e9886fc706c8c15bc2e27646cb69",
        "patch": "@@ -291,8 +291,6 @@ class BerkeleyBatch\n     bool TxnBegin();\n     bool TxnCommit();\n     bool TxnAbort();\n-\n-    bool static Rewrite(BerkeleyDatabase& database, const char* pszSkip = nullptr);\n };\n \n std::string BerkeleyDatabaseVersion();"
      }
    ]
  },
  {
    "sha": "fad6faf24589b777cd4c7c8a4f44066f11f967c9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ2ZmFmMjQ1ODliNzc3Y2Q0YzdjOGE0ZjQ0MDY2ZjExZjk2N2M5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-18T20:15:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-18T23:44:45Z"
      },
      "message": "walletdb: Refactor DatabaseBatch abstract class from BerkeleyBatch",
      "tree": {
        "sha": "9ef031ba589f81bea3e969542d09e907f9fe6f86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ef031ba589f81bea3e969542d09e907f9fe6f86"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad6faf24589b777cd4c7c8a4f44066f11f967c9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad6faf24589b777cd4c7c8a4f44066f11f967c9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad6faf24589b777cd4c7c8a4f44066f11f967c9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad6faf24589b777cd4c7c8a4f44066f11f967c9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a927f2982321e9886fc706c8c15bc2e27646cb69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a927f2982321e9886fc706c8c15bc2e27646cb69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a927f2982321e9886fc706c8c15bc2e27646cb69"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 107,
      "deletions": 78
    },
    "files": [
      {
        "sha": "a44c692b38c4b23e73c029bf7b56cc90c8d43e09",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 14,
        "deletions": 78,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad6faf24589b777cd4c7c8a4f44066f11f967c9/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad6faf24589b777cd4c7c8a4f44066f11f967c9/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=fad6faf24589b777cd4c7c8a4f44066f11f967c9",
        "patch": "@@ -174,7 +174,7 @@ class BerkeleyDatabase\n };\n \n /** RAII class that provides access to a Berkeley database */\n-class BerkeleyBatch\n+class BerkeleyBatch : public DatabaseBatch\n {\n     /** RAII class that automatically cleanses its data on destruction */\n     class SafeDbt final\n@@ -197,10 +197,10 @@ class BerkeleyBatch\n     };\n \n private:\n-    bool ReadKey(CDataStream& key, CDataStream& value);\n-    bool WriteKey(CDataStream& key, CDataStream& value, bool overwrite=true);\n-    bool EraseKey(CDataStream& key);\n-    bool HasKey(CDataStream& key);\n+    bool ReadKey(CDataStream& key, CDataStream& value) override;\n+    bool WriteKey(CDataStream& key, CDataStream& value, bool overwrite=true) override;\n+    bool EraseKey(CDataStream& key) override;\n+    bool HasKey(CDataStream& key) override;\n \n protected:\n     Db* pdb;\n@@ -213,84 +213,20 @@ class BerkeleyBatch\n \n public:\n     explicit BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);\n-    ~BerkeleyBatch() { Close(); }\n+    ~BerkeleyBatch() override { Close(); }\n \n     BerkeleyBatch(const BerkeleyBatch&) = delete;\n     BerkeleyBatch& operator=(const BerkeleyBatch&) = delete;\n \n-    void Flush();\n-    void Close();\n-\n-    template <typename K, typename T>\n-    bool Read(const K& key, T& value)\n-    {\n-        // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        bool success = false;\n-        bool ret = ReadKey(ssKey, ssValue);\n-        if (ret) {\n-            // Unserialize value\n-            try {\n-                ssValue >> value;\n-                success = true;\n-            } catch (const std::exception&) {\n-                // In this case success remains 'false'\n-            }\n-        }\n-        return ret && success;\n-    }\n-\n-    template <typename K, typename T>\n-    bool Write(const K& key, const T& value, bool fOverwrite = true)\n-    {\n-        // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        // Value\n-        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-        ssValue.reserve(10000);\n-        ssValue << value;\n-\n-        // Write\n-        return WriteKey(ssKey, ssValue, fOverwrite);\n-    }\n-\n-    template <typename K>\n-    bool Erase(const K& key)\n-    {\n-        // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        // Erase\n-        return EraseKey(ssKey);\n-    }\n-\n-    template <typename K>\n-    bool Exists(const K& key)\n-    {\n-        // Key\n-        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n-        ssKey.reserve(1000);\n-        ssKey << key;\n-\n-        // Exists\n-        return HasKey(ssKey);\n-    }\n+    void Flush() override;\n+    void Close() override;\n \n-    bool CreateCursor();\n-    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete);\n-    void CloseCursor();\n-    bool TxnBegin();\n-    bool TxnCommit();\n-    bool TxnAbort();\n+    bool CreateCursor() override;\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) override;\n+    void CloseCursor() override;\n+    bool TxnBegin() override;\n+    bool TxnCommit() override;\n+    bool TxnAbort() override;\n };\n \n std::string BerkeleyDatabaseVersion();"
      },
      {
        "sha": "8bfda26da1560e9ee9ffe87e7d512f32136c1359",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad6faf24589b777cd4c7c8a4f44066f11f967c9/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad6faf24589b777cd4c7c8a4f44066f11f967c9/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=fad6faf24589b777cd4c7c8a4f44066f11f967c9",
        "patch": "@@ -6,12 +6,105 @@\n #ifndef BITCOIN_WALLET_DB_H\n #define BITCOIN_WALLET_DB_H\n \n+#include <clientversion.h>\n #include <fs.h>\n+#include <streams.h>\n \n #include <string>\n \n /** Given a wallet directory path or legacy file path, return path to main data file in the wallet database. */\n fs::path WalletDataFilePath(const fs::path& wallet_path);\n void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename);\n \n+/** RAII class that provides access to a WalletDatabase */\n+class DatabaseBatch\n+{\n+private:\n+    virtual bool ReadKey(CDataStream& key, CDataStream& value) = 0;\n+    virtual bool WriteKey(CDataStream& key, CDataStream& value, bool overwrite=true) = 0;\n+    virtual bool EraseKey(CDataStream& key) = 0;\n+    virtual bool HasKey(CDataStream& key) = 0;\n+\n+public:\n+    explicit DatabaseBatch() {}\n+    virtual ~DatabaseBatch() {}\n+\n+    DatabaseBatch(const DatabaseBatch&) = delete;\n+    DatabaseBatch& operator=(const DatabaseBatch&) = delete;\n+\n+    virtual void Flush() = 0;\n+    virtual void Close() = 0;\n+\n+    template <typename K, typename T>\n+    bool Read(const K& key, T& value)\n+    {\n+        // Key\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+        bool success = false;\n+        bool ret = ReadKey(ssKey, ssValue);\n+        if (ret) {\n+            // Unserialize value\n+            try {\n+                ssValue >> value;\n+                success = true;\n+            } catch (const std::exception&) {\n+                // In this case success remains 'false'\n+            }\n+        }\n+        return ret && success;\n+    }\n+\n+    template <typename K, typename T>\n+    bool Write(const K& key, const T& value, bool fOverwrite = true)\n+    {\n+        // Key\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        // Value\n+        CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n+        ssValue.reserve(10000);\n+        ssValue << value;\n+\n+        // Write\n+        return WriteKey(ssKey, ssValue, fOverwrite);\n+    }\n+\n+    template <typename K>\n+    bool Erase(const K& key)\n+    {\n+        // Key\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        // Erase\n+        return EraseKey(ssKey);\n+    }\n+\n+    template <typename K>\n+    bool Exists(const K& key)\n+    {\n+        // Key\n+        CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n+        ssKey.reserve(1000);\n+        ssKey << key;\n+\n+        // Exists\n+        return HasKey(ssKey);\n+    }\n+\n+    virtual bool CreateCursor() = 0;\n+    virtual bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete) = 0;\n+    virtual void CloseCursor() = 0;\n+    virtual bool TxnBegin() = 0;\n+    virtual bool TxnCommit() = 0;\n+    virtual bool TxnAbort() = 0;\n+};\n+\n #endif // BITCOIN_WALLET_DB_H"
      }
    ]
  },
  {
    "sha": "1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTYyZTZlYmFhM2M0MWJiZTcyODljM2M3NzhlMDRmYjg3NDBiYWVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T20:54:58Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-19T15:17:23Z"
      },
      "message": "walletdb: Add MakeBatch function to BerkeleyDatabase and use it\n\nInstead of having WalletBatch construct the BerkeleyBatch, have\nBerkeleyDatabase do it and return a std::unique_ptr<BerkeleyBatch>",
      "tree": {
        "sha": "f517311a2b903e8ff0f30277320a21d12a52c9cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f517311a2b903e8ff0f30277320a21d12a52c9cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad6faf24589b777cd4c7c8a4f44066f11f967c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad6faf24589b777cd4c7c8a4f44066f11f967c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad6faf24589b777cd4c7c8a4f44066f11f967c9"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 37,
      "deletions": 27
    },
    "files": [
      {
        "sha": "7fba84fe172d43bf679834ebb7172da972454a82",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
        "patch": "@@ -873,3 +873,8 @@ bool BerkeleyBatch::HasKey(CDataStream& key)\n     int ret = pdb->exists(activeTxn, datKey, 0);\n     return ret == 0;\n }\n+\n+std::unique_ptr<BerkeleyBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+{\n+    return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);\n+}"
      },
      {
        "sha": "6a906eb07a283f22654f57f015c5b5a50cc24623",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
        "patch": "@@ -93,6 +93,8 @@ std::shared_ptr<BerkeleyEnvironment> GetWalletEnv(const fs::path& wallet_path, s\n /** Return wheter a BDB wallet database is currently loaded. */\n bool IsBDBWalletLoaded(const fs::path& wallet_path);\n \n+class BerkeleyBatch;\n+\n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n  **/\n@@ -163,6 +165,9 @@ class BerkeleyDatabase\n     /** Database pointer. This is initialized lazily and reset during flushes, so it can be null. */\n     std::unique_ptr<Db> m_db;\n \n+    /** Make a BerkeleyBatch connected to this database */\n+    std::unique_ptr<BerkeleyBatch> MakeBatch(const char* mode, bool flush_on_close);\n+\n private:\n     std::string strFile;\n "
      },
      {
        "sha": "be9d773cc404e4c1dfa1b55271d42b04a5cca24c",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
        "patch": "@@ -121,7 +121,7 @@ bool WalletBatch::WriteCryptedKey(const CPubKey& vchPubKey,\n     if (!WriteIC(key, std::make_pair(vchCryptedSecret, checksum), false)) {\n         // It may already exist, so try writing just the checksum\n         std::vector<unsigned char> val;\n-        if (!m_batch.Read(key, val)) {\n+        if (!m_batch->Read(key, val)) {\n             return false;\n         }\n         if (!WriteIC(key, std::make_pair(val, checksum), true)) {\n@@ -166,8 +166,8 @@ bool WalletBatch::WriteBestBlock(const CBlockLocator& locator)\n \n bool WalletBatch::ReadBestBlock(CBlockLocator& locator)\n {\n-    if (m_batch.Read(DBKeys::BESTBLOCK, locator) && !locator.vHave.empty()) return true;\n-    return m_batch.Read(DBKeys::BESTBLOCK_NOMERKLE, locator);\n+    if (m_batch->Read(DBKeys::BESTBLOCK, locator) && !locator.vHave.empty()) return true;\n+    return m_batch->Read(DBKeys::BESTBLOCK_NOMERKLE, locator);\n }\n \n bool WalletBatch::WriteOrderPosNext(int64_t nOrderPosNext)\n@@ -177,7 +177,7 @@ bool WalletBatch::WriteOrderPosNext(int64_t nOrderPosNext)\n \n bool WalletBatch::ReadPool(int64_t nPool, CKeyPool& keypool)\n {\n-    return m_batch.Read(std::make_pair(DBKeys::POOL, nPool), keypool);\n+    return m_batch->Read(std::make_pair(DBKeys::POOL, nPool), keypool);\n }\n \n bool WalletBatch::WritePool(int64_t nPool, const CKeyPool& keypool)\n@@ -692,14 +692,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n     LOCK(pwallet->cs_wallet);\n     try {\n         int nMinVersion = 0;\n-        if (m_batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (m_batch->Read(DBKeys::MINVERSION, nMinVersion)) {\n             if (nMinVersion > FEATURE_LATEST)\n                 return DBErrors::TOO_NEW;\n             pwallet->LoadMinVersion(nMinVersion);\n         }\n \n         // Get cursor\n-        if (!m_batch.CreateCursor())\n+        if (!m_batch->CreateCursor())\n         {\n             pwallet->WalletLogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -711,14 +711,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n             bool complete;\n-            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            bool ret = m_batch->ReadAtCursor(ssKey, ssValue, complete);\n             if (complete) {\n-                m_batch.CloseCursor();\n+                m_batch->CloseCursor();\n                 break;\n             }\n             else if (!ret)\n             {\n-                m_batch.CloseCursor();\n+                m_batch->CloseCursor();\n                 pwallet->WalletLogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -746,7 +746,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n                 pwallet->WalletLogPrintf(\"%s\\n\", strErr);\n         }\n     } catch (...) {\n-        m_batch.CloseCursor();\n+        m_batch->CloseCursor();\n         result = DBErrors::CORRUPT;\n     }\n \n@@ -785,7 +785,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n \n     // Last client version to open this wallet, was previously the file version number\n     int last_client = CLIENT_VERSION;\n-    m_batch.Read(DBKeys::VERSION, last_client);\n+    m_batch->Read(DBKeys::VERSION, last_client);\n \n     int wallet_version = pwallet->GetVersion();\n     pwallet->WalletLogPrintf(\"Wallet File Version = %d\\n\", wallet_version > 0 ? wallet_version : last_client);\n@@ -810,7 +810,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         return DBErrors::NEED_REWRITE;\n \n     if (last_client < CLIENT_VERSION) // Update\n-        m_batch.Write(DBKeys::VERSION, CLIENT_VERSION);\n+        m_batch->Write(DBKeys::VERSION, CLIENT_VERSION);\n \n     if (wss.fAnyUnordered)\n         result = pwallet->ReorderTransactions();\n@@ -846,13 +846,13 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n \n     try {\n         int nMinVersion = 0;\n-        if (m_batch.Read(DBKeys::MINVERSION, nMinVersion)) {\n+        if (m_batch->Read(DBKeys::MINVERSION, nMinVersion)) {\n             if (nMinVersion > FEATURE_LATEST)\n                 return DBErrors::TOO_NEW;\n         }\n \n         // Get cursor\n-        if (!m_batch.CreateCursor())\n+        if (!m_batch->CreateCursor())\n         {\n             LogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -864,12 +864,12 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n             bool complete;\n-            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            bool ret = m_batch->ReadAtCursor(ssKey, ssValue, complete);\n             if (complete) {\n-                m_batch.CloseCursor();\n+                m_batch->CloseCursor();\n                 break;\n             } else if (!ret) {\n-                m_batch.CloseCursor();\n+                m_batch->CloseCursor();\n                 LogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -885,7 +885,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n             }\n         }\n     } catch (...) {\n-        m_batch.CloseCursor();\n+        m_batch->CloseCursor();\n         result = DBErrors::CORRUPT;\n     }\n \n@@ -1000,17 +1000,17 @@ bool WalletBatch::WriteWalletFlags(const uint64_t flags)\n \n bool WalletBatch::TxnBegin()\n {\n-    return m_batch.TxnBegin();\n+    return m_batch->TxnBegin();\n }\n \n bool WalletBatch::TxnCommit()\n {\n-    return m_batch.TxnCommit();\n+    return m_batch->TxnCommit();\n }\n \n bool WalletBatch::TxnAbort()\n {\n-    return m_batch.TxnAbort();\n+    return m_batch->TxnAbort();\n }\n \n bool IsWalletLoaded(const fs::path& wallet_path)"
      },
      {
        "sha": "6b55361c07dae19e5b2b12a8ee65eeccfc0c3cc4",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
        "patch": "@@ -183,32 +183,32 @@ class WalletBatch\n     template <typename K, typename T>\n     bool WriteIC(const K& key, const T& value, bool fOverwrite = true)\n     {\n-        if (!m_batch.Write(key, value, fOverwrite)) {\n+        if (!m_batch->Write(key, value, fOverwrite)) {\n             return false;\n         }\n         m_database.IncrementUpdateCounter();\n         if (m_database.nUpdateCounter % 1000 == 0) {\n-            m_batch.Flush();\n+            m_batch->Flush();\n         }\n         return true;\n     }\n \n     template <typename K>\n     bool EraseIC(const K& key)\n     {\n-        if (!m_batch.Erase(key)) {\n+        if (!m_batch->Erase(key)) {\n             return false;\n         }\n         m_database.IncrementUpdateCounter();\n         if (m_database.nUpdateCounter % 1000 == 0) {\n-            m_batch.Flush();\n+            m_batch->Flush();\n         }\n         return true;\n     }\n \n public:\n     explicit WalletBatch(WalletDatabase& database, const char* pszMode = \"r+\", bool _fFlushOnClose = true) :\n-        m_batch(database, pszMode, _fFlushOnClose),\n+        m_batch(database.MakeBatch(pszMode, _fFlushOnClose)),\n         m_database(database)\n     {\n     }\n@@ -280,7 +280,7 @@ class WalletBatch\n     //! Abort current transaction\n     bool TxnAbort();\n private:\n-    BerkeleyBatch m_batch;\n+    std::unique_ptr<BerkeleyBatch> m_batch;\n     WalletDatabase& m_database;\n };\n "
      }
    ]
  },
  {
    "sha": "34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDIzOGRjZmE2MzVhNDJlZGQ0ZDJiMTY0ZjkxYzNjYmZjZDY2ZmI0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T21:59:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T00:40:44Z"
      },
      "message": "walletdb: Move BerkeleyDatabase::Flush(true) to Close()\n\nInstead of having Flush optionally shutdown the database and\nenvironment, add a Close() function that does that.",
      "tree": {
        "sha": "8f91f4ec080ca9176335fbdb70e237f2731bfe9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f91f4ec080ca9176335fbdb70e237f2731bfe9e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e62e6ebaa3c41bbe7289c3c778e04fb8740baef"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 40,
      "deletions": 30
    },
    "files": [
      {
        "sha": "4d14040018bddc3b3f95162b8220c68ae302d004",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "patch": "@@ -336,6 +336,14 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n     dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n+BerkeleyDatabase::~BerkeleyDatabase()\n+{\n+    if (env) {\n+        size_t erased = env->m_databases.erase(strFile);\n+        assert(erased == 1);\n+        env->m_fileids.erase(strFile);\n+    }\n+}\n \n BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr)\n {\n@@ -706,22 +714,17 @@ bool BerkeleyDatabase::Backup(const std::string& strDest) const\n     }\n }\n \n-void BerkeleyDatabase::Flush(bool shutdown)\n+void BerkeleyDatabase::Flush()\n {\n     if (!IsDummy()) {\n-        env->Flush(shutdown);\n-        if (shutdown) {\n-            LOCK(cs_db);\n-            g_dbenvs.erase(env->Directory().string());\n-            env = nullptr;\n-        } else {\n-            // TODO: To avoid g_dbenvs.erase erasing the environment prematurely after the\n-            // first database shutdown when multiple databases are open in the same\n-            // environment, should replace raw database `env` pointers with shared or weak\n-            // pointers, or else separate the database and environment shutdowns so\n-            // environments can be shut down after databases.\n-            env->m_fileids.erase(strFile);\n-        }\n+        env->Flush(false);\n+    }\n+}\n+\n+void BerkeleyDatabase::Close()\n+{\n+    if (!IsDummy()) {\n+        env->Flush(true);\n     }\n }\n "
      },
      {
        "sha": "1583220f7806f23812a5f90a84b47239a13a66e4",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "patch": "@@ -115,12 +115,7 @@ class BerkeleyDatabase\n         assert(inserted.second);\n     }\n \n-    ~BerkeleyDatabase() {\n-        if (env) {\n-            size_t erased = env->m_databases.erase(strFile);\n-            assert(erased == 1);\n-        }\n-    }\n+    ~BerkeleyDatabase();\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n@@ -130,9 +125,13 @@ class BerkeleyDatabase\n      */\n     bool Backup(const std::string& strDest) const;\n \n-    /** Make sure all changes are flushed to disk.\n+    /** Make sure all changes are flushed to database file.\n+     */\n+    void Flush();\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n      */\n-    void Flush(bool shutdown);\n+    void Close();\n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n     bool PeriodicFlush();"
      },
      {
        "sha": "63a318c7b8325ae8b689eac03e6ed227a813a993",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "patch": "@@ -96,14 +96,14 @@ void StartWallets(CScheduler& scheduler)\n void FlushWallets()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        pwallet->Flush(false);\n+        pwallet->Flush();\n     }\n }\n \n void StopWallets()\n {\n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        pwallet->Flush(true);\n+        pwallet->Close();\n     }\n }\n "
      },
      {
        "sha": "c2814c722ebcf699e67d2886c472e1b4c396c091",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "patch": "@@ -423,9 +423,14 @@ bool CWallet::HasWalletSpend(const uint256& txid) const\n     return (iter != mapTxSpends.end() && iter->first.hash == txid);\n }\n \n-void CWallet::Flush(bool shutdown)\n+void CWallet::Flush()\n {\n-    database->Flush(shutdown);\n+    database->Flush();\n+}\n+\n+void CWallet::Close()\n+{\n+    database->Close();\n }\n \n void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)"
      },
      {
        "sha": "5d1887629dfdad304b1dcc3516074e537a4c4ec9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "patch": "@@ -1083,7 +1083,10 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Flush wallet (bitdb flush)\n-    void Flush(bool shutdown=false);\n+    void Flush();\n+\n+    //! Close wallet database\n+    void Close();\n \n     /** Wallet is about to be unloaded */\n     boost::signals2::signal<void ()> NotifyUnload;"
      },
      {
        "sha": "5f2e174bfe52fbafe371225b44a1669d6f8d6c6c",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "patch": "@@ -17,7 +17,7 @@ namespace WalletTool {\n static void WalletToolReleaseWallet(CWallet* wallet)\n {\n     wallet->WalletLogPrintf(\"Releasing wallet\\n\");\n-    wallet->Flush(true);\n+    wallet->Close();\n     delete wallet;\n }\n \n@@ -133,7 +133,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         std::shared_ptr<CWallet> wallet_instance = CreateWallet(name, path);\n         if (wallet_instance) {\n             WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Flush(true);\n+            wallet_instance->Close();\n         }\n     } else if (command == \"info\" || command == \"salvage\") {\n         if (!fs::exists(path)) {\n@@ -152,7 +152,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n             if (!wallet_instance) return false;\n             WalletShowInfo(wallet_instance.get());\n-            wallet_instance->Flush(true);\n+            wallet_instance->Close();\n         } else if (command == \"salvage\") {\n             return SalvageWallet(path);\n         }"
      }
    ]
  },
  {
    "sha": "6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjkyMmRkMzFkNTQ4ZmUzOWJiYThhZmQ3MDA0NTMzYTdlOGZhMmJk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T00:51:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T01:38:03Z"
      },
      "message": "walletdb: Introduce AddRef and RemoveRef functions\n\nRefactor mapFileUseCount increment and decrement to separate functions\nAddRef and RemoveRef",
      "tree": {
        "sha": "3244fcbcc0f47836ea9087c7c91a43e83cb39fe2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3244fcbcc0f47836ea9087c7c91a43e83cb39fe2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b922dd31d548fe39bba8afd7004533a7e8fa2bd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34238dcfa635a42edd4d2b164f91c3cbfcd66fb4"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 24,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2023d03757028d319713cd0ed9fc3dba93e444b5",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 7,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b922dd31d548fe39bba8afd7004533a7e8fa2bd/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b922dd31d548fe39bba8afd7004533a7e8fa2bd/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
        "patch": "@@ -345,7 +345,7 @@ BerkeleyDatabase::~BerkeleyDatabase()\n     }\n }\n \n-BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr)\n+BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr), m_database(database)\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n@@ -419,7 +419,7 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n                 fReadOnly = fTmp;\n             }\n         }\n-        ++env->mapFileUseCount[strFilename];\n+        database.AddRef();\n         strFile = strFilename;\n     }\n }\n@@ -457,11 +457,7 @@ void BerkeleyBatch::Close()\n     if (fFlushOnClose)\n         Flush();\n \n-    {\n-        LOCK(cs_db);\n-        --env->mapFileUseCount[strFile];\n-    }\n-    env->m_db_in_use.notify_all();\n+    m_database.RemoveRef();\n }\n \n void BerkeleyEnvironment::CloseDb(const std::string& strFile)\n@@ -877,6 +873,21 @@ bool BerkeleyBatch::HasKey(CDataStream& key)\n     return ret == 0;\n }\n \n+void BerkeleyDatabase::AddRef()\n+{\n+    LOCK(cs_db);\n+    ++env->mapFileUseCount[strFile];\n+}\n+\n+void BerkeleyDatabase::RemoveRef()\n+{\n+    {\n+        LOCK(cs_db);\n+        --env->mapFileUseCount[strFile];\n+    }\n+    env->m_db_in_use.notify_all();\n+}\n+\n std::unique_ptr<BerkeleyBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n {\n     return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);"
      },
      {
        "sha": "daccf5eb5c201e828572cf61ab5829eed983af7d",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b922dd31d548fe39bba8afd7004533a7e8fa2bd/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b922dd31d548fe39bba8afd7004533a7e8fa2bd/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
        "patch": "@@ -121,6 +121,11 @@ class BerkeleyDatabase\n      */\n     bool Rewrite(const char* pszSkip=nullptr);\n \n+    /** Indicate the a new database user has began using the database. */\n+    void AddRef();\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. */\n+    void RemoveRef();\n+\n     /** Back up the entire database to a file.\n      */\n     bool Backup(const std::string& strDest) const;\n@@ -214,6 +219,7 @@ class BerkeleyBatch : public DatabaseBatch\n     bool fReadOnly;\n     bool fFlushOnClose;\n     BerkeleyEnvironment *env;\n+    BerkeleyDatabase& m_database;\n \n public:\n     explicit BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode = \"r+\", bool fFlushOnCloseIn=true);"
      }
    ]
  },
  {
    "sha": "8c014161423a11fd75f976aa094d9bf6642a4875",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YzAxNDE2MTQyM2ExMWZkNzVmOTc2YWEwOTRkOWJmNjY0MmE0ODc1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T00:55:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T01:38:24Z"
      },
      "message": "walletdb: Add BerkeleyDatabase::Open dummy function\n\nAdds an Open function for the class abstraction that does nothing for\nnow.",
      "tree": {
        "sha": "1a4e7612d398b3403cd1957ffa32ac0c13590670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a4e7612d398b3403cd1957ffa32ac0c13590670"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8c014161423a11fd75f976aa094d9bf6642a4875",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c014161423a11fd75f976aa094d9bf6642a4875",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8c014161423a11fd75f976aa094d9bf6642a4875",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c014161423a11fd75f976aa094d9bf6642a4875/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b922dd31d548fe39bba8afd7004533a7e8fa2bd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b922dd31d548fe39bba8afd7004533a7e8fa2bd"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9f075659d4dfea3ba85d7e74d371d73a5559c37b",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c014161423a11fd75f976aa094d9bf6642a4875/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c014161423a11fd75f976aa094d9bf6642a4875/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=8c014161423a11fd75f976aa094d9bf6642a4875",
        "patch": "@@ -424,6 +424,11 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n     }\n }\n \n+void BerkeleyDatabase::Open(const char* mode)\n+{\n+    throw std::logic_error(\"BerkeleyDatabase does not implement Open. This function should not be called.\");\n+}\n+\n void BerkeleyBatch::Flush()\n {\n     if (activeTxn)"
      },
      {
        "sha": "e838905da98950cbdc48388d44678431de92d596",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8c014161423a11fd75f976aa094d9bf6642a4875/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8c014161423a11fd75f976aa094d9bf6642a4875/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=8c014161423a11fd75f976aa094d9bf6642a4875",
        "patch": "@@ -117,6 +117,10 @@ class BerkeleyDatabase\n \n     ~BerkeleyDatabase();\n \n+    /** Open the database if it is not already opened.\n+     *  Dummy function, doesn't do anything right now, but is needed for class abstraction */\n+    void Open(const char* mode);\n+\n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n     bool Rewrite(const char* pszSkip=nullptr);"
      }
    ]
  },
  {
    "sha": "ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzJiNWFiNzFmYWZhZTYxZDJjNWEwODZjNjgxY2EzZDg2MTUxZDVk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T20:24:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T01:38:24Z"
      },
      "message": "walletdb: Introduce WalletDatabase abstract class\n\nMake WalletDatabase actually an abstract class and not just a typedef\nfor BerkeleyDatabase. Have BerkeleyDatabase inherit this class.",
      "tree": {
        "sha": "4d22ef79b034a40f4300c725bfbba909cffd3368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d22ef79b034a40f4300c725bfbba909cffd3368"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8c014161423a11fd75f976aa094d9bf6642a4875",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8c014161423a11fd75f976aa094d9bf6642a4875",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8c014161423a11fd75f976aa094d9bf6642a4875"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 87,
      "deletions": 34
    },
    "files": [
      {
        "sha": "0f89d4e6fe6a92f831c97ccf71ed63ff5e9f6126",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "patch": "@@ -24,7 +24,6 @@\n #include <univalue.h>\n \n #ifdef ENABLE_WALLET\n-#include <wallet/bdb.h>\n #include <wallet/db.h>\n #include <wallet/wallet.h>\n #endif"
      },
      {
        "sha": "55292537d10ade9e55d7ffc2da7305ff8a0429e0",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "patch": "@@ -893,7 +893,7 @@ void BerkeleyDatabase::RemoveRef()\n     env->m_db_in_use.notify_all();\n }\n \n-std::unique_ptr<BerkeleyBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n+std::unique_ptr<DatabaseBatch> BerkeleyDatabase::MakeBatch(const char* mode, bool flush_on_close)\n {\n     return MakeUnique<BerkeleyBatch>(*this, mode, flush_on_close);\n }"
      },
      {
        "sha": "9f89fa5c2b2b054a1ed3bcaf8c7a5f1b6099bc1a",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 17,
        "deletions": 22,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "patch": "@@ -98,66 +98,61 @@ class BerkeleyBatch;\n /** An instance of this class represents one database.\n  * For BerkeleyDB this is just a (env, strFile) tuple.\n  **/\n-class BerkeleyDatabase\n+class BerkeleyDatabase : public WalletDatabase\n {\n     friend class BerkeleyBatch;\n public:\n     /** Create dummy DB handle */\n-    BerkeleyDatabase() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(nullptr)\n+    BerkeleyDatabase() : WalletDatabase(), env(nullptr)\n     {\n     }\n \n     /** Create DB handle to real database */\n     BerkeleyDatabase(std::shared_ptr<BerkeleyEnvironment> env, std::string filename) :\n-        nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0), env(std::move(env)), strFile(std::move(filename))\n+        WalletDatabase(), env(std::move(env)), strFile(std::move(filename))\n     {\n         auto inserted = this->env->m_databases.emplace(strFile, std::ref(*this));\n         assert(inserted.second);\n     }\n \n-    ~BerkeleyDatabase();\n+    ~BerkeleyDatabase() override;\n \n     /** Open the database if it is not already opened.\n      *  Dummy function, doesn't do anything right now, but is needed for class abstraction */\n-    void Open(const char* mode);\n+    void Open(const char* mode) override;\n \n     /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n      */\n-    bool Rewrite(const char* pszSkip=nullptr);\n+    bool Rewrite(const char* pszSkip=nullptr) override;\n \n     /** Indicate the a new database user has began using the database. */\n-    void AddRef();\n+    void AddRef() override;\n     /** Indicate that database user has stopped using the database and that it could be flushed or closed. */\n-    void RemoveRef();\n+    void RemoveRef() override;\n \n     /** Back up the entire database to a file.\n      */\n-    bool Backup(const std::string& strDest) const;\n+    bool Backup(const std::string& strDest) const override;\n \n     /** Make sure all changes are flushed to database file.\n      */\n-    void Flush();\n+    void Flush() override;\n     /** Flush to the database file and close the database.\n      *  Also close the environment if no other databases are open in it.\n      */\n-    void Close();\n+    void Close() override;\n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n-    bool PeriodicFlush();\n+    bool PeriodicFlush() override;\n \n-    void IncrementUpdateCounter();\n-\n-    void ReloadDbEnv();\n+    void IncrementUpdateCounter() override;\n \n-    std::atomic<unsigned int> nUpdateCounter;\n-    unsigned int nLastSeen;\n-    unsigned int nLastFlushed;\n-    int64_t nLastWalletUpdate;\n+    void ReloadDbEnv() override;\n \n     /** Verifies that the database file is not in use */\n-    bool VerifyNotInUse(bilingual_str& error);\n+    bool VerifyNotInUse(bilingual_str& error) override;\n     /** Verifies the environment and database file */\n-    bool Verify(bilingual_str& error);\n+    bool Verify(bilingual_str& error) override;\n \n     /**\n      * Pointer to shared database environment.\n@@ -174,7 +169,7 @@ class BerkeleyDatabase\n     std::unique_ptr<Db> m_db;\n \n     /** Make a BerkeleyBatch connected to this database */\n-    std::unique_ptr<BerkeleyBatch> MakeBatch(const char* mode, bool flush_on_close);\n+    std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n private:\n     std::string strFile;"
      },
      {
        "sha": "4dbfc16359ed1820474d2bb47ae8f36ef6985832",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "patch": "@@ -10,8 +10,12 @@\n #include <fs.h>\n #include <streams.h>\n \n+#include <atomic>\n+#include <memory>\n #include <string>\n \n+struct bilingual_str;\n+\n /** Given a wallet directory path or legacy file path, return path to main data file in the wallet database. */\n fs::path WalletDataFilePath(const fs::path& wallet_path);\n void SplitWalletPath(const fs::path& wallet_path, fs::path& env_directory, std::string& database_filename);\n@@ -107,4 +111,62 @@ class DatabaseBatch\n     virtual bool TxnAbort() = 0;\n };\n \n+/** An instance of this class represents one database.\n+ **/\n+class WalletDatabase\n+{\n+public:\n+    /** Create dummy DB handle */\n+    WalletDatabase() : nUpdateCounter(0), nLastSeen(0), nLastFlushed(0), nLastWalletUpdate(0) {}\n+    virtual ~WalletDatabase() {};\n+\n+    /** Open the database if it is not already opened. */\n+    virtual void Open(const char* mode) = 0;\n+\n+    //! Counts the number of active database users to be sure that the database is not closed while someone is using it\n+    std::atomic<int> m_refcount{0};\n+    /** Indicate the a new database user has began using the database. Increments m_refcount */\n+    virtual void AddRef() = 0;\n+    /** Indicate that database user has stopped using the database and that it could be flushed or closed. Decrement m_refcount */\n+    virtual void RemoveRef() = 0;\n+\n+    /** Rewrite the entire database on disk, with the exception of key pszSkip if non-zero\n+     */\n+    virtual bool Rewrite(const char* pszSkip=nullptr) = 0;\n+\n+    /** Back up the entire database to a file.\n+     */\n+    virtual bool Backup(const std::string& strDest) const = 0;\n+\n+    /** Make sure all changes are flushed to database file.\n+     */\n+    virtual void Flush() = 0;\n+    /** Flush to the database file and close the database.\n+     *  Also close the environment if no other databases are open in it.\n+     */\n+    virtual void Close() = 0;\n+    /* flush the wallet passively (TRY_LOCK)\n+       ideal to be called periodically */\n+    virtual bool PeriodicFlush() = 0;\n+\n+    virtual void IncrementUpdateCounter() = 0;\n+\n+    virtual void ReloadDbEnv() = 0;\n+\n+    std::atomic<unsigned int> nUpdateCounter;\n+    unsigned int nLastSeen;\n+    unsigned int nLastFlushed;\n+    int64_t nLastWalletUpdate;\n+\n+    /** Verifies that the database file is not in use */\n+    virtual bool VerifyNotInUse(bilingual_str& error) = 0;\n+    /** Verifies the environment and database file */\n+    virtual bool Verify(bilingual_str& error) = 0;\n+\n+    std::string m_file_path;\n+\n+    /** Make a BerkeleyBatch connected to this database */\n+    virtual std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) = 0;\n+};\n+\n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "c177b513d7807132d5117eceeb4728a1e63e26d7",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "patch": "@@ -1019,20 +1019,20 @@ bool IsWalletLoaded(const fs::path& wallet_path)\n }\n \n /** Return object for accessing database at specified path. */\n-std::unique_ptr<BerkeleyDatabase> CreateWalletDatabase(const fs::path& path)\n+std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path)\n {\n     std::string filename;\n     return MakeUnique<BerkeleyDatabase>(GetWalletEnv(path, filename), std::move(filename));\n }\n \n /** Return object for accessing dummy database with no read/write capabilities. */\n-std::unique_ptr<BerkeleyDatabase> CreateDummyWalletDatabase()\n+std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase()\n {\n     return MakeUnique<BerkeleyDatabase>();\n }\n \n /** Return object for accessing temporary in-memory database. */\n-std::unique_ptr<BerkeleyDatabase> CreateMockWalletDatabase()\n+std::unique_ptr<WalletDatabase> CreateMockWalletDatabase()\n {\n     return MakeUnique<BerkeleyDatabase>(std::make_shared<BerkeleyEnvironment>(), \"\");\n }"
      },
      {
        "sha": "7c5bf7652b70e0789a04ad56dc266424817af7e8",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "patch": "@@ -40,9 +40,6 @@ class CWalletTx;\n class uint160;\n class uint256;\n \n-/** Backend-agnostic database type. */\n-using WalletDatabase = BerkeleyDatabase;\n-\n /** Error statuses for the wallet database */\n enum class DBErrors\n {\n@@ -280,7 +277,7 @@ class WalletBatch\n     //! Abort current transaction\n     bool TxnAbort();\n private:\n-    std::unique_ptr<BerkeleyBatch> m_batch;\n+    std::unique_ptr<DatabaseBatch> m_batch;\n     WalletDatabase& m_database;\n };\n \n@@ -294,12 +291,12 @@ bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, st\n bool IsWalletLoaded(const fs::path& wallet_path);\n \n /** Return object for accessing database at specified path. */\n-std::unique_ptr<BerkeleyDatabase> CreateWalletDatabase(const fs::path& path);\n+std::unique_ptr<WalletDatabase> CreateWalletDatabase(const fs::path& path);\n \n /** Return object for accessing dummy database with no read/write capabilities. */\n-std::unique_ptr<BerkeleyDatabase> CreateDummyWalletDatabase();\n+std::unique_ptr<WalletDatabase> CreateDummyWalletDatabase();\n \n /** Return object for accessing temporary in-memory database. */\n-std::unique_ptr<BerkeleyDatabase> CreateMockWalletDatabase();\n+std::unique_ptr<WalletDatabase> CreateMockWalletDatabase();\n \n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWMwZTVjZDZmMDA5OGRkYTBhMGFhNDdjNDcwNGE0NjI3MzM5MWYw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-13T18:09:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T01:57:36Z"
      },
      "message": "walletdb: track database file use as m_refcount within BerkeleyDatabase\n\nInstead of having BerkeleyEnvironment track the file use count, make\nBerkeleyDatabase do it itself.",
      "tree": {
        "sha": "b1826b99dd16ac513404f95d92f81196af45f81f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1826b99dd16ac513404f95d92f81196af45f81f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c0e5cd6f0098dda0a0aa47c4704a46273391f0/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec2b5ab71fafae61d2c5a086c681ca3d86151d5d"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 27,
      "deletions": 42
    },
    "files": [
      {
        "sha": "39ae295d320ddea7223ef3f9921efa9a11a2567f",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 41,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c0e5cd6f0098dda0a0aa47c4704a46273391f0/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c0e5cd6f0098dda0a0aa47c4704a46273391f0/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
        "patch": "@@ -97,9 +97,8 @@ void BerkeleyEnvironment::Close()\n     fDbEnvInit = false;\n \n     for (auto& db : m_databases) {\n-        auto count = mapFileUseCount.find(db.first);\n-        assert(count == mapFileUseCount.end() || count->second == 0);\n         BerkeleyDatabase& database = db.second.get();\n+        assert(database.m_refcount == 0);\n         if (database.m_db) {\n             database.m_db->close(0);\n             database.m_db.reset();\n@@ -245,9 +244,6 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n \n bool BerkeleyEnvironment::Verify(const std::string& strFile)\n {\n-    LOCK(cs_db);\n-    assert(mapFileUseCount.count(strFile) == 0);\n-\n     Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n     return result == 0;\n@@ -319,6 +315,8 @@ bool BerkeleyDatabase::Verify(bilingual_str& errorStr)\n \n     if (fs::exists(file_path))\n     {\n+        assert(m_refcount == 0);\n+\n         if (!env->Verify(strFile)) {\n             errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), file_path);\n             return false;\n@@ -486,8 +484,8 @@ void BerkeleyEnvironment::ReloadDbEnv()\n     AssertLockNotHeld(cs_db);\n     std::unique_lock<RecursiveMutex> lock(cs_db);\n     m_db_in_use.wait(lock, [this](){\n-        for (auto& count : mapFileUseCount) {\n-            if (count.second > 0) return false;\n+        for (auto& db : m_databases) {\n+            if (db.second.get().m_refcount > 0) return false;\n         }\n         return true;\n     });\n@@ -514,11 +512,10 @@ bool BerkeleyDatabase::Rewrite(const char* pszSkip)\n     while (true) {\n         {\n             LOCK(cs_db);\n-            if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0) {\n+            if (m_refcount == 0) {\n                 // Flush log data to the dat file\n                 env->CloseDb(strFile);\n                 env->CheckpointLSN(strFile);\n-                env->mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n                 LogPrintf(\"BerkeleyBatch::Rewrite: Rewriting %s...\\n\", strFile);\n@@ -602,10 +599,10 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n         return;\n     {\n         LOCK(cs_db);\n-        std::map<std::string, int>::iterator mi = mapFileUseCount.begin();\n-        while (mi != mapFileUseCount.end()) {\n-            std::string strFile = (*mi).first;\n-            int nRefCount = (*mi).second;\n+        bool no_dbs_accessed = true;\n+        for (auto& db_it : m_databases) {\n+            std::string strFile = db_it.first;\n+            int nRefCount = db_it.second.get().m_refcount;\n             LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n@@ -616,14 +613,14 @@ void BerkeleyEnvironment::Flush(bool fShutdown)\n                 if (!fMockDb)\n                     dbenv->lsn_reset(strFile.c_str(), 0);\n                 LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: %s closed\\n\", strFile);\n-                mapFileUseCount.erase(mi++);\n-            } else\n-                mi++;\n+            } else {\n+                no_dbs_accessed = false;\n+            }\n         }\n         LogPrint(BCLog::WALLETDB, \"BerkeleyEnvironment::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n-            if (mapFileUseCount.empty()) {\n+            if (no_dbs_accessed) {\n                 dbenv->log_archive(&listp, DB_ARCH_REMOVE);\n                 Close();\n                 if (!fMockDb) {\n@@ -645,29 +642,21 @@ bool BerkeleyDatabase::PeriodicFlush()\n     {\n         // Don't do this if any databases are in use\n         int nRefCount = 0;\n-        std::map<std::string, int>::iterator mit = env->mapFileUseCount.begin();\n-        while (mit != env->mapFileUseCount.end())\n-        {\n-            nRefCount += (*mit).second;\n-            mit++;\n+        for (auto& db_it : env->m_databases) {\n+            nRefCount += db_it.second.get().m_refcount;\n         }\n \n         if (nRefCount == 0)\n         {\n-            std::map<std::string, int>::iterator mi = env->mapFileUseCount.find(strFile);\n-            if (mi != env->mapFileUseCount.end())\n-            {\n-                LogPrint(BCLog::WALLETDB, \"Flushing %s\\n\", strFile);\n-                int64_t nStart = GetTimeMillis();\n+            LogPrint(BCLog::WALLETDB, \"Flushing %s\\n\", strFile);\n+            int64_t nStart = GetTimeMillis();\n \n-                // Flush wallet file so it's self contained\n-                env->CloseDb(strFile);\n-                env->CheckpointLSN(strFile);\n+            // Flush wallet file so it's self contained\n+            env->CloseDb(strFile);\n+            env->CheckpointLSN(strFile);\n \n-                env->mapFileUseCount.erase(mi++);\n-                LogPrint(BCLog::WALLETDB, \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n-                ret = true;\n-            }\n+            LogPrint(BCLog::WALLETDB, \"Flushed %s %dms\\n\", strFile, GetTimeMillis() - nStart);\n+            ret = true;\n         }\n     }\n \n@@ -683,12 +672,11 @@ bool BerkeleyDatabase::Backup(const std::string& strDest) const\n     {\n         {\n             LOCK(cs_db);\n-            if (!env->mapFileUseCount.count(strFile) || env->mapFileUseCount[strFile] == 0)\n+            if (m_refcount == 0)\n             {\n                 // Flush log data to the dat file\n                 env->CloseDb(strFile);\n                 env->CheckpointLSN(strFile);\n-                env->mapFileUseCount.erase(strFile);\n \n                 // Copy wallet file\n                 fs::path pathSrc = env->Directory() / strFile;\n@@ -881,15 +869,13 @@ bool BerkeleyBatch::HasKey(CDataStream& key)\n void BerkeleyDatabase::AddRef()\n {\n     LOCK(cs_db);\n-    ++env->mapFileUseCount[strFile];\n+    m_refcount++;\n }\n \n void BerkeleyDatabase::RemoveRef()\n {\n-    {\n-        LOCK(cs_db);\n-        --env->mapFileUseCount[strFile];\n-    }\n+    LOCK(cs_db);\n+    m_refcount--;\n     env->m_db_in_use.notify_all();\n }\n "
      },
      {
        "sha": "ebb3a137ee6107ecc84b51b322600463b7967e06",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69c0e5cd6f0098dda0a0aa47c4704a46273391f0/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69c0e5cd6f0098dda0a0aa47c4704a46273391f0/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
        "patch": "@@ -52,7 +52,6 @@ class BerkeleyEnvironment\n \n public:\n     std::unique_ptr<DbEnv> dbenv;\n-    std::map<std::string, int> mapFileUseCount;\n     std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;\n     std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;"
      }
    ]
  },
  {
    "sha": "3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmEzYjA5ZGFjOGNjODZhMmI5MDBiOWYyZGU0NDhjOThjYjBkNDZi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-11T02:41:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T01:57:37Z"
      },
      "message": "walletdb: Move Db->open to BerkeleyDatabase::Open\n\nInstead of opening the Db handle in BerkeleyBatch, make BerkeleyDatabase\ndo that.",
      "tree": {
        "sha": "734b78e0729aacb8473fcc3db140ec592f3ff23f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/734b78e0729aacb8473fcc3db140ec592f3ff23f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69c0e5cd6f0098dda0a0aa47c4704a46273391f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69c0e5cd6f0098dda0a0aa47c4704a46273391f0"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 24,
      "deletions": 25
    },
    "files": [
      {
        "sha": "31f13f966a8d6baba9cdb6143389710eb0eea892",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 25,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b",
        "patch": "@@ -345,13 +345,27 @@ BerkeleyDatabase::~BerkeleyDatabase()\n \n BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr), m_database(database)\n {\n+    database.AddRef();\n+    database.Open(pszMode);\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n     env = database.env.get();\n-    if (database.IsDummy()) {\n+    pdb = database.m_db.get();\n+    strFile = database.strFile;\n+    bool fCreate = strchr(pszMode, 'c') != nullptr;\n+    if (fCreate && !Exists(std::string(\"version\"))) {\n+        bool fTmp = fReadOnly;\n+        fReadOnly = false;\n+        Write(std::string(\"version\"), CLIENT_VERSION);\n+        fReadOnly = fTmp;\n+    }\n+}\n+\n+void BerkeleyDatabase::Open(const char* pszMode)\n+{\n+    if (IsDummy()){\n         return;\n     }\n-    const std::string &strFilename = database.strFile;\n \n     bool fCreate = strchr(pszMode, 'c') != nullptr;\n     unsigned int nFlags = DB_THREAD;\n@@ -361,10 +375,9 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n     {\n         LOCK(cs_db);\n         if (!env->Open(false /* retry */))\n-            throw std::runtime_error(\"BerkeleyBatch: Failed to open database environment.\");\n+            throw std::runtime_error(\"BerkeleyDatabase: Failed to open database environment.\");\n \n-        pdb = database.m_db.get();\n-        if (pdb == nullptr) {\n+        if (m_db == nullptr) {\n             int ret;\n             std::unique_ptr<Db> pdb_temp = MakeUnique<Db>(env->dbenv.get(), 0);\n \n@@ -373,19 +386,19 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n                 DbMpoolFile* mpf = pdb_temp->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0) {\n-                    throw std::runtime_error(strprintf(\"BerkeleyBatch: Failed to configure for no temp file backing for database %s\", strFilename));\n+                    throw std::runtime_error(strprintf(\"BerkeleyDatabase: Failed to configure for no temp file backing for database %s\", strFile));\n                 }\n             }\n \n             ret = pdb_temp->open(nullptr,                             // Txn pointer\n-                            fMockDb ? nullptr : strFilename.c_str(),  // Filename\n-                            fMockDb ? strFilename.c_str() : \"main\",   // Logical db name\n+                            fMockDb ? nullptr : strFile.c_str(),      // Filename\n+                            fMockDb ? strFile.c_str() : \"main\",       // Logical db name\n                             DB_BTREE,                                 // Database type\n                             nFlags,                                   // Flags\n                             0);\n \n             if (ret != 0) {\n-                throw std::runtime_error(strprintf(\"BerkeleyBatch: Error %d, can't open database %s\", ret, strFilename));\n+                throw std::runtime_error(strprintf(\"BerkeleyDatabase: Error %d, can't open database %s\", ret, strFile));\n             }\n \n             // Call CheckUniqueFileid on the containing BDB environment to\n@@ -404,29 +417,15 @@ BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bo\n             // versions of BDB have an set_lk_exclusive method for this\n             // purpose, but the older version we use does not.)\n             for (const auto& env : g_dbenvs) {\n-                CheckUniqueFileid(*env.second.lock().get(), strFilename, *pdb_temp, this->env->m_fileids[strFilename]);\n+                CheckUniqueFileid(*env.second.lock().get(), strFile, *pdb_temp, this->env->m_fileids[strFile]);\n             }\n \n-            pdb = pdb_temp.release();\n-            database.m_db.reset(pdb);\n+            m_db.reset(pdb_temp.release());\n \n-            if (fCreate && !Exists(std::string(\"version\"))) {\n-                bool fTmp = fReadOnly;\n-                fReadOnly = false;\n-                Write(std::string(\"version\"), CLIENT_VERSION);\n-                fReadOnly = fTmp;\n-            }\n         }\n-        database.AddRef();\n-        strFile = strFilename;\n     }\n }\n \n-void BerkeleyDatabase::Open(const char* mode)\n-{\n-    throw std::logic_error(\"BerkeleyDatabase does not implement Open. This function should not be called.\");\n-}\n-\n void BerkeleyBatch::Flush()\n {\n     if (activeTxn)"
      }
    ]
  },
  {
    "sha": "bc4985fc113a68c883d8e02b20e1adbca885c088",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzQ5ODVmYzExM2E2OGM4ODNkOGUwMmIyMGUxYWRiY2E4ODVjMDg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-12T23:51:20Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T02:12:13Z"
      },
      "message": "walletdb: Use a global g_fileids instead of m_fileids for each env\n\nFile ids were basically global anyways, it doesn't make sense to have\nthem be environment specific if we're going to loop through all the\nenvironments anyways.",
      "tree": {
        "sha": "2e5ba0657be52bc73df564d7be1e571f9e032b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2e5ba0657be52bc73df564d7be1e571f9e032b1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc4985fc113a68c883d8e02b20e1adbca885c088",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4985fc113a68c883d8e02b20e1adbca885c088",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4985fc113a68c883d8e02b20e1adbca885c088",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4985fc113a68c883d8e02b20e1adbca885c088/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fa3b09dac8cc86a2b900b9f2de448c98cb0d46b"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 44,
      "deletions": 36
    },
    "files": [
      {
        "sha": "48cc4380890bcfe9cf7092beb916754b2654fe4e",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 32,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4985fc113a68c883d8e02b20e1adbca885c088/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4985fc113a68c883d8e02b20e1adbca885c088/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=bc4985fc113a68c883d8e02b20e1adbca885c088",
        "patch": "@@ -16,6 +16,7 @@\n #endif\n \n namespace {\n+RecursiveMutex cs_db;\n \n //! Make sure database has a unique fileid within the environment. If it\n //! doesn't, throw an error. BDB caches do not work properly when more than one\n@@ -26,24 +27,42 @@ namespace {\n //! (https://docs.oracle.com/cd/E17275_01/html/programmer_reference/program_copy.html),\n //! so bitcoin should never create different databases with the same fileid, but\n //! this error can be triggered if users manually copy database files.\n-void CheckUniqueFileid(const BerkeleyEnvironment& env, const std::string& filename, Db& db, WalletDatabaseFileId& fileid)\n-{\n-    if (env.IsMock()) return;\n-\n-    int ret = db.get_mpf()->get_fileid(fileid.value);\n-    if (ret != 0) {\n-        throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (get_fileid failed with %d)\", filename, ret));\n-    }\n+std::unordered_map<std::string, WalletDatabaseFileId> g_fileids GUARDED_BY(cs_db);\n \n-    for (const auto& item : env.m_fileids) {\n-        if (fileid == item.second && &fileid != &item.second) {\n-            throw std::runtime_error(strprintf(\"BerkeleyBatch: Can't open database %s (duplicates fileid %s from %s)\", filename,\n+static void AddUniqueFileId(Db& db, const std::string& path)\n+{\n+    LOCK(cs_db);\n+    // Check that the BDB file id has not already been loaded in any BDB environment\n+    // to avoid BDB data consistency bugs that happen when different data\n+    // files in the same environment have the same fileid.\n+    //\n+    // In addition to disallowing opening databases with the same fileid in the same\n+    // environment, also disallow opening databases with the same fileid in other\n+    // environments to prevent bitcoin from opening the same data file through another\n+    // environment when the file is referenced through equivalent but\n+    // not obviously identical symlinked or hard linked or bind mounted\n+    // paths. In the future a more relaxed check for equal inode and\n+    // device ids could be done instead, which would allow opening\n+    // different backup copies of a wallet at the same time. Maybe even\n+    // more ideally, an exclusive lock for accessing the database could\n+    // be implemented, so no equality checks are needed at all. (Newer\n+    // versions of BDB have an set_lk_exclusive method for this\n+    // purpose, but the older version we use does not.)\n+    WalletDatabaseFileId fileid;\n+    int fileid_ret = db.get_mpf()->get_fileid(fileid.value);\n+    if (fileid_ret != 0) {\n+        throw std::runtime_error(strprintf(\"BerkeleyDatabase: Can't open database %s (get_fileid failed with %d)\", path, fileid_ret));\n+    }\n+    for (const auto& item : g_fileids) {\n+        if (fileid == item.second && item.first != path) {\n+            throw std::runtime_error(strprintf(\"BerkeleyDatabase: Can't open database %s (duplicates fileid %s from %s)\", path,\n                 HexStr(std::begin(item.second.value), std::end(item.second.value)), item.first));\n         }\n     }\n+    g_fileids[path] = fileid;\n }\n \n-RecursiveMutex cs_db;\n+\n std::map<std::string, std::weak_ptr<BerkeleyEnvironment>> g_dbenvs GUARDED_BY(cs_db); //!< Map from directory name to db environment.\n } // namespace\n \n@@ -102,6 +121,8 @@ void BerkeleyEnvironment::Close()\n         if (database.m_db) {\n             database.m_db->close(0);\n             database.m_db.reset();\n+            LOCK(cs_db);\n+            g_fileids.erase(database.m_file_path);\n         }\n     }\n \n@@ -334,15 +355,17 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n     dbenv->lsn_reset(strFile.c_str(), 0);\n }\n \n-BerkeleyDatabase::~BerkeleyDatabase()\n-{\n+BerkeleyDatabase::~BerkeleyDatabase() {\n     if (env) {\n+        env->CloseDb(strFile);\n+        assert(!m_db);\n         size_t erased = env->m_databases.erase(strFile);\n         assert(erased == 1);\n-        env->m_fileids.erase(strFile);\n+        g_fileids.erase(m_file_path);\n     }\n }\n \n+\n BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr), m_database(database)\n {\n     database.AddRef();\n@@ -400,24 +423,10 @@ void BerkeleyDatabase::Open(const char* pszMode)\n             if (ret != 0) {\n                 throw std::runtime_error(strprintf(\"BerkeleyDatabase: Error %d, can't open database %s\", ret, strFile));\n             }\n+            m_file_path = (env->Directory() / strFile).string();\n \n-            // Call CheckUniqueFileid on the containing BDB environment to\n-            // avoid BDB data consistency bugs that happen when different data\n-            // files in the same environment have the same fileid.\n-            //\n-            // Also call CheckUniqueFileid on all the other g_dbenvs to prevent\n-            // bitcoin from opening the same data file through another\n-            // environment when the file is referenced through equivalent but\n-            // not obviously identical symlinked or hard linked or bind mounted\n-            // paths. In the future a more relaxed check for equal inode and\n-            // device ids could be done instead, which would allow opening\n-            // different backup copies of a wallet at the same time. Maybe even\n-            // more ideally, an exclusive lock for accessing the database could\n-            // be implemented, so no equality checks are needed at all. (Newer\n-            // versions of BDB have an set_lk_exclusive method for this\n-            // purpose, but the older version we use does not.)\n-            for (const auto& env : g_dbenvs) {\n-                CheckUniqueFileid(*env.second.lock().get(), strFile, *pdb_temp, this->env->m_fileids[strFile]);\n+            if (!env->IsMock()) {\n+                AddUniqueFileId(*pdb_temp, m_file_path);\n             }\n \n             m_db.reset(pdb_temp.release());"
      },
      {
        "sha": "b6bf57385494ae1d0712c565e51c2b4644abcf60",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4985fc113a68c883d8e02b20e1adbca885c088/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4985fc113a68c883d8e02b20e1adbca885c088/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=bc4985fc113a68c883d8e02b20e1adbca885c088",
        "patch": "@@ -53,7 +53,6 @@ class BerkeleyEnvironment\n public:\n     std::unique_ptr<DbEnv> dbenv;\n     std::map<std::string, std::reference_wrapper<BerkeleyDatabase>> m_databases;\n-    std::unordered_map<std::string, WalletDatabaseFileId> m_fileids;\n     std::condition_variable_any m_db_in_use;\n \n     BerkeleyEnvironment(const fs::path& env_directory);"
      },
      {
        "sha": "3d809a90e1969a89c40e0d1368b60ac62fcb580c",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc4985fc113a68c883d8e02b20e1adbca885c088/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc4985fc113a68c883d8e02b20e1adbca885c088/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=bc4985fc113a68c883d8e02b20e1adbca885c088",
        "patch": "@@ -103,7 +103,7 @@ def wallet_file(name):\n \n         # should not initialize if one wallet is a copy of another\n         shutil.copyfile(wallet_dir('w8'), wallet_dir('w8_copy'))\n-        exp_stderr = r\"BerkeleyBatch: Can't open database w8_copy \\(duplicates fileid \\w+ from w8\\)\"\n+        exp_stderr = r\"Error: BerkeleyDatabase: Can't open database .+\\w8_copy \\(duplicates fileid \\w+ from .+/w8\\)\"\n         self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n@@ -229,10 +229,10 @@ def wallet_file(name):\n         assert_raises_rpc_error(-4, \"Wallet file verification failed. Error loading wallet wallet.dat. Duplicate -wallet filename specified.\", self.nodes[0].loadwallet, 'wallet.dat')\n \n         # Fail to load if one wallet is a copy of another\n-        assert_raises_rpc_error(-4, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+        assert_raises_rpc_error(-4, \"duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n         # Fail to load if one wallet is a copy of another, test this twice to make sure that we don't re-introduce #14304\n-        assert_raises_rpc_error(-4, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n+        assert_raises_rpc_error(-4, \"duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n \n         # Fail to load if wallet file is a symlink"
      }
    ]
  },
  {
    "sha": "a2a30a569e4742c53c9f22ec588cf911c9c857f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMmEzMGE1NjllNDc0MmM1M2M5ZjIyZWM1ODhjZjkxMWM5Yzg1N2Y5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-15T20:14:57Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-20T02:12:25Z"
      },
      "message": "walletdb: Remove BerkeleyBatch friend class from BerkeleyDatabase",
      "tree": {
        "sha": "7968447c5161c40bed15980187d219206833fe17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7968447c5161c40bed15980187d219206833fe17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2a30a569e4742c53c9f22ec588cf911c9c857f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a30a569e4742c53c9f22ec588cf911c9c857f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2a30a569e4742c53c9f22ec588cf911c9c857f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2a30a569e4742c53c9f22ec588cf911c9c857f9/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc4985fc113a68c883d8e02b20e1adbca885c088",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc4985fc113a68c883d8e02b20e1adbca885c088",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc4985fc113a68c883d8e02b20e1adbca885c088"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c85469faa13d67f9bf5d1d5425c6cf200acf12f9",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2a30a569e4742c53c9f22ec588cf911c9c857f9/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2a30a569e4742c53c9f22ec588cf911c9c857f9/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=a2a30a569e4742c53c9f22ec588cf911c9c857f9",
        "patch": "@@ -98,7 +98,6 @@ class BerkeleyBatch;\n  **/\n class BerkeleyDatabase : public WalletDatabase\n {\n-    friend class BerkeleyBatch;\n public:\n     /** Create dummy DB handle */\n     BerkeleyDatabase() : WalletDatabase(), env(nullptr)\n@@ -166,11 +165,12 @@ class BerkeleyDatabase : public WalletDatabase\n     /** Database pointer. This is initialized lazily and reset during flushes, so it can be null. */\n     std::unique_ptr<Db> m_db;\n \n+    std::string strFile;\n+\n     /** Make a BerkeleyBatch connected to this database */\n     std::unique_ptr<DatabaseBatch> MakeBatch(const char* mode = \"r+\", bool flush_on_close = true) override;\n \n private:\n-    std::string strFile;\n \n     /** Return whether this database handle is a dummy for testing.\n      * Only to be used at a low level, application should ideally not care"
      }
    ]
  }
]