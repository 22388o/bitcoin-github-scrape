meshcollider,2020-05-14 00:08:17,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-628309919,628309919,
DrahtBot,2020-05-14 03:06:58,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19325 (wallet: Refactor BerkeleyDatabase to introduce DatabaseBatch abstract class by achow101)\n* #19324 (wallet: Move B",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-628358883,628358883,
ryanofsky,2020-05-14 22:33:20,"Strong concept ACK for the effort and end result, but I'm scared it looks like the intermediate commits here are moving and changing code at the same time instead of just leaving code where it is or moving it in trivial to review `--color-moved` MOVEONLY commits. This was previously a hurdle for me in https://github.com/bitcoin/bitcoin/pull/16341#issuecomment-541330425, but maybe the problem is le",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-628920481,628920481,
achow101,2020-05-15 01:39:03,"> but I'm scared it looks like the intermediate commits here are moving and changing code at the same time instead of just leaving code where it is or moving it in trivial to review\n\nI only found one commit which was moving and changing behavior at the same time. This was `wallet: Move cursor functions to WalletDatabase and handle internally` which I have now split into `walletdb: Handle curso",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-628975249,628975249,
bvbfan,2020-05-15 13:01:18,The patch changes ref counting of db files. Now `Acquire` is called only in `Rewrite` since previous batch do it. Now ref count is always 0 (except you call Rewrite) which makes whole read/write racy.,https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-629222719,629222719,
achow101,2020-05-15 16:15:26,"> The patch changes ref counting of db files. Now `Acquire` is called only in `Rewrite` since previous batch do it. Now ref count is always 0 (except you call Rewrite) which makes whole read/write racy.\n\n`Acquire` is called by `WalletBatch`'s constructor so the ref count is still incremented every time the database is being used. And `Release` is called by `WalletBatch`'s destructor.",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-629349300,629349300,
Empact,2020-05-15 22:39:29,"@achow101 re @ryanofsky's comment, I set out to expand and clarify https://github.com/bitcoin/bitcoin/pull/18971/commits/67e30b2b42b4d710739e6fe303cbca69be68032c into several simpler move-only commits. \n\nYou can use `git diff 67e30b2b42b4d710739e6fe303cbca69be68032c 125796d8e60b8e740857e427cbaad4aa23f74b52` to compare the results, as there are some changes I've left out, and slight difference,",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-629535592,629535592,
achow101,2020-05-15 23:55:37,@Empact Thanks for doing that! Unfortunately I worked out my own way of doing the separation before I saw your comment. My version was pushed to #18918.,https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-629553130,629553130,
bvbfan,2020-05-17 16:58:37,"> `Acquire` is called by `WalletBatch`'s constructor so the ref count is still incremented every time the database is being used. And `Release` is called by `WalletBatch`'s destructor.\n\nGot'cha, sorry about that, i've not notice it. I still have concern about touching db env in multi threading. `BerkeleyDatabase` should guard every env usage, for example in contructor with shared env, the easi",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-629828484,629828484,
Sjors,2020-05-18 10:53:00,Concept ACK,https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-630104158,630104158,
achow101,2020-05-21 17:19:36,"Not sure what's causing the travis failure. It seems to be caused for a non-existent fileid when `get_fileid` is called, but I can't figure out why that would be the case nor can I replicate it locally.",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-632235166,632235166,
bvbfan,2020-05-26 13:22:35,"> Not sure what's causing the travis failure. It seems to be caused for a non-existent fileid when `get_fileid` is called, but I can't figure out why that would be the case nor can I replicate it locally.\n\n`get_fileid` should not be called in mock db (some older bdb version in Travis?)",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-634021594,634021594,
achow101,2020-05-26 18:52:10,"> `get_fileid` should not be called in mock db\n\nAh, that's probably it. Thanks. Odd that I can't get the error locally though.\n\n> (some older bdb version in Travis?)\n\nIt's actually newer. Travis typically uses BDB provided by Ubuntu which is 5.3. I have 4.8 installed on my system.",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-634211030,634211030,
bvbfan,2020-05-27 10:42:26,"> It's actually newer. Travis typically uses BDB provided by Ubuntu which is 5.3. I have 4.8 installed on my system.\n\nI can't reproduce it either, bdb 5.3.28.",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-634578411,634578411,
achow101,2020-06-09 19:21:15,> My biggest comment in terms of scope is about sharing cursor and transaction objects. Sharing these seems fragile if not buggy ([#18971 (comment)](https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437330343)). It seems like it would also shrink down the PR to just make the Batch cursor & transaction & read/write/erase methods virtual instead of trying to cram them into the already compli,https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-641520202,641520202,
achow101,2020-06-15 22:35:56,"I've redone the refactor to keep `BerkeleyBatch` and introduce `DatabaseBatch` as an abstract class. Database transactions, cursors, and modifications occur via `BerkeleyBatch`.\n\nThis change also results in changes to the `Flush` and `Close` logic. I've decided to keep the `shutdown` argument in `BerkeleyEnvironment::Flush`. So `BerkeleyDatabase::Flush` calls that with `shutdown == false` and ",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-644424649,644424649,
MarcoFalke,2020-06-15 23:33:12,Can the move-only stuff be split up in its own pr? That seems like something a lot more people could review than the bdb-refactors.,https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-644443992,644443992,
achow101,2020-06-16 00:58:20,"Updating this list in the OP now.\n\nI've started breaking this down into separate PRs. Some of the simpler stuff is moved up to the front so they can be merged first.\n\n* Mostly simple moveonly things: #19290 (merged)\n  * walletdb: Make SpliWalletFilePath non-static\n  * walletdb: Add IsBDBWalletLoaded to look for BDB wallets specifically\n  * walletdb: move IsWalletLoaded to walletdb.cp",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-644467482,644467482,
Sjors,2020-06-19 09:41:09,"I get similar errors as [Travis](https://travis-ci.org/github/bitcoin/bitcoin/jobs/699909476) on macOS (`./configure --enable-debug --with-incompatible-bdb --enable-werror`):\n```\n./wallet/bdb.h:167:17: error: non-static data member 'm_file_path' of 'BerkeleyDatabase' shadows member inherited from type 'WalletDatabase' [-Werror,-Wshadow-field]\n1687    std::string m_file_path;\n1688          ",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-646541014,646541014,
achow101,2020-06-19 15:17:46,"> I get similar errors as Travis on macOS\n\nShould be fixed now.",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-646692750,646692750,
achow101,2020-06-20 02:33:14,"This PR is now superseded by the PRs listed in the OP. Even though the final one, #19335, is the same diff and commits as this one, I wanted to have it be separate without the history from this PR as it is conceptually unrelated to this refactor. The refactoring into the abstract classes occurs in #19334.\n\nAll of the PRs that were dependent on this one will be rebased onto #19334",https://github.com/bitcoin/bitcoin/pull/18971#issuecomment-646923772,646923772,
Empact,2020-05-15 19:44:02,"nit: `const fs::path&`\n\nin commit: d4a55140ea3e47ee6e4c93c484c7c72cfed741dd",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r426012118,426012118,src/wallet/wallettool.cpp
Empact,2020-05-15 19:46:53,"IMO ""Attempt to recover private keys from a corrupt wallet"" explains salvage more clearly than ""Perform salvage operations on a wallet file"". I understand that's specific to `RecoverKeysOnlyFilter`, but perhaps its possible to clarify the documentation?\n\n",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r426013423,426013423,src/wallet/init.cpp
achow101,2020-05-15 22:08:15,This commit is part of #18918 so comments should be left there.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r426067977,426067977,src/wallet/wallettool.cpp
achow101,2020-05-15 22:08:20,This commit is part of #18918 so comments should be left there.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r426067999,426067999,src/wallet/init.cpp
jonatack,2020-05-19 16:05:32,"When building with clang --enable-debug -Werror I'm seeing the following compiler error:\n\n```cpp\n./wallet/walletdb.h:322:112: error: member access into incomplete type 'CWallet'\n             CWalletScanState &wss, std::string& strType, std::string& strErr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet);\n                                                                                       ",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r427420606,427420606,src/wallet/walletdb.h
jonatack,2020-05-19 16:09:00,(It may not be directly related to this PR; saw a similar build error in another wallet PR today.),https://github.com/bitcoin/bitcoin/pull/18971#discussion_r427423048,427423048,src/wallet/walletdb.h
ryanofsky,2020-05-27 15:26:21,"In commit ""walletdb: Combine VerifyDatabaseFile and VerifyEnvironment"" (289aa21c6a6c11ce172a92f878a3ede6652fc2e4)\n\nHere and below filesystem_error is no longer caught. Would suggest adding it back to preserve error handling behavior (I could be missing something but it looks like BerkeleyEnvironment::Open could still throw this error)",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r431230059,431230059,src/wallet/wallet.cpp
ryanofsky,2020-05-27 15:46:34,"In commit ""walletdb: Move Db->open to BerkeleyDatabase::Open"" (d0ccd47c355319ec9709c52cdcdf0be78a26ac25)\n\nNote: seems like there two small changes to behavior here when IsDummy is true: CLIENT_VERSION is written and strFile member is set, but both changes seem good.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r431245932,431245932,src/wallet/db.cpp
achow101,2020-05-28 20:48:20,Added it back.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432114397,432114397,src/wallet/wallet.cpp
ryanofsky,2020-05-29 18:22:45,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (79fe2edc4457ee70754b08d5e8d2309b86038395)\n\nNote: Was looking into history of why the previous code was calling CheckUniqueFileid in a loop instead of doing a map lookup. Looks like it was done to keep changes minimal in https://github.com/bitcoin/bitcoin/pull/11687/commits/d8a99f65e53019becdd8d2631396012bafb29741 a",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432660562,432660562,src/wallet/db.cpp
ryanofsky,2020-05-29 18:33:08,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (79fe2edc4457ee70754b08d5e8d2309b86038395)\n\nWould be good to add GUARDED_BY(cs_db) if possible",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432665557,432665557,src/wallet/db.cpp
ryanofsky,2020-05-29 18:40:46,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (79fe2edc4457ee70754b08d5e8d2309b86038395)\n\nThis is just a style comment, but there's already a lot going on in this method, and it might be nice to move this long comment and block of code out to a `void AddUniqueFileId(Db& db, const std::string& path)` helper function that gets file id, checks it and adds it to th",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432669086,432669086,src/wallet/db.cpp
ryanofsky,2020-05-29 18:58:22,"In commit ""walletdb: Add BerkeleyDatabase::Release"" (bd13bec012a56447e0dae9e46ba3693bcc2b561d)\n\nNote: Maybe this comment could be extended to say how Release should be used. The commit message has a longer comment, but I'm not sure I understand it. Particularly: ""Flush can be done before Release, and Close after."" I don't see how calling close after release could be safe because it it would de",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432677500,432677500,src/wallet/db.h
ryanofsky,2020-05-29 19:18:46,"In commit ""walletdb: Change BerkeleyDatabase::Flush to Close"" (1dbc24d27d4b54b45c6b49ba41b4f64d0093dd71)\n\nWhy is this calling g_dbenvs.erase? It seems like it is redundant with env = nullptr assignment below which should trigger erasing in BerkeleyEnvironment::~BerkeleyEnvironment destructor. It also seems unsafe if there's another database open in the same environment.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432686357,432686357,src/wallet/db.cpp
ryanofsky,2020-05-29 19:28:01,"In commit ""walletdb: Change BerkeleyDatabase::Flush to Close"" (1dbc24d27d4b54b45c6b49ba41b4f64d0093dd71)\n\nQ: If there are multiple databases open in the same environment, previously logs would be consolidated and removed if any database was closed and no other database was writing, but now it will not consolidate logs until the last database in the environment is closed? This seems fine, but i",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432690287,432690287,src/wallet/db.cpp
ryanofsky,2020-05-29 19:36:58,"In commit ""walletdb: Change BerkeleyDatabase::Flush to Close"" (1dbc24d27d4b54b45c6b49ba41b4f64d0093dd71)\n\nTodo was actually already implemented and should be dropped. It was added in 2d796faf62095e83f74337c26e7e1a8c3957cf3c https://github.com/bitcoin/bitcoin/pull/14320#discussion_r227811095 and implemented in f1f4bb7345b90853ec5037478173601035593d26 #11911",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432694132,432694132,src/wallet/db.cpp
ryanofsky,2020-05-29 19:53:37,"In commit ""walletdb: track database file use as m_refcount within BerkeleyDatabase"" (9cfb631f808aa6ccb10ab31d4b8325bd940a8916)\n\nWhat's this doing? It seems like either this should already be 0 or it would be unsafe to overwrite if not already 0",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432704579,432704579,src/wallet/db.cpp
ryanofsky,2020-05-29 20:01:52,"In commit ""walletdb: track database file use as m_refcount within BerkeleyDatabase"" (9cfb631f808aa6ccb10ab31d4b8325bd940a8916)\n\nNote: seems this commit drops distinction between use count being 0 and use count not existing (no map entry). I think 0 use count meant the database wasn't in use but wasn't flushed yet, and no use count meant it was flushed. I think the last piece of code which used",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432708264,432708264,src/wallet/db.cpp
Empact,2020-05-31 21:49:56,nit: assert as unreachable?,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432987494,432987494,src/wallet/wallet.cpp
Empact,2020-06-01 00:16:40,nit: this is unused,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432999447,432999447,src/wallet/wallettool.cpp
achow101,2020-06-01 18:28:29,"I think you are confusing `BerkeleyBatch` and `BerkeleyDatabase`. `Release` is called by `BerkeleyBatch::Close`, not `BerkeleyDatabase::Close`.\n\nIn a later commit, a corresponding `Acquire` function is added. In this commit, the thing that `Acquire` does is part of `Open`. The idea with the refcount is thusly: when something tries to use the database, it increments the refcount. When it is don",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433411606,433411606,src/wallet/db.h
achow101,2020-06-01 18:39:57,"Not entirely sure, but this is moved code.\n\nThis was originally called during `BerkeleyDatabase::Flush(true)`, i.e. when the database and environment are being closed. So I moved it into the destructor to go along with the other environment closing changes.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433417571,433417571,src/wallet/db.cpp
achow101,2020-06-01 18:55:04,"> Q: If there are multiple databases open in the same environment, previously logs would be consolidated and removed if any database was closed and no other database was writing, but now it will not consolidate logs until the last database in the environment is closed?\n\nI don't think that's what happened previously either. `Flush(true)` seems to have been only called during a bitcoind shutdown",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433425570,433425570,src/wallet/db.cpp
achow101,2020-06-01 19:16:31,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433435981,433435981,src/wallet/db.cpp
achow101,2020-06-01 19:16:37,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433436045,433436045,src/wallet/db.cpp
achow101,2020-06-01 19:16:50,Removed it,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433436141,433436141,src/wallet/db.cpp
achow101,2020-06-01 19:16:57,Removed,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433436200,433436200,src/wallet/db.cpp
achow101,2020-06-01 19:17:10,Also split this commit as you suggested.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433436314,433436314,src/wallet/db.cpp
achow101,2020-06-01 19:17:17,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433436356,433436356,src/wallet/wallet.cpp
achow101,2020-06-01 19:17:24,Removed,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r433436421,433436421,src/wallet/wallettool.cpp
Sjors,2020-06-02 19:03:33,In 3cdb7fd9d1e92f07c04c325c9b585ff736162198: it's a bit odd that you're introducing `m_read_only` here because it's not read anywhere yet. 64a5a29d692378df443ae599b81c1f4547ec3d03 seems a better place to introduce it.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r434111610,434111610,src/wallet/db.cpp
Sjors,2020-06-02 19:37:04,3cdb7fd9d1e92f07c04c325c9b585ff736162198 nit: rename breaks comment indent (it's still broken in `bdb.cpp` after the move),https://github.com/bitcoin/bitcoin/pull/18971#discussion_r434130529,434130529,src/wallet/db.cpp
Sjors,2020-06-02 19:41:18,"3cdb7fd9d1e92f07c04c325c9b585ff736162198  nit: the `fCreate` helper variable makes this more readable. It's introduced in a later commit, but might as well do it here.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r434132604,434132604,src/wallet/db.cpp
ryanofsky,2020-06-08 14:15:49,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (b6a6e0292c226f67b9ee177f9732a936aa7a0d7e)\n\nMinor: it would be better to drop `filename` argument and just print `path` value instead in all the error messages below currently using `filename`. When this code was originally written, there was only one environment so it made sense to print just the `filename` without",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436743379,436743379,src/wallet/db.cpp
ryanofsky,2020-06-08 14:52:58,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (b6a6e0292c226f67b9ee177f9732a936aa7a0d7e)\n\nMinor: It would be good to restore the new paragraph break before ""All BDB environments"" and replace ""All BDB environments are checked to prevent..."" with ""In addition to disallowing opening databases with the same fileid in the same environment, also disallow opening data",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436769899,436769899,src/wallet/db.cpp
ryanofsky,2020-06-08 16:49:40,"In commit ""walletdb: track database file use as m_refcount within BerkeleyDatabase"" (9603e233c9c4049a267282615b5e4f31600656e6)\n\nNote: Line is moved outside this function to the only caller, BerkeleyBatch::BerkeleyBatch",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436849879,436849879,src/wallet/db.cpp
ryanofsky,2020-06-08 16:58:47,"In commit ""walletdb: Add BerkeleyDatabase::Release"" (8726d373e165087789933eb03383dd7feee31d3f)\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432677500\n\n> So the flow with `BerkeleyDatabase` is `Open`, changes, `Release`, `Close`.\n\nThank you! I was missing the idea that Release wouldn't actively close anything, just lazily indicate that it could be closed.\n\nMaybe ju",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436855238,436855238,src/wallet/db.h
ryanofsky,2020-06-08 17:01:05,"In commit ""walletdb: Change BerkeleyDatabase::Flush to Close"" (f3b553f36e83c44a4edb51710ae673d6b9b3e573)\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432686357\n\n> Not entirely sure, but this is moved code.\n> \n> This was originally called during `BerkeleyDatabase::Flush(true)`, i.e. when the database and environment are being closed. So I moved it into the destructor t",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436856577,436856577,src/wallet/db.cpp
ryanofsky,2020-06-08 17:01:34,"In commit ""walletdb: Move log consolidation into BerkeleyEnvironment::Close"" (2c663e453104b2f49849d8bc80727e98abda8055)\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r432690287\n\n> I don't think there is a behavior change here, although the it is difficult to work out exactly when the database and environment are actually being flushed and closed.\n\nThanks I missed that F",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436856857,436856857,src/wallet/db.cpp
ryanofsky,2020-06-08 19:14:44,"In commit ""walletdb: Change BerkeleyDatabase::Flush to Close"" (f3b553f36e83c44a4edb51710ae673d6b9b3e573)\n\nI don't think it makes sense to add this new database.reset() here. The only two places calling this function with shutdown=true are immediately deleting the whole CWallet[1][2], so having this condition and branch just seems like adding complexity for no reason. If there is a reason why w",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436940102,436940102,src/wallet/wallet.cpp
ryanofsky,2020-06-08 20:20:05,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (b6a6e0292c226f67b9ee177f9732a936aa7a0d7e)\n\nThis isn't actually the right place to be erasing the fileid entry. A Fileid entry is created when a database is opened (when BerkeleyDatabase::m_db is set in BerkeleyDatabase::Open) and it should be erased when the database is closed (when BerkeleyDatabase::m_db is delete",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r436976128,436976128,src/wallet/db.cpp
ryanofsky,2020-06-08 21:31:00,"In commit ""walletdb: Change BerkeleyDatabase::Flush to Close"" (f3b553f36e83c44a4edb51710ae673d6b9b3e573)\n\nCould you add an `assert(!m_db);` here as well? The Close() call above *should* be properly closing the database but this depends on a big strand of spaghetti that an assert might prevent getting chewed up in the future.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437012889,437012889,src/wallet/db.cpp
ryanofsky,2020-06-08 21:47:27,"In commit ""walletdb: track database file use as m_refcount within BerkeleyDatabase"" (9603e233c9c4049a267282615b5e4f31600656e6)\n\nI think you need to call Acquire() here before Open() not after. Now that the reference count is no longer protected by the cs_db mutex there is a race condition where rewrite/flush/backup functions could start running between the Open and Acquire calls here and and s",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437020063,437020063,src/wallet/db.cpp
ryanofsky,2020-06-08 22:07:20,"In commit ""walletdb: track database file use as m_refcount within BerkeleyDatabase"" (9603e233c9c4049a267282615b5e4f31600656e6)\n\nEven though `m_refcount` is atomic you still have to lock cs_db while updating it, otherwise the `m_db_in_use.notify_all()` call may result in a lost wakeup and infinite hang if the `m_db_in_use.wait()` lambda happens to run at the same time `m_refcount` is decremente",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437028132,437028132,src/wallet/db.cpp
ryanofsky,2020-06-08 22:37:01,"In commit ""walletdb: Handle cursor internally"" (2711caa2a2d4f04b848c25b614b353a1a08351b0)\n\nBehavior isn't changing in this commit, but error handling here is broken, right? This should be returning failure if creating a cursor doesn't succeed, not just pretending it succeeded and not reading anything.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437039174,437039174,src/wallet/db.cpp
ryanofsky,2020-06-08 22:39:23,"In commit ""walletdb: Handle cursor internally"" (2711caa2a2d4f04b848c25b614b353a1a08351b0)\n\nI think this needs to either return false if m_cursor is not null or assert that it is null, otherwise calling this at the wrong time will silently leak memory",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437039991,437039991,src/wallet/db.h
ryanofsky,2020-06-09 10:33:02,"In commit ""walletdb: Move Rewrite into BerkeleyDatabase"" (75f3532a70abf4331aba212f979a2e8be02d191c)\n\nI think Acquire and Release calls here should be dropped because they are misleading and don't do anything and add extra potential for leaks and bugs. Acquire/Release are used for shared access to a database, but this is doing exclusive access, with cs_db locked the whole time. It might be good",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437308991,437308991,src/wallet/db.cpp
ryanofsky,2020-06-09 10:34:45,"In commit ""walletdb: Move Rewrite into BerkeleyDatabase"" (75f3532a70abf4331aba212f979a2e8be02d191c)\n\nShould remove comment previous line referring to `db` now outdated",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437309866,437309866,src/wallet/db.cpp
ryanofsky,2020-06-09 10:54:59,"In commit ""walletdb: Move Txn* functions into WalletDatabase"" (e1ebc69a5e6628cadf480dfd6d787a6c9f631b86)\n\nThis seems bad. If there's an ongoing transaction and the database is closed, this should raise or return some error, not silently throw away data",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437320102,437320102,src/wallet/db.cpp
ryanofsky,2020-06-09 11:15:30,"In commit ""walletdb: Move Txn* functions into WalletDatabase"" (e1ebc69a5e6628cadf480dfd6d787a6c9f631b86)\n\nThis might do more damage than the abort call in Close(). I don't think there's any point to having a shared reference count if one user of the database can silently abort a transaction created by a different user of the database.\n\nI'm skeptical of the database having these new `Dbc* m",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437330343,437330343,src/wallet/db.cpp
ryanofsky,2020-06-09 11:40:30,"In commit ""walletdb: refactor Read, Write, Erase, and Exists into non-template func"" (aac3483e9e0423b3414cfaf84f37041a200d773c)\n\nMinor: DBRead does need something like a `CDataStream& value` argument to write into but all the other `CDataStream&` arguments are just byte strings and could be `Span<char>` typed instead. Actually even DBRead could use `Span` if written as\n\n```c++\nbool DBRea",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437342744,437342744,src/wallet/db.h
ryanofsky,2020-06-09 11:55:14,"In commit ""walletdb: refactor Read, Write, Erase, and Exists into non-template func"" (aac3483e9e0423b3414cfaf84f37041a200d773c)\n\nI like this commit! Nice to keep the template messiness and bdb messiness separate.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437350249,437350249,src/wallet/db.h
ryanofsky,2020-06-09 12:07:05,"In commit ""walletdb: Remove BerkeleyBatch and have WalletBatch use WalletDatabase"" (64a5a29d692378df443ae599b81c1f4547ec3d03)\n\nBelieve this should also call acquire before open not after per https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437020063",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437356565,437356565,src/wallet/walletdb.h
ryanofsky,2020-06-09 12:27:36,"In commit ""walletdb: Make WalletDatabase abstract class"" (4c6c9080d48ec5810e7d36348f7c730a586e9fb5)\n\nMinor: Any particular reason this is a public member? (Only asking because I think it would be good for comprehension to declare std::shared_ptr\<BerkeleyEnvironment> and std::unique_ptr\<Db> members next to each other)",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437370926,437370926,src/wallet/db.h
ryanofsky,2020-06-09 12:34:19,"In commit ""Move BDB specific things into bdb.{cpp/h}"" (b4c2765fd19e5dd8c823febd65ad5e62a58c8260)\n\nI think you can drop all this pragma stuff if you're dropping the db_cxx include",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437376848,437376848,src/wallet/db.h
ryanofsky,2020-06-09 14:48:44,"In commit ""walletdb: Move Txn* functions into WalletDatabase"" ([e1ebc69](https://github.com/bitcoin/bitcoin/commit/e1ebc69a5e6628cadf480dfd6d787a6c9f631b86))\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437330343\n\n> It's not coherent to have a shared reference count but only allow a single cursor and a single transaction at a time, and have different batches abort each ot",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437482994,437482994,src/wallet/db.cpp
achow101,2020-06-09 15:08:25,I'd like to keep it here instead of removing and re-introducing this line.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437498374,437498374,src/wallet/db.cpp
achow101,2020-06-09 18:13:09,"Yes, I think error handling is broken here. I think the intent was to ignore an error and just keep trying until it succeeds. But there's nothing to actually have the outer while loop keep going.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437625076,437625076,src/wallet/db.cpp
achow101,2020-06-09 18:28:24,"Transactions are only used during encryption. Cursors are only used by loading, rewriting, and zapwallettx.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437634055,437634055,src/wallet/db.cpp
achow101,2020-06-09 18:55:29,BerkeleyEnvironment needs this.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437649218,437649218,src/wallet/db.h
achow101,2020-06-09 18:56:19,Fixed,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437649732,437649732,src/wallet/db.cpp
achow101,2020-06-09 18:56:30,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437649850,437649850,src/wallet/db.cpp
achow101,2020-06-09 18:56:39,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437649940,437649940,src/wallet/db.cpp
achow101,2020-06-09 18:56:47,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437650033,437650033,src/wallet/db.cpp
achow101,2020-06-09 18:57:09,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437650226,437650226,src/wallet/db.h
achow101,2020-06-09 18:57:16,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437650293,437650293,src/wallet/db.cpp
achow101,2020-06-09 18:57:25,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437650379,437650379,src/wallet/db.cpp
achow101,2020-06-09 18:57:59,Removed.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437650692,437650692,src/wallet/wallet.cpp
achow101,2020-06-09 18:59:09,This can't be moved into CloseDb. However I have moved it into `BerkeleyEnvironment::Close`.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651334,437651334,src/wallet/db.cpp
achow101,2020-06-09 18:59:18,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651412,437651412,src/wallet/db.cpp
achow101,2020-06-09 18:59:26,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651487,437651487,src/wallet/db.cpp
achow101,2020-06-09 18:59:31,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651549,437651549,src/wallet/db.cpp
achow101,2020-06-09 18:59:39,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651616,437651616,src/wallet/db.h
achow101,2020-06-09 18:59:45,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651672,437651672,src/wallet/db.cpp
achow101,2020-06-09 18:59:50,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651724,437651724,src/wallet/db.cpp
achow101,2020-06-09 19:00:22,Renamed and removed `const`,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437652048,437652048,src/wallet/db.h
achow101,2020-06-09 19:00:28,Done,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437652096,437652096,src/wallet/walletdb.h
achow101,2020-06-09 19:00:35,Removed,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437652157,437652157,src/wallet/db.h
achow101,2020-06-09 20:45:24,"I've decided to go with option 1 and added asserts to `CreateCursor` and `TxnBegin`.\n\nI don't think it makes much sense to support multiple transactions and cursors because of our extremely limited usage of them. Transactions are only used when encrypting a wallet. Cursors are used in scenarios where there is only a single thread accessing the database already. These are in loading (both load ",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437707266,437707266,src/wallet/db.cpp
ryanofsky,2020-06-12 15:34:24,"In commit ""walletdb: Change BerkeleyDatabase::Flush to Close"" (1b354344ebfc68506484f688f042b0588e83f1c4)\n\nIf these lines are removed in this commit, I think this is an infinite loop. Not a serious problem since it's fixed in a later commit, but wanted to make a note",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439491744,439491744,src/wallet/db.cpp
ryanofsky,2020-06-12 19:29:22,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (43afe48e5848a263240f6e128269d00bf932da61)\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437651334\n\n> This can't be moved into CloseDb. However I have moved it into `BerkeleyEnvironment::Close`.\n\nOh you're right, it can't go there because flushes also close the database. But now if two datab",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439605437,439605437,src/wallet/db.cpp
ryanofsky,2020-06-12 19:35:48,"In commit ""walletdb: Move Rewrite into BerkeleyDatabase"" (cb343b8628587f7ef4949741f666b4ee06f8774d)\n\nNote: It's safe to drop this env->CloseDb because m_refcount is will still be 0 here, so BerkeleyDatabase::Close call below will call BerkeleyEnvironment::Flush internally which will call BerkeleyEnvironment::CloseDb",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439608032,439608032,src/wallet/db.cpp
ryanofsky,2020-06-12 19:44:19,"> In commit ""walletdb: Move Txn* functions into WalletDatabase"" ([e1ebc69](https://github.com/bitcoin/bitcoin/commit/e1ebc69a5e6628cadf480dfd6d787a6c9f631b86))\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437320102\n\nI still don't think it is safe to silently discard data when a database is closed. Suggest `assert(m_active_txn)` or adding other error handling, or moving ac",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439611086,439611086,src/wallet/db.cpp
ryanofsky,2020-06-12 19:48:53,"In commit ""walletdb: Move Txn* functions into WalletDatabase"" (0e96b5b77c33275d287f5c33e77f87ab3f4ac868)\n\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437330343\n\nI don't think it is safe to silently discard data when a reference count is decremented. Suggest `assert(m_active_txn)` or adding other error handling, or moving active transaction back to the batch object for ",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439612875,439612875,src/wallet/db.cpp
ryanofsky,2020-06-12 19:56:40,"In commit ""walletdb: Move Txn* functions into WalletDatabase"" (0e96b5b77c33275d287f5c33e77f87ab3f4ac868)\n\nWhat is this doing? Could you add a code comment to explain it? Maybe log something or return an error? This seems like a change in behavior, and I wouldn't expect there to be a problem checkpointing data just because a transaction's active. Maybe remove this if there isn't a particular re",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439615919,439615919,src/wallet/db.cpp
ryanofsky,2020-06-12 22:26:53,"re: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437707266\n\n> Additionally, in SQLite, there aren't such a thing as multiple transactions, so having a separate `Batch/ class would make that more difficult.\n\nRIGHT. :sweat_smile: Finally I understand why you are doing this. I thought you had just gone insane wanting to cram the database and batch classes together and make all th",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439666055,439666055,src/wallet/db.cpp
ryanofsky,2020-06-13 09:46:44,"re: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439666055\n\n> Now if there are two RPC calls happening in different threads that both want to open a transaction or a cursor, they have to coordinate with each other to see who is allowed to go first, or risk crashing the process.\n\nI forgot about cs_wallet when writing this. I think with cs_wallet, two batch objects for the same ",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439725880,439725880,src/wallet/db.cpp
achow101,2020-06-13 18:02:14,"There does happen to be a few times where there are multiple `BerkeleyBatch` objects are active, although I don't know where this is happening. You can check this by adding some print lines at the place where `mapFileUseCount` is being updated.\n\nI will probably rework this PR to keep `BerkeleyBatch` and make the move commits at the beginning so this isn't so difficult to update.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r439757200,439757200,src/wallet/db.cpp
achow101,2020-06-15 19:07:16,Do you have a specific scenario where this could happen? This change seems to be causing a test failure.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r440386812,440386812,src/wallet/db.cpp
ryanofsky,2020-06-17 15:54:54,"In commit ""walletdb: Use a global g_fileids instead of m_fileids for each env"" (d9cbaa21c351e266a7fc4a52774e85a8e5a3d08d)\n\nre: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r440386812\n\n> Do you have a specific scenario where this could happen? This change seems to be causing a test failure.\n\nThe scenario is two wallets A and B are loaded in the same environment, then A is un",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441652829,441652829,src/wallet/bdb.cpp
ryanofsky,2020-06-17 17:01:47,"In commit ""walletdb: Handle cursor internally"" (84bc5c1705691f4ecdfb8bcc90eb1bc4970281dc)\n\nAs noted https://github.com/bitcoin/bitcoin/pull/18971#discussion_r437625076, the error handling for failing to get a cursor here is broken. It had been broken before this commit, but now this commit is introducing a new way for getting a cursor to fail (the case where m_cursor is not null), so this migh",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441694302,441694302,src/wallet/bdb.cpp
ryanofsky,2020-06-17 17:04:57,"In commit ""walletdb: Handle cursor internally"" (84bc5c1705691f4ecdfb8bcc90eb1bc4970281dc)\n\nCould the commit message for this say something about the motivation for this change? It seems good, but I'm also not sure I understand why it's happening.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441696102,441696102,src/wallet/bdb.h
ryanofsky,2020-06-17 17:07:43,"In commit ""walletdb: Handle cursor internally"" (84bc5c1705691f4ecdfb8bcc90eb1bc4970281dc)\n\nIs it intentional to close the cursor in the catch block and stop closing the cursor in the try block? It looks like it could be an accidental change",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441697781,441697781,src/wallet/walletdb.cpp
ryanofsky,2020-06-17 17:10:54,"In commit ""walletdb: Handle cursor internally"" (84bc5c1705691f4ecdfb8bcc90eb1bc4970281dc)\n\nWould it make sense to call CloseCursor in the BerkeleyBatch destructor? It seems like it could guard against memory leaks, and maybe avoid the need to add CloseCursor calls some of the places where they are added.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441699618,441699618,src/wallet/bdb.h
achow101,2020-06-17 17:49:43,"Ah, I see how that could theoretically happen. I did a bit of testing and wasn't able to trigger a spurious duplicate fileid error. I believe that's because closing database A also closed database B since nothing was using it. So to get this error, B needs to be in use.\n\nThe reason this was failing tests was because I corrected a mistake in the patch. You have `g_fileids.erase(m_file_path);` w",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441722431,441722431,src/wallet/bdb.cpp
achow101,2020-06-17 17:52:57,"Yes, this was intentional. I believe previously we could have had a memory leak as the cursor could possible never get closed.\n\nBefore the while loop is exited, we always close the cursor. So having this at the end of the try block isn't useful. However it is also possible that the while loop is exited by an exception, in which case the cursor would never get closed as the catch block doesn't ",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441724394,441724394,src/wallet/walletdb.cpp
achow101,2020-06-17 17:59:12,I've changed `CreateCursor` to assert.,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441728301,441728301,src/wallet/bdb.cpp
achow101,2020-06-17 17:59:51,"Done.\n\nThis is happening because `Dbc` is BDB specific so a generic `DatabaseBatch` class can't return them.",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441728698,441728698,src/wallet/bdb.h
achow101,2020-06-17 18:00:35,Done (I put it in `Close` which is called by the desctructor).,https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441729173,441729173,src/wallet/bdb.h
ryanofsky,2020-06-18 17:30:55,"re: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r440386812\n\n> Do you have a specific scenario where this could happen? This change seems to be causing a test failure.\n\nMarking resolved, followed up in a new thread: https://github.com/bitcoin/bitcoin/pull/18971#discussion_r441652829",https://github.com/bitcoin/bitcoin/pull/18971#discussion_r442390278,442390278,src/wallet/db.cpp
