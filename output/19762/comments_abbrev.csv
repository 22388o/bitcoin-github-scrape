jonatack,2020-08-18 16:07:13,"Concept ACK. As a frequent cli user, this seems quite handy.",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-675570521,675570521,
practicalswift,2020-08-18 17:45:34,Concept ACK: neat!,https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-675620785,675620785,
laanwj,2020-08-20 12:54:53,"Concept ACK on this functionality in the client. I wish it could be client-only, though and would not introduce a non-standard server side convention (and further complicate the RPC server's argument parsing logic).",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-677647106,677647106,
luke-jr,2020-08-20 18:50:48,Seems useful for non-CLI callers too?,https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-677837309,677837309,
DrahtBot,2020-08-20 19:55:10,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16439](https://github.com/bitcoin/bitcoin/pull/16439) (cli/gui: support ""@height"" in place of blockhash for getblock on ",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-677871356,677871356,
luke-jr,2020-08-22 01:53:32,"> Added stricter server error checking in the two test cases. Instead of allowing the same parameter to be specified twice (in positional and named forms if the positional value is null), the server always throws an error if a parameter is specified twice.\n\nnull is supposed to be equivalent to omitted, so I think it should work.",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-678578050,678578050,
promag,2020-08-23 23:32:55,Concept ACK.,https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-678839546,678839546,
promag,2020-08-25 09:17:58,On the cli we could also support passing JSON arguments like `query_options.minimumAmount=0.001 query_options.maximumCount=1`.,https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-679909070,679909070,
ryanofsky,2020-11-16 17:30:33,"Looking over [recent irc conversation](http://www.erisian.com.au/bitcoin-core-dev/log-2020-11-14.html#l-55), if you don't like the createwallet API, you probably won't like this PR. Even still, this PR should make the createwallet RPC easier to call in a backward compatible way, without getting in the way of future improvements. This PR can also nicely complement client side evaluation features li",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-728211249,728211249,
jonatack,2020-11-16 18:50:13,Thanks for the comment; reminds me to re-test this PR.,https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-728255075,728255075,
jonatack,2020-11-17 12:21:35,"This PR would make it much nicer to use the `fee_rate` sat/vB param in #20305 with, for example, the sendtoaddress, sendmany, and send RPCs. Thumbs up.",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-728891479,728891479,
ryanofsky,2020-11-17 12:36:00,"I forgot to mention earlier the way this could combine with #20273. #20273 adds support for calling RPC methods as function expressions. When it detects `()` characters used it parses arguments differently,  so makes it possible to pass named arguments without having to use `-named` option and without having to  break `bitcoin-cli` backwards compatibility. So\n\n```bash\nbitcoin-cli -named crea",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-728899028,728899028,
meshcollider,2021-09-28 04:41:57,"Strong concept ACK, briefly reviewed and looks good but will review more thoroughly soon.",https://github.com/bitcoin/bitcoin/pull/19762#issuecomment-928794040,928794040,
luke-jr,2020-08-19 22:18:55,Should we support a way to escape the '=' for positional string literals?,https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473380729,473380729,src/rpc/client.cpp
luke-jr,2020-08-19 22:24:21,Where do we overwrite the null with the named arg value??,https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473385046,473385046,src/rpc/server.cpp
luke-jr,2020-08-19 22:25:42,"Please also test `echo(0, null, 2, arg1=1)`",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473386045,473386045,test/functional/interface_bitcoin_cli.py
luke-jr,2020-08-19 22:26:04,"Please also test `echo(0, null, 2, arg1=1)`",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473386294,473386294,test/functional/rpc_named_arguments.py
ryanofsky,2020-08-21 00:37:51,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473380729\n\n> Should we support a way to escape the '=' for positional string literals?\n\nI'm not sure how useful it would be but I implemented a way to do this in a new commit on top of this PR: b4b155e52b7446d15c957a77d8a34e9e23cb80b0 ([branch](https://github.com/ryanofsky/bitcoin/commits/pr/=.1)). Change is backward compatible ",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r474345047,474345047,src/rpc/client.cpp
ryanofsky,2020-08-21 00:38:03,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473385046\n\n> Where do we overwrite the null with the named arg value??\n\nThis code isn't overwriting the previous list of positional parameters, but building a new list from `args` and parts of the old list.",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r474345096,474345096,src/rpc/server.cpp
ryanofsky,2020-08-21 00:38:11,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473386045\n\n> Please also test `echo(0, null, 2, arg1=1)`\n\nThanks, added this test case, and also changed behavior in this case (now it complains arg1 was specified twice).",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r474345119,474345119,test/functional/interface_bitcoin_cli.py
ryanofsky,2020-08-21 00:38:19,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r473386294\n\n> Please also test `echo(0, null, 2, arg1=1)`\n\nThanks, added this test case, and also changed behavior in this case (now it complains arg1 was specified twice).",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r474345150,474345150,test/functional/rpc_named_arguments.py
jonatack,2020-08-31 18:00:54,"```suggestion\n        if (out.params.empty()) skipped += 1;\n```",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r480295381,480295381,src/rpc/server.cpp
jonatack,2020-08-31 18:06:34,"perhaps link directly to the new section\n```suggestion\nAll JSON-RPC methods accept a new [named parameter](JSON-RPC-interface.md#parameter-passing)\n```",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r480298191,480298191,doc/release-notes-19762.md
jonatack,2020-08-31 18:15:16,"I think it's important to provide usage examples here. Perhaps more so than in the release notes, which could optionally just link to and refer to this section.",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r480302756,480302756,doc/JSON-RPC-interface.md
promag,2020-09-01 16:35:28,"nit 1: call it `_args` to have some internal ""feeling""?\n\nnit 2: forbid registering arguments with this name.",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r481281793,481281793,src/rpc/server.cpp
promag,2020-09-01 16:38:30,"nit,\n```cpp\nif (positional_args != argsIn.end()\n    if (positional_args->second->isArray()) {\n        // ...\n    } else {\n        // warn incorrect type\n    }\n}",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r481283586,481283586,src/rpc/server.cpp
ryanofsky,2020-10-22 15:48:39,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r480302756\n\n> I think it's important to provide usage examples here. Perhaps more so than in the release notes, which could optionally just link to and refer to this section.\n\nThanks, added",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r510270143,510270143,doc/JSON-RPC-interface.md
ryanofsky,2020-10-22 15:49:01,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r480298191\n\n> perhaps link directly to the new section\n\nThanks, added",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r510270422,510270422,doc/release-notes-19762.md
ryanofsky,2020-10-22 15:49:53,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r480295381\n\nSeems more consistent to keep logic expressed in numbers",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r510271098,510271098,src/rpc/server.cpp
ryanofsky,2020-10-22 16:09:11,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r481281793\n\n> nit 1: call it `_args` to have some internal ""feeling""?\n\nI don't think it would be good have RPC methods accepting both ""_args"" and ""args"" parameters. Naming was chosen to discourage this (while not disallowing it). Also it isn't really meant to be internal. It's supported by two clients in this PR, explained in doc",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r510285152,510285152,src/rpc/server.cpp
ryanofsky,2020-10-22 16:11:00,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r481283586\n\n> nit,\n\nI wouldn't want to change this. It makes logic messier and maybe turns an error into a warning (though I don't think that was the intent)",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r510286477,510286477,src/rpc/server.cpp
jonatack,2020-11-17 11:41:58,"Outside of this PR changeset, it may not be clear where ""args"" comes from. It may be good to mention in the comment here that ""args"" is set in `rpc/client.cpp::RPCConvertNamedValues()`.",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r525090389,525090389,src/rpc/server.cpp
ryanofsky,2020-11-17 12:05:10,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r525090389\n\n> Outside of this PR changeset, it may not be clear where ""args"" comes from. It may be good to mention in the comment here that ""args"" is set in `rpc/client.cpp::RPCConvertNamedValues()`.\n\nThanks, if I follow up I'll reference [JSON-RPC-interface.md#parameter-passing](https://github.com/ryanofsky/bitcoin/blob/pr/named",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r525103575,525103575,src/rpc/server.cpp
luke-jr,2020-11-19 00:07:58,"I think we should probably still error if `params` has anything in it.\n\nEither that, or if `params` happened to match the positional args, convert them to positional args.",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r526505453,526505453,src/rpc/client.cpp
ryanofsky,2020-11-19 12:43:36,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r526505453\n\n> I think we should probably still error if `params` has anything in it.\n> \n> Either that, or if `params` happened to match the positional args, convert them to positional args.\n\nIt's already an error server side, so implementing this wouldn't have a practical effect and would complicate this PR. I can see benefit",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r526851262,526851262,src/rpc/client.cpp
luke-jr,2020-11-19 21:46:07,"For example, `bitcoin-cli getrawtransaction txid blockhash=blah 1` should probably fail, but unless I'm missing something, this will end up with the `1` as `verbosity` despite it being the 3rd on the command line option",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r527223083,527223083,src/rpc/client.cpp
ryanofsky,2020-12-07 17:07:51,"re: https://github.com/bitcoin/bitcoin/pull/19762#discussion_r527223083\n\n> For example, `bitcoin-cli getrawtransaction txid blockhash=blah 1` should probably fail, but unless I'm missing something, this will end up with the `1` as `verbosity` despite it being the 3rd on the command line option\n\nI think you forgot `-named` in your example, but otherwise this is right and seems good to me. O",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r537674587,537674587,src/rpc/client.cpp
ryanofsky,2021-07-11 19:08:22,"> re: [#19762 (comment)](https://github.com/bitcoin/bitcoin/pull/19762#discussion_r527223083)\n\nTo make this concrete, lets say you have an RPC with 4 parameters `a` `b` `c` `d` that you want to pass values `a` `b` `c` `d`.\n\nThis is allowed:\n\n```sh\nbitcoin-cli -named RPC a b c=c d=d\nbitcoin-cli -named RPC c=c d=d a b\n```\n\nThis is an error:\n\n```sh\nbitcoin-cli -named RPC a",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r667523244,667523244,src/rpc/client.cpp
achow101,2021-07-29 21:53:43,"It seems to me that it would be clearer to check for `args` first and then fill in the named parameters afterwards. Overall, I think the logic would be easier to follow. Additionally, I think it would be clearer as to how we detect that an argument was both positional and named. The current method of detecting that is confusing to me.",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r679510536,679510536,src/rpc/server.cpp
promag,2021-09-02 12:58:16,Eventually we can omit `-named`.,https://github.com/bitcoin/bitcoin/pull/19762#discussion_r701056760,701056760,doc/JSON-RPC-interface.md
Sjors,2021-11-19 14:29:55,"That would be nice, since I can never remember how to used named arguments :-)",https://github.com/bitcoin/bitcoin/pull/19762#discussion_r753238204,753238204,doc/JSON-RPC-interface.md
