[
  {
    "sha": "894c414dafb8735d6a104dfe30f4c2c57458e65d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTRjNDE0ZGFmYjg3MzVkNmExMDRkZmUzMGY0YzJjNTc0NThlNjVk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-18T15:43:42Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2020-08-18T15:43:42Z"
      },
      "message": "rpc: Allow named and positional arguments to be used together\n\nIt's nice to be able to use named options and positional arguments together.\n\nMost shell tools accept both, and python functions combine options and\narguments allowing them to be passed with even more flexibility. This change\nadds support for python's approach so as a motivating example:\n\n    bitcoin-cli -named createwallet wallet_name=mywallet load_on_startup=1\n\nCan be shortened to:\n\n    bitcoin-cli -named createwallet mywallet load_on_startup=1\n\nJSON-RPC standard doesn't have a convention for passing named and positional\nparameters together, so this implementation makes one up and interprets any\nunused \"args\" named parameter as a positional parameter array.",
      "tree": {
        "sha": "f5263ff26fa7c321e8f8711bd10d9ce6346d5e58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5263ff26fa7c321e8f8711bd10d9ce6346d5e58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/894c414dafb8735d6a104dfe30f4c2c57458e65d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/894c414dafb8735d6a104dfe30f4c2c57458e65d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/894c414dafb8735d6a104dfe30f4c2c57458e65d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/894c414dafb8735d6a104dfe30f4c2c57458e65d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc8e8eae2dc4b47ef67afc6880ea48b8e84a086",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc8e8eae2dc4b47ef67afc6880ea48b8e84a086",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc8e8eae2dc4b47ef67afc6880ea48b8e84a086"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 76,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3e45441eb4a299a93a048dad6c6467bd86a4b642",
        "filename": "doc/JSON-RPC-interface.md",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/doc/JSON-RPC-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/doc/JSON-RPC-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/JSON-RPC-interface.md?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -5,6 +5,28 @@ The headless daemon `bitcoind` has the JSON-RPC API enabled by default, the GUI\n option. In the GUI it is possible to execute RPC methods in the Debug Console\n Dialog.\n \n+## Parameter passing\n+\n+The JSON-RPC server supports both _by-position_ and _by-name_ [parameter\n+structures](https://www.jsonrpc.org/specification#parameter_structures)\n+described in the JSON-RPC specification. For extra convenience, to avoid the\n+need to name every parameter value, all RPC methods accept a named parameter\n+called `args`, which can be set to an array of initial positional values that\n+are combined with named values.\n+\n+Examples:\n+\n+```sh\n+# \"params\": [\"mywallet\", false, false, \"\", false, false, true]\n+bitcoin-cli createwallet mywallet false false \"\" false false true\n+\n+# \"params\": {\"wallet_name\": \"mywallet\", \"load_on_startup\": true}\n+bitcoin-cli -named createwallet wallet_name=mywallet load_on_startup=true\n+\n+# \"params\": {\"args\": [\"mywallet\"], \"load_on_startup\": true}\n+bitcoin-cli -named createwallet mywallet load_on_startup=true\n+```\n+\n ## Versioning\n \n The RPC interface might change from one major version of Bitcoin Core to the"
      },
      {
        "sha": "4dc45fb2c86ba0ff8ba1a0d2f512a4bd6bf1fd0b",
        "filename": "doc/release-notes-19762.md",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/doc/release-notes-19762.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/doc/release-notes-19762.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-19762.md?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -0,0 +1,19 @@\n+JSON-RPC\n+---\n+\n+All JSON-RPC methods accept a new [named\n+parameter](JSON-RPC-interface.md#parameter-passing) called `args` that can\n+contain positional parameter values. This is a convenience to allow some\n+parameter values to be passed by name without having to name every value. The\n+python test framework and `bitcoin-cli` tool both take advantage of this, so\n+for example:\n+\n+```sh\n+bitcoin-cli -named createwallet wallet_name=mywallet load_on_startup=1\n+```\n+\n+Can now be shortened to:\n+\n+```sh\n+bitcoin-cli -named createwallet mywallet load_on_startup=1\n+```"
      },
      {
        "sha": "30024ea6868324d8e25cfa0765a8fac5685b1fd2",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -248,11 +248,13 @@ UniValue RPCConvertValues(const std::string &strMethod, const std::vector<std::s\n UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<std::string> &strParams)\n {\n     UniValue params(UniValue::VOBJ);\n+    UniValue positional_args(UniValue::VARR);\n \n     for (const std::string &s: strParams) {\n         size_t pos = s.find('=');\n         if (pos == std::string::npos) {\n-            throw(std::runtime_error(\"No '=' in named argument '\"+s+\"', this needs to be present for every argument (even if it is empty)\"));\n+            positional_args.push_back(rpcCvtTable.convert(strMethod, positional_args.size()) ? ParseNonRFCJSONValue(s) : s);\n+            continue;\n         }\n \n         std::string name = s.substr(0, pos);\n@@ -267,5 +269,9 @@ UniValue RPCConvertNamedValues(const std::string &strMethod, const std::vector<s\n         }\n     }\n \n+    if (positional_args.size()) {\n+        params.pushKV(\"args\", positional_args);\n+    }\n+\n     return params;\n }"
      },
      {
        "sha": "df86aceeb308bcb9a547389ba334bad378087d31",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -402,6 +402,7 @@ static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, c\n     }\n     // Process expected parameters.\n     int hole = 0;\n+    size_t skipped = 0;\n     for (const std::string &argNamePattern: argNames) {\n         std::vector<std::string> vargNames;\n         boost::algorithm::split(vargNames, argNamePattern, boost::algorithm::is_any_of(\"|\"));\n@@ -425,6 +426,21 @@ static inline JSONRPCRequest transformNamedArguments(const JSONRPCRequest& in, c\n         } else {\n             hole += 1;\n         }\n+        if (out.params.size() == 0) skipped += 1;\n+    }\n+    // If leftover \"args\" param was found, use it as a source of positional\n+    // arguments and add named arguments after.\n+    auto positional_args = argsIn.find(\"args\");\n+    if (positional_args != argsIn.end() && positional_args->second->isArray()) {\n+        if (positional_args->second->size() > skipped && skipped < argNames.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Parameter \" + argNames[skipped] + \" specified twice both as positional and named argument\");\n+        }\n+        UniValue named_args = out.params;\n+        out.params = *positional_args->second;\n+        for (size_t i = out.params.size(); i < named_args.size(); ++i) {\n+            out.params.push_back(named_args[i]);\n+        }\n+        argsIn.erase(positional_args);\n     }\n     // If there are still arguments in the argsIn map, this is an error.\n     if (!argsIn.empty()) {"
      },
      {
        "sha": "679f6a6cea753f414578576d7dde879692c7d171",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -42,6 +42,11 @@ def run_test(self):\n         rpc_response = self.nodes[0].getblockchaininfo()\n         assert_equal(cli_response, rpc_response)\n \n+        self.log.info(\"Test named arguments\")\n+        assert_equal(self.nodes[0].cli.echo(0, 1, arg3=3, arg5=5), ['0', '1', None, '3', None, '5'])\n+        assert_raises_rpc_error(-8, \"Parameter arg1 specified twice both as positional and named argument\", self.nodes[0].cli.echo, 0, 1, arg1=1)\n+        assert_raises_rpc_error(-8, \"Parameter arg1 specified twice both as positional and named argument\", self.nodes[0].cli.echo, 0, None, 2, arg1=1)\n+\n         user, password = get_auth_cookie(self.nodes[0].datadir, self.chain)\n \n         self.log.info(\"Test -stdinrpcpass option\")"
      },
      {
        "sha": "cc3ee9efd5b826d2db70665108cd8024f34427d8",
        "filename": "test/functional/rpc_named_arguments.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/rpc_named_arguments.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/rpc_named_arguments.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_named_arguments.py?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -30,6 +30,9 @@ def run_test(self):\n         assert_equal(node.echo(arg1=1), [None, 1])\n         assert_equal(node.echo(arg9=None), [None]*10)\n         assert_equal(node.echo(arg0=0,arg3=3,arg9=9), [0] + [None]*2 + [3] + [None]*5 + [9])\n+        assert_equal(node.echo(0, 1, arg3=3, arg5=5), [0, 1, None, 3, None, 5])\n+        assert_raises_rpc_error(-8, \"Parameter arg1 specified twice both as positional and named argument\", node.echo, 0, 1, arg1=1)\n+        assert_raises_rpc_error(-8, \"Parameter arg1 specified twice both as positional and named argument\", node.echo, 0, None, 2, arg1=1)\n \n if __name__ == '__main__':\n     NamedArgumentTest().main()"
      },
      {
        "sha": "01034c77783198667cc2b6c8434722284f33bffd",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -133,10 +133,12 @@ def get_request(self, *args, **argsn):\n             json.dumps(args or argsn, default=EncodeDecimal, ensure_ascii=self.ensure_ascii),\n         ))\n         if args and argsn:\n-            raise ValueError('Cannot handle both named and positional arguments')\n+            params = dict(args=args, **argsn)\n+        else:\n+            params = args or argsn\n         return {'version': '1.1',\n                 'method': self._service_name,\n-                'params': args or argsn,\n+                'params': params,\n                 'id': AuthServiceProxy.__id_count}\n \n     def __call__(self, *args, **argsn):"
      },
      {
        "sha": "31188d567263f19fe0b78c02595ae3d39fc8a5ba",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/894c414dafb8735d6a104dfe30f4c2c57458e65d/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=894c414dafb8735d6a104dfe30f4c2c57458e65d",
        "patch": "@@ -618,7 +618,6 @@ def send_cli(self, command=None, *args, **kwargs):\n         \"\"\"Run bitcoin-cli command. Deserializes returned string as python object.\"\"\"\n         pos_args = [arg_to_cli(arg) for arg in args]\n         named_args = [str(key) + \"=\" + arg_to_cli(value) for (key, value) in kwargs.items()]\n-        assert not (pos_args and named_args), \"Cannot use positional arguments and named arguments in the same bitcoin-cli call\"\n         p_args = [self.binary, \"-datadir=\" + self.datadir] + self.options\n         if named_args:\n             p_args += [\"-named\"]"
      }
    ]
  }
]