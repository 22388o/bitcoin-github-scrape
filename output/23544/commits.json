[
  {
    "sha": "dcf836313b2ef3f256c63d841e2b13997afe4432",
    "node_id": "C_kwDOABII59oAKGRjZjgzNjMxM2IyZWYzZjI1NmM2M2Q4NDFlMmIxMzk5N2FmZTQ0MzI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T18:05:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-09T19:09:16Z"
      },
      "message": "moveonly: move WalletStorage to separate file",
      "tree": {
        "sha": "929a10fe060c53004e318d8d87bb6b022af0a1a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/929a10fe060c53004e318d8d87bb6b022af0a1a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dcf836313b2ef3f256c63d841e2b13997afe4432",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcf836313b2ef3f256c63d841e2b13997afe4432",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dcf836313b2ef3f256c63d841e2b13997afe4432",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcf836313b2ef3f256c63d841e2b13997afe4432/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ae4ba481ce8f7da173bef24432729c87a36cb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ae4ba481ce8f7da173bef24432729c87a36cb70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ae4ba481ce8f7da173bef24432729c87a36cb70"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 38,
      "deletions": 20
    },
    "files": [
      {
        "sha": "6c20d3c73ba6917462a95dfaa5a9d2795dc4e440",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcf836313b2ef3f256c63d841e2b13997afe4432/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcf836313b2ef3f256c63d841e2b13997afe4432/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=dcf836313b2ef3f256c63d841e2b13997afe4432",
        "patch": "@@ -284,6 +284,7 @@ BITCOIN_CORE_H = \\\n   wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/spend.h \\\n+  wallet/storage.h \\\n   wallet/sqlite.h \\\n   wallet/transaction.h \\\n   wallet/wallet.h \\"
      },
      {
        "sha": "d103746e5e479b6fd27735123e215d1b328136ac",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 20,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcf836313b2ef3f256c63d841e2b13997afe4432/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcf836313b2ef3f256c63d841e2b13997afe4432/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=dcf836313b2ef3f256c63d841e2b13997afe4432",
        "patch": "@@ -14,6 +14,7 @@\n #include <util/time.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n+#include <wallet/storage.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n \n@@ -24,26 +25,6 @@\n enum class OutputType;\n struct bilingual_str;\n \n-// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n-// It provides access to things that are part of the entire wallet and not specific to a ScriptPubKeyMan such as\n-// wallet flags, wallet version, encryption keys, encryption status, and the database itself. This allows a\n-// ScriptPubKeyMan to have callbacks into CWallet without causing a circular dependency.\n-// WalletStorage should be the same for all ScriptPubKeyMans of a wallet.\n-class WalletStorage\n-{\n-public:\n-    virtual ~WalletStorage() = default;\n-    virtual const std::string GetDisplayName() const = 0;\n-    virtual WalletDatabase& GetDatabase() const = 0;\n-    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n-    virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n-    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n-    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr) = 0;\n-    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n-    virtual bool HasEncryptionKeys() const = 0;\n-    virtual bool IsLocked() const = 0;\n-};\n-\n //! Default for -keypool\n static const unsigned int DEFAULT_KEYPOOL_SIZE = 1000;\n "
      },
      {
        "sha": "f32b5c659280b7962d0cce1dd3485b45bea9e1be",
        "filename": "src/wallet/storage.h",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcf836313b2ef3f256c63d841e2b13997afe4432/src/wallet/storage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcf836313b2ef3f256c63d841e2b13997afe4432/src/wallet/storage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/storage.h?ref=dcf836313b2ef3f256c63d841e2b13997afe4432",
        "patch": "@@ -0,0 +1,35 @@\n+// Copyright (c) 2019-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_STORAGE_H\n+#define BITCOIN_WALLET_STORAGE_H\n+\n+#include <wallet/crypter.h>\n+#include <wallet/db.h>\n+#include <wallet/walletdb.h>\n+#include <wallet/walletutil.h>\n+\n+#include <string>\n+\n+// Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n+// It provides access to things that are part of the entire wallet and not specific to a ScriptPubKeyMan such as\n+// wallet flags, wallet version, encryption keys, encryption status, and the database itself. This allows a\n+// ScriptPubKeyMan to have callbacks into CWallet without causing a circular dependency.\n+// WalletStorage should be the same for all ScriptPubKeyMans of a wallet.\n+class WalletStorage\n+{\n+public:\n+    virtual ~WalletStorage() = default;\n+    virtual const std::string GetDisplayName() const = 0;\n+    virtual WalletDatabase& GetDatabase() const = 0;\n+    virtual bool IsWalletFlagSet(uint64_t) const = 0;\n+    virtual void UnsetBlankWalletFlag(WalletBatch&) = 0;\n+    virtual bool CanSupportFeature(enum WalletFeature) const = 0;\n+    virtual void SetMinVersion(enum WalletFeature, WalletBatch* = nullptr) = 0;\n+    virtual const CKeyingMaterial& GetEncryptionKey() const = 0;\n+    virtual bool HasEncryptionKeys() const = 0;\n+    virtual bool IsLocked() const = 0;\n+};\n+\n+#endif // BITCOIN_WALLET_STORAGE_H"
      },
      {
        "sha": "3b770ca99ac704f88e9f19f8e6fe7b938d61b89d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dcf836313b2ef3f256c63d841e2b13997afe4432/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dcf836313b2ef3f256c63d841e2b13997afe4432/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dcf836313b2ef3f256c63d841e2b13997afe4432",
        "patch": "@@ -22,6 +22,7 @@\n #include <wallet/coinselection.h>\n #include <wallet/crypter.h>\n #include <wallet/scriptpubkeyman.h>\n+#include <wallet/storage.h>\n #include <wallet/transaction.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>"
      }
    ]
  },
  {
    "sha": "a79adfa4e467a2938adc3c08cb45aba295ba139f",
    "node_id": "C_kwDOABII59oAKGE3OWFkZmE0ZTQ2N2EyOTM4YWRjM2MwOGNiNDVhYmEyOTViYTEzOWY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-26T19:15:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:20:34Z"
      },
      "message": "Add operator< to CExtPubKey\n\nNeeded to use it in a set",
      "tree": {
        "sha": "47a30d560b55101b58f28eb095a98a68ec265f8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47a30d560b55101b58f28eb095a98a68ec265f8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a79adfa4e467a2938adc3c08cb45aba295ba139f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79adfa4e467a2938adc3c08cb45aba295ba139f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a79adfa4e467a2938adc3c08cb45aba295ba139f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79adfa4e467a2938adc3c08cb45aba295ba139f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dcf836313b2ef3f256c63d841e2b13997afe4432",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dcf836313b2ef3f256c63d841e2b13997afe4432",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dcf836313b2ef3f256c63d841e2b13997afe4432"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "049d4f87ced6e4a0e9bd2f608155e94bdf2a40fe",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a79adfa4e467a2938adc3c08cb45aba295ba139f/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a79adfa4e467a2938adc3c08cb45aba295ba139f/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=a79adfa4e467a2938adc3c08cb45aba295ba139f",
        "patch": "@@ -304,6 +304,7 @@ struct CExtPubKey {\n     {\n         return !(a == b);\n     }\n+    bool operator<(const CExtPubKey& other) const { return memcmp(vchFingerprint, other.vchFingerprint, sizeof(vchFingerprint)) < 0 || pubkey < other.pubkey; }\n \n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);"
      }
    ]
  },
  {
    "sha": "1799a0e764c5a52298b4df4711189b55325e226e",
    "node_id": "C_kwDOABII59oAKDE3OTlhMGU3NjRjNWE1MjI5OGI0ZGY0NzExMTg5YjU1MzI1ZTIyNmU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T20:08:56Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "walletdb: Add HDKey records",
      "tree": {
        "sha": "815deb7bf7b76a3368853bcb77ebde9352e8cea9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/815deb7bf7b76a3368853bcb77ebde9352e8cea9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1799a0e764c5a52298b4df4711189b55325e226e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1799a0e764c5a52298b4df4711189b55325e226e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1799a0e764c5a52298b4df4711189b55325e226e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1799a0e764c5a52298b4df4711189b55325e226e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a79adfa4e467a2938adc3c08cb45aba295ba139f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a79adfa4e467a2938adc3c08cb45aba295ba139f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a79adfa4e467a2938adc3c08cb45aba295ba139f"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 30,
      "deletions": 0
    },
    "files": [
      {
        "sha": "48425faa050025ccecef8a1859bef1cffcf02860",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1799a0e764c5a52298b4df4711189b55325e226e/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1799a0e764c5a52298b4df4711189b55325e226e/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=1799a0e764c5a52298b4df4711189b55325e226e",
        "patch": "@@ -30,6 +30,7 @@ namespace DBKeys {\n const std::string ACENTRY{\"acentry\"};\n const std::string ACTIVEEXTERNALSPK{\"activeexternalspk\"};\n const std::string ACTIVEINTERNALSPK{\"activeinternalspk\"};\n+const std::string ACTIVEHDKEY{\"activehdkey\"};\n const std::string BESTBLOCK_NOMERKLE{\"bestblock_nomerkle\"};\n const std::string BESTBLOCK{\"bestblock\"};\n const std::string CRYPTED_KEY{\"ckey\"};\n@@ -38,6 +39,7 @@ const std::string DEFAULTKEY{\"defaultkey\"};\n const std::string DESTDATA{\"destdata\"};\n const std::string FLAGS{\"flags\"};\n const std::string HDCHAIN{\"hdchain\"};\n+const std::string HDPUBKEY{\"hdxpubkey\"};\n const std::string KEYMETA{\"keymeta\"};\n const std::string KEY{\"key\"};\n const std::string LOCKED_UTXO{\"lockedutxo\"};\n@@ -295,6 +297,29 @@ bool WalletBatch::EraseLockedUTXO(const COutPoint& output)\n     return EraseIC(std::make_pair(DBKeys::LOCKED_UTXO, std::make_pair(output.hash, output.n)));\n }\n \n+bool WalletBatch::WriteHDPubKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    return WriteIC(std::make_pair(DBKeys::HDPUBKEY, xpub), uint8_t(1), false);\n+}\n+\n+bool WalletBatch::WriteActiveHDKey(const CExtPubKey& extpub)\n+{\n+    std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+    extpub.Encode(xpub.data());\n+\n+    if (!WriteIC(DBKeys::ACTIVEHDKEY, xpub, false)) {\n+        std::vector<unsigned char> read_xpub(BIP32_EXTKEY_SIZE);\n+        if (!m_batch->Read(DBKeys::ACTIVEHDKEY, read_xpub)) {\n+            return false;\n+        }\n+        return xpub == read_xpub;\n+    }\n+    return true;\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "9dbee9b9c2ea823430b1db3ef475b77cbba1b0e1",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1799a0e764c5a52298b4df4711189b55325e226e/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1799a0e764c5a52298b4df4711189b55325e226e/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=1799a0e764c5a52298b4df4711189b55325e226e",
        "patch": "@@ -55,6 +55,7 @@ namespace DBKeys {\n extern const std::string ACENTRY;\n extern const std::string ACTIVEEXTERNALSPK;\n extern const std::string ACTIVEINTERNALSPK;\n+extern const std::string ACTIVEHDKEY; // Active HD Master key, identified by extended pubkey\n extern const std::string BESTBLOCK;\n extern const std::string BESTBLOCK_NOMERKLE;\n extern const std::string CRYPTED_KEY;\n@@ -63,6 +64,7 @@ extern const std::string DEFAULTKEY;\n extern const std::string DESTDATA;\n extern const std::string FLAGS;\n extern const std::string HDCHAIN;\n+extern const std::string HDPUBKEY; // A HD key, identified by extended pubkey\n extern const std::string KEY;\n extern const std::string KEYMETA;\n extern const std::string LOCKED_UTXO;\n@@ -262,6 +264,9 @@ class WalletBatch\n     bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n     bool EraseActiveScriptPubKeyMan(uint8_t type, bool internal);\n \n+    bool WriteHDPubKey(const CExtPubKey& extpub);\n+    bool WriteActiveHDKey(const CExtPubKey& extpub);\n+\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);"
      }
    ]
  },
  {
    "sha": "d2051d0441631a279bdeb0b1e138a48f92e0c46d",
    "node_id": "C_kwDOABII59oAKGQyMDUxZDA0NDE2MzFhMjc5YmRlYjBiMWUxMzhhNDhmOTJlMGM0NmQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T20:20:30Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "walletdb: Add WriteKeyManKey and WriteCryptedKeyManKey\n\nThese functions write new key records for keys handled by a KeyManager",
      "tree": {
        "sha": "7d726835583bf3f8a0ed2890e261e6ad0a03cb79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d726835583bf3f8a0ed2890e261e6ad0a03cb79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2051d0441631a279bdeb0b1e138a48f92e0c46d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2051d0441631a279bdeb0b1e138a48f92e0c46d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2051d0441631a279bdeb0b1e138a48f92e0c46d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2051d0441631a279bdeb0b1e138a48f92e0c46d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1799a0e764c5a52298b4df4711189b55325e226e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1799a0e764c5a52298b4df4711189b55325e226e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1799a0e764c5a52298b4df4711189b55325e226e"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 47,
      "deletions": 0
    },
    "files": [
      {
        "sha": "203572d9d383e745304154d5ece26669b6db6911",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2051d0441631a279bdeb0b1e138a48f92e0c46d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2051d0441631a279bdeb0b1e138a48f92e0c46d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=d2051d0441631a279bdeb0b1e138a48f92e0c46d",
        "patch": "@@ -42,6 +42,8 @@ const std::string HDCHAIN{\"hdchain\"};\n const std::string HDPUBKEY{\"hdxpubkey\"};\n const std::string KEYMETA{\"keymeta\"};\n const std::string KEY{\"key\"};\n+const std::string KEYMAN_KEY{\"keyman_key\"};\n+const std::string KEYMAN_CKEY{\"keyman_ckey\"};\n const std::string LOCKED_UTXO{\"lockedutxo\"};\n const std::string MASTER_KEY{\"mkey\"};\n const std::string MINVERSION{\"minversion\"};\n@@ -320,6 +322,46 @@ bool WalletBatch::WriteActiveHDKey(const CExtPubKey& extpub)\n     return true;\n }\n \n+bool WalletBatch::WriteKeyManKey(const CPubKey& pubkey, const CPrivKey& privkey)\n+{\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> key;\n+    key.reserve(pubkey.size() + pubkey.size());\n+    key.insert(key.end(), pubkey.begin(), pubkey.end());\n+    key.insert(key.end(), privkey.begin(), privkey.end());\n+\n+    const auto rec_key = std::make_pair(DBKeys::KEYMAN_KEY, pubkey);\n+    const auto rec_val = std::make_pair(privkey, Hash(key));\n+    if (!WriteIC(rec_key, rec_val, false)) {\n+        std::pair<CPrivKey, uint256> val;\n+        if (!m_batch->Read(rec_key, val)) {\n+            return false;\n+        }\n+        return rec_val == val;\n+    }\n+    return true;\n+}\n+\n+bool WalletBatch::WriteCryptedKeyManKey(const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    // Compute a checksum of the encrypted key\n+    uint256 checksum = Hash(ckey);\n+\n+    const auto key = std::make_pair(DBKeys::KEYMAN_CKEY, pubkey);\n+    if (!WriteIC(key, std::make_pair(ckey, checksum), false)) {\n+        // It may already exist, so try writing just the checksum\n+        std::vector<unsigned char> val;\n+        if (!m_batch->Read(key, val)) {\n+            return false;\n+        }\n+        if (!WriteIC(key, std::make_pair(val, checksum), true)) {\n+            return false;\n+        }\n+    }\n+    EraseIC(std::make_pair(DBKeys::KEYMAN_KEY, pubkey));\n+    return true;\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "b3edb566ef8314653cfb07d6424a7f32db18171f",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2051d0441631a279bdeb0b1e138a48f92e0c46d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2051d0441631a279bdeb0b1e138a48f92e0c46d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=d2051d0441631a279bdeb0b1e138a48f92e0c46d",
        "patch": "@@ -67,6 +67,8 @@ extern const std::string HDCHAIN;\n extern const std::string HDPUBKEY; // A HD key, identified by extended pubkey\n extern const std::string KEY;\n extern const std::string KEYMETA;\n+extern const std::string KEYMAN_KEY;\n+extern const std::string KEYMAN_CKEY;\n extern const std::string LOCKED_UTXO;\n extern const std::string MASTER_KEY;\n extern const std::string MINVERSION;\n@@ -267,6 +269,9 @@ class WalletBatch\n     bool WriteHDPubKey(const CExtPubKey& extpub);\n     bool WriteActiveHDKey(const CExtPubKey& extpub);\n \n+    bool WriteKeyManKey(const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedKeyManKey(const CPubKey& pubkey, const std::vector<unsigned char>& ckey);\n+\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);"
      }
    ]
  },
  {
    "sha": "7087cd069d8f711f91e9387971f85de71eb46de6",
    "node_id": "C_kwDOABII59oAKDcwODdjZDA2OWQ4ZjcxMWY5MWU5Mzg3OTcxZjg1ZGU3MWViNDZkZTY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T21:03:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "walletdb: Allow duplicate descriptor keys\n\nIf a descriptor (crypted) key is being written and one already exists,\nmake sure that the one being written and the one already on disk\nmatch each other.",
      "tree": {
        "sha": "5cc663ac9ddd928cb1aed4d64d2886759324d330",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cc663ac9ddd928cb1aed4d64d2886759324d330"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7087cd069d8f711f91e9387971f85de71eb46de6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7087cd069d8f711f91e9387971f85de71eb46de6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7087cd069d8f711f91e9387971f85de71eb46de6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7087cd069d8f711f91e9387971f85de71eb46de6/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2051d0441631a279bdeb0b1e138a48f92e0c46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2051d0441631a279bdeb0b1e138a48f92e0c46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2051d0441631a279bdeb0b1e138a48f92e0c46d"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 19,
      "deletions": 3
    },
    "files": [
      {
        "sha": "40fb7fae78eb17cead819b2526c55e4e3aa33494",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 3,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7087cd069d8f711f91e9387971f85de71eb46de6/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7087cd069d8f711f91e9387971f85de71eb46de6/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=7087cd069d8f711f91e9387971f85de71eb46de6",
        "patch": "@@ -229,13 +229,29 @@ bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubk\n     key.insert(key.end(), pubkey.begin(), pubkey.end());\n     key.insert(key.end(), privkey.begin(), privkey.end());\n \n-    return WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)), std::make_pair(privkey, Hash(key)), false);\n+    const auto rec_key = std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey));\n+    const auto rec_val = std::make_pair(privkey, Hash(key));\n+    if (!WriteIC(rec_key, rec_val, false)) {\n+        // It may already exist, make sure they are the same\n+        std::pair<CPrivKey, uint256> val;\n+        if (!m_batch->Read(rec_key, val)) {\n+            return false;\n+        }\n+        return rec_val == val;\n+    }\n+    return true;\n }\n \n bool WalletBatch::WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret)\n {\n-    if (!WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORCKEY, std::make_pair(desc_id, pubkey)), secret, false)) {\n-        return false;\n+    const auto key = std::make_pair(DBKeys::WALLETDESCRIPTORCKEY, std::make_pair(desc_id, pubkey));\n+    if (!WriteIC(key, secret, false)) {\n+        // It may already exist, make sure they are the same\n+        std::vector<unsigned char> val;\n+        if (!m_batch->Read(key, val)) {\n+            return false;\n+        }\n+        return secret == val;\n     }\n     EraseIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)));\n     return true;"
      }
    ]
  },
  {
    "sha": "cb0106caeac8f926a4dfcda6d854c16286c18b20",
    "node_id": "C_kwDOABII59oAKGNiMDEwNmNhZWFjOGY5MjZhNGRmY2RhNmQ4NTRjMTYyODZjMThiMjA",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T23:16:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "descspkm: Track CKeyIDs of our keys\n\nWhen DescriptorScriptPubKeyMan no longer manages its keys, it still\nneeds to know the IDs of its keys.",
      "tree": {
        "sha": "927dff03d8de36f0f641785f98cce0607b0e4184",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/927dff03d8de36f0f641785f98cce0607b0e4184"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb0106caeac8f926a4dfcda6d854c16286c18b20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb0106caeac8f926a4dfcda6d854c16286c18b20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb0106caeac8f926a4dfcda6d854c16286c18b20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb0106caeac8f926a4dfcda6d854c16286c18b20/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7087cd069d8f711f91e9387971f85de71eb46de6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7087cd069d8f711f91e9387971f85de71eb46de6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7087cd069d8f711f91e9387971f85de71eb46de6"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0134c823154d30cef2e3cf3c29aaf315ecbcbf4a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb0106caeac8f926a4dfcda6d854c16286c18b20/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb0106caeac8f926a4dfcda6d854c16286c18b20/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=cb0106caeac8f926a4dfcda6d854c16286c18b20",
        "patch": "@@ -2212,6 +2212,7 @@ bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n {\n     LOCK(cs_desc_man);\n     m_map_keys[key_id] = key;\n+    m_set_stored_keys.insert(key_id);\n     return true;\n }\n \n@@ -2223,6 +2224,7 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     }\n \n     m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n+    m_set_stored_keys.insert(key_id);\n     return true;\n }\n "
      },
      {
        "sha": "e39c5449e95698a4316ecfa6348957c83403e245",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb0106caeac8f926a4dfcda6d854c16286c18b20/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb0106caeac8f926a4dfcda6d854c16286c18b20/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=cb0106caeac8f926a4dfcda6d854c16286c18b20",
        "patch": "@@ -494,6 +494,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using KeyMap = std::map<CKeyID, CKey>;\n \n+    std::set<CKeyID> m_set_stored_keys GUARDED_BY(cs_desc_man); // Set of keys this DescriptorSPKM needs\n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;"
      }
    ]
  },
  {
    "sha": "f9214c57d3285498d8bc9010a4c83507d4078031",
    "node_id": "C_kwDOABII59oAKGY5MjE0YzU3ZDMyODU0OThkOGJjOTAxMGE0YzgzNTA3ZDQwNzgwMzE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-26T19:03:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "wallet: Add KeyManager class",
      "tree": {
        "sha": "8285b7ba47e9c846118f3e23c9576155dbe307e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8285b7ba47e9c846118f3e23c9576155dbe307e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9214c57d3285498d8bc9010a4c83507d4078031",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9214c57d3285498d8bc9010a4c83507d4078031",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9214c57d3285498d8bc9010a4c83507d4078031",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9214c57d3285498d8bc9010a4c83507d4078031/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb0106caeac8f926a4dfcda6d854c16286c18b20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb0106caeac8f926a4dfcda6d854c16286c18b20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb0106caeac8f926a4dfcda6d854c16286c18b20"
      }
    ],
    "stats": {
      "total": 307,
      "additions": 307,
      "deletions": 0
    },
    "files": [
      {
        "sha": "30f2a91630975e47b9cb13d45cb9cbd67e9d3425",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9214c57d3285498d8bc9010a4c83507d4078031/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9214c57d3285498d8bc9010a4c83507d4078031/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f9214c57d3285498d8bc9010a4c83507d4078031",
        "patch": "@@ -278,6 +278,7 @@ BITCOIN_CORE_H = \\\n   wallet/feebumper.h \\\n   wallet/fees.h \\\n   wallet/ismine.h \\\n+  wallet/keyman.h \\\n   wallet/load.h \\\n   wallet/receive.h \\\n   wallet/rpcwallet.h \\\n@@ -405,6 +406,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/feebumper.cpp \\\n   wallet/fees.cpp \\\n   wallet/interfaces.cpp \\\n+  wallet/keyman.cpp \\\n   wallet/load.cpp \\\n   wallet/receive.cpp \\\n   wallet/rpcdump.cpp \\"
      },
      {
        "sha": "8f5954d099d73c99b3fc3aae0bb03cd9e160951e",
        "filename": "src/wallet/keyman.cpp",
        "status": "added",
        "additions": 241,
        "deletions": 0,
        "changes": 241,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9214c57d3285498d8bc9010a4c83507d4078031/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9214c57d3285498d8bc9010a4c83507d4078031/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=f9214c57d3285498d8bc9010a4c83507d4078031",
        "patch": "@@ -0,0 +1,241 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <key.h>\n+#include <pubkey.h>\n+#include <random.h>\n+#include <wallet/crypter.h>\n+#include <wallet/keyman.h>\n+#include <wallet/walletdb.h>\n+\n+void KeyManager::GenerateAndSetHDKey()\n+{\n+    LOCK(cs_keyman);\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey seed_pub = key.GetPubKey();\n+    assert(key.VerifyPubKey(seed_pub));\n+\n+    CExtKey master_key;\n+    master_key.SetSeed(key);\n+    CExtPubKey master_xpub = master_key.Neuter();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    AddHDKey(batch, master_key, master_xpub);\n+    SetActiveHDKey(master_xpub);\n+}\n+\n+void KeyManager::LoadActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    m_active_xpub = extpub;\n+}\n+\n+void KeyManager::SetActiveHDKey(const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    LoadActiveHDKey(extpub);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    batch.WriteActiveHDKey(extpub);\n+}\n+\n+std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+\n+    CKey key;\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return std::nullopt;\n+        }\n+        const auto& it = m_map_crypted_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_crypted_keys.end());\n+        const auto& [pubkey, ckey] = it->second;\n+\n+        if (!DecryptKey(m_storage.GetEncryptionKey(), ckey, pubkey, key)) {\n+            return std::nullopt;\n+        }\n+    } else {\n+        const auto& it = m_map_keys.find(m_active_xpub.pubkey.GetID());\n+        assert(it != m_map_keys.end());\n+        key = it->second;\n+    }\n+    assert(key.IsValid());\n+\n+    CExtKey master_key;\n+    master_key.nDepth = m_active_xpub.nDepth;\n+    std::copy(m_active_xpub.vchFingerprint, m_active_xpub.vchFingerprint + sizeof(master_key.vchFingerprint), master_key.vchFingerprint);\n+    master_key.nChild = m_active_xpub.nChild;\n+    master_key.chaincode = m_active_xpub.chaincode;\n+    master_key.key = key;\n+    return master_key;\n+}\n+\n+bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+    assert(!m_storage.HasEncryptionKeys());\n+\n+    const CKeyID& id = pubkey.GetID();\n+    if (m_map_keys.find(id) != m_map_keys.end()) {\n+        return true;\n+    }\n+\n+    m_map_keys[id] = key;\n+    return batch.WriteKeyManKey(pubkey, key.GetPrivKey());\n+}\n+\n+std::vector<unsigned char> KeyManager::AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n+{\n+    AssertLockHeld(cs_keyman);\n+\n+    assert(m_storage.HasEncryptionKeys());\n+    if (m_storage.IsLocked()) {\n+        return {};\n+    }\n+\n+    const CKeyID& id = pubkey.GetID();\n+    const auto& it = m_map_crypted_keys.find(id);\n+    if (it != m_map_crypted_keys.end()) {\n+        return it->second.second;\n+    }\n+\n+    std::vector<unsigned char> crypted_secret;\n+    CKeyingMaterial secret(key.begin(), key.end());\n+    if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+        return {};\n+    }\n+\n+    m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+\n+    if (!batch.WriteCryptedKeyManKey(pubkey, crypted_secret)) {\n+        return {};\n+    }\n+\n+    return crypted_secret;\n+}\n+\n+bool KeyManager::AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey)\n+{\n+    LOCK(cs_keyman);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, key, pubkey);\n+        if (ckey.empty()) {\n+            return false;\n+        }\n+        return batch.WriteCryptedDescriptorKey(desc_id, pubkey, ckey);\n+    } else {\n+        return AddKeyInner(batch, key, pubkey) && batch.WriteDescriptorKey(desc_id, pubkey, key.GetPrivKey());\n+    }\n+}\n+\n+bool KeyManager::AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub)\n+{\n+    LOCK(cs_keyman);\n+    const CKeyID& id = extpub.pubkey.GetID();\n+    m_map_xpubs[id] = extpub;\n+    batch.WriteHDPubKey(extpub);\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        std::vector<unsigned char> ckey = AddCryptedKeyInner(batch, extkey.key, extpub.pubkey);\n+        return !ckey.empty();\n+    } else {\n+        return AddKeyInner(batch, extkey.key, extpub.pubkey);\n+    }\n+}\n+\n+void KeyManager::LoadKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_keyman);\n+    m_map_keys[key_id] = key;\n+}\n+\n+bool KeyManager::LoadCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& ckey)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, ckey);\n+    return true;\n+}\n+\n+void KeyManager::LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub)\n+{\n+    LOCK(cs_keyman);\n+    m_map_xpubs[key_id] = xpub;\n+}\n+\n+bool KeyManager::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    LOCK(cs_keyman);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey& pubkey = mi.second.first;\n+        const std::vector<unsigned char>& crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n+}\n+\n+bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    LOCK(cs_keyman);\n+\n+    // Nothing to encrypt\n+    if (m_map_keys.empty()) {\n+        return true;\n+    }\n+\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const auto& [id, key] : m_map_keys)\n+    {\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[id] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedKeyManKey(pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n+}\n+\n+const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> KeyManager::GetCryptedKey(const CKeyID& id) const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_map_crypted_keys.count(id) == 0) {\n+        return std::nullopt;\n+    }\n+    return m_map_crypted_keys.at(id);\n+}"
      },
      {
        "sha": "261326774099e162cb7c01e9426ffd87b88c963b",
        "filename": "src/wallet/keyman.h",
        "status": "added",
        "additions": 64,
        "deletions": 0,
        "changes": 64,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9214c57d3285498d8bc9010a4c83507d4078031/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9214c57d3285498d8bc9010a4c83507d4078031/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=f9214c57d3285498d8bc9010a4c83507d4078031",
        "patch": "@@ -0,0 +1,64 @@\n+// Copyright (c) 2021 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_KEYMAN_H\n+#define BITCOIN_WALLET_KEYMAN_H\n+\n+#include <sync.h>\n+#include <wallet/db.h>\n+#include <wallet/storage.h>\n+\n+#include <map>\n+#include <optional>\n+#include <set>\n+#include <vector>\n+\n+class CKey;\n+class CKeyID;\n+class CPubKey;\n+class WalletBatch;\n+\n+class KeyManager\n+{\n+//private:\n+public:\n+    // TODO: Everything up to cs_keyman need to be private, but we make them public so DescriptorScriptPubKeyMan can access these during the transition\n+    WalletStorage& m_storage;\n+\n+    std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, CExtPubKey> m_map_xpubs GUARDED_BY(cs_keyman);\n+    std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>> m_map_crypted_keys GUARDED_BY(cs_keyman);\n+\n+    bool m_decryption_thoroughly_checked = false;\n+\n+    CExtPubKey m_active_xpub GUARDED_BY(cs_keyman);\n+\n+    bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+//public:\n+    mutable RecursiveMutex cs_keyman;\n+\n+    KeyManager(WalletStorage& storage) : m_storage(storage) {}\n+    KeyManager() = delete;\n+\n+    void GenerateAndSetHDKey();\n+    std::optional<CExtKey> GetActiveHDKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    void SetActiveHDKey(const CExtPubKey& extpub);\n+    void LoadActiveHDKey(const CExtPubKey& extpub);\n+\n+    bool AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey);\n+    bool AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub);\n+\n+    const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> GetCryptedKey(const CKeyID& id) const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n+    void LoadKey(const CKeyID&, const CKey& key);\n+    bool LoadCryptedKey(const CKeyID&, const CPubKey& pubkey, const std::vector<unsigned char>& ckey);\n+    void LoadHDKey(const CKeyID& key_id, const CExtPubKey& xpub);\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys);\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch);\n+};\n+\n+#endif // BITCOIN_WALLET_KEYMAN_H"
      }
    ]
  },
  {
    "sha": "5f6e42296f2156ecf277c4247d6bd43cae020011",
    "node_id": "C_kwDOABII59oAKDVmNmU0MjI5NmYyMTU2ZWNmMjc3YzQyNDdkNmJkNDNjYWUwMjAwMTE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T19:15:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "descspkm: Add KeyManager to DescriptorScriptPubKeyMan and use for keys",
      "tree": {
        "sha": "8f4692faf7dd16358b7144aa6dc61f1b69288302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8f4692faf7dd16358b7144aa6dc61f1b69288302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5f6e42296f2156ecf277c4247d6bd43cae020011",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f6e42296f2156ecf277c4247d6bd43cae020011",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5f6e42296f2156ecf277c4247d6bd43cae020011",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f6e42296f2156ecf277c4247d6bd43cae020011/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9214c57d3285498d8bc9010a4c83507d4078031",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9214c57d3285498d8bc9010a4c83507d4078031",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9214c57d3285498d8bc9010a4c83507d4078031"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 46,
      "deletions": 75
    },
    "files": [
      {
        "sha": "c89409b99b0d2256b52e839b254ede7a3c467608",
        "filename": "src/wallet/keyman.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=5f6e42296f2156ecf277c4247d6bd43cae020011",
        "patch": "@@ -231,6 +231,28 @@ bool KeyManager::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n     return true;\n }\n \n+std::map<CKeyID, CKey> KeyManager::GetKeys() const\n+{\n+    AssertLockHeld(cs_keyman);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        std::map<CKeyID, CKey> keys;\n+        for (const auto& [id, key_pair] : m_map_crypted_keys) {\n+            const auto& [pubkey, crypted_secret] = key_pair;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[id] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n+bool KeyManager::HavePrivateKeys() const\n+{\n+    LOCK(cs_keyman);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+}\n+\n const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> KeyManager::GetCryptedKey(const CKeyID& id) const\n {\n     AssertLockHeld(cs_keyman);"
      },
      {
        "sha": "1eb4d2f57c917305c49761bd2c2da1f6ade9ad68",
        "filename": "src/wallet/keyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=5f6e42296f2156ecf277c4247d6bd43cae020011",
        "patch": "@@ -51,6 +51,8 @@ class KeyManager\n     bool AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey);\n     bool AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub);\n \n+    bool HavePrivateKeys() const;\n+    std::map<CKeyID, CKey> GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n     const std::optional<std::pair<CPubKey, std::vector<unsigned char>>> GetCryptedKey(const CKeyID& id) const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n \n     void LoadKey(const CKeyID&, const CKey& key);"
      },
      {
        "sha": "3106de09e06991e4257177156d36fb270d18a6df",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 71,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=5f6e42296f2156ecf277c4247d6bd43cae020011",
        "patch": "@@ -1668,44 +1668,17 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_map_keys.empty()) {\n-        return false;\n-    }\n-\n-    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n-    bool keyFail = false;\n-    for (const auto& mi : m_map_crypted_keys) {\n-        const CPubKey &pubkey = mi.second.first;\n-        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n-        CKey key;\n-        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n-            keyFail = true;\n-            break;\n-        }\n-        keyPass = true;\n-        if (m_decryption_thoroughly_checked)\n-            break;\n-    }\n-    if (keyPass && keyFail) {\n-        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n-        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n-    }\n-    if (keyFail || (!keyPass && !accept_no_keys)) {\n-        return false;\n-    }\n-    m_decryption_thoroughly_checked = true;\n-    return true;\n+    return m_keyman.CheckDecryptionKey(master_key, accept_no_keys);\n }\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n     LOCK(cs_desc_man);\n-    if (!m_map_crypted_keys.empty()) {\n+    if (!m_keyman.m_map_crypted_keys.empty()) {\n         return false;\n     }\n \n-    for (const KeyMap::value_type& key_in : m_map_keys)\n+    for (const KeyMap::value_type& key_in : m_keyman.m_map_keys)\n     {\n         const CKey &key = key_in.second;\n         CPubKey pubkey = key.GetPubKey();\n@@ -1714,10 +1687,10 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n         if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n             return false;\n         }\n-        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        m_keyman.m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n         batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n     }\n-    m_map_keys.clear();\n+    m_keyman.m_map_keys.clear();\n     return true;\n }\n \n@@ -1745,7 +1718,7 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n     AssertLockHeld(cs_desc_man);\n     if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n         KeyMap keys;\n-        for (auto key_pair : m_map_crypted_keys) {\n+        for (auto key_pair : m_keyman.m_map_crypted_keys) {\n             const CPubKey& pubkey = key_pair.second.first;\n             const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n             CKey key;\n@@ -1754,7 +1727,7 @@ std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n         }\n         return keys;\n     }\n-    return m_map_keys;\n+    return m_keyman.m_map_keys;\n }\n \n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n@@ -1837,41 +1810,12 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n {\n-    LOCK(cs_desc_man);\n     WalletBatch batch(m_storage.GetDatabase());\n-    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+    if (!m_keyman.AddDescriptorKey(batch, GetID(), key, pubkey)) {\n         throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n     }\n-}\n-\n-bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n-{\n-    AssertLockHeld(cs_desc_man);\n-    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n-\n-    // Check if provided key already exists\n-    if (m_map_keys.find(pubkey.GetID()) != m_map_keys.end() ||\n-        m_map_crypted_keys.find(pubkey.GetID()) != m_map_crypted_keys.end()) {\n-        return true;\n-    }\n-\n-    if (m_storage.HasEncryptionKeys()) {\n-        if (m_storage.IsLocked()) {\n-            return false;\n-        }\n-\n-        std::vector<unsigned char> crypted_secret;\n-        CKeyingMaterial secret(key.begin(), key.end());\n-        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n-            return false;\n-        }\n-\n-        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n-        return batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n-    } else {\n-        m_map_keys[pubkey.GetID()] = key;\n-        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n-    }\n+    LOCK(cs_desc_man);\n+    m_set_stored_keys.insert(pubkey.GetID());\n }\n \n bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n@@ -1934,9 +1878,10 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n \n     // Store the master private key, and descriptor\n     WalletBatch batch(m_storage.GetDatabase());\n-    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+    if (!m_keyman.AddDescriptorKey(batch, GetID(), master_key.key, master_key.key.GetPubKey())) {\n         throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n     }\n+    m_set_stored_keys.insert(master_key.key.GetPubKey().GetID());\n     if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n         throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n     }\n@@ -1967,7 +1912,7 @@ bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n {\n     LOCK(cs_desc_man);\n-    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n+    return m_keyman.m_map_keys.size() > 0 || m_keyman.m_map_crypted_keys.size() > 0;\n }\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n@@ -2211,19 +2156,19 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n {\n     LOCK(cs_desc_man);\n-    m_map_keys[key_id] = key;\n+    m_keyman.m_map_keys[key_id] = key;\n     m_set_stored_keys.insert(key_id);\n     return true;\n }\n \n bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n {\n     LOCK(cs_desc_man);\n-    if (!m_map_keys.empty()) {\n+    if (!m_keyman.m_map_keys.empty()) {\n         return false;\n     }\n \n-    m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n+    m_keyman.m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n     m_set_stored_keys.insert(key_id);\n     return true;\n }"
      },
      {
        "sha": "5571a77473106ef2520ac771ccd51334a4a99436",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5f6e42296f2156ecf277c4247d6bd43cae020011/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=5f6e42296f2156ecf277c4247d6bd43cae020011",
        "patch": "@@ -14,6 +14,7 @@\n #include <util/time.h>\n #include <wallet/crypter.h>\n #include <wallet/ismine.h>\n+#include <wallet/keyman.h>\n #include <wallet/storage.h>\n #include <wallet/walletdb.h>\n #include <wallet/walletutil.h>\n@@ -499,9 +500,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;\n \n-    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n-    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n-\n     //! keeps track of whether Unlock has run a thorough check before\n     bool m_decryption_thoroughly_checked = false;\n \n@@ -516,16 +514,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     // Fetch the SigningProvider for a given index and optionally include private keys. Called by the above functions.\n     std::unique_ptr<FlatSigningProvider> GetSigningProvider(int32_t index, bool include_private = false) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n \n+    KeyManager m_keyman;\n+\n protected:\n   WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n \n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),\n+            m_keyman(storage),\n             m_wallet_descriptor(descriptor)\n         {}\n     DescriptorScriptPubKeyMan(WalletStorage& storage)\n-        :   ScriptPubKeyMan(storage)\n+        :   ScriptPubKeyMan(storage),\n+            m_keyman(storage)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;"
      }
    ]
  },
  {
    "sha": "654b53c425e133dd60684ba4da9a4059c438a31d",
    "node_id": "C_kwDOABII59oAKDY1NGI1M2M0MjVlMTMzZGQ2MDY4NGJhNGRhOWE0MDU5YzQzOGEzMWQ",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T19:55:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "descspkm: Encrypt with KeyManager instead of direct map access",
      "tree": {
        "sha": "2ed940335682f6e4bfa527c4b60d8e13d6bc19b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ed940335682f6e4bfa527c4b60d8e13d6bc19b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/654b53c425e133dd60684ba4da9a4059c438a31d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/654b53c425e133dd60684ba4da9a4059c438a31d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/654b53c425e133dd60684ba4da9a4059c438a31d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/654b53c425e133dd60684ba4da9a4059c438a31d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f6e42296f2156ecf277c4247d6bd43cae020011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f6e42296f2156ecf277c4247d6bd43cae020011",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f6e42296f2156ecf277c4247d6bd43cae020011"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 9,
      "deletions": 14
    },
    "files": [
      {
        "sha": "5428e990ad0d2bff7bb6ffb32b90bd47d3212426",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/654b53c425e133dd60684ba4da9a4059c438a31d/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/654b53c425e133dd60684ba4da9a4059c438a31d/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=654b53c425e133dd60684ba4da9a4059c438a31d",
        "patch": "@@ -1673,24 +1673,19 @@ bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_keyman.m_map_crypted_keys.empty()) {\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n+\n+    if (!m_keyman.Encrypt(master_key, batch)) {\n         return false;\n     }\n \n-    for (const KeyMap::value_type& key_in : m_keyman.m_map_keys)\n-    {\n-        const CKey &key = key_in.second;\n-        CPubKey pubkey = key.GetPubKey();\n-        CKeyingMaterial secret(key.begin(), key.end());\n-        std::vector<unsigned char> crypted_secret;\n-        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n-            return false;\n-        }\n-        m_keyman.m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n-        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    for (const CKeyID& id : m_set_stored_keys) {\n+        const auto& ckey_pair = m_keyman.GetCryptedKey(id);\n+        assert(ckey_pair != std::nullopt);\n+        const auto& [pubkey, ckey] = *ckey_pair;\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, ckey);\n     }\n-    m_keyman.m_map_keys.clear();\n+\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "02b1ec432fdfaab097254d520b1332421af0f26a",
    "node_id": "C_kwDOABII59oAKDAyYjFlYzQzMmZkZmFhYjA5NzI1NGQ1MjBiMTMzMjQyMWFmMGYyNmE",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-27T23:55:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-12T19:21:00Z"
      },
      "message": "descspkm: Use KeyManager::LoadKey and LoadCryptedKey when loading",
      "tree": {
        "sha": "47c94453126ec0a3f8820e0ac25ea05e20887a08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47c94453126ec0a3f8820e0ac25ea05e20887a08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02b1ec432fdfaab097254d520b1332421af0f26a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b1ec432fdfaab097254d520b1332421af0f26a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02b1ec432fdfaab097254d520b1332421af0f26a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b1ec432fdfaab097254d520b1332421af0f26a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "654b53c425e133dd60684ba4da9a4059c438a31d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/654b53c425e133dd60684ba4da9a4059c438a31d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/654b53c425e133dd60684ba4da9a4059c438a31d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 2,
      "deletions": 6
    },
    "files": [
      {
        "sha": "1b94e3c838b7d94fc4777dec073fdb1050ed2e34",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02b1ec432fdfaab097254d520b1332421af0f26a/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02b1ec432fdfaab097254d520b1332421af0f26a/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=02b1ec432fdfaab097254d520b1332421af0f26a",
        "patch": "@@ -2150,20 +2150,16 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n \n bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n {\n-    LOCK(cs_desc_man);\n-    m_keyman.m_map_keys[key_id] = key;\n+    m_keyman.LoadKey(key_id, key);\n     m_set_stored_keys.insert(key_id);\n     return true;\n }\n \n bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n {\n-    LOCK(cs_desc_man);\n-    if (!m_keyman.m_map_keys.empty()) {\n+    if (!m_keyman.LoadCryptedKey(key_id, pubkey, crypted_key)) {\n         return false;\n     }\n-\n-    m_keyman.m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n     m_set_stored_keys.insert(key_id);\n     return true;\n }"
      }
    ]
  },
  {
    "sha": "195e3132ad03a624df94e7c78d535fdd08fe38dc",
    "node_id": "C_kwDOABII59oAKDE5NWUzMTMyYWQwM2E2MjRkZjk0ZTdjNzhkNTM1ZmRkMDhmZTM4ZGM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:11:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "descspkm: Replace GetKeys with KeyManager::GetKeys",
      "tree": {
        "sha": "958b84033461218f3029e1ae760dcdd20e71efda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/958b84033461218f3029e1ae760dcdd20e71efda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/195e3132ad03a624df94e7c78d535fdd08fe38dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195e3132ad03a624df94e7c78d535fdd08fe38dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/195e3132ad03a624df94e7c78d535fdd08fe38dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195e3132ad03a624df94e7c78d535fdd08fe38dc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02b1ec432fdfaab097254d520b1332421af0f26a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02b1ec432fdfaab097254d520b1332421af0f26a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02b1ec432fdfaab097254d520b1332421af0f26a"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 53,
      "deletions": 68
    },
    "files": [
      {
        "sha": "978ea07b1c549f73aaa3b40810fedade502d16b7",
        "filename": "src/wallet/keyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195e3132ad03a624df94e7c78d535fdd08fe38dc/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195e3132ad03a624df94e7c78d535fdd08fe38dc/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=195e3132ad03a624df94e7c78d535fdd08fe38dc",
        "patch": "@@ -239,7 +239,8 @@ std::map<CKeyID, CKey> KeyManager::GetKeys() const\n         for (const auto& [id, key_pair] : m_map_crypted_keys) {\n             const auto& [pubkey, crypted_secret] = key_pair;\n             CKey key;\n-            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            bool ok = DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            assert(ok);\n             keys[id] = key;\n         }\n         return keys;"
      },
      {
        "sha": "b8c3ed49936151f571ed0608c24488379fb6753b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 65,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195e3132ad03a624df94e7c78d535fdd08fe38dc/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195e3132ad03a624df94e7c78d535fdd08fe38dc/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=195e3132ad03a624df94e7c78d535fdd08fe38dc",
        "patch": "@@ -1708,81 +1708,66 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n     NotifyCanGetAddressesChanged();\n }\n \n-std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n-{\n-    AssertLockHeld(cs_desc_man);\n-    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n-        KeyMap keys;\n-        for (auto key_pair : m_keyman.m_map_crypted_keys) {\n-            const CPubKey& pubkey = key_pair.second.first;\n-            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n-            CKey key;\n-            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n-            keys[pubkey.GetID()] = key;\n-        }\n-        return keys;\n-    }\n-    return m_keyman.m_map_keys;\n-}\n-\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    LOCK(cs_desc_man);\n     unsigned int target_size;\n     if (size > 0) {\n         target_size = size;\n     } else {\n         target_size = std::max(gArgs.GetIntArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n     }\n \n-    // Calculate the new range_end\n-    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+    {\n+        LOCK2(cs_desc_man, m_keyman.cs_keyman);\n+        // Calculate the new range_end\n+        int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n \n-    // If the descriptor is not ranged, we actually just want to fill the first cache item\n-    if (!m_wallet_descriptor.descriptor->IsRange()) {\n-        new_range_end = 1;\n-        m_wallet_descriptor.range_end = 1;\n-        m_wallet_descriptor.range_start = 0;\n-    }\n+        // If the descriptor is not ranged, we actually just want to fill the first cache item\n+        if (!m_wallet_descriptor.descriptor->IsRange()) {\n+            new_range_end = 1;\n+            m_wallet_descriptor.range_end = 1;\n+            m_wallet_descriptor.range_start = 0;\n+        }\n \n-    FlatSigningProvider provider;\n-    provider.keys = GetKeys();\n+        FlatSigningProvider provider;\n+        provider.keys = m_keyman.GetKeys();\n \n-    WalletBatch batch(m_storage.GetDatabase());\n-    uint256 id = GetID();\n-    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n-        FlatSigningProvider out_keys;\n-        std::vector<CScript> scripts_temp;\n-        DescriptorCache temp_cache;\n-        // Maybe we have a cached xpub and we can expand from the cache first\n-        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n-            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n-        }\n-        // Add all of the scriptPubKeys to the scriptPubKey set\n-        for (const CScript& script : scripts_temp) {\n-            m_map_script_pub_keys[script] = i;\n-        }\n-        for (const auto& pk_pair : out_keys.pubkeys) {\n-            const CPubKey& pubkey = pk_pair.second;\n-            if (m_map_pubkeys.count(pubkey) != 0) {\n-                // We don't need to give an error here.\n-                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n-                continue;\n+        WalletBatch batch(m_storage.GetDatabase());\n+        uint256 id = GetID();\n+        for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+            FlatSigningProvider out_keys;\n+            std::vector<CScript> scripts_temp;\n+            DescriptorCache temp_cache;\n+            // Maybe we have a cached xpub and we can expand from the cache first\n+            if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+                if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n             }\n-            m_map_pubkeys[pubkey] = i;\n-        }\n-        // Merge and write the cache\n-        DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n-        if (!batch.WriteDescriptorCacheItems(id, new_items)) {\n-            throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n+            // Add all of the scriptPubKeys to the scriptPubKey set\n+            for (const CScript& script : scripts_temp) {\n+                m_map_script_pub_keys[script] = i;\n+            }\n+            for (const auto& pk_pair : out_keys.pubkeys) {\n+                const CPubKey& pubkey = pk_pair.second;\n+                if (m_map_pubkeys.count(pubkey) != 0) {\n+                    // We don't need to give an error here.\n+                    // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                    continue;\n+                }\n+                m_map_pubkeys[pubkey] = i;\n+            }\n+            // Merge and write the cache\n+            DescriptorCache new_items = m_wallet_descriptor.cache.MergeAndDiff(temp_cache);\n+            if (!batch.WriteDescriptorCacheItems(id, new_items)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache items failed\");\n+            }\n+            m_max_cached_index++;\n         }\n-        m_max_cached_index++;\n-    }\n-    m_wallet_descriptor.range_end = new_range_end;\n-    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+        m_wallet_descriptor.range_end = new_range_end;\n+        batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n \n-    // By this point, the cache size should be the size of the entire range\n-    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+        // By this point, the cache size should be the size of the entire range\n+        assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+    }\n \n     NotifyCanGetAddressesChanged();\n     return true;\n@@ -1962,14 +1947,15 @@ std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvid\n std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(int32_t index, bool include_private) const\n {\n     AssertLockHeld(cs_desc_man);\n+    LOCK(m_keyman.cs_keyman);\n     // Get the scripts, keys, and key origins for this script\n     std::unique_ptr<FlatSigningProvider> out_keys = std::make_unique<FlatSigningProvider>();\n     std::vector<CScript> scripts_temp;\n     if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n \n     if (HavePrivateKeys() && include_private) {\n         FlatSigningProvider master_provider;\n-        master_provider.keys = GetKeys();\n+        master_provider.keys = m_keyman.GetKeys();\n         m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n     }\n \n@@ -2198,10 +2184,10 @@ const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n \n bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, const bool priv) const\n {\n-    LOCK(cs_desc_man);\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n \n     FlatSigningProvider provider;\n-    provider.keys = GetKeys();\n+    provider.keys = m_keyman.GetKeys();\n \n     if (priv) {\n         // For the private version, always return the master key to avoid\n@@ -2215,7 +2201,7 @@ bool DescriptorScriptPubKeyMan::GetDescriptorString(std::string& out, const bool\n \n void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n {\n-    LOCK(cs_desc_man);\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n     if (m_storage.IsLocked() || m_storage.IsWalletFlagSet(WALLET_FLAG_LAST_HARDENED_XPUB_CACHED)) {\n         return;\n     }\n@@ -2227,7 +2213,7 @@ void DescriptorScriptPubKeyMan::UpgradeDescriptorCache()\n \n     // Expand the descriptor\n     FlatSigningProvider provider;\n-    provider.keys = GetKeys();\n+    provider.keys = m_keyman.GetKeys();\n     FlatSigningProvider out_keys;\n     std::vector<CScript> scripts_temp;\n     DescriptorCache temp_cache;"
      },
      {
        "sha": "d57766ec595e649482d9557cf59a54a705d13f83",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/195e3132ad03a624df94e7c78d535fdd08fe38dc/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/195e3132ad03a624df94e7c78d535fdd08fe38dc/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=195e3132ad03a624df94e7c78d535fdd08fe38dc",
        "patch": "@@ -505,8 +505,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n \n-    KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n-\n     // Fetch the SigningProvider for the given script and optionally include private keys\n     std::unique_ptr<FlatSigningProvider> GetSigningProvider(const CScript& script, bool include_private = false) const;\n     // Fetch the SigningProvider for the given pubkey and always include private keys. This should only be called by signing code."
      }
    ]
  },
  {
    "sha": "853dee8c6a0378c3543477523bf617c33ab41006",
    "node_id": "C_kwDOABII59oAKDg1M2RlZThjNmEwMzc4YzM1NDM0Nzc1MjNiZjYxN2MzM2FiNDEwMDY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:13:28Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "descspkm: Replace HavePrivateKeys with KeyManager::HavePrivateKeys()",
      "tree": {
        "sha": "38255d348a69cedf771cc91e000ec928dadd7ce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38255d348a69cedf771cc91e000ec928dadd7ce1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/853dee8c6a0378c3543477523bf617c33ab41006",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/853dee8c6a0378c3543477523bf617c33ab41006",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/853dee8c6a0378c3543477523bf617c33ab41006",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/853dee8c6a0378c3543477523bf617c33ab41006/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "195e3132ad03a624df94e7c78d535fdd08fe38dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/195e3132ad03a624df94e7c78d535fdd08fe38dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/195e3132ad03a624df94e7c78d535fdd08fe38dc"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "caa57559bceaa01c9cafc99e41fc973126fb4d0c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/853dee8c6a0378c3543477523bf617c33ab41006/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/853dee8c6a0378c3543477523bf617c33ab41006/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=853dee8c6a0378c3543477523bf617c33ab41006",
        "patch": "@@ -1891,8 +1891,7 @@ bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n \n bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n {\n-    LOCK(cs_desc_man);\n-    return m_keyman.m_map_keys.size() > 0 || m_keyman.m_map_crypted_keys.size() > 0;\n+    return m_keyman.HavePrivateKeys();\n }\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const"
      }
    ]
  },
  {
    "sha": "898c49f46ac56cdc1c25f6f60fad80f0ff2d082e",
    "node_id": "C_kwDOABII59oAKDg5OGM0OWY0NmFjNTZjZGMxYzI1ZjZmNjBmYWQ4MGYwZmYyZDA4MmU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T17:14:22Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "keyman: Make some members private",
      "tree": {
        "sha": "8cf083494f522c087612872ea4e47a0952351983",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8cf083494f522c087612872ea4e47a0952351983"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "853dee8c6a0378c3543477523bf617c33ab41006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/853dee8c6a0378c3543477523bf617c33ab41006",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/853dee8c6a0378c3543477523bf617c33ab41006"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "cdebe232b85cdfa04356d236715dfaba14184bb9",
        "filename": "src/wallet/keyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=898c49f46ac56cdc1c25f6f60fad80f0ff2d082e",
        "patch": "@@ -21,9 +21,7 @@ class WalletBatch;\n \n class KeyManager\n {\n-//private:\n-public:\n-    // TODO: Everything up to cs_keyman need to be private, but we make them public so DescriptorScriptPubKeyMan can access these during the transition\n+private:\n     WalletStorage& m_storage;\n \n     std::map<CKeyID, CKey> m_map_keys GUARDED_BY(cs_keyman);\n@@ -37,7 +35,7 @@ class KeyManager\n     bool AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n     std::vector<unsigned char> AddCryptedKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n \n-//public:\n+public:\n     mutable RecursiveMutex cs_keyman;\n \n     KeyManager(WalletStorage& storage) : m_storage(storage) {}"
      }
    ]
  },
  {
    "sha": "b0a50caa7122ef0fb8a329ba12574289c1ea665b",
    "node_id": "C_kwDOABII59oAKGIwYTUwY2FhNzEyMmVmMGZiOGEzMjliYTEyNTc0Mjg5YzFlYTY2NWI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-28T18:37:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "wallet: Have KeyManager in CWallet rather than DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "4cae21473f6f27ea9eb07c9ead021e7311190b77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cae21473f6f27ea9eb07c9ead021e7311190b77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0a50caa7122ef0fb8a329ba12574289c1ea665b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a50caa7122ef0fb8a329ba12574289c1ea665b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0a50caa7122ef0fb8a329ba12574289c1ea665b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a50caa7122ef0fb8a329ba12574289c1ea665b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "898c49f46ac56cdc1c25f6f60fad80f0ff2d082e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/898c49f46ac56cdc1c25f6f60fad80f0ff2d082e"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 18,
      "deletions": 15
    },
    "files": [
      {
        "sha": "0b8fdae3e533f2f5380d0537211f3bf897517e43",
        "filename": "src/wallet/external_signer_scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/external_signer_scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/external_signer_scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/external_signer_scriptpubkeyman.h?ref=b0a50caa7122ef0fb8a329ba12574289c1ea665b",
        "patch": "@@ -12,11 +12,11 @@\n class ExternalSignerScriptPubKeyMan : public DescriptorScriptPubKeyMan\n {\n   public:\n-  ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n-      :   DescriptorScriptPubKeyMan(storage, descriptor)\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor, KeyManager& keyman)\n+      :   DescriptorScriptPubKeyMan(storage, descriptor, keyman)\n       {}\n-  ExternalSignerScriptPubKeyMan(WalletStorage& storage)\n-      :   DescriptorScriptPubKeyMan(storage)\n+  ExternalSignerScriptPubKeyMan(WalletStorage& storage, KeyManager& keyman)\n+      :   DescriptorScriptPubKeyMan(storage, keyman)\n       {}\n \n   /** Provide a descriptor at setup time"
      },
      {
        "sha": "11ff5e44bb0eb19d93c5dc68475e24f16c1b04b8",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b0a50caa7122ef0fb8a329ba12574289c1ea665b",
        "patch": "@@ -512,20 +512,20 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     // Fetch the SigningProvider for a given index and optionally include private keys. Called by the above functions.\n     std::unique_ptr<FlatSigningProvider> GetSigningProvider(int32_t index, bool include_private = false) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n \n-    KeyManager m_keyman;\n+    KeyManager& m_keyman;\n \n protected:\n   WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n \n public:\n-    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor, KeyManager& keyman)\n         :   ScriptPubKeyMan(storage),\n-            m_keyman(storage),\n+            m_keyman(keyman),\n             m_wallet_descriptor(descriptor)\n         {}\n-    DescriptorScriptPubKeyMan(WalletStorage& storage)\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, KeyManager& keyman)\n         :   ScriptPubKeyMan(storage),\n-            m_keyman(storage)\n+            m_keyman(keyman)\n         {}\n \n     mutable RecursiveMutex cs_desc_man;"
      },
      {
        "sha": "3eac96af729b76c209a0e21bc43d9293b0161f26",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b0a50caa7122ef0fb8a329ba12574289c1ea665b",
        "patch": "@@ -3139,10 +3139,10 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n {\n     if (IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n-        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc));\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, desc, m_keyman));\n         m_spk_managers[id] = std::move(spk_manager);\n     } else {\n-        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc, m_keyman));\n         m_spk_managers[id] = std::move(spk_manager);\n     }\n }\n@@ -3169,7 +3169,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     // TODO: Setup taproot (bech32m) descriptors by default\n                     continue;\n                 }\n-                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this));\n+                auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, m_keyman));\n                 if (IsCrypted()) {\n                     if (IsLocked()) {\n                         throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n@@ -3204,7 +3204,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                     continue;\n                 }\n                 OutputType t =  *desc->GetOutputType();\n-                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this));\n+                auto spk_manager = std::unique_ptr<ExternalSignerScriptPubKeyMan>(new ExternalSignerScriptPubKeyMan(*this, m_keyman));\n                 spk_manager->SetupDescriptor(std::move(desc));\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n@@ -3296,7 +3296,7 @@ ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const Flat\n         WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n         spk_man->UpdateWalletDescriptor(desc);\n     } else {\n-        auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+        auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc, m_keyman));\n         spk_man = new_spk_man.get();\n \n         // Save the descriptor to memory"
      },
      {
        "sha": "0aaea74403eab0198761adce107193ccb7434213",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0a50caa7122ef0fb8a329ba12574289c1ea665b/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b0a50caa7122ef0fb8a329ba12574289c1ea665b",
        "patch": "@@ -338,6 +338,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     static bool AttachChain(const std::shared_ptr<CWallet>& wallet, interfaces::Chain& chain, const bool rescan_required, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n+    KeyManager m_keyman;\n+\n public:\n     /**\n      * Main wallet lock.\n@@ -363,7 +365,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     CWallet(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database)\n         : m_chain(chain),\n           m_name(name),\n-          m_database(std::move(database))\n+          m_database(std::move(database)),\n+          m_keyman(*this)\n     {\n     }\n "
      }
    ]
  },
  {
    "sha": "087319b5b183c92b7836b7d2c90a31247c600632",
    "node_id": "C_kwDOABII59oAKDA4NzMxOWI1YjE4M2M5MmI3ODM2YjdkMmM5MGEzMTI0N2M2MDA2MzI",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T16:43:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "walletdb: Load keys into KeyManager directly",
      "tree": {
        "sha": "3f478c6812763da7373f0fc26f8e5455edfeb3a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3f478c6812763da7373f0fc26f8e5455edfeb3a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/087319b5b183c92b7836b7d2c90a31247c600632",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087319b5b183c92b7836b7d2c90a31247c600632",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/087319b5b183c92b7836b7d2c90a31247c600632",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087319b5b183c92b7836b7d2c90a31247c600632/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b0a50caa7122ef0fb8a329ba12574289c1ea665b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0a50caa7122ef0fb8a329ba12574289c1ea665b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0a50caa7122ef0fb8a329ba12574289c1ea665b"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f1b203c18fd784e37cf3584889ba2e4a19277496",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087319b5b183c92b7836b7d2c90a31247c600632/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087319b5b183c92b7836b7d2c90a31247c600632/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=087319b5b183c92b7836b7d2c90a31247c600632",
        "patch": "@@ -881,6 +881,8 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n     ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label, bool internal) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+\n+    KeyManager& GetKeyManager() { return m_keyman; }\n };\n \n /**"
      },
      {
        "sha": "71b38ee04d7b021cb6b2ed259b044daae46d15d6",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/087319b5b183c92b7836b7d2c90a31247c600632/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/087319b5b183c92b7836b7d2c90a31247c600632/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=087319b5b183c92b7836b7d2c90a31247c600632",
        "patch": "@@ -808,6 +808,66 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> hash;\n             ssKey >> n;\n             pwallet->LockCoin(COutPoint(hash, n));\n+        } else if (strType == DBKeys::ACTIVEHDKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadActiveHDKey(extpub);\n+        } else if (strType == DBKeys::HDPUBKEY) {\n+            CExtPubKey extpub;\n+            std::vector<unsigned char> xpub(BIP32_EXTKEY_SIZE);\n+            ssKey >> xpub;\n+            extpub.Decode(xpub.data());\n+            pwallet->GetKeyManager().LoadHDKey(extpub.pubkey.GetID(), extpub);\n+        } else if (strType == DBKeys::KEYMAN_KEY) {\n+            CPubKey pubkey;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            wss.nKeys++;\n+            ssValue >> pkey;\n+            ssValue >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash) != hash)\n+            {\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                return false;\n+            }\n+\n+            if (!key.Load(pkey, pubkey, true))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            pwallet->GetKeyManager().LoadKey(pubkey.GetID(), key);\n+        } else if (strType == DBKeys::KEYMAN_CKEY) {\n+            CPubKey pubkey;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            std::vector<unsigned char> privkey;\n+            ssValue >> privkey;\n+            wss.nCKeys++;\n+\n+            pwallet->GetKeyManager().LoadCryptedKey(pubkey.GetID(), pubkey, privkey);\n+            wss.fIsEncrypted = true;\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS &&"
      }
    ]
  },
  {
    "sha": "9a6022967b76ba46eff7cbd1c28296d69e569f6f",
    "node_id": "C_kwDOABII59oAKDlhNjAyMjk2N2I3NmJhNDZlZmY3Y2JkMWMyODI5NmQ2OWU1NjlmNmY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T17:48:00Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "wallet: Add flag for using KeyManager\n\nKeyManager will be a backwards compatible background upgrade to\ndescriptor wallets. A flag indicating that the upgrade has occurred is\nadded so that the upgrade (not yet implemented) will only happen once.",
      "tree": {
        "sha": "e84dbf9bd1a58e9d0ca1327b61d8211199330594",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e84dbf9bd1a58e9d0ca1327b61d8211199330594"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9a6022967b76ba46eff7cbd1c28296d69e569f6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a6022967b76ba46eff7cbd1c28296d69e569f6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9a6022967b76ba46eff7cbd1c28296d69e569f6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a6022967b76ba46eff7cbd1c28296d69e569f6f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "087319b5b183c92b7836b7d2c90a31247c600632",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/087319b5b183c92b7836b7d2c90a31247c600632",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/087319b5b183c92b7836b7d2c90a31247c600632"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 11,
      "deletions": 2
    },
    "files": [
      {
        "sha": "86930af408b3763700bcdaef242b1a6f03bfc88b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a6022967b76ba46eff7cbd1c28296d69e569f6f/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a6022967b76ba46eff7cbd1c28296d69e569f6f/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9a6022967b76ba46eff7cbd1c28296d69e569f6f",
        "patch": "@@ -785,7 +785,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n                 strErr = \"Error reading wallet database: CPrivKey corrupt\";\n                 return false;\n             }\n-            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+                wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n+            }\n         } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n             uint256 desc_id;\n             CPubKey pubkey;\n@@ -800,7 +802,9 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssValue >> privkey;\n             wss.nCKeys++;\n \n-            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+                wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            }\n             wss.fIsEncrypted = true;\n         } else if (strType == DBKeys::LOCKED_UTXO) {\n             uint256 hash;\n@@ -1088,6 +1092,8 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n+    // TODO: Upgrade to using KeyMan\n+\n     return result;\n }\n "
      },
      {
        "sha": "c8694a1669c4a9b39aa016e873c16a08f39bad3c",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9a6022967b76ba46eff7cbd1c28296d69e569f6f/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9a6022967b76ba46eff7cbd1c28296d69e569f6f/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=9a6022967b76ba46eff7cbd1c28296d69e569f6f",
        "patch": "@@ -46,6 +46,9 @@ enum WalletFlags : uint64_t {\n     // Indicates that the descriptor cache has been upgraded to cache last hardened xpubs\n     WALLET_FLAG_LAST_HARDENED_XPUB_CACHED = (1ULL << 2),\n \n+    // Indicate that the KeyManager should be used instead of DescSPKM keys\n+    WALLET_FLAG_USES_KEYMAN = (1ULL << 3),\n+\n     // will enforce the rule that the wallet can't contain any private keys (only watch-only/pubkeys)\n     WALLET_FLAG_DISABLE_PRIVATE_KEYS = (1ULL << 32),\n "
      }
    ]
  },
  {
    "sha": "b152c325507bd563e18d4054a1f5d0df5a6f4e65",
    "node_id": "C_kwDOABII59oAKGIxNTJjMzI1NTA3YmQ1NjNlMThkNDA1NGExZjVkMGRmNWE2ZjRlNjU",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-10-29T18:07:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "wallet: Use KeyManager to generate master key",
      "tree": {
        "sha": "4150e9fa777380a292fc75311483200406b805d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4150e9fa777380a292fc75311483200406b805d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b152c325507bd563e18d4054a1f5d0df5a6f4e65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b152c325507bd563e18d4054a1f5d0df5a6f4e65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b152c325507bd563e18d4054a1f5d0df5a6f4e65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b152c325507bd563e18d4054a1f5d0df5a6f4e65/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9a6022967b76ba46eff7cbd1c28296d69e569f6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9a6022967b76ba46eff7cbd1c28296d69e569f6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9a6022967b76ba46eff7cbd1c28296d69e569f6f"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "e9de05bb63624c29fc1306503aea48395d8bb7c7",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b152c325507bd563e18d4054a1f5d0df5a6f4e65/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b152c325507bd563e18d4054a1f5d0df5a6f4e65/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b152c325507bd563e18d4054a1f5d0df5a6f4e65",
        "patch": "@@ -1798,15 +1798,15 @@ void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey\n     m_set_stored_keys.insert(pubkey.GetID());\n }\n \n-bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal)\n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(OutputType addr_type, bool internal)\n {\n     if (addr_type == OutputType::BECH32M) {\n         // Don't allow setting up taproot descriptors yet\n         // TODO: Allow setting up taproot descriptors\n         return false;\n     }\n \n-    LOCK(cs_desc_man);\n+    LOCK2(cs_desc_man, m_keyman.cs_keyman);\n     assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n \n     // Ignore when there is already a descriptor\n@@ -1816,6 +1816,10 @@ bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_\n \n     int64_t creation_time = GetTime();\n \n+    std::optional<CExtKey> extkey = m_keyman.GetActiveHDKey();\n+    assert(extkey != std::nullopt);\n+    CExtKey& master_key = extkey.value();\n+\n     std::string xpub = EncodeExtPubKey(master_key.Neuter());\n \n     // Build descriptor string"
      },
      {
        "sha": "86e6d752df7b29f907a0f3ee08e52230d6d8b1fe",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b152c325507bd563e18d4054a1f5d0df5a6f4e65/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b152c325507bd563e18d4054a1f5d0df5a6f4e65/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=b152c325507bd563e18d4054a1f5d0df5a6f4e65",
        "patch": "@@ -550,7 +550,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool IsHDEnabled() const override;\n \n     //! Setup descriptors based on the given CExtkey\n-    bool SetupDescriptorGeneration(const CExtKey& master_key, OutputType addr_type, bool internal);\n+    bool SetupDescriptorGeneration(OutputType addr_type, bool internal);\n \n     /** Provide a descriptor at setup time\n     * Returns false if already setup or setup fails, true if setup is successful"
      },
      {
        "sha": "636145883e16ec3e94424bd6bdcf0d23b3f26cdc",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b152c325507bd563e18d4054a1f5d0df5a6f4e65/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b152c325507bd563e18d4054a1f5d0df5a6f4e65/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b152c325507bd563e18d4054a1f5d0df5a6f4e65",
        "patch": "@@ -3152,15 +3152,11 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n     AssertLockHeld(cs_wallet);\n \n     if (!IsWalletFlagSet(WALLET_FLAG_EXTERNAL_SIGNER)) {\n-        // Make a seed\n-        CKey seed_key;\n-        seed_key.MakeNewKey(true);\n-        CPubKey seed = seed_key.GetPubKey();\n-        assert(seed_key.VerifyPubKey(seed));\n-\n-        // Get the extended key\n-        CExtKey master_key;\n-        master_key.SetSeed(seed_key);\n+        {\n+            LOCK(m_keyman.cs_keyman);\n+            m_keyman.GenerateAndSetHDKey();\n+            SetWalletFlag(WALLET_FLAG_USES_KEYMAN);\n+        }\n \n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n@@ -3178,7 +3174,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n                         throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n                     }\n                 }\n-                spk_manager->SetupDescriptorGeneration(master_key, t, internal);\n+                spk_manager->SetupDescriptorGeneration(t, internal);\n                 uint256 id = spk_manager->GetID();\n                 m_spk_managers[id] = std::move(spk_manager);\n                 AddActiveScriptPubKeyMan(id, t, internal);"
      }
    ]
  },
  {
    "sha": "00bd357dd58d294ba11f9246e6da5d92455ddacb",
    "node_id": "C_kwDOABII59oAKDAwYmQzNTdkZDU4ZDI5NGJhMTFmOTI0NmU2ZGE1ZDkyNDU1ZGRhY2I",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-08-02T20:53:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "descriptor: Be able to get the pubkeys involved in a descriptor",
      "tree": {
        "sha": "c92b2d41e747fb972eea2a771e6acf96c5511f17",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c92b2d41e747fb972eea2a771e6acf96c5511f17"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00bd357dd58d294ba11f9246e6da5d92455ddacb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00bd357dd58d294ba11f9246e6da5d92455ddacb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00bd357dd58d294ba11f9246e6da5d92455ddacb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00bd357dd58d294ba11f9246e6da5d92455ddacb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b152c325507bd563e18d4054a1f5d0df5a6f4e65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b152c325507bd563e18d4054a1f5d0df5a6f4e65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b152c325507bd563e18d4054a1f5d0df5a6f4e65"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "146ec6d1e5485db82cb2149bb26e0107ed7ceb63",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00bd357dd58d294ba11f9246e6da5d92455ddacb/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00bd357dd58d294ba11f9246e6da5d92455ddacb/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=00bd357dd58d294ba11f9246e6da5d92455ddacb",
        "patch": "@@ -185,6 +185,12 @@ struct PubkeyProvider\n \n     /** Derive a private key, if private data is available in arg. */\n     virtual bool GetPrivKey(int pos, const SigningProvider& arg, CKey& key) const = 0;\n+\n+    /** Return all (extended public keys for this PubkeyProvider\n+     * param[out] pubkeys Any public keys\n+     * param[out] ext_pubs Any extended public keys\n+     */\n+    virtual void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;\n };\n \n class OriginPubkeyProvider final : public PubkeyProvider\n@@ -235,6 +241,10 @@ class OriginPubkeyProvider final : public PubkeyProvider\n     {\n         return m_provider->GetPrivKey(pos, arg, key);\n     }\n+    void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        m_provider->GetRootPubkey(pubkeys, ext_pubs);\n+    }\n };\n \n /** An object representing a parsed constant public key in a descriptor. */\n@@ -272,6 +282,10 @@ class ConstPubkeyProvider final : public PubkeyProvider\n     {\n         return arg.GetKey(m_pubkey.GetID(), key);\n     }\n+    void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        pubkeys.insert(m_pubkey);\n+    }\n };\n \n enum class DeriveType {\n@@ -480,6 +494,10 @@ class BIP32PubkeyProvider final : public PubkeyProvider\n         key = extkey.key;\n         return true;\n     }\n+    void GetRootPubkey(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        ext_pubs.insert(m_root_extkey);\n+    }\n };\n \n /** Base class for all Descriptor implementations. */\n@@ -658,6 +676,16 @@ class DescriptorImpl : public Descriptor\n     }\n \n     std::optional<OutputType> GetOutputType() const override { return std::nullopt; }\n+\n+    void GetPubkeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const override\n+    {\n+        for (const auto& p : m_pubkey_args) {\n+            p->GetRootPubkey(pubkeys, ext_pubs);\n+        }\n+        for (const auto& arg : m_subdescriptor_args) {\n+            arg->GetPubkeys(pubkeys, ext_pubs);\n+        }\n+    }\n };\n \n /** A parsed addr(A) descriptor. */"
      },
      {
        "sha": "4a66214b6e1f77e225d55c356cd9cf574f997642",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00bd357dd58d294ba11f9246e6da5d92455ddacb/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00bd357dd58d294ba11f9246e6da5d92455ddacb/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=00bd357dd58d294ba11f9246e6da5d92455ddacb",
        "patch": "@@ -146,6 +146,13 @@ struct Descriptor {\n \n     /** @return The OutputType of the scriptPubKey(s) produced by this descriptor. Or nullopt if indeterminate (multiple or none) */\n     virtual std::optional<OutputType> GetOutputType() const = 0;\n+\n+    /** Return all (extended) public keys for this descriptor, including any from subdescriptors.\n+     *\n+     * @param[out] pubkeys Any public keys\n+     * @param[out] ext_pubs Any extended public keys\n+     */\n+    virtual void GetPubkeys(std::set<CPubKey>& pubkeys, std::set<CExtPubKey>& ext_pubs) const = 0;\n };\n \n /** Parse a `descriptor` string. Included private keys are put in `out`."
      }
    ]
  },
  {
    "sha": "00e9821b0f6a32aa5ac3bef35a8210000a19f4df",
    "node_id": "C_kwDOABII59oAKDAwZTk4MjFiMGY2YTMyYWE1YWMzYmVmMzVhODIxMDAwMGExOWY0ZGY",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:39:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "walletdb: Implement upgrading a wallet to use KeyManager",
      "tree": {
        "sha": "f794a88efee24c1bd7c2729934cc087201f0cc1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f794a88efee24c1bd7c2729934cc087201f0cc1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/00e9821b0f6a32aa5ac3bef35a8210000a19f4df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e9821b0f6a32aa5ac3bef35a8210000a19f4df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/00e9821b0f6a32aa5ac3bef35a8210000a19f4df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e9821b0f6a32aa5ac3bef35a8210000a19f4df/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00bd357dd58d294ba11f9246e6da5d92455ddacb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00bd357dd58d294ba11f9246e6da5d92455ddacb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00bd357dd58d294ba11f9246e6da5d92455ddacb"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 93,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f4ff73a91a74da0aa150d834fadb9e9290af6447",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 1,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/00e9821b0f6a32aa5ac3bef35a8210000a19f4df/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/00e9821b0f6a32aa5ac3bef35a8210000a19f4df/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=00e9821b0f6a32aa5ac3bef35a8210000a19f4df",
        "patch": "@@ -1092,7 +1092,99 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n     }\n \n-    // TODO: Upgrade to using KeyMan\n+    // Upgrade to using KeyMan\n+    // Find the keys which are used in single key internal and external descriptors with\n+    // the pre-taproot output types\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) &&\n+        !pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) &&\n+        (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN) ||\n+        last_client <= 229999)\n+        ) {\n+        std::map<CExtPubKey, std::pair<std::map<std::string, int>, uint64_t>> descs_keys;\n+        std::map<std::string, int> tmpl = {{\"pkh(\", 0}, {\"sh(wpkh(\", 0}, {\"wpkh(\", 0}};\n+\n+        // Find root xpubs used in pkh(), sh(wpkh()), and wpkh() descriptors\n+        for (const auto& spkm : pwallet->GetAllScriptPubKeyMans()) {\n+            const DescriptorScriptPubKeyMan* desc_spkm = dynamic_cast<DescriptorScriptPubKeyMan*>(spkm);\n+            assert(desc_spkm);\n+            LOCK(desc_spkm->cs_desc_man);\n+            WalletDescriptor w_desc = desc_spkm->GetWalletDescriptor();\n+\n+            if (!w_desc.descriptor->IsRange()) {\n+                continue;\n+            }\n+\n+            std::set<CPubKey> desc_pubkeys;\n+            std::set<CExtPubKey> desc_xpubs;\n+            w_desc.descriptor->GetPubkeys(desc_pubkeys, desc_xpubs);\n+            if (desc_xpubs.size() != 1) {\n+                continue;\n+            }\n+            const CExtPubKey& xpub = *desc_xpubs.begin();\n+\n+            if (descs_keys.count(xpub) == 0) {\n+                descs_keys.emplace(xpub, std::make_pair(tmpl, 0));\n+            }\n+\n+            const std::string desc = w_desc.descriptor->ToString();\n+            if (desc.find(\"pkh(\") == 0) {\n+                descs_keys[xpub].first[\"pkh(\"]++;\n+            } else if (desc.find(\"sh(wpkh(\")) {\n+                descs_keys[xpub].first[\"sh(wpkh(\"]++;\n+            } else if (desc.find(\"wpkh(\")) {\n+                descs_keys[xpub].first[\"wpkh(\"]++;\n+            } else {\n+                continue;\n+            }\n+            if (w_desc.creation_time > descs_keys[xpub].second) {\n+                descs_keys[xpub].second = w_desc.creation_time;\n+            }\n+        }\n+\n+        // Find candidate active xpubs\n+        // These are the ones that are used in 2 pkh(), 2 sh(wpkh()), and 2 wpkh() descriptors\n+        uint64_t best_time = 0;\n+        CExtPubKey best_xpub;\n+        for (const auto& [xpub, info] : descs_keys) {\n+            const auto& [dtypes, desc_time] = info;\n+            bool ok = true;\n+            for (const auto& [dtype, count] : dtypes) {\n+                if (count != 2) {\n+                    ok = false;\n+                    break;\n+                }\n+            }\n+            if (ok) {\n+                pwallet->GetKeyManager().LoadHDKey(xpub.pubkey.GetID(), xpub);\n+                WriteHDPubKey(xpub);\n+                if (desc_time > best_time) {\n+                    best_time = desc_time;\n+                    best_xpub = xpub;\n+                }\n+            }\n+        }\n+        if (best_time > 0) {\n+            pwallet->GetKeyManager().SetActiveHDKey(best_xpub);\n+        }\n+\n+        // Load keys into KeyManager\n+        for (const auto& [id_pair, key] : wss.m_descriptor_keys) {\n+            const auto& [desc_id, keyid] = id_pair;\n+\n+            pwallet->GetKeyManager().LoadKey(keyid, key);\n+            WriteKeyManKey(key.GetPubKey(), key.GetPrivKey());\n+        }\n+        for (const auto& [id_pair, key_pair] : wss.m_descriptor_crypt_keys) {\n+            const auto& [desc_id, keyid] = id_pair;\n+            const auto& [pubkey, ckey] = key_pair;\n+\n+            pwallet->GetKeyManager().LoadCryptedKey(keyid, pubkey, ckey);\n+            WriteCryptedKeyManKey(pubkey, ckey);\n+        }\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_USES_KEYMAN)) {\n+            pwallet->SetWalletFlag(WALLET_FLAG_USES_KEYMAN);\n+        }\n+    }\n \n     return result;\n }"
      }
    ]
  },
  {
    "sha": "e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
    "node_id": "C_kwDOABII59oAKGUxYWM4MWYzY2U2ZjJkNzVkZWM5Yzk2ZjIxYmVmOWJiMGNhOTRlNjk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:39:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "descspkm: Remove unneeded key loading\n\nKey management will be done entirely by KeyManager, so\nDescriptorScriptPubKeyMan does not need key loading functions.",
      "tree": {
        "sha": "a347856ce58c87a59e41151490c4f11109862b06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a347856ce58c87a59e41151490c4f11109862b06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "00e9821b0f6a32aa5ac3bef35a8210000a19f4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/00e9821b0f6a32aa5ac3bef35a8210000a19f4df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/00e9821b0f6a32aa5ac3bef35a8210000a19f4df"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 0,
      "deletions": 29
    },
    "files": [
      {
        "sha": "e559b82123192d5592b679a5d22ec5073076c9a8",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
        "patch": "@@ -2137,22 +2137,6 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n     }\n }\n \n-bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n-{\n-    m_keyman.LoadKey(key_id, key);\n-    m_set_stored_keys.insert(key_id);\n-    return true;\n-}\n-\n-bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n-{\n-    if (!m_keyman.LoadCryptedKey(key_id, pubkey, crypted_key)) {\n-        return false;\n-    }\n-    m_set_stored_keys.insert(key_id);\n-    return true;\n-}\n-\n bool DescriptorScriptPubKeyMan::HasWalletDescriptor(const WalletDescriptor& desc) const\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "1bab4d188c64511252b5e7ce45de5ec21d28be44",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
        "patch": "@@ -580,9 +580,6 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     void SetCache(const DescriptorCache& cache);\n \n-    bool AddKey(const CKeyID& key_id, const CKey& key);\n-    bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n-\n     bool HasWalletDescriptor(const WalletDescriptor& desc) const;\n     void UpdateWalletDescriptor(WalletDescriptor& descriptor);\n     bool CanUpdateToWalletDescriptor(const WalletDescriptor& descriptor, std::string& error);"
      },
      {
        "sha": "bfae2adbb0baec6102f859b62685106acc9bd540",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
        "patch": "@@ -1009,16 +1009,6 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);\n     }\n \n-    // Set the descriptor keys\n-    for (auto desc_key_pair : wss.m_descriptor_keys) {\n-        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n-        ((DescriptorScriptPubKeyMan*)spk_man)->AddKey(desc_key_pair.first.second, desc_key_pair.second);\n-    }\n-    for (auto desc_key_pair : wss.m_descriptor_crypt_keys) {\n-        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n-        ((DescriptorScriptPubKeyMan*)spk_man)->AddCryptedKey(desc_key_pair.first.second, desc_key_pair.second.first, desc_key_pair.second.second);\n-    }\n-\n     if (rescan_required && result == DBErrors::LOAD_OK) {\n         result = DBErrors::NEED_RESCAN;\n     } else if (fNoncriticalErrors && result == DBErrors::LOAD_OK) {"
      }
    ]
  },
  {
    "sha": "709a917c26bf048de454760c7189278b965ca7f3",
    "node_id": "C_kwDOABII59oAKDcwOWE5MTdjMjZiZjA0OGRlNDU0NzYwYzcxODkyNzhiOTY1Y2E3ZjM",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-01T19:47:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-11-13T02:33:48Z"
      },
      "message": "rpc: Add getxpub command",
      "tree": {
        "sha": "7367aa1da9e097670eaea1f5c6390d7e3cd10a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7367aa1da9e097670eaea1f5c6390d7e3cd10a06"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/709a917c26bf048de454760c7189278b965ca7f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a917c26bf048de454760c7189278b965ca7f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/709a917c26bf048de454760c7189278b965ca7f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a917c26bf048de454760c7189278b965ca7f3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1ac81f3ce6f2d75dec9c96f21bef9bb0ca94e69"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 54,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c77b85e42cdf79232c6d8d143c049ce10f4f6775",
        "filename": "src/wallet/keyman.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709a917c26bf048de454760c7189278b965ca7f3/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709a917c26bf048de454760c7189278b965ca7f3/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=709a917c26bf048de454760c7189278b965ca7f3",
        "patch": "@@ -74,6 +74,14 @@ std::optional<CExtKey> KeyManager::GetActiveHDKey() const\n     return master_key;\n }\n \n+std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n+{\n+    if (!m_active_xpub.pubkey.IsValid()) {\n+        return std::nullopt;\n+    }\n+    return m_active_xpub;\n+}\n+\n bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n {\n     AssertLockHeld(cs_keyman);"
      },
      {
        "sha": "03b369136f0b0b8fe23a95da832e928b01dcf60d",
        "filename": "src/wallet/keyman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709a917c26bf048de454760c7189278b965ca7f3/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709a917c26bf048de454760c7189278b965ca7f3/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=709a917c26bf048de454760c7189278b965ca7f3",
        "patch": "@@ -43,6 +43,7 @@ class KeyManager\n \n     void GenerateAndSetHDKey();\n     std::optional<CExtKey> GetActiveHDKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+    std::optional<CExtPubKey> GetActiveHDPubKey() const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n     void SetActiveHDKey(const CExtPubKey& extpub);\n     void LoadActiveHDKey(const CExtPubKey& extpub);\n "
      },
      {
        "sha": "62ba5b130758cb989b75e5b31a72a69b63ab67d1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709a917c26bf048de454760c7189278b965ca7f3/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709a917c26bf048de454760c7189278b965ca7f3/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=709a917c26bf048de454760c7189278b965ca7f3",
        "patch": "@@ -4839,6 +4839,50 @@ static RPCHelpMan walletdisplayaddress()\n }\n #endif // ENABLE_EXTERNAL_SIGNER\n \n+static RPCHelpMan getxpub()\n+{\n+    return RPCHelpMan{\"getxpub\",\n+                \"Returns the xpub most recently used to generate descriptors for this descriptor wallet. \"\n+                \"Not entirely useful right now as it returns the xpub of the root, and there are \"\n+                \"hardened derivation steps involved in normal key derivation.\\n\",\n+                {},\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {\n+                        {RPCResult::Type::STR, \"xpub\", \"The xpub\"},\n+                    }},\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"getxpub\", \"\")\n+            + HelpExampleRpc(\"getxpub\", \"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    const std::shared_ptr<CWallet> pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"getxpub is not available for non-descriptor wallets\");\n+    }\n+\n+    const KeyManager& keyman = pwallet->GetKeyManager();\n+    LOCK2(pwallet->cs_wallet, keyman.cs_keyman);\n+\n+    std::optional<CExtPubKey> extpub = keyman.GetActiveHDPubKey();\n+    if (extpub == std::nullopt) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This wallet does not have an active xpub\");\n+    }\n+    std::string xpub = EncodeExtPubKey(*extpub);\n+\n+    UniValue obj(UniValue::VOBJ);\n+    obj.pushKV(\"xpub\", xpub);\n+\n+    return obj;\n+},\n+    };\n+}\n+\n RPCHelpMan abortrescan();\n RPCHelpMan dumpprivkey();\n RPCHelpMan importprivkey();\n@@ -4880,6 +4924,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             &gettransaction,                 },\n     { \"wallet\",             &getunconfirmedbalance,          },\n     { \"wallet\",             &getbalances,                    },\n+    { \"wallet\",             &getxpub,                        },\n     { \"wallet\",             &getwalletinfo,                  },\n     { \"wallet\",             &importaddress,                  },\n     { \"wallet\",             &importdescriptors,              },"
      }
    ]
  },
  {
    "sha": "26ff0d13449ecbaf49799d8c32e296b267395d6c",
    "node_id": "C_kwDOABII59oAKDI2ZmYwZDEzNDQ5ZWNiYWY0OTc5OWQ4YzMyZTI5NmIyNjczOTVkNmM",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-06-25T18:35:11Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-17T16:48:25Z"
      },
      "message": "wallet: GetExtPubKey()",
      "tree": {
        "sha": "d83f31b6f58fca59732d825938f66f6dd1891eab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d83f31b6f58fca59732d825938f66f6dd1891eab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26ff0d13449ecbaf49799d8c32e296b267395d6c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmGVMlkACgkQV/+b28ww\nEAkGpA/+OkoFg1uCi5w6MZ764T0ezyPQJKl7a+MtyBansqQFTv6IcAdYLjMTRPFc\nZ4cO2YcQpAaP2rap9lJkDqBh5Fvr5jCZV8mMym43wGlLP/oMHDgT8St3XVSDIHZh\nmxBs1FtuJa/isH7NTwnsSiW+2G6gRGr9rRsNdo/Q/fx0NxUobLNBrBY9o11zGi8p\nyWpwnS0HxG/rT1So2geCs/RD3HbewslAtjZLwETKByWKp3V2lvqHBhuqk+xuJ77g\nHK7Vxx/jkqDkxPB5xFFWPqQpLwuwXY7ew8et/0OjUDOwR9hCevEgTMEDObwBqzFH\n85UPxTvev4YpgFxqsyz190YZtrVrpbj3uJC6DtyXA2aL9nl/uo8UH4rLisdUPasH\nDyfkR9PTOWRFSzmsBOfnzVXtaJg/Fnja4Gx2lTi7lckbSZNQZSsj4I7W+qnSl8Iv\ngHH1P02qYGBPZtj3+nDln/U2HSr2tCjvA3j2CVLnv2tpltz1F9eUu9S57owosBnB\nHGPXBWo/sDTh+JYqEJBsg2h6mereOdnOkcbox9jsHHLfXruPM8MiRNGFfitAeqV2\n1pB/FIA98BJSkdwL5BBsPrQxFjvsUEGDiIN4gs5GLHiqfFpCkd7zIetwnbBgjmWX\nazWMm14NnKVwNoLDm1l+FDTYdNo/x0EGdY0WRntiKQWXrJs2ryM=\n=rOq5\n-----END PGP SIGNATURE-----",
        "payload": "tree d83f31b6f58fca59732d825938f66f6dd1891eab\nparent 709a917c26bf048de454760c7189278b965ca7f3\nauthor Sjors Provoost <sjors@sprovoost.nl> 1624646111 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1637167705 +0100\n\nwallet: GetExtPubKey()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26ff0d13449ecbaf49799d8c32e296b267395d6c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26ff0d13449ecbaf49799d8c32e296b267395d6c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26ff0d13449ecbaf49799d8c32e296b267395d6c/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "709a917c26bf048de454760c7189278b965ca7f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a917c26bf048de454760c7189278b965ca7f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/709a917c26bf048de454760c7189278b965ca7f3"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 21,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a37403e804dbe01ef6b0915c20a3cb6cfa3cc1c2",
        "filename": "src/wallet/keyman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26ff0d13449ecbaf49799d8c32e296b267395d6c/src/wallet/keyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26ff0d13449ecbaf49799d8c32e296b267395d6c/src/wallet/keyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.cpp?ref=26ff0d13449ecbaf49799d8c32e296b267395d6c",
        "patch": "@@ -82,6 +82,22 @@ std::optional<CExtPubKey> KeyManager::GetActiveHDPubKey() const\n     return m_active_xpub;\n }\n \n+std::optional<std::pair<CExtPubKey, KeyOriginInfo>> KeyManager::GetExtPubKey(const std::vector<uint32_t> path) const {\n+    std::optional<CExtKey> ext_key = GetActiveHDKey();\n+    if (!ext_key) return std::nullopt;\n+    KeyOriginInfo origin;\n+    origin.path = path;\n+    bool first = true;\n+    for (uint32_t i : path) {\n+        ext_key->Derive(*ext_key, i);\n+        if (first) {\n+            memcpy(origin.fingerprint, &ext_key->vchFingerprint, 4);\n+            first = false;\n+        }\n+    }\n+    return std::make_pair(ext_key->Neuter(), origin);\n+}\n+\n bool KeyManager::AddKeyInner(WalletBatch& batch, const CKey& key, const CPubKey& pubkey)\n {\n     AssertLockHeld(cs_keyman);"
      },
      {
        "sha": "f4a1dbf0f43cb3da2b56ad0bb1f25fdc8b2d7768",
        "filename": "src/wallet/keyman.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26ff0d13449ecbaf49799d8c32e296b267395d6c/src/wallet/keyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26ff0d13449ecbaf49799d8c32e296b267395d6c/src/wallet/keyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/keyman.h?ref=26ff0d13449ecbaf49799d8c32e296b267395d6c",
        "patch": "@@ -47,6 +47,11 @@ class KeyManager\n     void SetActiveHDKey(const CExtPubKey& extpub);\n     void LoadActiveHDKey(const CExtPubKey& extpub);\n \n+    //! Get extended key and origin info for a given path\n+    //! @params[in] path The BIP 32 path\n+    //! @return the resulting extended public key and origin info\n+    std::optional<std::pair<CExtPubKey, KeyOriginInfo>> GetExtPubKey(std::vector<uint32_t> path) const EXCLUSIVE_LOCKS_REQUIRED(cs_keyman);\n+\n     bool AddDescriptorKey(WalletBatch& batch, const uint256& desc_id, const CKey& key, const CPubKey& pubkey);\n     bool AddHDKey(WalletBatch& batch, const CExtKey& extkey, const CExtPubKey& extpub);\n "
      }
    ]
  },
  {
    "sha": "e08f18b8e238738dc145facd0ecf86d75e859c96",
    "node_id": "C_kwDOABII59oAKGUwOGYxOGI4ZTIzODczOGRjMTQ1ZmFjZDBlY2Y4NmQ3NWU4NTljOTY",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-17T16:48:09Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-17T18:58:26Z"
      },
      "message": "rpc: ParsePathBIP32 helper",
      "tree": {
        "sha": "3343b2702314cb0921b71feb0a58416b41f25aa7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3343b2702314cb0921b71feb0a58416b41f25aa7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e08f18b8e238738dc145facd0ecf86d75e859c96",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmGVUNIACgkQV/+b28ww\nEAmGYQ/7BEPO1Ydmcwb4GDlDEArwF9EqPulXX44OHjl2xuO27hPed52I54Eu6MeJ\nh3zWNRu3wp7xkE3fxKK7rkEqtswePDZ734nI3qOFZTdyLZKIAo2ecGXjs9Pl02Ov\nn/JPm8ybMCHuwq8GZFfD1NEXfwI/xARUhzsxcu6w6pSrnkWmgP/Q0x9OYZZHTLpY\nXNAV4VLseHLfLMMrfn/BpT81U+IkLjbyzwEFf1U+FOv3HNUVCw+zmTw5dWPcGn+o\n8c9a0DgenedKmyCqqKuKy37lpwT0rEY/Od6GtNcstU65cFlU6SgKC7qhyE0L1uJC\noL23RumT0SYyowtFxdrGhvkQtxjNMNxLNmBY8jPFnNI+aw6naIaiy3bm8H3794nH\nVu+CTrHrMbYvonTjBVcr9KrgXk0lEAd5VAblGSNuyTz+BkSVqzxGWQdLbbHF1Ye8\nGuWwYePG3cmdksKPZumaBt9cGP2rO6hux+BCoQqjZ2zqIRq0KCpw9Tvv3UEH4lhR\nT1KGDQSMpW01ZgT9TWgEq7IUaawcR8wftECqRDuyxV7/wuI0fcioa00BK/zQExAZ\nWBwd25KkGorGpZiWt6vMpKEiVxL74UBOf0OxgAsetXly1Gz1/x/jKa/I+cycjCzE\nLCTKQ/5euoJr3DNx8KOrpPpBUD139AOy4OiQxQRDrsXS2E1SAW8=\n=NMS6\n-----END PGP SIGNATURE-----",
        "payload": "tree 3343b2702314cb0921b71feb0a58416b41f25aa7\nparent 26ff0d13449ecbaf49799d8c32e296b267395d6c\nauthor Sjors Provoost <sjors@sprovoost.nl> 1637167689 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1637175506 +0100\n\nrpc: ParsePathBIP32 helper\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08f18b8e238738dc145facd0ecf86d75e859c96",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e08f18b8e238738dc145facd0ecf86d75e859c96",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08f18b8e238738dc145facd0ecf86d75e859c96/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26ff0d13449ecbaf49799d8c32e296b267395d6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26ff0d13449ecbaf49799d8c32e296b267395d6c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26ff0d13449ecbaf49799d8c32e296b267395d6c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "487efec0e8bf597d8dc290ba85e2367f0b1b7426",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e08f18b8e238738dc145facd0ecf86d75e859c96/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e08f18b8e238738dc145facd0ecf86d75e859c96/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=e08f18b8e238738dc145facd0ecf86d75e859c96",
        "patch": "@@ -9,6 +9,7 @@\n #include <script/descriptor.h>\n #include <script/signingprovider.h>\n #include <tinyformat.h>\n+#include <util/bip32.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n #include <util/translation.h>\n@@ -1027,6 +1028,15 @@ std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, Fl\n     return ret;\n }\n \n+std::vector<uint32_t> ParsePathBIP32(const std::string path)\n+{\n+    std::vector<uint32_t> out;\n+    if (!ParseHDKeypath(path, out)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid BIP32 keypath\");\n+    }\n+    return out;\n+}\n+\n UniValue GetServicesNames(ServiceFlags services)\n {\n     UniValue servicesNames(UniValue::VARR);"
      },
      {
        "sha": "5f2e5be0998c6353965b0265a159fde51456e5a0",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e08f18b8e238738dc145facd0ecf86d75e859c96/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e08f18b8e238738dc145facd0ecf86d75e859c96/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=e08f18b8e238738dc145facd0ecf86d75e859c96",
        "patch": "@@ -110,6 +110,9 @@ std::pair<int64_t, int64_t> ParseDescriptorRange(const UniValue& value);\n /** Evaluate a descriptor given as a string, or as a {\"desc\":...,\"range\":...} object, with default range of 1000. */\n std::vector<CScript> EvalDescriptorStringOrObject(const UniValue& scanobject, FlatSigningProvider& provider);\n \n+//! Parse BIP32 path\n+std::vector<uint32_t> ParsePathBIP32(const std::string path);\n+\n /** Returns, given services flags, a list of humanly readable (known) network services */\n UniValue GetServicesNames(ServiceFlags services);\n "
      }
    ]
  },
  {
    "sha": "47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
    "node_id": "C_kwDOABII59oAKDQ3YWExZTg4Y2I3MzNjYTgxZGQyZDU4ZjA2MDBmMDhlNjYxN2QxMWE",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-06-25T14:49:50Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-17T18:58:26Z"
      },
      "message": "rpc: add path argument to getxpub",
      "tree": {
        "sha": "ba7729fdae05eae643285e68599a6c0a65e7c295",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ba7729fdae05eae643285e68599a6c0a65e7c295"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmGVUNIACgkQV/+b28ww\nEAlkkw/8D+9ZE3q6YGH1hN2XYdA5iSFkDJ0CJQjnAAixAVfQyu9LFNhqBFuZ/KO/\nUpWkLgTQ0tirrQbQUYxayX7+wNRW9VDfaUVuuw08Il+fsWhv8wD+e3ditVgObcVB\n7T/R4wm23mlgaa2u10hczaqaYw0WM2n18KH02AeZG39EkRjFoMd+y+qdN/WhsvEZ\nd+57LmUzAjXiBO+XiJDBXZF+BWL+W0pO9neHwxtbVlSsuLkAB7dEmTa4QLGsQK3e\nS8ia3WwHeYV0Yj/MuR2rG+UD8nE3gZ6me16tVYHuw+1P7yaAdVTvUbNZrQotiiwB\n5zHvKcbCDoPdj0ZMDYewvzMHU6uON9R34XWSKSD28KXaYSh/RfOOXpJ5wC7QMvrk\nKArDxxu0N6FPvixC0BucLNer2mc7mRXfYo0GTKP/nfbecAPr9zhF8IH+6FYYmSOy\nu6ZRpxOBNwhGF9dw8Qn2pMGD6Vae54APc113eg8UYOt/hUvRWSYWkGNHFOKUeXIx\nEu8zN/4zy1MDMWI0Sy6L4sMCurZ+08e/6BIwv23jY5k8LQmsT+5mu4F4F+6Lgvvc\nlAZLIbQA2BhqAbO0LVJLqN2ldNYILBYTRYs+H682gfBsIPuVJrBy4P7vLhRI4Uha\njVmxCC79WgvTZN7aYTnL3PmK/iKpAL/HJwNX9R1WlqaqJYRorsQ=\n=enyL\n-----END PGP SIGNATURE-----",
        "payload": "tree ba7729fdae05eae643285e68599a6c0a65e7c295\nparent e08f18b8e238738dc145facd0ecf86d75e859c96\nauthor Sjors Provoost <sjors@sprovoost.nl> 1624632590 +0200\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1637175506 +0100\n\nrpc: add path argument to getxpub\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e08f18b8e238738dc145facd0ecf86d75e859c96",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e08f18b8e238738dc145facd0ecf86d75e859c96",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e08f18b8e238738dc145facd0ecf86d75e859c96"
      }
    ],
    "stats": {
      "total": 113,
      "additions": 103,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1608a3141e1720a8381cc9c2ac92e9d09e2fcfd3",
        "filename": "doc/release-notes-22341.md",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/doc/release-notes-22341.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/doc/release-notes-22341.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-22341.md?ref=47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
        "patch": "@@ -0,0 +1,5 @@\n+Wallet\n+------\n+\n+- A new `getxpub` RPC is available to obtain an xpub for any given BIP32 path.\n+  The xpub can then be imported as e.g. part of a multisig descriptor. (#22341)"
      },
      {
        "sha": "4483e4f989679774dd8181827387bf4aacb819f5",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 10,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
        "patch": "@@ -4842,15 +4842,18 @@ static RPCHelpMan walletdisplayaddress()\n static RPCHelpMan getxpub()\n {\n     return RPCHelpMan{\"getxpub\",\n-                \"Returns the xpub most recently used to generate descriptors for this descriptor wallet. \"\n-                \"Not entirely useful right now as it returns the xpub of the root, and there are \"\n-                \"hardened derivation steps involved in normal key derivation.\\n\",\n-                {},\n+                \"Return extended public key for a given path. \"\n+                \"The xpub needs to be imported in a descriptor in order to see transactions spending from it.\\n \",\n+                {\n+                    {\"path\", RPCArg::Type::STR, RPCArg::Optional::NO, \"BIP 32 derivation path, e.g. m/84'/1'/0'\"},\n+                },\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n                         {\n                         {RPCResult::Type::STR, \"xpub\", \"The xpub\"},\n+                        {RPCResult::Type::STR, \"fingerprint\", \"The master key fingerprint\"},\n+                        {RPCResult::Type::STR, \"origin\", \"The fingerprint and path\"},\n                     }},\n                 },\n                 RPCExamples{\n@@ -4866,18 +4869,25 @@ static RPCHelpMan getxpub()\n         throw JSONRPCError(RPC_WALLET_ERROR, \"getxpub is not available for non-descriptor wallets\");\n     }\n \n+    EnsureWalletIsUnlocked(*pwallet);\n+\n     const KeyManager& keyman = pwallet->GetKeyManager();\n     LOCK2(pwallet->cs_wallet, keyman.cs_keyman);\n \n-    std::optional<CExtPubKey> extpub = keyman.GetActiveHDPubKey();\n-    if (extpub == std::nullopt) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"This wallet does not have an active xpub\");\n+    std::vector<uint32_t> path = ParsePathBIP32(request.params[0].get_str());\n+\n+    std::optional<std::pair<CExtPubKey, KeyOriginInfo>> xpub_and_origin = keyman.GetExtPubKey(path);\n+    if (xpub_and_origin == std::nullopt) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"This wallet does not have an active master extended key\");\n     }\n-    std::string xpub = EncodeExtPubKey(*extpub);\n+    const std::string xpub = EncodeExtPubKey(xpub_and_origin->first);\n+    const std::string fingerprint = HexStr(xpub_and_origin->second.fingerprint);\n+    const std::string keypath = FormatHDKeypath(xpub_and_origin->second.path);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"xpub\", xpub);\n-\n+    obj.pushKV(\"fingerprint\", fingerprint);\n+    obj.pushKV(\"origin\", \"[\" + fingerprint + keypath + \"]\");\n     return obj;\n },\n     };\n@@ -4924,8 +4934,8 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             &gettransaction,                 },\n     { \"wallet\",             &getunconfirmedbalance,          },\n     { \"wallet\",             &getbalances,                    },\n-    { \"wallet\",             &getxpub,                        },\n     { \"wallet\",             &getwalletinfo,                  },\n+    { \"wallet\",             &getxpub,                        },\n     { \"wallet\",             &importaddress,                  },\n     { \"wallet\",             &importdescriptors,              },\n     { \"wallet\",             &importmulti,                    },"
      },
      {
        "sha": "e9f2a2fa7353513e9056188007f663f25e86ad9e",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
        "patch": "@@ -309,6 +309,7 @@\n     'feature_presegwit_node_upgrade.py',\n     'feature_settings.py',\n     'rpc_getdescriptorinfo.py',\n+    'wallet_getxpub.py',\n     'rpc_help.py',\n     'feature_help.py',\n     'feature_shutdown.py',"
      },
      {
        "sha": "8220891c8f89eeac35ff4f635a3e61b81de89922",
        "filename": "test/functional/wallet_getxpub.py",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/test/functional/wallet_getxpub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47aa1e88cb733ca81dd2d58f0600f08e6617d11a/test/functional/wallet_getxpub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_getxpub.py?ref=47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
        "patch": "@@ -0,0 +1,77 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2021 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the getxpub RPC command.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+from test_framework.descriptors import descsum_create\n+import re\n+\n+class WalletGetxpubTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+        self.skip_if_no_sqlite()\n+\n+    def run_test(self):\n+        for encrypted in [False, True]:\n+            self.log.info(\"Attempt to create a watch-only wallet clone by exporting an xpub\")\n+            self.nodes[0].createwallet(wallet_name=\"w1_\" + str(encrypted), descriptors=True)\n+            w1 = self.nodes[0].get_wallet_rpc(\"w1_\" + str(encrypted))\n+\n+            if encrypted:\n+                self.log.info(\"With encrypted wallet\")\n+                w1.encryptwallet(\"1234\")\n+                assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", w1.getxpub, \"m/84'/1'/0'\")\n+                w1.walletpassphrase(\"1234\", 84600)\n+\n+            # Get the activate wpkh() receive descriptor\n+            desc = list(filter(lambda d:\n+                d[\"active\"] and not d[\"internal\"] and d[\"desc\"][0:4] == \"wpkh\",\n+                w1.listdescriptors()[\"descriptors\"])\n+            )[0][\"desc\"]\n+            self.log.debug(desc)\n+\n+            # Get master key fingerprint:\n+            fpr = re.search(r'\\[(.*?)/', desc).group(1)\n+\n+            self.nodes[1].createwallet(wallet_name=\"w2_\" + str(encrypted), descriptors=True, disable_private_keys=True)\n+            w2 = self.nodes[1].get_wallet_rpc(\"w2_\" + str(encrypted))\n+\n+            self.log.info(\"Get xpub for BIP 84 native SegWit account 0\")\n+            res = w1.getxpub(\"m/84'/1'/0'\")\n+            self.log.debug(res)\n+            assert(res['xpub'])\n+            assert_equal(res['fingerprint'], fpr)\n+            assert_equal(res['origin'], \"[\" + fpr + \"/84'/1'/0']\")\n+\n+            self.log.info(\"Import descriptor using the xpub and fingerprint\")\n+            desc_receive = \"wpkh([\" + fpr + \"/84/1h/0h]\" + res['xpub'] + \"/0/*)\"\n+            desc_change = \"wpkh([\" + fpr + \"/84/1h/0h]\" + res['xpub'] + \"/1/*)\"\n+            res2 = w2.importdescriptors([{\"desc\":descsum_create(desc_receive),\n+                                         \"timestamp\": \"now\",\n+                                         \"active\": True,\n+                                         \"internal\": False,\n+                                         \"range\": [0, 10]},\n+                                        {\"desc\":descsum_create(desc_change),\n+                                         \"timestamp\": \"now\",\n+                                         \"active\": True,\n+                                         \"internal\": True,\n+                                         \"range\": [0, 10]}\n+                                        ])\n+            assert(res2[0]['success'] and res2[1]['success'])\n+\n+            self.log.info(\"Sanity check imported xpub\")\n+            w1_address_0 = w1.getnewaddress(address_type=\"bech32\")\n+            w2_address_0 = w2.getnewaddress(address_type=\"bech32\")\n+            assert_equal(w1_address_0, w2_address_0)\n+\n+if __name__ == '__main__':\n+    WalletGetxpubTest().main()"
      }
    ]
  },
  {
    "sha": "9b87cb43a413a6a1b9512939369c5ba23f7c87dd",
    "node_id": "C_kwDOABII59oAKDliODdjYjQzYTQxM2E2YTFiOTUxMjkzOTM2OWM1YmEyM2Y3Yzg3ZGQ",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-18T16:28:02Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-18T16:52:35Z"
      },
      "message": "rpc: addhdseed",
      "tree": {
        "sha": "29f3565175cefdb3731218991e75780fa0b89197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29f3565175cefdb3731218991e75780fa0b89197"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b87cb43a413a6a1b9512939369c5ba23f7c87dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmGWhNQACgkQV/+b28ww\nEAkJqw/+NfJ42MhW70Vf7FRva7BfOzzYqwWwehOvoJOkV168v750Sbp8IqrzhPlM\nZOxVJklilmMwr4FBgCF0QcFcv7MEOd0I2eQvvHhANl6TZWkH4k0VCS8C40dS1443\n0GrO8HwKajjFmLVux3D1t1YNn+MkVxKAhgNdd6UciQDG+koIEhMiEY3aY4ulI7/o\n8aR6hyfviYnsZwD7600ccm7c8itSJPt8rohhhfgE19Y3bnmxJ0Q/WRYSGVSXmjxK\nwGsF65DpoGQt7xr8ETJTmmhoERFKTWIC+EJBbp8PCtbkhETbLuvxAeUdXsGxYOZa\naEJt614qAp4+SsQlxFkF2qEg7r0aX0aY0L8rkDvLnpAzy62CYeR7y/iYoEcjzZzy\nqV/+cb/CP7VCWQMv8KXZGoiD5ls1zkoUcEi6NvmjwzJuGfih9u6MTr3RHaW4bZHI\nBOkHPZuf/tlzHbmrn3jW5s+ZysQ/uCqnYBCaPyx9cMqLsa3shnzrvDcV55c98slZ\ngr07Q06oWGifA0//W3lBKr5lWi5tOMcB31ZGgq7BL3GI/tvlTDOnJpk+MzaPGf0R\nVG/D1ylJOFRnV3yT1od4Ir/Az7pIidjyIcNFe6FCuYXLnatQSG6WPrSTIP+oLBuO\n2Hoj/rpRBWLbAn1hwTDeHCMpYX3S3vv+cLAlWjwGJXQPQ1HCYCE=\n=mS4s\n-----END PGP SIGNATURE-----",
        "payload": "tree 29f3565175cefdb3731218991e75780fa0b89197\nparent 47aa1e88cb733ca81dd2d58f0600f08e6617d11a\nauthor Sjors Provoost <sjors@sprovoost.nl> 1637252882 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1637254355 +0100\n\nrpc: addhdseed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b87cb43a413a6a1b9512939369c5ba23f7c87dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b87cb43a413a6a1b9512939369c5ba23f7c87dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b87cb43a413a6a1b9512939369c5ba23f7c87dd/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47aa1e88cb733ca81dd2d58f0600f08e6617d11a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47aa1e88cb733ca81dd2d58f0600f08e6617d11a"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 71,
      "deletions": 0
    },
    "files": [
      {
        "sha": "976d8ab03a55c64cf2f4bc384acdf78392f4c02a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 71,
        "deletions": 0,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b87cb43a413a6a1b9512939369c5ba23f7c87dd/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b87cb43a413a6a1b9512939369c5ba23f7c87dd/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9b87cb43a413a6a1b9512939369c5ba23f7c87dd",
        "patch": "@@ -4524,6 +4524,76 @@ static RPCHelpMan sethdseed()\n     };\n }\n \n+static RPCHelpMan addhdseed()\n+{\n+    return RPCHelpMan{\"addhdseed\",\n+                \"\\nAdd new HD wallet seed to a descriptor wallet.\\n\"\n+                \"\\nNote that you will need to MAKE A NEW BACKUP of your wallet after adding an HD wallet seed.\" +\n+        HELP_REQUIRING_PASSPHRASE,\n+                {\n+                    {\"seed\", RPCArg::Type::STR, RPCArg::DefaultHint{\"random seed\"}, \"The WIF private key to use as the new HD seed.\\n\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {\n+                        {RPCResult::Type::STR, \"fingerprint\", \"The master key fingerprint\"},\n+                    }},\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"addhdseed\", \"\")\n+            + HelpExampleCli(\"addhdseed\", \"\\\"wifkey\\\"\")\n+            + HelpExampleRpc(\"addhdseed\", \"\\\"wifkey\\\"\")\n+                },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"addhdseed is not available for non-descriptor wallets\");\n+    }\n+    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot add a HD seed to a wallet with private keys disabled\");\n+    }\n+\n+    EnsureWalletIsUnlocked(*pwallet);\n+\n+    KeyManager& keyman = pwallet->GetKeyManager();\n+    LOCK2(pwallet->cs_wallet, keyman.cs_keyman);\n+\n+    CPubKey master_pub_key;\n+    if (request.params[0].isNull()) {\n+        keyman.GenerateAndSetHDKey();\n+    } else {\n+        CKey key = DecodeSecret(request.params[0].get_str());\n+        if (!key.IsValid()) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key\");\n+        }\n+\n+        // if (HaveKey(spk_man, key)) {\n+        //     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key (either as an HD seed or as a loose private key)\");\n+        // }\n+\n+        // master_pub_key = spk_man.DeriveNewSeed(key);\n+    }\n+\n+    // spk_man.SetHDSeed(master_pub_key);\n+\n+    // Get the master key fingerprint by deriving an arbitry child\n+    const std::optional<CExtKey> master_key = keyman.GetActiveHDKey();\n+    CHECK_NONFATAL(master_key != std::nullopt);\n+    CExtKey child_key;\n+    master_key->Derive(child_key, 0);\n+    const std::string fingerprint = HexStr(child_key.vchFingerprint);\n+\n+    UniValue obj(UniValue::VOBJ);\n+    obj.pushKV(\"fingerprint\", fingerprint);\n+    return obj;\n+},\n+    };\n+}\n+\n static RPCHelpMan walletprocesspsbt()\n {\n     return RPCHelpMan{\"walletprocesspsbt\",\n@@ -4915,6 +4985,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    &fundrawtransaction,             },\n     { \"wallet\",             &abandontransaction,             },\n     { \"wallet\",             &abortrescan,                    },\n+    { \"wallet\",             &addhdseed,                      },\n     { \"wallet\",             &addmultisigaddress,             },\n     { \"wallet\",             &backupwallet,                   },\n     { \"wallet\",             &bumpfee,                        },"
      }
    ]
  },
  {
    "sha": "d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff",
    "node_id": "C_kwDOABII59oAKGQ3ZjEwNjhmODFjNzdjYTE5ZDJhZWI2YjQyYTVlYWRiZjUzNDJlZmY",
    "commit": {
      "author": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-18T16:52:28Z"
      },
      "committer": {
        "name": "Sjors Provoost",
        "email": "sjors@sprovoost.nl",
        "date": "2021-11-18T20:03:07Z"
      },
      "message": " wallet: match xpub in imported descriptor to existing seed",
      "tree": {
        "sha": "564cc348869e0f4204b2c5a866973140b344df53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/564cc348869e0f4204b2c5a866973140b344df53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7ZvfetalXiMuhFJCV/+b28wwEAkFAmGWsXwACgkQV/+b28ww\nEAnC6hAApM2LHOMGqWrUzgxD1KE8Lbh8Mpod+w5ACm3nDX23G21GUoSEeX4Q8mf/\nRR9djBaSXy0FQZNnaZ1FHmer7+OmpQOOErbpRaxvkmpJRdCT8hWLkwSnP8pTmyOk\nEQ8h8Kp18lyCZ9fF7pSodz7pEyY/5VQF8s444xptuXmBJVnGaDyZqmp0kkS0JDMS\nH1TkPcxlsVe0cAgJXP0W/MAi+M7EIpSQP0Nw1avG3ZFXKYGQ1k5tScLxFSHbRhXZ\nwbi8KvM21gonFxcujShVTL2IoCEPORHfHSBmKSuxNb3PTg/r9Eie1vkDVHOIZ7FB\n4Z3QZC8jX7/bkHUonG9ElaR8Me0/RHWi7tWVTkd3pAH2riaobg9CTJ+ghOAAfwXU\n35rbfOsUup162MyunX3Pt4xbAMDnUJql248WtFW7j587Hzr/ubYGzSyQleVn/Ugo\nS83OQZjXf6t5SrrMGdQ3QgU533cCDPNY4GotkB+pv+sUQelJzpQdu7ZKs3xCPYBb\n8uFnRSvx4fzLXxJitJX2bHzC8UvzzpGqjMRWUo7HWrFOOYNk4VR34yzd8ZENU7RE\nRyzxrmEzE0dN/3d1PdogOX8JGkucItRbVgmk/JNIR76ufWURjqEtk+PXg96XKxym\n+ENDo3UCoOi2m8X6aazSYKecvH+vdHngVtECQ8xuO6+3E2mgKUo=\n=Lqfl\n-----END PGP SIGNATURE-----",
        "payload": "tree 564cc348869e0f4204b2c5a866973140b344df53\nparent 9b87cb43a413a6a1b9512939369c5ba23f7c87dd\nauthor Sjors Provoost <sjors@sprovoost.nl> 1637254348 +0100\ncommitter Sjors Provoost <sjors@sprovoost.nl> 1637265787 +0100\n\n wallet: match xpub in imported descriptor to existing seed\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff/comments",
    "author": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9b87cb43a413a6a1b9512939369c5ba23f7c87dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b87cb43a413a6a1b9512939369c5ba23f7c87dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9b87cb43a413a6a1b9512939369c5ba23f7c87dd"
      }
    ],
    "stats": {
      "total": 38,
      "additions": 30,
      "deletions": 8
    },
    "files": [
      {
        "sha": "3fd5efaaf086b8be205f4ebc12557b7088539603",
        "filename": "src/script/signingprovider.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff/src/script/signingprovider.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff/src/script/signingprovider.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.cpp?ref=d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff",
        "patch": "@@ -59,6 +59,13 @@ bool FlatSigningProvider::GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info)\n     return ret;\n }\n bool FlatSigningProvider::GetKey(const CKeyID& keyid, CKey& key) const { return LookupHelper(keys, keyid, key); }\n+bool FlatSigningProvider::DeriveKey(const CKeyID& keyid, const KeyOriginInfo& key_origin, CKey& key) const {\n+    // TODO:\n+    // * look for seed matching fingerprint\n+    // * derive path\n+    // * sanity check that keyid matches derived key\n+    return LookupHelper(keys, keyid, key);\n+}\n bool FlatSigningProvider::GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const\n {\n     return LookupHelper(tr_spenddata, output_key, spenddata);"
      },
      {
        "sha": "2d19e0665c9045bbd0d1622a4ae11889a0d623b5",
        "filename": "src/script/signingprovider.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff/src/script/signingprovider.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff/src/script/signingprovider.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/signingprovider.h?ref=d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff",
        "patch": "@@ -82,6 +82,7 @@ struct FlatSigningProvider final : public SigningProvider\n     bool GetPubKey(const CKeyID& keyid, CPubKey& pubkey) const override;\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override;\n     bool GetKey(const CKeyID& keyid, CKey& key) const override;\n+    bool DeriveKey(const CKeyID& keyid, const KeyOriginInfo& key_origin, CKey& key) const;\n     bool GetTaprootSpendData(const XOnlyPubKey& output_key, TaprootSpendData& spenddata) const override;\n };\n "
      },
      {
        "sha": "c769a887a586e29148d76bf245b2c4c20b5611d7",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 8,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=d7f1068f81c77ca19d2aeb6b42a5eadbf5342eff",
        "patch": "@@ -1527,23 +1527,37 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n         }\n \n         // Need to ExpandPrivate to check if private keys are available for all pubkeys\n-        FlatSigningProvider expand_keys;\n+        // Keys we find in the descriptor (xpriv)\n+        FlatSigningProvider descriptor_keys;\n+        // If the descriptor contains an xpub, try all wallet seeds.\n+        FlatSigningProvider wallet_keys;\n+        KeyManager& keyman = wallet.GetKeyManager();\n+        LOCK(keyman.cs_keyman);\n+        wallet_keys.keys = keyman.GetKeys();\n         std::vector<CScript> scripts;\n-        if (!parsed_desc->Expand(0, keys, scripts, expand_keys)) {\n+        if (!parsed_desc->Expand(0, keys, scripts, descriptor_keys)) {\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot expand descriptor. Probably because of hardened derivations without private keys provided\");\n         }\n-        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, descriptor_keys);\n+\n+        // Check if all private keys are provided, either by the descriptor or\n+        // pre-existing (hd) wallet keys.\n+        bool have_all_privkeys = !descriptor_keys.keys.empty() || !wallet_keys.keys.empty();\n+        fprintf(stderr, \"have_all_privkeys %d\\n\", have_all_privkeys);\n+        for (const auto& entry : descriptor_keys.origins) {\n+            fprintf(stderr, \"fpr: %s\\n\", HexStr(entry.second.second.fingerprint).c_str());\n+            fprintf(stderr, \"path: %s\\n\", FormatHDKeypath(entry.second.second.path).c_str());\n \n-        // Check if all private keys are provided\n-        bool have_all_privkeys = !expand_keys.keys.empty();\n-        for (const auto& entry : expand_keys.origins) {\n             const CKeyID& key_id = entry.first;\n+            const KeyOriginInfo& key_origin = entry.second.second;\n             CKey key;\n-            if (!expand_keys.GetKey(key_id, key)) {\n+            if (!descriptor_keys.GetKey(key_id, key) && !wallet_keys.DeriveKey(key_id, key_origin, key)) {\n                 have_all_privkeys = false;\n+                fprintf(stderr, \"Not found!\\n\");\n                 break;\n             }\n         }\n+        fprintf(stderr, \"have_all_privkeys %d\\n\", have_all_privkeys);\n \n         // Taproot descriptors cannot be imported if Taproot is not yet active.\n         // Check if this is a Taproot descriptor\n@@ -1559,7 +1573,7 @@ static UniValue ProcessDescriptorImport(CWallet& wallet, const UniValue& data, c\n \n         // If private keys are enabled, check some things.\n         if (!wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-           if (keys.keys.empty()) {\n+           if (keys.keys.empty() && !have_all_privkeys) {\n                 throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n            }\n            if (!have_all_privkeys) {"
      }
    ]
  }
]