[
  {
    "sha": "9dabfe49c066301ef75bcfcb089fd308366127c4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZGFiZmU0OWMwNjYzMDFlZjc1YmNmY2IwODlmZDMwODM2NjEyN2M0",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-04-26T19:56:29Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-05-04T20:26:12Z"
      },
      "message": "Add constant scriptCode policy in non-segwit scripts\n\nThis disables OP_CODESEPARATOR in non-segwit scripts (even in an unexecuted branch), and makes a positive FindAndDelete result invalid. This ensures that the scriptCode serialized in SignatureHash() is always the same as the script passing to the EvalScript.",
      "tree": {
        "sha": "9640b1303dc21c3dc68463833d9f34145a118b2e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9640b1303dc21c3dc68463833d9f34145a118b2e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9dabfe49c066301ef75bcfcb089fd308366127c4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dabfe49c066301ef75bcfcb089fd308366127c4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9dabfe49c066301ef75bcfcb089fd308366127c4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dabfe49c066301ef75bcfcb089fd308366127c4/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "627c3762ce5d8ce097f70c7fb52a3640246fae9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/627c3762ce5d8ce097f70c7fb52a3640246fae9b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/627c3762ce5d8ce097f70c7fb52a3640246fae9b"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 29,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6ba3ba7450e243da506bffafd773996a1e9a3820",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dabfe49c066301ef75bcfcb089fd308366127c4/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dabfe49c066301ef75bcfcb089fd308366127c4/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=9dabfe49c066301ef75bcfcb089fd308366127c4",
        "patch": "@@ -63,7 +63,8 @@ static constexpr unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VE\n                                                              SCRIPT_VERIFY_LOW_S |\n                                                              SCRIPT_VERIFY_WITNESS |\n                                                              SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n-                                                             SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n+                                                             SCRIPT_VERIFY_WITNESS_PUBKEYTYPE |\n+                                                             SCRIPT_VERIFY_CONST_SCRIPTCODE;\n \n /** For convenience, standard but not mandatory verify flags. */\n static constexpr unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "13f41a7cbfd00f873630ef61f5e861e95ce98e40",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=9dabfe49c066301ef75bcfcb089fd308366127c4",
        "patch": "@@ -336,6 +336,10 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                 opcode == OP_RSHIFT)\n                 return set_error(serror, SCRIPT_ERR_DISABLED_OPCODE); // Disabled opcodes.\n \n+            // With SCRIPT_VERIFY_CONST_SCRIPTCODE, OP_CODESEPARATOR in non-segwit script is rejected even in an unexecuted branch\n+            if (opcode == OP_CODESEPARATOR && sigversion == SigVersion::BASE && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n+                return set_error(serror, SCRIPT_ERR_OP_CODESEPARATOR);\n+\n             if (fExec && 0 <= opcode && opcode <= OP_PUSHDATA4) {\n                 if (fRequireMinimal && !CheckMinimalPush(vchPushValue, opcode)) {\n                     return set_error(serror, SCRIPT_ERR_MINIMALDATA);\n@@ -899,6 +903,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n \n                 case OP_CODESEPARATOR:\n                 {\n+                    // If SCRIPT_VERIFY_CONST_SCRIPTCODE flag is set, use of OP_CODESEPARATOR is rejected in pre-segwit\n+                    // script, even in an unexecuted branch (this is checked above the opcode case statement).\n+\n                     // Hash starts after the code separator\n                     pbegincodehash = pc;\n                 }\n@@ -919,7 +926,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n \n                     // Drop the signature in pre-segwit scripts but not segwit scripts\n                     if (sigversion == SigVersion::BASE) {\n-                        FindAndDelete(scriptCode, CScript(vchSig));\n+                        int found = FindAndDelete(scriptCode, CScript(vchSig));\n+                        if (found > 0 && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n+                            return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n                     }\n \n                     if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n@@ -983,7 +992,9 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     {\n                         valtype& vchSig = stacktop(-isig-k);\n                         if (sigversion == SigVersion::BASE) {\n-                            FindAndDelete(scriptCode, CScript(vchSig));\n+                            int found = FindAndDelete(scriptCode, CScript(vchSig));\n+                            if (found > 0 && (flags & SCRIPT_VERIFY_CONST_SCRIPTCODE))\n+                                return set_error(serror, SCRIPT_ERR_SIG_FINDANDDELETE);\n                         }\n                     }\n "
      },
      {
        "sha": "2800473a68ad3324a8497c47772f228b7d6c03bf",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=9dabfe49c066301ef75bcfcb089fd308366127c4",
        "patch": "@@ -111,6 +111,10 @@ enum\n     // Public keys in segregated witness scripts must be compressed\n     //\n     SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),\n+\n+    // Making OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts\n+    //\n+    SCRIPT_VERIFY_CONST_SCRIPTCODE = (1U << 16),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);"
      },
      {
        "sha": "ceda740580807488c7e4b30937bbfcef63d734d2",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=9dabfe49c066301ef75bcfcb089fd308366127c4",
        "patch": "@@ -89,6 +89,10 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Witness provided for non-witness script\";\n         case SCRIPT_ERR_WITNESS_PUBKEYTYPE:\n             return \"Using non-compressed keys in segwit\";\n+        case SCRIPT_ERR_OP_CODESEPARATOR:\n+            return \"Using OP_CODESEPARATOR in non-witness script\";\n+        case SCRIPT_ERR_SIG_FINDANDDELETE:\n+            return \"Signature is found in scriptCode\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "6982a087f40a723fce3ab681928d9ede2364c387",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dabfe49c066301ef75bcfcb089fd308366127c4/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=9dabfe49c066301ef75bcfcb089fd308366127c4",
        "patch": "@@ -64,6 +64,10 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_WITNESS_UNEXPECTED,\n     SCRIPT_ERR_WITNESS_PUBKEYTYPE,\n \n+    /* Constant scriptCode */\n+    SCRIPT_ERR_OP_CODESEPARATOR,\n+    SCRIPT_ERR_SIG_FINDANDDELETE,\n+\n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;\n "
      },
      {
        "sha": "39cca90e8323646eb542caf9821a2f9d8380b59d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9dabfe49c066301ef75bcfcb089fd308366127c4/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9dabfe49c066301ef75bcfcb089fd308366127c4/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9dabfe49c066301ef75bcfcb089fd308366127c4",
        "patch": "@@ -97,6 +97,8 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_WITNESS_MALLEATED_P2SH, \"WITNESS_MALLEATED_P2SH\"},\n     {SCRIPT_ERR_WITNESS_UNEXPECTED, \"WITNESS_UNEXPECTED\"},\n     {SCRIPT_ERR_WITNESS_PUBKEYTYPE, \"WITNESS_PUBKEYTYPE\"},\n+    {SCRIPT_ERR_OP_CODESEPARATOR, \"OP_CODESEPARATOR\"},\n+    {SCRIPT_ERR_SIG_FINDANDDELETE, \"SIG_FINDANDDELETE\"},\n };\n \n const char *FormatScriptError(ScriptError_t err)"
      }
    ]
  },
  {
    "sha": "0f8719bb035187076eeac025e2c786feb0f452d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjg3MTliYjAzNTE4NzA3NmVlYWMwMjVlMmM3ODZmZWIwZjQ1MmQ3",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2017-10-20T20:24:14Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-05-04T20:26:13Z"
      },
      "message": "Add transaction tests for constant scriptCode\n\nTests showing that CONST_SCRIPTCODE is applied only to non-segwit transactions",
      "tree": {
        "sha": "bb6abca9cbf4ba152669c762f34e991d430fc4cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb6abca9cbf4ba152669c762f34e991d430fc4cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f8719bb035187076eeac025e2c786feb0f452d7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8719bb035187076eeac025e2c786feb0f452d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8719bb035187076eeac025e2c786feb0f452d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8719bb035187076eeac025e2c786feb0f452d7/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9dabfe49c066301ef75bcfcb089fd308366127c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9dabfe49c066301ef75bcfcb089fd308366127c4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9dabfe49c066301ef75bcfcb089fd308366127c4"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 54,
      "deletions": 5
    },
    "files": [
      {
        "sha": "918df6d8d9d08e3eedc4430357ddf51598722d00",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 48,
        "deletions": 0,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8719bb035187076eeac025e2c786feb0f452d7/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8719bb035187076eeac025e2c786feb0f452d7/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=0f8719bb035187076eeac025e2c786feb0f452d7",
        "patch": "@@ -340,5 +340,53 @@\n [[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n \"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c03959601010221023cb6055f4b57a1580c5a753e19610cafaedf7e0ff377731c77837fd666eae1712102c1b1db303ac232ffa8e5e7cc2cf5f96c6e40d3e6914061204c0541cb2043a0969552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n \n+[\"SCRIPT_VERIFY_CONST_SCRIPTCODE tests\"],\n+[\"All transactions are copied from OP_CODESEPARATOR tests in tx_valid.json\"],\n+\n+[[[\"bc7fd132fcf817918334822ee6d9bd95c889099c96e07ca2c1eb2cc70db63224\", 0, \"CODESEPARATOR 0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIG\"]],\n+  \"01000000012432b60dc72cebc1a27ce0969c0989c895bdd9e62e8234839117f8fc32d17fbc000000004a493046022100a576b52051962c25e642c0fd3d77ee6c92487048e5d90818bcf5b51abaccd7900221008204f8fb121be4ec3b24483b1f92d89b1b0548513a134e345c5442e86e8617a501ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+[[[\"83e194f90b6ef21fa2e3a365b63794fb5daa844bdc9b25de30899fcfe7b01047\", 0, \"CODESEPARATOR CODESEPARATOR 0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIG\"]],\n+  \"01000000014710b0e7cf9f8930de259bdc4b84aa5dfb9437b665a3e3a21ff26e0bf994e183000000004a493046022100a166121a61b4eeb19d8f922b978ff6ab58ead8a5a5552bf9be73dc9c156873ea02210092ad9bc43ee647da4f6652c320800debcf08ec20a094a0aaf085f63ecb37a17201ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[[[\"326882a7f22b5191f1a0cc9962ca4b878cd969cf3b3a70887aece4d801a0ba5e\", 0, \"0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CODESEPARATOR CHECKSIG\"]],\n+  \"01000000015ebaa001d8e4ec7a88703a3bcf69d98c874bca6299cca0f191512bf2a7826832000000004948304502203bf754d1c6732fbf87c5dcd81258aefd30f2060d7bd8ac4a5696f7927091dad1022100f5bcb726c4cf5ed0ed34cc13dadeedf628ae1045b7cb34421bc60b89f4cecae701ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIGVERIFY CODESEPARATOR 0x21 0x038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n+  \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a900000000924830450221009c0a27f886a1d8cb87f6f595fbc3163d28f7a81ec3c4b252ee7f3ac77fd13ffa02203caa8dfa09713c8c4d7ef575c75ed97812072405d932bd11e6a1593a98b679370148304502201e3861ef39a526406bad1e20ecad06be7375ad40ddb582c9be42d26c3a0d7b240221009d0a3985e96522e59635d19cc4448547477396ce0ef17a58e7d74c3ef464292301ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"CODESEPARATOR in an unexecuted IF block is still invalid\"],\n+[[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n+  \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a48304502207a6974a77c591fa13dff60cabbb85a0de9e025c09c65a4b2285e47ce8e22f761022100f0efaac9ff8ac36b10721e0aae1fb975c90500b50c56e8a0cc52b0403f0425dd0100ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"CODESEPARATOR in an executed IF block is invalid\"],\n+[[[\"a955032f4d6b0c9bfe8cad8f00a8933790b9c1dc28c82e0f48e75b35da0e4944\", 0, \"IF CODESEPARATOR ENDIF 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 CHECKSIGVERIFY CODESEPARATOR 1\"]],\n+  \"010000000144490eda355be7480f2ec828dcc1b9903793a8008fad8cfe9b0c6b4d2f0355a9000000004a483045022100fa4a74ba9fd59c59f46c3960cf90cbe0d2b743c471d24a3d5d6db6002af5eebb02204d70ec490fd0f7055a7c45f86514336e3a7f03503dacecabb247fc23f15c83510151ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+\n+[\"Using CHECKSIG with singatures in scriptSigs will trigger FindAndDelete, which is invalid\"],\n+[[[\"ccf7f4053a02e653c36ac75c891b7496d0dc5ce5214f6c913d9cf8f1329ebee0\", 0, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"0100000001e0be9e32f1f89c3d916c4f21e55cdcd096741b895cc76ac353e6023a05f4f7cc00000000d86149304602210086e5f736a2c3622ebb62bd9d93d8e5d76508b98be922b97160edc3dcca6d8c47022100b23c312ac232a4473f19d2aeb95ab7bdf2b65518911a0d72d50e38b5dd31dc820121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ac4730440220508fa761865c8abd81244a168392876ee1d94e8ed83897066b5e2df2400dad24022043f5ee7538e87e9c6aef7ef55133d3e51da7cc522830a9c4d736977a76ef755c0121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"OP_CODESEPARATOR in scriptSig is invalid\"],\n+[[[\"10c9f0effe83e97f80f067de2b11c6a00c3088a4bce42c5ae761519af9306f3c\", 1, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"01000000013c6f30f99a5161e75a2ce4bca488300ca0c6112bde67f0807fe983feeff0c91001000000e608646561646265656675ab61493046022100ce18d384221a731c993939015e3d1bcebafb16e8c0b5b5d14097ec8177ae6f28022100bcab227af90bab33c3fe0a9abfee03ba976ee25dc6ce542526e9b2e56e14b7f10121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ac493046022100c3b93edcc0fd6250eb32f2dd8a0bba1754b0f6c3be8ed4100ed582f3db73eba2022100bf75b5bd2eff4d6bf2bda2e34a40fcc07d4aa3cf862ceaa77b47b81eff829f9a01ab21038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"Again, FindAndDelete() in scriptSig\"],\n+[[[\"6056ebd549003b10cbbd915cea0d82209fe40b8617104be917a26fa92cbe3d6f\", 0, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"01000000016f3dbe2ca96fa217e94b1017860be49f20820dea5c91bdcb103b0049d5eb566000000000fd1d0147304402203989ac8f9ad36b5d0919d97fa0a7f70c5272abee3b14477dc646288a8b976df5022027d19da84a066af9053ad3d1d7459d171b7e3a80bc6c4ef7a330677a6be548140147304402203989ac8f9ad36b5d0919d97fa0a7f70c5272abee3b14477dc646288a8b976df5022027d19da84a066af9053ad3d1d7459d171b7e3a80bc6c4ef7a330677a6be548140121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ac47304402203757e937ba807e4a5da8534c17f9d121176056406a6465054bdd260457515c1a02200f02eccf1bec0f3a0d65df37889143c2e88ab7acec61a7b6f5aa264139141a2b0121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[[[\"5a6b0021a6042a686b6b94abc36b387bef9109847774e8b1e51eb8cc55c53921\", 1, \"DUP HASH160 0x14 0xee5a6aa40facefb2655ac23c0c28c57c65c41f9b EQUALVERIFY CHECKSIG\"]],\n+  \"01000000012139c555ccb81ee5b1e87477840991ef7b386bc3ab946b6b682a04a621006b5a01000000fdb40148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390121038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f2204148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a5800390175ac4830450220646b72c35beeec51f4d5bc1cbae01863825750d7f490864af354e6ea4f625e9c022100f04b98432df3a9641719dbced53393022e7249fb59db993af1118539830aab870148304502201723e692e5f409a7151db386291b63524c5eb2030df652b1f53022fd8207349f022100b90d9bbf2f3366ce176e5e780a00433da67d9e5c79312c6388312a296a580039017521038479a0fa998cd35259a2ef0a7a5c68662c1474f88ccb6d08a7677bbec7f22041ffffffff010000000000000000016a00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"FindAndDelete() in redeemScript\"],\n+[[[\"b5b598de91787439afd5938116654e0b16b7a0d0f82742ba37564219c5afcbf9\", 0, \"DUP HASH160 0x14 0xf6f365c40f0739b61de827a44751e5e99032ed8f EQUALVERIFY CHECKSIG\"],\n+  [\"ab9805c6d57d7070d9a42c5176e47bb705023e6b67249fb6760880548298e742\", 0, \"HASH160 0x14 0xd8dacdadb7462ae15cd906f1878706d0da8660e6 EQUAL\"]],\n+  \"0100000002f9cbafc519425637ba4227f8d0a0b7160b4e65168193d5af39747891de98b5b5000000006b4830450221008dd619c563e527c47d9bd53534a770b102e40faa87f61433580e04e271ef2f960220029886434e18122b53d5decd25f1f4acb2480659fea20aabd856987ba3c3907e0121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffff42e7988254800876b69f24676b3e0205b77be476512ca4d970707dd5c60598ab00000000fd260100483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a53034930460221008431bdfa72bc67f9d41fe72e94c88fb8f359ffa30b33c72c121c5a877d922e1002210089ef5fc22dd8bfc6bf9ffdb01a9862d27687d424d1fefbab9e9c7176844a187a014c9052483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303210378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71210378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c7153aeffffffff01a08601000000000017a914d8dacdadb7462ae15cd906f1878706d0da8660e68700000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n+[\"FindAndDelete() in bare CHECKMULTISIG\"],\n+[[[\"ceafe58e0f6e7d67c0409fbbf673c84c166e3c5d3c24af58f7175b18df3bb3db\", 0, \"DUP HASH160 0x14 0xf6f365c40f0739b61de827a44751e5e99032ed8f EQUALVERIFY CHECKSIG\"],\n+  [\"ceafe58e0f6e7d67c0409fbbf673c84c166e3c5d3c24af58f7175b18df3bb3db\", 1, \"2 0x48 0x3045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 0x21 0x0378d430274f8c5ec1321338151e9f27f4c676a008bdf8638d07c0b6be9ab35c71 3 CHECKMULTISIG\"]],\n+  \"0100000002dbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce000000006b4830450221009627444320dc5ef8d7f68f35010b4c050a6ed0d96b67a84db99fda9c9de58b1e02203e4b4aaa019e012e65d69b487fdf8719df72f488fa91506a80c49a33929f1fd50121022b78b756e2258af13779c1a1f37ea6800259716ca4b7f0b87610e0bf3ab52a01ffffffffdbb33bdf185b17f758af243c5d3c6e164cc873f6bb9f40c0677d6e0f8ee5afce010000009300483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303483045022015bd0139bcccf990a6af6ec5c1c52ed8222e03a0d51c334df139968525d2fcd20221009f9efe325476eb64c3958e4713e9eefe49bf1d820ed58d2112721b134e2a1a5303ffffffff01a0860100000000001976a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac00000000\", \"P2SH,CONST_SCRIPTCODE\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "4a1c77166d1dca39ac23271e6ae24d6391130494",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8719bb035187076eeac025e2c786feb0f452d7/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8719bb035187076eeac025e2c786feb0f452d7/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=0f8719bb035187076eeac025e2c786feb0f452d7",
        "patch": "@@ -477,17 +477,17 @@\n [\"BIP143 example: P2WSH with OP_CODESEPARATOR and out-of-range SIGHASH_SINGLE.\"],\n [[[\"6eb316926b1c5d567cd6f5e6a84fec606fc53d7b474526d1fff3948020c93dfe\", 0, \"0x21 0x036d5c20fa14fb2f635474c1dc4ef5909d4568e5569b79fc94d3448486e14685f8 CHECKSIG\", 156250000],\n [\"f825690aee1b3dc247da796cacb12687a5e802429fd291cfd63e010f02cf1508\", 0, \"0x00 0x20 0x5d1b56b63d714eebe542309525f484b7e9d6f686b3781b6f61ef925d66d6f6a0\", 4900000000]],\n-\"01000000000102fe3dc9208094f3ffd12645477b3dc56f60ec4fa8e6f5d67c565d1c6b9216b36e000000004847304402200af4e47c9b9629dbecc21f73af989bdaa911f7e6f6c2e9394588a3aa68f81e9902204f3fcf6ade7e5abb1295b6774c8e0abd94ae62217367096bc02ee5e435b67da201ffffffff0815cf020f013ed6cf91d29f4202e8a58726b1ac6c79da47c23d1bee0a6925f80000000000ffffffff0100f2052a010000001976a914a30741f8145e5acadf23f751864167f32e0963f788ac000347304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac00000000\", \"P2SH,WITNESS\"],\n+\"01000000000102fe3dc9208094f3ffd12645477b3dc56f60ec4fa8e6f5d67c565d1c6b9216b36e000000004847304402200af4e47c9b9629dbecc21f73af989bdaa911f7e6f6c2e9394588a3aa68f81e9902204f3fcf6ade7e5abb1295b6774c8e0abd94ae62217367096bc02ee5e435b67da201ffffffff0815cf020f013ed6cf91d29f4202e8a58726b1ac6c79da47c23d1bee0a6925f80000000000ffffffff0100f2052a010000001976a914a30741f8145e5acadf23f751864167f32e0963f788ac000347304402200de66acf4527789bfda55fc5459e214fa6083f936b430a762c629656216805ac0220396f550692cd347171cbc1ef1f51e15282e837bb2b30860dc77c8f78bc8501e503473044022027dc95ad6b740fe5129e7e62a75dd00f291a2aeb1200b84b09d9e3789406b6c002201a9ecd315dd6a0e632ab20bbb98948bc0c6fb204f2c286963bb48517a7058e27034721026dccc749adc2a9d0d89497ac511f760f45c47dc5ed9cf352a58ac706453880aeadab210255a9626aebf5e29c0e6538428ba0d1dcf6ca98ffdf086aa8ced5e0d0215ea465ac00000000\", \"P2SH,WITNESS,CONST_SCRIPTCODE\"],\n \n [\"BIP143 example: P2WSH with unexecuted OP_CODESEPARATOR and SINGLE|ANYONECANPAY\"],\n [[[\"01c0cf7fba650638e55eb91261b183251fbb466f90dff17f10086817c542b5e9\", 0, \"0x00 0x20 0xba468eea561b26301e4cf69fa34bde4ad60c81e70f059f045ca9a79931004a4d\", 16777215],\n [\"1b2a9a426ba603ba357ce7773cb5805cb9c7c2b386d100d1fc9263513188e680\", 0, \"0x00 0x20 0xd9bbfbe56af7c4b7f960a70d7ea107156913d9e5a26b0a71429df5e097ca6537\", 16777215]],\n-\"01000000000102e9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff80e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffff0280969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac80969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS\"],\n+\"01000000000102e9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff80e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffff0280969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac80969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS,CONST_SCRIPTCODE\"],\n \n [\"BIP143 example: Same as the previous example with input-output pairs swapped\"],\n [[[\"1b2a9a426ba603ba357ce7773cb5805cb9c7c2b386d100d1fc9263513188e680\", 0, \"0x00 0x20 0xd9bbfbe56af7c4b7f960a70d7ea107156913d9e5a26b0a71429df5e097ca6537\", 16777215],\n [\"01c0cf7fba650638e55eb91261b183251fbb466f90dff17f10086817c542b5e9\", 0, \"0x00 0x20 0xba468eea561b26301e4cf69fa34bde4ad60c81e70f059f045ca9a79931004a4d\", 16777215]],\n-\"0100000000010280e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffffe9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff0280969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac80969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS\"],\n+\"0100000000010280e68831516392fcd100d186b3c2c7b95c80b53c77e77c35ba03a66b429a2a1b0000000000ffffffffe9b542c5176808107ff1df906f46bb1f2583b16112b95ee5380665ba7fcfc0010000000000ffffffff0280969800000000001976a9146648a8cd4531e1ec47f35916de8e259237294d1e88ac80969800000000001976a914de4b231626ef508c9a74a8517e6783c0546d6b2888ac024730440220032521802a76ad7bf74d0e2c218b72cf0cbc867066e2e53db905ba37f130397e02207709e2188ed7f08f4c952d9d13986da504502b8c3be59617e043552f506c46ff83275163ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac02483045022100f6a10b8604e6dc910194b79ccfc93e1bc0ec7c03453caaa8987f7d6c3413566002206216229ede9b4d6ec2d325be245c5b508ff0339bf1794078e20bfe0babc7ffe683270063ab68210392972e2eb617b2388771abe27235fd5ac44af8e61693261550447a4c3e39da98ac00000000\", \"P2SH,WITNESS,CONST_SCRIPTCODE\"],\n \n [\"BIP143 example: P2SH-P2WSH 6-of-6 multisig signed with 6 different SIGHASH types\"],\n [[[\"6eb98797a21c6c10aa74edf29d618be109f48a8e94c694f3701e08ca69186436\", 1, \"HASH160 0x14 0x9993a429037b5d912407a71c252019287b8d27a5 EQUAL\", 987654321]],\n@@ -504,7 +504,7 @@\n \"010000000169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f1581b0000b64830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0121037a3fb04bcdb09eba90f69961ba1692a3528e45e67c85b200df820212d7594d334aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n [\"BIP143: correct sighash (without FindAndDelete) = 71c9cd9b2869b9c70b01b1f0360c148f42dee72297db312638df136f43311f23\"],\n [[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7500, \"0x00 0x20 0x9e1be07558ea5cc8e02ed1d80c0911048afad949affa36d5c3951e3159dbea19\", 200000]],\n-\"0100000000010169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f14c1d000000ffffffff01010000000000000000034830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012102a9781d66b61fb5a7ef00ac5ad5bc6ffc78be7b44a566e3c87870e1079368df4c4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0100000000\", \"P2SH,WITNESS\"],\n+\"0100000000010169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f14c1d000000ffffffff01010000000000000000034830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012102a9781d66b61fb5a7ef00ac5ad5bc6ffc78be7b44a566e3c87870e1079368df4c4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0100000000\", \"P2SH,WITNESS,CONST_SCRIPTCODE\"],\n [\"This is multisig version of the FindAndDelete tests\"],\n [\"Script is 2 CHECKMULTISIGVERIFY <sig1> <sig2> DROP\"],\n [\"52af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175\"],\n@@ -514,7 +514,7 @@\n \"01000000019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a662896581b0000fd6f01004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c03959601522102cd74a2809ffeeed0092bc124fd79836706e41f048db3f6ae9df8708cefb83a1c2102e615999372426e46fd107b76eaf007156a507584aa2cc21de9eee3bdbd26d36c4c9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n [\"BIP143: correct sighash (without FindAndDelete) = c1628a1e7c67f14ca0c27c06e4fdeec2e6d1a73c7a91d7c046ff83e835aebb72\"],\n [[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n-\"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960101022102966f109c54e85d3aee8321301136cedeb9fc710fdef58a9de8a73942f8e567c021034ffc99dd9a79dd3cb31e2ab3e0b09e0e67db41ac068c625cd1f491576016c84e9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n+\"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960101022102966f109c54e85d3aee8321301136cedeb9fc710fdef58a9de8a73942f8e567c021034ffc99dd9a79dd3cb31e2ab3e0b09e0e67db41ac068c625cd1f491576016c84e9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS,CONST_SCRIPTCODE\"],\n \n [\"Test long outputs, which are streamed using length-prefixed bitcoin strings. This might be surprising.\"],\n [[[\"1111111111111111111111111111111111111111111111111111111111111111\", 0, \"0x00 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6\", 5000000]],"
      },
      {
        "sha": "5fd5038369b813e4d37ddcec947febb69124953a",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f8719bb035187076eeac025e2c786feb0f452d7/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f8719bb035187076eeac025e2c786feb0f452d7/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=0f8719bb035187076eeac025e2c786feb0f452d7",
        "patch": "@@ -53,6 +53,7 @@ static std::map<std::string, unsigned int> mapFlagNames = {\n     {std::string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS},\n     {std::string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM},\n     {std::string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE},\n+    {std::string(\"CONST_SCRIPTCODE\"), (unsigned int)SCRIPT_VERIFY_CONST_SCRIPTCODE},\n };\n \n unsigned int ParseScriptFlags(std::string strFlags)"
      }
    ]
  },
  {
    "sha": "7485488e907e236133a016ba7064c89bf9ab6da3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDg1NDg4ZTkwN2UyMzYxMzNhMDE2YmE3MDY0Yzg5YmY5YWI2ZGEz",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-04-26T19:31:36Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-05-04T20:26:13Z"
      },
      "message": "Policy to reject extremely small transactions\n\nA transaction with 1 segwit input and 1 P2WPHK output has non-witness size of 82 bytes. Anything smaller than this have unnecessary malloc overhead and are not relayed/mined.",
      "tree": {
        "sha": "a0a9edf5d749f6f89510b51ece2b152d7d8cf0e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0a9edf5d749f6f89510b51ece2b152d7d8cf0e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7485488e907e236133a016ba7064c89bf9ab6da3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7485488e907e236133a016ba7064c89bf9ab6da3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7485488e907e236133a016ba7064c89bf9ab6da3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7485488e907e236133a016ba7064c89bf9ab6da3/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0f8719bb035187076eeac025e2c786feb0f452d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f8719bb035187076eeac025e2c786feb0f452d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0f8719bb035187076eeac025e2c786feb0f452d7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5ce019df4c7f2d26a5912d2b41aa1bb2ef857523",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7485488e907e236133a016ba7064c89bf9ab6da3/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7485488e907e236133a016ba7064c89bf9ab6da3/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=7485488e907e236133a016ba7064c89bf9ab6da3",
        "patch": "@@ -22,6 +22,8 @@ static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = MAX_BLOCK_WEIGHT - 4000;\n static const unsigned int DEFAULT_BLOCK_MIN_TX_FEE = 1000;\n /** The maximum weight for transactions we're willing to relay/mine */\n static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n+/** The minimum non-witness size for transactions we're willing to relay/mine (1 segwit input + 1 P2WPKH output = 82 bytes) */\n+static const unsigned int MIN_STANDARD_TX_NONWITNESS_SIZE = 82;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */"
      },
      {
        "sha": "571e764043af045ea9bbb5590d8f201b9e38894d",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7485488e907e236133a016ba7064c89bf9ab6da3/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7485488e907e236133a016ba7064c89bf9ab6da3/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=7485488e907e236133a016ba7064c89bf9ab6da3",
        "patch": "@@ -582,6 +582,12 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     if (fRequireStandard && !IsStandardTx(tx, reason, witnessEnabled))\n         return state.DoS(0, false, REJECT_NONSTANDARD, reason);\n \n+    // Do not work on transactions that are too small.\n+    // A transaction with 1 segwit input and 1 P2WPHK output has non-witness size of 82 bytes.\n+    // Transactions smaller than this are not relayed to reduce unnecessary malloc overhead.\n+    if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) < MIN_STANDARD_TX_NONWITNESS_SIZE)\n+        return state.DoS(0, false, REJECT_NONSTANDARD, \"tx-size-small\");\n+\n     // Only accept nLockTime-using transactions that can be mined in the next\n     // block; we don't want our mempool filled up with transactions that can't\n     // be mined yet."
      }
    ]
  },
  {
    "sha": "364bae5f7a6b16eef63990154e48f19e7e693039",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjRiYWU1ZjdhNmIxNmVlZjYzOTkwMTU0ZTQ4ZjE5ZTdlNjkzMDM5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-05-03T20:50:25Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2018-05-04T20:59:55Z"
      },
      "message": "qa: Pad scriptPubKeys to get minimum sized txs",
      "tree": {
        "sha": "0ef3fde608d5bd41a3cdc6ccc7285ba58354218f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ef3fde608d5bd41a3cdc6ccc7285ba58354218f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/364bae5f7a6b16eef63990154e48f19e7e693039",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/364bae5f7a6b16eef63990154e48f19e7e693039",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/364bae5f7a6b16eef63990154e48f19e7e693039",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/364bae5f7a6b16eef63990154e48f19e7e693039/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7485488e907e236133a016ba7064c89bf9ab6da3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7485488e907e236133a016ba7064c89bf9ab6da3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7485488e907e236133a016ba7064c89bf9ab6da3"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 48,
      "deletions": 45
    },
    "files": [
      {
        "sha": "beff0507f6227fd37290fc412b7a32223db1264d",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=364bae5f7a6b16eef63990154e48f19e7e693039",
        "patch": "@@ -80,7 +80,7 @@ def test_disable_flag(self):\n         tx2.nVersion = 2\n         sequence_value = sequence_value & 0x7fffffff\n         tx2.vin = [CTxIn(COutPoint(tx1_id, 0), nSequence=sequence_value)]\n-        tx2.vout = [CTxOut(int(value-self.relayfee*COIN), CScript([b'a']))]\n+        tx2.vout = [CTxOut(int(value - self.relayfee * COIN), CScript([b'a' * 35]))]\n         tx2.rehash()\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx2))\n@@ -222,7 +222,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n             tx = CTransaction()\n             tx.nVersion = 2\n             tx.vin = [CTxIn(COutPoint(orig_tx.sha256, 0), nSequence=sequence_value)]\n-            tx.vout = [CTxOut(int(orig_tx.vout[0].nValue - relayfee*COIN), CScript([b'a']))]\n+            tx.vout = [CTxOut(int(orig_tx.vout[0].nValue - relayfee * COIN), CScript([b'a' * 35]))]\n             tx.rehash()\n \n             if (orig_tx.hash in node.getrawmempool()):\n@@ -350,7 +350,7 @@ def test_bip68_not_consensus(self):\n         tx3 = CTransaction()\n         tx3.nVersion = 2\n         tx3.vin = [CTxIn(COutPoint(tx2.sha256, 0), nSequence=sequence_value)]\n-        tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee*COIN), CScript([b'a']))]\n+        tx3.vout = [CTxOut(int(tx2.vout[0].nValue - self.relayfee * COIN), CScript([b'a' * 35]))]\n         tx3.rehash()\n \n         assert_raises_rpc_error(-26, NOT_FINAL_ERROR, self.nodes[0].sendrawtransaction, ToHex(tx3))"
      },
      {
        "sha": "f943fdf1765281a5e7792da4e95bec865d8bd86e",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=364bae5f7a6b16eef63990154e48f19e7e693039",
        "patch": "@@ -32,6 +32,7 @@\n     OP_ELSE,\n     OP_ENDIF,\n     OP_EQUAL,\n+    OP_DROP,\n     OP_FALSE,\n     OP_HASH160,\n     OP_IF,\n@@ -1215,7 +1216,7 @@ def add_transactions_to_block(self, block, tx_list):\n         block.vtx.extend(tx_list)\n \n     # this is a little handier to use than the version in blocktools.py\n-    def create_tx(self, spend_tx, n, value, script=CScript([OP_TRUE])):\n+    def create_tx(self, spend_tx, n, value, script=CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])):\n         return create_transaction(spend_tx, n, b\"\", value, script)\n \n     # sign a transaction, using the key we know about"
      },
      {
        "sha": "c087960782795b045916ef93bb6819ddb2f25622",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 23,
        "deletions": 23,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=364bae5f7a6b16eef63990154e48f19e7e693039",
        "patch": "@@ -123,7 +123,7 @@ def test_simple_doublespend(self):\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n@@ -132,7 +132,7 @@ def test_simple_doublespend(self):\n         # Should fail because we haven't changed the fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(1*COIN, CScript([b'b']))]\n+        tx1b.vout = [CTxOut(1 * COIN, CScript([b'b' * 35]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception due to insufficient fee\n@@ -143,7 +143,7 @@ def test_simple_doublespend(self):\n         # Extra 0.1 BTC fee\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n+        tx1b.vout = [CTxOut(int(0.9 * COIN), CScript([b'b' * 35]))]\n         tx1b_hex = txToHex(tx1b)\n         # Replacement still disabled even with \"enough fee\"\n         assert_raises_rpc_error(-26, \"txn-mempool-conflict\", self.nodes[1].sendrawtransaction, tx1b_hex, True)\n@@ -175,7 +175,7 @@ def test_doublespend_chain(self):\n             remaining_value -= 1*COIN\n             tx = CTransaction()\n             tx.vin = [CTxIn(prevout, nSequence=0)]\n-            tx.vout = [CTxOut(remaining_value, CScript([1]))]\n+            tx.vout = [CTxOut(remaining_value, CScript([1, OP_DROP] * 15 + [1]))]\n             tx_hex = txToHex(tx)\n             txid = self.nodes[0].sendrawtransaction(tx_hex, True)\n             chain_txids.append(txid)\n@@ -185,7 +185,7 @@ def test_doublespend_chain(self):\n         # child fees - 40 BTC - so this attempt is rejected.\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        dbl_tx.vout = [CTxOut(initial_nValue - 30*COIN, CScript([1]))]\n+        dbl_tx.vout = [CTxOut(initial_nValue - 30 * COIN, CScript([1] * 35))]\n         dbl_tx_hex = txToHex(dbl_tx)\n \n         # This will raise an exception due to insufficient fee\n@@ -194,7 +194,7 @@ def test_doublespend_chain(self):\n         # Accepted with sufficient fee\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        dbl_tx.vout = [CTxOut(1*COIN, CScript([1]))]\n+        dbl_tx.vout = [CTxOut(1 * COIN, CScript([1] * 35))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n \n@@ -247,15 +247,15 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n         # Attempt double-spend, will fail because too little fee paid\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        dbl_tx.vout = [CTxOut(initial_nValue - fee*n, CScript([1]))]\n+        dbl_tx.vout = [CTxOut(initial_nValue - fee * n, CScript([1] * 35))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         # This will raise an exception due to insufficient fee\n         assert_raises_rpc_error(-26, \"insufficient fee\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n \n         # 1 BTC fee is enough\n         dbl_tx = CTransaction()\n         dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        dbl_tx.vout = [CTxOut(initial_nValue - fee*n - 1*COIN, CScript([1]))]\n+        dbl_tx.vout = [CTxOut(initial_nValue - fee * n - 1 * COIN, CScript([1] * 35))]\n         dbl_tx_hex = txToHex(dbl_tx)\n         self.nodes[0].sendrawtransaction(dbl_tx_hex, True)\n \n@@ -275,7 +275,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n             dbl_tx = CTransaction()\n             dbl_tx.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-            dbl_tx.vout = [CTxOut(initial_nValue - 2*fee*n, CScript([1]))]\n+            dbl_tx.vout = [CTxOut(initial_nValue - 2 * fee * n, CScript([1] * 35))]\n             dbl_tx_hex = txToHex(dbl_tx)\n             # This will raise an exception\n             assert_raises_rpc_error(-26, \"too many potential replacements\", self.nodes[0].sendrawtransaction, dbl_tx_hex, True)\n@@ -290,7 +290,7 @@ def test_replacement_feeperkb(self):\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n         self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n@@ -311,7 +311,7 @@ def test_spends_of_conflicting_outputs(self):\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(utxo1, nSequence=0)]\n-        tx1a.vout = [CTxOut(int(1.1*COIN), CScript([b'a']))]\n+        tx1a.vout = [CTxOut(int(1.1 * COIN), CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n@@ -330,7 +330,7 @@ def test_spends_of_conflicting_outputs(self):\n         # Spend tx1a's output to test the indirect case.\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n-        tx1b.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1b.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1b_hex = txToHex(tx1b)\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n         tx1b_txid = int(tx1b_txid, 16)\n@@ -351,7 +351,7 @@ def test_new_unconfirmed_inputs(self):\n \n         tx1 = CTransaction()\n         tx1.vin = [CTxIn(confirmed_utxo)]\n-        tx1.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1_hex = txToHex(tx1)\n         self.nodes[0].sendrawtransaction(tx1_hex, True)\n \n@@ -390,7 +390,7 @@ def test_too_many_replacements(self):\n         for i in range(MAX_REPLACEMENT_LIMIT+1):\n             tx_i = CTransaction()\n             tx_i.vin = [CTxIn(COutPoint(txid, i), nSequence=0)]\n-            tx_i.vout = [CTxOut(split_value-fee, CScript([b'a']))]\n+            tx_i.vout = [CTxOut(split_value - fee, CScript([b'a' * 35]))]\n             tx_i_hex = txToHex(tx_i)\n             self.nodes[0].sendrawtransaction(tx_i_hex, True)\n \n@@ -423,14 +423,14 @@ def test_opt_in(self):\n         # Create a non-opting in transaction\n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0xffffffff)]\n-        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n         # Shouldn't be able to double-spend\n         tx1b = CTransaction()\n         tx1b.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n+        tx1b.vout = [CTxOut(int(0.9 * COIN), CScript([b'b' * 35]))]\n         tx1b_hex = txToHex(tx1b)\n \n         # This will raise an exception\n@@ -441,14 +441,14 @@ def test_opt_in(self):\n         # Create a different non-opting in transaction\n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0xfffffffe)]\n-        tx2a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx2a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx2a_hex = txToHex(tx2a)\n         tx2a_txid = self.nodes[0].sendrawtransaction(tx2a_hex, True)\n \n         # Still shouldn't be able to double-spend\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n-        tx2b.vout = [CTxOut(int(0.9*COIN), CScript([b'b']))]\n+        tx2b.vout = [CTxOut(int(0.9 * COIN), CScript([b'b' * 35]))]\n         tx2b_hex = txToHex(tx2b)\n \n         # This will raise an exception\n@@ -471,12 +471,12 @@ def test_opt_in(self):\n \n         tx3b = CTransaction()\n         tx3b.vin = [CTxIn(COutPoint(tx1a_txid, 0), nSequence=0)]\n-        tx3b.vout = [CTxOut(int(0.5*COIN), CScript([b'e']))]\n+        tx3b.vout = [CTxOut(int(0.5 * COIN), CScript([b'e' * 35]))]\n         tx3b_hex = txToHex(tx3b)\n \n         tx3c = CTransaction()\n         tx3c.vin = [CTxIn(COutPoint(tx2a_txid, 0), nSequence=0)]\n-        tx3c.vout = [CTxOut(int(0.5*COIN), CScript([b'f']))]\n+        tx3c.vout = [CTxOut(int(0.5 * COIN), CScript([b'f' * 35]))]\n         tx3c_hex = txToHex(tx3c)\n \n         self.nodes[0].sendrawtransaction(tx3b_hex, True)\n@@ -493,7 +493,7 @@ def test_prioritised_transactions(self):\n \n         tx1a = CTransaction()\n         tx1a.vin = [CTxIn(tx0_outpoint, nSequence=0)]\n-        tx1a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx1a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx1a_hex = txToHex(tx1a)\n         tx1a_txid = self.nodes[0].sendrawtransaction(tx1a_hex, True)\n \n@@ -519,14 +519,14 @@ def test_prioritised_transactions(self):\n \n         tx2a = CTransaction()\n         tx2a.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n-        tx2a.vout = [CTxOut(1*COIN, CScript([b'a']))]\n+        tx2a.vout = [CTxOut(1 * COIN, CScript([b'a' * 35]))]\n         tx2a_hex = txToHex(tx2a)\n         self.nodes[0].sendrawtransaction(tx2a_hex, True)\n \n         # Lower fee, but we'll prioritise it\n         tx2b = CTransaction()\n         tx2b.vin = [CTxIn(tx1_outpoint, nSequence=0)]\n-        tx2b.vout = [CTxOut(int(1.01*COIN), CScript([b'a']))]\n+        tx2b.vout = [CTxOut(int(1.01 * COIN), CScript([b'a' * 35]))]\n         tx2b.rehash()\n         tx2b_hex = txToHex(tx2b)\n "
      },
      {
        "sha": "3622e1834a6aa76bc8ace8a3bb60800f126fe7f0",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=364bae5f7a6b16eef63990154e48f19e7e693039",
        "patch": "@@ -16,7 +16,7 @@\n from test_framework.util import *\n from test_framework.mininode import sha256, CTransaction, CTxIn, COutPoint, CTxOut, COIN, ToHex, FromHex\n from test_framework.address import script_to_p2sh, key_to_p2pkh\n-from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE\n+from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP\n from io import BytesIO\n \n NODE_0 = 0\n@@ -212,7 +212,7 @@ def run_test(self):\n         # Now create tx2, which will spend from txid1.\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid1, 16), 0), b''))\n-        tx.vout.append(CTxOut(int(49.99*COIN), CScript([OP_TRUE])))\n+        tx.vout.append(CTxOut(int(49.99 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = FromHex(CTransaction(), tx2_hex)\n@@ -221,7 +221,7 @@ def run_test(self):\n         # Now create tx3, which will spend from txid2\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n-        tx.vout.append(CTxOut(int(49.95*COIN), CScript([OP_TRUE]))) # Huge fee\n+        tx.vout.append(CTxOut(int(49.95 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))  # Huge fee\n         tx.calc_sha256()\n         txid3 = self.nodes[0].sendrawtransaction(ToHex(tx))\n         assert(tx.wit.is_null())"
      },
      {
        "sha": "cb4c9867a3edcbbdf4b894060d36ab8f7959377a",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=364bae5f7a6b16eef63990154e48f19e7e693039",
        "patch": "@@ -12,7 +12,8 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n-from test_framework.script import CScript, OP_TRUE\n+from test_framework.script import CScript, OP_TRUE, OP_DROP\n+\n \n # TestP2PConn: A peer we use to send messages to bitcoind, and store responses.\n class TestP2PConn(P2PInterface):\n@@ -423,7 +424,7 @@ def build_block_with_transactions(self, node, utxo, num_transactions):\n         for i in range(num_transactions):\n             tx = CTransaction()\n             tx.vin.append(CTxIn(COutPoint(utxo[0], utxo[1]), b''))\n-            tx.vout.append(CTxOut(utxo[2] - 1000, CScript([OP_TRUE])))\n+            tx.vout.append(CTxOut(utxo[2] - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n             tx.rehash()\n             utxo = [tx.sha256, 0, tx.vout[0].nValue]\n             block.vtx.append(tx)"
      },
      {
        "sha": "a12c1d60231ca75f5b66995c87b3b8d8d2e94a2d",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=364bae5f7a6b16eef63990154e48f19e7e693039",
        "patch": "@@ -70,7 +70,7 @@ def run_test(self):\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n         # and we get disconnected immediately\n         self.log.info('Test a transaction that is rejected')\n-        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        tx1 = create_transaction(block1.vtx[0], 0, b'\\x64' * 35, 50 * COIN - 12000)\n         node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n \n         # Make two p2p connections to provide the node with orphans\n@@ -81,32 +81,33 @@ def run_test(self):\n         self.log.info('Test orphan transaction handling ... ')\n         # Create a root transaction that we withold until all dependend transactions\n         # are sent out and in the orphan cache\n+        SCRIPT_PUB_KEY_OP_TRUE = b'\\x51\\x75' * 15 + b'\\x51'\n         tx_withhold = CTransaction()\n         tx_withhold.vin.append(CTxIn(outpoint=COutPoint(block1.vtx[0].sha256, 0)))\n-        tx_withhold.vout.append(CTxOut(nValue=50 * COIN - 12000, scriptPubKey=b'\\x51'))\n+        tx_withhold.vout.append(CTxOut(nValue=50 * COIN - 12000, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\n         tx_withhold.calc_sha256()\n \n         # Our first orphan tx with some outputs to create further orphan txs\n         tx_orphan_1 = CTransaction()\n         tx_orphan_1.vin.append(CTxIn(outpoint=COutPoint(tx_withhold.sha256, 0)))\n-        tx_orphan_1.vout = [CTxOut(nValue=10 * COIN, scriptPubKey=b'\\x51')] * 3\n+        tx_orphan_1.vout = [CTxOut(nValue=10 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE)] * 3\n         tx_orphan_1.calc_sha256()\n \n         # A valid transaction with low fee\n         tx_orphan_2_no_fee = CTransaction()\n         tx_orphan_2_no_fee.vin.append(CTxIn(outpoint=COutPoint(tx_orphan_1.sha256, 0)))\n-        tx_orphan_2_no_fee.vout.append(CTxOut(nValue=10 * COIN, scriptPubKey=b'\\x51'))\n+        tx_orphan_2_no_fee.vout.append(CTxOut(nValue=10 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\n \n         # A valid transaction with sufficient fee\n         tx_orphan_2_valid = CTransaction()\n         tx_orphan_2_valid.vin.append(CTxIn(outpoint=COutPoint(tx_orphan_1.sha256, 1)))\n-        tx_orphan_2_valid.vout.append(CTxOut(nValue=10 * COIN - 12000, scriptPubKey=b'\\x51'))\n+        tx_orphan_2_valid.vout.append(CTxOut(nValue=10 * COIN - 12000, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\n         tx_orphan_2_valid.calc_sha256()\n \n         # An invalid transaction with negative fee\n         tx_orphan_2_invalid = CTransaction()\n         tx_orphan_2_invalid.vin.append(CTxIn(outpoint=COutPoint(tx_orphan_1.sha256, 2)))\n-        tx_orphan_2_invalid.vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=b'\\x51'))\n+        tx_orphan_2_invalid.vout.append(CTxOut(nValue=11 * COIN, scriptPubKey=SCRIPT_PUB_KEY_OP_TRUE))\n \n         self.log.info('Send the orphans ... ')\n         # Send valid orphan txs from p2ps[0]"
      },
      {
        "sha": "ba6d12c070b95cebbb9ae4b3fdc6101ac583d608",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/364bae5f7a6b16eef63990154e48f19e7e693039/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=364bae5f7a6b16eef63990154e48f19e7e693039",
        "patch": "@@ -173,7 +173,7 @@ def test_non_witness_transaction(self):\n         # Create a transaction that spends the coinbase\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(txid, 0), b\"\"))\n-        tx.vout.append(CTxOut(49*100000000, CScript([OP_TRUE])))\n+        tx.vout.append(CTxOut(49 * 100000000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx.calc_sha256()\n \n         # Check that serializing it with or without witness is the same\n@@ -264,7 +264,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         # Now create a new anyone-can-spend utxo for the next test.\n         tx4 = CTransaction()\n         tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), CScript([p2sh_program])))\n-        tx4.vout.append(CTxOut(tx3.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        tx4.vout.append(CTxOut(tx3.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx4.rehash()\n         test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, False, True)\n         test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx4, False, True)\n@@ -893,7 +893,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         assert(len(self.utxo))\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n-        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx.wit.vtxinwit.append(CTxInWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n         tx.rehash()\n@@ -945,7 +945,7 @@ def test_tx_relay_after_segwit_activation(self):\n         assert(len(self.utxo))\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n-        tx.vout.append(CTxOut(self.utxo[0].nValue-1000, CScript([OP_TRUE])))\n+        tx.vout.append(CTxOut(self.utxo[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))\n         tx.wit.vtxinwit.append(CTxInWitness())\n         tx.wit.vtxinwit[0].scriptWitness.stack = [ b'a' ]\n         tx.rehash()\n@@ -989,7 +989,7 @@ def test_tx_relay_after_segwit_activation(self):\n         test_transaction_acceptance(self.nodes[1].rpc, self.std_node, tx3, True, False, b'tx-size')\n \n         # Remove witness stuffing, instead add extra witness push on stack\n-        tx3.vout[0] = CTxOut(tx2.vout[0].nValue-1000, CScript([OP_TRUE]))\n+        tx3.vout[0] = CTxOut(tx2.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))\n         tx3.wit.vtxinwit[0].scriptWitness.stack = [CScript([CScriptNum(1)]), witness_program ]\n         tx3.rehash()\n \n@@ -1177,15 +1177,15 @@ def test_standardness_v0(self, segwit_activated):\n             # P2PKH output; just send tx's first output back to an anyone-can-spend.\n             sync_mempools([self.nodes[0], self.nodes[1]])\n             tx3.vin = [CTxIn(COutPoint(tx.sha256, 0), b\"\")]\n-            tx3.vout = [CTxOut(tx.vout[0].nValue-1000, CScript([OP_TRUE]))]\n+            tx3.vout = [CTxOut(tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))]\n             tx3.wit.vtxinwit.append(CTxInWitness())\n             tx3.wit.vtxinwit[0].scriptWitness.stack = [witness_program]\n             tx3.rehash()\n             test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n         else:\n             # tx and tx2 didn't go anywhere; just clean up the p2sh_tx output.\n             tx3.vin = [CTxIn(COutPoint(p2sh_tx.sha256, 0), CScript([witness_program]))]\n-            tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue-1000, witness_program)]\n+            tx3.vout = [CTxOut(p2sh_tx.vout[0].nValue - 1000, CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE]))]\n             tx3.rehash()\n             test_transaction_acceptance(self.nodes[0].rpc, self.test_node, tx3, with_witness=True, accepted=True)\n "
      }
    ]
  }
]