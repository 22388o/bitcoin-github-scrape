jl2012,2017-09-29T21:45:32Z,"This is part of #8755\n@TheBlueMatt ",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333246577,333246577,
TheBlueMatt,2017-09-29T21:48:01Z,"Strong Concept ACK. We do ML posts for new standardness rules, right? Probably doesn't matter given their lack of use.",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333246988,333246988,
sipa,2017-09-29T22:18:29Z,Any reason to support OP_CODESEPARATOR inside P2WSH?,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333252262,333252262,
TheBlueMatt,2017-09-29T22:27:57Z,"I'd prefer we be consistent. Especially if OP_CODESEPARATOR has no meaning in SegWit transactions we should just make it nonstandard everywhere.\n\nOn September 29, 2017 6:18:36 PM EDT, Pieter Wuille <notifications@github.com> wrote:\n>Any reason to support OP_CODESEPARATOR inside P2WSH?\n>\n>-- \n>You are receiving this because you were mentioned.\n>Reply to this email directly or view it on GitH",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333253658,333253658,
jl2012,2017-09-30T05:33:34Z,"@sipa I think @NicolasDorier has something that use CODESEPARATOR. I think it could make the size of some contracts smaller.\n\nThis is actually part of the attempt to fix the pre-segwit quadratic sighash problem. A variable `scriptCode` makes sighash caching more difficult. That's why I proposed to do it for pre-segwit only",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333285381,333285381,
NicolasDorier,2017-10-02T04:40:44Z,"```\nAny reason to support OP_CODESEPARATOR inside P2WSH?\n```\n\nYES, I am using it for tumblebit, it saves 33 bytes per outputs. It allows you to sign a specific branch with one key instead of having separate public key per branch. Please do not do that until we have at least MAST.  (only if signing in MAST requires the scriptCode to depends on the executed branch)\n\nOP_CODESEPARATOR is v",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333439463,333439463,
NicolasDorier,2017-10-02T05:01:00Z,"Just to explain my case here:\nImagine the following: Alice, expect Bob to publish a transaction satisfying the PAYMENT condition to get the preimage of <BOB_HASH>.\n\n```\nOP_DEPTH 3 EQUAL\nOP_IF\n    2 <ALICE_KEY_PAYMENT> <BOB_KEY_PAYMENT> MULTICHECKSIGVERIFY HASH160 <BOB_HASH> EQUAL\nOP_ELSE\n    <ALICE_KEY_REDEEM> CHECKSIG CLTV DROP\nOP_END\n```\n\nIf ALICE_KEY_PAYMENT == ALICE_KEY",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-333441321,333441321,
jgarzik,2017-10-04T03:32:35Z,"concept ACK\n",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-334041013,334041013,
TheBlueMatt,2017-11-14T18:57:26Z,"utACK effb6f9568a92ad6fe0ebf9da308cb0237df327b. One interesting test-case you may consider adding is checking that a FindAndDelete does not match (and thus the script is valid, even with CONST_SCRIPTCODE) a push with a non-minimal push encoding.",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-344360955,344360955,
jonasschnelli,2017-11-15T07:12:20Z,"utACK 0575b1831cd52987c76320d304674a27a140fe1f\n* IMO requires bitcoin-dev ML post (if merged)\n* requires release notes part (can be done after merging)",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-344505687,344505687,
TheBlueMatt,2017-11-27T16:35:45Z,Relevant ML thread is at https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2017-November/015292.html,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-347239836,347239836,
NicolasDorier,2017-11-28T07:02:25Z,"Just to clarify, OP_CODESEP could be removed completely from segwit if there is another way to explicitely sign a script path. (MAST could allow that)",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-347432283,347432283,
jl2012,2018-02-06T19:35:45Z,rebased,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-363539417,363539417,
esotericnonsense,2018-02-20T14:48:41Z,"utACK 850c41c2a33efd73eff0bbdefc6ba2762901b60e\nchecked the diff of tx_valid and tx_invalid.json",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-367000589,367000589,
jl2012,2018-02-20T18:11:35Z,Rebase with comments fixed (s/invalid/rejected/),https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-367067259,367067259,
laanwj,2018-05-03T16:11:30Z,"Rebased (for 6a7456ad6072f405e8b02bffa0fb4e9f0cfe71e0) version here: https://github.com/laanwj/bitcoin/tree/2018_05_temp_11423\nFeel free to take over.",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-386349857,386349857,
MarcoFalke,2018-05-03T16:19:03Z,"What is the status here? Given that we'll probably do a 0.16.1 release soon, should this be included?",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-386352118,386352118,
NicolasDorier,2018-05-04T17:56:34Z,utACK.,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-386684698,386684698,
jl2012,2018-05-04T21:21:32Z,"Rebased, and added another standardness rule to reject transaction smaller than 82 bytes (non-segwit size). 82 bytes is the size for a transaction with 1 segwit input and 1 P2WPKH output. Anything smaller than this have unnecessary malloc overhead",https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-386738527,386738527,
TheBlueMatt,2018-05-06T19:46:21Z,utACK 364bae5f7a6b16eef63990154e48f19e7e693039,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-386907986,386907986,
sipa,2018-05-06T22:36:15Z,utACK 364bae5f7a6b16eef63990154e48f19e7e693039,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-386922119,386922119,
laanwj,2018-05-12T15:39:00Z,utACK 364bae5f7a6b16eef63990154e48f19e7e693039,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-388563340,388563340,
fanquake,2018-05-28T09:36:23Z,Backported in #13317.,https://github.com/bitcoin/bitcoin/pull/11423#issuecomment-392475381,392475381,
TheBlueMatt,2017-10-03T17:44:11Z,"For correctness, may wish to note that if FindAndDelete matches in either SegWit or non-SegWit, the script fails, OP_CODESEPARATOR limitation only applies to non-SegWit.",https://github.com/bitcoin/bitcoin/pull/11423#discussion_r142472048,142472048,src/script/interpreter.h
jl2012,2017-10-03T17:55:00Z,`FindAndDelete` is not used anywhere in segwit,https://github.com/bitcoin/bitcoin/pull/11423#discussion_r142474799,142474799,src/script/interpreter.h
TheBlueMatt,2017-10-03T18:00:01Z,"Oops, indeed, missed the sigversion check.",https://github.com/bitcoin/bitcoin/pull/11423#discussion_r142476187,142476187,src/script/interpreter.h
NicolasDorier,2017-10-04T03:17:52Z,nit: would have pushed that in the switch case for OP_CODESEPARATOR.,https://github.com/bitcoin/bitcoin/pull/11423#discussion_r142573647,142573647,src/script/interpreter.cpp
TheBlueMatt,2017-11-07T21:51:58Z,"nit: comments on script flags shouldnt reference standardness - this flag ""Makes OP_CODESEPARATOR and FindAndDelete fail any non-segwit scripts"", not just make them nonstandard.",https://github.com/bitcoin/bitcoin/pull/11423#discussion_r149515031,149515031,src/script/interpreter.h
luke-jr,2017-11-10T14:13:25Z,The switch case wouldn't get reached if it's in an unexecuted branch...?,https://github.com/bitcoin/bitcoin/pull/11423#discussion_r150244318,150244318,src/script/interpreter.cpp
luke-jr,2017-11-10T14:13:49Z,"""Invalid"" is the wrong term here, since it's just a policy rule (for now).",https://github.com/bitcoin/bitcoin/pull/11423#discussion_r150244433,150244433,src/script/interpreter.cpp
NicolasDorier,2017-11-11T02:24:56Z,"Yep, disregard what I said, it would not have worked.",https://github.com/bitcoin/bitcoin/pull/11423#discussion_r150371542,150371542,src/script/interpreter.cpp
Sjors,2017-11-16T10:04:15Z,"Perhaps out of scope, but the word ""invalid"" is confusing. It's non-standard because this check is only part of `STANDARD_SCRIPT_VERIFY_FLAGS`. A future soft fork could make it actually invalid depending on e.g. block height. Perhaps we should use a different word like ""reject""?",https://github.com/bitcoin/bitcoin/pull/11423#discussion_r151368438,151368438,src/script/interpreter.cpp
TheBlueMatt,2017-11-16T16:40:14Z,"I mean it clearly indicates that ""With SCRIPT_VERIFY_CONST_SCRIPTCODE"", and in that case it is ""invalid"", same as any other invalid action.c",https://github.com/bitcoin/bitcoin/pull/11423#discussion_r151469637,151469637,src/script/interpreter.cpp
esotericnonsense,2018-02-20T14:38:10Z,Not particularly concerned but I agree that 'rejected' would be slightly clearer here.,https://github.com/bitcoin/bitcoin/pull/11423#discussion_r169337318,169337318,src/script/interpreter.cpp
