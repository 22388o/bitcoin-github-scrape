[
  {
    "sha": "c1b98ca4e022ab263ce464753605b34da83e40be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMWI5OGNhNGUwMjJhYjI2M2NlNDY0NzUzNjA1YjM0ZGE4M2U0MGJl",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2013-03-24T11:24:49Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2014-02-27T22:09:24Z"
      },
      "message": "Sometimes nodes send many duplicate blocks. This patch disconnects the peer that's running\nbehind. This shouldn't happen, but it can and does sometimes, so this code caters for that.\n\nThis code also becomes more important as the block download algorithm is changed in future,\nsuch as concurrent block downloads from multiple peers, and retries are sent to other peers\nwhen peers seem unresponsive, only to become responsive again later, by which time\nthey are sending duplicate blocks.",
      "tree": {
        "sha": "6f9587879d3b0505b4bbd91d64ba2d38b8235035",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f9587879d3b0505b4bbd91d64ba2d38b8235035"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c1b98ca4e022ab263ce464753605b34da83e40be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b98ca4e022ab263ce464753605b34da83e40be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c1b98ca4e022ab263ce464753605b34da83e40be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c1b98ca4e022ab263ce464753605b34da83e40be/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "afe2a203edcd98d668c80e6d688bcaffb9fccde0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/afe2a203edcd98d668c80e6d688bcaffb9fccde0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/afe2a203edcd98d668c80e6d688bcaffb9fccde0"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 18,
      "deletions": 4
    },
    "files": [
      {
        "sha": "9aa66b69c2a2a94b07be90cab3c2fe0df4b6f822",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1b98ca4e022ab263ce464753605b34da83e40be/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1b98ca4e022ab263ce464753605b34da83e40be/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c1b98ca4e022ab263ce464753605b34da83e40be",
        "patch": "@@ -2377,10 +2377,22 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n \n     // Check for duplicate\n     uint256 hash = pblock->GetHash();\n-    if (mapBlockIndex.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString()), 0, \"duplicate\");\n-    if (mapOrphanBlocks.count(hash))\n-        return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString()), 0, \"duplicate\");\n+    if (mapBlockIndex.count(hash)) {\n+        if (pfrom) {\n+            pfrom->nDupBlocks++;\n+            if (pfrom->nDupBlocks > 2) pfrom->fDisconnect = true;\n+            return state.Invalid(error(\"ProcessBlock() : already(%d) have block %d %s\", pfrom->nDupBlocks, mapBlockIndex[hash]->nHeight, hash.ToString()), 0, \"duplicate\");\n+        } else\n+            return state.Invalid(error(\"ProcessBlock() : already have block %d %s\", mapBlockIndex[hash]->nHeight, hash.ToString()), 0, \"duplicate\");\n+    }\n+    if (mapOrphanBlocks.count(hash)) {\n+        if (pfrom) {\n+            if (pfrom->nDupBlocks > 2) pfrom->fDisconnect = true;\n+            return state.Invalid(error(\"ProcessBlock() : already(%d) have block (orphan) %s\", pfrom->nDupBlocks, hash.ToString()), 0, \"duplicate\");\n+        } else\n+            return state.Invalid(error(\"ProcessBlock() : already have block (orphan) %s\", hash.ToString()), 0, \"duplicate\");\n+    }\n+    if (pfrom) pfrom->nDupBlocks = 0; // reset the counter\n \n     // Preliminary checks\n     if (!CheckBlock(*pblock, state)) {"
      },
      {
        "sha": "8af9c6f14a21e5e91a940d8d1aafc3092f5be23f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c1b98ca4e022ab263ce464753605b34da83e40be/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c1b98ca4e022ab263ce464753605b34da83e40be/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c1b98ca4e022ab263ce464753605b34da83e40be",
        "patch": "@@ -208,6 +208,7 @@ class CNode\n     std::string addrName;\n     CService addrLocal;\n     int nVersion;\n+    int nDupBlocks;\n     // strSubVer is whatever byte array we read from the wire. However, this field is intended\n     // to be printed out, displayed to humans in various forms and so on. So we sanitize it and\n     // store the sanitized version in cleanSubVer. The original should be used when dealing with\n@@ -278,6 +279,7 @@ class CNode\n         addr = addrIn;\n         addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n         nVersion = 0;\n+        nDupBlocks = 0;\n         strSubVer = \"\";\n         fOneShot = false;\n         fClient = false; // set by version message"
      }
    ]
  }
]