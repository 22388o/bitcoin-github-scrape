[
  {
    "sha": "85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NTg3MWRkNWExMWE4ZThhZjRjOTEyNGFiNDg3ZTRiMGEwZGU5OWU3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T01:15:04Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T23:42:14Z"
      },
      "message": "Add failing test checking timelocked-txn removal during reorg",
      "tree": {
        "sha": "a6a91edf50589d43b06ed508493eb876d71e7ce3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6a91edf50589d43b06ed508493eb876d71e7ce3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49793fbb097e9f00149a054adeddad07f0444c12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49793fbb097e9f00149a054adeddad07f0444c12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49793fbb097e9f00149a054adeddad07f0444c12"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 21,
      "deletions": 7
    },
    "files": [
      {
        "sha": "54e2f418e10f012decdb0ae2b9b20cc5ed6c0d81",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
        "patch": "@@ -16,6 +16,7 @@ fi\n #Run the tests\n \n testScripts=(\n+    'mempool_reorg.py'\n     'wallet.py'\n     'listtransactions.py'\n     'mempool_resurrect_test.py'\n@@ -25,7 +26,6 @@ testScripts=(\n     'rawtransactions.py'\n     'rest.py'\n     'mempool_spendcoinbase.py'\n-    'mempool_coinbase_spends.py'\n     'httpbasics.py'\n     'zapwallettxes.py'\n     'proxy_test.py'"
      },
      {
        "sha": "fdbaf689ad5b223a82b632ed9af34010de0f1fb3",
        "filename": "qa/rpc-tests/mempool_reorg.py",
        "status": "renamed",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7/qa/rpc-tests/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7/qa/rpc-tests/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_reorg.py?ref=85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
        "patch": "@@ -52,32 +52,46 @@ def run_test(self):\n         # 3. Indirect (coinbase and child both in chain) : spend_103 and spend_103_1\n         # Use invalidatblock to make all of the above coinbase spends invalid (immature coinbase),\n         # and make sure the mempool code behaves correctly.\n-        b = [ self.nodes[0].getblockhash(n) for n in range(102, 105) ]\n+        b = [ self.nodes[0].getblockhash(n) for n in range(101, 105) ]\n         coinbase_txids = [ self.nodes[0].getblock(h)['tx'][0] for h in b ]\n-        spend_101_raw = self.create_tx(coinbase_txids[0], node1_address, 50)\n-        spend_102_raw = self.create_tx(coinbase_txids[1], node0_address, 50)\n-        spend_103_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_101_raw = self.create_tx(coinbase_txids[1], node1_address, 50)\n+        spend_102_raw = self.create_tx(coinbase_txids[2], node0_address, 50)\n+        spend_103_raw = self.create_tx(coinbase_txids[3], node0_address, 50)\n+\n+        # Create a block-height-locked transaction which will be invalid after reorg\n+        timelock_tx = self.nodes[0].createrawtransaction([{\"txid\": coinbase_txids[0], \"vout\": 0}], {node0_address: 50})\n+        # Set the time lock\n+        timelock_tx = timelock_tx.replace(\"ffffffff\", \"11111111\", 1)\n+        timelock_tx = timelock_tx[:-8] + hex(self.nodes[0].getblockcount() + 2)[2:] + \"000000\"\n+        timelock_tx = self.nodes[0].signrawtransaction(timelock_tx)[\"hex\"]\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Broadcast and mine spend_102 and 103:\n         spend_102_id = self.nodes[0].sendrawtransaction(spend_102_raw)\n         spend_103_id = self.nodes[0].sendrawtransaction(spend_103_raw)\n         self.nodes[0].generate(1)\n+        assert_raises(JSONRPCException, self.nodes[0].sendrawtransaction, timelock_tx)\n \n         # Create 102_1 and 103_1:\n         spend_102_1_raw = self.create_tx(spend_102_id, node1_address, 50)\n         spend_103_1_raw = self.create_tx(spend_103_id, node1_address, 50)\n \n         # Broadcast and mine 103_1:\n         spend_103_1_id = self.nodes[0].sendrawtransaction(spend_103_1_raw)\n-        self.nodes[0].generate(1)\n+        last_block = self.nodes[0].generate(1)\n+        timelock_tx_id = self.nodes[0].sendrawtransaction(timelock_tx)\n \n         # ... now put spend_101 and spend_102_1 in memory pools:\n         spend_101_id = self.nodes[0].sendrawtransaction(spend_101_raw)\n         spend_102_1_id = self.nodes[0].sendrawtransaction(spend_102_1_raw)\n \n         self.sync_all()\n \n-        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id ]))\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, timelock_tx_id ]))\n+\n+        for node in self.nodes:\n+            node.invalidateblock(last_block[0])\n+        assert_equal(set(self.nodes[0].getrawmempool()), set([ spend_101_id, spend_102_1_id, spend_103_1_id ]))\n \n         # Use invalidateblock to re-org back and make all those coinbase spends\n         # immature/invalid:",
        "previous_filename": "qa/rpc-tests/mempool_coinbase_spends.py"
      }
    ]
  },
  {
    "sha": "2276af1501931e05979d11921d1f9104f0013e9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjc2YWYxNTAxOTMxZTA1OTc5ZDExOTIxZDFmOTEwNGYwMDEzZTlm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T01:58:17Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-08-27T23:42:17Z"
      },
      "message": "Fix removal of time-locked transactions during reorg",
      "tree": {
        "sha": "fd3af8844aa93d5d63998d4e2f6146938f1e2372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fd3af8844aa93d5d63998d4e2f6146938f1e2372"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2276af1501931e05979d11921d1f9104f0013e9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2276af1501931e05979d11921d1f9104f0013e9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2276af1501931e05979d11921d1f9104f0013e9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2276af1501931e05979d11921d1f9104f0013e9f/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/85871dd5a11a8e8af4c9124ab487e4b0a0de99e7"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 17,
      "deletions": 12
    },
    "files": [
      {
        "sha": "84dec5a7524a758ff0236818f5cf327c8d7a4a89",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2276af1501931e05979d11921d1f9104f0013e9f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2276af1501931e05979d11921d1f9104f0013e9f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2276af1501931e05979d11921d1f9104f0013e9f",
        "patch": "@@ -2040,7 +2040,7 @@ bool static DisconnectTip(CValidationState &state) {\n         if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n             mempool.remove(tx, removed, true);\n     }\n-    mempool.removeCoinbaseSpends(pcoinsTip, pindexDelete->nHeight);\n+    mempool.removeForReorg(pcoinsTip, pindexDelete->nHeight);\n     mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);"
      },
      {
        "sha": "3eca8ce7bcd6a76cd630aa4fb4f1e74eb0f8c34b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 10,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2276af1501931e05979d11921d1f9104f0013e9f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2276af1501931e05979d11921d1f9104f0013e9f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2276af1501931e05979d11921d1f9104f0013e9f",
        "patch": "@@ -11,6 +11,7 @@\n #include \"main.h\"\n #include \"policy/fees.h\"\n #include \"streams.h\"\n+#include \"timedata.h\"\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"version.h\"\n@@ -156,22 +157,26 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n     }\n }\n \n-void CTxMemPool::removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n     // Remove transactions spending a coinbase which are now immature\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->second.GetTx();\n-        BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n-            std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n-            if (it2 != mapTx.end())\n-                continue;\n-            const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-            if (fSanityCheck) assert(coins);\n-            if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n-                transactionsToRemove.push_back(tx);\n-                break;\n+        if (!IsFinalTx(tx, nMemPoolHeight, GetAdjustedTime()))\n+            transactionsToRemove.push_back(tx);\n+        else {\n+            BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+                std::map<uint256, CTxMemPoolEntry>::const_iterator it2 = mapTx.find(txin.prevout.hash);\n+                if (it2 != mapTx.end())\n+                    continue;\n+                const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n+                if (fSanityCheck) assert(coins);\n+                if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n+                    transactionsToRemove.push_back(tx);\n+                    break;\n+                }\n             }\n         }\n     }"
      },
      {
        "sha": "bd8452dbe045193d487fee406781ba48592952c5",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2276af1501931e05979d11921d1f9104f0013e9f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2276af1501931e05979d11921d1f9104f0013e9f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2276af1501931e05979d11921d1f9104f0013e9f",
        "patch": "@@ -118,7 +118,7 @@ class CTxMemPool\n \n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n     void remove(const CTransaction &tx, std::list<CTransaction>& removed, bool fRecursive = false);\n-    void removeCoinbaseSpends(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n+    void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight);\n     void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n                         std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);"
      }
    ]
  },
  {
    "sha": "b394d266def649088c08619cd32b923ed8ab3c89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzk0ZDI2NmRlZjY0OTA4OGMwODYxOWNkMzJiOTIzZWQ4YWIzYzg5",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-06T04:40:21Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-06T04:40:21Z"
      },
      "message": "Fix comment in removeForReorg",
      "tree": {
        "sha": "69f77c369fbafd99d3ebcd614a01e20a47a6cc59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/69f77c369fbafd99d3ebcd614a01e20a47a6cc59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b394d266def649088c08619cd32b923ed8ab3c89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b394d266def649088c08619cd32b923ed8ab3c89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b394d266def649088c08619cd32b923ed8ab3c89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b394d266def649088c08619cd32b923ed8ab3c89/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2276af1501931e05979d11921d1f9104f0013e9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2276af1501931e05979d11921d1f9104f0013e9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2276af1501931e05979d11921d1f9104f0013e9f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d7ad8d1049462a3c3dd5db16c0522c7f75d0fc72",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b394d266def649088c08619cd32b923ed8ab3c89/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b394d266def649088c08619cd32b923ed8ab3c89/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=b394d266def649088c08619cd32b923ed8ab3c89",
        "patch": "@@ -159,7 +159,7 @@ void CTxMemPool::remove(const CTransaction &origTx, std::list<CTransaction>& rem\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight)\n {\n-    // Remove transactions spending a coinbase which are now immature\n+    // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n     list<CTransaction> transactionsToRemove;\n     for (std::map<uint256, CTxMemPoolEntry>::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {"
      }
    ]
  },
  {
    "sha": "49a09add829eef206e3354e203dd1a195d9b1df2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWEwOWFkZDgyOWVlZjIwNmUzMzU0ZTIwM2RkMWExOTVkOWIxZGYy",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T21:54:11Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T21:54:11Z"
      },
      "message": "Make indentation in ActivateBestChainStep readable",
      "tree": {
        "sha": "29fa0db3c26609cb9dcd807627bbe31a0e8b35d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29fa0db3c26609cb9dcd807627bbe31a0e8b35d7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49a09add829eef206e3354e203dd1a195d9b1df2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49a09add829eef206e3354e203dd1a195d9b1df2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49a09add829eef206e3354e203dd1a195d9b1df2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49a09add829eef206e3354e203dd1a195d9b1df2/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b394d266def649088c08619cd32b923ed8ab3c89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b394d266def649088c08619cd32b923ed8ab3c89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b394d266def649088c08619cd32b923ed8ab3c89"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 33,
      "deletions": 33
    },
    "files": [
      {
        "sha": "1a3c351b2682655666d433c48b2cf1e1fc5cfec4",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 33,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49a09add829eef206e3354e203dd1a195d9b1df2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49a09add829eef206e3354e203dd1a195d9b1df2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=49a09add829eef206e3354e203dd1a195d9b1df2",
        "patch": "@@ -2211,43 +2211,43 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     bool fContinue = true;\n     int nHeight = pindexFork ? pindexFork->nHeight : -1;\n     while (fContinue && nHeight != pindexMostWork->nHeight) {\n-    // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n-    // a few blocks along the way.\n-    int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n-    vpindexToConnect.clear();\n-    vpindexToConnect.reserve(nTargetHeight - nHeight);\n-    CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n-    while (pindexIter && pindexIter->nHeight != nHeight) {\n-        vpindexToConnect.push_back(pindexIter);\n-        pindexIter = pindexIter->pprev;\n-    }\n-    nHeight = nTargetHeight;\n-\n-    // Connect new blocks.\n-    BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-        if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n-            if (state.IsInvalid()) {\n-                // The block violates a consensus rule.\n-                if (!state.CorruptionPossible())\n-                    InvalidChainFound(vpindexToConnect.back());\n-                state = CValidationState();\n-                fInvalidFound = true;\n-                fContinue = false;\n-                break;\n+        // Don't iterate the entire list of potential improvements toward the best tip, as we likely only need\n+        // a few blocks along the way.\n+        int nTargetHeight = std::min(nHeight + 32, pindexMostWork->nHeight);\n+        vpindexToConnect.clear();\n+        vpindexToConnect.reserve(nTargetHeight - nHeight);\n+        CBlockIndex *pindexIter = pindexMostWork->GetAncestor(nTargetHeight);\n+        while (pindexIter && pindexIter->nHeight != nHeight) {\n+            vpindexToConnect.push_back(pindexIter);\n+            pindexIter = pindexIter->pprev;\n+        }\n+        nHeight = nTargetHeight;\n+\n+        // Connect new blocks.\n+        BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n+            if (!ConnectTip(state, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+                if (state.IsInvalid()) {\n+                    // The block violates a consensus rule.\n+                    if (!state.CorruptionPossible())\n+                        InvalidChainFound(vpindexToConnect.back());\n+                    state = CValidationState();\n+                    fInvalidFound = true;\n+                    fContinue = false;\n+                    break;\n+                } else {\n+                    // A system error occurred (disk space, database error, ...).\n+                    return false;\n+                }\n             } else {\n-                // A system error occurred (disk space, database error, ...).\n-                return false;\n-            }\n-        } else {\n-            PruneBlockIndexCandidates();\n-            if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n-                // We're in a better position than we were. Return temporarily to release the lock.\n-                fContinue = false;\n-                break;\n+                PruneBlockIndexCandidates();\n+                if (!pindexOldTip || chainActive.Tip()->nChainWork > pindexOldTip->nChainWork) {\n+                    // We're in a better position than we were. Return temporarily to release the lock.\n+                    fContinue = false;\n+                    break;\n+                }\n             }\n         }\n     }\n-    }\n \n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)"
      }
    ]
  },
  {
    "sha": "66aea039a6bfdf71a32405fc7a144722a820b8cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NmFlYTAzOWE2YmZkZjcxYTMyNDA1ZmM3YTE0NDcyMmE4MjBiOGNk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T23:31:20Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2015-09-09T23:31:20Z"
      },
      "message": "removeForReorg calls once-per-disconnect-> once-per-reorg",
      "tree": {
        "sha": "54112a213c899f67545b5f1d079fbfafe2dd2d04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54112a213c899f67545b5f1d079fbfafe2dd2d04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/66aea039a6bfdf71a32405fc7a144722a820b8cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66aea039a6bfdf71a32405fc7a144722a820b8cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/66aea039a6bfdf71a32405fc7a144722a820b8cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/66aea039a6bfdf71a32405fc7a144722a820b8cd/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49a09add829eef206e3354e203dd1a195d9b1df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49a09add829eef206e3354e203dd1a195d9b1df2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49a09add829eef206e3354e203dd1a195d9b1df2"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 17,
      "deletions": 8
    },
    "files": [
      {
        "sha": "21d7504a27050995a589854841a4b6c65de49c28",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66aea039a6bfdf71a32405fc7a144722a820b8cd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66aea039a6bfdf71a32405fc7a144722a820b8cd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=66aea039a6bfdf71a32405fc7a144722a820b8cd",
        "patch": "@@ -2011,11 +2011,10 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n     }\n }\n \n-/** Disconnect chainActive's tip. */\n+/** Disconnect chainActive's tip. You probably want to call mempool.removeForReorg after this, with cs_main held. */\n bool static DisconnectTip(CValidationState &state) {\n     CBlockIndex *pindexDelete = chainActive.Tip();\n     assert(pindexDelete);\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     CBlock block;\n     if (!ReadBlockFromDisk(block, pindexDelete))\n@@ -2040,8 +2039,6 @@ bool static DisconnectTip(CValidationState &state) {\n         if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL))\n             mempool.remove(tx, removed, true);\n     }\n-    mempool.removeForReorg(pcoinsTip, pindexDelete->nHeight);\n-    mempool.check(pcoinsTip);\n     // Update chainActive and related variables.\n     UpdateTip(pindexDelete->pprev);\n     // Let wallets know transactions went from 1-confirmed to\n@@ -2064,7 +2061,6 @@ static int64_t nTimePostConnect = 0;\n  */\n bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CBlock *pblock) {\n     assert(pindexNew->pprev == chainActive.Tip());\n-    mempool.check(pcoinsTip);\n     // Read block from disk.\n     int64_t nTime1 = GetTimeMicros();\n     CBlock block;\n@@ -2101,7 +2097,6 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, const CB\n     // Remove conflicting transactions from the mempool.\n     list<CTransaction> txConflicted;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n-    mempool.check(pcoinsTip);\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew);\n     // Tell wallet about transactions that went from mempool\n@@ -2200,10 +2195,15 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n     const CBlockIndex *pindexFork = chainActive.FindFork(pindexMostWork);\n \n+    bool blocksDisconnected = false;\n     // Disconnect active blocks which are no longer in the best chain.\n     while (chainActive.Tip() && chainActive.Tip() != pindexFork) {\n-        if (!DisconnectTip(state))\n+        if (!DisconnectTip(state)) {\n+            // Probably an AbortNode() error, but try to keep mempool consistent anyway\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n             return false;\n+        }\n+        blocksDisconnected = true;\n     }\n \n     // Build list of new blocks to connect.\n@@ -2236,6 +2236,9 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n                     break;\n                 } else {\n                     // A system error occurred (disk space, database error, ...).\n+                    // Probably gonna shut down ASAP, but try to keep mempool consistent anyway\n+                    if (blocksDisconnected)\n+                        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n                     return false;\n                 }\n             } else {\n@@ -2249,6 +2252,10 @@ static bool ActivateBestChainStep(CValidationState &state, CBlockIndex *pindexMo\n         }\n     }\n \n+    if (blocksDisconnected)\n+        mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n+    mempool.check(pcoinsTip);\n+\n     // Callbacks/notifications for a new best chain.\n     if (fInvalidFound)\n         CheckForkWarningConditionsOnNewFork(vpindexToConnect.back());\n@@ -2332,6 +2339,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n         // ActivateBestChain considers blocks already in chainActive\n         // unconditionally valid already, so force disconnect away from it.\n         if (!DisconnectTip(state)) {\n+            mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n             return false;\n         }\n     }\n@@ -2347,6 +2355,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     }\n \n     InvalidChainFound(pindex);\n+    mempool.removeForReorg(pcoinsTip, chainActive.Tip()->nHeight + 1);\n     return true;\n }\n "
      },
      {
        "sha": "e70799cf9a4aabaf84e163653b22b90ec1c098cc",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/66aea039a6bfdf71a32405fc7a144722a820b8cd/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/66aea039a6bfdf71a32405fc7a144722a820b8cd/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=66aea039a6bfdf71a32405fc7a144722a820b8cd",
        "patch": "@@ -439,7 +439,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex);\n /** Remove invalidity status from a block and its descendants. */\n bool ReconsiderBlock(CValidationState& state, CBlockIndex *pindex);\n \n-/** The currently-connected chain of blocks. */\n+/** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain chainActive;\n \n /** Global variable that points to the active CCoinsView (protected by cs_main) */"
      }
    ]
  }
]