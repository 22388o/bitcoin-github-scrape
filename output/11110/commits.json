[
  {
    "sha": "350f5b30533eebaf27d9a63c3d8d0bea3df3a291",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTBmNWIzMDUzM2VlYmFmMjdkOWE2M2MzZDhkMGJlYTNkZjNhMjkx",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-22T18:50:27Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-08-22T18:50:27Z"
      },
      "message": "script: Avoid implicit casts from bool to CScriptNum",
      "tree": {
        "sha": "5013164ac7bd1ce0eefa1b4b610e9ed984d2d355",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5013164ac7bd1ce0eefa1b4b610e9ed984d2d355"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/350f5b30533eebaf27d9a63c3d8d0bea3df3a291",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/350f5b30533eebaf27d9a63c3d8d0bea3df3a291",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/350f5b30533eebaf27d9a63c3d8d0bea3df3a291",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/350f5b30533eebaf27d9a63c3d8d0bea3df3a291/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e55f13bfc98a6b832697d1d0cfb942dbe2094db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e55f13bfc98a6b832697d1d0cfb942dbe2094db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e55f13bfc98a6b832697d1d0cfb942dbe2094db"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "7f5867f3b8791ab52f21f452844bb42772a1319d",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/350f5b30533eebaf27d9a63c3d8d0bea3df3a291/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/350f5b30533eebaf27d9a63c3d8d0bea3df3a291/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=350f5b30533eebaf27d9a63c3d8d0bea3df3a291",
        "patch": "@@ -756,8 +756,8 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     case OP_1SUB:       bn -= bnOne; break;\n                     case OP_NEGATE:     bn = -bn; break;\n                     case OP_ABS:        if (bn < bnZero) bn = -bn; break;\n-                    case OP_NOT:        bn = (bn == bnZero); break;\n-                    case OP_0NOTEQUAL:  bn = (bn != bnZero); break;\n+                    case OP_NOT:        bn = static_cast<CScriptNum>(bn == bnZero); break;\n+                    case OP_0NOTEQUAL:  bn = static_cast<CScriptNum>(bn != bnZero); break;\n                     default:            assert(!\"invalid opcode\"); break;\n                     }\n                     popstack(stack);\n@@ -795,15 +795,15 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                         bn = bn1 - bn2;\n                         break;\n \n-                    case OP_BOOLAND:             bn = (bn1 != bnZero && bn2 != bnZero); break;\n-                    case OP_BOOLOR:              bn = (bn1 != bnZero || bn2 != bnZero); break;\n-                    case OP_NUMEQUAL:            bn = (bn1 == bn2); break;\n-                    case OP_NUMEQUALVERIFY:      bn = (bn1 == bn2); break;\n-                    case OP_NUMNOTEQUAL:         bn = (bn1 != bn2); break;\n-                    case OP_LESSTHAN:            bn = (bn1 < bn2); break;\n-                    case OP_GREATERTHAN:         bn = (bn1 > bn2); break;\n-                    case OP_LESSTHANOREQUAL:     bn = (bn1 <= bn2); break;\n-                    case OP_GREATERTHANOREQUAL:  bn = (bn1 >= bn2); break;\n+                    case OP_BOOLAND:             bn = static_cast<CScriptNum>(bn1 != bnZero && bn2 != bnZero); break;\n+                    case OP_BOOLOR:              bn = static_cast<CScriptNum>(bn1 != bnZero || bn2 != bnZero); break;\n+                    case OP_NUMEQUAL:            bn = static_cast<CScriptNum>(bn1 == bn2); break;\n+                    case OP_NUMEQUALVERIFY:      bn = static_cast<CScriptNum>(bn1 == bn2); break;\n+                    case OP_NUMNOTEQUAL:         bn = static_cast<CScriptNum>(bn1 != bn2); break;\n+                    case OP_LESSTHAN:            bn = static_cast<CScriptNum>(bn1 < bn2); break;\n+                    case OP_GREATERTHAN:         bn = static_cast<CScriptNum>(bn1 > bn2); break;\n+                    case OP_LESSTHANOREQUAL:     bn = static_cast<CScriptNum>(bn1 <= bn2); break;\n+                    case OP_GREATERTHANOREQUAL:  bn = static_cast<CScriptNum>(bn1 >= bn2); break;\n                     case OP_MIN:                 bn = (bn1 < bn2 ? bn1 : bn2); break;\n                     case OP_MAX:                 bn = (bn1 > bn2 ? bn1 : bn2); break;\n                     default:                     assert(!\"invalid opcode\"); break;"
      }
    ]
  }
]