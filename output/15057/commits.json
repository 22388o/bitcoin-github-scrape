[
  {
    "sha": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTM4ZDNkZjY5ODUxMjEyZmVhNzU0NGJhZGFkYzFjM2U1MzY5YmY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-08-20T20:55:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-01-01T17:02:12Z"
      },
      "message": "[rpc] Correct reconsiderblock help text, add test",
      "tree": {
        "sha": "b27113f062c60682952517260dbca707a0df6a66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b27113f062c60682952517260dbca707a0df6a66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa38d3df69851212fea7544badadc1c3e5369bf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcK50UAAoJEM4rdWl+aaVIDUMMAM2uvQBtOHx3hIxMFJENk3la\nyLjhma8VigLTjMYlJxZahWxZQtBPWGLqFuyqquNSfupxjxDz8bLK/C300HImGGit\nj0L3dekqBpQlB6bw/gyy3ahnYUoc5bupQ+3F0EC3kQTMgnEMAxY2me5+u1j8jeFy\nks4wA5u1XExSHp7Zk83DmFYwHVwWZQllyExiriU5w+s3uiS9ch3Mtjvt29zDOjZD\nc6xO2S9nwIH2VuOozFEWsNyUdcQBGe3z12Saqjz3VjaiO5sXxPDV4++1rALSNqSo\nEaVzf6JJm/Xnh9YurplvFJwCz3/MREUastOXQShiZTCiLjEDbq6n44ufTISUowfx\nNbEjOeTk78aJNChe5rZbeocIfn031opV3LkatVNPGeZBkZV//B52WOnzloKO04gB\nfrqWLp428QQWppTthT1hfel29AyESlC4rF9z46m765jQm1BHjK7N5S+n5GO7kCtZ\na5SW4yt++UsWOX58g5DRIVJ0tfPv33IqTdM+a9VB/Q==\n=6okC\n-----END PGP SIGNATURE-----",
        "payload": "tree b27113f062c60682952517260dbca707a0df6a66\nparent cbb91cd0ec8e858b986776723ed4dc25df4b74ee\nauthor MarcoFalke <falke.marco@gmail.com> 1471726541 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1546362132 +0100\n\n[rpc] Correct reconsiderblock help text, add test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa38d3df69851212fea7544badadc1c3e5369bf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa38d3df69851212fea7544badadc1c3e5369bf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa38d3df69851212fea7544badadc1c3e5369bf5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cbb91cd0ec8e858b986776723ed4dc25df4b74ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cbb91cd0ec8e858b986776723ed4dc25df4b74ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cbb91cd0ec8e858b986776723ed4dc25df4b74ee"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 48,
      "deletions": 23
    },
    "files": [
      {
        "sha": "bd229e5efaff4bcdebbc9fc3668e910de2c1e26c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa38d3df69851212fea7544badadc1c3e5369bf5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa38d3df69851212fea7544badadc1c3e5369bf5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa38d3df69851212fea7544badadc1c3e5369bf5",
        "patch": "@@ -1565,7 +1565,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error(\n             RPCHelpMan{\"reconsiderblock\",\n-                \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n+                \"\\nRemoves invalidity status of a block, its ancestors and its descendants, reconsider them for activation.\\n\"\n                 \"This can be used to undo the effects of invalidateblock.\\n\",\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, /* opt */ false, /* default_val */ \"\", \"the hash of the block to reconsider\"},"
      },
      {
        "sha": "d8a1deb2a37f58c6e090545346f301bda52db681",
        "filename": "test/functional/rpc_invalidateblock.py",
        "status": "modified",
        "additions": 47,
        "deletions": 22,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa38d3df69851212fea7544badadc1c3e5369bf5/test/functional/rpc_invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa38d3df69851212fea7544badadc1c3e5369bf5/test/functional/rpc_invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalidateblock.py?ref=fa38d3df69851212fea7544badadc1c3e5369bf5",
        "patch": "@@ -4,10 +4,15 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the invalidateblock RPC.\"\"\"\n \n-import time\n-\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, connect_nodes_bi, sync_blocks\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n+from test_framework.util import (\n+    assert_equal,\n+    connect_nodes_bi,\n+    sync_blocks,\n+    wait_until,\n+)\n+\n \n class InvalidateTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-1])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n+        self.log.info(\"Verify that we reconsider all descendants\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        self.nodes[1].invalidateblock(blocks[-4])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-5])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-4])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n \n if __name__ == '__main__':\n     InvalidateTest().main()"
      }
    ]
  }
]