[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450510367",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450510367",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 450510367,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDUxMDM2Nw==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-29T18:13:52Z",
    "updated_at": "2018-12-29T18:13:52Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--2502f1a698b3751726fa55edcda76cd3-->\n\n### Coverage\n\n| Coverage  | Change ([pull 15057](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/15057/total.coverage/index.html), a830d1c4d3eeac4c869c9a061d64e2722a1a252a) | Reference ([master](https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/index.html), a1fd876122938469cc3527f53211f976351989c1)   |\n|-----------|-------------------------|--------------------|\n| Lines     | -0.0129 %            | 87.3755 %        |\n| Functions | -0.0452 %            | 84.5100 %        |\n| Branches  | -0.0079 %            | 51.3984 %        |\n\n<sup>Updated at: 2018-12-29T18:13:51.889322.</sup>\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450510367/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450511701",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450511701",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 450511701,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDUxMTcwMQ==",
    "user": {
      "login": "ch4ot1c",
      "id": 2287825,
      "node_id": "MDQ6VXNlcjIyODc4MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2287825?u=a62b002ce72b9938202a35b504202764af421c29&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ch4ot1c",
      "html_url": "https://github.com/ch4ot1c",
      "followers_url": "https://api.github.com/users/ch4ot1c/followers",
      "following_url": "https://api.github.com/users/ch4ot1c/following{/other_user}",
      "gists_url": "https://api.github.com/users/ch4ot1c/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ch4ot1c/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ch4ot1c/subscriptions",
      "organizations_url": "https://api.github.com/users/ch4ot1c/orgs",
      "repos_url": "https://api.github.com/users/ch4ot1c/repos",
      "events_url": "https://api.github.com/users/ch4ot1c/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ch4ot1c/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-29T18:34:36Z",
    "updated_at": "2018-12-29T18:34:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "utACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450511701/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450512602",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450512602",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 450512602,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDUxMjYwMg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2018-12-29T18:51:57Z",
    "updated_at": "2018-12-29T18:51:57Z",
    "author_association": "MEMBER",
    "body": "For reference:\r\n\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/master/total.coverage/src/validation.cpp.gcov.html#2855\r\n* https://drahtbot.github.io/reports/coverage/bitcoin/bitcoin/15057/total.coverage/src/validation.cpp.gcov.html#2855",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450512602/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450706123",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450706123",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 450706123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDcwNjEyMw==",
    "user": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?u=63e5c438c242094837a9deeda775d77988b508bf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T02:38:29Z",
    "updated_at": "2019-01-01T02:38:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "IIRC if you     have a chain  A B C D E and invalidate D then invalidate B, then reconsider  B you'll end back up on E.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450706123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450743616",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450743616",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 450743616,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDc0MzYxNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-01T17:04:50Z",
    "updated_at": "2019-01-01T17:04:50Z",
    "author_association": "MEMBER",
    "body": "Added a test for this as well (and fixed up the help text). Maybe the method should have been called `reconsiderchain` with the description \"Reconsiders all chains the given block is in\"",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450743616/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450875180",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450875180",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 450875180,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MDg3NTE4MA==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-02T14:22:13Z",
    "updated_at": "2019-01-02T14:22:13Z",
    "author_association": "MEMBER",
    "body": "utACK fa38d3df69851212fea7544badadc1c3e5369bf5",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/450875180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451667126",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-451667126",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 451667126,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY2NzEyNg==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T16:00:53Z",
    "updated_at": "2019-01-05T16:00:53Z",
    "author_association": "MEMBER",
    "body": "utACK fa38d3d, don't mind the above nits..\r\n\r\nCandidate for backport?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451667126/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451667837",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-451667837",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/15057",
    "id": 451667837,
    "node_id": "MDEyOklzc3VlQ29tbWVudDQ1MTY2NzgzNw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-01-05T16:11:18Z",
    "updated_at": "2019-01-05T16:11:18Z",
    "author_association": "MEMBER",
    "body": "I'd say no. User-facing it is only a minor documentation fixup of a method that should not casually be used in production.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/451667837/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244853885",
    "pull_request_review_id": 188828154,
    "id": 244853885,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDg1Mzg4NQ==",
    "diff_hunk": "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip",
    "path": "test/functional/rpc_invalidateblock.py",
    "position": 85,
    "original_position": 85,
    "commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "original_commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "s/previous/initial/",
    "created_at": "2019-01-02T21:04:18Z",
    "updated_at": "2019-01-02T21:08:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244853885",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244853885"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244853885"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244853885/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 72,
    "original_line": 72,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854327",
    "pull_request_review_id": 188828154,
    "id": 244854327,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDg1NDMyNw==",
    "diff_hunk": "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])",
    "path": "test/functional/rpc_invalidateblock.py",
    "position": 82,
    "original_position": 82,
    "commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "original_commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "remove?",
    "created_at": "2019-01-02T21:06:25Z",
    "updated_at": "2019-01-02T21:08:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854327",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854327"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854327"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 69,
    "original_line": 69,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854544",
    "pull_request_review_id": 188828154,
    "id": 244854544,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDg1NDU0NA==",
    "diff_hunk": "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-1])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n+        self.log.info(\"Verify that we reconsider all descendants\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-2])",
    "path": "test/functional/rpc_invalidateblock.py",
    "position": 94,
    "original_position": 94,
    "commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "original_commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "remove?",
    "created_at": "2019-01-02T21:07:10Z",
    "updated_at": "2019-01-02T21:08:30Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854544",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854544"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244854544"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244854544/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244965661",
    "pull_request_review_id": 188968259,
    "id": 244965661,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDk2NTY2MQ==",
    "diff_hunk": "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-1])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n+        self.log.info(\"Verify that we reconsider all descendants\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-2])",
    "path": "test/functional/rpc_invalidateblock.py",
    "position": 94,
    "original_position": 94,
    "commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "original_commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Why? This is exactly what the test should be testing for. See https://github.com/bitcoin/bitcoin/pull/15057#issuecomment-450706123",
    "created_at": "2019-01-03T10:57:47Z",
    "updated_at": "2019-01-03T10:57:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244965661",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244965661"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244965661"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244965661/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT",
    "in_reply_to_id": 244854544
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244970263",
    "pull_request_review_id": 188974162,
    "id": 244970263,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDI0NDk3MDI2Mw==",
    "diff_hunk": "@@ -21,46 +26,66 @@ def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")\n         self.nodes[0].generatetoaddress(4, self.nodes[0].get_deterministic_priv_key().address)\n-        assert(self.nodes[0].getblockcount() == 4)\n-        besthash = self.nodes[0].getbestblockhash()\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        besthash_n0 = self.nodes[0].getbestblockhash()\n \n         self.log.info(\"Mine competing 6 blocks on Node 1\")\n         self.nodes[1].generatetoaddress(6, self.nodes[1].get_deterministic_priv_key().address)\n-        assert(self.nodes[1].getblockcount() == 6)\n+        assert_equal(self.nodes[1].getblockcount(), 6)\n \n         self.log.info(\"Connect nodes to force a reorg\")\n-        connect_nodes_bi(self.nodes,0,1)\n+        connect_nodes_bi(self.nodes, 0, 1)\n         sync_blocks(self.nodes[0:2])\n-        assert(self.nodes[0].getblockcount() == 6)\n+        assert_equal(self.nodes[0].getblockcount(), 6)\n         badhash = self.nodes[1].getblockhash(2)\n \n         self.log.info(\"Invalidate block 2 on node 0 and verify we reorg to node 0's original chain\")\n         self.nodes[0].invalidateblock(badhash)\n-        newheight = self.nodes[0].getblockcount()\n-        newhash = self.nodes[0].getbestblockhash()\n-        if (newheight != 4 or newhash != besthash):\n-            raise AssertionError(\"Wrong tip for node0, hash %s, height %d\"%(newhash,newheight))\n+        assert_equal(self.nodes[0].getblockcount(), 4)\n+        assert_equal(self.nodes[0].getbestblockhash(), besthash_n0)\n \n         self.log.info(\"Make sure we won't reorg to a lower work chain:\")\n-        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes, 1, 2)\n         self.log.info(\"Sync node 2 to node 1 so both have 6 blocks\")\n         sync_blocks(self.nodes[1:3])\n-        assert(self.nodes[2].getblockcount() == 6)\n+        assert_equal(self.nodes[2].getblockcount(), 6)\n         self.log.info(\"Invalidate block 5 on node 1 so its tip is now at 4\")\n         self.nodes[1].invalidateblock(self.nodes[1].getblockhash(5))\n-        assert(self.nodes[1].getblockcount() == 4)\n+        assert_equal(self.nodes[1].getblockcount(), 4)\n         self.log.info(\"Invalidate block 3 on node 2, so its tip is now 2\")\n         self.nodes[2].invalidateblock(self.nodes[2].getblockhash(3))\n-        assert(self.nodes[2].getblockcount() == 2)\n+        assert_equal(self.nodes[2].getblockcount(), 2)\n         self.log.info(\"..and then mine a block\")\n         self.nodes[2].generatetoaddress(1, self.nodes[2].get_deterministic_priv_key().address)\n         self.log.info(\"Verify all nodes are at the right height\")\n-        time.sleep(5)\n-        assert_equal(self.nodes[2].getblockcount(), 3)\n-        assert_equal(self.nodes[0].getblockcount(), 4)\n-        node1height = self.nodes[1].getblockcount()\n-        if node1height < 4:\n-            raise AssertionError(\"Node 1 reorged to a lower height: %d\"%node1height)\n+        wait_until(lambda: self.nodes[2].getblockcount() == 3, timeout=5)\n+        wait_until(lambda: self.nodes[0].getblockcount() == 4, timeout=5)\n+        wait_until(lambda: self.nodes[1].getblockcount() == 4, timeout=5)\n+\n+        self.log.info(\"Verify that we reconsider all ancestors as well\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-1])\n+        self.nodes[1].invalidateblock(blocks[-2])\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-3])\n+        # Reconsider only the previous tip\n+        self.nodes[1].reconsiderblock(blocks[-1])\n+        # Should be back at the tip by now\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+\n+        self.log.info(\"Verify that we reconsider all descendants\")\n+        blocks = self.nodes[1].generatetoaddress(10, ADDRESS_BCRT1_UNSPENDABLE)\n+        assert_equal(self.nodes[1].getbestblockhash(), blocks[-1])\n+        # Invalidate the two blocks at the tip\n+        self.nodes[1].invalidateblock(blocks[-2])",
    "path": "test/functional/rpc_invalidateblock.py",
    "position": 94,
    "original_position": 94,
    "commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "original_commit_id": "fa38d3df69851212fea7544badadc1c3e5369bf5",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yap sorry.",
    "created_at": "2019-01-03T11:18:04Z",
    "updated_at": "2019-01-03T11:18:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244970263",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244970263"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/15057#discussion_r244970263"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/15057"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/244970263/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 81,
    "original_line": 81,
    "side": "RIGHT",
    "in_reply_to_id": 244854544
  }
]