[
  {
    "sha": "8a2656702b4b5d53d1b8343c3215302e4305a038",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTI2NTY3MDJiNGI1ZDUzZDFiODM0M2MzMjE1MzAyZTQzMDVhMDM4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-03-23T05:43:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-03-23T06:13:37Z"
      },
      "message": "torcontrol: Use the default/standard network port for Tor hidden services, even if the internal port is set differently\n\nCurrently, the hidden service is published on the same port as the public listening port.\nBut if a non-standard port is configured, this can be used to guess (pretty reliably) that the public IP and the hidden service are the same node.",
      "tree": {
        "sha": "51b33e1613798e29e46fa7b103ba7da8bafb108a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51b33e1613798e29e46fa7b103ba7da8bafb108a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a2656702b4b5d53d1b8343c3215302e4305a038",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a2656702b4b5d53d1b8343c3215302e4305a038",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a2656702b4b5d53d1b8343c3215302e4305a038",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a2656702b4b5d53d1b8343c3215302e4305a038/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "37f236acc6de08745118ac6cb4268bb5206e67c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37f236acc6de08745118ac6cb4268bb5206e67c6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37f236acc6de08745118ac6cb4268bb5206e67c6"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "094d816d1c476169fe9e40f33aff42fe4c9e1be9",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a2656702b4b5d53d1b8343c3215302e4305a038/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a2656702b4b5d53d1b8343c3215302e4305a038/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=8a2656702b4b5d53d1b8343c3215302e4305a038",
        "patch": "@@ -3,6 +3,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <chainparams.h>\n #include <torcontrol.h>\n #include <util/strencodings.h>\n #include <netbase.h>\n@@ -500,7 +501,7 @@ void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlRe\n             }\n             return;\n         }\n-        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), GetListenPort());\n+        service = LookupNumeric(std::string(service_id+\".onion\").c_str(), Params().GetDefaultPort());\n         LogPrintf(\"tor: Got service ID %s, advertising service %s\\n\", service_id, service.ToString());\n         if (WriteBinaryFile(GetPrivateKeyFile(), private_key)) {\n             LogPrint(BCLog::TOR, \"tor: Cached service private key to %s\\n\", GetPrivateKeyFile().string());\n@@ -534,9 +535,8 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n         if (private_key.empty()) // No private key, generate one\n             private_key = \"NEW:RSA1024\"; // Explicitly request RSA1024 - see issue #9214\n         // Request hidden service, redirect port.\n-        // Note that the 'virtual' port doesn't have to be the same as our internal port, but this is just a convenient\n-        // choice.  TODO; refactor the shutdown sequence some day.\n-        _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, GetListenPort(), GetListenPort()),\n+        // Note that the 'virtual' port is always the default port to avoid decloaking nodes using other ports.\n+        _conn.Command(strprintf(\"ADD_ONION %s Port=%i,127.0.0.1:%i\", private_key, Params().GetDefaultPort(), GetListenPort()),\n             std::bind(&TorController::add_onion_cb, this, std::placeholders::_1, std::placeholders::_2));\n     } else {\n         LogPrintf(\"tor: Authentication failed\\n\");"
      }
    ]
  }
]