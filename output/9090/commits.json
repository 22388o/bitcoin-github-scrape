[
  {
    "sha": "f00705ae7ff3c1db805859e3be41e58ac70625b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDA3MDVhZTdmZjNjMWRiODA1ODU5ZTNiZTQxZTU4YWM3MDYyNWI2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-30T15:21:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-02T07:50:25Z"
      },
      "message": "serialize: Deprecate `begin_ptr` / `end_ptr`\n\nImplement `begin_ptr` and `end_ptr` in terms of C++11 code,\nand add a comment that they are deprecated.\n\nFollow-up to developer notes update in 654a21162252294b7dbd6c982fec88008af7335e.",
      "tree": {
        "sha": "7eb3cb268bba468c1e8c6f7b37a51b56993303d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7eb3cb268bba468c1e8c6f7b37a51b56993303d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f00705ae7ff3c1db805859e3be41e58ac70625b6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX8LxDAAoJEHSBCwEjRsmmpsAIAMzeWPSnERYek6OjaxF6XPk5\nn2R0KiPj6xowIPTTltzLm+pAqQI6+WXVer7SRV5ZVfUEKLZg5lC7qs8X7GIVlj+a\nkRihCpK72h/OVfDtdgTbBJZ3WRg5186MBJHK/KQFwtzd7jMZu1ICv1B/cA62hlsf\n6Ab2z2OS8S18a1kqzZgKEc1Tben+0sA9gEwrxBEfMXR1g0vZMiL9hbJDDTnim8gu\nw28hw2HTWeYg6diY4fHd2KolkRJf6CHAua50wV0ZlKcXRFxFyGblpKYnTKL/eNpy\nE9IVYDqy5kF9j3TFmZtMLiYtTgIHxAMOyD8yLOfDHD3WszJMZW2IBziciyeBMyw=\n=H/Eu\n-----END PGP SIGNATURE-----",
        "payload": "tree 7eb3cb268bba468c1e8c6f7b37a51b56993303d8\nparent 47314e6daad8157c9e36af90a47b3ae7fa0587de\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475248872 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475394625 +0200\n\nserialize: Deprecate `begin_ptr` / `end_ptr`\n\nImplement `begin_ptr` and `end_ptr` in terms of C++11 code,\nand add a comment that they are deprecated.\n\nFollow-up to developer notes update in 654a21162252294b7dbd6c982fec88008af7335e.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00705ae7ff3c1db805859e3be41e58ac70625b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f00705ae7ff3c1db805859e3be41e58ac70625b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00705ae7ff3c1db805859e3be41e58ac70625b6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47314e6daad8157c9e36af90a47b3ae7fa0587de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47314e6daad8157c9e36af90a47b3ae7fa0587de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47314e6daad8157c9e36af90a47b3ae7fa0587de"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 11,
      "deletions": 12
    },
    "files": [
      {
        "sha": "25bce522dc9b1717385a96bd86b9228e0dde067c",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f00705ae7ff3c1db805859e3be41e58ac70625b6/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f00705ae7ff3c1db805859e3be41e58ac70625b6/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=f00705ae7ff3c1db805859e3be41e58ac70625b6",
        "patch": "@@ -476,7 +476,7 @@ class prevector {\n         }\n     }\n \n-    value_type* data() noexcept {\n+    value_type* data() {\n         return item_ptr(0);\n     }\n "
      },
      {
        "sha": "1f51da82fffa24a672fb8d60ca32458c03ecf699",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f00705ae7ff3c1db805859e3be41e58ac70625b6/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f00705ae7ff3c1db805859e3be41e58ac70625b6/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=f00705ae7ff3c1db805859e3be41e58ac70625b6",
        "patch": "@@ -44,33 +44,32 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n-/** \n- * Get begin pointer of vector (non-const version).\n- * @note These functions avoid the undefined case of indexing into an empty\n- * vector, as well as that of indexing after the end of the vector.\n+/**\n+ * Important: Do not use the following functions in new code, but use v.data()\n+ * and v.data() + v.size() respectively directly. They were once introduced to\n+ * have a compatible, safe way to get the begin and end pointer of a vector.\n+ * However with C++11 the language has built-in functionality for this and it's\n+ * more readable to just use that.\n  */\n template <typename V>\n inline typename V::value_type* begin_ptr(V& v)\n {\n-    return v.empty() ? NULL : &v[0];\n+    return v.data();\n }\n-/** Get begin pointer of vector (const version) */\n template <typename V>\n inline const typename V::value_type* begin_ptr(const V& v)\n {\n-    return v.empty() ? NULL : &v[0];\n+    return v.data();\n }\n-/** Get end pointer of vector (non-const version) */\n template <typename V>\n inline typename V::value_type* end_ptr(V& v)\n {\n-    return v.empty() ? NULL : (&v[0] + v.size());\n+    return v.data() + v.size();\n }\n-/** Get end pointer of vector (const version) */\n template <typename V>\n inline const typename V::value_type* end_ptr(const V& v)\n {\n-    return v.empty() ? NULL : (&v[0] + v.size());\n+    return v.data() + v.size();\n }\n \n /*"
      }
    ]
  },
  {
    "sha": "fa7c35c4ec630838178b4674288da33561a66f08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdjMzVjNGVjNjMwODM4MTc4YjQ2NzQyODhkYTMzNTYxYTY2ZjA4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-01T19:07:31Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-02T09:16:44Z"
      },
      "message": "[qa] util: Move wait_bitcoinds() into stop_nodes()",
      "tree": {
        "sha": "faf4539ae38778a4d6ca5bc2d39efb8685d1e653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/faf4539ae38778a4d6ca5bc2d39efb8685d1e653"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7c35c4ec630838178b4674288da33561a66f08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7c35c4ec630838178b4674288da33561a66f08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7c35c4ec630838178b4674288da33561a66f08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7c35c4ec630838178b4674288da33561a66f08/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faffb8a83db3f209a303a4464dbdd597faad5a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faffb8a83db3f209a303a4464dbdd597faad5a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faffb8a83db3f209a303a4464dbdd597faad5a4"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 12,
      "deletions": 23
    },
    "files": [
      {
        "sha": "be6ddde112ea280040b531dc9a526e24089e4dde",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -195,7 +195,6 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # Restart all\n         self.test.block_store.close()\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         shutil.rmtree(self.options.tmpdir)\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "8c45578fcfbddba93cb38ff66c11a75825228f4b",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -470,7 +470,6 @@ def run_test(self):\n         self.nodes[1].encryptwallet(\"test\")\n         self.nodes.pop(1)\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n \n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "fc3eddddee17b18fe93b396f0d3f91ea43efa1e5",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -144,8 +144,7 @@ def run_test(self):\n         # is cleared, and restart the node. This should move the versionbit state\n         # to ACTIVE.\n         self.nodes[0].generate(VB_PERIOD)\n-        stop_node(self.nodes[0], 0)\n-        wait_bitcoinds()\n+        stop_nodes(self.nodes)\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n@@ -156,8 +155,7 @@ def run_test(self):\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getinfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        stop_node(self.nodes[0], 0)\n-        wait_bitcoinds()\n+        stop_nodes(self.nodes)\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running..."
      },
      {
        "sha": "25cf4c1679b984b86d261b67eb66127a09b3abe1",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -7,7 +7,11 @@\n # Test -reindex and -reindex-chainstate with CheckBlockIndex\n #\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    start_nodes,\n+    stop_nodes,\n+    assert_equal,\n+)\n import time\n \n class ReindexTest(BitcoinTestFramework):\n@@ -18,16 +22,14 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.is_network_split = False\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()\n-        stop_node(self.nodes[0], 0)\n-        wait_bitcoinds()\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"])\n+        stop_nodes(self.nodes)\n+        extra_args = [[\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "d78d0b884e9ed97347ff5e7729a9a7c2d81b3bd4",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -40,7 +40,6 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             assert_equal(set(get_bind_addrs(pid)), set(expected))\n         finally:\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n@@ -56,7 +55,6 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         finally:\n             node = None # make sure connection will be garbage collected and closed\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux"
      },
      {
        "sha": "e6fc5fd8a20e48683352f611a1bdc6d60e375066",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -21,7 +21,6 @@\n     sync_mempools,\n     stop_nodes,\n     stop_node,\n-    wait_bitcoinds,\n     enable_coverage,\n     check_json_precision,\n     initialize_chain_clean,\n@@ -81,7 +80,6 @@ def split_network(self):\n         \"\"\"\n         assert not self.is_network_split\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.setup_network(True)\n \n     def sync_all(self):\n@@ -100,7 +98,6 @@ def join_network(self):\n         \"\"\"\n         assert self.is_network_split\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.setup_network(False)\n \n     def main(self):\n@@ -170,7 +167,6 @@ def main(self):\n         if not self.options.noshutdown:\n             print(\"Stopping nodes\")\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n         else:\n             print(\"Note: bitcoinds were not stopped and may still be running\")\n "
      },
      {
        "sha": "c6b0367b419d6c73d2a3770c74f87dcb19075f35",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -266,7 +266,6 @@ def initialize_chain(test_dir, num_nodes, cachedir):\n \n         # Shut them down, and clean up cache directories:\n         stop_nodes(rpcs)\n-        wait_bitcoinds()\n         disable_mocktime()\n         for i in range(MAX_NODES):\n             os.remove(log_filename(cachedir, i, \"debug.log\"))\n@@ -365,6 +364,7 @@ def stop_nodes(nodes):\n         except http.client.CannotSendRequest as e:\n             print(\"WARN: Unable to stop node: \" + repr(e))\n     del nodes[:] # Emptying array closes connections as a side effect\n+    wait_bitcoinds()\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      },
      {
        "sha": "e43f6ea5d225ee2b8276412e27221f68ea8f59f8",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7c35c4ec630838178b4674288da33561a66f08/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=fa7c35c4ec630838178b4674288da33561a66f08",
        "patch": "@@ -199,7 +199,6 @@ def run_test (self):\n \n         #do some -walletbroadcast tests\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.nodes = start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n@@ -225,7 +224,6 @@ def run_test (self):\n \n         #restart the nodes with -walletbroadcast=1\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.nodes = start_nodes(3, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n@@ -335,7 +333,6 @@ def run_test (self):\n         for m in maintenance:\n             print(\"check \" + m)\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish"
      }
    ]
  },
  {
    "sha": "fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTY2NjA5NGNmNWI5YWM0YTdjMTczMmE3ZmZhMDAxYWZmZmNkOTM4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-01T09:36:25Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-02T10:21:14Z"
      },
      "message": "[qa] mininode: Only allow named args in wait_until",
      "tree": {
        "sha": "dfd0360b6b7dabfa04534e8a9e54f5c0e23504dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfd0360b6b7dabfa04534e8a9e54f5c0e23504dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa666094cf5b9ac4a7c1732a7ffa001afffcd938/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faffb8a83db3f209a303a4464dbdd597faad5a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faffb8a83db3f209a303a4464dbdd597faad5a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faffb8a83db3f209a303a4464dbdd597faad5a4"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d0e9fe9a3f592262bdd513cd6be0293882088734",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa666094cf5b9ac4a7c1732a7ffa001afffcd938/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa666094cf5b9ac4a7c1732a7ffa001afffcd938/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
        "patch": "@@ -75,7 +75,7 @@ def sync_with_ping(self, timeout=30):\n         def received_pong():\n             return (self.last_pong.nonce == self.ping_counter)\n         self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        success = wait_until(received_pong, timeout)\n+        success = wait_until(received_pong, timeout=timeout)\n         self.ping_counter += 1\n         return success\n "
      },
      {
        "sha": "382d7f1e82ca01d05dcb0f42d8c03ab0d681a9be",
        "filename": "qa/rpc-tests/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa666094cf5b9ac4a7c1732a7ffa001afffcd938/qa/rpc-tests/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa666094cf5b9ac4a7c1732a7ffa001afffcd938/qa/rpc-tests/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-mempool.py?ref=fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
        "patch": "@@ -63,7 +63,7 @@ def sync_with_ping(self, timeout=30):\n         def received_pong():\n             return (self.last_pong.nonce == self.ping_counter)\n         self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        success = wait_until(received_pong, timeout)\n+        success = wait_until(received_pong, timeout=timeout)\n         self.ping_counter += 1\n         return success\n "
      },
      {
        "sha": "88a3b7e0f7144e5073bb63b68dc402f27ac65c03",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa666094cf5b9ac4a7c1732a7ffa001afffcd938/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa666094cf5b9ac4a7c1732a7ffa001afffcd938/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
        "patch": "@@ -1320,7 +1320,7 @@ def __repr__(self):\n             % (self.message, self.code, self.reason, self.data)\n \n # Helper function\n-def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf')):\n     attempt = 0\n     elapsed = 0\n "
      }
    ]
  },
  {
    "sha": "6013c73b3312e11b447ed387426749014716f820",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDEzYzczYjMzMTJlMTFiNDQ3ZWQzODc0MjY3NDkwMTQ3MTZmODIw",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-02T21:14:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-02T21:14:17Z"
      },
      "message": "Merge #8857: [qa] mininode: Only allow named args in wait_until\n\nfa66609 [qa] mininode: Only allow named args in wait_until (MarcoFalke)",
      "tree": {
        "sha": "dfd0360b6b7dabfa04534e8a9e54f5c0e23504dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dfd0360b6b7dabfa04534e8a9e54f5c0e23504dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6013c73b3312e11b447ed387426749014716f820",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJX8XipAAoJEC1/I3LlD+E3iMIH/156RUoe//0NnLZD9I9LID1i\nexGjRRKdiP6EYK60tvGUtnHPfro/tEdCJl8meQiYyZKm+7U3eV0H57Cfe7JagEe8\nqhG1Al+Cif759CAZ/bTeDG6heA3Weo+bz9xgK3UO9ecW/NWEhK3dyuzngFX+e4Hy\n1DVPI3qL9VD/CdiFqtKgLv69bNVbJXuMHWdq4Qr0slCJoIqx2yDGuX7r+snbjLfq\nXuz+uxXqqcn3uW2F64rqj0Yz4L5LUp19PdScNPujqQfrKrYEkBKKJtMVmPNBl0QP\nPLMug5tOY/DH8QkUnpct48bFJEWh4kV/bhU6u7sp35Dyc4NjJ6kCpmEHPhtvE5g=\n=ZYNu\n-----END PGP SIGNATURE-----",
        "payload": "tree dfd0360b6b7dabfa04534e8a9e54f5c0e23504dd\nparent 6faffb8a83db3f209a303a4464dbdd597faad5a4\nparent fa666094cf5b9ac4a7c1732a7ffa001afffcd938\nauthor MarcoFalke <falke.marco@gmail.com> 1475442841 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1475442857 +0200\n\nMerge #8857: [qa] mininode: Only allow named args in wait_until\n\nfa66609 [qa] mininode: Only allow named args in wait_until (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6013c73b3312e11b447ed387426749014716f820",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6013c73b3312e11b447ed387426749014716f820",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6013c73b3312e11b447ed387426749014716f820/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6faffb8a83db3f209a303a4464dbdd597faad5a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6faffb8a83db3f209a303a4464dbdd597faad5a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6faffb8a83db3f209a303a4464dbdd597faad5a4"
      },
      {
        "sha": "fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa666094cf5b9ac4a7c1732a7ffa001afffcd938",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa666094cf5b9ac4a7c1732a7ffa001afffcd938"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d0e9fe9a3f592262bdd513cd6be0293882088734",
        "filename": "qa/rpc-tests/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6013c73b3312e11b447ed387426749014716f820/qa/rpc-tests/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6013c73b3312e11b447ed387426749014716f820/qa/rpc-tests/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxuploadtarget.py?ref=6013c73b3312e11b447ed387426749014716f820",
        "patch": "@@ -75,7 +75,7 @@ def sync_with_ping(self, timeout=30):\n         def received_pong():\n             return (self.last_pong.nonce == self.ping_counter)\n         self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        success = wait_until(received_pong, timeout)\n+        success = wait_until(received_pong, timeout=timeout)\n         self.ping_counter += 1\n         return success\n "
      },
      {
        "sha": "382d7f1e82ca01d05dcb0f42d8c03ab0d681a9be",
        "filename": "qa/rpc-tests/p2p-mempool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6013c73b3312e11b447ed387426749014716f820/qa/rpc-tests/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6013c73b3312e11b447ed387426749014716f820/qa/rpc-tests/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-mempool.py?ref=6013c73b3312e11b447ed387426749014716f820",
        "patch": "@@ -63,7 +63,7 @@ def sync_with_ping(self, timeout=30):\n         def received_pong():\n             return (self.last_pong.nonce == self.ping_counter)\n         self.connection.send_message(msg_ping(nonce=self.ping_counter))\n-        success = wait_until(received_pong, timeout)\n+        success = wait_until(received_pong, timeout=timeout)\n         self.ping_counter += 1\n         return success\n "
      },
      {
        "sha": "88a3b7e0f7144e5073bb63b68dc402f27ac65c03",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6013c73b3312e11b447ed387426749014716f820/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6013c73b3312e11b447ed387426749014716f820/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=6013c73b3312e11b447ed387426749014716f820",
        "patch": "@@ -1320,7 +1320,7 @@ def __repr__(self):\n             % (self.message, self.code, self.reason, self.data)\n \n # Helper function\n-def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n+def wait_until(predicate, *, attempts=float('inf'), timeout=float('inf')):\n     attempt = 0\n     elapsed = 0\n "
      }
    ]
  },
  {
    "sha": "6f3ef551fa0fd5f40a027844104759855fd0b823",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjNlZjU1MWZhMGZkNWY0MGEwMjc4NDQxMDQ3NTk4NTVmZDBiODIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-03T05:57:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-03T05:57:41Z"
      },
      "message": "Merge #8858: rpc: Generate auth cookie in hex instead of base64\n\n1c80386 rpc: Generate auth cookie in hex instead of base64 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "7fdb409c6030832dcabae50d35572f315e5d8c0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fdb409c6030832dcabae50d35572f315e5d8c0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f3ef551fa0fd5f40a027844104759855fd0b823",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX8fNVAAoJEHSBCwEjRsmmenQIAIjzcmcV1bwooFC6xkasa8sR\nywOGIYlmWSubeAffv3ETLzQAbOY7laxt5mrVanzuIknem96W7kwebfrL9ao/j5KX\nMdmRIWhXj9nLt+q5E1QKI7WhMfWvf0W/RG+19j8PPpR/cpMqDSVwQmA8PposzkKM\nFQ+r6WNYGR1cjYAcL/zUEf9m0uYPV5OfOgmmVQKaQiiQbDJyYAoPK4RK7M1KmT74\n215C9Wuzd5uRBZrZTsPxYXKGmhXkiNVuPgkhEBDKZqji+RIE1Hkx7tjmqTTBgum5\nbzrvPyor6noLmtw6Ymjc80Dsae2Yr4vllgngaVuZZmjVBIpJ2Y+aqZDhG2j1TbA=\n=txQR\n-----END PGP SIGNATURE-----",
        "payload": "tree 7fdb409c6030832dcabae50d35572f315e5d8c0a\nparent 6013c73b3312e11b447ed387426749014716f820\nparent 1c80386bceb216ca5b5da657e03a29f9c779d58b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475474248 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475474261 +0200\n\nMerge #8858: rpc: Generate auth cookie in hex instead of base64\n\n1c80386 rpc: Generate auth cookie in hex instead of base64 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3ef551fa0fd5f40a027844104759855fd0b823",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3ef551fa0fd5f40a027844104759855fd0b823",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3ef551fa0fd5f40a027844104759855fd0b823/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6013c73b3312e11b447ed387426749014716f820",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6013c73b3312e11b447ed387426749014716f820",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6013c73b3312e11b447ed387426749014716f820"
      },
      {
        "sha": "1c80386bceb216ca5b5da657e03a29f9c779d58b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c80386bceb216ca5b5da657e03a29f9c779d58b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c80386bceb216ca5b5da657e03a29f9c779d58b"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "bb885bb5a655d54fc6df32e43d89dd2845742b21",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f3ef551fa0fd5f40a027844104759855fd0b823/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f3ef551fa0fd5f40a027844104759855fd0b823/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=6f3ef551fa0fd5f40a027844104759855fd0b823",
        "patch": "@@ -77,9 +77,10 @@ boost::filesystem::path GetAuthCookieFile()\n \n bool GenerateAuthCookie(std::string *cookie_out)\n {\n-    unsigned char rand_pwd[32];\n-    GetRandBytes(rand_pwd, 32);\n-    std::string cookie = COOKIEAUTH_USER + \":\" + EncodeBase64(&rand_pwd[0],32);\n+    const size_t COOKIE_SIZE = 32;\n+    unsigned char rand_pwd[COOKIE_SIZE];\n+    GetRandBytes(rand_pwd, COOKIE_SIZE);\n+    std::string cookie = COOKIEAUTH_USER + \":\" + HexStr(rand_pwd, rand_pwd+COOKIE_SIZE);\n \n     /** the umask determines what permissions are used to create this file -\n      * these are set to 077 in init.cpp unless overridden with -sysperms."
      }
    ]
  },
  {
    "sha": "eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYWZjNWY0ZmFlNTJhMTZhZDczNDNmN2ZiMTNiZmVjZjliNjIzMTBh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-03T06:44:53Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-03T06:45:13Z"
      },
      "message": "Merge #8863: univalue: Pull subtree\n\n2ca7faa Squashed 'src/univalue/' changes from daf1285..16a1f7f (MarcoFalke)",
      "tree": {
        "sha": "4e5be94c5b61d40599766e567e9d33c32264118a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e5be94c5b61d40599766e567e9d33c32264118a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX8f55AAoJEHSBCwEjRsmm1ooH/irAgU3xOh4PnFszVKZZCJZb\nHNfOuOSru0VK319hWjfGJmQ/onf2zl7lHJSCUQCpcOiV1cVTyHwLTepiGNKwjWsY\nFJwafHO7tZgZRxck6QZwRTYDUr4oxw+teXwd6nOStw64HhLKxMhxQx9etJuvbjO0\nhQf94YNSk9btacYJFNFlVYS+lvQN/oGsNMCyIPDmDTvK3fsFnsg82Q1NIRszBMS/\nT5pdrK8imgaRbWcIgi6nT/wD7MzzhPCm8Ri6ZFDnHr23xDMFLIbdfm7pnbFLp3EQ\nAwrYT5LCvzO0Mq+y54/tjVJtIKfHGZhyythcu9p6q3HshEepquiaPSYlfroQFWE=\n=yuos\n-----END PGP SIGNATURE-----",
        "payload": "tree 4e5be94c5b61d40599766e567e9d33c32264118a\nparent 6f3ef551fa0fd5f40a027844104759855fd0b823\nparent e757115164c6f73c93a2d65a289b8a54e46c669d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475477093 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475477113 +0200\n\nMerge #8863: univalue: Pull subtree\n\n2ca7faa Squashed 'src/univalue/' changes from daf1285..16a1f7f (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f3ef551fa0fd5f40a027844104759855fd0b823",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f3ef551fa0fd5f40a027844104759855fd0b823",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f3ef551fa0fd5f40a027844104759855fd0b823"
      },
      {
        "sha": "e757115164c6f73c93a2d65a289b8a54e46c669d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e757115164c6f73c93a2d65a289b8a54e46c669d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e757115164c6f73c93a2d65a289b8a54e46c669d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "132743d34930dad327037a9d0f52f7a742c6dbd0",
        "filename": "src/univalue/.travis.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a/src/univalue/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a/src/univalue/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.travis.yml?ref=eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
        "patch": "@@ -1,4 +1,3 @@\n-\n language: cpp\n \n compiler:\n@@ -26,6 +25,7 @@ addons:\n       - pkg-config\n \n before_script:\n+  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew uninstall libtool; brew install libtool; fi\n   - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n   - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n "
      },
      {
        "sha": "e8ce283519fed9d3068f605855e18e34e2aad708",
        "filename": "src/univalue/include/univalue.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
        "patch": "@@ -142,10 +142,10 @@ class UniValue {\n public:\n     // Strict type-specific getters, these throw std::runtime_error if the\n     // value is of unexpected type\n-    std::vector<std::string> getKeys() const;\n-    std::vector<UniValue> getValues() const;\n+    const std::vector<std::string>& getKeys() const;\n+    const std::vector<UniValue>& getValues() const;\n     bool get_bool() const;\n-    std::string get_str() const;\n+    const std::string& get_str() const;\n     int get_int() const;\n     int64_t get_int64() const;\n     double get_real() const;"
      },
      {
        "sha": "5a2860c13f8d6c69e91c203dc26df80444e709f7",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
        "patch": "@@ -283,14 +283,14 @@ const UniValue& find_value(const UniValue& obj, const std::string& name)\n     return NullUniValue;\n }\n \n-std::vector<std::string> UniValue::getKeys() const\n+const std::vector<std::string>& UniValue::getKeys() const\n {\n     if (typ != VOBJ)\n         throw std::runtime_error(\"JSON value is not an object as expected\");\n     return keys;\n }\n \n-std::vector<UniValue> UniValue::getValues() const\n+const std::vector<UniValue>& UniValue::getValues() const\n {\n     if (typ != VOBJ && typ != VARR)\n         throw std::runtime_error(\"JSON value is not an object or array as expected\");\n@@ -304,7 +304,7 @@ bool UniValue::get_bool() const\n     return getBool();\n }\n \n-std::string UniValue::get_str() const\n+const std::string& UniValue::get_str() const\n {\n     if (typ != VSTR)\n         throw std::runtime_error(\"JSON value is not a string as expected\");"
      }
    ]
  },
  {
    "sha": "76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NmYzYzAyZmIwMWE2ZGY5OGZiZDhjMTZhYzIxZDE1OWQ0NjQ5ZDM3",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-03T08:12:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-03T08:12:42Z"
      },
      "message": "Merge #8860: [qa] util: Move wait_bitcoinds() into stop_nodes()\n\nfa7c35c [qa] util: Move wait_bitcoinds() into stop_nodes() (MarcoFalke)",
      "tree": {
        "sha": "b29ab0e61beb75a9204d59777fe13a89dcfcf47c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b29ab0e61beb75a9204d59777fe13a89dcfcf47c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJX8hL6AAoJEC1/I3LlD+E3ht4H/A5ueD1a7TN+IkSKCMq52kUR\nq7f751VjLfo0Lj6Rg9PUfpG5OSbz+ItGRga6UJXZGPLXNDNYkMeaT1ng/lXSyq+Z\nfvM2kQsPmdB1DBx/esq/MxxBVrdVnOcL2eo7IvohRNWdtEk1SeL2xacfyuIiJYLE\nVBULnDcjVy4t5/CeRB6batltOOplP+G/3fkBwbpFnZghsEUVyCV6arP7Zi80iCop\nS2+qpWPg1YNyFMl4t8F4ufEL/DNSNiQLH9GGT+1hjJgKjYLpNZLDpOgoPVICPwld\nNzGbVDwZ+OYgaVq0mQFG8puQzlK0J478dKWCqD/ngr9QI+izmbWxDJDwJip1UMo=\n=hhyr\n-----END PGP SIGNATURE-----",
        "payload": "tree b29ab0e61beb75a9204d59777fe13a89dcfcf47c\nparent eafc5f4fae52a16ad7343f7fb13bfecf9b62310a\nparent fa7c35c4ec630838178b4674288da33561a66f08\nauthor MarcoFalke <falke.marco@gmail.com> 1475482348 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1475482362 +0200\n\nMerge #8860: [qa] util: Move wait_bitcoinds() into stop_nodes()\n\nfa7c35c [qa] util: Move wait_bitcoinds() into stop_nodes() (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eafc5f4fae52a16ad7343f7fb13bfecf9b62310a"
      },
      {
        "sha": "fa7c35c4ec630838178b4674288da33561a66f08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7c35c4ec630838178b4674288da33561a66f08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7c35c4ec630838178b4674288da33561a66f08"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 12,
      "deletions": 23
    },
    "files": [
      {
        "sha": "be6ddde112ea280040b531dc9a526e24089e4dde",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -195,7 +195,6 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         # Restart all\n         self.test.block_store.close()\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         shutil.rmtree(self.options.tmpdir)\n         self.setup_chain()\n         self.setup_network()"
      },
      {
        "sha": "8c45578fcfbddba93cb38ff66c11a75825228f4b",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -470,7 +470,6 @@ def run_test(self):\n         self.nodes[1].encryptwallet(\"test\")\n         self.nodes.pop(1)\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n \n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "fc3eddddee17b18fe93b396f0d3f91ea43efa1e5",
        "filename": "qa/rpc-tests/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-versionbits-warning.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -144,8 +144,7 @@ def run_test(self):\n         # is cleared, and restart the node. This should move the versionbit state\n         # to ACTIVE.\n         self.nodes[0].generate(VB_PERIOD)\n-        stop_node(self.nodes[0], 0)\n-        wait_bitcoinds()\n+        stop_nodes(self.nodes)\n         # Empty out the alert file\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n@@ -156,8 +155,7 @@ def run_test(self):\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getinfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getmininginfo()[\"errors\"])\n         assert(WARN_UNKNOWN_RULES_ACTIVE in self.nodes[0].getnetworkinfo()[\"warnings\"])\n-        stop_node(self.nodes[0], 0)\n-        wait_bitcoinds()\n+        stop_nodes(self.nodes)\n         self.test_versionbits_in_alert_file()\n \n         # Test framework expects the node to still be running..."
      },
      {
        "sha": "25cf4c1679b984b86d261b67eb66127a09b3abe1",
        "filename": "qa/rpc-tests/reindex.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/reindex.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -7,7 +7,11 @@\n # Test -reindex and -reindex-chainstate with CheckBlockIndex\n #\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import *\n+from test_framework.util import (\n+    start_nodes,\n+    stop_nodes,\n+    assert_equal,\n+)\n import time\n \n class ReindexTest(BitcoinTestFramework):\n@@ -18,16 +22,14 @@ def __init__(self):\n         self.num_nodes = 1\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.is_network_split = False\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()\n-        stop_node(self.nodes[0], 0)\n-        wait_bitcoinds()\n-        self.nodes[0]=start_node(0, self.options.tmpdir, [\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"])\n+        stop_nodes(self.nodes)\n+        extra_args = [[\"-debug\", \"-reindex-chainstate\" if justchainstate else \"-reindex\", \"-checkblockindex=1\"]]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n         while self.nodes[0].getblockcount() < blockcount:\n             time.sleep(0.1)\n         assert_equal(self.nodes[0].getblockcount(), blockcount)"
      },
      {
        "sha": "d78d0b884e9ed97347ff5e7729a9a7c2d81b3bd4",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -40,7 +40,6 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             assert_equal(set(get_bind_addrs(pid)), set(expected))\n         finally:\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n@@ -56,7 +55,6 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         finally:\n             node = None # make sure connection will be garbage collected and closed\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux"
      },
      {
        "sha": "e6fc5fd8a20e48683352f611a1bdc6d60e375066",
        "filename": "qa/rpc-tests/test_framework/test_framework.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/test_framework.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -21,7 +21,6 @@\n     sync_mempools,\n     stop_nodes,\n     stop_node,\n-    wait_bitcoinds,\n     enable_coverage,\n     check_json_precision,\n     initialize_chain_clean,\n@@ -81,7 +80,6 @@ def split_network(self):\n         \"\"\"\n         assert not self.is_network_split\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.setup_network(True)\n \n     def sync_all(self):\n@@ -100,7 +98,6 @@ def join_network(self):\n         \"\"\"\n         assert self.is_network_split\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.setup_network(False)\n \n     def main(self):\n@@ -170,7 +167,6 @@ def main(self):\n         if not self.options.noshutdown:\n             print(\"Stopping nodes\")\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n         else:\n             print(\"Note: bitcoinds were not stopped and may still be running\")\n "
      },
      {
        "sha": "c6b0367b419d6c73d2a3770c74f87dcb19075f35",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -266,7 +266,6 @@ def initialize_chain(test_dir, num_nodes, cachedir):\n \n         # Shut them down, and clean up cache directories:\n         stop_nodes(rpcs)\n-        wait_bitcoinds()\n         disable_mocktime()\n         for i in range(MAX_NODES):\n             os.remove(log_filename(cachedir, i, \"debug.log\"))\n@@ -365,6 +364,7 @@ def stop_nodes(nodes):\n         except http.client.CannotSendRequest as e:\n             print(\"WARN: Unable to stop node: \" + repr(e))\n     del nodes[:] # Emptying array closes connections as a side effect\n+    wait_bitcoinds()\n \n def set_node_times(nodes, t):\n     for node in nodes:"
      },
      {
        "sha": "e43f6ea5d225ee2b8276412e27221f68ea8f59f8",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/76f3c02fb01a6df98fbd8c16ac21d159d4649d37/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "patch": "@@ -199,7 +199,6 @@ def run_test (self):\n \n         #do some -walletbroadcast tests\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.nodes = start_nodes(3, self.options.tmpdir, [[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"],[\"-walletbroadcast=0\"]])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n@@ -225,7 +224,6 @@ def run_test (self):\n \n         #restart the nodes with -walletbroadcast=1\n         stop_nodes(self.nodes)\n-        wait_bitcoinds()\n         self.nodes = start_nodes(3, self.options.tmpdir)\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n@@ -335,7 +333,6 @@ def run_test (self):\n         for m in maintenance:\n             print(\"check \" + m)\n             stop_nodes(self.nodes)\n-            wait_bitcoinds()\n             self.nodes = start_nodes(3, self.options.tmpdir, [[m]] * 3)\n             while m == '-reindex' and [block_count] * 3 != [self.nodes[i].getblockcount() for i in range(3)]:\n                 # reindex will leave rpc warm up \"early\"; Wait for it to finish"
      }
    ]
  },
  {
    "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2U1Y2JiMjA5ZDRhZWI4YzJlNGM1OGM5MmJmMjE0NzU5OTk4MDU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-03T11:16:40Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-03T13:25:09Z"
      },
      "message": "Merge #8856: Globals: Decouple GetConfigFile and ReadConfigFile from global mapArgs\n\n3450c18 Globals: Decouple GetConfigFile and ReadConfigFile from global mapArgs (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "4f0885ed50a46481db455943f5ea6bdb332a61ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f0885ed50a46481db455943f5ea6bdb332a61ec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX8lw1AAoJEHSBCwEjRsmmojgH/RKOCdjxYkXFZzVgTj7jF+Kf\nhDs7yWNgzzE6B/d3ScNeR1nHJITQCbEOX+0jLV0yN8m4bPtljqG3J6uqJ7d7d9lZ\njwxTwn8nt1H8DDnitK9e0zX+aCB0RHiSK0Kc9iNnnBG2GDxmReoWcVKjyF/rBsNh\nUmw0THrCQBbWlv2O6v/ONI5tDvkFwob7J5m6gIHTXVi/Jz3HoKmfsqesqpKIavus\nqDqFUECFBc7+C64JKCzJLECctsxQ0EQYWBBkodxRCfunJgDmlbq85XPapTWcqxPo\nnjy003s5m3swNMVaFc8T4fwAAROiJ/DrKXJGMUC6XeKjxiXIyZ4D40qFdtFQnpE=\n=1lsh\n-----END PGP SIGNATURE-----",
        "payload": "tree 4f0885ed50a46481db455943f5ea6bdb332a61ec\nparent 76f3c02fb01a6df98fbd8c16ac21d159d4649d37\nparent 3450c18a125f125aec76bfef79c69317eaad935d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475493400 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475501109 +0200\n\nMerge #8856: Globals: Decouple GetConfigFile and ReadConfigFile from global mapArgs\n\n3450c18 Globals: Decouple GetConfigFile and ReadConfigFile from global mapArgs (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76f3c02fb01a6df98fbd8c16ac21d159d4649d37"
      },
      {
        "sha": "3450c18a125f125aec76bfef79c69317eaad935d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3450c18a125f125aec76bfef79c69317eaad935d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3450c18a125f125aec76bfef79c69317eaad935d"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9d4c4e53bd26b544b89f4cb644cf13e7afc67d09",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "patch": "@@ -92,7 +92,7 @@ static bool AppInitRPC(int argc, char* argv[])\n         return false;\n     }\n     try {\n-        ReadConfigFile(mapArgs, mapMultiArgs);\n+        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n     } catch (const std::exception& e) {\n         fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n         return false;\n@@ -209,7 +209,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n         if (!GetAuthCookie(&strRPCUserColonPass)) {\n             throw runtime_error(strprintf(\n                 _(\"Could not locate RPC credentials. No authentication cookie could be found, and no rpcpassword is set in the configuration file (%s)\"),\n-                    GetConfigFile().string().c_str()));\n+                    GetConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string().c_str()));\n \n         }\n     } else {"
      },
      {
        "sha": "351463c256e39bc6f29bef0a4a587d645b3ec0e4",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "patch": "@@ -104,7 +104,7 @@ bool AppInit(int argc, char* argv[])\n         }\n         try\n         {\n-            ReadConfigFile(mapArgs, mapMultiArgs);\n+            ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n         } catch (const std::exception& e) {\n             fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n             return false;"
      },
      {
        "sha": "eefef7ba0b2537dbddc23f8aa055f3bb067c56a3",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "patch": "@@ -1064,7 +1064,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         LogPrintf(\"Startup time: %s\\n\", DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", GetTime()));\n     LogPrintf(\"Default data directory %s\\n\", GetDefaultDataDir().string());\n     LogPrintf(\"Using data directory %s\\n\", strDataDir);\n-    LogPrintf(\"Using config file %s\\n\", GetConfigFile().string());\n+    LogPrintf(\"Using config file %s\\n\", GetConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n     LogPrintf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);"
      },
      {
        "sha": "9986af49576439cdf5813726c3e68b523a109ea6",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "patch": "@@ -590,7 +590,7 @@ int main(int argc, char *argv[])\n         return 1;\n     }\n     try {\n-        ReadConfigFile(mapArgs, mapMultiArgs);\n+        ReadConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME), mapArgs, mapMultiArgs);\n     } catch (const std::exception& e) {\n         QMessageBox::critical(0, QObject::tr(PACKAGE_NAME),\n                               QObject::tr(\"Error: Cannot parse configuration file: %1. Only use key=value syntax.\").arg(e.what()));"
      },
      {
        "sha": "c20ede62210b165f951933bbecb8b751ca06add8",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "patch": "@@ -518,19 +518,20 @@ void ClearDatadirCache()\n     pathCachedNetSpecific = boost::filesystem::path();\n }\n \n-boost::filesystem::path GetConfigFile()\n+boost::filesystem::path GetConfigFile(const std::string& confPath)\n {\n-    boost::filesystem::path pathConfigFile(GetArg(\"-conf\", BITCOIN_CONF_FILENAME));\n+    boost::filesystem::path pathConfigFile(confPath);\n     if (!pathConfigFile.is_complete())\n         pathConfigFile = GetDataDir(false) / pathConfigFile;\n \n     return pathConfigFile;\n }\n \n-void ReadConfigFile(map<string, string>& mapSettingsRet,\n+void ReadConfigFile(const std::string& confPath,\n+                    map<string, string>& mapSettingsRet,\n                     map<string, vector<string> >& mapMultiSettingsRet)\n {\n-    boost::filesystem::ifstream streamConfig(GetConfigFile());\n+    boost::filesystem::ifstream streamConfig(GetConfigFile(confPath));\n     if (!streamConfig.good())\n         return; // No bitcoin.conf file is OK\n "
      },
      {
        "sha": "bbb9b5db825deb27833948d4b75e8465b2c21934",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7e5cbb209d4aeb8c2e4c58c92bf214759998056/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "patch": "@@ -102,12 +102,12 @@ bool TryCreateDirectory(const boost::filesystem::path& p);\n boost::filesystem::path GetDefaultDataDir();\n const boost::filesystem::path &GetDataDir(bool fNetSpecific = true);\n void ClearDatadirCache();\n-boost::filesystem::path GetConfigFile();\n+boost::filesystem::path GetConfigFile(const std::string& confPath);\n #ifndef WIN32\n boost::filesystem::path GetPidFile();\n void CreatePidFile(const boost::filesystem::path &path, pid_t pid);\n #endif\n-void ReadConfigFile(std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n+void ReadConfigFile(const std::string& confPath, std::map<std::string, std::string>& mapSettingsRet, std::map<std::string, std::vector<std::string> >& mapMultiSettingsRet);\n #ifdef WIN32\n boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n #endif"
      }
    ]
  },
  {
    "sha": "7dce175f5d89c9185f4cd7bfbd7626205b122001",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGNlMTc1ZjVkODljOTE4NWY0Y2Q3YmZiZDc2MjYyMDViMTIyMDAx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T08:34:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T09:08:06Z"
      },
      "message": "Merge #8850: Implement (begin|end)_ptr in C++11 and add deprecation comment\n\nf00705a serialize: Deprecate `begin_ptr` / `end_ptr` (Wladimir J. van der Laan)\n47314e6 prevector: add C++11-like data() method (Wladimir J. van der Laan)",
      "tree": {
        "sha": "d9799928b98746f7b83f51ec9a43fd36abdd0180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9799928b98746f7b83f51ec9a43fd36abdd0180"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dce175f5d89c9185f4cd7bfbd7626205b122001",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX83F2AAoJEHSBCwEjRsmmYOUH/2lmgZmghlwPGG4oUnNLrG+A\ndo61M3752vk99HUFCfgxoeD67iVOHw64LLKTEBF3n6The/XXn7GKhKH/256OFmrR\nN8VlB1pU4gk8e3zwiVzk9KWzhqzpSqwm2LQlxY7OvckKf3NqwkGQmLRdjC//QsL6\nJX14dTnE+znpGLrT1lgzqUCeZQFnqWWQmgwYnXInyCj+hWraOBatidbewoCSKdW4\nxL1yIFXLz6mmh9UXDrEvok2bGS4cA/m7gsNbZQ0RuGyzaII7a6wNZAd0W17VsiWS\ndmBHcosQ7DSso33Fdtmeno0jseLdw8kTCFRH9hdeOyNNXJxu8VHOcpDg3dJDsrM=\n=ph6r\n-----END PGP SIGNATURE-----",
        "payload": "tree d9799928b98746f7b83f51ec9a43fd36abdd0180\nparent a7e5cbb209d4aeb8c2e4c58c92bf214759998056\nparent f00705ae7ff3c1db805859e3be41e58ac70625b6\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475570058 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475572086 +0200\n\nMerge #8850: Implement (begin|end)_ptr in C++11 and add deprecation comment\n\nf00705a serialize: Deprecate `begin_ptr` / `end_ptr` (Wladimir J. van der Laan)\n47314e6 prevector: add C++11-like data() method (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dce175f5d89c9185f4cd7bfbd7626205b122001",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7dce175f5d89c9185f4cd7bfbd7626205b122001",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dce175f5d89c9185f4cd7bfbd7626205b122001/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      },
      {
        "sha": "f00705ae7ff3c1db805859e3be41e58ac70625b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f00705ae7ff3c1db805859e3be41e58ac70625b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f00705ae7ff3c1db805859e3be41e58ac70625b6"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 18,
      "deletions": 11
    },
    "files": [
      {
        "sha": "25bce522dc9b1717385a96bd86b9228e0dde067c",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dce175f5d89c9185f4cd7bfbd7626205b122001/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dce175f5d89c9185f4cd7bfbd7626205b122001/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=7dce175f5d89c9185f4cd7bfbd7626205b122001",
        "patch": "@@ -475,6 +475,14 @@ class prevector {\n             return ((size_t)(sizeof(T))) * _union.capacity;\n         }\n     }\n+\n+    value_type* data() {\n+        return item_ptr(0);\n+    }\n+\n+    const value_type* data() const {\n+        return item_ptr(0);\n+    }\n };\n #pragma pack(pop)\n "
      },
      {
        "sha": "1f51da82fffa24a672fb8d60ca32458c03ecf699",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 10,
        "deletions": 11,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dce175f5d89c9185f4cd7bfbd7626205b122001/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dce175f5d89c9185f4cd7bfbd7626205b122001/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=7dce175f5d89c9185f4cd7bfbd7626205b122001",
        "patch": "@@ -44,33 +44,32 @@ inline T* NCONST_PTR(const T* val)\n     return const_cast<T*>(val);\n }\n \n-/** \n- * Get begin pointer of vector (non-const version).\n- * @note These functions avoid the undefined case of indexing into an empty\n- * vector, as well as that of indexing after the end of the vector.\n+/**\n+ * Important: Do not use the following functions in new code, but use v.data()\n+ * and v.data() + v.size() respectively directly. They were once introduced to\n+ * have a compatible, safe way to get the begin and end pointer of a vector.\n+ * However with C++11 the language has built-in functionality for this and it's\n+ * more readable to just use that.\n  */\n template <typename V>\n inline typename V::value_type* begin_ptr(V& v)\n {\n-    return v.empty() ? NULL : &v[0];\n+    return v.data();\n }\n-/** Get begin pointer of vector (const version) */\n template <typename V>\n inline const typename V::value_type* begin_ptr(const V& v)\n {\n-    return v.empty() ? NULL : &v[0];\n+    return v.data();\n }\n-/** Get end pointer of vector (non-const version) */\n template <typename V>\n inline typename V::value_type* end_ptr(V& v)\n {\n-    return v.empty() ? NULL : (&v[0] + v.size());\n+    return v.data() + v.size();\n }\n-/** Get end pointer of vector (const version) */\n template <typename V>\n inline const typename V::value_type* end_ptr(const V& v)\n {\n-    return v.empty() ? NULL : (&v[0] + v.size());\n+    return v.data() + v.size();\n }\n \n /*"
      }
    ]
  },
  {
    "sha": "d93f0c61843f9da2a662f54ea1794ae0d263b196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTNmMGM2MTg0M2Y5ZGEyYTY2MmY1NGVhMTc5NGFlMGQyNjNiMTk2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T10:13:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T10:13:50Z"
      },
      "message": "Merge #8862: Fix a few cases where messages were sent after requested disconnect\n\n905bc68 net: fix a few cases where messages were sent rather than dropped upon disconnection (Cory Fields)",
      "tree": {
        "sha": "e2ec02343373e60b81803a742de92e3f8a19bdf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e2ec02343373e60b81803a742de92e3f8a19bdf3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d93f0c61843f9da2a662f54ea1794ae0d263b196",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX84DeAAoJEHSBCwEjRsmmdj4IAMbFF3mQjvhpRQlImfDzbrWU\n7bgdpofBGpJSygbq51/bQihTQXQVxDdbruZPq361PJMLgw7d+t8H7XniwRoVt9z8\nY4zq4eqYXmg8WeYAwUhLyob46AIllSOF7eteijAfzYgRTTgLIfPw3Acw5A1hbc80\nVI+dlLU3auZArMz0Efat6bazsjMnIsVrfwDAtMI4iwZEA1zvsCz+E7sNJKm5gMuo\n3YqbBSoqu60CGziILsWZ72kVn5i9mkMqUCPA36ZnkllgAyN4SO+DqzKrkRgkjfJV\nZol7NOB5ACN78pbR861m+qkZ58sxXBJj56CvlOs+S3IOJc7PRyn4gzRdo+LQDrg=\n=tisi\n-----END PGP SIGNATURE-----",
        "payload": "tree e2ec02343373e60b81803a742de92e3f8a19bdf3\nparent 7dce175f5d89c9185f4cd7bfbd7626205b122001\nparent 905bc68d05595f41cca36b3df83accd10c00cc48\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475576021 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475576030 +0200\n\nMerge #8862: Fix a few cases where messages were sent after requested disconnect\n\n905bc68 net: fix a few cases where messages were sent rather than dropped upon disconnection (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93f0c61843f9da2a662f54ea1794ae0d263b196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d93f0c61843f9da2a662f54ea1794ae0d263b196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93f0c61843f9da2a662f54ea1794ae0d263b196/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7dce175f5d89c9185f4cd7bfbd7626205b122001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dce175f5d89c9185f4cd7bfbd7626205b122001",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dce175f5d89c9185f4cd7bfbd7626205b122001"
      },
      {
        "sha": "905bc68d05595f41cca36b3df83accd10c00cc48",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/905bc68d05595f41cca36b3df83accd10c00cc48",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/905bc68d05595f41cca36b3df83accd10c00cc48"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "437e972382acd179f7f16fe1318798086fadc5d2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d93f0c61843f9da2a662f54ea1794ae0d263b196/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d93f0c61843f9da2a662f54ea1794ae0d263b196/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d93f0c61843f9da2a662f54ea1794ae0d263b196",
        "patch": "@@ -6351,7 +6351,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             // Ping automatically sent as a latency probe & keepalive.\n             pingSend = true;\n         }\n-        if (pingSend) {\n+        if (pingSend && !pto->fDisconnect) {\n             uint64_t nonce = 0;\n             while (nonce == 0) {\n                 GetRandBytes((unsigned char*)&nonce, sizeof(nonce));\n@@ -6432,7 +6432,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n         if (pindexBestHeader == NULL)\n             pindexBestHeader = chainActive.Tip();\n         bool fFetch = state.fPreferredDownload || (nPreferredDownload == 0 && !pto->fClient && !pto->fOneShot); // Download if this is a nice peer, or we have no nice peers and this one might do.\n-        if (!state.fSyncStarted && !pto->fClient && !fImporting && !fReindex) {\n+        if (!state.fSyncStarted && !pto->fClient && !pto->fDisconnect && !fImporting && !fReindex) {\n             // Only actively request headers from a single peer, unless we're close to today.\n             if ((nSyncStarted == 0 && fFetch) || pindexBestHeader->GetBlockTime() > GetAdjustedTime() - 24 * 60 * 60) {\n                 state.fSyncStarted = true;"
      }
    ]
  },
  {
    "sha": "d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzYxNWFmMzRlOGUxOTkyMGVkMTJiZmRhZmIwOWUwZTRiNTdjN2M1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T10:14:43Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T10:18:16Z"
      },
      "message": "Merge #8848: Add NULLDUMMY verify flag in bitcoinconsensus.h\n\n2fa0063 Add NULLDUMMY verify flag in bitcoinconsensus.h (Johnson Lau)",
      "tree": {
        "sha": "1dcbb18d8a8643d43b725e1501ce6b0a34bfcbab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dcbb18d8a8643d43b725e1501ce6b0a34bfcbab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX84HoAAoJEHSBCwEjRsmmSU0H/itLK63mF/KEGXA6PbROD0Ep\nRQ2w1L5PpohwJNhvUgwVXG4UJ6c0jpySbyApdA5qnXgKlr95G3mvVzB4AsJq2sNm\nf1Fgq/vj6+BVzgwGXV8jrBrhnR0h0g7RHMGldu8MrEuIMlR6EXtcZDz6JiA3YsBK\nn5l9W64jjuOvkGVuZVq68j4tDL3hd+i0PIbDS95IEokN9Q24/n22QH4lMsqP0qva\nfiMTYmidTbjLN2uG7wJtUa+lteUopF64Pntpoiu+bATSWhGnudjftBPi1bQkS8Um\nv4DkXeElYz6AlSnAn/dXMFqWhq12mc6I4TKcg9XymomdBhy9jJNqkt/YB616DIY=\n=HrYp\n-----END PGP SIGNATURE-----",
        "payload": "tree 1dcbb18d8a8643d43b725e1501ce6b0a34bfcbab\nparent d93f0c61843f9da2a662f54ea1794ae0d263b196\nparent 2fa0063c26c80c719a1c0d30e548e338689ac917\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475576083 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475576296 +0200\n\nMerge #8848: Add NULLDUMMY verify flag in bitcoinconsensus.h\n\n2fa0063 Add NULLDUMMY verify flag in bitcoinconsensus.h (Johnson Lau)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d93f0c61843f9da2a662f54ea1794ae0d263b196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d93f0c61843f9da2a662f54ea1794ae0d263b196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d93f0c61843f9da2a662f54ea1794ae0d263b196"
      },
      {
        "sha": "2fa0063c26c80c719a1c0d30e548e338689ac917",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fa0063c26c80c719a1c0d30e548e338689ac917",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2fa0063c26c80c719a1c0d30e548e338689ac917"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "dc363582cc8dee8c6ce0d0afadad030d08958793",
        "filename": "doc/shared-libraries.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5/doc/shared-libraries.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5/doc/shared-libraries.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/shared-libraries.md?ref=d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "patch": "@@ -30,12 +30,17 @@ The interface is defined in the C header `bitcoinconsensus.h` located in  `src/s\n - `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE`\n - `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH` - Evaluate P2SH ([BIP16](https://github.com/bitcoin/bips/blob/master/bip-0016.mediawiki)) subscripts\n - `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG` - Enforce strict DER ([BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)) compliance\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY` - Enforce NULLDUMMY ([BIP147](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki))\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY` - Enable CHECKLOCKTIMEVERIFY ([BIP65](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki))\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY` - Enable CHECKSEQUENCEVERIFY ([BIP112](https://github.com/bitcoin/bips/blob/master/bip-0112.mediawiki))\n+- `bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS` - Enable WITNESS ([BIP141](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki))\n \n ##### Errors\n - `bitcoinconsensus_ERR_OK` - No errors with input parameters *(see the return value of `bitcoinconsensus_verify_script` for the verification status)*\n - `bitcoinconsensus_ERR_TX_INDEX` - An invalid index for `txTo`\n - `bitcoinconsensus_ERR_TX_SIZE_MISMATCH` - `txToLen` did not match with the size of `txTo`\n - `bitcoinconsensus_ERR_DESERIALIZE` - An error deserializing `txTo`\n+- `bitcoinconsensus_ERR_AMOUNT_REQUIRED` - Input amount is required if WITNESS is used\n \n ### Example Implementations\n - [NBitcoin](https://github.com/NicolasDorier/NBitcoin/blob/master/NBitcoin/Script.cs#L814) (.NET Bindings)"
      },
      {
        "sha": "1d2d5c23e471c9536c44505904bbfc9d8949ae62",
        "filename": "src/script/bitcoinconsensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5/src/script/bitcoinconsensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5/src/script/bitcoinconsensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/bitcoinconsensus.h?ref=d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -50,6 +50,7 @@ enum\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NONE                = 0,\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_P2SH                = (1U << 0), // evaluate P2SH (BIP16) subscripts\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_DERSIG              = (1U << 2), // enforce strict DER (BIP66) compliance\n+    bitcoinconsensus_SCRIPT_FLAGS_VERIFY_NULLDUMMY           = (1U << 4), // enforce NULLDUMMY (BIP147)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKLOCKTIMEVERIFY = (1U << 9), // enable CHECKLOCKTIMEVERIFY (BIP65)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_CHECKSEQUENCEVERIFY = (1U << 10), // enable CHECKSEQUENCEVERIFY (BIP112)\n     bitcoinconsensus_SCRIPT_FLAGS_VERIFY_WITNESS             = (1U << 11), // enable WITNESS (BIP141)"
      }
    ]
  },
  {
    "sha": "f9bd92d235a187a9bfea4c956bf74e2e08cebb46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWJkOTJkMjM1YTE4N2E5YmZlYTRjOTU2YmY3NGUyZTA4Y2ViYjQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T11:11:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T11:11:21Z"
      },
      "message": "version.h: s/shord/short/ in comment",
      "tree": {
        "sha": "09b9ad80436217a324b703c767c7f0b93be5dcdf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/09b9ad80436217a324b703c767c7f0b93be5dcdf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9bd92d235a187a9bfea4c956bf74e2e08cebb46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9bd92d235a187a9bfea4c956bf74e2e08cebb46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9bd92d235a187a9bfea4c956bf74e2e08cebb46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9bd92d235a187a9bfea4c956bf74e2e08cebb46/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "87bd65506670a6ab99c44c4e2f1442c0baf98f19",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9bd92d235a187a9bfea4c956bf74e2e08cebb46/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9bd92d235a187a9bfea4c956bf74e2e08cebb46/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=f9bd92d235a187a9bfea4c956bf74e2e08cebb46",
        "patch": "@@ -39,7 +39,7 @@ static const int SENDHEADERS_VERSION = 70012;\n //! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n static const int FEEFILTER_VERSION = 70013;\n \n-//! shord-id-based block download starts with this version\n+//! short-id-based block download starts with this version\n static const int SHORT_IDS_BLOCKS_VERSION = 70014;\n \n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "2c09a5209ab00573a2422e1e65c437a6e2f59624",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzA5YTUyMDlhYjAwNTczYTI0MjJlMWU2NWM0MzdhNmUyZjU5NjI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T11:12:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T11:12:55Z"
      },
      "message": "protocol.h: Move MESSAGE_START_SIZE into CMessageHeader\n\nAlso move the enum to the top, and remove a deceptive TODO\ncomment.",
      "tree": {
        "sha": "40f6e44d235370c22565b43b31af8ebe93507ec8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/40f6e44d235370c22565b43b31af8ebe93507ec8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c09a5209ab00573a2422e1e65c437a6e2f59624",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c09a5209ab00573a2422e1e65c437a6e2f59624",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c09a5209ab00573a2422e1e65c437a6e2f59624",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c09a5209ab00573a2422e1e65c437a6e2f59624/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f9bd92d235a187a9bfea4c956bf74e2e08cebb46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9bd92d235a187a9bfea4c956bf74e2e08cebb46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9bd92d235a187a9bfea4c956bf74e2e08cebb46"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 13,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9b66aad429f99b4be305787fe7ca64318ec74263",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c09a5209ab00573a2422e1e65c437a6e2f59624/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c09a5209ab00573a2422e1e65c437a6e2f59624/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2c09a5209ab00573a2422e1e65c437a6e2f59624",
        "patch": "@@ -4358,11 +4358,11 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n             unsigned int nSize = 0;\n             try {\n                 // locate a header\n-                unsigned char buf[MESSAGE_START_SIZE];\n+                unsigned char buf[CMessageHeader::MESSAGE_START_SIZE];\n                 blkdat.FindByte(chainparams.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, chainparams.MessageStart(), MESSAGE_START_SIZE))\n+                if (memcmp(buf, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -6232,7 +6232,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman)\n         it++;\n \n         // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), MESSAGE_START_SIZE) != 0) {\n+        if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n             LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;"
      },
      {
        "sha": "cdb76b90381c58cabf0fc691a48fd8d80a6c520f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c09a5209ab00573a2422e1e65c437a6e2f59624/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c09a5209ab00573a2422e1e65c437a6e2f59624/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=2c09a5209ab00573a2422e1e65c437a6e2f59624",
        "patch": "@@ -18,8 +18,6 @@\n #include <stdint.h>\n #include <string>\n \n-#define MESSAGE_START_SIZE 4\n-\n /** Message header.\n  * (4) message start.\n  * (12) command.\n@@ -29,6 +27,16 @@\n class CMessageHeader\n {\n public:\n+    enum {\n+        MESSAGE_START_SIZE = 4,\n+        COMMAND_SIZE = 12,\n+        MESSAGE_SIZE_SIZE = 4,\n+        CHECKSUM_SIZE = 4,\n+\n+        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n+        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n+        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n+    };\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n     CMessageHeader(const MessageStartChars& pchMessageStartIn);\n@@ -48,17 +56,6 @@ class CMessageHeader\n         READWRITE(FLATDATA(pchChecksum));\n     }\n \n-    // TODO: make private (improves encapsulation)\n-public:\n-    enum {\n-        COMMAND_SIZE = 12,\n-        MESSAGE_SIZE_SIZE = 4,\n-        CHECKSUM_SIZE = 4,\n-\n-        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n-        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n-        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n-    };\n     char pchMessageStart[MESSAGE_START_SIZE];\n     char pchCommand[COMMAND_SIZE];\n     uint32_t nMessageSize;"
      }
    ]
  },
  {
    "sha": "eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWVlYmRkM2NiYTFlNjk4MzVmODI2MjM2ZjdkNzFlZThkNzZhY2U0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-21T10:21:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-04T11:27:38Z"
      },
      "message": "[doc] Rework docs\n\n* Minor formatting such as adjusting links\n* Move sections of `doc/multiwallet-qt.md` to the source code and delete\n  the file, as it is outdated\n* Fix typo in the release notes\n* Amend release process to mention update of BLOCK_CHAIN_SIZE",
      "tree": {
        "sha": "656826ddb80cb9d0d0130092dd0c4ae5a17c5234",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/656826ddb80cb9d0d0130092dd0c4ae5a17c5234"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7dce175f5d89c9185f4cd7bfbd7626205b122001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dce175f5d89c9185f4cd7bfbd7626205b122001",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dce175f5d89c9185f4cd7bfbd7626205b122001"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 24,
      "deletions": 55
    },
    "files": [
      {
        "sha": "e4fa49614ac8c56baad4b43fa104b3f956054754",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "patch": "@@ -3,7 +3,9 @@ Bitcoin Core 0.13.99\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+\n+To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/releases/).\n \n Running\n ---------------------\n@@ -46,13 +48,13 @@ Development\n The Bitcoin repo's [root README](/README.md) contains relevant information on the development process and automated testing.\n \n - [Developer Notes](developer-notes.md)\n-- [Multiwallet Qt Development](multiwallet-qt.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Unit Tests](unit-tests.md)\n+- [Travis CI](travis-ci.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n@@ -67,11 +69,13 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n - [Files](files.md)\n+- [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [ZMQ](zmq.md)\n \n License\n ---------------------\n-Distributed under the [MIT software license](http://www.opensource.org/licenses/mit-license.php).\n+Distributed under the [MIT software license](/COPYING).\n This product includes software developed by the OpenSSL Project for use in the [OpenSSL Toolkit](https://www.openssl.org/). This product includes\n cryptographic software written by Eric Young ([eay@cryptsoft.com](mailto:eay@cryptsoft.com)), and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "3caab818076b88f54e1da3d9cd25a809b9352ca9",
        "filename": "doc/multiwallet-qt.md",
        "status": "removed",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dce175f5d89c9185f4cd7bfbd7626205b122001/doc/multiwallet-qt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dce175f5d89c9185f4cd7bfbd7626205b122001/doc/multiwallet-qt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiwallet-qt.md?ref=7dce175f5d89c9185f4cd7bfbd7626205b122001",
        "patch": "@@ -1,48 +0,0 @@\n-Multiwallet Qt Development and Integration Strategy\n-===================================================\n-\n-In order to support loading of multiple wallets in bitcoin-qt, a few changes in the UI architecture will be needed.\n-Fortunately, only four of the files in the existing project are affected by this change.\n-\n-Two new classes have been implemented in two new .h/.cpp file pairs, with much of the functionality that was previously\n-implemented in the BitcoinGUI class moved over to these new classes.\n-\n-The two existing files most affected, by far, are bitcoingui.h and bitcoingui.cpp, as the BitcoinGUI class will require\n-some major retrofitting.\n-\n-Only requiring some minor changes is bitcoin.cpp.\n-\n-Finally, two new headers and source files will have to be added to bitcoin-qt.pro.\n-\n-Changes to class BitcoinGUI\n----------------------------\n-The principal change to the BitcoinGUI class concerns the QStackedWidget instance called centralWidget.\n-This widget owns five page views: overviewPage, transactionsPage, addressBookPage, receiveCoinsPage, and sendCoinsPage.\n-\n-A new class called *WalletView* inheriting from QStackedWidget has been written to handle all renderings and updates of\n-these page views. In addition to owning these five page views, a WalletView also has a pointer to a WalletModel instance.\n-This allows the construction of multiple WalletView objects, each rendering a distinct wallet.\n-\n-A second class called *WalletFrame* inheriting from QFrame has been written as a container for embedding all wallet-related\n-controls into BitcoinGUI. At present it contains the WalletView instances for the wallets and does little more than passing on messages\n-from BitcoinGUI to the currently selected WalletView. It is a WalletFrame instance\n-that takes the place of what used to be centralWidget in BitcoinGUI. The purpose of this class is to allow future\n-refinements of the wallet controls with minimal need for further modifications to BitcoinGUI, thus greatly simplifying\n-merges while reducing the risk of breaking top-level stuff.\n-\n-Changes to bitcoin.cpp\n-----------------------\n-bitcoin.cpp is the entry point into bitcoin-qt, and as such, will require some minor modifications to provide hooks for\n-multiple wallet support. Most importantly will be the way it instantiates WalletModels and passes them to the\n-singleton BitcoinGUI instance called window. Formerly, BitcoinGUI kept a pointer to a single instance of a WalletModel.\n-The initial change required is very simple: rather than calling `window.setWalletModel(&walletModel);` we perform the\n-following two steps:\n-\n-\twindow.addWallet(\"~Default\", &walletModel);\n-\twindow.setCurrentWallet(\"~Default\");\n-\n-The string parameter is just an arbitrary name given to the default wallet. It's been prepended with a tilde to avoid name collisions in the future with additional wallets.\n-\n-The shutdown call `window.setWalletModel(0)` has also been removed. In its place is now:\n-\n-window.removeAllWallets();"
      },
      {
        "sha": "f9bf3d75de09db045a308d3223aa2b89d33a1989",
        "filename": "doc/release-notes/release-notes-0.13.0.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/release-notes/release-notes-0.13.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/release-notes/release-notes-0.13.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.0.md?ref=eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "patch": "@@ -643,7 +643,7 @@ git merge commit are mentioned.\n - #8041 `5b736dd` Fix bip9-softforks blockstore issue (MarcoFalke)\n - #7994 `1f01443` Add op csv tests to script_tests.json (Christewart)\n - #8038 `e2bf830` Various minor fixes (MarcoFalke)\n-- #8072 `1b87e5b` Travis: 'make check' in parallel and verbose (MarcoFalke)\n+- #8072 `1b87e5b` Travis: 'make check' in parallel and verbose (theuni)\n - #8056 `8844ef1` Remove hardcoded \"4 nodes\" from test_framework (MarcoFalke)\n - #8047 `37f9a1f` Test_framework: Set wait-timeout for bitcoind procs (MarcoFalke)\n - #8095 `6700cc9` Test framework: only cleanup on successful test runs (sdaftuar)"
      },
      {
        "sha": "63f75fb3992a2235068a9eb0b13e5d64f53b5eb7",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "patch": "@@ -16,6 +16,7 @@ Before every minor and major release:\n Before every major release:\n \n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n+* Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n \n ### First time / New builders\n "
      },
      {
        "sha": "38085cec353ad321fec081e69769708a64244bde",
        "filename": "doc/travis-ci.md",
        "status": "renamed",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/travis-ci.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/doc/travis-ci.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/travis-ci.md?ref=eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "patch": "@@ -1,13 +1,16 @@\n+Travis CI\n+=========\n+\n Support for using travis-ci has been added in order to automate pull-testing.\n-See https://travis-ci.org/ for more info\n+See [travis-ci.org](https://travis-ci.org/) for more info\n \n This procedure is different than the pull-tester that came before it in a few\n ways.\n \n There is nothing to administer. This is a major feature as it means\n that builds have no local state. Because there is no ability to login to the\n builders to install packages (tools, dependencies, etc), the entire build\n-procedure must instead be controlled by a declarative script (.travis.yml).\n+procedure must instead be controlled by a declarative script `.travis.yml`.\n This script declares each build configuration, creates virtual machines as\n necessary, builds, then discards the virtual machines.\n \n@@ -16,7 +19,7 @@ than a single pass/fail. This helps to catch build failures and logic errors\n that present on platforms other than the ones the author has tested. This\n matrix is defined in the build script and can be changed at any time.\n \n-All builders use the dependency-generator in the depends dir, rather than\n+All builders use the dependency-generator in the [depends dir](/depends), rather than\n using apt-get to install build dependencies. This guarantees that the tester\n is using the same versions as Gitian, so the build results are nearly identical\n to what would be found in a final release. However, this also means that builds",
        "previous_filename": "doc/travis-ci.txt"
      },
      {
        "sha": "af767aa6c62c01072f5684892c4da138ab6f9f76",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "patch": "@@ -74,6 +74,8 @@ const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n #endif\n         ;\n \n+/** Display name for default wallet name. Uses tilde to avoid name\n+ * collisions in the future with additional wallets */\n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :"
      },
      {
        "sha": "7bc6412910393e11ffda75919c7ec7978421cfff",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eeeebdd3cba1e69835f826236f7d71ee8d76ace4/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "patch": "@@ -19,6 +19,13 @@ QT_BEGIN_NAMESPACE\n class QStackedWidget;\n QT_END_NAMESPACE\n \n+/**\n+ * A container for embedding all wallet-related\n+ * controls into BitcoinGUI. The purpose of this class is to allow future\n+ * refinements of the wallet controls with minimal need for further\n+ * modifications to BitcoinGUI, thus greatly simplifying merges while\n+ * reducing the risk of breaking top-level stuff.\n+ */\n class WalletFrame : public QFrame\n {\n     Q_OBJECT"
      }
    ]
  },
  {
    "sha": "06128da751371797683eabb577298a4966b2ce28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjEyOGRhNzUxMzcxNzk3NjgzZWFiYjU3NzI5OGE0OTY2YjJjZTI4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-03T17:00:14Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-04T16:24:10Z"
      },
      "message": "Make GetFetchFlags always request witness objects from witness peers\n\nThis fixes a bug where we might (in exceedingly rare circumstances)\naccidentally ban a node for sending us the first (potentially few)\nsegwit blocks in non-segwit mode.",
      "tree": {
        "sha": "278be3e422c3eba73e3df7dae463bc62b4938c0a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/278be3e422c3eba73e3df7dae463bc62b4938c0a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06128da751371797683eabb577298a4966b2ce28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06128da751371797683eabb577298a4966b2ce28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06128da751371797683eabb577298a4966b2ce28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06128da751371797683eabb577298a4966b2ce28/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "40c31b6ca6c76ef3f8d301ababdd533acda01a4a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06128da751371797683eabb577298a4966b2ce28/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06128da751371797683eabb577298a4966b2ce28/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=06128da751371797683eabb577298a4966b2ce28",
        "patch": "@@ -4922,7 +4922,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n \n uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params& chainparams) {\n     uint32_t nFetchFlags = 0;\n-    if (IsWitnessEnabled(pprev, chainparams) && State(pfrom->GetId())->fHaveWitness) {\n+    if ((pfrom->GetLocalServices() & NODE_WITNESS) && State(pfrom->GetId())->fHaveWitness) {\n         nFetchFlags |= MSG_WITNESS_FLAG;\n     }\n     return nFetchFlags;"
      }
    ]
  },
  {
    "sha": "be7555f0c03057bb5537cc42ca9d4937389f0670",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZTc1NTVmMGMwMzA1N2JiNTUzN2NjNDJjYTlkNDkzNzM4OWYwNjcw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-03T17:33:07Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-04T16:24:10Z"
      },
      "message": "Fix overly-prescriptive p2p-segwit test for new fetch logic",
      "tree": {
        "sha": "dd930b0b7c78cf8ef44a8af3f93db14df66ba5bd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd930b0b7c78cf8ef44a8af3f93db14df66ba5bd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/be7555f0c03057bb5537cc42ca9d4937389f0670",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be7555f0c03057bb5537cc42ca9d4937389f0670",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/be7555f0c03057bb5537cc42ca9d4937389f0670",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be7555f0c03057bb5537cc42ca9d4937389f0670/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06128da751371797683eabb577298a4966b2ce28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06128da751371797683eabb577298a4966b2ce28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06128da751371797683eabb577298a4966b2ce28"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 1,
      "deletions": 9
    },
    "files": [
      {
        "sha": "c2ea20bb845c870552ac50d4c3c34b4870a3d4e3",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/be7555f0c03057bb5537cc42ca9d4937389f0670/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/be7555f0c03057bb5537cc42ca9d4937389f0670/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=be7555f0c03057bb5537cc42ca9d4937389f0670",
        "patch": "@@ -912,14 +912,6 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # But eliminating the witness should fix it\n         self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n \n-        # Verify that inv's to test_node come with getdata's for non-witness tx's\n-        # Just tweak the transaction, announce it, and verify we get a getdata\n-        # for a normal tx\n-        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n-        tx.rehash()\n-        self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        assert(self.test_node.last_getdata.inv[0].type == 1)\n-\n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n         assert_equal(len(self.nodes[0].getrawmempool()),  0)\n@@ -1025,7 +1017,7 @@ def test_tx_relay_after_segwit_activation(self):\n     def test_block_relay(self, segwit_activated):\n         print(\"\\tTesting block relay\")\n \n-        blocktype = 2|MSG_WITNESS_FLAG if segwit_activated else 2\n+        blocktype = 2|MSG_WITNESS_FLAG\n \n         # test_node has set NODE_WITNESS, so all getdata requests should be for\n         # witness blocks."
      }
    ]
  },
  {
    "sha": "87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2U3ZDcyODA3MzljY2NmYWJhZmZiYmZiYmJjZmEyMWU5NDNkYTNh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-09-30T21:40:03Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T16:35:07Z"
      },
      "message": "Make validationinterface.UpdatedBlockTip more verbose\n\nIn anticipation of making all the callbacks out of block processing\nflow through it. Note that vHashes will always have something in it\nsince pindexFork != pindexNewTip.",
      "tree": {
        "sha": "07cbce45120a9da86345716213c2203b65e250d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/07cbce45120a9da86345716213c2203b65e250d8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 12,
      "deletions": 11
    },
    "files": [
      {
        "sha": "37a0a2f30d055e261ad7de2e85d5a10675c52fa7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -3099,11 +3099,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                         }\n                     });\n                 }\n-                // Notify external listeners about the new tip.\n-                if (!vHashes.empty()) {\n-                    GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-                }\n             }\n+            // Notify external listeners about the new tip.\n+            GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n         }\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());"
      },
      {
        "sha": "d0aa7b5f393ff2f139ab10c3588931e8a70647df",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -13,7 +13,7 @@ CMainSignals& GetMainSignals()\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n+    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n@@ -33,7 +33,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n-    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n+    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n }\n \n void UnregisterAllValidationInterfaces() {"
      },
      {
        "sha": "683f8fe20cbae52f0d92a25811c3cd2e405a659c",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -33,7 +33,7 @@ void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, int posI\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindex) {}\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n@@ -49,7 +49,7 @@ class CValidationInterface {\n \n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */"
      },
      {
        "sha": "020cdfbdc724a8ec99df65c5219742c1178b7fae",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -124,12 +124,15 @@ void CZMQNotificationInterface::Shutdown()\n     }\n }\n \n-void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n+void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n+    if (fInitialDownload)\n+        return;\n+\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {\n         CZMQAbstractNotifier *notifier = *i;\n-        if (notifier->NotifyBlock(pindex))\n+        if (notifier->NotifyBlock(pindexNew))\n         {\n             i++;\n         }"
      },
      {
        "sha": "037470ec17f9f398b9838471b4995b396869ab5e",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87e7d7280739cccfabaffbbfbbbcfa21e943da3a/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "patch": "@@ -25,7 +25,7 @@ class CZMQNotificationInterface : public CValidationInterface\n \n     // CValidationInterface\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n-    void UpdatedBlockTip(const CBlockIndex *pindex);\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n \n private:\n     CZMQNotificationInterface();"
      }
    ]
  },
  {
    "sha": "0278fb5f48ae9e42ec0772f85e201051077f633c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjc4ZmI1ZjQ4YWU5ZTQyZWMwNzcyZjg1ZTIwMTA1MTA3N2Y2MzNj",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-09-30T22:19:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T16:35:07Z"
      },
      "message": "Remove duplicate nBlocksEstimate cmp (we already checked IsIBD())",
      "tree": {
        "sha": "7fb5a55e2c64d3ae5860ab9a326dbac7c81f4b3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fb5a55e2c64d3ae5860ab9a326dbac7c81f4b3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0278fb5f48ae9e42ec0772f85e201051077f633c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0278fb5f48ae9e42ec0772f85e201051077f633c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0278fb5f48ae9e42ec0772f85e201051077f633c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0278fb5f48ae9e42ec0772f85e201051077f633c/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87e7d7280739cccfabaffbbfbbbcfa21e943da3a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87e7d7280739cccfabaffbbfbbbcfa21e943da3a"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 2,
      "deletions": 5
    },
    "files": [
      {
        "sha": "2eb641e543f6ed26eb771b76b0848313c2c1d878",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0278fb5f48ae9e42ec0772f85e201051077f633c/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0278fb5f48ae9e42ec0772f85e201051077f633c/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0278fb5f48ae9e42ec0772f85e201051077f633c",
        "patch": "@@ -3087,12 +3087,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                     }\n                 }\n                 // Relay inventory, but don't relay old inventory during initial block download.\n-                int nBlockEstimate = 0;\n-                if (fCheckpointsEnabled)\n-                    nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n                 if(connman) {\n-                    connman->ForEachNode([nNewHeight, nBlockEstimate, &vHashes](CNode* pnode) {\n-                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n+                    connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n+                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n                             BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n                                 pnode->PushBlockHash(hash);\n                             }"
      }
    ]
  },
  {
    "sha": "6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YWEyOGFiZjUzZWY0Njk0NjkyNDc0YjRhM2IwYThmYTc1NTliNTBi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-25T17:17:45Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-04T17:10:41Z"
      },
      "message": "Use cmpctblock type 2 for segwit-enabled transfer\n\nContains version negotiation logic by Matt Corallo and bugfixes by\nSuhas Daftuar.",
      "tree": {
        "sha": "dca0f5961ecf9a1ddc75e642b5e862183f434fb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dca0f5961ecf9a1ddc75e642b5e862183f434fb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "be7555f0c03057bb5537cc42ca9d4937389f0670",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/be7555f0c03057bb5537cc42ca9d4937389f0670",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/be7555f0c03057bb5537cc42ca9d4937389f0670"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 64,
      "deletions": 30
    },
    "files": [
      {
        "sha": "93d3fa372b3c074b87400cfd43cb63c0cc7a52d2",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "patch": "@@ -17,15 +17,15 @@\n \n #define MIN_TRANSACTION_BASE_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS))\n \n-CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block) :\n+CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :\n         nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n         shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n     FillShortTxIDSelector();\n     //TODO: Use our mempool prior to block acceptance to predictively fill more than just the coinbase\n     prefilledtxn[0] = {0, block.vtx[0]};\n     for (size_t i = 1; i < block.vtx.size(); i++) {\n         const CTransaction& tx = block.vtx[i];\n-        shorttxids[i - 1] = GetShortID(tx.GetHash());\n+        shorttxids[i - 1] = GetShortID(fUseWTXID ? tx.GetWitnessHash() : tx.GetHash());\n     }\n }\n "
      },
      {
        "sha": "99b1cb140d0a4c18484953d210b2d9d4bc16ec3c",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "patch": "@@ -146,7 +146,7 @@ class CBlockHeaderAndShortTxIDs {\n     // Dummy for deserialization\n     CBlockHeaderAndShortTxIDs() {}\n \n-    CBlockHeaderAndShortTxIDs(const CBlock& block);\n+    CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID);\n \n     uint64_t GetShortID(const uint256& txhash) const;\n "
      },
      {
        "sha": "c92a38be98f23f5bbdf59c8ee27b09f540d768a7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 56,
        "deletions": 22,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "patch": "@@ -289,10 +289,21 @@ struct CNodeState {\n     bool fPreferHeaders;\n     //! Whether this peer wants invs or cmpctblocks (when possible) for block announcements.\n     bool fPreferHeaderAndIDs;\n-    //! Whether this peer will send us cmpctblocks if we request them\n+    /**\n+      * Whether this peer will send us cmpctblocks if we request them.\n+      * This is not used to gate request logic, as we really only care about fSupportsDesiredCmpctVersion,\n+      * but is used as a flag to \"lock in\" the version of compact blocks (fWantsCmpctWitness) we send.\n+      */\n     bool fProvidesHeaderAndIDs;\n     //! Whether this peer can give us witnesses\n     bool fHaveWitness;\n+    //! Whether this peer wants witnesses in cmpctblocks/blocktxns\n+    bool fWantsCmpctWitness;\n+    /**\n+     * If we've announced NODE_WITNESS to this peer: whether the peer sends witnesses in cmpctblocks/blocktxns,\n+     * otherwise: whether this peer sends non-witnesses in cmpctblocks/blocktxns.\n+     */\n+    bool fSupportsDesiredCmpctVersion;\n \n     CNodeState() {\n         fCurrentlyConnected = false;\n@@ -313,6 +324,8 @@ struct CNodeState {\n         fPreferHeaderAndIDs = false;\n         fProvidesHeaderAndIDs = false;\n         fHaveWitness = false;\n+        fWantsCmpctWitness = false;\n+        fSupportsDesiredCmpctVersion = false;\n     }\n };\n \n@@ -467,16 +480,16 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n }\n \n void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pfrom, CConnman& connman) {\n-    if (pfrom->GetLocalServices() & NODE_WITNESS) {\n-        // Don't ever request compact blocks when segwit is enabled.\n+    if (!nodestate->fSupportsDesiredCmpctVersion) {\n+        // Never ask from peers who can't provide witnesses.\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n         BOOST_FOREACH(const NodeId nodeid, lNodesAnnouncingHeaderAndIDs)\n             if (nodeid == pfrom->GetId())\n                 return;\n         bool fAnnounceUsingCMPCTBLOCK = false;\n-        uint64_t nCMPCTBLOCKVersion = 1;\n+        uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n         if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n             // As per BIP152, we only get 3 of our peers to announce\n             // blocks using compact encodings.\n@@ -4856,11 +4869,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // they wont have a useful mempool to match against a compact block,\n                         // and we don't feel like constructing the object for them, so\n                         // instead we respond with the full, non-compact block.\n+                        bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n                         if (mi->second->nHeight >= chainActive.Height() - 10) {\n-                            CBlockHeaderAndShortTxIDs cmpctblock(block);\n-                            pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n+                            CBlockHeaderAndShortTxIDs cmpctblock(block, fPeerWantsWitness);\n+                            pfrom->PushMessageWithFlag(fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                         } else\n-                            pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n+                            pfrom->PushMessageWithFlag(fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n                     }\n \n                     // Trigger the peer node to send a getblocks request for the next batch of inventory\n@@ -5128,13 +5142,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(NetMsgType::SENDHEADERS);\n         }\n         if (pfrom->nVersion >= SHORT_IDS_BLOCKS_VERSION) {\n-            // Tell our peer we are willing to provide version-1 cmpctblocks\n+            // Tell our peer we are willing to provide version 1 or 2 cmpctblocks\n             // However, we do not request new block announcements using\n             // cmpctblock messages.\n             // We send this to non-NODE NETWORK peers as well, because\n             // they may wish to request compact blocks from us\n             bool fAnnounceUsingCMPCTBLOCK = false;\n-            uint64_t nCMPCTBLOCKVersion = 1;\n+            uint64_t nCMPCTBLOCKVersion = 2;\n+            if (pfrom->GetLocalServices() & NODE_WITNESS)\n+                pfrom->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n+            nCMPCTBLOCKVersion = 1;\n             pfrom->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n         }\n     }\n@@ -5195,12 +5212,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::SENDCMPCT)\n     {\n         bool fAnnounceUsingCMPCTBLOCK = false;\n-        uint64_t nCMPCTBLOCKVersion = 1;\n+        uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n-        if (nCMPCTBLOCKVersion == 1) {\n+        if (nCMPCTBLOCKVersion == 1 || ((pfrom->GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n             LOCK(cs_main);\n-            State(pfrom->GetId())->fProvidesHeaderAndIDs = true;\n-            State(pfrom->GetId())->fPreferHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;\n+            // fProvidesHeaderAndIDs is used to \"lock in\" version of compact blocks we send (fWantsCmpctWitness)\n+            if (!State(pfrom->GetId())->fProvidesHeaderAndIDs) {\n+                State(pfrom->GetId())->fProvidesHeaderAndIDs = true;\n+                State(pfrom->GetId())->fWantsCmpctWitness = nCMPCTBLOCKVersion == 2;\n+            }\n+            if (State(pfrom->GetId())->fWantsCmpctWitness == (nCMPCTBLOCKVersion == 2)) // ignore later version announces\n+                State(pfrom->GetId())->fPreferHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;\n+            if (!State(pfrom->GetId())->fSupportsDesiredCmpctVersion) {\n+                if (pfrom->GetLocalServices() & NODE_WITNESS)\n+                    State(pfrom->GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 2);\n+                else\n+                    State(pfrom->GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 1);\n+            }\n         }\n     }\n \n@@ -5258,7 +5286,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n                         (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                         inv.type |= nFetchFlags;\n-                        if (nodestate->fProvidesHeaderAndIDs && !(pfrom->GetLocalServices() & NODE_WITNESS))\n+                        if (nodestate->fSupportsDesiredCmpctVersion)\n                             vToFetch.push_back(CInv(MSG_CMPCT_BLOCK, inv.hash));\n                         else\n                             vToFetch.push_back(inv);\n@@ -5386,7 +5414,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n             resp.txn[i] = block.vtx[req.indexes[i]];\n         }\n-        pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCKTXN, resp);\n+        pfrom->PushMessageWithFlag(State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCKTXN, resp);\n     }\n \n \n@@ -5650,7 +5678,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // We requested this block for some reason, but our mempool will probably be useless\n                 // so we just grab the block via normal getdata\n                 std::vector<CInv> vInv(1);\n-                vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus()), cmpctblock.header.GetHash());\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n             }\n             return true;\n@@ -5662,6 +5690,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         CNodeState *nodestate = State(pfrom->GetId());\n \n+        if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+            // Don't bother trying to process compact blocks from v1 peers\n+            // after segwit activates.\n+            return true;\n+        }\n+\n         // We want to be a bit conservative just to be extra careful about DoS\n         // possibilities in compact block processing...\n         if (pindex->nHeight <= chainActive.Height() + 2) {\n@@ -5688,7 +5722,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 } else if (status == READ_STATUS_FAILED) {\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n                     std::vector<CInv> vInv(1);\n-                    vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                    vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus()), cmpctblock.header.GetHash());\n                     pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n                     return true;\n                 }\n@@ -5715,7 +5749,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // We requested this block, but its far into the future, so our\n                 // mempool will probably be useless - request the block normally\n                 std::vector<CInv> vInv(1);\n-                vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus()), cmpctblock.header.GetHash());\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n                 return true;\n             } else {\n@@ -5757,7 +5791,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         } else if (status == READ_STATUS_FAILED) {\n             // Might have collided, fall back to getdata now :(\n             std::vector<CInv> invs;\n-            invs.push_back(CInv(MSG_BLOCK, resp.blockhash));\n+            invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n             CValidationState state;\n@@ -5906,7 +5940,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n-                    if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(pfrom->GetLocalServices() & NODE_WITNESS)) {\n+                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n                         // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n                         // with this block! Let's get them to announce using compact blocks in the future.\n                         MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n@@ -6536,8 +6570,8 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n                     assert(ReadBlockFromDisk(block, pBestIndex, consensusParams));\n-                    CBlockHeaderAndShortTxIDs cmpctblock(block);\n-                    pto->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n+                    CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n+                    pto->PushMessageWithFlag(state.fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {"
      },
      {
        "sha": "7530b013bd28517ce830cd14034e4e38c0f4d4ea",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "patch": "@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n \n     // Do a simple ShortTxIDs RT\n     {\n-        CBlockHeaderAndShortTxIDs shortIDs(block);\n+        CBlockHeaderAndShortTxIDs shortIDs(block, true);\n \n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n         stream << shortIDs;\n@@ -116,7 +116,7 @@ class TestHeaderAndShortIDs {\n         stream >> *this;\n     }\n     TestHeaderAndShortIDs(const CBlock& block) :\n-        TestHeaderAndShortIDs(CBlockHeaderAndShortTxIDs(block)) {}\n+        TestHeaderAndShortIDs(CBlockHeaderAndShortTxIDs(block, true)) {}\n \n     uint64_t GetShortID(const uint256& txhash) const {\n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -267,7 +267,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n \n     // Test simple header round-trip with only coinbase\n     {\n-        CBlockHeaderAndShortTxIDs shortIDs(block);\n+        CBlockHeaderAndShortTxIDs shortIDs(block, false);\n \n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n         stream << shortIDs;"
      },
      {
        "sha": "15fa6fbca3b09d41c23c9203d7371c08de874b2c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "patch": "@@ -444,7 +444,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     totalTxSize += entry.GetTxSize();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n-    vTxHashes.emplace_back(hash, newit);\n+    vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n \n     return true;"
      },
      {
        "sha": "941644b2b21c1dbb729f6d5a9950c277c8b907d6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6aa28abf53ef4694692474b4a3b0a8fa7559b50b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "patch": "@@ -465,7 +465,7 @@ class CTxMemPool\n     indexed_transaction_set mapTx;\n \n     typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;\n-    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx hashes/entries in mapTx, in random order\n+    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n \n     struct CompareIteratorByHash {\n         bool operator()(const txiter &a, const txiter &b) const {"
      }
    ]
  },
  {
    "sha": "f5b9b8f437c040205896ad0d7a6656efa08b5601",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWI5YjhmNDM3YzA0MDIwNTg5NmFkMGQ3YTY2NTZlZmEwOGI1NjAx",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-09-18T02:11:00Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-04T17:10:49Z"
      },
      "message": "[qa] Fix bug in mininode witness deserialization\n\nAlso improve tx printing",
      "tree": {
        "sha": "45bf7ac6c8837f58becb3f50ac662ef6b2e6e7ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45bf7ac6c8837f58becb3f50ac662ef6b2e6e7ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5b9b8f437c040205896ad0d7a6656efa08b5601",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b9b8f437c040205896ad0d7a6656efa08b5601",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5b9b8f437c040205896ad0d7a6656efa08b5601",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b9b8f437c040205896ad0d7a6656efa08b5601/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6aa28abf53ef4694692474b4a3b0a8fa7559b50b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6aa28abf53ef4694692474b4a3b0a8fa7559b50b"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "34beb0d30d30ff1d2795ffea6b36977d3d69e3c4",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5b9b8f437c040205896ad0d7a6656efa08b5601/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5b9b8f437c040205896ad0d7a6656efa08b5601/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=f5b9b8f437c040205896ad0d7a6656efa08b5601",
        "patch": "@@ -452,7 +452,7 @@ def deserialize(self, f):\n         else:\n             self.vout = deser_vector(f, CTxOut)\n         if flags != 0:\n-            self.wit.vtxinwit = [CTxInWitness()]*len(self.vin)\n+            self.wit.vtxinwit = [CTxInWitness() for i in range(len(self.vin))]\n             self.wit.deserialize(f)\n         self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n         self.sha256 = None\n@@ -518,8 +518,8 @@ def is_valid(self):\n         return True\n \n     def __repr__(self):\n-        return \"CTransaction(nVersion=%i vin=%s vout=%s nLockTime=%i)\" \\\n-            % (self.nVersion, repr(self.vin), repr(self.vout), self.nLockTime)\n+        return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n+            % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n \n \n class CBlockHeader(object):"
      }
    ]
  },
  {
    "sha": "422fac649f75c907cad6ab7e2768b9032b9eae42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MjJmYWM2NDlmNzVjOTA3Y2FkNmFiN2UyNzY4YjkwMzJiOWVhZTQy",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-09-15T01:00:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-04T17:10:49Z"
      },
      "message": "[qa] Add support for compactblocks v2 to mininode",
      "tree": {
        "sha": "1902dcb33a9c91d6655ac35de111b8672bb2f2fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1902dcb33a9c91d6655ac35de111b8672bb2f2fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/422fac649f75c907cad6ab7e2768b9032b9eae42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422fac649f75c907cad6ab7e2768b9032b9eae42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/422fac649f75c907cad6ab7e2768b9032b9eae42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422fac649f75c907cad6ab7e2768b9032b9eae42/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5b9b8f437c040205896ad0d7a6656efa08b5601",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b9b8f437c040205896ad0d7a6656efa08b5601",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5b9b8f437c040205896ad0d7a6656efa08b5601"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 31,
      "deletions": 4
    },
    "files": [
      {
        "sha": "4d238c08d9c3fcd270725105bd8eabff2a28fadc",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 31,
        "deletions": 4,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/422fac649f75c907cad6ab7e2768b9032b9eae42/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/422fac649f75c907cad6ab7e2768b9032b9eae42/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=422fac649f75c907cad6ab7e2768b9032b9eae42",
        "patch": "@@ -755,6 +755,9 @@ def serialize(self, with_witness=False):\n             r += self.tx.serialize_without_witness()\n         return r\n \n+    def serialize_with_witness(self):\n+        return self.serialize(with_witness=True)\n+\n     def __repr__(self):\n         return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n \n@@ -779,6 +782,7 @@ def deserialize(self, f):\n         self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n         self.prefilled_txn_length = len(self.prefilled_txn)\n \n+    # When using version 2 compact blocks, we must serialize with_witness.\n     def serialize(self, with_witness=False):\n         r = b\"\"\n         r += self.header.serialize()\n@@ -787,12 +791,20 @@ def serialize(self, with_witness=False):\n         for x in self.shortids:\n             # We only want the first 6 bytes\n             r += struct.pack(\"<Q\", x)[0:6]\n-        r += ser_vector(self.prefilled_txn)\n+        if with_witness:\n+            r += ser_vector(self.prefilled_txn, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.prefilled_txn)\n         return r\n \n     def __repr__(self):\n         return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n \n+# P2P version of the above that will use witness serialization (for compact\n+# block version 2)\n+class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n+    def serialize(self):\n+        return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n \n # Calculate the BIP 152-compact blocks shortid for a given transaction hash\n def calculate_shortid(k0, k1, tx_hash):\n@@ -808,6 +820,7 @@ def __init__(self, p2pheaders_and_shortids = None):\n         self.nonce = 0\n         self.shortids = []\n         self.prefilled_txn = []\n+        self.use_witness = False\n \n         if p2pheaders_and_shortids != None:\n             self.header = p2pheaders_and_shortids.header\n@@ -819,7 +832,10 @@ def __init__(self, p2pheaders_and_shortids = None):\n                 last_index = self.prefilled_txn[-1].index\n \n     def to_p2p(self):\n-        ret = P2PHeaderAndShortIDs()\n+        if self.use_witness:\n+            ret = P2PHeaderAndShortWitnessIDs()\n+        else:\n+            ret = P2PHeaderAndShortIDs()\n         ret.header = self.header\n         ret.nonce = self.nonce\n         ret.shortids_length = len(self.shortids)\n@@ -840,15 +856,20 @@ def get_siphash_keys(self):\n         key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n         return [ key0, key1 ]\n \n-    def initialize_from_block(self, block, nonce=0, prefill_list = [0]):\n+    # Version 2 compact blocks use wtxid in shortids (rather than txid)\n+    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):\n         self.header = CBlockHeader(block)\n         self.nonce = nonce\n         self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n         self.shortids = []\n+        self.use_witness = use_witness\n         [k0, k1] = self.get_siphash_keys()\n         for i in range(len(block.vtx)):\n             if i not in prefill_list:\n-                self.shortids.append(calculate_shortid(k0, k1, block.vtx[i].sha256))\n+                tx_hash = block.vtx[i].sha256\n+                if use_witness:\n+                    tx_hash = block.vtx[i].calc_sha256(with_witness=True)\n+                self.shortids.append(calculate_shortid(k0, k1, tx_hash))\n \n     def __repr__(self):\n         return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n@@ -1424,6 +1445,12 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n \n+class msg_witness_blocktxn(msg_blocktxn):\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize(with_witness=True)\n+        return r\n+\n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):"
      }
    ]
  },
  {
    "sha": "27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2FjZmMxZDJlZTUzY2M1MmI1NGJlZmQyZDRiZmEyNGE3N2EyZWVm",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-09-17T00:48:23Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-04T17:10:49Z"
      },
      "message": "[qa] Update p2p-compactblocks.py for compactblocks v2",
      "tree": {
        "sha": "176c8355863249e3caaab03f445cd647c83b700b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/176c8355863249e3caaab03f445cd647c83b700b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "422fac649f75c907cad6ab7e2768b9032b9eae42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/422fac649f75c907cad6ab7e2768b9032b9eae42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/422fac649f75c907cad6ab7e2768b9032b9eae42"
      }
    ],
    "stats": {
      "total": 583,
      "additions": 389,
      "deletions": 194
    },
    "files": [
      {
        "sha": "d91e10d77cb4b96a74bc71da85f15ba5ee658176",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 389,
        "deletions": 194,
        "changes": 583,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef",
        "patch": "@@ -12,14 +12,16 @@\n \n '''\n CompactBlocksTest -- test compact blocks (BIP 152)\n-'''\n \n+Version 1 compact blocks are pre-segwit (txids)\n+Version 2 compact blocks are post-segwit (wtxids)\n+'''\n \n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n class TestNode(SingleNodeConnCB):\n     def __init__(self):\n         SingleNodeConnCB.__init__(self)\n-        self.last_sendcmpct = None\n+        self.last_sendcmpct = []\n         self.last_headers = None\n         self.last_inv = None\n         self.last_cmpctblock = None\n@@ -30,7 +32,7 @@ def __init__(self):\n         self.last_blocktxn = None\n \n     def on_sendcmpct(self, conn, message):\n-        self.last_sendcmpct = message\n+        self.last_sendcmpct.append(message)\n \n     def on_block(self, conn, message):\n         self.last_block = message\n@@ -90,29 +92,31 @@ class CompactBlocksTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n+        # Node0 = pre-segwit, node1 = segwit-aware\n+        self.num_nodes = 2\n         self.utxos = []\n \n     def setup_network(self):\n         self.nodes = []\n \n-        # Turn off segwit in this test, as compact blocks don't currently work\n-        # with segwit.  (After BIP 152 is updated to support segwit, we can\n-        # test behavior with and without segwit enabled by adding a second node\n-        # to the test.)\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\", \"-bip9params=segwit:0:0\"]])\n+        # Start up node0 to be a version 1, pre-segwit node.\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+                [[\"-debug\", \"-logtimemicros=1\", \"-bip9params=segwit:0:0\"], \n+                 [\"-debug\", \"-logtimemicros\", \"-txindex\"]])\n+        connect_nodes(self.nodes[0], 1)\n \n-    def build_block_on_tip(self):\n-        height = self.nodes[0].getblockcount()\n-        tip = self.nodes[0].getbestblockhash()\n-        mtp = self.nodes[0].getblockheader(tip)['mediantime']\n+    def build_block_on_tip(self, node):\n+        height = node.getblockcount()\n+        tip = node.getbestblockhash()\n+        mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n         block.solve()\n         return block\n \n     # Create 10 more anyone-can-spend utxo's for testing.\n     def make_utxos(self):\n-        block = self.build_block_on_tip()\n+        # Doesn't matter which node we use, just use node0.\n+        block = self.build_block_on_tip(self.nodes[0])\n         self.test_node.send_and_ping(msg_block(block))\n         assert(int(self.nodes[0].getbestblockhash(), 16) == block.sha256)\n         self.nodes[0].generate(100)\n@@ -125,7 +129,7 @@ def make_utxos(self):\n             tx.vout.append(CTxOut(out_value, CScript([OP_TRUE])))\n         tx.rehash()\n \n-        block2 = self.build_block_on_tip()\n+        block2 = self.build_block_on_tip(self.nodes[0])\n         block2.vtx.append(tx)\n         block2.hashMerkleRoot = block2.calc_merkle_root()\n         block2.solve()\n@@ -134,26 +138,30 @@ def make_utxos(self):\n         self.utxos.extend([[tx.sha256, i, out_value] for i in range(10)])\n         return\n \n-    # Test \"sendcmpct\":\n-    # - No compact block announcements or getdata(MSG_CMPCT_BLOCK) unless\n-    #   sendcmpct is sent.\n-    # - If sendcmpct is sent with version > 1, the message is ignored.\n+    # Test \"sendcmpct\" (between peers preferring the same version):\n+    # - No compact block announcements unless sendcmpct is sent.\n+    # - If sendcmpct is sent with version > preferred_version, the message is ignored.\n     # - If sendcmpct is sent with boolean 0, then block announcements are not\n     #   made with compact blocks.\n     # - If sendcmpct is then sent with boolean 1, then new block announcements\n     #   are made with compact blocks.\n-    def test_sendcmpct(self):\n-        print(\"Testing SENDCMPCT p2p message... \")\n-\n-        # Make sure we get a version 0 SENDCMPCT message from our peer\n+    # If old_node is passed in, request compact blocks with version=preferred-1\n+    # and verify that it receives block announcements via compact block.\n+    def test_sendcmpct(self, node, test_node, preferred_version, old_node=None):\n+        # Make sure we get a SENDCMPCT message from our peer\n         def received_sendcmpct():\n-            return (self.test_node.last_sendcmpct is not None)\n+            return (len(test_node.last_sendcmpct) > 0)\n         got_message = wait_until(received_sendcmpct, timeout=30)\n         assert(received_sendcmpct())\n         assert(got_message)\n-        assert_equal(self.test_node.last_sendcmpct.version, 1)\n+        with mininode_lock:\n+            # Check that the first version received is the preferred one\n+            assert_equal(test_node.last_sendcmpct[0].version, preferred_version)\n+            # And that we receive versions down to 1.\n+            assert_equal(test_node.last_sendcmpct[-1].version, 1)\n+            test_node.last_sendcmpct = []\n \n-        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        tip = int(node.getbestblockhash(), 16)\n \n         def check_announcement_of_new_block(node, peer, predicate):\n             peer.clear_block_announcement()\n@@ -165,56 +173,75 @@ def check_announcement_of_new_block(node, peer, predicate):\n                 assert(predicate(peer))\n \n         # We shouldn't get any block announcements via cmpctblock yet.\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None)\n \n         # Try one more time, this time after requesting headers.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None and p.last_inv is not None)\n+        test_node.request_headers_and_sync(locator=[tip])\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None and p.last_inv is not None)\n \n         # Test a few ways of using sendcmpct that should NOT\n         # result in compact block announcements.\n         # Before each test, sync the headers chain.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n+        test_node.request_headers_and_sync(locator=[tip])\n \n         # Now try a SENDCMPCT message with too-high version\n         sendcmpct = msg_sendcmpct()\n-        sendcmpct.version = 2\n-        self.test_node.send_and_ping(sendcmpct)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None)\n+        sendcmpct.version = preferred_version+1\n+        sendcmpct.announce = True\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None)\n \n         # Headers sync before next test.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n+        test_node.request_headers_and_sync(locator=[tip])\n \n         # Now try a SENDCMPCT message with valid version, but announce=False\n-        self.test_node.send_and_ping(msg_sendcmpct())\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None)\n+        sendcmpct.version = preferred_version\n+        sendcmpct.announce = False\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None)\n \n         # Headers sync before next test.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n+        test_node.request_headers_and_sync(locator=[tip])\n \n         # Finally, try a SENDCMPCT message with announce=True\n-        sendcmpct.version = 1\n+        sendcmpct.version = preferred_version\n         sendcmpct.announce = True\n-        self.test_node.send_and_ping(sendcmpct)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is not None)\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n \n         # Try one more time (no headers sync should be needed!)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is not None)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n \n         # Try one more time, after turning on sendheaders\n-        self.test_node.send_and_ping(msg_sendheaders())\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is not None)\n+        test_node.send_and_ping(msg_sendheaders())\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n+\n+        # Try one more time, after sending a version-1, announce=false message.\n+        sendcmpct.version = preferred_version-1\n+        sendcmpct.announce = False\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n \n         # Now turn off announcements\n+        sendcmpct.version = preferred_version\n         sendcmpct.announce = False\n-        self.test_node.send_and_ping(sendcmpct)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None and p.last_headers is not None)\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None and p.last_headers is not None)\n+\n+        if old_node is not None:\n+            # Verify that a peer using an older protocol version can receive\n+            # announcements from this node.\n+            sendcmpct.version = preferred_version-1\n+            sendcmpct.announce = True\n+            old_node.send_and_ping(sendcmpct)\n+            # Header sync\n+            old_node.request_headers_and_sync(locator=[tip])\n+            check_announcement_of_new_block(node, old_node, lambda p: p.last_cmpctblock is not None)\n \n     # This test actually causes bitcoind to (reasonably!) disconnect us, so do this last.\n     def test_invalid_cmpctblock_message(self):\n-        print(\"Testing invalid index in cmpctblock message...\")\n         self.nodes[0].generate(101)\n-        block = self.build_block_on_tip()\n+        block = self.build_block_on_tip(self.nodes[0])\n \n         cmpct_block = P2PHeaderAndShortIDs()\n         cmpct_block.header = CBlockHeader(block)\n@@ -227,45 +254,61 @@ def test_invalid_cmpctblock_message(self):\n \n     # Compare the generated shortids to what we expect based on BIP 152, given\n     # bitcoind's choice of nonce.\n-    def test_compactblock_construction(self):\n-        print(\"Testing compactblock headers and shortIDs are correct...\")\n-\n+    def test_compactblock_construction(self, node, test_node, version, use_witness_address):\n         # Generate a bunch of transactions.\n-        self.nodes[0].generate(101)\n+        node.generate(101)\n         num_transactions = 25\n-        address = self.nodes[0].getnewaddress()\n+        address = node.getnewaddress()\n+        if use_witness_address:\n+            # Want at least one segwit spend, so move all funds to\n+            # a witness address.\n+            address = node.addwitnessaddress(address)\n+            value_to_send = node.getbalance()\n+            node.sendtoaddress(address, satoshi_round(value_to_send-Decimal(0.1)))\n+            node.generate(1)\n+\n+        segwit_tx_generated = False\n         for i in range(num_transactions):\n-            self.nodes[0].sendtoaddress(address, 0.1)\n+            txid = node.sendtoaddress(address, 0.1)\n+            hex_tx = node.gettransaction(txid)[\"hex\"]\n+            tx = FromHex(CTransaction(), hex_tx)\n+            if not tx.wit.is_null():\n+                segwit_tx_generated = True\n+\n+        if use_witness_address:\n+            assert(segwit_tx_generated) # check that our test is not broken\n \n         self.test_node.sync_with_ping()\n \n         # Now mine a block, and look at the resulting compact block.\n-        self.test_node.clear_block_announcement()\n-        block_hash = int(self.nodes[0].generate(1)[0], 16)\n+        test_node.clear_block_announcement()\n+        block_hash = int(node.generate(1)[0], 16)\n \n         # Store the raw block in our internal format.\n-        block = FromHex(CBlock(), self.nodes[0].getblock(\"%02x\" % block_hash, False))\n+        block = FromHex(CBlock(), node.getblock(\"%02x\" % block_hash, False))\n         [tx.calc_sha256() for tx in block.vtx]\n         block.rehash()\n \n         # Don't care which type of announcement came back for this test; just\n         # request the compact block if we didn't get one yet.\n-        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        wait_until(test_node.received_block_announcement, timeout=30)\n+        assert(test_node.received_block_announcement())\n \n         with mininode_lock:\n-            if self.test_node.last_cmpctblock is None:\n-                self.test_node.clear_block_announcement()\n+            if test_node.last_cmpctblock is None:\n+                test_node.clear_block_announcement()\n                 inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n-                self.test_node.send_message(msg_getdata([inv]))\n+                test_node.send_message(msg_getdata([inv]))\n \n-        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        wait_until(test_node.received_block_announcement, timeout=30)\n+        assert(test_node.received_block_announcement())\n \n         # Now we should have the compactblock\n         header_and_shortids = None\n         with mininode_lock:\n-            assert(self.test_node.last_cmpctblock is not None)\n+            assert(test_node.last_cmpctblock is not None)\n             # Convert the on-the-wire representation to absolute indexes\n-            header_and_shortids = HeaderAndShortIDs(self.test_node.last_cmpctblock.header_and_shortids)\n+            header_and_shortids = HeaderAndShortIDs(test_node.last_cmpctblock.header_and_shortids)\n \n         # Check that we got the right block!\n         header_and_shortids.header.calc_sha256()\n@@ -278,8 +321,17 @@ def test_compactblock_construction(self):\n         # Check that all prefilled_txn entries match what's in the block.\n         for entry in header_and_shortids.prefilled_txn:\n             entry.tx.calc_sha256()\n+            # This checks the non-witness parts of the tx agree\n             assert_equal(entry.tx.sha256, block.vtx[entry.index].sha256)\n \n+            # And this checks the witness\n+            wtxid = entry.tx.calc_sha256(True)\n+            if version == 2:\n+                assert_equal(wtxid, block.vtx[entry.index].calc_sha256(True))\n+            else:\n+                # Shouldn't have received a witness\n+                assert(entry.tx.wit.is_null())\n+\n         # Check that the cmpctblock message announced all the transactions.\n         assert_equal(len(header_and_shortids.prefilled_txn) + len(header_and_shortids.shortids), len(block.vtx))\n \n@@ -294,57 +346,61 @@ def test_compactblock_construction(self):\n                 # Already checked prefilled transactions above\n                 header_and_shortids.prefilled_txn.pop(0)\n             else:\n-                shortid = calculate_shortid(k0, k1, block.vtx[index].sha256)\n+                tx_hash = block.vtx[index].sha256\n+                if version == 2:\n+                    tx_hash = block.vtx[index].calc_sha256(True)\n+                shortid = calculate_shortid(k0, k1, tx_hash)\n                 assert_equal(shortid, header_and_shortids.shortids[0])\n                 header_and_shortids.shortids.pop(0)\n             index += 1\n \n     # Test that bitcoind requests compact blocks when we announce new blocks\n     # via header or inv, and that responding to getblocktxn causes the block\n     # to be successfully reconstructed.\n-    def test_compactblock_requests(self):\n-        print(\"Testing compactblock requests... \")\n-\n+    # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n+    # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n+    # any cb-version-1-supporting peer.\n+    def test_compactblock_requests(self, node, test_node):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip()\n+            block = self.build_block_on_tip(node)\n             with mininode_lock:\n-                self.test_node.last_getdata = None\n+                test_node.last_getdata = None\n \n             if announce == \"inv\":\n-                self.test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+                test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n             else:\n-                self.test_node.send_header_for_blocks([block])\n-            success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=30)\n+                test_node.send_header_for_blocks([block])\n+            success = wait_until(lambda: test_node.last_getdata is not None, timeout=30)\n             assert(success)\n-            assert_equal(len(self.test_node.last_getdata.inv), 1)\n-            assert_equal(self.test_node.last_getdata.inv[0].type, 4)\n-            assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+            assert_equal(len(test_node.last_getdata.inv), 1)\n+            assert_equal(test_node.last_getdata.inv[0].type, 4)\n+            assert_equal(test_node.last_getdata.inv[0].hash, block.sha256)\n \n             # Send back a compactblock message that omits the coinbase\n             comp_block = HeaderAndShortIDs()\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n             comp_block.shortids = [1]  # this is useless, and wrong\n-            self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+            test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+            assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n             with mininode_lock:\n-                assert(self.test_node.last_getblocktxn is not None)\n-                absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+                assert(test_node.last_getblocktxn is not None)\n+                absolute_indexes = test_node.last_getblocktxn.block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n \n             # Send the coinbase, and verify that the tip advances.\n             msg = msg_blocktxn()\n             msg.block_transactions.blockhash = block.sha256\n             msg.block_transactions.transactions = [block.vtx[0]]\n-            self.test_node.send_and_ping(msg)\n-            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+            test_node.send_and_ping(msg)\n+            assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n     # Create a chain of transactions from given utxo, and add to a new block.\n-    def build_block_with_transactions(self, utxo, num_transactions):\n-        block = self.build_block_on_tip()\n+    def build_block_with_transactions(self, node, utxo, num_transactions):\n+        block = self.build_block_on_tip(node)\n \n         for i in range(num_transactions):\n             tx = CTransaction()\n@@ -361,118 +417,113 @@ def build_block_with_transactions(self, utxo, num_transactions):\n     # Test that we only receive getblocktxn requests for transactions that the\n     # node needs, and that responding to them causes the block to be\n     # reconstructed.\n-    def test_getblocktxn_requests(self):\n-        print(\"Testing getblocktxn requests...\")\n+    def test_getblocktxn_requests(self, node, test_node, version):\n+        with_witness = (version==2)\n+\n+        def test_getblocktxn_response(compact_block, peer, expected_result):\n+            msg = msg_cmpctblock(compact_block.to_p2p())\n+            peer.send_and_ping(msg)\n+            with mininode_lock:\n+                assert(peer.last_getblocktxn is not None)\n+                absolute_indexes = peer.last_getblocktxn.block_txn_request.to_absolute()\n+            assert_equal(absolute_indexes, expected_result)\n+\n+        def test_tip_after_message(node, peer, msg, tip):\n+            peer.send_and_ping(msg)\n+            assert_equal(int(node.getbestblockhash(), 16), tip)\n \n         # First try announcing compactblocks that won't reconstruct, and verify\n         # that we receive getblocktxn messages back.\n         utxo = self.utxos.pop(0)\n \n-        block = self.build_block_with_transactions(utxo, 5)\n+        block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n-\n         comp_block = HeaderAndShortIDs()\n-        comp_block.initialize_from_block(block)\n+        comp_block.initialize_from_block(block, use_witness=with_witness)\n \n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-        with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n-        assert_equal(absolute_indexes, [1, 2, 3, 4, 5])\n-        msg = msg_blocktxn()\n-        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[1:])\n-        self.test_node.send_and_ping(msg)\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+        test_getblocktxn_response(comp_block, test_node, [1, 2, 3, 4, 5])\n+\n+        msg_bt = msg_blocktxn()\n+        if with_witness:\n+            msg_bt = msg_witness_blocktxn() # serialize with witnesses\n+        msg_bt.block_transactions = BlockTransactions(block.sha256, block.vtx[1:])\n+        test_tip_after_message(node, test_node, msg_bt, block.sha256)\n \n         utxo = self.utxos.pop(0)\n-        block = self.build_block_with_transactions(utxo, 5)\n+        block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n \n         # Now try interspersing the prefilled transactions\n-        comp_block.initialize_from_block(block, prefill_list=[0, 1, 5])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-        with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n-        assert_equal(absolute_indexes, [2, 3, 4])\n-        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[2:5])\n-        self.test_node.send_and_ping(msg)\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+        comp_block.initialize_from_block(block, prefill_list=[0, 1, 5], use_witness=with_witness)\n+        test_getblocktxn_response(comp_block, test_node, [2, 3, 4])\n+        msg_bt.block_transactions = BlockTransactions(block.sha256, block.vtx[2:5])\n+        test_tip_after_message(node, test_node, msg_bt, block.sha256)\n \n         # Now try giving one transaction ahead of time.\n         utxo = self.utxos.pop(0)\n-        block = self.build_block_with_transactions(utxo, 5)\n+        block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n-        self.test_node.send_and_ping(msg_tx(block.vtx[1]))\n-        assert(block.vtx[1].hash in self.nodes[0].getrawmempool())\n+        test_node.send_and_ping(msg_tx(block.vtx[1]))\n+        assert(block.vtx[1].hash in node.getrawmempool())\n \n         # Prefill 4 out of the 6 transactions, and verify that only the one\n         # that was not in the mempool is requested.\n-        comp_block.initialize_from_block(block, prefill_list=[0, 2, 3, 4])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-        with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n-        assert_equal(absolute_indexes, [5])\n+        comp_block.initialize_from_block(block, prefill_list=[0, 2, 3, 4], use_witness=with_witness)\n+        test_getblocktxn_response(comp_block, test_node, [5])\n \n-        msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]])\n-        self.test_node.send_and_ping(msg)\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+        msg_bt.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]])\n+        test_tip_after_message(node, test_node, msg_bt, block.sha256)\n \n         # Now provide all transactions to the node before the block is\n         # announced and verify reconstruction happens immediately.\n         utxo = self.utxos.pop(0)\n-        block = self.build_block_with_transactions(utxo, 10)\n+        block = self.build_block_with_transactions(node, utxo, 10)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n         for tx in block.vtx[1:]:\n-            self.test_node.send_message(msg_tx(tx))\n-        self.test_node.sync_with_ping()\n+            test_node.send_message(msg_tx(tx))\n+        test_node.sync_with_ping()\n         # Make sure all transactions were accepted.\n-        mempool = self.nodes[0].getrawmempool()\n+        mempool = node.getrawmempool()\n         for tx in block.vtx[1:]:\n             assert(tx.hash in mempool)\n \n         # Clear out last request.\n         with mininode_lock:\n-            self.test_node.last_getblocktxn = None\n+            test_node.last_getblocktxn = None\n \n         # Send compact block\n-        comp_block.initialize_from_block(block, prefill_list=[0])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        comp_block.initialize_from_block(block, prefill_list=[0], use_witness=with_witness)\n+        test_tip_after_message(node, test_node, msg_cmpctblock(comp_block.to_p2p()), block.sha256)\n         with mininode_lock:\n             # Shouldn't have gotten a request for any transaction\n-            assert(self.test_node.last_getblocktxn is None)\n-        # Tip should have updated\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+            assert(test_node.last_getblocktxn is None)\n \n     # Incorrectly responding to a getblocktxn shouldn't cause the block to be\n     # permanently failed.\n-    def test_incorrect_blocktxn_response(self):\n-        print(\"Testing handling of incorrect blocktxn responses...\")\n-\n+    def test_incorrect_blocktxn_response(self, node, test_node, version):\n         if (len(self.utxos) == 0):\n             self.make_utxos()\n         utxo = self.utxos.pop(0)\n \n-        block = self.build_block_with_transactions(utxo, 10)\n+        block = self.build_block_with_transactions(node, utxo, 10)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n         # Relay the first 5 transactions from the block in advance\n         for tx in block.vtx[1:6]:\n-            self.test_node.send_message(msg_tx(tx))\n-        self.test_node.sync_with_ping()\n+            test_node.send_message(msg_tx(tx))\n+        test_node.sync_with_ping()\n         # Make sure all transactions were accepted.\n-        mempool = self.nodes[0].getrawmempool()\n+        mempool = node.getrawmempool()\n         for tx in block.vtx[1:6]:\n             assert(tx.hash in mempool)\n \n         # Send compact block\n         comp_block = HeaderAndShortIDs()\n-        comp_block.initialize_from_block(block, prefill_list=[0])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        comp_block.initialize_from_block(block, prefill_list=[0], use_witness=(version == 2))\n+        test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n         absolute_indexes = []\n         with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+            assert(test_node.last_getblocktxn is not None)\n+            absolute_indexes = test_node.last_getblocktxn.block_txn_request.to_absolute()\n         assert_equal(absolute_indexes, [6, 7, 8, 9, 10])\n \n         # Now give an incorrect response.\n@@ -484,100 +535,107 @@ def test_incorrect_blocktxn_response(self):\n         # verifying that the block isn't marked bad permanently. This is good\n         # enough for now.\n         msg = msg_blocktxn()\n+        if version==2:\n+            msg = msg_witness_blocktxn()\n         msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]] + block.vtx[7:])\n-        self.test_node.send_and_ping(msg)\n+        test_node.send_and_ping(msg)\n \n         # Tip should not have updated\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+        assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n \n         # We should receive a getdata request\n-        success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=10)\n+        success = wait_until(lambda: test_node.last_getdata is not None, timeout=10)\n         assert(success)\n-        assert_equal(len(self.test_node.last_getdata.inv), 1)\n-        assert_equal(self.test_node.last_getdata.inv[0].type, 2)\n-        assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+        assert_equal(len(test_node.last_getdata.inv), 1)\n+        assert(test_node.last_getdata.inv[0].type == 2 or test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        assert_equal(test_node.last_getdata.inv[0].hash, block.sha256)\n \n         # Deliver the block\n-        self.test_node.send_and_ping(msg_block(block))\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n-\n-    def test_getblocktxn_handler(self):\n-        print(\"Testing getblocktxn handler...\")\n+        if version==2:\n+            test_node.send_and_ping(msg_witness_block(block))\n+        else:\n+            test_node.send_and_ping(msg_block(block))\n+        assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n+    def test_getblocktxn_handler(self, node, test_node, version):\n         # bitcoind won't respond for blocks whose height is more than 15 blocks\n         # deep.\n         MAX_GETBLOCKTXN_DEPTH = 15\n-        chain_height = self.nodes[0].getblockcount()\n+        chain_height = node.getblockcount()\n         current_height = chain_height\n         while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n-            block_hash = self.nodes[0].getblockhash(current_height)\n-            block = FromHex(CBlock(), self.nodes[0].getblock(block_hash, False))\n+            block_hash = node.getblockhash(current_height)\n+            block = FromHex(CBlock(), node.getblock(block_hash, False))\n \n             msg = msg_getblocktxn()\n             msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [])\n             num_to_request = random.randint(1, len(block.vtx))\n             msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n-            self.test_node.send_message(msg)\n-            success = wait_until(lambda: self.test_node.last_blocktxn is not None, timeout=10)\n+            test_node.send_message(msg)\n+            success = wait_until(lambda: test_node.last_blocktxn is not None, timeout=10)\n             assert(success)\n \n             [tx.calc_sha256() for tx in block.vtx]\n             with mininode_lock:\n-                assert_equal(self.test_node.last_blocktxn.block_transactions.blockhash, int(block_hash, 16))\n+                assert_equal(test_node.last_blocktxn.block_transactions.blockhash, int(block_hash, 16))\n                 all_indices = msg.block_txn_request.to_absolute()\n                 for index in all_indices:\n-                    tx = self.test_node.last_blocktxn.block_transactions.transactions.pop(0)\n+                    tx = test_node.last_blocktxn.block_transactions.transactions.pop(0)\n                     tx.calc_sha256()\n                     assert_equal(tx.sha256, block.vtx[index].sha256)\n-                self.test_node.last_blocktxn = None\n+                    if version == 1:\n+                        # Witnesses should have been stripped\n+                        assert(tx.wit.is_null())\n+                    else:\n+                        # Check that the witness matches\n+                        assert_equal(tx.calc_sha256(True), block.vtx[index].calc_sha256(True))\n+                test_node.last_blocktxn = None\n             current_height -= 1\n \n         # Next request should be ignored, as we're past the allowed depth.\n-        block_hash = self.nodes[0].getblockhash(current_height)\n+        block_hash = node.getblockhash(current_height)\n         msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [0])\n-        self.test_node.send_and_ping(msg)\n+        test_node.send_and_ping(msg)\n         with mininode_lock:\n-            assert_equal(self.test_node.last_blocktxn, None)\n-\n-    def test_compactblocks_not_at_tip(self):\n-        print(\"Testing compactblock requests/announcements not at chain tip...\")\n+            assert_equal(test_node.last_blocktxn, None)\n \n+    def test_compactblocks_not_at_tip(self, node, test_node):\n         # Test that requesting old compactblocks doesn't work.\n         MAX_CMPCTBLOCK_DEPTH = 11\n         new_blocks = []\n         for i in range(MAX_CMPCTBLOCK_DEPTH):\n-            self.test_node.clear_block_announcement()\n-            new_blocks.append(self.nodes[0].generate(1)[0])\n-            wait_until(self.test_node.received_block_announcement, timeout=30)\n+            test_node.clear_block_announcement()\n+            new_blocks.append(node.generate(1)[0])\n+            wait_until(test_node.received_block_announcement, timeout=30)\n \n-        self.test_node.clear_block_announcement()\n-        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: self.test_node.last_cmpctblock is not None, timeout=30)\n+        test_node.clear_block_announcement()\n+        test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: test_node.last_cmpctblock is not None, timeout=30)\n         assert(success)\n \n-        self.test_node.clear_block_announcement()\n-        self.nodes[0].generate(1)\n-        wait_until(self.test_node.received_block_announcement, timeout=30)\n-        self.test_node.clear_block_announcement()\n-        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: self.test_node.last_block is not None, timeout=30)\n+        test_node.clear_block_announcement()\n+        node.generate(1)\n+        wait_until(test_node.received_block_announcement, timeout=30)\n+        test_node.clear_block_announcement()\n+        test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: test_node.last_block is not None, timeout=30)\n         assert(success)\n         with mininode_lock:\n-            self.test_node.last_block.block.calc_sha256()\n-            assert_equal(self.test_node.last_block.block.sha256, int(new_blocks[0], 16))\n+            test_node.last_block.block.calc_sha256()\n+            assert_equal(test_node.last_block.block.sha256, int(new_blocks[0], 16))\n \n         # Generate an old compactblock, and verify that it's not accepted.\n-        cur_height = self.nodes[0].getblockcount()\n-        hashPrevBlock = int(self.nodes[0].getblockhash(cur_height-5), 16)\n-        block = self.build_block_on_tip()\n+        cur_height = node.getblockcount()\n+        hashPrevBlock = int(node.getblockhash(cur_height-5), 16)\n+        block = self.build_block_on_tip(node)\n         block.hashPrevBlock = hashPrevBlock\n         block.solve()\n \n         comp_block = HeaderAndShortIDs()\n         comp_block.initialize_from_block(block)\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n \n-        tips = self.nodes[0].getchaintips()\n+        tips = node.getchaintips()\n         found = False\n         for x in tips:\n             if x[\"hash\"] == block.hash:\n@@ -591,18 +649,61 @@ def test_compactblocks_not_at_tip(self):\n         msg = msg_getblocktxn()\n         msg.block_txn_request = BlockTransactionsRequest(block.sha256, [0])\n         with mininode_lock:\n-            self.test_node.last_blocktxn = None\n-        self.test_node.send_and_ping(msg)\n+            test_node.last_blocktxn = None\n+        test_node.send_and_ping(msg)\n         with mininode_lock:\n-            assert(self.test_node.last_blocktxn is None)\n+            assert(test_node.last_blocktxn is None)\n+\n+    def activate_segwit(self, node):\n+        node.generate(144*3)\n+        assert_equal(get_bip9_status(node, \"segwit\")[\"status\"], 'active')\n+\n+    def test_end_to_end_block_relay(self, node, listeners):\n+        utxo = self.utxos.pop(0)\n+\n+        block = self.build_block_with_transactions(node, utxo, 10)\n+\n+        [l.clear_block_announcement() for l in listeners]\n+\n+        # ToHex() won't serialize with witness, but this block has no witnesses\n+        # anyway. TODO: repeat this test with witness tx's to a segwit node.\n+        node.submitblock(ToHex(block))\n+\n+        for l in listeners:\n+            wait_until(lambda: l.received_block_announcement(), timeout=30)\n+        with mininode_lock:\n+            for l in listeners:\n+                assert(l.last_cmpctblock is not None)\n+                l.last_cmpctblock.header_and_shortids.header.calc_sha256()\n+                assert_equal(l.last_cmpctblock.header_and_shortids.header.sha256, block.sha256)\n+\n+    # Helper for enabling cb announcements\n+    # Send the sendcmpct request and sync headers\n+    def request_cb_announcements(self, peer, node, version):\n+        tip = node.getbestblockhash()\n+        peer.get_headers(locator=[int(tip, 16)], hashstop=0)\n+\n+        msg = msg_sendcmpct()\n+        msg.version = version\n+        msg.announce = True\n+        peer.send_and_ping(msg)\n+\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         self.test_node = TestNode()\n+        self.segwit_node = TestNode()\n+        self.old_node = TestNode()  # version 1 peer <--> segwit node\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1],\n+                    self.segwit_node, services=NODE_NETWORK|NODE_WITNESS))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1],\n+                    self.old_node, services=NODE_NETWORK))\n         self.test_node.add_connection(connections[0])\n+        self.segwit_node.add_connection(connections[1])\n+        self.old_node.add_connection(connections[2])\n \n         NetworkThread().start()  # Start up network handling in another thread\n \n@@ -612,13 +713,107 @@ def run_test(self):\n         # We will need UTXOs to construct transactions in later tests.\n         self.make_utxos()\n \n-        self.test_sendcmpct()\n-        self.test_compactblock_construction()\n-        self.test_compactblock_requests()\n-        self.test_getblocktxn_requests()\n-        self.test_getblocktxn_handler()\n-        self.test_compactblocks_not_at_tip()\n-        self.test_incorrect_blocktxn_response()\n+        print(\"Running tests, pre-segwit activation:\")\n+\n+        print(\"\\tTesting SENDCMPCT p2p message... \")\n+        self.test_sendcmpct(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_sendcmpct(self.nodes[1], self.segwit_node, 2, old_node=self.old_node)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock construction...\")\n+        self.test_compactblock_construction(self.nodes[0], self.test_node, 1, False)\n+        sync_blocks(self.nodes)\n+        self.test_compactblock_construction(self.nodes[1], self.segwit_node, 2, False)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock requests... \")\n+        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        sync_blocks(self.nodes)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting getblocktxn requests...\")\n+        self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting getblocktxn handler...\")\n+        self.test_getblocktxn_handler(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_getblocktxn_handler(self.nodes[1], self.segwit_node, 2)\n+        self.test_getblocktxn_handler(self.nodes[1], self.old_node, 1)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock requests/announcements not at chain tip...\")\n+        self.test_compactblocks_not_at_tip(self.nodes[0], self.test_node)\n+        sync_blocks(self.nodes)\n+        self.test_compactblocks_not_at_tip(self.nodes[1], self.segwit_node)\n+        self.test_compactblocks_not_at_tip(self.nodes[1], self.old_node)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting handling of incorrect blocktxn responses...\")\n+        self.test_incorrect_blocktxn_response(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_incorrect_blocktxn_response(self.nodes[1], self.segwit_node, 2)\n+        sync_blocks(self.nodes)\n+\n+        # End-to-end block relay tests\n+        print(\"\\tTesting end-to-end block relay...\")\n+        self.request_cb_announcements(self.test_node, self.nodes[0], 1)\n+        self.request_cb_announcements(self.old_node, self.nodes[1], 1)\n+        self.request_cb_announcements(self.segwit_node, self.nodes[1], 2)\n+        self.test_end_to_end_block_relay(self.nodes[0], [self.segwit_node, self.test_node, self.old_node])\n+        self.test_end_to_end_block_relay(self.nodes[1], [self.segwit_node, self.test_node, self.old_node])\n+\n+        # Advance to segwit activation\n+        print (\"\\nAdvancing to segwit activation\\n\")\n+        self.activate_segwit(self.nodes[1])\n+        print (\"Running tests, post-segwit activation...\")\n+\n+        print(\"\\tTesting compactblock construction...\")\n+        self.test_compactblock_construction(self.nodes[1], self.old_node, 1, True)\n+        self.test_compactblock_construction(self.nodes[1], self.segwit_node, 2, True)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock requests (unupgraded node)... \")\n+        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+\n+        print(\"\\tTesting getblocktxn requests (unupgraded node)...\")\n+        self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n+\n+        # Need to manually sync node0 and node1, because post-segwit activation,\n+        # node1 will not download blocks from node0.\n+        print(\"\\tSyncing nodes...\")\n+        assert(self.nodes[0].getbestblockhash() != self.nodes[1].getbestblockhash())\n+        while (self.nodes[0].getblockcount() > self.nodes[1].getblockcount()):\n+            block_hash = self.nodes[0].getblockhash(self.nodes[1].getblockcount()+1)\n+            self.nodes[1].submitblock(self.nodes[0].getblock(block_hash, False))\n+        assert_equal(self.nodes[0].getbestblockhash(), self.nodes[1].getbestblockhash())\n+\n+        print(\"\\tTesting compactblock requests (segwit node)... \")\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+\n+        print(\"\\tTesting getblocktxn requests (segwit node)...\")\n+        self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting getblocktxn handler (segwit node should return witnesses)...\")\n+        self.test_getblocktxn_handler(self.nodes[1], self.segwit_node, 2)\n+        self.test_getblocktxn_handler(self.nodes[1], self.old_node, 1)\n+\n+        # Test that if we submitblock to node1, we'll get a compact block\n+        # announcement to all peers.\n+        # (Post-segwit activation, blocks won't propagate from node0 to node1\n+        # automatically, so don't bother testing a block announced to node0.)\n+        print(\"\\tTesting end-to-end block relay...\")\n+        self.request_cb_announcements(self.test_node, self.nodes[0], 1)\n+        self.request_cb_announcements(self.old_node, self.nodes[1], 1)\n+        self.request_cb_announcements(self.segwit_node, self.nodes[1], 2)\n+        self.test_end_to_end_block_relay(self.nodes[1], [self.segwit_node, self.test_node, self.old_node])\n+\n+        print(\"\\tTesting invalid index in cmpctblock message...\")\n         self.test_invalid_cmpctblock_message()\n \n "
      }
    ]
  },
  {
    "sha": "aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWZjYjdiNzBjOTIzY2NkMzQxMzI5YTJkNWUyMjIzOGRjMTRhYzNi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:36:11Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:36:11Z"
      },
      "message": "Move net-processing logic definitions together in main.h",
      "tree": {
        "sha": "90ad4abb55d64cca7137841383d9158426c1b106",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90ad4abb55d64cca7137841383d9158426c1b106"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0278fb5f48ae9e42ec0772f85e201051077f633c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0278fb5f48ae9e42ec0772f85e201051077f633c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0278fb5f48ae9e42ec0772f85e201051077f633c"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 30,
      "deletions": 26
    },
    "files": [
      {
        "sha": "3c587569f635d93143fc057947ad0606d774347f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 30,
        "deletions": 26,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aefcb7b70c923ccd341329a2d5e22238dc14ac3b/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aefcb7b70c923ccd341329a2d5e22238dc14ac3b/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
        "patch": "@@ -41,7 +41,6 @@ class CValidationInterface;\n class CValidationState;\n \n struct PrecomputedTransactionData;\n-struct CNodeStateStats;\n struct LockPoints;\n \n /** Default for DEFAULT_WHITELISTRELAY. */\n@@ -206,11 +205,6 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-/** Register with a network node to receive its signals */\n-void RegisterNodeSignals(CNodeSignals& nodeSignals);\n-/** Unregister a network node */\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n-\n /** \n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n@@ -240,15 +234,6 @@ bool InitBlockIndex(const CChainParams& chainparams);\n bool LoadBlockIndex();\n /** Unload database information */\n void UnloadBlockIndex();\n-/** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman);\n-/**\n- * Send queued protocol messages to be sent to a give node.\n- *\n- * @param[in]   pto             The node which we are sending messages to.\n- * @param[in]   connman         The connection manager for that node.\n- */\n-bool SendMessages(CNode* pto, CConnman& connman);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n@@ -291,10 +276,6 @@ void UnlinkPrunedFiles(std::set<int>& setFilesToPrune);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Get statistics from node state */\n-bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n-/** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n@@ -310,13 +291,6 @@ std::string FormatStateMessage(const CValidationState &state);\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-struct CNodeStateStats {\n-    int nMisbehavior;\n-    int nSyncHeight;\n-    int nCommonHeight;\n-    std::vector<int> vHeightInFlight;\n-};\n-\n \n \n /** \n@@ -545,4 +519,34 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+// The following things handle network-processing logic\n+// (and should be moved to a separate file)\n+\n+/** Register with a network node to receive its signals */\n+void RegisterNodeSignals(CNodeSignals& nodeSignals);\n+/** Unregister a network node */\n+void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n+\n+struct CNodeStateStats {\n+    int nMisbehavior;\n+    int nSyncHeight;\n+    int nCommonHeight;\n+    std::vector<int> vHeightInFlight;\n+};\n+\n+/** Get statistics from node state */\n+bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n+/** Increase a node's misbehavior score. */\n+void Misbehaving(NodeId nodeid, int howmuch);\n+\n+/** Process protocol messages received from a given node */\n+bool ProcessMessages(CNode* pfrom, CConnman& connman);\n+/**\n+ * Send queued protocol messages to be sent to a give node.\n+ *\n+ * @param[in]   pto             The node which we are sending messages to.\n+ * @param[in]   connman         The connection manager for that node.\n+ */\n+bool SendMessages(CNode* pto, CConnman& connman);\n+\n #endif // BITCOIN_MAIN_H"
      }
    ]
  },
  {
    "sha": "fef1010199b70026fd6d56ebac5c277552757307",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWYxMDEwMTk5YjcwMDI2ZmQ2ZDU2ZWJhYzVjMjc3NTUyNzU3MzA3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:49:44Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:49:44Z"
      },
      "message": "Use CValidationInterface from chain logic to notify peer logic\n\nThis adds a new CValidationInterface subclass, defined in main.h,\nto receive notifications of UpdatedBlockTip and use that to push\nblocks to peers, instead of doing it directly from\nActivateBestChain.",
      "tree": {
        "sha": "9590c91b21f6b1a3a3c36d9463f197725d4d8e3d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9590c91b21f6b1a3a3c36d9463f197725d4d8e3d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fef1010199b70026fd6d56ebac5c277552757307",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef1010199b70026fd6d56ebac5c277552757307",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fef1010199b70026fd6d56ebac5c277552757307",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef1010199b70026fd6d56ebac5c277552757307/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aefcb7b70c923ccd341329a2d5e22238dc14ac3b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aefcb7b70c923ccd341329a2d5e22238dc14ac3b"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 48,
      "deletions": 24
    },
    "files": [
      {
        "sha": "7045b3e6e1f4d09dd8f65cdd55fe48091701f8ac",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef1010199b70026fd6d56ebac5c277552757307/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef1010199b70026fd6d56ebac5c277552757307/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fef1010199b70026fd6d56ebac5c277552757307",
        "patch": "@@ -72,6 +72,7 @@ static const bool DEFAULT_DISABLE_SAFEMODE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n std::unique_ptr<CConnman> g_connman;\n+std::unique_ptr<PeerLogicValidation> peerLogic;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -200,6 +201,8 @@ void Shutdown()\n         pwalletMain->Flush(false);\n #endif\n     MapPort(false);\n+    UnregisterValidationInterface(peerLogic.get());\n+    peerLogic.reset();\n     g_connman.reset();\n \n     StopTorControl();\n@@ -1102,6 +1105,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n+    peerLogic.reset(new PeerLogicValidation(&connman));\n+    RegisterValidationInterface(peerLogic.get());\n     RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "e042a73822b678da085e52365d84d2a5d516280a",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 24,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef1010199b70026fd6d56ebac5c277552757307/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef1010199b70026fd6d56ebac5c277552757307/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fef1010199b70026fd6d56ebac5c277552757307",
        "patch": "@@ -3073,30 +3073,6 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         if (pindexFork != pindexNewTip) {\n             uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n \n-            if (!fInitialDownload) {\n-                // Find the hashes of all blocks that weren't previously in the best chain.\n-                std::vector<uint256> vHashes;\n-                CBlockIndex *pindexToAnnounce = pindexNewTip;\n-                while (pindexToAnnounce != pindexFork) {\n-                    vHashes.push_back(pindexToAnnounce->GetBlockHash());\n-                    pindexToAnnounce = pindexToAnnounce->pprev;\n-                    if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n-                        // Limit announcements in case of a huge reorganization.\n-                        // Rely on the peer's synchronization mechanism in that case.\n-                        break;\n-                    }\n-                }\n-                // Relay inventory, but don't relay old inventory during initial block download.\n-                if(connman) {\n-                    connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n-                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n-                            BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n-                                pnode->PushBlockHash(hash);\n-                            }\n-                        }\n-                    });\n-                }\n-            }\n             // Notify external listeners about the new tip.\n             GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n         }\n@@ -4682,6 +4658,38 @@ std::string GetWarnings(const std::string& strFor)\n \n \n \n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// blockchain -> download logic notification\n+//\n+\n+void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+    const int nNewHeight = pindexNew->nHeight;\n+\n+    if (!fInitialDownload) {\n+        // Find the hashes of all blocks that weren't previously in the best chain.\n+        std::vector<uint256> vHashes;\n+        const CBlockIndex *pindexToAnnounce = pindexNew;\n+        while (pindexToAnnounce != pindexFork) {\n+            vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+            pindexToAnnounce = pindexToAnnounce->pprev;\n+            if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                // Limit announcements in case of a huge reorganization.\n+                // Rely on the peer's synchronization mechanism in that case.\n+                break;\n+            }\n+        }\n+        // Relay inventory, but don't relay old inventory during initial block download.\n+        connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n+            if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n+                BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                    pnode->PushBlockHash(hash);\n+                }\n+            }\n+        });\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      },
      {
        "sha": "bb5e26b0b274319a083ad111e449dc497681ea47",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fef1010199b70026fd6d56ebac5c277552757307/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fef1010199b70026fd6d56ebac5c277552757307/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fef1010199b70026fd6d56ebac5c277552757307",
        "patch": "@@ -16,6 +16,7 @@\n #include \"net.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n+#include \"validationinterface.h\"\n #include \"versionbits.h\"\n \n #include <algorithm>\n@@ -527,6 +528,16 @@ void RegisterNodeSignals(CNodeSignals& nodeSignals);\n /** Unregister a network node */\n void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n \n+class PeerLogicValidation : public CValidationInterface {\n+private:\n+    CConnman* connman;\n+\n+public:\n+    PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n+\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+};\n+\n struct CNodeStateStats {\n     int nMisbehavior;\n     int nSyncHeight;"
      }
    ]
  },
  {
    "sha": "f5efa283931ce1d52c59234b58988a221d42ecb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWVmYTI4MzkzMWNlMWQ1MmM1OTIzNGI1ODk4OGEyMjFkNDJlY2I0",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-09-30T22:38:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:51:32Z"
      },
      "message": "Remove CConnman parameter from ProcessNewBlock/ActivateBestChain",
      "tree": {
        "sha": "ce892a16f3048f3a378c8a71092bf4f9be557356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ce892a16f3048f3a378c8a71092bf4f9be557356"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5efa283931ce1d52c59234b58988a221d42ecb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efa283931ce1d52c59234b58988a221d42ecb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5efa283931ce1d52c59234b58988a221d42ecb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efa283931ce1d52c59234b58988a221d42ecb4/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fef1010199b70026fd6d56ebac5c277552757307",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fef1010199b70026fd6d56ebac5c277552757307",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fef1010199b70026fd6d56ebac5c277552757307"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 13,
      "deletions": 13
    },
    "files": [
      {
        "sha": "4ad7348db0b4377b83272b33fa25758d747e177f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -3013,7 +3013,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock, CConnman* connman) {\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     std::vector<std::tuple<CTransaction,CBlockIndex*,int>> txChanged;\n@@ -3703,7 +3703,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {\n         LOCK(cs_main);\n@@ -3725,7 +3725,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n \n     NotifyHeaderTip();\n \n-    if (!ActivateBestChain(state, chainparams, pblock, connman))\n+    if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -5764,7 +5764,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n             CValidationState state;\n-            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL, &connman);\n+            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -5940,7 +5940,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL, &connman);\n+        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes"
      },
      {
        "sha": "77179b25b98d8aa065fe907d668790040ae30150",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -218,7 +218,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -250,7 +250,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL, CConnman* connman = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**"
      },
      {
        "sha": "d85f6fed6380ff21ce535ef0502fe6f3ddbab9e5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -1279,7 +1279,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params(), NULL, g_connman.get());\n+        ActivateBestChain(state, Params(), NULL);\n     }\n \n     if (!state.IsValid()) {\n@@ -1317,7 +1317,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     }\n \n     CValidationState state;\n-    ActivateBestChain(state, Params(), NULL, g_connman.get());\n+    ActivateBestChain(state, Params(), NULL);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());"
      },
      {
        "sha": "a54931720e45b3baf7d70226a6a6d1be1435a779",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -131,7 +131,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             continue;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL, g_connman.get()))\n+        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -757,7 +757,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL, g_connman.get());\n+    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "15fceb963a59f1c81165fd31e5e41ee02e83c3ae",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -222,7 +222,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL, connman));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "f36c5486556b2f497af809d3cba1834f47c77023",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5efa283931ce1d52c59234b58988a221d42ecb4/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=f5efa283931ce1d52c59234b58988a221d42ecb4",
        "patch": "@@ -124,7 +124,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL, connman);\n+    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n \n     CBlock result = block;\n     delete pblocktemplate;"
      }
    ]
  },
  {
    "sha": "12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmVlMWZlMDE4ZTk5YmJhNmMyYjc0OTQwZWNlM2IzOWE0NWVkOGQz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:52:57Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:52:57Z"
      },
      "message": "Always call UpdatedBlockTip, even if blocks were only disconnected",
      "tree": {
        "sha": "cf210f0f9b50cd210ef7b0490e184145e7300400",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf210f0f9b50cd210ef7b0490e184145e7300400"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5efa283931ce1d52c59234b58988a221d42ecb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5efa283931ce1d52c59234b58988a221d42ecb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5efa283931ce1d52c59234b58988a221d42ecb4"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 5,
      "deletions": 8
    },
    "files": [
      {
        "sha": "189c265ec034e22ca594cbc04d34166d7e1a0f72",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "patch": "@@ -3028,7 +3028,6 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         const CBlockIndex *pindexFork;\n         std::list<CTransaction> txConflicted;\n         bool fInitialDownload;\n-        int nNewHeight;\n         {\n             LOCK(cs_main);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -3051,13 +3050,10 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexNewTip = chainActive.Tip();\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n-            nNewHeight = chainActive.Height();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n-        if(connman)\n-            connman->SetBestHeight(nNewHeight);\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n@@ -3069,12 +3065,12 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         for(unsigned int i = 0; i < txChanged.size(); i++)\n             SyncWithWallets(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n \n+        // Notify external listeners about the new tip.\n+        GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n+\n         // Always notify the UI if a new block tip was connected\n         if (pindexFork != pindexNewTip) {\n             uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n-\n-            // Notify external listeners about the new tip.\n-            GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n         }\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());\n@@ -4665,6 +4661,7 @@ std::string GetWarnings(const std::string& strFor)\n \n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n+    connman->SetBestHeight(nNewHeight);\n \n     if (!fInitialDownload) {\n         // Find the hashes of all blocks that weren't previously in the best chain."
      },
      {
        "sha": "a0196fe18418c66e0ff463d9fa66501325943ea8",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "patch": "@@ -126,7 +126,7 @@ void CZMQNotificationInterface::Shutdown()\n \n void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n-    if (fInitialDownload)\n+    if (fInitialDownload || pindexNew == pindexFork) // In IBD or blocks were disconnected without any new ones\n         return;\n \n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )"
      }
    ]
  },
  {
    "sha": "7565e03b962cfa8d8e54aa0f9068f41194915523",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTY1ZTAzYjk2MmNmYThkOGU1NGFhMGY5MDY4ZjQxMTk0OTE1NTIz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-01T19:29:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:53:04Z"
      },
      "message": "Remove SyncWithWallets wrapper function",
      "tree": {
        "sha": "4535fa640781f26d3eaa4058b3c3e3e5512d8351",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4535fa640781f26d3eaa4058b3c3e3e5512d8351"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7565e03b962cfa8d8e54aa0f9068f41194915523",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7565e03b962cfa8d8e54aa0f9068f41194915523",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7565e03b962cfa8d8e54aa0f9068f41194915523",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7565e03b962cfa8d8e54aa0f9068f41194915523/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/12ee1fe018e99bba6c2b74940ece3b39a45ed8d3"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 6,
      "deletions": 10
    },
    "files": [
      {
        "sha": "2f35288329a8874c2b1b162de7886924816ab39f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7565e03b962cfa8d8e54aa0f9068f41194915523/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7565e03b962cfa8d8e54aa0f9068f41194915523/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7565e03b962cfa8d8e54aa0f9068f41194915523",
        "patch": "@@ -1542,7 +1542,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    SyncWithWallets(tx, NULL);\n+    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n \n     return true;\n }\n@@ -2775,7 +2775,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, pindexDelete->pprev);\n+        GetMainSignals().SyncTransaction(tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n     }\n     return true;\n }\n@@ -3059,11 +3059,11 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         // while _not_ holding the cs_main lock\n         BOOST_FOREACH(const CTransaction &tx, txConflicted)\n         {\n-            SyncWithWallets(tx, pindexNewTip);\n+            GetMainSignals().SyncTransaction(tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n         for(unsigned int i = 0; i < txChanged.size(); i++)\n-            SyncWithWallets(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n+            GetMainSignals().SyncTransaction(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n \n         // Notify external listeners about the new tip.\n         GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);"
      },
      {
        "sha": "085c336ccf6a986adf4fb2c3075417363a88ab82",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=7565e03b962cfa8d8e54aa0f9068f41194915523",
        "patch": "@@ -47,7 +47,3 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.SyncTransaction.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n }\n-\n-void SyncWithWallets(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {\n-    g_signals.SyncTransaction(tx, pindex, posInBlock);\n-}"
      },
      {
        "sha": "a29859999bfabe57a12ae665eba0376386d398dc",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7565e03b962cfa8d8e54aa0f9068f41194915523/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=7565e03b962cfa8d8e54aa0f9068f41194915523",
        "patch": "@@ -28,8 +28,6 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn);\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n-/** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock = -1);\n \n class CValidationInterface {\n protected:\n@@ -50,6 +48,8 @@ class CValidationInterface {\n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n+    static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */"
      }
    ]
  },
  {
    "sha": "a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWFlYzVjMjRkOGM0ZWZlOWUxZWRlNTRlOGI4MDM5YjRiM2YwODM1",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:54:29Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-04T17:54:29Z"
      },
      "message": "Use BlockChecked signal to send reject messages from mapBlockSource",
      "tree": {
        "sha": "1cae6e4078fa85f2702ef230a4cf08ac3a946fb7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cae6e4078fa85f2702ef230a4cf08ac3a946fb7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7565e03b962cfa8d8e54aa0f9068f41194915523",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7565e03b962cfa8d8e54aa0f9068f41194915523",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7565e03b962cfa8d8e54aa0f9068f41194915523"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 21,
      "deletions": 12
    },
    "files": [
      {
        "sha": "a6a43699cd296e5df5efb2473afd681130968a27",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 12,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
        "patch": "@@ -1857,17 +1857,6 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n }\n \n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n-    int nDoS = 0;\n-    if (state.IsInvalid(nDoS)) {\n-        std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n-        if (it != mapBlockSource.end() && State(it->second)) {\n-            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n-            State(it->second)->rejects.push_back(reject);\n-            if (nDoS > 0)\n-                Misbehaving(it->second, nDoS);\n-        }\n-    }\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         setDirtyBlockIndex.insert(pindex);\n@@ -2814,7 +2803,6 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(pindexNew->GetBlockHash());\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());\n@@ -4687,6 +4675,26 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n     }\n }\n \n+void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    LOCK(cs_main);\n+\n+    const uint256 hash(block.GetHash());\n+    std::map<uint256, NodeId>::iterator it = mapBlockSource.find(hash);\n+\n+    int nDoS = 0;\n+    if (state.IsInvalid(nDoS)) {\n+        if (it != mapBlockSource.end() && State(it->second)) {\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n+            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n+            State(it->second)->rejects.push_back(reject);\n+            if (nDoS > 0)\n+                Misbehaving(it->second, nDoS);\n+        }\n+    }\n+    if (it != mapBlockSource.end())\n+        mapBlockSource.erase(it);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages"
      },
      {
        "sha": "889b6a2da1bf46a65674aeaa2ee225eeb518b02f",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
        "patch": "@@ -536,6 +536,7 @@ class PeerLogicValidation : public CValidationInterface {\n     PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n \n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n };\n \n struct CNodeStateStats {"
      }
    ]
  },
  {
    "sha": "6976db2f4687d575e1b4bee5aaf1d93a794f23c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OTc2ZGIyZjQ2ODdkNTc1ZTFiNGJlZTVhYWYxZDkzYTc5NGYyM2Mz",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-10-04T19:17:19Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2016-10-04T19:17:19Z"
      },
      "message": "[qa] Another attempt to fix race condition in p2p-compactblocks.py\n\nsync_with_ping() only guarantees that the node has processed messages\nit's received from the peer, not that block announcements from the node have\nmade it back to the peer.  Replace sync_with_ping() with an explicit check that\nthe node's tip has been announced.",
      "tree": {
        "sha": "02d59847d8ce037294e08aaf1e654dc8bf6fce0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02d59847d8ce037294e08aaf1e654dc8bf6fce0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6976db2f4687d575e1b4bee5aaf1d93a794f23c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6976db2f4687d575e1b4bee5aaf1d93a794f23c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6976db2f4687d575e1b4bee5aaf1d93a794f23c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6976db2f4687d575e1b4bee5aaf1d93a794f23c3/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 22,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cd680437696a6b3e5be70703ce652dc7b83a9d98",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6976db2f4687d575e1b4bee5aaf1d93a794f23c3/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6976db2f4687d575e1b4bee5aaf1d93a794f23c3/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=6976db2f4687d575e1b4bee5aaf1d93a794f23c3",
        "patch": "@@ -28,6 +28,10 @@ def __init__(self):\n         self.last_getblocktxn = None\n         self.last_block = None\n         self.last_blocktxn = None\n+        # Store the hashes of blocks we've seen announced.\n+        # This is for synchronizing the p2p message traffic,\n+        # so we can eg wait until a particular block is announced.\n+        self.set_announced_blockhashes = set()\n \n     def on_sendcmpct(self, conn, message):\n         self.last_sendcmpct = message\n@@ -38,14 +42,22 @@ def on_block(self, conn, message):\n     def on_cmpctblock(self, conn, message):\n         self.last_cmpctblock = message\n         self.block_announced = True\n+        self.last_cmpctblock.header_and_shortids.header.calc_sha256()\n+        self.set_announced_blockhashes.add(self.last_cmpctblock.header_and_shortids.header.sha256)\n \n     def on_headers(self, conn, message):\n         self.last_headers = message\n         self.block_announced = True\n+        for x in self.last_headers.headers:\n+            x.calc_sha256()\n+            self.set_announced_blockhashes.add(x.sha256)\n \n     def on_inv(self, conn, message):\n         self.last_inv = message\n-        self.block_announced = True\n+        for x in self.last_inv.inv:\n+            if x.type == 2:\n+                self.block_announced = True\n+                self.set_announced_blockhashes.add(x.hash)\n \n     def on_getdata(self, conn, message):\n         self.last_getdata = message\n@@ -85,6 +97,12 @@ def request_headers_and_sync(self, locator, hashstop=0):\n         assert(self.received_block_announcement())\n         self.clear_block_announcement()\n \n+    # Block until a block announcement for a particular block hash is\n+    # received.\n+    def wait_for_block_announcement(self, block_hash, timeout=30):\n+        def received_hash():\n+            return (block_hash in self.set_announced_blockhashes)\n+        return wait_until(received_hash, timeout=timeout)\n \n class CompactBlocksTest(BitcoinTestFramework):\n     def __init__(self):\n@@ -237,7 +255,9 @@ def test_compactblock_construction(self):\n         for i in range(num_transactions):\n             self.nodes[0].sendtoaddress(address, 0.1)\n \n-        self.test_node.sync_with_ping()\n+        # Wait until we've seen the block announcement for the resulting tip\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        assert(self.test_node.wait_for_block_announcement(tip))\n \n         # Now mine a block, and look at the resulting compact block.\n         self.test_node.clear_block_announcement()"
      }
    ]
  },
  {
    "sha": "1880aeb0336324ed543c7d181c7b1509bc1cce7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODgwYWViMDMzNjMyNGVkNTQzYzdkMTgxYzdiMTUwOWJjMWNjZTdh",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-09-08T07:17:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-04T20:30:10Z"
      },
      "message": "Qt: Get the private key for signing messages via WalletModel",
      "tree": {
        "sha": "1a9f1cb4e841d5c3256bea034ddb04343283e1e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a9f1cb4e841d5c3256bea034ddb04343283e1e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1880aeb0336324ed543c7d181c7b1509bc1cce7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1880aeb0336324ed543c7d181c7b1509bc1cce7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1880aeb0336324ed543c7d181c7b1509bc1cce7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1880aeb0336324ed543c7d181c7b1509bc1cce7a/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fa8cf9d6866e551e4f4af4fbea319bbb8b78003a",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1880aeb0336324ed543c7d181c7b1509bc1cce7a/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1880aeb0336324ed543c7d181c7b1509bc1cce7a/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=1880aeb0336324ed543c7d181c7b1509bc1cce7a",
        "patch": "@@ -142,7 +142,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!pwalletMain->GetKey(keyID, key))\n+    if (!model->getPrivKey(keyID, key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      },
      {
        "sha": "62655be5178e8acd380cfd45dc8eb7e3b2385de1",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1880aeb0336324ed543c7d181c7b1509bc1cce7a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1880aeb0336324ed543c7d181c7b1509bc1cce7a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=1880aeb0336324ed543c7d181c7b1509bc1cce7a",
        "patch": "@@ -563,6 +563,11 @@ bool WalletModel::havePrivKey(const CKeyID &address) const\n     return wallet->HaveKey(address);\n }\n \n+bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const\n+{\n+    return wallet->GetKey(address, vchPrivKeyOut);\n+}\n+\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {"
      },
      {
        "sha": "f15e5fc6f4d64d92012c335c301bed9f8c4d6b36",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1880aeb0336324ed543c7d181c7b1509bc1cce7a/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1880aeb0336324ed543c7d181c7b1509bc1cce7a/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=1880aeb0336324ed543c7d181c7b1509bc1cce7a",
        "patch": "@@ -188,6 +188,7 @@ class WalletModel : public QObject\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     bool havePrivKey(const CKeyID &address) const;\n+    bool getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;"
      }
    ]
  },
  {
    "sha": "178cd887eca1123fde39f530ee2b198db48363fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzhjZDg4N2VjYTExMjNmZGUzOWY1MzBlZTJiMTk4ZGI0ODM2M2Zl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-09-08T19:58:30Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-04T20:30:10Z"
      },
      "message": "Qt/splash: Specifically keep track of which wallet(s) we are connected to for later disconnecting",
      "tree": {
        "sha": "dc6642222bed128752411e9d3465a490bc6a4572",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc6642222bed128752411e9d3465a490bc6a4572"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/178cd887eca1123fde39f530ee2b198db48363fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178cd887eca1123fde39f530ee2b198db48363fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/178cd887eca1123fde39f530ee2b198db48363fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178cd887eca1123fde39f530ee2b198db48363fe/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1880aeb0336324ed543c7d181c7b1509bc1cce7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1880aeb0336324ed543c7d181c7b1509bc1cce7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1880aeb0336324ed543c7d181c7b1509bc1cce7a"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 12,
      "deletions": 5
    },
    "files": [
      {
        "sha": "69ed44b81f9dff247b0d398b3f345c7c5d9115b8",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/178cd887eca1123fde39f530ee2b198db48363fe/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/178cd887eca1123fde39f530ee2b198db48363fe/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=178cd887eca1123fde39f530ee2b198db48363fe",
        "patch": "@@ -151,9 +151,10 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\n }\n \n #ifdef ENABLE_WALLET\n-static void ConnectWallet(SplashScreen *splash, CWallet* wallet)\n+void SplashScreen::ConnectWallet(CWallet* wallet)\n {\n-    wallet->ShowProgress.connect(boost::bind(ShowProgress, splash, _1, _2));\n+    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n+    connectedWallets.push_back(wallet);\n }\n #endif\n \n@@ -163,7 +164,7 @@ void SplashScreen::subscribeToCoreSignals()\n     uiInterface.InitMessage.connect(boost::bind(InitMessage, this, _1));\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n #ifdef ENABLE_WALLET\n-    uiInterface.LoadWallet.connect(boost::bind(ConnectWallet, this, _1));\n+    uiInterface.LoadWallet.connect(boost::bind(&SplashScreen::ConnectWallet, this, _1));\n #endif\n }\n \n@@ -173,8 +174,9 @@ void SplashScreen::unsubscribeFromCoreSignals()\n     uiInterface.InitMessage.disconnect(boost::bind(InitMessage, this, _1));\n     uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n #ifdef ENABLE_WALLET\n-    if(pwalletMain)\n-        pwalletMain->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+    Q_FOREACH(CWallet* const & pwallet, connectedWallets) {\n+        pwallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+    }\n #endif\n }\n "
      },
      {
        "sha": "8761343a7aafa6ac3b40e20b2ae9ac0c86a4461c",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/178cd887eca1123fde39f530ee2b198db48363fe/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/178cd887eca1123fde39f530ee2b198db48363fe/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=178cd887eca1123fde39f530ee2b198db48363fe",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <QSplashScreen>\n \n+class CWallet;\n class NetworkStyle;\n \n /** Class for the splashscreen with information of the running client.\n@@ -39,11 +40,15 @@ public Q_SLOTS:\n     void subscribeToCoreSignals();\n     /** Disconnect core signals to splash screen */\n     void unsubscribeFromCoreSignals();\n+    /** Connect wallet signals to splash screen */\n+    void ConnectWallet(CWallet*);\n \n     QPixmap pixmap;\n     QString curMessage;\n     QColor curColor;\n     int curAlignment;\n+\n+    QList<CWallet*> connectedWallets;\n };\n \n #endif // BITCOIN_QT_SPLASHSCREEN_H"
      }
    ]
  },
  {
    "sha": "a78e5428acb862bfb47e6faff39f4889f5c73269",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzhlNTQyOGFjYjg2MmJmYjQ3ZTZmYWZmMzlmNDg4OWY1YzczMjY5",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-04T22:20:07Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-04T22:22:07Z"
      },
      "message": "Bugfix: Trivial: RPC: getblockchaininfo help: pruneheight is the lowest, not highest, block",
      "tree": {
        "sha": "0ec870f7565921993e5287b8c2f9d2a4b4dd5388",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ec870f7565921993e5287b8c2f9d2a4b4dd5388"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a78e5428acb862bfb47e6faff39f4889f5c73269",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78e5428acb862bfb47e6faff39f4889f5c73269",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a78e5428acb862bfb47e6faff39f4889f5c73269",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78e5428acb862bfb47e6faff39f4889f5c73269/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4382fbef56a0e04b0ed834e8b3a3a16f81db149",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e4382fbef56a0e04b0ed834e8b3a3a16f81db149"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "675d9ba904c8c413085f878fc08a3f0c9596bb61",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a78e5428acb862bfb47e6faff39f4889f5c73269/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a78e5428acb862bfb47e6faff39f4889f5c73269/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=a78e5428acb862bfb47e6faff39f4889f5c73269",
        "patch": "@@ -892,7 +892,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) heighest block available\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\""
      }
    ]
  },
  {
    "sha": "cb78c60534e5be205f9190cb0cde700f9e9fa38d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjc4YzYwNTM0ZTViZTIwNWY5MTkwY2IwY2RlNzAwZjllOWZhMzhk",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-04T23:27:11Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-04T23:43:53Z"
      },
      "message": "gui: fix ban from qt console\n\nRather than doing a circle and re-resolving the node's IP, just use the one\nfrom nodestats directly.\n\nThis requires syncing the addr field from CNode.",
      "tree": {
        "sha": "b217ec453786a1ec3882cce301bfa4b2479e3705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b217ec453786a1ec3882cce301bfa4b2479e3705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb78c60534e5be205f9190cb0cde700f9e9fa38d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb78c60534e5be205f9190cb0cde700f9e9fa38d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb78c60534e5be205f9190cb0cde700f9e9fa38d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb78c60534e5be205f9190cb0cde700f9e9fa38d/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "19dd040997ad16e04a514142fe2faf386d3f0dcc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb78c60534e5be205f9190cb0cde700f9e9fa38d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb78c60534e5be205f9190cb0cde700f9e9fa38d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=cb78c60534e5be205f9190cb0cde700f9e9fa38d",
        "patch": "@@ -629,6 +629,7 @@ void CNode::copyStats(CNodeStats &stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n+    X(addr);\n     X(fRelayTxes);\n     X(nLastSend);\n     X(nLastRecv);"
      },
      {
        "sha": "67f0abe4be820dbee9f4f4b202ad5cc4ab5093ad",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb78c60534e5be205f9190cb0cde700f9e9fa38d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb78c60534e5be205f9190cb0cde700f9e9fa38d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=cb78c60534e5be205f9190cb0cde700f9e9fa38d",
        "patch": "@@ -505,6 +505,7 @@ class CNodeStats\n     double dPingWait;\n     double dPingMin;\n     std::string addrLocal;\n+    CAddress addr;\n };\n \n "
      },
      {
        "sha": "b6ed75535c8d153d84611e4bdea0b5f4bbe3c88a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb78c60534e5be205f9190cb0cde700f9e9fa38d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb78c60534e5be205f9190cb0cde700f9e9fa38d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=cb78c60534e5be205f9190cb0cde700f9e9fa38d",
        "patch": "@@ -981,20 +981,21 @@ void RPCConsole::banSelectedNode(int bantime)\n     if (!clientModel || !g_connman)\n         return;\n \n-    // Get currently selected peer address\n-    QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address).toString();\n-    // Find possible nodes, ban it and clear the selected node\n-    std::string nStr = strNode.toStdString();\n-    std::string addr;\n-    int port = 0;\n-    SplitHostPort(nStr, port, addr);\n+    if(cachedNodeid == -1)\n+        return;\n \n-    CNetAddr resolved;\n-    if(!LookupHost(addr.c_str(), resolved, false))\n+    // Get currently selected peer address\n+    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeid);\n+    if(detailNodeRow < 0)\n         return;\n-    g_connman->Ban(resolved, BanReasonManuallyAdded, bantime);\n-    clearSelectedNode();\n-    clientModel->getBanTableModel()->refresh();\n+\n+    // Find possible nodes, ban it and clear the selected node\n+    const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n+    if(stats) {\n+        g_connman->Ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n+        clearSelectedNode();\n+        clientModel->getBanTableModel()->refresh();\n+    }\n }\n \n void RPCConsole::unbanSelectedNode()"
      }
    ]
  },
  {
    "sha": "f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTI4MDUwMjVkNWI1OWI3ZmRiNWEwNzZiYmUwNzZlNWNjNTQ0N2Uy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-05T03:06:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-05T03:07:19Z"
      },
      "message": "Merge #8879: [doc] Rework docs\n\neeeebdd [doc] Rework docs (MarcoFalke)",
      "tree": {
        "sha": "c8a023f61797b8a595ec256f6c20c2e014d46a60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8a023f61797b8a595ec256f6c20c2e014d46a60"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX9G5nAAoJEHSBCwEjRsmmy18H/1vb6RCkQm/y8MwIvr4xdkr/\njgKHH1lYo6CqslFU7h1p4VCIpaV9BBY9NFA77uGaJPT2BlMzUaw+13zvu+ArqjZC\nH6HVtE0dt8YbUYqpPM9zPIw4FYOecnpMCXkYgUmo63oZ9/R6lziI9ZcLVjqyvSz8\nDD5CXtVQXVPJ0s1StaJCDxf5H3IldJknVNV2Gq2PHzBKEI7H1KjYPGi+2nyT8ab0\nDm2PquUM/nyR51jph649a30FnK3hXs6kXXwduGl3pafLWpRlLApa5W2TTrxFUe7V\njF50elzCcJYV4udO3Oz5clSPPsDXpOG8ZBu31HRCrQXikMsvdAEGBVluO3Aqnfo=\n=0yiQ\n-----END PGP SIGNATURE-----",
        "payload": "tree c8a023f61797b8a595ec256f6c20c2e014d46a60\nparent d7615af34e8e19920ed12bfdafb09e0e4b57c7c5\nparent eeeebdd3cba1e69835f826236f7d71ee8d76ace4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475636799 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475636839 +0200\n\nMerge #8879: [doc] Rework docs\n\neeeebdd [doc] Rework docs (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5"
      },
      {
        "sha": "eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eeeebdd3cba1e69835f826236f7d71ee8d76ace4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eeeebdd3cba1e69835f826236f7d71ee8d76ace4"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 24,
      "deletions": 55
    },
    "files": [
      {
        "sha": "e4fa49614ac8c56baad4b43fa104b3f956054754",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "patch": "@@ -3,7 +3,9 @@ Bitcoin Core 0.13.99\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+Bitcoin Core is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n+\n+To download Bitcoin Core, visit [bitcoincore.org](https://bitcoincore.org/en/releases/).\n \n Running\n ---------------------\n@@ -46,13 +48,13 @@ Development\n The Bitcoin repo's [root README](/README.md) contains relevant information on the development process and automated testing.\n \n - [Developer Notes](developer-notes.md)\n-- [Multiwallet Qt Development](multiwallet-qt.md)\n - [Release Notes](release-notes.md)\n - [Release Process](release-process.md)\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n - [Unit Tests](unit-tests.md)\n+- [Travis CI](travis-ci.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)\n - [BIPS](bips.md)\n@@ -67,11 +69,13 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n ### Miscellaneous\n - [Assets Attribution](assets-attribution.md)\n - [Files](files.md)\n+- [Reduce Traffic](reduce-traffic.md)\n - [Tor Support](tor.md)\n - [Init Scripts (systemd/upstart/openrc)](init.md)\n+- [ZMQ](zmq.md)\n \n License\n ---------------------\n-Distributed under the [MIT software license](http://www.opensource.org/licenses/mit-license.php).\n+Distributed under the [MIT software license](/COPYING).\n This product includes software developed by the OpenSSL Project for use in the [OpenSSL Toolkit](https://www.openssl.org/). This product includes\n cryptographic software written by Eric Young ([eay@cryptsoft.com](mailto:eay@cryptsoft.com)), and UPnP software written by Thomas Bernard."
      },
      {
        "sha": "3caab818076b88f54e1da3d9cd25a809b9352ca9",
        "filename": "doc/multiwallet-qt.md",
        "status": "removed",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5/doc/multiwallet-qt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5/doc/multiwallet-qt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiwallet-qt.md?ref=d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "patch": "@@ -1,48 +0,0 @@\n-Multiwallet Qt Development and Integration Strategy\n-===================================================\n-\n-In order to support loading of multiple wallets in bitcoin-qt, a few changes in the UI architecture will be needed.\n-Fortunately, only four of the files in the existing project are affected by this change.\n-\n-Two new classes have been implemented in two new .h/.cpp file pairs, with much of the functionality that was previously\n-implemented in the BitcoinGUI class moved over to these new classes.\n-\n-The two existing files most affected, by far, are bitcoingui.h and bitcoingui.cpp, as the BitcoinGUI class will require\n-some major retrofitting.\n-\n-Only requiring some minor changes is bitcoin.cpp.\n-\n-Finally, two new headers and source files will have to be added to bitcoin-qt.pro.\n-\n-Changes to class BitcoinGUI\n----------------------------\n-The principal change to the BitcoinGUI class concerns the QStackedWidget instance called centralWidget.\n-This widget owns five page views: overviewPage, transactionsPage, addressBookPage, receiveCoinsPage, and sendCoinsPage.\n-\n-A new class called *WalletView* inheriting from QStackedWidget has been written to handle all renderings and updates of\n-these page views. In addition to owning these five page views, a WalletView also has a pointer to a WalletModel instance.\n-This allows the construction of multiple WalletView objects, each rendering a distinct wallet.\n-\n-A second class called *WalletFrame* inheriting from QFrame has been written as a container for embedding all wallet-related\n-controls into BitcoinGUI. At present it contains the WalletView instances for the wallets and does little more than passing on messages\n-from BitcoinGUI to the currently selected WalletView. It is a WalletFrame instance\n-that takes the place of what used to be centralWidget in BitcoinGUI. The purpose of this class is to allow future\n-refinements of the wallet controls with minimal need for further modifications to BitcoinGUI, thus greatly simplifying\n-merges while reducing the risk of breaking top-level stuff.\n-\n-Changes to bitcoin.cpp\n-----------------------\n-bitcoin.cpp is the entry point into bitcoin-qt, and as such, will require some minor modifications to provide hooks for\n-multiple wallet support. Most importantly will be the way it instantiates WalletModels and passes them to the\n-singleton BitcoinGUI instance called window. Formerly, BitcoinGUI kept a pointer to a single instance of a WalletModel.\n-The initial change required is very simple: rather than calling `window.setWalletModel(&walletModel);` we perform the\n-following two steps:\n-\n-\twindow.addWallet(\"~Default\", &walletModel);\n-\twindow.setCurrentWallet(\"~Default\");\n-\n-The string parameter is just an arbitrary name given to the default wallet. It's been prepended with a tilde to avoid name collisions in the future with additional wallets.\n-\n-The shutdown call `window.setWalletModel(0)` has also been removed. In its place is now:\n-\n-window.removeAllWallets();"
      },
      {
        "sha": "f9bf3d75de09db045a308d3223aa2b89d33a1989",
        "filename": "doc/release-notes/release-notes-0.13.0.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/release-notes/release-notes-0.13.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/release-notes/release-notes-0.13.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.0.md?ref=f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "patch": "@@ -643,7 +643,7 @@ git merge commit are mentioned.\n - #8041 `5b736dd` Fix bip9-softforks blockstore issue (MarcoFalke)\n - #7994 `1f01443` Add op csv tests to script_tests.json (Christewart)\n - #8038 `e2bf830` Various minor fixes (MarcoFalke)\n-- #8072 `1b87e5b` Travis: 'make check' in parallel and verbose (MarcoFalke)\n+- #8072 `1b87e5b` Travis: 'make check' in parallel and verbose (theuni)\n - #8056 `8844ef1` Remove hardcoded \"4 nodes\" from test_framework (MarcoFalke)\n - #8047 `37f9a1f` Test_framework: Set wait-timeout for bitcoind procs (MarcoFalke)\n - #8095 `6700cc9` Test framework: only cleanup on successful test runs (sdaftuar)"
      },
      {
        "sha": "63f75fb3992a2235068a9eb0b13e5d64f53b5eb7",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "patch": "@@ -16,6 +16,7 @@ Before every minor and major release:\n Before every major release:\n \n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n+* Update [`BLOCK_CHAIN_SIZE`](/src/qt/intro.cpp) to the current size plus some overhead.\n \n ### First time / New builders\n "
      },
      {
        "sha": "38085cec353ad321fec081e69769708a64244bde",
        "filename": "doc/travis-ci.md",
        "status": "renamed",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/travis-ci.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/doc/travis-ci.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/travis-ci.md?ref=f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "patch": "@@ -1,13 +1,16 @@\n+Travis CI\n+=========\n+\n Support for using travis-ci has been added in order to automate pull-testing.\n-See https://travis-ci.org/ for more info\n+See [travis-ci.org](https://travis-ci.org/) for more info\n \n This procedure is different than the pull-tester that came before it in a few\n ways.\n \n There is nothing to administer. This is a major feature as it means\n that builds have no local state. Because there is no ability to login to the\n builders to install packages (tools, dependencies, etc), the entire build\n-procedure must instead be controlled by a declarative script (.travis.yml).\n+procedure must instead be controlled by a declarative script `.travis.yml`.\n This script declares each build configuration, creates virtual machines as\n necessary, builds, then discards the virtual machines.\n \n@@ -16,7 +19,7 @@ than a single pass/fail. This helps to catch build failures and logic errors\n that present on platforms other than the ones the author has tested. This\n matrix is defined in the build script and can be changed at any time.\n \n-All builders use the dependency-generator in the depends dir, rather than\n+All builders use the dependency-generator in the [depends dir](/depends), rather than\n using apt-get to install build dependencies. This guarantees that the tester\n is using the same versions as Gitian, so the build results are nearly identical\n to what would be found in a final release. However, this also means that builds",
        "previous_filename": "doc/travis-ci.txt"
      },
      {
        "sha": "af767aa6c62c01072f5684892c4da138ab6f9f76",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "patch": "@@ -74,6 +74,8 @@ const std::string BitcoinGUI::DEFAULT_UIPLATFORM =\n #endif\n         ;\n \n+/** Display name for default wallet name. Uses tilde to avoid name\n+ * collisions in the future with additional wallets */\n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n \n BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *networkStyle, QWidget *parent) :"
      },
      {
        "sha": "7bc6412910393e11ffda75919c7ec7978421cfff",
        "filename": "src/qt/walletframe.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/src/qt/walletframe.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f92805025d5b59b7fdb5a076bbe076e5cc5447e2/src/qt/walletframe.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.h?ref=f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "patch": "@@ -19,6 +19,13 @@ QT_BEGIN_NAMESPACE\n class QStackedWidget;\n QT_END_NAMESPACE\n \n+/**\n+ * A container for embedding all wallet-related\n+ * controls into BitcoinGUI. The purpose of this class is to allow future\n+ * refinements of the wallet controls with minimal need for further\n+ * modifications to BitcoinGUI, thus greatly simplifying merges while\n+ * reducing the risk of breaking top-level stuff.\n+ */\n class WalletFrame : public QFrame\n {\n     Q_OBJECT"
      }
    ]
  },
  {
    "sha": "f2e939bdbceef1ee90d59fab9ab99b944b44bce1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmU5MzliZGJjZWVmMWVlOTBkNTlmYWI5YWI5OWI5NDRiNDRiY2Ux",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-05T04:59:44Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-05T04:59:44Z"
      },
      "message": "[Doc] Update Doxygen configuration file",
      "tree": {
        "sha": "d70cab4c6436937db59bfed20c5dee4cfb9c144a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d70cab4c6436937db59bfed20c5dee4cfb9c144a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2e939bdbceef1ee90d59fab9ab99b944b44bce1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJX9IjAAAoJEC7rn1zAlSbBiZ4P/3hJ9K9uwv46DMTE635uVGIu\nnXHobV9KZoiV7BQ/KEBb6fUbdRN7XPvzGPz0tPI5rMmqEL6OH9K5HiMiuP2Pnrh/\nfu/wWGCFEfXbOwhQY6HCY6KKaTApd5SkRcu7LBl/EL53j1Uzr8TwI78L5FzJ+Yb4\nJKpzJ1N8djDpynKW+1kA46T6D/x+THaHkJgDMMpWxziuSppw6ISFXFmjeGdENeWZ\nM37xVF5LLzhUpux9TQfbxDtxIXOk6QPzk0u2xeK2clg1hAZpemZ9tQlCmduHMFry\njeI+wqOVCcoKzrRSGJISNN//bUwbabfQ05AsIYyR9hAn6xS1OMKqhKy+mkRpzReE\n9ItQivhO/SxpYEgTInnY8yZheT267xko5dHchaVg7fdcQPbNGB+ajpa7phlnijxq\napCbzzdsI5cnn+xJ0XUHEGekn2PMlpR3SDfP6VW9/AT3vjKd4soXpwemRRWYtA6V\nNIv+vYtbzruuPqw/dK5LEdduqR9vnW5IeqtSxrylDgRYNeNaCN2D2CTnQcVet558\nf0rOxB+qQxScQVTbHb3AAGsX3clI7hnbBMcL7V7dIQoYI81gmYCJ4vVWyMF60Fo2\nYSk/Ryl5ZZQPcJCzqwysB6gJviPy5RfSZfgFe/0PtDNte5pUsIDx9TiHRZKevKHm\nfpIZSSfAjBXkhcRtlQjh\n=dtqn\n-----END PGP SIGNATURE-----",
        "payload": "tree d70cab4c6436937db59bfed20c5dee4cfb9c144a\nparent f92805025d5b59b7fdb5a076bbe076e5cc5447e2\nauthor fanquake <fanquake@gmail.com> 1475643584 +0800\ncommitter fanquake <fanquake@gmail.com> 1475643584 +0800\n\n[Doc] Update Doxygen configuration file\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e939bdbceef1ee90d59fab9ab99b944b44bce1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e939bdbceef1ee90d59fab9ab99b944b44bce1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e939bdbceef1ee90d59fab9ab99b944b44bce1/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f92805025d5b59b7fdb5a076bbe076e5cc5447e2"
      }
    ],
    "stats": {
      "total": 2746,
      "additions": 1727,
      "deletions": 1019
    },
    "files": [
      {
        "sha": "a0cbf7139a42c3e00a9cdc14a80c28d903656fb8",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1727,
        "deletions": 1019,
        "changes": 2746,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2e939bdbceef1ee90d59fab9ab99b944b44bce1/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2e939bdbceef1ee90d59fab9ab99b944b44bce1/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=f2e939bdbceef1ee90d59fab9ab99b944b44bce1"
      }
    ]
  },
  {
    "sha": "1df311118d79c04df1d41e044b19444cfda015da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGYzMTExMThkNzljMDRkZjFkNDFlMDQ0YjE5NDQ0Y2ZkYTAxNWRh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-04T15:55:12Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-05T11:32:20Z"
      },
      "message": "protocol.h: Make enums in GetDataMsg concrete values\n\nThis concretizes the numbers and adds a comment to make it clear that\nthese numbers are fixed by the protocol, and may avoid people forgetting\nto claim numbers in the future (e.g. issue #8500).\n\nAlso gets rid of a weird unused `MSG_TYPE_MAX` in the middle of the\nenumeration (thanks @paveljanik for noticing).",
      "tree": {
        "sha": "1c9c03183975fc78c8d59afdb5eac3c5613ab6b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c9c03183975fc78c8d59afdb5eac3c5613ab6b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1df311118d79c04df1d41e044b19444cfda015da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1df311118d79c04df1d41e044b19444cfda015da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1df311118d79c04df1d41e044b19444cfda015da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1df311118d79c04df1d41e044b19444cfda015da/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c09a5209ab00573a2422e1e65c437a6e2f59624",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c09a5209ab00573a2422e1e65c437a6e2f59624",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c09a5209ab00573a2422e1e65c437a6e2f59624"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 12,
      "deletions": 8
    },
    "files": [
      {
        "sha": "d19e0d3a5e24e59fd7d66019a5ebba70a5b7b52b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1df311118d79c04df1d41e044b19444cfda015da/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1df311118d79c04df1d41e044b19444cfda015da/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=1df311118d79c04df1d41e044b19444cfda015da",
        "patch": "@@ -312,20 +312,24 @@ class CAddress : public CService\n     unsigned int nTime;\n };\n \n-/** getdata message types */\n+/** getdata message type flags */\n const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n+\n+/** getdata / inv message types.\n+ * These numbers are defined by the protocol. When adding a new value, be sure\n+ * to mention it in the respective BIP.\n+ */\n enum GetDataMsg\n {\n     UNDEFINED = 0,\n-    MSG_TX,\n-    MSG_BLOCK,\n-    MSG_TYPE_MAX = MSG_BLOCK,\n+    MSG_TX = 1,\n+    MSG_BLOCK = 2,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n-    MSG_FILTERED_BLOCK,\n-    MSG_CMPCT_BLOCK,\n-    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n-    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n+    MSG_FILTERED_BLOCK = 3,  //!< Defined in BIP37\n+    MSG_CMPCT_BLOCK = 4,     //!< Defined in BIP152\n+    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, //!< Defined in BIP144\n+    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       //!< Defined in BIP144\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,\n };\n "
      }
    ]
  },
  {
    "sha": "223f4c2dd5fa287f4c208d188a473dceea844256",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjNmNGMyZGQ1ZmEyODdmNGMyMDhkMTg4YTQ3M2RjZWVhODQ0MjU2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-05T12:42:09Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-05T12:44:07Z"
      },
      "message": "Merge #8884: Bugfix: Trivial: RPC: getblockchaininfo help: pruneheight is the lowest, not highest, block\n\na78e542 Bugfix: Trivial: RPC: getblockchaininfo help: pruneheight is the lowest, not highest, block (Luke Dashjr)",
      "tree": {
        "sha": "2ebc15145c19464a3762c70595ee5a91b492362a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ebc15145c19464a3762c70595ee5a91b492362a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/223f4c2dd5fa287f4c208d188a473dceea844256",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX9PWXAAoJEHSBCwEjRsmmmroH/izQNAczNgnBhXxvcFBb+eaO\nwGkPdOItc1Bwa4Og9FkqH9szU+dGNOrLL2DeXaIYC8gaVrdfZvOs+imzleQE8teL\n7/jJU33AXKxYKdt+joBtCR5Z9xTmgVfn8wpe2MoMofiMSpLokjfHNXLcUtif31rA\nuvvL7sd/ayBpHNGosR8ofso9pIiT8x82ag7jLfb/NR/0dJX3C/n5ejbVKsl7MUZ1\noW4kGTW8SGB1TYfimIc1jB+mBnvTltg37ttR9MCJhl6mf+DOVxzFORHFGTcS4U/x\nEjBcmmCc768uFWtcXQ2ZPGASm6T6N9bTwl90YzsKeBB0cdxuqnGIoj/EbEoUGUI=\n=Sxfp\n-----END PGP SIGNATURE-----",
        "payload": "tree 2ebc15145c19464a3762c70595ee5a91b492362a\nparent f92805025d5b59b7fdb5a076bbe076e5cc5447e2\nparent a78e5428acb862bfb47e6faff39f4889f5c73269\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475671329 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1475671447 +0200\n\nMerge #8884: Bugfix: Trivial: RPC: getblockchaininfo help: pruneheight is the lowest, not highest, block\n\na78e542 Bugfix: Trivial: RPC: getblockchaininfo help: pruneheight is the lowest, not highest, block (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223f4c2dd5fa287f4c208d188a473dceea844256",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/223f4c2dd5fa287f4c208d188a473dceea844256",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223f4c2dd5fa287f4c208d188a473dceea844256/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f92805025d5b59b7fdb5a076bbe076e5cc5447e2"
      },
      {
        "sha": "a78e5428acb862bfb47e6faff39f4889f5c73269",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a78e5428acb862bfb47e6faff39f4889f5c73269",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a78e5428acb862bfb47e6faff39f4889f5c73269"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1e04fcc01c32182e9790249d1a1dfa598baf77c3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223f4c2dd5fa287f4c208d188a473dceea844256/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223f4c2dd5fa287f4c208d188a473dceea844256/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=223f4c2dd5fa287f4c208d188a473dceea844256",
        "patch": "@@ -1038,7 +1038,7 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n             \"  \\\"chainwork\\\": \\\"xxxx\\\"     (string) total amount of work in active chain, in hexadecimal\\n\"\n             \"  \\\"pruned\\\": xx,             (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) heighest block available\\n\"\n+            \"  \\\"pruneheight\\\": xxxxxx,    (numeric) lowest-height complete block stored\\n\"\n             \"  \\\"softforks\\\": [            (array) status of softforks in progress\\n\"\n             \"     {\\n\"\n             \"        \\\"id\\\": \\\"xxxx\\\",        (string) name of softfork\\n\""
      }
    ]
  },
  {
    "sha": "d51f18246165b580761af824f1bb4a49b6908f28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTFmMTgyNDYxNjViNTgwNzYxYWY4MjRmMWJiNGE0OWI2OTA4ZjI4",
    "commit": {
      "author": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-09-26T21:01:10Z"
      },
      "committer": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-10-05T12:58:18Z"
      },
      "message": "Don't return the address of a P2SH of a P2SH.",
      "tree": {
        "sha": "1c8177c8654cfd02f5a4edc5e60fa9bd9d2a1ffe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c8177c8654cfd02f5a4edc5e60fa9bd9d2a1ffe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d51f18246165b580761af824f1bb4a49b6908f28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d51f18246165b580761af824f1bb4a49b6908f28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d51f18246165b580761af824f1bb4a49b6908f28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d51f18246165b580761af824f1bb4a49b6908f28/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76f3c02fb01a6df98fbd8c16ac21d159d4649d37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76f3c02fb01a6df98fbd8c16ac21d159d4649d37"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e48fe256519bdbdedc69d9e25607266a1de15c0a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d51f18246165b580761af824f1bb4a49b6908f28/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d51f18246165b580761af824f1bb4a49b6908f28/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=d51f18246165b580761af824f1bb4a49b6908f28",
        "patch": "@@ -535,7 +535,7 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n             \"     \\\"address\\\"     (string) bitcoin address\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"p2sh\\\",\\\"address\\\" (string) script address\\n\"\n+            \"  \\\"p2sh\\\",\\\"address\\\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n@@ -554,7 +554,15 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n     }\n     ScriptPubKeyToJSON(script, r, false);\n \n-    r.push_back(Pair(\"p2sh\", CBitcoinAddress(CScriptID(script)).ToString()));\n+    UniValue type;\n+    type = find_value(r, \"type\");\n+\n+    if (type.isStr() && type.get_str() != \"scripthash\") {\n+        // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n+        // don't return the address for a P2SH of the P2SH.\n+        r.push_back(Pair(\"p2sh\", CBitcoinAddress(CScriptID(script)).ToString()));\n+    }\n+\n     return r;\n }\n "
      }
    ]
  },
  {
    "sha": "4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDA4NTU4ODQzYzZjMmI3YWJlYjQxNjBmNjQxZGZkYmY1YmU1ZWI0",
    "commit": {
      "author": {
        "name": "jonnynewbs",
        "email": "jonnynewbs@gmail.com",
        "date": "2016-09-21T14:52:53Z"
      },
      "committer": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-10-05T13:00:34Z"
      },
      "message": "Update bitcoin-tx to output witness data.",
      "tree": {
        "sha": "f2619b1603e2ae5b81d314ee1cda3eaed6b0a114",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2619b1603e2ae5b81d314ee1cda3eaed6b0a114"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea01ddc10d81a6c58f72ed93bb2742425cb932c1",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -151,11 +151,13 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n     entry.pushKV(\"version\", tx.nVersion);\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n \n     UniValue vin(UniValue::VARR);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n             in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n@@ -166,6 +168,13 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n             o.pushKV(\"asm\", ScriptToAsmStr(txin.scriptSig, true));\n             o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n             in.pushKV(\"scriptSig\", o);\n+            if (!tx.wit.IsNull() && i < tx.wit.vtxinwit.size() && !tx.wit.vtxinwit[i].IsNull()) {\n+                UniValue txinwitness(UniValue::VARR);\n+                for (const auto& item : tx.wit.vtxinwit[i].scriptWitness.stack) {\n+                    txinwitness.push_back(HexStr(item.begin(), item.end()));\n+                }\n+                in.pushKV(\"txinwitness\", txinwitness);\n+            }\n         }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n         vin.push_back(in);"
      },
      {
        "sha": "51c25a5a98c5965df194fa22b049f6be5863d48a",
        "filename": "src/test/data/blanktx.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/blanktx.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/blanktx.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/blanktx.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"d21633ba23f70118185227be58a63527675641ad37967e2aa461559f577aec43\",\n+    \"hash\": \"d21633ba23f70118185227be58a63527675641ad37967e2aa461559f577aec43\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "712a2c27f8faed7358a36202771fce1999d1bfee",
        "filename": "src/test/data/tt-delin1-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/tt-delin1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/tt-delin1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-delin1-out.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"81b2035be1da1abe745c6141174a73d151009ec17b3d5ebffa2e177408c50dfd\",\n+    \"hash\": \"81b2035be1da1abe745c6141174a73d151009ec17b3d5ebffa2e177408c50dfd\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "afc4e95762d4a9dcc72785e24c8602f552abc5cc",
        "filename": "src/test/data/tt-delout1-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/tt-delout1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/tt-delout1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-delout1-out.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"c46ccd75b5050e942b2e86a3648f843f525fe6fc000bf0534ba5973063354493\",\n+    \"hash\": \"c46ccd75b5050e942b2e86a3648f843f525fe6fc000bf0534ba5973063354493\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "2b9075f8acece0136da5a9bdb2b0bcc58f29fe1b",
        "filename": "src/test/data/tt-locktime317000-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/tt-locktime317000-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/tt-locktime317000-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-locktime317000-out.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"aded538f642c17e15f4d3306b8be7e1a4d1ae0c4616d641ab51ea09ba65e5cb5\",\n+    \"hash\": \"aded538f642c17e15f4d3306b8be7e1a4d1ae0c4616d641ab51ea09ba65e5cb5\",\n     \"version\": 1,\n     \"locktime\": 317000,\n     \"vin\": ["
      },
      {
        "sha": "567e8026a321cd894b5d7f8d22c1155f9efa1797",
        "filename": "src/test/data/txcreate1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreate1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreate1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate1.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"f70f0d6c71416ed538e37549f430ab3665fee2437a42f10238c1bd490e782231\",\n+    \"hash\": \"f70f0d6c71416ed538e37549f430ab3665fee2437a42f10238c1bd490e782231\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "a70c1d302a28d06823c1908e812a55b2b801d673",
        "filename": "src/test/data/txcreate2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreate2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreate2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate2.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"cf90229625e9eb10f6be8156bf6aa5ec2eca19a42b1e05c11f3029b560a32e13\",\n+    \"hash\": \"cf90229625e9eb10f6be8156bf6aa5ec2eca19a42b1e05c11f3029b560a32e13\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "760518d30a983fb459a14b42f3ea1755b9563659",
        "filename": "src/test/data/txcreatedata1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata1.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"07894b4d12fe7853dd911402db1620920d261b9627c447f931417d330c25f06e\",\n+    \"hash\": \"07894b4d12fe7853dd911402db1620920d261b9627c447f931417d330c25f06e\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "56dfe4a1b055a99118762a417f36fee507315d45",
        "filename": "src/test/data/txcreatedata2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata2.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"4ed17118f5e932ba8c75c461787d171bc02a016d8557cb5bcf34cd416c27bb8b\",\n+    \"hash\": \"4ed17118f5e932ba8c75c461787d171bc02a016d8557cb5bcf34cd416c27bb8b\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "9bc0ed459360920bdda25b58c93bcde7f4beddd9",
        "filename": "src/test/data/txcreatedata_seq0.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata_seq0.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata_seq0.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata_seq0.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"71603ccb1cd76d73d76eb6cfd5f0b9df6d65d90d76860ee52cb461c4be7032e8\",\n+    \"hash\": \"71603ccb1cd76d73d76eb6cfd5f0b9df6d65d90d76860ee52cb461c4be7032e8\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "d323255418d04843ed7201fc12a71ae1c5c9d5dd",
        "filename": "src/test/data/txcreatedata_seq1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata_seq1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatedata_seq1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata_seq1.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"c4dea671b0d7b48f8ab10bc46650e8329d3c5766931f548f513847a19f5ba75b\",\n+    \"hash\": \"c4dea671b0d7b48f8ab10bc46650e8329d3c5766931f548f513847a19f5ba75b\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "ff39e71b40c0d68a55a4aba988e5ef95a332ee29",
        "filename": "src/test/data/txcreatesign.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatesign.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4408558843c6c2b7abeb4160f641dfdbf5be5eb4/src/test/data/txcreatesign.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatesign.json?ref=4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n+    \"hash\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      }
    ]
  },
  {
    "sha": "621441a7a72ec0b17594a24a2c5fedcac0c605f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MjE0NDFhN2E3MmVjMGIxNzU5NGEyNGEyYzVmZWRjYWMwYzYwNWY2",
    "commit": {
      "author": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-10-04T17:02:06Z"
      },
      "committer": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-10-05T13:16:08Z"
      },
      "message": "add verbose mode to bitcoin-util-test.py",
      "tree": {
        "sha": "7c38dba898de10794da98809e87c5dd3ac120544",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7c38dba898de10794da98809e87c5dd3ac120544"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/621441a7a72ec0b17594a24a2c5fedcac0c605f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/621441a7a72ec0b17594a24a2c5fedcac0c605f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/621441a7a72ec0b17594a24a2c5fedcac0c605f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/621441a7a72ec0b17594a24a2c5fedcac0c605f6/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 65,
      "deletions": 30
    },
    "files": [
      {
        "sha": "d801415c70f19d05bb955181b0f3f2dc089318e2",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621441a7a72ec0b17594a24a2c5fedcac0c605f6/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621441a7a72ec0b17594a24a2c5fedcac0c605f6/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=621441a7a72ec0b17594a24a2c5fedcac0c605f6",
        "patch": "@@ -45,13 +45,17 @@ def bctest(testDir, testObj, exeext):\n \t\tprint(\"Return code mismatch for \" + outputFn)\n \t\tsys.exit(1)\n \n-def bctester(testDir, input_basename, buildenv):\n+def bctester(testDir, input_basename, buildenv, verbose = False):\n \tinput_filename = testDir + \"/\" + input_basename\n \traw_data = open(input_filename).read()\n \tinput_data = json.loads(raw_data)\n \n \tfor testObj in input_data:\n+\t\tif verbose and \"description\" in testObj:\n+\t\t\tprint (\"Testing: \" + testObj[\"description\"])\n \t\tbctest(testDir, testObj, buildenv.exeext)\n+\t\tif verbose and \"description\" in testObj:\n+\t\t\tprint (\"PASS\")\n \n \tsys.exit(0)\n "
      },
      {
        "sha": "3099506d6d784cca66b47ac98432b950b0c6d706",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621441a7a72ec0b17594a24a2c5fedcac0c605f6/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621441a7a72ec0b17594a24a2c5fedcac0c605f6/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=621441a7a72ec0b17594a24a2c5fedcac0c605f6",
        "patch": "@@ -19,11 +19,14 @@\n \n \n if __name__ == '__main__':\n+    verbose = False\n     try:\n         srcdir = os.environ[\"srcdir\"]\n     except:\n         parser = argparse.ArgumentParser(description=help_text)\n         parser.add_argument('-s', '--srcdir')\n+        parser.add_argument('-v', '--verbose', action='store_true')\n         args = parser.parse_args()\n         srcdir = args.srcdir\n-    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv)\n+        verbose = args.verbose\n+    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv, verbose = verbose)"
      },
      {
        "sha": "de95044597b1df1372bf1319074c1b4a6df8ada9",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 56,
        "deletions": 28,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/621441a7a72ec0b17594a24a2c5fedcac0c605f6/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/621441a7a72ec0b17594a24a2c5fedcac0c605f6/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=621441a7a72ec0b17594a24a2c5fedcac0c605f6",
        "patch": "@@ -1,61 +1,73 @@\n [\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-create\"],\n-    \"output_cmp\": \"blanktx.hex\"\n+    \"output_cmp\": \"blanktx.hex\",\n+    \"description\": \"Creates a blank transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\",\"-create\"],\n-    \"output_cmp\": \"blanktx.json\"\n+    \"output_cmp\": \"blanktx.json\",\n+    \"description\": \"Creates a blank transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\"],\n     \"input\": \"blanktx.hex\",\n-    \"output_cmp\": \"blanktx.hex\"\n+    \"output_cmp\": \"blanktx.hex\",\n+    \"description\": \"Creates a blank transaction when nothing is piped into bitcoin-tx\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\",\"-\"],\n     \"input\": \"blanktx.hex\",\n-    \"output_cmp\": \"blanktx.json\"\n+    \"output_cmp\": \"blanktx.json\",\n+    \"description\": \"Creates a blank transaction when nothing is piped into bitcoin-tx (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delin=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delin1-out.hex\"\n+    \"output_cmp\": \"tt-delin1-out.hex\",\n+    \"description\": \"Deletes a single input from a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-\", \"delin=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delin1-out.json\"\n+    \"output_cmp\": \"tt-delin1-out.json\",\n+    \"description\": \"Deletes a single input from a transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delin=31\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to delete an input with a bad index from a transaction. Expected to fail.\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delout=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delout1-out.hex\"\n+    \"output_cmp\": \"tt-delout1-out.hex\",\n+    \"description\": \"Deletes a single output from a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-\", \"delout=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delout1-out.json\"\n+    \"output_cmp\": \"tt-delout1-out.json\",\n+    \"description\": \"Deletes a single output from a transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delout=2\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to delete an output with a bad index from a transaction. Expected to fail.\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"locktime=317000\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-locktime317000-out.hex\"\n+    \"output_cmp\": \"tt-locktime317000-out.hex\",\n+    \"description\": \"Adds an nlocktime to a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-\", \"locktime=317000\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-locktime317000-out.json\"\n+    \"output_cmp\": \"tt-locktime317000-out.json\",\n+    \"description\": \"Adds an nlocktime to a transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -65,7 +77,8 @@\n      \"in=22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc:1\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outaddr=4:1P8yWvZW8jVihP1bzHeqfE4aoXNX8AVa46\"],\n-    \"output_cmp\": \"txcreate1.hex\"\n+    \"output_cmp\": \"txcreate1.hex\",\n+    \"description\": \"Creates a new transaction with three inputs and two outputs\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -76,15 +89,18 @@\n      \"in=22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc:1\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outaddr=4:1P8yWvZW8jVihP1bzHeqfE4aoXNX8AVa46\"],\n-    \"output_cmp\": \"txcreate1.json\"\n+    \"output_cmp\": \"txcreate1.json\",\n+    \"description\": \"Creates a new transaction with three inputs and two outputs (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-create\", \"outscript=0:\"],\n-    \"output_cmp\": \"txcreate2.hex\"\n+    \"output_cmp\": \"txcreate2.hex\",\n+    \"description\": \"Creates a new transaction with a single empty output script\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-create\", \"outscript=0:\"],\n-    \"output_cmp\": \"txcreate2.json\"\n+    \"output_cmp\": \"txcreate2.json\",\n+    \"description\": \"Creates a new transaction with a single empty output script (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -94,7 +110,8 @@\n      \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n-    \"output_cmp\": \"txcreatesign.hex\"\n+    \"output_cmp\": \"txcreatesign.hex\",\n+    \"description\": \"Creates a new transaction with a single input and a single output, and then signs the transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -105,29 +122,33 @@\n      \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n-    \"output_cmp\": \"txcreatesign.json\"\n+    \"output_cmp\": \"txcreatesign.json\",\n+    \"description\": \"Creates a new transaction with a single input and a single output, and then signs the transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outdata=4:badhexdata\"],\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to create a new transaction with one input and an output with malformed hex data. Expected to fail\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outdata=badhexdata\"],\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to create a new transaction with one input and an output with no value and malformed hex data. Expected to fail\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=4:54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata1.hex\"\n+    \"output_cmp\": \"txcreatedata1.hex\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data output\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -136,15 +157,17 @@\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=4:54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata1.json\"\n+    \"output_cmp\": \"txcreatedata1.json\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data output (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata2.hex\"\n+    \"output_cmp\": \"txcreatedata2.hex\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data (zero value) output\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -153,34 +176,39 @@\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata2.json\"\n+    \"output_cmp\": \"txcreatedata2.json\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data (zero value) output (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:4294967293\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"],\n-    \"output_cmp\": \"txcreatedata_seq0.hex\"\n+    \"output_cmp\": \"txcreatedata_seq0.hex\",\n+    \"description\": \"Creates a new transaction with one input with sequence number and one address output\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-json\",\n      \"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:4294967293\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"],\n-    \"output_cmp\": \"txcreatedata_seq0.json\"\n+    \"output_cmp\": \"txcreatedata_seq0.json\",\n+    \"description\": \"Creates a new transaction with one input with sequence number and one address output (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000fdffffff0180a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac00000000\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:1\"],\n-    \"output_cmp\": \"txcreatedata_seq1.hex\"\n+    \"output_cmp\": \"txcreatedata_seq1.hex\",\n+    \"description\": \"Adds a new input with sequence number to a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-json\",\n      \"01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000fdffffff0180a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac00000000\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:1\"],\n-    \"output_cmp\": \"txcreatedata_seq1.json\"\n+    \"output_cmp\": \"txcreatedata_seq1.json\",\n+    \"description\": \"Adds a new input with sequence number to a transaction (output in json)\"\n   }\n ]"
      }
    ]
  },
  {
    "sha": "2920be2a6994cfbffd93e72c6cf4c1ed19ac4339",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOTIwYmUyYTY5OTRjZmJmZmQ5M2U3MmM2Y2Y0YzFlZDE5YWM0MzM5",
    "commit": {
      "author": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2016-10-05T23:27:23Z"
      },
      "committer": {
        "name": "randy-waterhouse",
        "email": "kiwigb@yahoo.com",
        "date": "2016-10-05T23:27:23Z"
      },
      "message": "Update INSTALL landing redirection notice for build instructions.",
      "tree": {
        "sha": "b4336d61f9115e9b5c14311a298a4f96a9852e65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4336d61f9115e9b5c14311a298a4f96a9852e65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339/comments",
    "author": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "randy-waterhouse",
      "id": 637706,
      "node_id": "MDQ6VXNlcjYzNzcwNg==",
      "avatar_url": "https://avatars.githubusercontent.com/u/637706?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/randy-waterhouse",
      "html_url": "https://github.com/randy-waterhouse",
      "followers_url": "https://api.github.com/users/randy-waterhouse/followers",
      "following_url": "https://api.github.com/users/randy-waterhouse/following{/other_user}",
      "gists_url": "https://api.github.com/users/randy-waterhouse/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/randy-waterhouse/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/randy-waterhouse/subscriptions",
      "organizations_url": "https://api.github.com/users/randy-waterhouse/orgs",
      "repos_url": "https://api.github.com/users/randy-waterhouse/repos",
      "events_url": "https://api.github.com/users/randy-waterhouse/events{/privacy}",
      "received_events_url": "https://api.github.com/users/randy-waterhouse/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "223f4c2dd5fa287f4c208d188a473dceea844256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223f4c2dd5fa287f4c208d188a473dceea844256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/223f4c2dd5fa287f4c208d188a473dceea844256"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "07ee48427cd056dadd0cbb3c0fc889c60c01f85c",
        "filename": "INSTALL",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223f4c2dd5fa287f4c208d188a473dceea844256/INSTALL",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223f4c2dd5fa287f4c208d188a473dceea844256/INSTALL",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL?ref=223f4c2dd5fa287f4c208d188a473dceea844256",
        "patch": "@@ -1,5 +0,0 @@\n-Building Bitcoin\n-\n-See doc/build-*.md for instructions on building bitcoind,\n-the intended-for-services, no-graphical-interface, reference\n-implementation of Bitcoin.\n\\ No newline at end of file"
      },
      {
        "sha": "520a47d96078dfa80cec83d03146c9349d6369c1",
        "filename": "INSTALL.md",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL.md?ref=2920be2a6994cfbffd93e72c6cf4c1ed19ac4339",
        "patch": "@@ -0,0 +1,5 @@\n+Building Bitcoin\n+================\n+\n+See doc/build-*.md for instructions on building the various\n+elements of the Bitcoin Core reference implementation of Bitcoin."
      }
    ]
  },
  {
    "sha": "7d8afb4cde168659ec8363ff3b99611dd88557a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDhhZmI0Y2RlMTY4NjU5ZWM4MzYzZmYzYjk5NjExZGQ4ODU1N2E1",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-05T03:12:17Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2016-10-06T03:26:43Z"
      },
      "message": "[Doc] Improve GitHub issue template",
      "tree": {
        "sha": "85a36569d73c9adb8f31b061aaedbae5b492b3d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85a36569d73c9adb8f31b061aaedbae5b492b3d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d8afb4cde168659ec8363ff3b99611dd88557a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8afb4cde168659ec8363ff3b99611dd88557a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d8afb4cde168659ec8363ff3b99611dd88557a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8afb4cde168659ec8363ff3b99611dd88557a5/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d7615af34e8e19920ed12bfdafb09e0e4b57c7c5"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "acb54dd3548af32dd1af57edc9212abb88e47100",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d8afb4cde168659ec8363ff3b99611dd88557a5/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d8afb4cde168659ec8363ff3b99611dd88557a5/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=7d8afb4cde168659ec8363ff3b99611dd88557a5",
        "patch": "@@ -1,23 +1,35 @@\n <!--- Remove sections that do not apply -->\n+\n+This issue tracker is only for technical issues related to bitcoin-core.\n+\n+General bitcoin questions and/or support requests and are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+\n ### Describe the issue\n \n-### Is the issue reproducible?\n-#### List steps to reproduce below:\n-1. \n-2. \n-3. \n+### Can you reliably reproduce the issue?\n+#### If so, please list the steps to reproduce below:\n+1.\n+2.\n+3.\n \n-### Expected behavior\n+### Expected behaviour\n Tell us what should happen\n \n-### Actual behavior\n+### Actual behaviour\n Tell us what happens instead\n \n-### Any information in the debug.log file related to this issue?\n-\n-### Screenshots (if available)\n+### Screenshots.\n+If the issue is related to the GUI, screenshots can be added to this issue via drag & drop.\n \n-### What binary version was used (official or self compiled)\n+### What version of bitcoin-core are you using?\n+List the version number/commit ID, and if it is an official binary, self compiled or a distribution package such as PPA.\n \n-### Machine specs: CPU, RAM, Disk space & OS (Windows, OS X, Linux) \n+### Machine specs:\n+- OS:\n+- CPU:\n+- RAM:\n+- Disk size:\n+- Disk Type (HD/SDD):\n \n+### Any extra information that might be useful in the debugging process.\n+This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred."
      }
    ]
  },
  {
    "sha": "ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjI4ZDhhODk5YWViNDQ4N2VmN2ZiZmJmY2E5YzBmMmI2MGJkYWY2",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-05T08:47:57Z"
      },
      "committer": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2016-10-06T03:33:15Z"
      },
      "message": "[Doc] Update bips.md for Segregated Witness",
      "tree": {
        "sha": "bf9f287337c06a157b9111a54bbb3e7b0cc238d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf9f287337c06a157b9111a54bbb3e7b0cc238d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f92805025d5b59b7fdb5a076bbe076e5cc5447e2"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "040439fbcb195ba7e8a2957f259c430deaf97091",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6",
        "patch": "@@ -26,4 +26,9 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n * [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542)).\n+* [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 143`](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki): Transaction Signature Verification for Version 0 Witness Program as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 144`](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki): Segregated Witness as of **0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068))."
      }
    ]
  },
  {
    "sha": "61d191fbf953700ba8aeadc9c8cf4c195efbd10c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MWQxOTFmYmY5NTM3MDBiYThhZWFkYzljOGNmNGMxOTVlZmJkMTBj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-06T07:26:47Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-06T07:27:25Z"
      },
      "message": "Merge #8887: [Doc] Improve GitHub issue template\n\n7d8afb4 [Doc] Improve GitHub issue template (fanquake)",
      "tree": {
        "sha": "3fa53fc3585cd239891bbf5559ecd4144cb3fc8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fa53fc3585cd239891bbf5559ecd4144cb3fc8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/61d191fbf953700ba8aeadc9c8cf4c195efbd10c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJX9fzdAAoJEC1/I3LlD+E3NBgIAIY3vk9RpIIx9l5bkOBFQ/Sc\nwvS+1gH/hl2piZ474B9j4wGGcnn5YW44a0euqbP+coPecph9l2TtMd5SmfrX3WEM\nil84foXL7ZDrA3NDLViHNPZh/71mdf9iCzD1ewd82Y66xqab/OAaVLljlqrQeSwb\nXx/vJGsGYMlzcyDR7TkWGbVuCzjbnlkER1WtZGE3VVI9WzA7DXDd/5MIkFDkAKrT\n1jlRCHB1S6SIqkOd5ZwIRBx2g2i5pCnfhYF+SWKrVP/e/yOMI2BKr/rWapQ7W77m\nTnv74Y1cZCvQjusAd24Hng1e3Wgh8tJJmmHx0XS8g/GwPqms2oBimbkJ3hiF5EY=\n=L3M9\n-----END PGP SIGNATURE-----",
        "payload": "tree 3fa53fc3585cd239891bbf5559ecd4144cb3fc8d\nparent 223f4c2dd5fa287f4c208d188a473dceea844256\nparent 7d8afb4cde168659ec8363ff3b99611dd88557a5\nauthor MarcoFalke <falke.marco@gmail.com> 1475738807 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1475738845 +0200\n\nMerge #8887: [Doc] Improve GitHub issue template\n\n7d8afb4 [Doc] Improve GitHub issue template (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d191fbf953700ba8aeadc9c8cf4c195efbd10c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/61d191fbf953700ba8aeadc9c8cf4c195efbd10c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d191fbf953700ba8aeadc9c8cf4c195efbd10c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "223f4c2dd5fa287f4c208d188a473dceea844256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223f4c2dd5fa287f4c208d188a473dceea844256",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/223f4c2dd5fa287f4c208d188a473dceea844256"
      },
      {
        "sha": "7d8afb4cde168659ec8363ff3b99611dd88557a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d8afb4cde168659ec8363ff3b99611dd88557a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d8afb4cde168659ec8363ff3b99611dd88557a5"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 24,
      "deletions": 12
    },
    "files": [
      {
        "sha": "acb54dd3548af32dd1af57edc9212abb88e47100",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 24,
        "deletions": 12,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/61d191fbf953700ba8aeadc9c8cf4c195efbd10c/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/61d191fbf953700ba8aeadc9c8cf4c195efbd10c/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=61d191fbf953700ba8aeadc9c8cf4c195efbd10c",
        "patch": "@@ -1,23 +1,35 @@\n <!--- Remove sections that do not apply -->\n+\n+This issue tracker is only for technical issues related to bitcoin-core.\n+\n+General bitcoin questions and/or support requests and are best directed to the [Bitcoin StackExchange](https://bitcoin.stackexchange.com).\n+\n ### Describe the issue\n \n-### Is the issue reproducible?\n-#### List steps to reproduce below:\n-1. \n-2. \n-3. \n+### Can you reliably reproduce the issue?\n+#### If so, please list the steps to reproduce below:\n+1.\n+2.\n+3.\n \n-### Expected behavior\n+### Expected behaviour\n Tell us what should happen\n \n-### Actual behavior\n+### Actual behaviour\n Tell us what happens instead\n \n-### Any information in the debug.log file related to this issue?\n-\n-### Screenshots (if available)\n+### Screenshots.\n+If the issue is related to the GUI, screenshots can be added to this issue via drag & drop.\n \n-### What binary version was used (official or self compiled)\n+### What version of bitcoin-core are you using?\n+List the version number/commit ID, and if it is an official binary, self compiled or a distribution package such as PPA.\n \n-### Machine specs: CPU, RAM, Disk space & OS (Windows, OS X, Linux) \n+### Machine specs:\n+- OS:\n+- CPU:\n+- RAM:\n+- Disk size:\n+- Disk Type (HD/SDD):\n \n+### Any extra information that might be useful in the debugging process.\n+This is normally the contents of a `debug.log` or `config.log` file. Raw text or a link to a pastebin type site are preferred."
      }
    ]
  },
  {
    "sha": "b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTVkOTQxMWU3ZTFhYTM2ZGRhYmJhM2I5NDJmMmUxYzczNmMxYmQ5",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-10-06T18:21:11Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-10-06T18:21:11Z"
      },
      "message": "[qa] Fix race condition in sendheaders.py\n\nAlso de-duplicates code that has been moved to mininode",
      "tree": {
        "sha": "2ee99777cf59821acc804491a08cbd69d8f47076",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ee99777cf59821acc804491a08cbd69d8f47076"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6976db2f4687d575e1b4bee5aaf1d93a794f23c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6976db2f4687d575e1b4bee5aaf1d93a794f23c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6976db2f4687d575e1b4bee5aaf1d93a794f23c3"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 26,
      "deletions": 42
    },
    "files": [
      {
        "sha": "81b2442e6ae6713ca6aa7f65099460d76a0f15c3",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 26,
        "deletions": 42,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9",
        "patch": "@@ -80,30 +80,26 @@\n    Expect: disconnect.\n '''\n \n-class BaseNode(NodeConnCB):\n+direct_fetch_response_time = 0.05\n+\n+class BaseNode(SingleNodeConnCB):\n     def __init__(self):\n-        NodeConnCB.__init__(self)\n-        self.connection = None\n+        SingleNodeConnCB.__init__(self)\n         self.last_inv = None\n         self.last_headers = None\n         self.last_block = None\n-        self.ping_counter = 1\n-        self.last_pong = msg_pong(0)\n         self.last_getdata = None\n-        self.sleep_time = 0.05\n         self.block_announced = False\n         self.last_getheaders = None\n         self.disconnected = False\n+        self.last_blockhash_announced = None\n \n     def clear_last_announcement(self):\n         with mininode_lock:\n             self.block_announced = False\n             self.last_inv = None\n             self.last_headers = None\n \n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n     # Request data for a list of block hashes\n     def get_data(self, block_hashes):\n         msg = msg_getdata()\n@@ -122,17 +118,17 @@ def send_block_inv(self, blockhash):\n         msg.inv = [CInv(2, blockhash)]\n         self.connection.send_message(msg)\n \n-    # Wrapper for the NodeConn's send_message function\n-    def send_message(self, message):\n-        self.connection.send_message(message)\n-\n     def on_inv(self, conn, message):\n         self.last_inv = message\n         self.block_announced = True\n+        self.last_blockhash_announced = message.inv[-1].hash\n \n     def on_headers(self, conn, message):\n         self.last_headers = message\n-        self.block_announced = True\n+        if len(message.headers):\n+            self.block_announced = True\n+            message.headers[-1].calc_sha256()\n+            self.last_blockhash_announced = message.headers[-1].sha256\n \n     def on_block(self, conn, message):\n         self.last_block = message.block\n@@ -141,9 +137,6 @@ def on_block(self, conn, message):\n     def on_getdata(self, conn, message):\n         self.last_getdata = message\n \n-    def on_pong(self, conn, message):\n-        self.last_pong = message\n-\n     def on_getheaders(self, conn, message):\n         self.last_getheaders = message\n \n@@ -157,7 +150,7 @@ def check_last_announcement(self, headers=None, inv=None):\n         expect_headers = headers if headers != None else []\n         expect_inv = inv if inv != None else []\n         test_function = lambda: self.block_announced\n-        self.sync(test_function)\n+        assert(wait_until(test_function, timeout=60))\n         with mininode_lock:\n             self.block_announced = False\n \n@@ -180,43 +173,32 @@ def check_last_announcement(self, headers=None, inv=None):\n         return success\n \n     # Syncing helpers\n-    def sync(self, test_function, timeout=60):\n-        while timeout > 0:\n-            with mininode_lock:\n-                if test_function():\n-                    return\n-            time.sleep(self.sleep_time)\n-            timeout -= self.sleep_time\n-        raise AssertionError(\"Sync failed to complete\")\n-        \n-    def sync_with_ping(self, timeout=60):\n-        self.send_message(msg_ping(nonce=self.ping_counter))\n-        test_function = lambda: self.last_pong.nonce == self.ping_counter\n-        self.sync(test_function, timeout)\n-        self.ping_counter += 1\n-        return\n-\n     def wait_for_block(self, blockhash, timeout=60):\n         test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_getheaders(self, timeout=60):\n         test_function = lambda: self.last_getheaders != None\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_getdata(self, hash_list, timeout=60):\n         if hash_list == []:\n             return\n \n         test_function = lambda: self.last_getdata != None and [x.hash for x in self.last_getdata.inv] == hash_list\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: self.disconnected\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n+        return\n+\n+    def wait_for_block_announcement(self, block_hash, timeout=60):\n+        test_function = lambda: self.last_blockhash_announced == block_hash\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def send_header_for_blocks(self, new_blocks):\n@@ -266,7 +248,9 @@ def mine_blocks(self, count):\n     def mine_reorg(self, length):\n         self.nodes[0].generate(length) # make sure all invalidated blocks are node0's\n         sync_blocks(self.nodes, wait=0.1)\n-        [x.clear_last_announcement() for x in self.p2p_connections]\n+        for x in self.p2p_connections:\n+            x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n+            x.clear_last_announcement()\n \n         tip_height = self.nodes[1].getblockcount()\n         hash_to_invalidate = self.nodes[1].getblockhash(tip_height-(length-1))\n@@ -495,7 +479,7 @@ def run_test(self):\n \n         test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=test_node.sleep_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=direct_fetch_response_time)\n \n         [ test_node.send_message(msg_block(x)) for x in blocks ]\n \n@@ -526,13 +510,13 @@ def run_test(self):\n         # both blocks (same work as tip)\n         test_node.send_header_for_blocks(blocks[1:2])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=test_node.sleep_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=direct_fetch_response_time)\n \n         # Announcing 16 more headers should trigger direct fetch for 14 more\n         # blocks\n         test_node.send_header_for_blocks(blocks[2:18])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=test_node.sleep_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=direct_fetch_response_time)\n \n         # Announcing 1 more header should not trigger any response\n         test_node.last_getdata = None"
      }
    ]
  },
  {
    "sha": "b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmZlYzRlOWExNzUwM2ZmOGZhZTRmYmE2ZTljODc1MTEyZmI5MDcx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-08T14:43:11Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-08T14:43:15Z"
      },
      "message": "Merge #8885: gui: fix ban from qt console\n\ncb78c60 gui: fix ban from qt console (Cory Fields)",
      "tree": {
        "sha": "3121a29a5df7eeea85bd9ab69809e32617174ff5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3121a29a5df7eeea85bd9ab69809e32617174ff5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJX+QYDAAoJECnUvLZBb1PsoW0QAIkWaUiIaawOXVuhYk62twFj\niBt+bYvo/XdTrPR+Qi6QxuM3ZD3Dgvb8GIFDS2WgJPs1zmELEZUzTIwXlGN9eWJ3\ndHj86aaPYaSYd+8ehGbtTLJ/ufUQBAtcliNvtCaHIgGEtwL9F8RB67Q6Ke40n3Qi\n0YfoI7jnKeNOEmPGzzJNLmJG3+fB9EwFcmqbjyEMAoZZvq+bbH9f7OI/IA8HdeoI\nOTDtOH/ojk9n1JzYTVMICls4ShCRyZveueCZn1B9xCoQU3IBCqVD6QhYv3/Ga0O8\nCUmNtNDgk6Qxc33KqDzWKZQHSWXmZUd2nf8l7beeqJQPWndG6El0pV63LZVX3YyM\naA7vtbgLAR3qDR7h80p6PbPTXOpvZxrO0XHbEIJWp3/xRfYizAulwdHPpOuJwocP\nkBd7G53QkkWiQcPLAB4PKZ4M6zMUMc3Ltr8X3uux3U9wBGltnP7+d5Sa9MHKxc6T\nr98sy5oFQCDSkCKZUPjLrUFD/JshJxeRAPKxYd+9kxWl711qXX87YqJGEmcx14bP\nHbkpaDYT0GkO4XMW0qVws4GGbYanddK7x6/V0OosyR3vsg0IYsvzQSKRJSiW+eyq\nuQ3tRFp5+50geGKN4p7JVcx/f9hjaP+raFZ1UzMEhxLtHAi56OIBvJbVMWurvW5X\nT8NvwV9lpKi6ACCEmP+f\n=JR58\n-----END PGP SIGNATURE-----",
        "payload": "tree 3121a29a5df7eeea85bd9ab69809e32617174ff5\nparent 61d191fbf953700ba8aeadc9c8cf4c195efbd10c\nparent cb78c60534e5be205f9190cb0cde700f9e9fa38d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1475937791 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1475937795 +0200\n\nMerge #8885: gui: fix ban from qt console\n\ncb78c60 gui: fix ban from qt console (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "61d191fbf953700ba8aeadc9c8cf4c195efbd10c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/61d191fbf953700ba8aeadc9c8cf4c195efbd10c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/61d191fbf953700ba8aeadc9c8cf4c195efbd10c"
      },
      {
        "sha": "cb78c60534e5be205f9190cb0cde700f9e9fa38d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb78c60534e5be205f9190cb0cde700f9e9fa38d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb78c60534e5be205f9190cb0cde700f9e9fa38d"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 15,
      "deletions": 12
    },
    "files": [
      {
        "sha": "19dd040997ad16e04a514142fe2faf386d3f0dcc",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
        "patch": "@@ -629,6 +629,7 @@ void CNode::copyStats(CNodeStats &stats)\n {\n     stats.nodeid = this->GetId();\n     X(nServices);\n+    X(addr);\n     X(fRelayTxes);\n     X(nLastSend);\n     X(nLastRecv);"
      },
      {
        "sha": "67f0abe4be820dbee9f4f4b202ad5cc4ab5093ad",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
        "patch": "@@ -505,6 +505,7 @@ class CNodeStats\n     double dPingWait;\n     double dPingMin;\n     std::string addrLocal;\n+    CAddress addr;\n };\n \n "
      },
      {
        "sha": "b6ed75535c8d153d84611e4bdea0b5f4bbe3c88a",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
        "patch": "@@ -981,20 +981,21 @@ void RPCConsole::banSelectedNode(int bantime)\n     if (!clientModel || !g_connman)\n         return;\n \n-    // Get currently selected peer address\n-    QString strNode = GUIUtil::getEntryData(ui->peerWidget, 0, PeerTableModel::Address).toString();\n-    // Find possible nodes, ban it and clear the selected node\n-    std::string nStr = strNode.toStdString();\n-    std::string addr;\n-    int port = 0;\n-    SplitHostPort(nStr, port, addr);\n+    if(cachedNodeid == -1)\n+        return;\n \n-    CNetAddr resolved;\n-    if(!LookupHost(addr.c_str(), resolved, false))\n+    // Get currently selected peer address\n+    int detailNodeRow = clientModel->getPeerTableModel()->getRowByNodeId(cachedNodeid);\n+    if(detailNodeRow < 0)\n         return;\n-    g_connman->Ban(resolved, BanReasonManuallyAdded, bantime);\n-    clearSelectedNode();\n-    clientModel->getBanTableModel()->refresh();\n+\n+    // Find possible nodes, ban it and clear the selected node\n+    const CNodeCombinedStats *stats = clientModel->getPeerTableModel()->getNodeStats(detailNodeRow);\n+    if(stats) {\n+        g_connman->Ban(stats->nodeStats.addr, BanReasonManuallyAdded, bantime);\n+        clearSelectedNode();\n+        clientModel->getBanTableModel()->refresh();\n+    }\n }\n \n void RPCConsole::unbanSelectedNode()"
      }
    ]
  },
  {
    "sha": "f137753a2dcd8229f89d1d1ac28039364e5850b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTM3NzUzYTJkY2Q4MjI5Zjg5ZDFkMWFjMjgwMzkzNjRlNTg1MGI0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-08T19:19:45Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-08T19:20:22Z"
      },
      "message": "Merge #8896: Update INSTALL landing redirection notice for build instructions.\n\n2920be2 Update INSTALL landing redirection notice for build instructions. (randy-waterhouse)",
      "tree": {
        "sha": "a93e17baa6dfa22b1a6359c0b87b730606575f77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a93e17baa6dfa22b1a6359c0b87b730606575f77"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f137753a2dcd8229f89d1d1ac28039364e5850b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJX+Ub2AAoJEC1/I3LlD+E3RA8H/R29PXnHXW6HxRJtS98KueqC\nK4QBxzlmEYd4LUtksbwkX167sFFjPEQreUqerFeQ6R9FGs8UjbXreGkH24d18Go5\nxrZmDm7JqOl2xmWpMdoLTiv35N/W1zYUxg+rCP5ho/Mfttynby0oupRnwFqrpUpx\nVVdPGyICutGvzFG2w5GVojjL7S/dEMXf7DFYAnAn/4QzC4tcMOWYLgVhtDPDjiEd\nfHjz3b93exI5am1pcxYVnMXFLnerKcBRS4Vq3evhM7znuif/aMNafjYj4EhRUylH\n8rQKTvFlzlHxKqJwo0TVMsxKCwK7YF82DU/99lPqXfj0UUBl1H0IxHIAe2YWv30=\n=0C8R\n-----END PGP SIGNATURE-----",
        "payload": "tree a93e17baa6dfa22b1a6359c0b87b730606575f77\nparent b2fec4e9a17503ff8fae4fba6e9c875112fb9071\nparent 2920be2a6994cfbffd93e72c6cf4c1ed19ac4339\nauthor MarcoFalke <falke.marco@gmail.com> 1475954385 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1475954422 +0200\n\nMerge #8896: Update INSTALL landing redirection notice for build instructions.\n\n2920be2 Update INSTALL landing redirection notice for build instructions. (randy-waterhouse)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f137753a2dcd8229f89d1d1ac28039364e5850b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f137753a2dcd8229f89d1d1ac28039364e5850b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f137753a2dcd8229f89d1d1ac28039364e5850b4/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2fec4e9a17503ff8fae4fba6e9c875112fb9071"
      },
      {
        "sha": "2920be2a6994cfbffd93e72c6cf4c1ed19ac4339",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2920be2a6994cfbffd93e72c6cf4c1ed19ac4339"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "07ee48427cd056dadd0cbb3c0fc889c60c01f85c",
        "filename": "INSTALL",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/INSTALL",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2fec4e9a17503ff8fae4fba6e9c875112fb9071/INSTALL",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL?ref=b2fec4e9a17503ff8fae4fba6e9c875112fb9071",
        "patch": "@@ -1,5 +0,0 @@\n-Building Bitcoin\n-\n-See doc/build-*.md for instructions on building bitcoind,\n-the intended-for-services, no-graphical-interface, reference\n-implementation of Bitcoin.\n\\ No newline at end of file"
      },
      {
        "sha": "520a47d96078dfa80cec83d03146c9349d6369c1",
        "filename": "INSTALL.md",
        "status": "added",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f137753a2dcd8229f89d1d1ac28039364e5850b4/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f137753a2dcd8229f89d1d1ac28039364e5850b4/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL.md?ref=f137753a2dcd8229f89d1d1ac28039364e5850b4",
        "patch": "@@ -0,0 +1,5 @@\n+Building Bitcoin\n+================\n+\n+See doc/build-*.md for instructions on building the various\n+elements of the Bitcoin Core reference implementation of Bitcoin."
      }
    ]
  },
  {
    "sha": "e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNjZjYzFkNThlMTZiZjE2NTBkZDY0NzlmZWQ2NGVjYWNhOGM2MDk4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-08T19:22:19Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-08T19:23:42Z"
      },
      "message": "Merge #8881: Add some verbose logging to bitcoin-util-test.py\n\n621441a add verbose mode to bitcoin-util-test.py (jnewbery)",
      "tree": {
        "sha": "4839fcf0584f5549e5cd4144c0e894ee0b26fdb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4839fcf0584f5549e5cd4144c0e894ee0b26fdb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJX+Ue+AAoJEC1/I3LlD+E3hBwH/1ighnZRHXw3eMr1V8BEd/V/\nGpPLMiqOWG22NkGRCv4Xu6ZaXqjf4qABwWcQsZo2oL3Lz2ndMFKmR0dSPrOEMdnT\nay71+eTrNdg8lGfH1qh0oimK5LivFW/UhjKpd+xe2YYK1ksHS8PaiaBOTsaoqQbV\nuL2rUToPHxBU5EuCOPZnZJ8ePPv/jO9QZtPQIurvitv6/RF1kSz3bfNKGmBMSpyX\nFfyDzuzGgWvWKmk5mOyE1F3P6ORn8XM8NKBDfmDFkdnIUug4OHULPha7V0HGnfV3\n7HdMRyysLx08kZN5kKaHZQbRd6lVzhiK6VkBRydFwcFb+4KyUgW4YGQPul3KMHA=\n=f19Y\n-----END PGP SIGNATURE-----",
        "payload": "tree 4839fcf0584f5549e5cd4144c0e894ee0b26fdb0\nparent f137753a2dcd8229f89d1d1ac28039364e5850b4\nparent 621441a7a72ec0b17594a24a2c5fedcac0c605f6\nauthor MarcoFalke <falke.marco@gmail.com> 1475954539 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1475954622 +0200\n\nMerge #8881: Add some verbose logging to bitcoin-util-test.py\n\n621441a add verbose mode to bitcoin-util-test.py (jnewbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e66cc1d58e16bf1650dd6479fed64ecaca8c6098/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f137753a2dcd8229f89d1d1ac28039364e5850b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f137753a2dcd8229f89d1d1ac28039364e5850b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f137753a2dcd8229f89d1d1ac28039364e5850b4"
      },
      {
        "sha": "621441a7a72ec0b17594a24a2c5fedcac0c605f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/621441a7a72ec0b17594a24a2c5fedcac0c605f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/621441a7a72ec0b17594a24a2c5fedcac0c605f6"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 65,
      "deletions": 30
    },
    "files": [
      {
        "sha": "d801415c70f19d05bb955181b0f3f2dc089318e2",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66cc1d58e16bf1650dd6479fed64ecaca8c6098/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66cc1d58e16bf1650dd6479fed64ecaca8c6098/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
        "patch": "@@ -45,13 +45,17 @@ def bctest(testDir, testObj, exeext):\n \t\tprint(\"Return code mismatch for \" + outputFn)\n \t\tsys.exit(1)\n \n-def bctester(testDir, input_basename, buildenv):\n+def bctester(testDir, input_basename, buildenv, verbose = False):\n \tinput_filename = testDir + \"/\" + input_basename\n \traw_data = open(input_filename).read()\n \tinput_data = json.loads(raw_data)\n \n \tfor testObj in input_data:\n+\t\tif verbose and \"description\" in testObj:\n+\t\t\tprint (\"Testing: \" + testObj[\"description\"])\n \t\tbctest(testDir, testObj, buildenv.exeext)\n+\t\tif verbose and \"description\" in testObj:\n+\t\t\tprint (\"PASS\")\n \n \tsys.exit(0)\n "
      },
      {
        "sha": "3099506d6d784cca66b47ac98432b950b0c6d706",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66cc1d58e16bf1650dd6479fed64ecaca8c6098/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66cc1d58e16bf1650dd6479fed64ecaca8c6098/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
        "patch": "@@ -19,11 +19,14 @@\n \n \n if __name__ == '__main__':\n+    verbose = False\n     try:\n         srcdir = os.environ[\"srcdir\"]\n     except:\n         parser = argparse.ArgumentParser(description=help_text)\n         parser.add_argument('-s', '--srcdir')\n+        parser.add_argument('-v', '--verbose', action='store_true')\n         args = parser.parse_args()\n         srcdir = args.srcdir\n-    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv)\n+        verbose = args.verbose\n+    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv, verbose = verbose)"
      },
      {
        "sha": "de95044597b1df1372bf1319074c1b4a6df8ada9",
        "filename": "src/test/data/bitcoin-util-test.json",
        "status": "modified",
        "additions": 56,
        "deletions": 28,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e66cc1d58e16bf1650dd6479fed64ecaca8c6098/src/test/data/bitcoin-util-test.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e66cc1d58e16bf1650dd6479fed64ecaca8c6098/src/test/data/bitcoin-util-test.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/bitcoin-util-test.json?ref=e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
        "patch": "@@ -1,61 +1,73 @@\n [\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-create\"],\n-    \"output_cmp\": \"blanktx.hex\"\n+    \"output_cmp\": \"blanktx.hex\",\n+    \"description\": \"Creates a blank transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\",\"-create\"],\n-    \"output_cmp\": \"blanktx.json\"\n+    \"output_cmp\": \"blanktx.json\",\n+    \"description\": \"Creates a blank transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\"],\n     \"input\": \"blanktx.hex\",\n-    \"output_cmp\": \"blanktx.hex\"\n+    \"output_cmp\": \"blanktx.hex\",\n+    \"description\": \"Creates a blank transaction when nothing is piped into bitcoin-tx\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\",\"-\"],\n     \"input\": \"blanktx.hex\",\n-    \"output_cmp\": \"blanktx.json\"\n+    \"output_cmp\": \"blanktx.json\",\n+    \"description\": \"Creates a blank transaction when nothing is piped into bitcoin-tx (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delin=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delin1-out.hex\"\n+    \"output_cmp\": \"tt-delin1-out.hex\",\n+    \"description\": \"Deletes a single input from a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-\", \"delin=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delin1-out.json\"\n+    \"output_cmp\": \"tt-delin1-out.json\",\n+    \"description\": \"Deletes a single input from a transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delin=31\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to delete an input with a bad index from a transaction. Expected to fail.\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delout=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delout1-out.hex\"\n+    \"output_cmp\": \"tt-delout1-out.hex\",\n+    \"description\": \"Deletes a single output from a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-\", \"delout=1\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-delout1-out.json\"\n+    \"output_cmp\": \"tt-delout1-out.json\",\n+    \"description\": \"Deletes a single output from a transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"delout=2\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to delete an output with a bad index from a transaction. Expected to fail.\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-\", \"locktime=317000\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-locktime317000-out.hex\"\n+    \"output_cmp\": \"tt-locktime317000-out.hex\",\n+    \"description\": \"Adds an nlocktime to a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-\", \"locktime=317000\"],\n     \"input\": \"tx394b54bb.hex\",\n-    \"output_cmp\": \"tt-locktime317000-out.json\"\n+    \"output_cmp\": \"tt-locktime317000-out.json\",\n+    \"description\": \"Adds an nlocktime to a transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -65,7 +77,8 @@\n      \"in=22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc:1\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outaddr=4:1P8yWvZW8jVihP1bzHeqfE4aoXNX8AVa46\"],\n-    \"output_cmp\": \"txcreate1.hex\"\n+    \"output_cmp\": \"txcreate1.hex\",\n+    \"description\": \"Creates a new transaction with three inputs and two outputs\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -76,15 +89,18 @@\n      \"in=22a6f904655d53ae2ff70e701a0bbd90aa3975c0f40bfc6cc996a9049e31cdfc:1\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outaddr=4:1P8yWvZW8jVihP1bzHeqfE4aoXNX8AVa46\"],\n-    \"output_cmp\": \"txcreate1.json\"\n+    \"output_cmp\": \"txcreate1.json\",\n+    \"description\": \"Creates a new transaction with three inputs and two outputs (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-create\", \"outscript=0:\"],\n-    \"output_cmp\": \"txcreate2.hex\"\n+    \"output_cmp\": \"txcreate2.hex\",\n+    \"description\": \"Creates a new transaction with a single empty output script\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\": [\"-json\", \"-create\", \"outscript=0:\"],\n-    \"output_cmp\": \"txcreate2.json\"\n+    \"output_cmp\": \"txcreate2.json\",\n+    \"description\": \"Creates a new transaction with a single empty output script (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -94,7 +110,8 @@\n      \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n-    \"output_cmp\": \"txcreatesign.hex\"\n+    \"output_cmp\": \"txcreatesign.hex\",\n+    \"description\": \"Creates a new transaction with a single input and a single output, and then signs the transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -105,29 +122,33 @@\n      \"set=prevtxs:[{\\\"txid\\\":\\\"4d49a71ec9da436f71ec4ee231d04f292a29cd316f598bb7068feccabdc59485\\\",\\\"vout\\\":0,\\\"scriptPubKey\\\":\\\"76a91491b24bf9f5288532960ac687abb035127b1d28a588ac\\\"}]\",\n      \"sign=ALL\",\n      \"outaddr=0.001:193P6LtvS4nCnkDvM9uXn1gsSRqh4aDAz7\"],\n-    \"output_cmp\": \"txcreatesign.json\"\n+    \"output_cmp\": \"txcreatesign.json\",\n+    \"description\": \"Creates a new transaction with a single input and a single output, and then signs the transaction (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outdata=4:badhexdata\"],\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to create a new transaction with one input and an output with malformed hex data. Expected to fail\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outdata=badhexdata\"],\n-    \"return_code\": 1\n+    \"return_code\": 1,\n+    \"description\": \"Attempts to create a new transaction with one input and an output with no value and malformed hex data. Expected to fail\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=4:54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata1.hex\"\n+    \"output_cmp\": \"txcreatedata1.hex\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data output\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -136,15 +157,17 @@\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=4:54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata1.json\"\n+    \"output_cmp\": \"txcreatedata1.json\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data output (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata2.hex\"\n+    \"output_cmp\": \"txcreatedata2.hex\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data (zero value) output\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n@@ -153,34 +176,39 @@\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\",\n      \"outdata=54686973204f505f52455455524e207472616e73616374696f6e206f7574707574207761732063726561746564206279206d6f646966696564206372656174657261777472616e73616374696f6e2e\"],\n-    \"output_cmp\": \"txcreatedata2.json\"\n+    \"output_cmp\": \"txcreatedata2.json\",\n+    \"description\": \"Creates a new transaction with one input, one address output and one data (zero value) output (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:4294967293\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"],\n-    \"output_cmp\": \"txcreatedata_seq0.hex\"\n+    \"output_cmp\": \"txcreatedata_seq0.hex\",\n+    \"description\": \"Creates a new transaction with one input with sequence number and one address output\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-json\",\n      \"-create\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:4294967293\",\n      \"outaddr=0.18:13tuJJDR2RgArmgfv6JScSdreahzgc4T6o\"],\n-    \"output_cmp\": \"txcreatedata_seq0.json\"\n+    \"output_cmp\": \"txcreatedata_seq0.json\",\n+    \"description\": \"Creates a new transaction with one input with sequence number and one address output (output in json)\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000fdffffff0180a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac00000000\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:1\"],\n-    \"output_cmp\": \"txcreatedata_seq1.hex\"\n+    \"output_cmp\": \"txcreatedata_seq1.hex\",\n+    \"description\": \"Adds a new input with sequence number to a transaction\"\n   },\n   { \"exec\": \"./bitcoin-tx\",\n     \"args\":\n     [\"-json\",\n      \"01000000011f5c38dfcf6f1a5f5a87c416076d392c87e6d41970d5ad5e477a02d66bde97580000000000fdffffff0180a81201000000001976a9141fc11f39be1729bf973a7ab6a615ca4729d6457488ac00000000\",\n      \"in=5897de6bd6027a475eadd57019d4e6872c396d0716c4875a5f1a6fcfdf385c1f:0:1\"],\n-    \"output_cmp\": \"txcreatedata_seq1.json\"\n+    \"output_cmp\": \"txcreatedata_seq1.json\",\n+    \"description\": \"Adds a new input with sequence number to a transaction (output in json)\"\n   }\n ]"
      }
    ]
  },
  {
    "sha": "072116fceb2294b97d1c40f79305f2e3ff71812b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzIxMTZmY2ViMjI5NGI5N2QxYzQwZjc5MzA1ZjJlM2ZmNzE4MTJi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-08T19:26:07Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-08T19:28:26Z"
      },
      "message": "Merge #8891: [Doc] Update bips.md for Segregated Witness\n\nef28d8a [Doc] Update bips.md for Segregated Witness (fanquake)",
      "tree": {
        "sha": "fa12cc829888fbdb1d356ea457d6ddf130039b14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa12cc829888fbdb1d356ea457d6ddf130039b14"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/072116fceb2294b97d1c40f79305f2e3ff71812b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJX+UjaAAoJEC1/I3LlD+E3W7gIAIhEBzlArVd6Mctoisz1ZcVL\nZkCpj2wT8NiUsAI+r/dIGfeTNj4Mz7tPTDpDzBRikAVAXHzX95FzeYgbVdHLWgbR\njJhEqPJ7ZpFxpxbOymhV3dOLjYlu3fbbO8QJsKVJfL+JY6AUgp+nWX6eSSVaGD7k\nzDDbVtWMrMAZ5SdxIYgFPCPGQeiBfItq1zPmRVpoXt6omuu5Fw9Kn2JitGJWNnvG\nf0VESyQ/kGJVXF8R5i4IRYMJt5qsLgHBPluF3v0uLp3fGgDVcVFziyjgteIX/N/N\n1im+BpV2S+D3dNdr9zg9nDYaH5fHSyO6u0Glp6rumwoZtfBGCSp/Xe3zRISDUm4=\n=wE+q\n-----END PGP SIGNATURE-----",
        "payload": "tree fa12cc829888fbdb1d356ea457d6ddf130039b14\nparent e66cc1d58e16bf1650dd6479fed64ecaca8c6098\nparent ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6\nauthor MarcoFalke <falke.marco@gmail.com> 1475954767 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1475954906 +0200\n\nMerge #8891: [Doc] Update bips.md for Segregated Witness\n\nef28d8a [Doc] Update bips.md for Segregated Witness (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072116fceb2294b97d1c40f79305f2e3ff71812b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/072116fceb2294b97d1c40f79305f2e3ff71812b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072116fceb2294b97d1c40f79305f2e3ff71812b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e66cc1d58e16bf1650dd6479fed64ecaca8c6098",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e66cc1d58e16bf1650dd6479fed64ecaca8c6098"
      },
      {
        "sha": "ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef28d8a899aeb4487ef7fbfbfca9c0f2b60bdaf6"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "040439fbcb195ba7e8a2957f259c430deaf97091",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/072116fceb2294b97d1c40f79305f2e3ff71812b/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/072116fceb2294b97d1c40f79305f2e3ff71812b/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=072116fceb2294b97d1c40f79305f2e3ff71812b",
        "patch": "@@ -26,4 +26,9 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n * [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542)).\n+* [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 143`](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki): Transaction Signature Verification for Version 0 Witness Program as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 144`](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki): Segregated Witness as of **0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068))."
      }
    ]
  },
  {
    "sha": "6429cfa8a70308241c576aeb92ffe3db5203b2ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NDI5Y2ZhOGE3MDMwODI0MWM1NzZhZWI5MmZmZTNkYjUyMDNiMmVm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-10T10:32:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-10T11:16:40Z"
      },
      "message": "Merge #8393: Support for compact blocks together with segwit\n\n27acfc1 [qa] Update p2p-compactblocks.py for compactblocks v2 (Suhas Daftuar)\n422fac6 [qa] Add support for compactblocks v2 to mininode (Suhas Daftuar)\nf5b9b8f [qa] Fix bug in mininode witness deserialization (Suhas Daftuar)\n6aa28ab Use cmpctblock type 2 for segwit-enabled transfer (Pieter Wuille)\nbe7555f Fix overly-prescriptive p2p-segwit test for new fetch logic (Matt Corallo)\n06128da Make GetFetchFlags always request witness objects from witness peers (Matt Corallo)",
      "tree": {
        "sha": "12128520a1c638291d0dd133bcbceb1694e51385",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12128520a1c638291d0dd133bcbceb1694e51385"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6429cfa8a70308241c576aeb92ffe3db5203b2ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJX+3iYAAoJENuhpnN5oakxGswP/2iMm3/xL66fRHjAlgA7duOa\nxNDqF+I6IaiHMQDmDw07oonjFTH+sJbhWWVhfswiPujLswKvxW/s5Wo8+wuUCOJW\nx4D5B51NE7qnZ/43CZii0I1P7uMI2CJ26vIX+wdqoFjLGqlC6zQ5cRAHSX5Fpv66\n3P2GeNzM+dw5h/8PNEaOwlqO36XSZC0YMJ7UNxXBsFcIcz3gT+eAubuaylkk4SYO\ndB3vgrc7wF9KaXxRuw2WzDKIjmXio1LBq/LhB3JHsM7Qx4BZvhj6tYs81dzw3qTj\nZFPavmjLtl1cqkdk9psqh5gfNrmr2USS++vgBGiPK19W4/FjmTodzerCwLKGoHkn\n2UBIuMP6E18SAbJ8oIp7WjY8Jo49nuHG//lDQyKeAfR126DS/fD4MU/BEv1ymWYc\nub2QnsD0Ab03C5StRHRn+q46mM1O0LmMFUKlMp0lHxApTCKdRpTOxt648ZaIxIHj\nSCupO3k7VmkK72WkFF0eDxzTKpVX73yDxQPn+18xn6IqZBxzVz35nxxdpmeVfzrn\nnXKIPQRyJQiakzrJOX5vL3Ohvvu4vYGglma67cjErrdhxYTYe98ddQqT+ev2LRiO\nYfZ2L1ahOEulquKxuqgRI78G8Wc4YLf9dffJ1x3hoG5pzs3Arq5DCMO8rTKoS4LE\nNsoSB+wMsUiCkD4gW/zD\n=LmU+\n-----END PGP SIGNATURE-----",
        "payload": "tree 12128520a1c638291d0dd133bcbceb1694e51385\nparent 072116fceb2294b97d1c40f79305f2e3ff71812b\nparent 27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1476095537 +0200\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1476098200 +0200\n\nMerge #8393: Support for compact blocks together with segwit\n\n27acfc1 [qa] Update p2p-compactblocks.py for compactblocks v2 (Suhas Daftuar)\n422fac6 [qa] Add support for compactblocks v2 to mininode (Suhas Daftuar)\nf5b9b8f [qa] Fix bug in mininode witness deserialization (Suhas Daftuar)\n6aa28ab Use cmpctblock type 2 for segwit-enabled transfer (Pieter Wuille)\nbe7555f Fix overly-prescriptive p2p-segwit test for new fetch logic (Matt Corallo)\n06128da Make GetFetchFlags always request witness objects from witness peers (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6429cfa8a70308241c576aeb92ffe3db5203b2ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6429cfa8a70308241c576aeb92ffe3db5203b2ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6429cfa8a70308241c576aeb92ffe3db5203b2ef/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "072116fceb2294b97d1c40f79305f2e3ff71812b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072116fceb2294b97d1c40f79305f2e3ff71812b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/072116fceb2294b97d1c40f79305f2e3ff71812b"
      },
      {
        "sha": "27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27acfc1d2ee53cc52b54befd2d4bfa24a77a2eef"
      }
    ],
    "stats": {
      "total": 730,
      "additions": 489,
      "deletions": 241
    },
    "files": [
      {
        "sha": "d91e10d77cb4b96a74bc71da85f15ba5ee658176",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 389,
        "deletions": 194,
        "changes": 583,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -12,14 +12,16 @@\n \n '''\n CompactBlocksTest -- test compact blocks (BIP 152)\n-'''\n \n+Version 1 compact blocks are pre-segwit (txids)\n+Version 2 compact blocks are post-segwit (wtxids)\n+'''\n \n # TestNode: A peer we use to send messages to bitcoind, and store responses.\n class TestNode(SingleNodeConnCB):\n     def __init__(self):\n         SingleNodeConnCB.__init__(self)\n-        self.last_sendcmpct = None\n+        self.last_sendcmpct = []\n         self.last_headers = None\n         self.last_inv = None\n         self.last_cmpctblock = None\n@@ -30,7 +32,7 @@ def __init__(self):\n         self.last_blocktxn = None\n \n     def on_sendcmpct(self, conn, message):\n-        self.last_sendcmpct = message\n+        self.last_sendcmpct.append(message)\n \n     def on_block(self, conn, message):\n         self.last_block = message\n@@ -90,29 +92,31 @@ class CompactBlocksTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 1\n+        # Node0 = pre-segwit, node1 = segwit-aware\n+        self.num_nodes = 2\n         self.utxos = []\n \n     def setup_network(self):\n         self.nodes = []\n \n-        # Turn off segwit in this test, as compact blocks don't currently work\n-        # with segwit.  (After BIP 152 is updated to support segwit, we can\n-        # test behavior with and without segwit enabled by adding a second node\n-        # to the test.)\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [[\"-debug\", \"-logtimemicros=1\", \"-bip9params=segwit:0:0\"]])\n+        # Start up node0 to be a version 1, pre-segwit node.\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n+                [[\"-debug\", \"-logtimemicros=1\", \"-bip9params=segwit:0:0\"], \n+                 [\"-debug\", \"-logtimemicros\", \"-txindex\"]])\n+        connect_nodes(self.nodes[0], 1)\n \n-    def build_block_on_tip(self):\n-        height = self.nodes[0].getblockcount()\n-        tip = self.nodes[0].getbestblockhash()\n-        mtp = self.nodes[0].getblockheader(tip)['mediantime']\n+    def build_block_on_tip(self, node):\n+        height = node.getblockcount()\n+        tip = node.getbestblockhash()\n+        mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n         block.solve()\n         return block\n \n     # Create 10 more anyone-can-spend utxo's for testing.\n     def make_utxos(self):\n-        block = self.build_block_on_tip()\n+        # Doesn't matter which node we use, just use node0.\n+        block = self.build_block_on_tip(self.nodes[0])\n         self.test_node.send_and_ping(msg_block(block))\n         assert(int(self.nodes[0].getbestblockhash(), 16) == block.sha256)\n         self.nodes[0].generate(100)\n@@ -125,7 +129,7 @@ def make_utxos(self):\n             tx.vout.append(CTxOut(out_value, CScript([OP_TRUE])))\n         tx.rehash()\n \n-        block2 = self.build_block_on_tip()\n+        block2 = self.build_block_on_tip(self.nodes[0])\n         block2.vtx.append(tx)\n         block2.hashMerkleRoot = block2.calc_merkle_root()\n         block2.solve()\n@@ -134,26 +138,30 @@ def make_utxos(self):\n         self.utxos.extend([[tx.sha256, i, out_value] for i in range(10)])\n         return\n \n-    # Test \"sendcmpct\":\n-    # - No compact block announcements or getdata(MSG_CMPCT_BLOCK) unless\n-    #   sendcmpct is sent.\n-    # - If sendcmpct is sent with version > 1, the message is ignored.\n+    # Test \"sendcmpct\" (between peers preferring the same version):\n+    # - No compact block announcements unless sendcmpct is sent.\n+    # - If sendcmpct is sent with version > preferred_version, the message is ignored.\n     # - If sendcmpct is sent with boolean 0, then block announcements are not\n     #   made with compact blocks.\n     # - If sendcmpct is then sent with boolean 1, then new block announcements\n     #   are made with compact blocks.\n-    def test_sendcmpct(self):\n-        print(\"Testing SENDCMPCT p2p message... \")\n-\n-        # Make sure we get a version 0 SENDCMPCT message from our peer\n+    # If old_node is passed in, request compact blocks with version=preferred-1\n+    # and verify that it receives block announcements via compact block.\n+    def test_sendcmpct(self, node, test_node, preferred_version, old_node=None):\n+        # Make sure we get a SENDCMPCT message from our peer\n         def received_sendcmpct():\n-            return (self.test_node.last_sendcmpct is not None)\n+            return (len(test_node.last_sendcmpct) > 0)\n         got_message = wait_until(received_sendcmpct, timeout=30)\n         assert(received_sendcmpct())\n         assert(got_message)\n-        assert_equal(self.test_node.last_sendcmpct.version, 1)\n+        with mininode_lock:\n+            # Check that the first version received is the preferred one\n+            assert_equal(test_node.last_sendcmpct[0].version, preferred_version)\n+            # And that we receive versions down to 1.\n+            assert_equal(test_node.last_sendcmpct[-1].version, 1)\n+            test_node.last_sendcmpct = []\n \n-        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        tip = int(node.getbestblockhash(), 16)\n \n         def check_announcement_of_new_block(node, peer, predicate):\n             peer.clear_block_announcement()\n@@ -165,56 +173,75 @@ def check_announcement_of_new_block(node, peer, predicate):\n                 assert(predicate(peer))\n \n         # We shouldn't get any block announcements via cmpctblock yet.\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None)\n \n         # Try one more time, this time after requesting headers.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None and p.last_inv is not None)\n+        test_node.request_headers_and_sync(locator=[tip])\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None and p.last_inv is not None)\n \n         # Test a few ways of using sendcmpct that should NOT\n         # result in compact block announcements.\n         # Before each test, sync the headers chain.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n+        test_node.request_headers_and_sync(locator=[tip])\n \n         # Now try a SENDCMPCT message with too-high version\n         sendcmpct = msg_sendcmpct()\n-        sendcmpct.version = 2\n-        self.test_node.send_and_ping(sendcmpct)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None)\n+        sendcmpct.version = preferred_version+1\n+        sendcmpct.announce = True\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None)\n \n         # Headers sync before next test.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n+        test_node.request_headers_and_sync(locator=[tip])\n \n         # Now try a SENDCMPCT message with valid version, but announce=False\n-        self.test_node.send_and_ping(msg_sendcmpct())\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None)\n+        sendcmpct.version = preferred_version\n+        sendcmpct.announce = False\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None)\n \n         # Headers sync before next test.\n-        self.test_node.request_headers_and_sync(locator=[tip])\n+        test_node.request_headers_and_sync(locator=[tip])\n \n         # Finally, try a SENDCMPCT message with announce=True\n-        sendcmpct.version = 1\n+        sendcmpct.version = preferred_version\n         sendcmpct.announce = True\n-        self.test_node.send_and_ping(sendcmpct)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is not None)\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n \n         # Try one more time (no headers sync should be needed!)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is not None)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n \n         # Try one more time, after turning on sendheaders\n-        self.test_node.send_and_ping(msg_sendheaders())\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is not None)\n+        test_node.send_and_ping(msg_sendheaders())\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n+\n+        # Try one more time, after sending a version-1, announce=false message.\n+        sendcmpct.version = preferred_version-1\n+        sendcmpct.announce = False\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is not None)\n \n         # Now turn off announcements\n+        sendcmpct.version = preferred_version\n         sendcmpct.announce = False\n-        self.test_node.send_and_ping(sendcmpct)\n-        check_announcement_of_new_block(self.nodes[0], self.test_node, lambda p: p.last_cmpctblock is None and p.last_headers is not None)\n+        test_node.send_and_ping(sendcmpct)\n+        check_announcement_of_new_block(node, test_node, lambda p: p.last_cmpctblock is None and p.last_headers is not None)\n+\n+        if old_node is not None:\n+            # Verify that a peer using an older protocol version can receive\n+            # announcements from this node.\n+            sendcmpct.version = preferred_version-1\n+            sendcmpct.announce = True\n+            old_node.send_and_ping(sendcmpct)\n+            # Header sync\n+            old_node.request_headers_and_sync(locator=[tip])\n+            check_announcement_of_new_block(node, old_node, lambda p: p.last_cmpctblock is not None)\n \n     # This test actually causes bitcoind to (reasonably!) disconnect us, so do this last.\n     def test_invalid_cmpctblock_message(self):\n-        print(\"Testing invalid index in cmpctblock message...\")\n         self.nodes[0].generate(101)\n-        block = self.build_block_on_tip()\n+        block = self.build_block_on_tip(self.nodes[0])\n \n         cmpct_block = P2PHeaderAndShortIDs()\n         cmpct_block.header = CBlockHeader(block)\n@@ -227,45 +254,61 @@ def test_invalid_cmpctblock_message(self):\n \n     # Compare the generated shortids to what we expect based on BIP 152, given\n     # bitcoind's choice of nonce.\n-    def test_compactblock_construction(self):\n-        print(\"Testing compactblock headers and shortIDs are correct...\")\n-\n+    def test_compactblock_construction(self, node, test_node, version, use_witness_address):\n         # Generate a bunch of transactions.\n-        self.nodes[0].generate(101)\n+        node.generate(101)\n         num_transactions = 25\n-        address = self.nodes[0].getnewaddress()\n+        address = node.getnewaddress()\n+        if use_witness_address:\n+            # Want at least one segwit spend, so move all funds to\n+            # a witness address.\n+            address = node.addwitnessaddress(address)\n+            value_to_send = node.getbalance()\n+            node.sendtoaddress(address, satoshi_round(value_to_send-Decimal(0.1)))\n+            node.generate(1)\n+\n+        segwit_tx_generated = False\n         for i in range(num_transactions):\n-            self.nodes[0].sendtoaddress(address, 0.1)\n+            txid = node.sendtoaddress(address, 0.1)\n+            hex_tx = node.gettransaction(txid)[\"hex\"]\n+            tx = FromHex(CTransaction(), hex_tx)\n+            if not tx.wit.is_null():\n+                segwit_tx_generated = True\n+\n+        if use_witness_address:\n+            assert(segwit_tx_generated) # check that our test is not broken\n \n         self.test_node.sync_with_ping()\n \n         # Now mine a block, and look at the resulting compact block.\n-        self.test_node.clear_block_announcement()\n-        block_hash = int(self.nodes[0].generate(1)[0], 16)\n+        test_node.clear_block_announcement()\n+        block_hash = int(node.generate(1)[0], 16)\n \n         # Store the raw block in our internal format.\n-        block = FromHex(CBlock(), self.nodes[0].getblock(\"%02x\" % block_hash, False))\n+        block = FromHex(CBlock(), node.getblock(\"%02x\" % block_hash, False))\n         [tx.calc_sha256() for tx in block.vtx]\n         block.rehash()\n \n         # Don't care which type of announcement came back for this test; just\n         # request the compact block if we didn't get one yet.\n-        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        wait_until(test_node.received_block_announcement, timeout=30)\n+        assert(test_node.received_block_announcement())\n \n         with mininode_lock:\n-            if self.test_node.last_cmpctblock is None:\n-                self.test_node.clear_block_announcement()\n+            if test_node.last_cmpctblock is None:\n+                test_node.clear_block_announcement()\n                 inv = CInv(4, block_hash)  # 4 == \"CompactBlock\"\n-                self.test_node.send_message(msg_getdata([inv]))\n+                test_node.send_message(msg_getdata([inv]))\n \n-        wait_until(self.test_node.received_block_announcement, timeout=30)\n+        wait_until(test_node.received_block_announcement, timeout=30)\n+        assert(test_node.received_block_announcement())\n \n         # Now we should have the compactblock\n         header_and_shortids = None\n         with mininode_lock:\n-            assert(self.test_node.last_cmpctblock is not None)\n+            assert(test_node.last_cmpctblock is not None)\n             # Convert the on-the-wire representation to absolute indexes\n-            header_and_shortids = HeaderAndShortIDs(self.test_node.last_cmpctblock.header_and_shortids)\n+            header_and_shortids = HeaderAndShortIDs(test_node.last_cmpctblock.header_and_shortids)\n \n         # Check that we got the right block!\n         header_and_shortids.header.calc_sha256()\n@@ -278,8 +321,17 @@ def test_compactblock_construction(self):\n         # Check that all prefilled_txn entries match what's in the block.\n         for entry in header_and_shortids.prefilled_txn:\n             entry.tx.calc_sha256()\n+            # This checks the non-witness parts of the tx agree\n             assert_equal(entry.tx.sha256, block.vtx[entry.index].sha256)\n \n+            # And this checks the witness\n+            wtxid = entry.tx.calc_sha256(True)\n+            if version == 2:\n+                assert_equal(wtxid, block.vtx[entry.index].calc_sha256(True))\n+            else:\n+                # Shouldn't have received a witness\n+                assert(entry.tx.wit.is_null())\n+\n         # Check that the cmpctblock message announced all the transactions.\n         assert_equal(len(header_and_shortids.prefilled_txn) + len(header_and_shortids.shortids), len(block.vtx))\n \n@@ -294,57 +346,61 @@ def test_compactblock_construction(self):\n                 # Already checked prefilled transactions above\n                 header_and_shortids.prefilled_txn.pop(0)\n             else:\n-                shortid = calculate_shortid(k0, k1, block.vtx[index].sha256)\n+                tx_hash = block.vtx[index].sha256\n+                if version == 2:\n+                    tx_hash = block.vtx[index].calc_sha256(True)\n+                shortid = calculate_shortid(k0, k1, tx_hash)\n                 assert_equal(shortid, header_and_shortids.shortids[0])\n                 header_and_shortids.shortids.pop(0)\n             index += 1\n \n     # Test that bitcoind requests compact blocks when we announce new blocks\n     # via header or inv, and that responding to getblocktxn causes the block\n     # to be successfully reconstructed.\n-    def test_compactblock_requests(self):\n-        print(\"Testing compactblock requests... \")\n-\n+    # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n+    # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n+    # any cb-version-1-supporting peer.\n+    def test_compactblock_requests(self, node, test_node):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip()\n+            block = self.build_block_on_tip(node)\n             with mininode_lock:\n-                self.test_node.last_getdata = None\n+                test_node.last_getdata = None\n \n             if announce == \"inv\":\n-                self.test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n+                test_node.send_message(msg_inv([CInv(2, block.sha256)]))\n             else:\n-                self.test_node.send_header_for_blocks([block])\n-            success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=30)\n+                test_node.send_header_for_blocks([block])\n+            success = wait_until(lambda: test_node.last_getdata is not None, timeout=30)\n             assert(success)\n-            assert_equal(len(self.test_node.last_getdata.inv), 1)\n-            assert_equal(self.test_node.last_getdata.inv[0].type, 4)\n-            assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+            assert_equal(len(test_node.last_getdata.inv), 1)\n+            assert_equal(test_node.last_getdata.inv[0].type, 4)\n+            assert_equal(test_node.last_getdata.inv[0].hash, block.sha256)\n \n             # Send back a compactblock message that omits the coinbase\n             comp_block = HeaderAndShortIDs()\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n             comp_block.shortids = [1]  # this is useless, and wrong\n-            self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+            test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+            assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n             with mininode_lock:\n-                assert(self.test_node.last_getblocktxn is not None)\n-                absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+                assert(test_node.last_getblocktxn is not None)\n+                absolute_indexes = test_node.last_getblocktxn.block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n \n             # Send the coinbase, and verify that the tip advances.\n             msg = msg_blocktxn()\n             msg.block_transactions.blockhash = block.sha256\n             msg.block_transactions.transactions = [block.vtx[0]]\n-            self.test_node.send_and_ping(msg)\n-            assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+            test_node.send_and_ping(msg)\n+            assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n     # Create a chain of transactions from given utxo, and add to a new block.\n-    def build_block_with_transactions(self, utxo, num_transactions):\n-        block = self.build_block_on_tip()\n+    def build_block_with_transactions(self, node, utxo, num_transactions):\n+        block = self.build_block_on_tip(node)\n \n         for i in range(num_transactions):\n             tx = CTransaction()\n@@ -361,118 +417,113 @@ def build_block_with_transactions(self, utxo, num_transactions):\n     # Test that we only receive getblocktxn requests for transactions that the\n     # node needs, and that responding to them causes the block to be\n     # reconstructed.\n-    def test_getblocktxn_requests(self):\n-        print(\"Testing getblocktxn requests...\")\n+    def test_getblocktxn_requests(self, node, test_node, version):\n+        with_witness = (version==2)\n+\n+        def test_getblocktxn_response(compact_block, peer, expected_result):\n+            msg = msg_cmpctblock(compact_block.to_p2p())\n+            peer.send_and_ping(msg)\n+            with mininode_lock:\n+                assert(peer.last_getblocktxn is not None)\n+                absolute_indexes = peer.last_getblocktxn.block_txn_request.to_absolute()\n+            assert_equal(absolute_indexes, expected_result)\n+\n+        def test_tip_after_message(node, peer, msg, tip):\n+            peer.send_and_ping(msg)\n+            assert_equal(int(node.getbestblockhash(), 16), tip)\n \n         # First try announcing compactblocks that won't reconstruct, and verify\n         # that we receive getblocktxn messages back.\n         utxo = self.utxos.pop(0)\n \n-        block = self.build_block_with_transactions(utxo, 5)\n+        block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n-\n         comp_block = HeaderAndShortIDs()\n-        comp_block.initialize_from_block(block)\n+        comp_block.initialize_from_block(block, use_witness=with_witness)\n \n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-        with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n-        assert_equal(absolute_indexes, [1, 2, 3, 4, 5])\n-        msg = msg_blocktxn()\n-        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[1:])\n-        self.test_node.send_and_ping(msg)\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+        test_getblocktxn_response(comp_block, test_node, [1, 2, 3, 4, 5])\n+\n+        msg_bt = msg_blocktxn()\n+        if with_witness:\n+            msg_bt = msg_witness_blocktxn() # serialize with witnesses\n+        msg_bt.block_transactions = BlockTransactions(block.sha256, block.vtx[1:])\n+        test_tip_after_message(node, test_node, msg_bt, block.sha256)\n \n         utxo = self.utxos.pop(0)\n-        block = self.build_block_with_transactions(utxo, 5)\n+        block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n \n         # Now try interspersing the prefilled transactions\n-        comp_block.initialize_from_block(block, prefill_list=[0, 1, 5])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-        with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n-        assert_equal(absolute_indexes, [2, 3, 4])\n-        msg.block_transactions = BlockTransactions(block.sha256, block.vtx[2:5])\n-        self.test_node.send_and_ping(msg)\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+        comp_block.initialize_from_block(block, prefill_list=[0, 1, 5], use_witness=with_witness)\n+        test_getblocktxn_response(comp_block, test_node, [2, 3, 4])\n+        msg_bt.block_transactions = BlockTransactions(block.sha256, block.vtx[2:5])\n+        test_tip_after_message(node, test_node, msg_bt, block.sha256)\n \n         # Now try giving one transaction ahead of time.\n         utxo = self.utxos.pop(0)\n-        block = self.build_block_with_transactions(utxo, 5)\n+        block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n-        self.test_node.send_and_ping(msg_tx(block.vtx[1]))\n-        assert(block.vtx[1].hash in self.nodes[0].getrawmempool())\n+        test_node.send_and_ping(msg_tx(block.vtx[1]))\n+        assert(block.vtx[1].hash in node.getrawmempool())\n \n         # Prefill 4 out of the 6 transactions, and verify that only the one\n         # that was not in the mempool is requested.\n-        comp_block.initialize_from_block(block, prefill_list=[0, 2, 3, 4])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n-        with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n-        assert_equal(absolute_indexes, [5])\n+        comp_block.initialize_from_block(block, prefill_list=[0, 2, 3, 4], use_witness=with_witness)\n+        test_getblocktxn_response(comp_block, test_node, [5])\n \n-        msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]])\n-        self.test_node.send_and_ping(msg)\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+        msg_bt.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]])\n+        test_tip_after_message(node, test_node, msg_bt, block.sha256)\n \n         # Now provide all transactions to the node before the block is\n         # announced and verify reconstruction happens immediately.\n         utxo = self.utxos.pop(0)\n-        block = self.build_block_with_transactions(utxo, 10)\n+        block = self.build_block_with_transactions(node, utxo, 10)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n         for tx in block.vtx[1:]:\n-            self.test_node.send_message(msg_tx(tx))\n-        self.test_node.sync_with_ping()\n+            test_node.send_message(msg_tx(tx))\n+        test_node.sync_with_ping()\n         # Make sure all transactions were accepted.\n-        mempool = self.nodes[0].getrawmempool()\n+        mempool = node.getrawmempool()\n         for tx in block.vtx[1:]:\n             assert(tx.hash in mempool)\n \n         # Clear out last request.\n         with mininode_lock:\n-            self.test_node.last_getblocktxn = None\n+            test_node.last_getblocktxn = None\n \n         # Send compact block\n-        comp_block.initialize_from_block(block, prefill_list=[0])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        comp_block.initialize_from_block(block, prefill_list=[0], use_witness=with_witness)\n+        test_tip_after_message(node, test_node, msg_cmpctblock(comp_block.to_p2p()), block.sha256)\n         with mininode_lock:\n             # Shouldn't have gotten a request for any transaction\n-            assert(self.test_node.last_getblocktxn is None)\n-        # Tip should have updated\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n+            assert(test_node.last_getblocktxn is None)\n \n     # Incorrectly responding to a getblocktxn shouldn't cause the block to be\n     # permanently failed.\n-    def test_incorrect_blocktxn_response(self):\n-        print(\"Testing handling of incorrect blocktxn responses...\")\n-\n+    def test_incorrect_blocktxn_response(self, node, test_node, version):\n         if (len(self.utxos) == 0):\n             self.make_utxos()\n         utxo = self.utxos.pop(0)\n \n-        block = self.build_block_with_transactions(utxo, 10)\n+        block = self.build_block_with_transactions(node, utxo, 10)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n         # Relay the first 5 transactions from the block in advance\n         for tx in block.vtx[1:6]:\n-            self.test_node.send_message(msg_tx(tx))\n-        self.test_node.sync_with_ping()\n+            test_node.send_message(msg_tx(tx))\n+        test_node.sync_with_ping()\n         # Make sure all transactions were accepted.\n-        mempool = self.nodes[0].getrawmempool()\n+        mempool = node.getrawmempool()\n         for tx in block.vtx[1:6]:\n             assert(tx.hash in mempool)\n \n         # Send compact block\n         comp_block = HeaderAndShortIDs()\n-        comp_block.initialize_from_block(block, prefill_list=[0])\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        comp_block.initialize_from_block(block, prefill_list=[0], use_witness=(version == 2))\n+        test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n         absolute_indexes = []\n         with mininode_lock:\n-            assert(self.test_node.last_getblocktxn is not None)\n-            absolute_indexes = self.test_node.last_getblocktxn.block_txn_request.to_absolute()\n+            assert(test_node.last_getblocktxn is not None)\n+            absolute_indexes = test_node.last_getblocktxn.block_txn_request.to_absolute()\n         assert_equal(absolute_indexes, [6, 7, 8, 9, 10])\n \n         # Now give an incorrect response.\n@@ -484,100 +535,107 @@ def test_incorrect_blocktxn_response(self):\n         # verifying that the block isn't marked bad permanently. This is good\n         # enough for now.\n         msg = msg_blocktxn()\n+        if version==2:\n+            msg = msg_witness_blocktxn()\n         msg.block_transactions = BlockTransactions(block.sha256, [block.vtx[5]] + block.vtx[7:])\n-        self.test_node.send_and_ping(msg)\n+        test_node.send_and_ping(msg)\n \n         # Tip should not have updated\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.hashPrevBlock)\n+        assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n \n         # We should receive a getdata request\n-        success = wait_until(lambda: self.test_node.last_getdata is not None, timeout=10)\n+        success = wait_until(lambda: test_node.last_getdata is not None, timeout=10)\n         assert(success)\n-        assert_equal(len(self.test_node.last_getdata.inv), 1)\n-        assert_equal(self.test_node.last_getdata.inv[0].type, 2)\n-        assert_equal(self.test_node.last_getdata.inv[0].hash, block.sha256)\n+        assert_equal(len(test_node.last_getdata.inv), 1)\n+        assert(test_node.last_getdata.inv[0].type == 2 or test_node.last_getdata.inv[0].type == 2|MSG_WITNESS_FLAG)\n+        assert_equal(test_node.last_getdata.inv[0].hash, block.sha256)\n \n         # Deliver the block\n-        self.test_node.send_and_ping(msg_block(block))\n-        assert_equal(int(self.nodes[0].getbestblockhash(), 16), block.sha256)\n-\n-    def test_getblocktxn_handler(self):\n-        print(\"Testing getblocktxn handler...\")\n+        if version==2:\n+            test_node.send_and_ping(msg_witness_block(block))\n+        else:\n+            test_node.send_and_ping(msg_block(block))\n+        assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n \n+    def test_getblocktxn_handler(self, node, test_node, version):\n         # bitcoind won't respond for blocks whose height is more than 15 blocks\n         # deep.\n         MAX_GETBLOCKTXN_DEPTH = 15\n-        chain_height = self.nodes[0].getblockcount()\n+        chain_height = node.getblockcount()\n         current_height = chain_height\n         while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n-            block_hash = self.nodes[0].getblockhash(current_height)\n-            block = FromHex(CBlock(), self.nodes[0].getblock(block_hash, False))\n+            block_hash = node.getblockhash(current_height)\n+            block = FromHex(CBlock(), node.getblock(block_hash, False))\n \n             msg = msg_getblocktxn()\n             msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [])\n             num_to_request = random.randint(1, len(block.vtx))\n             msg.block_txn_request.from_absolute(sorted(random.sample(range(len(block.vtx)), num_to_request)))\n-            self.test_node.send_message(msg)\n-            success = wait_until(lambda: self.test_node.last_blocktxn is not None, timeout=10)\n+            test_node.send_message(msg)\n+            success = wait_until(lambda: test_node.last_blocktxn is not None, timeout=10)\n             assert(success)\n \n             [tx.calc_sha256() for tx in block.vtx]\n             with mininode_lock:\n-                assert_equal(self.test_node.last_blocktxn.block_transactions.blockhash, int(block_hash, 16))\n+                assert_equal(test_node.last_blocktxn.block_transactions.blockhash, int(block_hash, 16))\n                 all_indices = msg.block_txn_request.to_absolute()\n                 for index in all_indices:\n-                    tx = self.test_node.last_blocktxn.block_transactions.transactions.pop(0)\n+                    tx = test_node.last_blocktxn.block_transactions.transactions.pop(0)\n                     tx.calc_sha256()\n                     assert_equal(tx.sha256, block.vtx[index].sha256)\n-                self.test_node.last_blocktxn = None\n+                    if version == 1:\n+                        # Witnesses should have been stripped\n+                        assert(tx.wit.is_null())\n+                    else:\n+                        # Check that the witness matches\n+                        assert_equal(tx.calc_sha256(True), block.vtx[index].calc_sha256(True))\n+                test_node.last_blocktxn = None\n             current_height -= 1\n \n         # Next request should be ignored, as we're past the allowed depth.\n-        block_hash = self.nodes[0].getblockhash(current_height)\n+        block_hash = node.getblockhash(current_height)\n         msg.block_txn_request = BlockTransactionsRequest(int(block_hash, 16), [0])\n-        self.test_node.send_and_ping(msg)\n+        test_node.send_and_ping(msg)\n         with mininode_lock:\n-            assert_equal(self.test_node.last_blocktxn, None)\n-\n-    def test_compactblocks_not_at_tip(self):\n-        print(\"Testing compactblock requests/announcements not at chain tip...\")\n+            assert_equal(test_node.last_blocktxn, None)\n \n+    def test_compactblocks_not_at_tip(self, node, test_node):\n         # Test that requesting old compactblocks doesn't work.\n         MAX_CMPCTBLOCK_DEPTH = 11\n         new_blocks = []\n         for i in range(MAX_CMPCTBLOCK_DEPTH):\n-            self.test_node.clear_block_announcement()\n-            new_blocks.append(self.nodes[0].generate(1)[0])\n-            wait_until(self.test_node.received_block_announcement, timeout=30)\n+            test_node.clear_block_announcement()\n+            new_blocks.append(node.generate(1)[0])\n+            wait_until(test_node.received_block_announcement, timeout=30)\n \n-        self.test_node.clear_block_announcement()\n-        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: self.test_node.last_cmpctblock is not None, timeout=30)\n+        test_node.clear_block_announcement()\n+        test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: test_node.last_cmpctblock is not None, timeout=30)\n         assert(success)\n \n-        self.test_node.clear_block_announcement()\n-        self.nodes[0].generate(1)\n-        wait_until(self.test_node.received_block_announcement, timeout=30)\n-        self.test_node.clear_block_announcement()\n-        self.test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n-        success = wait_until(lambda: self.test_node.last_block is not None, timeout=30)\n+        test_node.clear_block_announcement()\n+        node.generate(1)\n+        wait_until(test_node.received_block_announcement, timeout=30)\n+        test_node.clear_block_announcement()\n+        test_node.send_message(msg_getdata([CInv(4, int(new_blocks[0], 16))]))\n+        success = wait_until(lambda: test_node.last_block is not None, timeout=30)\n         assert(success)\n         with mininode_lock:\n-            self.test_node.last_block.block.calc_sha256()\n-            assert_equal(self.test_node.last_block.block.sha256, int(new_blocks[0], 16))\n+            test_node.last_block.block.calc_sha256()\n+            assert_equal(test_node.last_block.block.sha256, int(new_blocks[0], 16))\n \n         # Generate an old compactblock, and verify that it's not accepted.\n-        cur_height = self.nodes[0].getblockcount()\n-        hashPrevBlock = int(self.nodes[0].getblockhash(cur_height-5), 16)\n-        block = self.build_block_on_tip()\n+        cur_height = node.getblockcount()\n+        hashPrevBlock = int(node.getblockhash(cur_height-5), 16)\n+        block = self.build_block_on_tip(node)\n         block.hashPrevBlock = hashPrevBlock\n         block.solve()\n \n         comp_block = HeaderAndShortIDs()\n         comp_block.initialize_from_block(block)\n-        self.test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n+        test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n \n-        tips = self.nodes[0].getchaintips()\n+        tips = node.getchaintips()\n         found = False\n         for x in tips:\n             if x[\"hash\"] == block.hash:\n@@ -591,18 +649,61 @@ def test_compactblocks_not_at_tip(self):\n         msg = msg_getblocktxn()\n         msg.block_txn_request = BlockTransactionsRequest(block.sha256, [0])\n         with mininode_lock:\n-            self.test_node.last_blocktxn = None\n-        self.test_node.send_and_ping(msg)\n+            test_node.last_blocktxn = None\n+        test_node.send_and_ping(msg)\n         with mininode_lock:\n-            assert(self.test_node.last_blocktxn is None)\n+            assert(test_node.last_blocktxn is None)\n+\n+    def activate_segwit(self, node):\n+        node.generate(144*3)\n+        assert_equal(get_bip9_status(node, \"segwit\")[\"status\"], 'active')\n+\n+    def test_end_to_end_block_relay(self, node, listeners):\n+        utxo = self.utxos.pop(0)\n+\n+        block = self.build_block_with_transactions(node, utxo, 10)\n+\n+        [l.clear_block_announcement() for l in listeners]\n+\n+        # ToHex() won't serialize with witness, but this block has no witnesses\n+        # anyway. TODO: repeat this test with witness tx's to a segwit node.\n+        node.submitblock(ToHex(block))\n+\n+        for l in listeners:\n+            wait_until(lambda: l.received_block_announcement(), timeout=30)\n+        with mininode_lock:\n+            for l in listeners:\n+                assert(l.last_cmpctblock is not None)\n+                l.last_cmpctblock.header_and_shortids.header.calc_sha256()\n+                assert_equal(l.last_cmpctblock.header_and_shortids.header.sha256, block.sha256)\n+\n+    # Helper for enabling cb announcements\n+    # Send the sendcmpct request and sync headers\n+    def request_cb_announcements(self, peer, node, version):\n+        tip = node.getbestblockhash()\n+        peer.get_headers(locator=[int(tip, 16)], hashstop=0)\n+\n+        msg = msg_sendcmpct()\n+        msg.version = version\n+        msg.announce = True\n+        peer.send_and_ping(msg)\n+\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         self.test_node = TestNode()\n+        self.segwit_node = TestNode()\n+        self.old_node = TestNode()  # version 1 peer <--> segwit node\n \n         connections = []\n         connections.append(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], self.test_node))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1],\n+                    self.segwit_node, services=NODE_NETWORK|NODE_WITNESS))\n+        connections.append(NodeConn('127.0.0.1', p2p_port(1), self.nodes[1],\n+                    self.old_node, services=NODE_NETWORK))\n         self.test_node.add_connection(connections[0])\n+        self.segwit_node.add_connection(connections[1])\n+        self.old_node.add_connection(connections[2])\n \n         NetworkThread().start()  # Start up network handling in another thread\n \n@@ -612,13 +713,107 @@ def run_test(self):\n         # We will need UTXOs to construct transactions in later tests.\n         self.make_utxos()\n \n-        self.test_sendcmpct()\n-        self.test_compactblock_construction()\n-        self.test_compactblock_requests()\n-        self.test_getblocktxn_requests()\n-        self.test_getblocktxn_handler()\n-        self.test_compactblocks_not_at_tip()\n-        self.test_incorrect_blocktxn_response()\n+        print(\"Running tests, pre-segwit activation:\")\n+\n+        print(\"\\tTesting SENDCMPCT p2p message... \")\n+        self.test_sendcmpct(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_sendcmpct(self.nodes[1], self.segwit_node, 2, old_node=self.old_node)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock construction...\")\n+        self.test_compactblock_construction(self.nodes[0], self.test_node, 1, False)\n+        sync_blocks(self.nodes)\n+        self.test_compactblock_construction(self.nodes[1], self.segwit_node, 2, False)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock requests... \")\n+        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        sync_blocks(self.nodes)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting getblocktxn requests...\")\n+        self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting getblocktxn handler...\")\n+        self.test_getblocktxn_handler(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_getblocktxn_handler(self.nodes[1], self.segwit_node, 2)\n+        self.test_getblocktxn_handler(self.nodes[1], self.old_node, 1)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock requests/announcements not at chain tip...\")\n+        self.test_compactblocks_not_at_tip(self.nodes[0], self.test_node)\n+        sync_blocks(self.nodes)\n+        self.test_compactblocks_not_at_tip(self.nodes[1], self.segwit_node)\n+        self.test_compactblocks_not_at_tip(self.nodes[1], self.old_node)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting handling of incorrect blocktxn responses...\")\n+        self.test_incorrect_blocktxn_response(self.nodes[0], self.test_node, 1)\n+        sync_blocks(self.nodes)\n+        self.test_incorrect_blocktxn_response(self.nodes[1], self.segwit_node, 2)\n+        sync_blocks(self.nodes)\n+\n+        # End-to-end block relay tests\n+        print(\"\\tTesting end-to-end block relay...\")\n+        self.request_cb_announcements(self.test_node, self.nodes[0], 1)\n+        self.request_cb_announcements(self.old_node, self.nodes[1], 1)\n+        self.request_cb_announcements(self.segwit_node, self.nodes[1], 2)\n+        self.test_end_to_end_block_relay(self.nodes[0], [self.segwit_node, self.test_node, self.old_node])\n+        self.test_end_to_end_block_relay(self.nodes[1], [self.segwit_node, self.test_node, self.old_node])\n+\n+        # Advance to segwit activation\n+        print (\"\\nAdvancing to segwit activation\\n\")\n+        self.activate_segwit(self.nodes[1])\n+        print (\"Running tests, post-segwit activation...\")\n+\n+        print(\"\\tTesting compactblock construction...\")\n+        self.test_compactblock_construction(self.nodes[1], self.old_node, 1, True)\n+        self.test_compactblock_construction(self.nodes[1], self.segwit_node, 2, True)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting compactblock requests (unupgraded node)... \")\n+        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+\n+        print(\"\\tTesting getblocktxn requests (unupgraded node)...\")\n+        self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n+\n+        # Need to manually sync node0 and node1, because post-segwit activation,\n+        # node1 will not download blocks from node0.\n+        print(\"\\tSyncing nodes...\")\n+        assert(self.nodes[0].getbestblockhash() != self.nodes[1].getbestblockhash())\n+        while (self.nodes[0].getblockcount() > self.nodes[1].getblockcount()):\n+            block_hash = self.nodes[0].getblockhash(self.nodes[1].getblockcount()+1)\n+            self.nodes[1].submitblock(self.nodes[0].getblock(block_hash, False))\n+        assert_equal(self.nodes[0].getbestblockhash(), self.nodes[1].getbestblockhash())\n+\n+        print(\"\\tTesting compactblock requests (segwit node)... \")\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+\n+        print(\"\\tTesting getblocktxn requests (segwit node)...\")\n+        self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)\n+        sync_blocks(self.nodes)\n+\n+        print(\"\\tTesting getblocktxn handler (segwit node should return witnesses)...\")\n+        self.test_getblocktxn_handler(self.nodes[1], self.segwit_node, 2)\n+        self.test_getblocktxn_handler(self.nodes[1], self.old_node, 1)\n+\n+        # Test that if we submitblock to node1, we'll get a compact block\n+        # announcement to all peers.\n+        # (Post-segwit activation, blocks won't propagate from node0 to node1\n+        # automatically, so don't bother testing a block announced to node0.)\n+        print(\"\\tTesting end-to-end block relay...\")\n+        self.request_cb_announcements(self.test_node, self.nodes[0], 1)\n+        self.request_cb_announcements(self.old_node, self.nodes[1], 1)\n+        self.request_cb_announcements(self.segwit_node, self.nodes[1], 2)\n+        self.test_end_to_end_block_relay(self.nodes[1], [self.segwit_node, self.test_node, self.old_node])\n+\n+        print(\"\\tTesting invalid index in cmpctblock message...\")\n         self.test_invalid_cmpctblock_message()\n \n "
      },
      {
        "sha": "c2ea20bb845c870552ac50d4c3c34b4870a3d4e3",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -912,14 +912,6 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # But eliminating the witness should fix it\n         self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n \n-        # Verify that inv's to test_node come with getdata's for non-witness tx's\n-        # Just tweak the transaction, announce it, and verify we get a getdata\n-        # for a normal tx\n-        tx.vout[0].scriptPubKey = CScript([OP_TRUE, OP_TRUE])\n-        tx.rehash()\n-        self.test_node.announce_tx_and_wait_for_getdata(tx)\n-        assert(self.test_node.last_getdata.inv[0].type == 1)\n-\n         # Cleanup: mine the first transaction and update utxo\n         self.nodes[0].generate(1)\n         assert_equal(len(self.nodes[0].getrawmempool()),  0)\n@@ -1025,7 +1017,7 @@ def test_tx_relay_after_segwit_activation(self):\n     def test_block_relay(self, segwit_activated):\n         print(\"\\tTesting block relay\")\n \n-        blocktype = 2|MSG_WITNESS_FLAG if segwit_activated else 2\n+        blocktype = 2|MSG_WITNESS_FLAG\n \n         # test_node has set NODE_WITNESS, so all getdata requests should be for\n         # witness blocks."
      },
      {
        "sha": "4d238c08d9c3fcd270725105bd8eabff2a28fadc",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 34,
        "deletions": 7,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -452,7 +452,7 @@ def deserialize(self, f):\n         else:\n             self.vout = deser_vector(f, CTxOut)\n         if flags != 0:\n-            self.wit.vtxinwit = [CTxInWitness()]*len(self.vin)\n+            self.wit.vtxinwit = [CTxInWitness() for i in range(len(self.vin))]\n             self.wit.deserialize(f)\n         self.nLockTime = struct.unpack(\"<I\", f.read(4))[0]\n         self.sha256 = None\n@@ -518,8 +518,8 @@ def is_valid(self):\n         return True\n \n     def __repr__(self):\n-        return \"CTransaction(nVersion=%i vin=%s vout=%s nLockTime=%i)\" \\\n-            % (self.nVersion, repr(self.vin), repr(self.vout), self.nLockTime)\n+        return \"CTransaction(nVersion=%i vin=%s vout=%s wit=%s nLockTime=%i)\" \\\n+            % (self.nVersion, repr(self.vin), repr(self.vout), repr(self.wit), self.nLockTime)\n \n \n class CBlockHeader(object):\n@@ -755,6 +755,9 @@ def serialize(self, with_witness=False):\n             r += self.tx.serialize_without_witness()\n         return r\n \n+    def serialize_with_witness(self):\n+        return self.serialize(with_witness=True)\n+\n     def __repr__(self):\n         return \"PrefilledTransaction(index=%d, tx=%s)\" % (self.index, repr(self.tx))\n \n@@ -779,6 +782,7 @@ def deserialize(self, f):\n         self.prefilled_txn = deser_vector(f, PrefilledTransaction)\n         self.prefilled_txn_length = len(self.prefilled_txn)\n \n+    # When using version 2 compact blocks, we must serialize with_witness.\n     def serialize(self, with_witness=False):\n         r = b\"\"\n         r += self.header.serialize()\n@@ -787,12 +791,20 @@ def serialize(self, with_witness=False):\n         for x in self.shortids:\n             # We only want the first 6 bytes\n             r += struct.pack(\"<Q\", x)[0:6]\n-        r += ser_vector(self.prefilled_txn)\n+        if with_witness:\n+            r += ser_vector(self.prefilled_txn, \"serialize_with_witness\")\n+        else:\n+            r += ser_vector(self.prefilled_txn)\n         return r\n \n     def __repr__(self):\n         return \"P2PHeaderAndShortIDs(header=%s, nonce=%d, shortids_length=%d, shortids=%s, prefilled_txn_length=%d, prefilledtxn=%s\" % (repr(self.header), self.nonce, self.shortids_length, repr(self.shortids), self.prefilled_txn_length, repr(self.prefilled_txn))\n \n+# P2P version of the above that will use witness serialization (for compact\n+# block version 2)\n+class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):\n+    def serialize(self):\n+        return super(P2PHeaderAndShortWitnessIDs, self).serialize(with_witness=True)\n \n # Calculate the BIP 152-compact blocks shortid for a given transaction hash\n def calculate_shortid(k0, k1, tx_hash):\n@@ -808,6 +820,7 @@ def __init__(self, p2pheaders_and_shortids = None):\n         self.nonce = 0\n         self.shortids = []\n         self.prefilled_txn = []\n+        self.use_witness = False\n \n         if p2pheaders_and_shortids != None:\n             self.header = p2pheaders_and_shortids.header\n@@ -819,7 +832,10 @@ def __init__(self, p2pheaders_and_shortids = None):\n                 last_index = self.prefilled_txn[-1].index\n \n     def to_p2p(self):\n-        ret = P2PHeaderAndShortIDs()\n+        if self.use_witness:\n+            ret = P2PHeaderAndShortWitnessIDs()\n+        else:\n+            ret = P2PHeaderAndShortIDs()\n         ret.header = self.header\n         ret.nonce = self.nonce\n         ret.shortids_length = len(self.shortids)\n@@ -840,15 +856,20 @@ def get_siphash_keys(self):\n         key1 = struct.unpack(\"<Q\", hash_header_nonce_as_str[8:16])[0]\n         return [ key0, key1 ]\n \n-    def initialize_from_block(self, block, nonce=0, prefill_list = [0]):\n+    # Version 2 compact blocks use wtxid in shortids (rather than txid)\n+    def initialize_from_block(self, block, nonce=0, prefill_list = [0], use_witness = False):\n         self.header = CBlockHeader(block)\n         self.nonce = nonce\n         self.prefilled_txn = [ PrefilledTransaction(i, block.vtx[i]) for i in prefill_list ]\n         self.shortids = []\n+        self.use_witness = use_witness\n         [k0, k1] = self.get_siphash_keys()\n         for i in range(len(block.vtx)):\n             if i not in prefill_list:\n-                self.shortids.append(calculate_shortid(k0, k1, block.vtx[i].sha256))\n+                tx_hash = block.vtx[i].sha256\n+                if use_witness:\n+                    tx_hash = block.vtx[i].calc_sha256(with_witness=True)\n+                self.shortids.append(calculate_shortid(k0, k1, tx_hash))\n \n     def __repr__(self):\n         return \"HeaderAndShortIDs(header=%s, nonce=%d, shortids=%s, prefilledtxn=%s\" % (repr(self.header), self.nonce, repr(self.shortids), repr(self.prefilled_txn))\n@@ -1424,6 +1445,12 @@ def serialize(self):\n     def __repr__(self):\n         return \"msg_blocktxn(block_transactions=%s)\" % (repr(self.block_transactions))\n \n+class msg_witness_blocktxn(msg_blocktxn):\n+    def serialize(self):\n+        r = b\"\"\n+        r += self.block_transactions.serialize(with_witness=True)\n+        return r\n+\n # This is what a callback should look like for NodeConn\n # Reimplement the on_* functions to provide handling for events\n class NodeConnCB(object):"
      },
      {
        "sha": "93d3fa372b3c074b87400cfd43cb63c0cc7a52d2",
        "filename": "src/blockencodings.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/blockencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/blockencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.cpp?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -17,15 +17,15 @@\n \n #define MIN_TRANSACTION_BASE_SIZE (::GetSerializeSize(CTransaction(), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS))\n \n-CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block) :\n+CBlockHeaderAndShortTxIDs::CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID) :\n         nonce(GetRand(std::numeric_limits<uint64_t>::max())),\n         shorttxids(block.vtx.size() - 1), prefilledtxn(1), header(block) {\n     FillShortTxIDSelector();\n     //TODO: Use our mempool prior to block acceptance to predictively fill more than just the coinbase\n     prefilledtxn[0] = {0, block.vtx[0]};\n     for (size_t i = 1; i < block.vtx.size(); i++) {\n         const CTransaction& tx = block.vtx[i];\n-        shorttxids[i - 1] = GetShortID(tx.GetHash());\n+        shorttxids[i - 1] = GetShortID(fUseWTXID ? tx.GetWitnessHash() : tx.GetHash());\n     }\n }\n "
      },
      {
        "sha": "99b1cb140d0a4c18484953d210b2d9d4bc16ec3c",
        "filename": "src/blockencodings.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/blockencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/blockencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/blockencodings.h?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -146,7 +146,7 @@ class CBlockHeaderAndShortTxIDs {\n     // Dummy for deserialization\n     CBlockHeaderAndShortTxIDs() {}\n \n-    CBlockHeaderAndShortTxIDs(const CBlock& block);\n+    CBlockHeaderAndShortTxIDs(const CBlock& block, bool fUseWTXID);\n \n     uint64_t GetShortID(const uint256& txhash) const;\n "
      },
      {
        "sha": "c92a38be98f23f5bbdf59c8ee27b09f540d768a7",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 23,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -289,10 +289,21 @@ struct CNodeState {\n     bool fPreferHeaders;\n     //! Whether this peer wants invs or cmpctblocks (when possible) for block announcements.\n     bool fPreferHeaderAndIDs;\n-    //! Whether this peer will send us cmpctblocks if we request them\n+    /**\n+      * Whether this peer will send us cmpctblocks if we request them.\n+      * This is not used to gate request logic, as we really only care about fSupportsDesiredCmpctVersion,\n+      * but is used as a flag to \"lock in\" the version of compact blocks (fWantsCmpctWitness) we send.\n+      */\n     bool fProvidesHeaderAndIDs;\n     //! Whether this peer can give us witnesses\n     bool fHaveWitness;\n+    //! Whether this peer wants witnesses in cmpctblocks/blocktxns\n+    bool fWantsCmpctWitness;\n+    /**\n+     * If we've announced NODE_WITNESS to this peer: whether the peer sends witnesses in cmpctblocks/blocktxns,\n+     * otherwise: whether this peer sends non-witnesses in cmpctblocks/blocktxns.\n+     */\n+    bool fSupportsDesiredCmpctVersion;\n \n     CNodeState() {\n         fCurrentlyConnected = false;\n@@ -313,6 +324,8 @@ struct CNodeState {\n         fPreferHeaderAndIDs = false;\n         fProvidesHeaderAndIDs = false;\n         fHaveWitness = false;\n+        fWantsCmpctWitness = false;\n+        fSupportsDesiredCmpctVersion = false;\n     }\n };\n \n@@ -467,16 +480,16 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n }\n \n void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pfrom, CConnman& connman) {\n-    if (pfrom->GetLocalServices() & NODE_WITNESS) {\n-        // Don't ever request compact blocks when segwit is enabled.\n+    if (!nodestate->fSupportsDesiredCmpctVersion) {\n+        // Never ask from peers who can't provide witnesses.\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n         BOOST_FOREACH(const NodeId nodeid, lNodesAnnouncingHeaderAndIDs)\n             if (nodeid == pfrom->GetId())\n                 return;\n         bool fAnnounceUsingCMPCTBLOCK = false;\n-        uint64_t nCMPCTBLOCKVersion = 1;\n+        uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n         if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n             // As per BIP152, we only get 3 of our peers to announce\n             // blocks using compact encodings.\n@@ -4856,11 +4869,12 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // they wont have a useful mempool to match against a compact block,\n                         // and we don't feel like constructing the object for them, so\n                         // instead we respond with the full, non-compact block.\n+                        bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n                         if (mi->second->nHeight >= chainActive.Height() - 10) {\n-                            CBlockHeaderAndShortTxIDs cmpctblock(block);\n-                            pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n+                            CBlockHeaderAndShortTxIDs cmpctblock(block, fPeerWantsWitness);\n+                            pfrom->PushMessageWithFlag(fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                         } else\n-                            pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n+                            pfrom->PushMessageWithFlag(fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCK, block);\n                     }\n \n                     // Trigger the peer node to send a getblocks request for the next batch of inventory\n@@ -4922,7 +4936,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n \n uint32_t GetFetchFlags(CNode* pfrom, CBlockIndex* pprev, const Consensus::Params& chainparams) {\n     uint32_t nFetchFlags = 0;\n-    if (IsWitnessEnabled(pprev, chainparams) && State(pfrom->GetId())->fHaveWitness) {\n+    if ((pfrom->GetLocalServices() & NODE_WITNESS) && State(pfrom->GetId())->fHaveWitness) {\n         nFetchFlags |= MSG_WITNESS_FLAG;\n     }\n     return nFetchFlags;\n@@ -5128,13 +5142,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(NetMsgType::SENDHEADERS);\n         }\n         if (pfrom->nVersion >= SHORT_IDS_BLOCKS_VERSION) {\n-            // Tell our peer we are willing to provide version-1 cmpctblocks\n+            // Tell our peer we are willing to provide version 1 or 2 cmpctblocks\n             // However, we do not request new block announcements using\n             // cmpctblock messages.\n             // We send this to non-NODE NETWORK peers as well, because\n             // they may wish to request compact blocks from us\n             bool fAnnounceUsingCMPCTBLOCK = false;\n-            uint64_t nCMPCTBLOCKVersion = 1;\n+            uint64_t nCMPCTBLOCKVersion = 2;\n+            if (pfrom->GetLocalServices() & NODE_WITNESS)\n+                pfrom->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n+            nCMPCTBLOCKVersion = 1;\n             pfrom->PushMessage(NetMsgType::SENDCMPCT, fAnnounceUsingCMPCTBLOCK, nCMPCTBLOCKVersion);\n         }\n     }\n@@ -5195,12 +5212,23 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n     else if (strCommand == NetMsgType::SENDCMPCT)\n     {\n         bool fAnnounceUsingCMPCTBLOCK = false;\n-        uint64_t nCMPCTBLOCKVersion = 1;\n+        uint64_t nCMPCTBLOCKVersion = 0;\n         vRecv >> fAnnounceUsingCMPCTBLOCK >> nCMPCTBLOCKVersion;\n-        if (nCMPCTBLOCKVersion == 1) {\n+        if (nCMPCTBLOCKVersion == 1 || ((pfrom->GetLocalServices() & NODE_WITNESS) && nCMPCTBLOCKVersion == 2)) {\n             LOCK(cs_main);\n-            State(pfrom->GetId())->fProvidesHeaderAndIDs = true;\n-            State(pfrom->GetId())->fPreferHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;\n+            // fProvidesHeaderAndIDs is used to \"lock in\" version of compact blocks we send (fWantsCmpctWitness)\n+            if (!State(pfrom->GetId())->fProvidesHeaderAndIDs) {\n+                State(pfrom->GetId())->fProvidesHeaderAndIDs = true;\n+                State(pfrom->GetId())->fWantsCmpctWitness = nCMPCTBLOCKVersion == 2;\n+            }\n+            if (State(pfrom->GetId())->fWantsCmpctWitness == (nCMPCTBLOCKVersion == 2)) // ignore later version announces\n+                State(pfrom->GetId())->fPreferHeaderAndIDs = fAnnounceUsingCMPCTBLOCK;\n+            if (!State(pfrom->GetId())->fSupportsDesiredCmpctVersion) {\n+                if (pfrom->GetLocalServices() & NODE_WITNESS)\n+                    State(pfrom->GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 2);\n+                else\n+                    State(pfrom->GetId())->fSupportsDesiredCmpctVersion = (nCMPCTBLOCKVersion == 1);\n+            }\n         }\n     }\n \n@@ -5258,7 +5286,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                         nodestate->nBlocksInFlight < MAX_BLOCKS_IN_TRANSIT_PER_PEER &&\n                         (!IsWitnessEnabled(chainActive.Tip(), chainparams.GetConsensus()) || State(pfrom->GetId())->fHaveWitness)) {\n                         inv.type |= nFetchFlags;\n-                        if (nodestate->fProvidesHeaderAndIDs && !(pfrom->GetLocalServices() & NODE_WITNESS))\n+                        if (nodestate->fSupportsDesiredCmpctVersion)\n                             vToFetch.push_back(CInv(MSG_CMPCT_BLOCK, inv.hash));\n                         else\n                             vToFetch.push_back(inv);\n@@ -5386,7 +5414,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             }\n             resp.txn[i] = block.vtx[req.indexes[i]];\n         }\n-        pfrom->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCKTXN, resp);\n+        pfrom->PushMessageWithFlag(State(pfrom->GetId())->fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::BLOCKTXN, resp);\n     }\n \n \n@@ -5650,7 +5678,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // We requested this block for some reason, but our mempool will probably be useless\n                 // so we just grab the block via normal getdata\n                 std::vector<CInv> vInv(1);\n-                vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus()), cmpctblock.header.GetHash());\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n             }\n             return true;\n@@ -5662,6 +5690,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         CNodeState *nodestate = State(pfrom->GetId());\n \n+        if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus()) && !nodestate->fSupportsDesiredCmpctVersion) {\n+            // Don't bother trying to process compact blocks from v1 peers\n+            // after segwit activates.\n+            return true;\n+        }\n+\n         // We want to be a bit conservative just to be extra careful about DoS\n         // possibilities in compact block processing...\n         if (pindex->nHeight <= chainActive.Height() + 2) {\n@@ -5688,7 +5722,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 } else if (status == READ_STATUS_FAILED) {\n                     // Duplicate txindexes, the block is now in-flight, so just request it\n                     std::vector<CInv> vInv(1);\n-                    vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                    vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus()), cmpctblock.header.GetHash());\n                     pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n                     return true;\n                 }\n@@ -5715,7 +5749,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 // We requested this block, but its far into the future, so our\n                 // mempool will probably be useless - request the block normally\n                 std::vector<CInv> vInv(1);\n-                vInv[0] = CInv(MSG_BLOCK, cmpctblock.header.GetHash());\n+                vInv[0] = CInv(MSG_BLOCK | GetFetchFlags(pfrom, pindex->pprev, chainparams.GetConsensus()), cmpctblock.header.GetHash());\n                 pfrom->PushMessage(NetMsgType::GETDATA, vInv);\n                 return true;\n             } else {\n@@ -5757,7 +5791,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         } else if (status == READ_STATUS_FAILED) {\n             // Might have collided, fall back to getdata now :(\n             std::vector<CInv> invs;\n-            invs.push_back(CInv(MSG_BLOCK, resp.blockhash));\n+            invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n             CValidationState state;\n@@ -5906,7 +5940,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                             pindexLast->GetBlockHash().ToString(), pindexLast->nHeight);\n                 }\n                 if (vGetData.size() > 0) {\n-                    if (nodestate->fProvidesHeaderAndIDs && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN) && !(pfrom->GetLocalServices() & NODE_WITNESS)) {\n+                    if (nodestate->fSupportsDesiredCmpctVersion && vGetData.size() == 1 && mapBlocksInFlight.size() == 1 && pindexLast->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n                         // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n                         // with this block! Let's get them to announce using compact blocks in the future.\n                         MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n@@ -6536,8 +6570,8 @@ bool SendMessages(CNode* pto, CConnman& connman)\n                     //TODO: Shouldn't need to reload block from disk, but requires refactor\n                     CBlock block;\n                     assert(ReadBlockFromDisk(block, pBestIndex, consensusParams));\n-                    CBlockHeaderAndShortTxIDs cmpctblock(block);\n-                    pto->PushMessageWithFlag(SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n+                    CBlockHeaderAndShortTxIDs cmpctblock(block, state.fWantsCmpctWitness);\n+                    pto->PushMessageWithFlag(state.fWantsCmpctWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                     state.pindexBestHeaderSent = pBestIndex;\n                 } else if (state.fPreferHeaders) {\n                     if (vHeaders.size() > 1) {"
      },
      {
        "sha": "7530b013bd28517ce830cd14034e4e38c0f4d4ea",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -64,7 +64,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n \n     // Do a simple ShortTxIDs RT\n     {\n-        CBlockHeaderAndShortTxIDs shortIDs(block);\n+        CBlockHeaderAndShortTxIDs shortIDs(block, true);\n \n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n         stream << shortIDs;\n@@ -116,7 +116,7 @@ class TestHeaderAndShortIDs {\n         stream >> *this;\n     }\n     TestHeaderAndShortIDs(const CBlock& block) :\n-        TestHeaderAndShortIDs(CBlockHeaderAndShortTxIDs(block)) {}\n+        TestHeaderAndShortIDs(CBlockHeaderAndShortTxIDs(block, true)) {}\n \n     uint64_t GetShortID(const uint256& txhash) const {\n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n@@ -267,7 +267,7 @@ BOOST_AUTO_TEST_CASE(EmptyBlockRoundTripTest)\n \n     // Test simple header round-trip with only coinbase\n     {\n-        CBlockHeaderAndShortTxIDs shortIDs(block);\n+        CBlockHeaderAndShortTxIDs shortIDs(block, false);\n \n         CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n         stream << shortIDs;"
      },
      {
        "sha": "15fa6fbca3b09d41c23c9203d7371c08de874b2c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -444,7 +444,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     totalTxSize += entry.GetTxSize();\n     minerPolicyEstimator->processTransaction(entry, fCurrentEstimate);\n \n-    vTxHashes.emplace_back(hash, newit);\n+    vTxHashes.emplace_back(tx.GetWitnessHash(), newit);\n     newit->vTxHashesIdx = vTxHashes.size() - 1;\n \n     return true;"
      },
      {
        "sha": "941644b2b21c1dbb729f6d5a9950c277c8b907d6",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6429cfa8a70308241c576aeb92ffe3db5203b2ef/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "patch": "@@ -465,7 +465,7 @@ class CTxMemPool\n     indexed_transaction_set mapTx;\n \n     typedef indexed_transaction_set::nth_index<0>::type::iterator txiter;\n-    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx hashes/entries in mapTx, in random order\n+    std::vector<std::pair<uint256, txiter> > vTxHashes; //!< All tx witness hashes/entries in mapTx, in random order\n \n     struct CompareIteratorByHash {\n         bool operator()(const txiter &a, const txiter &b) const {"
      }
    ]
  },
  {
    "sha": "bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjhlNjhhYmE2OGQ3YzZhNGMxN2E1YzA1ZmEzZmE2MWE4ZGEyYmRk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-10T14:52:39Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-10T14:52:44Z"
      },
      "message": "Merge #8821: [qt] sync-overlay: Don't block during reindex\n\nfa85e86 [qt] sync-overlay: Don't show estimated number of headers left (MarcoFalke)\nfaa4de2 [qt] sync-overlay: Don't block during reindex (MarcoFalke)",
      "tree": {
        "sha": "085b6a3e97a0273ea3d198a6da5e285008f074a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/085b6a3e97a0273ea3d198a6da5e285008f074a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJX+6s8AAoJECnUvLZBb1Ps3zEP/iB7+z7u5wTMleb6DCbUD/19\nDYciYLvQWQ+3RLVGIiE9mXcb1Jf56UPFcDFajCb2IL+YsscEobnrFHcZPAZ5+UXa\n8U6xZ2RUoL7OTP0nR2dTqh+TsvElrZDz862G4hTAxNS534tPDnF+5aHTE3n92GKR\nj2M++vVY/QuLoWNxEg6xqI+i5Vs0ixOHg4YVNdOdLSF8TvPs3VIOoyzp+9SMV3ob\nnXNZ7cpA+h3bTOruJv1s6Rzh+0jtzjzn0Jo94FnwtDz4uur4PLk+rnoSm3hmc9Uw\ntNNpoLMA/10WBGOv2GMC86zqPtbmAp/Yjj9aJp4p0HgaRNyzT1qZaVjkVq/LW/J+\nYyP0DlOhg4pbNJ9KxytMSkNhojGN31kj95yO9En80yKj+NpDJxYRS7N4wqGkk2au\n3Bx4+laQOnR9AK3d6eYoEd8xNyJlI2hCXUwuzUHhRzkdrly2UFyMB/IsCBGwNV6f\nJnSPmaWyRSiZ1CDc8JOmnMVqPhAk7E4klcHGrgdOVE5d7JkA9fBM+RYrkEGaXhg6\nWJvF15oAXDf8+ClyqqDk6zG6D0QOFBlDxOMpN2fdttqsU7ljNs4ZGc5sYwvA31pS\nWA6SUV2jJlkYH5IjxAjS9lWN1StpU53QyVqxLBlAGlIzxqKGv4GyKZcDTwAXFd5w\nsjzanVsFofRVyuGUvI48\n=MXb3\n-----END PGP SIGNATURE-----",
        "payload": "tree 085b6a3e97a0273ea3d198a6da5e285008f074a5\nparent 6429cfa8a70308241c576aeb92ffe3db5203b2ef\nparent fa85e860a9261e6c585ec40e67845fa93a20c6e7\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1476111159 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476111164 +0200\n\nMerge #8821: [qt] sync-overlay: Don't block during reindex\n\nfa85e86 [qt] sync-overlay: Don't show estimated number of headers left (MarcoFalke)\nfaa4de2 [qt] sync-overlay: Don't block during reindex (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6429cfa8a70308241c576aeb92ffe3db5203b2ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6429cfa8a70308241c576aeb92ffe3db5203b2ef"
      },
      {
        "sha": "fa85e860a9261e6c585ec40e67845fa93a20c6e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa85e860a9261e6c585ec40e67845fa93a20c6e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa85e860a9261e6c585ec40e67845fa93a20c6e7"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 21,
      "deletions": 14
    },
    "files": [
      {
        "sha": "87704c641d489ad2717149fc35f00c640f518f57",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "patch": "@@ -256,7 +256,7 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     int64_t& nLastUpdateNotification = fHeader ? nLastHeaderTipUpdateNotification : nLastBlockTipUpdateNotification;\n \n     // if we are in-sync, update the UI regardless of last update time\n-    if (fHeader || !initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n+    if (!initialSync || now - nLastUpdateNotification > MODEL_UPDATE_DELAY) {\n         //pass a async signal to the UI thread\n         QMetaObject::invokeMethod(clientmodel, \"numBlocksChanged\", Qt::QueuedConnection,\n                                   Q_ARG(int, pIndex->nHeight),"
      },
      {
        "sha": "5caade7d381c926cd22c3ca16fd0d326a581f610",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 12,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "patch": "@@ -13,7 +13,8 @@\n ModalOverlay::ModalOverlay(QWidget *parent) :\n QWidget(parent),\n ui(new Ui::ModalOverlay),\n-bestBlockHeight(0),\n+bestHeaderHeight(0),\n+bestHeaderDate(QDateTime()),\n layerIsVisible(false),\n userClosed(false)\n {\n@@ -65,14 +66,9 @@ bool ModalOverlay::event(QEvent* ev) {\n \n void ModalOverlay::setKnownBestHeight(int count, const QDateTime& blockDate)\n {\n-\n-    /* only update the blockheight if the headerschain-tip is not older then 30 days */\n-    int64_t now = QDateTime::currentDateTime().toTime_t();\n-    int64_t btime = blockDate.toTime_t();\n-    if (btime+3600*24*30 > now)\n-    {\n-        if (count > bestBlockHeight)\n-            bestBlockHeight = count;\n+    if (count > bestHeaderHeight) {\n+        bestHeaderHeight = count;\n+        bestHeaderDate = blockDate;\n     }\n }\n \n@@ -125,11 +121,21 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     ui->percentageProgress->setText(QString::number(nVerificationProgress*100, 'f', 2)+\"%\");\n     ui->progressBar->setValue(nVerificationProgress*100);\n \n+    if (!bestHeaderDate.isValid())\n+        // not syncing\n+        return;\n+\n+    // estimate the number of headers left based on nPowTargetSpacing\n+    // and check if the gui is not aware of the the best header (happens rarely)\n+    int estimateNumHeadersLeft = bestHeaderDate.secsTo(currentDate) / 600;\n+    bool hasBestHeader = bestHeaderHeight >= count;\n+\n     // show remaining number of blocks\n-    if (bestBlockHeight > 0)\n-        ui->numberOfBlocksLeft->setText(QString::number(bestBlockHeight-count));\n-    else\n+    if (estimateNumHeadersLeft < 24 && hasBestHeader) {\n+        ui->numberOfBlocksLeft->setText(QString::number(bestHeaderHeight - count));\n+    } else {\n         ui->expectedTimeLeft->setText(tr(\"Unknown. Syncing Headers...\"));\n+    }\n }\n \n void ModalOverlay::showHide(bool hide, bool userRequested)"
      },
      {
        "sha": "66c0aa78cfb958592d9b7a5fca699ff5283a62c6",
        "filename": "src/qt/modaloverlay.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd/src/qt/modaloverlay.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd/src/qt/modaloverlay.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.h?ref=bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "patch": "@@ -35,7 +35,8 @@ public Q_SLOTS:\n \n private:\n     Ui::ModalOverlay *ui;\n-    int bestBlockHeight; //best known height (based on the headers)\n+    int bestHeaderHeight; //best known height (based on the headers)\n+    QDateTime bestHeaderDate;\n     QVector<QPair<qint64, double> > blockProcessTime;\n     bool layerIsVisible;\n     bool userClosed;"
      }
    ]
  },
  {
    "sha": "fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWZlZWMzY2YyY2ViNTMzMGEwNDUzOWFkYzkwYjI3ZGM3ZTZmZDQy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-09-27T18:52:16Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-10T15:07:43Z"
      },
      "message": "[qt] sync-overlay: Don't show progress twice\n\n* Don't show integer progress in progress bar. (Already shown in front\n  of progress bar)\n\n* Also, use non-static method to get current msecs",
      "tree": {
        "sha": "38406e756b6f89a69504bb5e0f9935d8714bfd84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38406e756b6f89a69504bb5e0f9935d8714bfd84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "73223735f5c6bd7ebb167bee03e50e4afe892bb9",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
        "patch": "@@ -276,6 +276,9 @@ QLabel { color: rgb(40,40,40);  }</string>\n                <property name=\"value\">\n                 <number>24</number>\n                </property>\n+               <property name=\"format\">\n+                <string/>\n+               </property>\n               </widget>\n              </item>\n             </layout>"
      },
      {
        "sha": "ae0d8f5f6367613d5ee0f8b12d7383ad1bfed1be",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
        "patch": "@@ -77,7 +77,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     QDateTime currentDate = QDateTime::currentDateTime();\n \n     // keep a vector of samples of verification progress at height\n-    blockProcessTime.push_front(qMakePair(currentDate.currentMSecsSinceEpoch(), nVerificationProgress));\n+    blockProcessTime.push_front(qMakePair(currentDate.toMSecsSinceEpoch(), nVerificationProgress));\n \n     // show progress speed if we have more then one sample\n     if (blockProcessTime.size() >= 2)\n@@ -93,8 +93,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n             QPair<qint64, double> sample = blockProcessTime[i];\n \n             // take first sample after 500 seconds or last available one\n-            if (sample.first < (currentDate.currentMSecsSinceEpoch() - 500*1000) || i == blockProcessTime.size()-1)\n-            {\n+            if (sample.first < (currentDate.toMSecsSinceEpoch() - 500 * 1000) || i == blockProcessTime.size() - 1) {\n                 progressDelta = progressStart-sample.second;\n                 timeDelta = blockProcessTime[0].first - sample.first;\n                 progressPerHour = progressDelta/(double)timeDelta*1000*3600;\n@@ -108,7 +107,6 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n         // show expected remaining time\n         ui->expectedTimeLeft->setText(GUIUtil::formateNiceTimeOffset(remainingMSecs/1000.0));\n \n-        // keep maximal 5000 samples\n         static const int MAX_SAMPLES = 5000;\n         if (blockProcessTime.count() > MAX_SAMPLES)\n             blockProcessTime.remove(MAX_SAMPLES, blockProcessTime.count()-MAX_SAMPLES);"
      }
    ]
  },
  {
    "sha": "4cdece40419bcc97345357f9268e03b0aff400b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2RlY2U0MDQxOWJjYzk3MzQ1MzU3ZjkyNjhlMDNiMGFmZjQwMGI1",
    "commit": {
      "author": {
        "name": "Dagur Valberg Johannsson",
        "email": "dagurval@pvv.ntnu.no",
        "date": "2016-10-09T19:47:55Z"
      },
      "committer": {
        "name": "Dagur Valberg Johannsson",
        "email": "dagurval@pvv.ntnu.no",
        "date": "2016-10-10T17:37:16Z"
      },
      "message": "[qa] Fix compact block shortids for a test case",
      "tree": {
        "sha": "a98dbfe9bc3004a618233ce1f575404d2b9fe2dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a98dbfe9bc3004a618233ce1f575404d2b9fe2dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cdece40419bcc97345357f9268e03b0aff400b5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cdece40419bcc97345357f9268e03b0aff400b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cdece40419bcc97345357f9268e03b0aff400b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cdece40419bcc97345357f9268e03b0aff400b5/comments",
    "author": {
      "login": "dagurval",
      "id": 92707,
      "node_id": "MDQ6VXNlcjkyNzA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/92707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dagurval",
      "html_url": "https://github.com/dagurval",
      "followers_url": "https://api.github.com/users/dagurval/followers",
      "following_url": "https://api.github.com/users/dagurval/following{/other_user}",
      "gists_url": "https://api.github.com/users/dagurval/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dagurval/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dagurval/subscriptions",
      "organizations_url": "https://api.github.com/users/dagurval/orgs",
      "repos_url": "https://api.github.com/users/dagurval/repos",
      "events_url": "https://api.github.com/users/dagurval/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dagurval/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dagurval",
      "id": 92707,
      "node_id": "MDQ6VXNlcjkyNzA3",
      "avatar_url": "https://avatars.githubusercontent.com/u/92707?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dagurval",
      "html_url": "https://github.com/dagurval",
      "followers_url": "https://api.github.com/users/dagurval/followers",
      "following_url": "https://api.github.com/users/dagurval/following{/other_user}",
      "gists_url": "https://api.github.com/users/dagurval/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dagurval/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dagurval/subscriptions",
      "organizations_url": "https://api.github.com/users/dagurval/orgs",
      "repos_url": "https://api.github.com/users/dagurval/repos",
      "events_url": "https://api.github.com/users/dagurval/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dagurval/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "97e7190d16f1354b1b77620bda1ed7568a0bee71",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cdece40419bcc97345357f9268e03b0aff400b5/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cdece40419bcc97345357f9268e03b0aff400b5/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=4cdece40419bcc97345357f9268e03b0aff400b5",
        "patch": "@@ -382,7 +382,9 @@ def test_compactblock_requests(self, node, test_node):\n             comp_block = HeaderAndShortIDs()\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n-            comp_block.shortids = [1]  # this is useless, and wrong\n+            [k0, k1] = comp_block.get_siphash_keys()\n+            comp_block.shortids = [\n+                    calculate_shortid(k0, k1, block.vtx[0].sha256) ]\n             test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message."
      }
    ]
  },
  {
    "sha": "d0754799698de2c032abcb8198ee5d5401063213",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDc1NDc5OTY5OGRlMmMwMzJhYmNiODE5OGVlNWQ1NDAxMDYzMjEz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-11T08:49:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-11T08:50:22Z"
      },
      "message": "Merge #8882: [qa] Fix race conditions in p2p-compactblocks.py and sendheaders.py\n\nb55d941 [qa] Fix race condition in sendheaders.py (Suhas Daftuar)\n6976db2 [qa] Another attempt to fix race condition in p2p-compactblocks.py (Suhas Daftuar)",
      "tree": {
        "sha": "45c09460423a0a0ecf82d905b57cee1b3d65328b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45c09460423a0a0ecf82d905b57cee1b3d65328b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0754799698de2c032abcb8198ee5d5401063213",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJX/KfOAAoJEC1/I3LlD+E3sLsIAJlio/V+l7H4n56vI50ELtPd\nnhJrxhJQ7yknY+UfiaTjx15Nnp2bMPw4sapzQJc9/j+l5SlD+gZdeb+MsESQ2YEs\nXC6cwMjiCOsQuEry/HcCxuirPnoJqKiSZ5tJ2ySP9xEPzsusIlWC150kcdG1hTt4\nJUb8oj/SXHPPvc/+9DEk6WvlshMV0GtNGpcdcspaOa7JwK+CM3fz0Jj402CndGN6\nRhrrm47uwqEBz3birN6ZK0L7J1N01xEA14NjA5TcO/UtnRfT2GOwhzxTih0UuCer\niUao9YdtiwnY9XfDSfQOiFVo4hrRMcdbAv21BU5ofCWzbEvV6WW8ouig+RLaYTE=\n=jMMG\n-----END PGP SIGNATURE-----",
        "payload": "tree 45c09460423a0a0ecf82d905b57cee1b3d65328b\nparent bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd\nparent b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9\nauthor MarcoFalke <falke.marco@gmail.com> 1476175792 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1476175822 +0200\n\nMerge #8882: [qa] Fix race conditions in p2p-compactblocks.py and sendheaders.py\n\nb55d941 [qa] Fix race condition in sendheaders.py (Suhas Daftuar)\n6976db2 [qa] Another attempt to fix race condition in p2p-compactblocks.py (Suhas Daftuar)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0754799698de2c032abcb8198ee5d5401063213",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0754799698de2c032abcb8198ee5d5401063213",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0754799698de2c032abcb8198ee5d5401063213/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf8e68aba68d7c6a4c17a5c05fa3fa61a8da2bdd"
      },
      {
        "sha": "b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b55d9411e7e1aa36ddabba3b942f2e1c736c1bd9"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 48,
      "deletions": 44
    },
    "files": [
      {
        "sha": "cdcfb36e7bd301de9191d16b96b38ed07bb9427f",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0754799698de2c032abcb8198ee5d5401063213/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0754799698de2c032abcb8198ee5d5401063213/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=d0754799698de2c032abcb8198ee5d5401063213",
        "patch": "@@ -30,6 +30,10 @@ def __init__(self):\n         self.last_getblocktxn = None\n         self.last_block = None\n         self.last_blocktxn = None\n+        # Store the hashes of blocks we've seen announced.\n+        # This is for synchronizing the p2p message traffic,\n+        # so we can eg wait until a particular block is announced.\n+        self.set_announced_blockhashes = set()\n \n     def on_sendcmpct(self, conn, message):\n         self.last_sendcmpct.append(message)\n@@ -40,14 +44,22 @@ def on_block(self, conn, message):\n     def on_cmpctblock(self, conn, message):\n         self.last_cmpctblock = message\n         self.block_announced = True\n+        self.last_cmpctblock.header_and_shortids.header.calc_sha256()\n+        self.set_announced_blockhashes.add(self.last_cmpctblock.header_and_shortids.header.sha256)\n \n     def on_headers(self, conn, message):\n         self.last_headers = message\n         self.block_announced = True\n+        for x in self.last_headers.headers:\n+            x.calc_sha256()\n+            self.set_announced_blockhashes.add(x.sha256)\n \n     def on_inv(self, conn, message):\n         self.last_inv = message\n-        self.block_announced = True\n+        for x in self.last_inv.inv:\n+            if x.type == 2:\n+                self.block_announced = True\n+                self.set_announced_blockhashes.add(x.hash)\n \n     def on_getdata(self, conn, message):\n         self.last_getdata = message\n@@ -87,6 +99,12 @@ def request_headers_and_sync(self, locator, hashstop=0):\n         assert(self.received_block_announcement())\n         self.clear_block_announcement()\n \n+    # Block until a block announcement for a particular block hash is\n+    # received.\n+    def wait_for_block_announcement(self, block_hash, timeout=30):\n+        def received_hash():\n+            return (block_hash in self.set_announced_blockhashes)\n+        return wait_until(received_hash, timeout=timeout)\n \n class CompactBlocksTest(BitcoinTestFramework):\n     def __init__(self):\n@@ -278,7 +296,9 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         if use_witness_address:\n             assert(segwit_tx_generated) # check that our test is not broken\n \n-        self.test_node.sync_with_ping()\n+        # Wait until we've seen the block announcement for the resulting tip\n+        tip = int(self.nodes[0].getbestblockhash(), 16)\n+        assert(self.test_node.wait_for_block_announcement(tip))\n \n         # Now mine a block, and look at the resulting compact block.\n         test_node.clear_block_announcement()"
      },
      {
        "sha": "81b2442e6ae6713ca6aa7f65099460d76a0f15c3",
        "filename": "qa/rpc-tests/sendheaders.py",
        "status": "modified",
        "additions": 26,
        "deletions": 42,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0754799698de2c032abcb8198ee5d5401063213/qa/rpc-tests/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0754799698de2c032abcb8198ee5d5401063213/qa/rpc-tests/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/sendheaders.py?ref=d0754799698de2c032abcb8198ee5d5401063213",
        "patch": "@@ -80,30 +80,26 @@\n    Expect: disconnect.\n '''\n \n-class BaseNode(NodeConnCB):\n+direct_fetch_response_time = 0.05\n+\n+class BaseNode(SingleNodeConnCB):\n     def __init__(self):\n-        NodeConnCB.__init__(self)\n-        self.connection = None\n+        SingleNodeConnCB.__init__(self)\n         self.last_inv = None\n         self.last_headers = None\n         self.last_block = None\n-        self.ping_counter = 1\n-        self.last_pong = msg_pong(0)\n         self.last_getdata = None\n-        self.sleep_time = 0.05\n         self.block_announced = False\n         self.last_getheaders = None\n         self.disconnected = False\n+        self.last_blockhash_announced = None\n \n     def clear_last_announcement(self):\n         with mininode_lock:\n             self.block_announced = False\n             self.last_inv = None\n             self.last_headers = None\n \n-    def add_connection(self, conn):\n-        self.connection = conn\n-\n     # Request data for a list of block hashes\n     def get_data(self, block_hashes):\n         msg = msg_getdata()\n@@ -122,17 +118,17 @@ def send_block_inv(self, blockhash):\n         msg.inv = [CInv(2, blockhash)]\n         self.connection.send_message(msg)\n \n-    # Wrapper for the NodeConn's send_message function\n-    def send_message(self, message):\n-        self.connection.send_message(message)\n-\n     def on_inv(self, conn, message):\n         self.last_inv = message\n         self.block_announced = True\n+        self.last_blockhash_announced = message.inv[-1].hash\n \n     def on_headers(self, conn, message):\n         self.last_headers = message\n-        self.block_announced = True\n+        if len(message.headers):\n+            self.block_announced = True\n+            message.headers[-1].calc_sha256()\n+            self.last_blockhash_announced = message.headers[-1].sha256\n \n     def on_block(self, conn, message):\n         self.last_block = message.block\n@@ -141,9 +137,6 @@ def on_block(self, conn, message):\n     def on_getdata(self, conn, message):\n         self.last_getdata = message\n \n-    def on_pong(self, conn, message):\n-        self.last_pong = message\n-\n     def on_getheaders(self, conn, message):\n         self.last_getheaders = message\n \n@@ -157,7 +150,7 @@ def check_last_announcement(self, headers=None, inv=None):\n         expect_headers = headers if headers != None else []\n         expect_inv = inv if inv != None else []\n         test_function = lambda: self.block_announced\n-        self.sync(test_function)\n+        assert(wait_until(test_function, timeout=60))\n         with mininode_lock:\n             self.block_announced = False\n \n@@ -180,43 +173,32 @@ def check_last_announcement(self, headers=None, inv=None):\n         return success\n \n     # Syncing helpers\n-    def sync(self, test_function, timeout=60):\n-        while timeout > 0:\n-            with mininode_lock:\n-                if test_function():\n-                    return\n-            time.sleep(self.sleep_time)\n-            timeout -= self.sleep_time\n-        raise AssertionError(\"Sync failed to complete\")\n-        \n-    def sync_with_ping(self, timeout=60):\n-        self.send_message(msg_ping(nonce=self.ping_counter))\n-        test_function = lambda: self.last_pong.nonce == self.ping_counter\n-        self.sync(test_function, timeout)\n-        self.ping_counter += 1\n-        return\n-\n     def wait_for_block(self, blockhash, timeout=60):\n         test_function = lambda: self.last_block != None and self.last_block.sha256 == blockhash\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_getheaders(self, timeout=60):\n         test_function = lambda: self.last_getheaders != None\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_getdata(self, hash_list, timeout=60):\n         if hash_list == []:\n             return\n \n         test_function = lambda: self.last_getdata != None and [x.hash for x in self.last_getdata.inv] == hash_list\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def wait_for_disconnect(self, timeout=60):\n         test_function = lambda: self.disconnected\n-        self.sync(test_function, timeout)\n+        assert(wait_until(test_function, timeout=timeout))\n+        return\n+\n+    def wait_for_block_announcement(self, block_hash, timeout=60):\n+        test_function = lambda: self.last_blockhash_announced == block_hash\n+        assert(wait_until(test_function, timeout=timeout))\n         return\n \n     def send_header_for_blocks(self, new_blocks):\n@@ -266,7 +248,9 @@ def mine_blocks(self, count):\n     def mine_reorg(self, length):\n         self.nodes[0].generate(length) # make sure all invalidated blocks are node0's\n         sync_blocks(self.nodes, wait=0.1)\n-        [x.clear_last_announcement() for x in self.p2p_connections]\n+        for x in self.p2p_connections:\n+            x.wait_for_block_announcement(int(self.nodes[0].getbestblockhash(), 16))\n+            x.clear_last_announcement()\n \n         tip_height = self.nodes[1].getblockcount()\n         hash_to_invalidate = self.nodes[1].getblockhash(tip_height-(length-1))\n@@ -495,7 +479,7 @@ def run_test(self):\n \n         test_node.send_header_for_blocks(blocks)\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=test_node.sleep_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks], timeout=direct_fetch_response_time)\n \n         [ test_node.send_message(msg_block(x)) for x in blocks ]\n \n@@ -526,13 +510,13 @@ def run_test(self):\n         # both blocks (same work as tip)\n         test_node.send_header_for_blocks(blocks[1:2])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=test_node.sleep_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[0:2]], timeout=direct_fetch_response_time)\n \n         # Announcing 16 more headers should trigger direct fetch for 14 more\n         # blocks\n         test_node.send_header_for_blocks(blocks[2:18])\n         test_node.sync_with_ping()\n-        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=test_node.sleep_time)\n+        test_node.wait_for_getdata([x.sha256 for x in blocks[2:16]], timeout=direct_fetch_response_time)\n \n         # Announcing 1 more header should not trigger any response\n         test_node.last_getdata = None"
      }
    ]
  },
  {
    "sha": "8aed5f6c23cbaae6bf56be04f2b8d861eacf588d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YWVkNWY2YzIzY2JhYWU2YmY1NmJlMDRmMmI4ZDg2MWVhY2Y1ODhk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-11T15:41:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-11T15:46:46Z"
      },
      "message": "qt: Translate all files, even if wallet disabled\n\nThis passes all QT cpp files to the lupdate executable which extracts\ntranslations, no matter what conditional functionality is enabled.",
      "tree": {
        "sha": "7e1ce8924946b5e8266978b392c610cbc81cf2b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e1ce8924946b5e8266978b392c610cbc81cf2b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "072116fceb2294b97d1c40f79305f2e3ff71812b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/072116fceb2294b97d1c40f79305f2e3ff71812b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/072116fceb2294b97d1c40f79305f2e3ff71812b"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1f9a901d75882f84baf307f9accc53722e08a5a3",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=8aed5f6c23cbaae6bf56be04f2b8d861eacf588d",
        "patch": "@@ -289,7 +289,7 @@ RES_ICONS = \\\n   qt/res/icons/warning.png \\\n   qt/res/icons/verify.png\n \n-BITCOIN_QT_CPP = \\\n+BITCOIN_QT_BASE_CPP = \\\n   qt/bantablemodel.cpp \\\n   qt/bitcoinaddressvalidator.cpp \\\n   qt/bitcoinamountfield.cpp \\\n@@ -313,12 +313,9 @@ BITCOIN_QT_CPP = \\\n   qt/trafficgraphwidget.cpp \\\n   qt/utilitydialog.cpp\n \n-if TARGET_WINDOWS\n-BITCOIN_QT_CPP += qt/winshutdownmonitor.cpp\n-endif\n+BITCOIN_QT_WINDOWS_CPP = qt/winshutdownmonitor.cpp\n \n-if ENABLE_WALLET\n-BITCOIN_QT_CPP += \\\n+BITCOIN_QT_WALLET_CPP = \\\n   qt/addressbookpage.cpp \\\n   qt/addresstablemodel.cpp \\\n   qt/askpassphrasedialog.cpp \\\n@@ -345,6 +342,13 @@ BITCOIN_QT_CPP += \\\n   qt/walletmodel.cpp \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n+\n+BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n+if TARGET_WINDOWS\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n+endif\n+if ENABLE_WALLET\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n endif\n \n RES_IMAGES = \n@@ -413,7 +417,7 @@ $(srcdir)/qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_wal\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n \t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) PACKAGE_NAME=\"$(PACKAGE_NAME)\" COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" COPYRIGHT_HOLDERS_SUBSTITUTION=\"$(COPYRIGHT_HOLDERS_SUBSTITUTION)\" $(PYTHON) ../share/qt/extract_strings_qt.py $^\n \n-translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n+translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_BASE_CPP) $(BITCOIN_QT_WINDOWS_CPP) $(BITCOIN_QT_WALLET_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n \t@test -n $(LUPDATE) || echo \"lupdate is required for updating translations\"\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts $(srcdir)/qt/locale/bitcoin_en.ts\n "
      }
    ]
  },
  {
    "sha": "3f92bc9e83094421d4bfd3802fc98ac9e26405e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjkyYmM5ZTgzMDk0NDIxZDRiZmQzODAyZmM5OGFjOWUyNjQwNWUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-05T08:58:57Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T08:16:17Z"
      },
      "message": "doc: Add build instructions for FreeBSD",
      "tree": {
        "sha": "a276a3b2f8789953793de60eec38c198c7af8e02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a276a3b2f8789953793de60eec38c198c7af8e02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f92bc9e83094421d4bfd3802fc98ac9e26405e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f92bc9e83094421d4bfd3802fc98ac9e26405e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f92bc9e83094421d4bfd3802fc98ac9e26405e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f92bc9e83094421d4bfd3802fc98ac9e26405e1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f92805025d5b59b7fdb5a076bbe076e5cc5447e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f92805025d5b59b7fdb5a076bbe076e5cc5447e2"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5202072f8b8e1f446553dbbce6523b29c735345d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f92bc9e83094421d4bfd3802fc98ac9e26405e1/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f92bc9e83094421d4bfd3802fc98ac9e26405e1/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=3f92bc9e83094421d4bfd3802fc98ac9e26405e1",
        "patch": "@@ -308,3 +308,35 @@ To build executables for ARM:\n \n \n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+\n+Building on FreeBSD\n+--------------------\n+\n+(Updated as of FreeBSD 10.3)\n+\n+Clang is installed by default as `cc` compiler, this makes it easier to get\n+started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n+\n+    pkg install autoconf automake libtool pkgconf\n+    pkg install boost-libs openssl libevent2\n+\n+(`libressl` instead of `openssl` will also work)\n+\n+For the wallet (optional):\n+\n+    pkg install db5\n+\n+This will give a warning \"configure: WARNING: Found Berkeley DB other\n+than 4.8; wallets opened by this build will not be portable!\", but as FreeBSD never\n+had a binary release, this may not matter. If backwards compatibility\n+with 4.8-built Bitcoin Core is needed follow the steps under \"Berkeley DB\" above.\n+\n+Then build using:\n+\n+    ./autogen.sh\n+    ./configure --with-incompatible-bdb CPPFLAGS=-I/usr/local/include/db5 LDFLAGS=-L/usr/local/lib/db5\n+    make\n+\n+*Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n+It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n+use the versioned gdb command e.g. `gdb7111`."
      }
    ]
  },
  {
    "sha": "d270c30d55307a6b07a80f9cd4804cb1201c4651",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjcwYzMwZDU1MzA3YTZiMDdhODBmOWNkNDgwNGNiMTIwMWM0NjUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T08:19:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T08:21:36Z"
      },
      "message": "Merge #8892: doc: Add build instructions for FreeBSD\n\n3f92bc9 doc: Add build instructions for FreeBSD (Wladimir J. van der Laan)",
      "tree": {
        "sha": "3426d4bba0ba416b6fcc424bddc9f2a0a02520b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3426d4bba0ba416b6fcc424bddc9f2a0a02520b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d270c30d55307a6b07a80f9cd4804cb1201c4651",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX/0QQAAoJEHSBCwEjRsmmu+kIAKajKOMoqlEzJCNzwczJ/6D4\nbMUXZCwV5as0Ofnr+V9Mua7c78mJA10B4e1/KawwOB1vG67VpBYH1IMGy0O0+em/\nlRjkkCyh+7AbYlCtDLRmB4MGGIpGOFvz7qWiT2fWXKVUR55W6liMOTR8Mu3xmTBM\nMg+vP5zqb3WifvtGB+mOYgN8GnXQz1Zpxo16oi9AF2UWxk2QiYFn1ePVpHSbFsyS\naubq47uDy3JeICwPgUX4b5AoSTUVKfEzhsOU0dCXj9HyO8lCvRNjfxe7Ne8R4t4I\nliHIcFa59sU0i+aJ3wa1aqnAhKGFappIFp1CTDklHTJ9dH0EMbLbEzs4oiivbKI=\n=/hUY\n-----END PGP SIGNATURE-----",
        "payload": "tree 3426d4bba0ba416b6fcc424bddc9f2a0a02520b5\nparent d0754799698de2c032abcb8198ee5d5401063213\nparent 3f92bc9e83094421d4bfd3802fc98ac9e26405e1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476346769 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476346896 +0200\n\nMerge #8892: doc: Add build instructions for FreeBSD\n\n3f92bc9 doc: Add build instructions for FreeBSD (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d270c30d55307a6b07a80f9cd4804cb1201c4651",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d270c30d55307a6b07a80f9cd4804cb1201c4651",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d270c30d55307a6b07a80f9cd4804cb1201c4651/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0754799698de2c032abcb8198ee5d5401063213",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0754799698de2c032abcb8198ee5d5401063213",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0754799698de2c032abcb8198ee5d5401063213"
      },
      {
        "sha": "3f92bc9e83094421d4bfd3802fc98ac9e26405e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f92bc9e83094421d4bfd3802fc98ac9e26405e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f92bc9e83094421d4bfd3802fc98ac9e26405e1"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 32,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5202072f8b8e1f446553dbbce6523b29c735345d",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d270c30d55307a6b07a80f9cd4804cb1201c4651/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d270c30d55307a6b07a80f9cd4804cb1201c4651/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=d270c30d55307a6b07a80f9cd4804cb1201c4651",
        "patch": "@@ -308,3 +308,35 @@ To build executables for ARM:\n \n \n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n+\n+Building on FreeBSD\n+--------------------\n+\n+(Updated as of FreeBSD 10.3)\n+\n+Clang is installed by default as `cc` compiler, this makes it easier to get\n+started than on [OpenBSD](build-openbsd.md). Installing dependencies:\n+\n+    pkg install autoconf automake libtool pkgconf\n+    pkg install boost-libs openssl libevent2\n+\n+(`libressl` instead of `openssl` will also work)\n+\n+For the wallet (optional):\n+\n+    pkg install db5\n+\n+This will give a warning \"configure: WARNING: Found Berkeley DB other\n+than 4.8; wallets opened by this build will not be portable!\", but as FreeBSD never\n+had a binary release, this may not matter. If backwards compatibility\n+with 4.8-built Bitcoin Core is needed follow the steps under \"Berkeley DB\" above.\n+\n+Then build using:\n+\n+    ./autogen.sh\n+    ./configure --with-incompatible-bdb CPPFLAGS=-I/usr/local/include/db5 LDFLAGS=-L/usr/local/lib/db5\n+    make\n+\n+*Note on debugging*: The version of `gdb` installed by default is [ancient and considered harmful](https://wiki.freebsd.org/GdbRetirement).\n+It is not suitable for debugging a multi-threaded C++ program, not even for getting backtraces. Please install the package `gdb` and\n+use the versioned gdb command e.g. `gdb7111`."
      }
    ]
  },
  {
    "sha": "8d46429c83ec3815d0c595bf541ef5557c6b4942",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDQ2NDI5YzgzZWMzODE1ZDBjNTk1YmY1NDFlZjU1NTdjNmI0OTQy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T08:30:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T08:30:38Z"
      },
      "message": "Merge #8911: qt: Translate all files, even if wallet disabled\n\n8aed5f6 qt: Translate all files, even if wallet disabled (Wladimir J. van der Laan)",
      "tree": {
        "sha": "21834366ed72b053a05910d0351012258987cb70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/21834366ed72b053a05910d0351012258987cb70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d46429c83ec3815d0c595bf541ef5557c6b4942",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX/0YuAAoJEHSBCwEjRsmmPRAH/1AwJCMU6IGiBe1x1L4dtCVJ\n1k839wn0u8Hyqaxox+iozm3C+dohIRML6+nyx12GjXmGBpJYtFIrz31i7twXlxQx\n5wJIxymgICzx/aVE9rlKEVYP1PHlNa4wP4MecvnloTUIJdo3MKf/R41Eg/Jcasko\nHTpEPwDzXEx4RH66s2BuShIL1g6to2qyIj9qdjO1QBf3GTERIsCeemXk+2UWkwKF\nbVYkcEhRNm1Nn4IqaM0ClDGMLEjCcFQHLvGMRX9qeIwO19omVFtn/+ynrhKaWKhd\nsMP1ELyjngGgSIRxRCVim1zY2PsQorQXDxrPAtZaCtK6FzwoduvbuKKsJmLSxXk=\n=W+EN\n-----END PGP SIGNATURE-----",
        "payload": "tree 21834366ed72b053a05910d0351012258987cb70\nparent d270c30d55307a6b07a80f9cd4804cb1201c4651\nparent 8aed5f6c23cbaae6bf56be04f2b8d861eacf588d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476347431 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476347438 +0200\n\nMerge #8911: qt: Translate all files, even if wallet disabled\n\n8aed5f6 qt: Translate all files, even if wallet disabled (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d46429c83ec3815d0c595bf541ef5557c6b4942",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d46429c83ec3815d0c595bf541ef5557c6b4942",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d46429c83ec3815d0c595bf541ef5557c6b4942/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d270c30d55307a6b07a80f9cd4804cb1201c4651",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d270c30d55307a6b07a80f9cd4804cb1201c4651",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d270c30d55307a6b07a80f9cd4804cb1201c4651"
      },
      {
        "sha": "8aed5f6c23cbaae6bf56be04f2b8d861eacf588d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8aed5f6c23cbaae6bf56be04f2b8d861eacf588d"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 11,
      "deletions": 7
    },
    "files": [
      {
        "sha": "1f9a901d75882f84baf307f9accc53722e08a5a3",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 11,
        "deletions": 7,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d46429c83ec3815d0c595bf541ef5557c6b4942/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d46429c83ec3815d0c595bf541ef5557c6b4942/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "patch": "@@ -289,7 +289,7 @@ RES_ICONS = \\\n   qt/res/icons/warning.png \\\n   qt/res/icons/verify.png\n \n-BITCOIN_QT_CPP = \\\n+BITCOIN_QT_BASE_CPP = \\\n   qt/bantablemodel.cpp \\\n   qt/bitcoinaddressvalidator.cpp \\\n   qt/bitcoinamountfield.cpp \\\n@@ -313,12 +313,9 @@ BITCOIN_QT_CPP = \\\n   qt/trafficgraphwidget.cpp \\\n   qt/utilitydialog.cpp\n \n-if TARGET_WINDOWS\n-BITCOIN_QT_CPP += qt/winshutdownmonitor.cpp\n-endif\n+BITCOIN_QT_WINDOWS_CPP = qt/winshutdownmonitor.cpp\n \n-if ENABLE_WALLET\n-BITCOIN_QT_CPP += \\\n+BITCOIN_QT_WALLET_CPP = \\\n   qt/addressbookpage.cpp \\\n   qt/addresstablemodel.cpp \\\n   qt/askpassphrasedialog.cpp \\\n@@ -345,6 +342,13 @@ BITCOIN_QT_CPP += \\\n   qt/walletmodel.cpp \\\n   qt/walletmodeltransaction.cpp \\\n   qt/walletview.cpp\n+\n+BITCOIN_QT_CPP = $(BITCOIN_QT_BASE_CPP)\n+if TARGET_WINDOWS\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WINDOWS_CPP)\n+endif\n+if ENABLE_WALLET\n+BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n endif\n \n RES_IMAGES = \n@@ -413,7 +417,7 @@ $(srcdir)/qt/bitcoinstrings.cpp: $(libbitcoin_server_a_SOURCES) $(libbitcoin_wal\n \t@test -n $(XGETTEXT) || echo \"xgettext is required for updating translations\"\n \t$(AM_V_GEN) cd $(srcdir); XGETTEXT=$(XGETTEXT) PACKAGE_NAME=\"$(PACKAGE_NAME)\" COPYRIGHT_HOLDERS=\"$(COPYRIGHT_HOLDERS)\" COPYRIGHT_HOLDERS_SUBSTITUTION=\"$(COPYRIGHT_HOLDERS_SUBSTITUTION)\" $(PYTHON) ../share/qt/extract_strings_qt.py $^\n \n-translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n+translate: $(srcdir)/qt/bitcoinstrings.cpp $(QT_FORMS_UI) $(QT_FORMS_UI) $(BITCOIN_QT_BASE_CPP) $(BITCOIN_QT_WINDOWS_CPP) $(BITCOIN_QT_WALLET_CPP) $(BITCOIN_QT_H) $(BITCOIN_MM)\n \t@test -n $(LUPDATE) || echo \"lupdate is required for updating translations\"\n \t$(AM_V_GEN) QT_SELECT=$(QT_SELECT) $(LUPDATE) $^ -locations relative -no-obsolete -ts $(srcdir)/qt/locale/bitcoin_en.ts\n "
      }
    ]
  },
  {
    "sha": "e2a17e43e36ff760bf54ce0fc91d9464257c7222",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmExN2U0M2UzNmZmNzYwYmY1NGNlMGZjOTFkOTQ2NDI1N2M3MjIy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T16:47:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T16:48:13Z"
      },
      "message": "Merge #8904: [qa] Fix compact block shortids for a test case\n\n4cdece4 [qa] Fix compact block shortids for a test case (Dagur Valberg Johannsson)",
      "tree": {
        "sha": "99c12b9ede56fb7100abf580549cb7e27135ebec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/99c12b9ede56fb7100abf580549cb7e27135ebec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2a17e43e36ff760bf54ce0fc91d9464257c7222",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX/7rNAAoJEHSBCwEjRsmm7QUH/j0k/q4ZCTRuW1zjoe+0Fe7L\nnMInW4GHXs4tR9CzaM7G580qDIY8Bd8gJdcydsBUi92c32u2WxdbXZOZrq3J5+te\nAO+XNl+FfCGsPoXlAtVd9KU0ZW/0cYQyTsjoCpNyknPsCcdtQ4AGBZ3MI6+7fLlO\ndgPF4AN+/n3lTnWzWzxZqmFoWsIlvj+sRxAsAuNsteTLHrZgSMGx6jYoC5nrC9/5\nNTgzrS1A9p5IdnhtsRh5yyBxm+ibRwib4HiO/Ww7yeBNAeMZ4BERBe5tIaIF7zh+\nu1IQlIvfy5n+g6lJt5vdx/TCCvngYw7RUC1hlz2u9aTWa2eDVS23k2VZCiVeXQo=\n=HQRe\n-----END PGP SIGNATURE-----",
        "payload": "tree 99c12b9ede56fb7100abf580549cb7e27135ebec\nparent 8d46429c83ec3815d0c595bf541ef5557c6b4942\nparent 4cdece40419bcc97345357f9268e03b0aff400b5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476377265 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476377293 +0200\n\nMerge #8904: [qa] Fix compact block shortids for a test case\n\n4cdece4 [qa] Fix compact block shortids for a test case (Dagur Valberg Johannsson)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a17e43e36ff760bf54ce0fc91d9464257c7222",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a17e43e36ff760bf54ce0fc91d9464257c7222",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a17e43e36ff760bf54ce0fc91d9464257c7222/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d46429c83ec3815d0c595bf541ef5557c6b4942"
      },
      {
        "sha": "4cdece40419bcc97345357f9268e03b0aff400b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cdece40419bcc97345357f9268e03b0aff400b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cdece40419bcc97345357f9268e03b0aff400b5"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e7f5a1c9c6f816be487954743b5207657c7a827e",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2a17e43e36ff760bf54ce0fc91d9464257c7222/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2a17e43e36ff760bf54ce0fc91d9464257c7222/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=e2a17e43e36ff760bf54ce0fc91d9464257c7222",
        "patch": "@@ -402,7 +402,9 @@ def test_compactblock_requests(self, node, test_node):\n             comp_block = HeaderAndShortIDs()\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n-            comp_block.shortids = [1]  # this is useless, and wrong\n+            [k0, k1] = comp_block.get_siphash_keys()\n+            comp_block.shortids = [\n+                    calculate_shortid(k0, k1, block.vtx[0].sha256) ]\n             test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message."
      }
    ]
  },
  {
    "sha": "e2b8c394d61de1e153b9b39d99c45654774f00de",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmI4YzM5NGQ2MWRlMWUxNTNiOWIzOWQ5OWM0NTY1NDc3NGYwMGRl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T16:56:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T16:56:43Z"
      },
      "message": "Merge #8817: update bitcoin-tx to output witness data\n\n4408558 Update bitcoin-tx to output witness data. (jonnynewbs)",
      "tree": {
        "sha": "2790bca919931ed0d5b6a80b375f7fc39df736c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2790bca919931ed0d5b6a80b375f7fc39df736c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2b8c394d61de1e153b9b39d99c45654774f00de",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJX/7zLAAoJEHSBCwEjRsmm4UIIAIPkVNNblbd7cnT7O2Q+AGpP\niK/NmvBT6NwauxdDM+z+l2dLEy72WHN7snsCfYAGf+hSiYmlGhdZNFSlvEVkuc8Y\nQzQkl00oizjd8tmeYrUHilpImuZ8wt/bzrObCoOPW4Tdxh7pQH8No4QdAh4yV/bO\npZGdUIFV4CxRuZ8YNZV8pQVQYmS4/0vTpd1p3eu74E2szsyEHN+Zm0QDlUTwVQc7\nJg/7o6/9LH32KNLcs/mMu232GZ3AMxbSDjBWDlJQtQ/DFuTEx/OYmwgfbNo4WcDR\nFSQS1QXcKZq6aB+6SD1GDKEqaqFMa6Rk0XnwDR3XH9CQWGRp1/XX5gpyp7/Syw4=\n=qdl1\n-----END PGP SIGNATURE-----",
        "payload": "tree 2790bca919931ed0d5b6a80b375f7fc39df736c9\nparent e2a17e43e36ff760bf54ce0fc91d9464257c7222\nparent 4408558843c6c2b7abeb4160f641dfdbf5be5eb4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476377780 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476377803 +0200\n\nMerge #8817: update bitcoin-tx to output witness data\n\n4408558 Update bitcoin-tx to output witness data. (jonnynewbs)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b8c394d61de1e153b9b39d99c45654774f00de",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b8c394d61de1e153b9b39d99c45654774f00de",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b8c394d61de1e153b9b39d99c45654774f00de/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2a17e43e36ff760bf54ce0fc91d9464257c7222",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2a17e43e36ff760bf54ce0fc91d9464257c7222",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2a17e43e36ff760bf54ce0fc91d9464257c7222"
      },
      {
        "sha": "4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4408558843c6c2b7abeb4160f641dfdbf5be5eb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4408558843c6c2b7abeb4160f641dfdbf5be5eb4"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 21,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ea01ddc10d81a6c58f72ed93bb2742425cb932c1",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -151,11 +151,13 @@ void ScriptPubKeyToUniv(const CScript& scriptPubKey,\n void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n {\n     entry.pushKV(\"txid\", tx.GetHash().GetHex());\n+    entry.pushKV(\"hash\", tx.GetWitnessHash().GetHex());\n     entry.pushKV(\"version\", tx.nVersion);\n     entry.pushKV(\"locktime\", (int64_t)tx.nLockTime);\n \n     UniValue vin(UniValue::VARR);\n-    BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n+    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+        const CTxIn& txin = tx.vin[i];\n         UniValue in(UniValue::VOBJ);\n         if (tx.IsCoinBase())\n             in.pushKV(\"coinbase\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n@@ -166,6 +168,13 @@ void TxToUniv(const CTransaction& tx, const uint256& hashBlock, UniValue& entry)\n             o.pushKV(\"asm\", ScriptToAsmStr(txin.scriptSig, true));\n             o.pushKV(\"hex\", HexStr(txin.scriptSig.begin(), txin.scriptSig.end()));\n             in.pushKV(\"scriptSig\", o);\n+            if (!tx.wit.IsNull() && i < tx.wit.vtxinwit.size() && !tx.wit.vtxinwit[i].IsNull()) {\n+                UniValue txinwitness(UniValue::VARR);\n+                for (const auto& item : tx.wit.vtxinwit[i].scriptWitness.stack) {\n+                    txinwitness.push_back(HexStr(item.begin(), item.end()));\n+                }\n+                in.pushKV(\"txinwitness\", txinwitness);\n+            }\n         }\n         in.pushKV(\"sequence\", (int64_t)txin.nSequence);\n         vin.push_back(in);"
      },
      {
        "sha": "51c25a5a98c5965df194fa22b049f6be5863d48a",
        "filename": "src/test/data/blanktx.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/blanktx.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/blanktx.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/blanktx.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"d21633ba23f70118185227be58a63527675641ad37967e2aa461559f577aec43\",\n+    \"hash\": \"d21633ba23f70118185227be58a63527675641ad37967e2aa461559f577aec43\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "712a2c27f8faed7358a36202771fce1999d1bfee",
        "filename": "src/test/data/tt-delin1-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/tt-delin1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/tt-delin1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-delin1-out.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"81b2035be1da1abe745c6141174a73d151009ec17b3d5ebffa2e177408c50dfd\",\n+    \"hash\": \"81b2035be1da1abe745c6141174a73d151009ec17b3d5ebffa2e177408c50dfd\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "afc4e95762d4a9dcc72785e24c8602f552abc5cc",
        "filename": "src/test/data/tt-delout1-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/tt-delout1-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/tt-delout1-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-delout1-out.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"c46ccd75b5050e942b2e86a3648f843f525fe6fc000bf0534ba5973063354493\",\n+    \"hash\": \"c46ccd75b5050e942b2e86a3648f843f525fe6fc000bf0534ba5973063354493\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "2b9075f8acece0136da5a9bdb2b0bcc58f29fe1b",
        "filename": "src/test/data/tt-locktime317000-out.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/tt-locktime317000-out.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/tt-locktime317000-out.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tt-locktime317000-out.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"aded538f642c17e15f4d3306b8be7e1a4d1ae0c4616d641ab51ea09ba65e5cb5\",\n+    \"hash\": \"aded538f642c17e15f4d3306b8be7e1a4d1ae0c4616d641ab51ea09ba65e5cb5\",\n     \"version\": 1,\n     \"locktime\": 317000,\n     \"vin\": ["
      },
      {
        "sha": "567e8026a321cd894b5d7f8d22c1155f9efa1797",
        "filename": "src/test/data/txcreate1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreate1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreate1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate1.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"f70f0d6c71416ed538e37549f430ab3665fee2437a42f10238c1bd490e782231\",\n+    \"hash\": \"f70f0d6c71416ed538e37549f430ab3665fee2437a42f10238c1bd490e782231\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "a70c1d302a28d06823c1908e812a55b2b801d673",
        "filename": "src/test/data/txcreate2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreate2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreate2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreate2.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"cf90229625e9eb10f6be8156bf6aa5ec2eca19a42b1e05c11f3029b560a32e13\",\n+    \"hash\": \"cf90229625e9eb10f6be8156bf6aa5ec2eca19a42b1e05c11f3029b560a32e13\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "760518d30a983fb459a14b42f3ea1755b9563659",
        "filename": "src/test/data/txcreatedata1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata1.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"07894b4d12fe7853dd911402db1620920d261b9627c447f931417d330c25f06e\",\n+    \"hash\": \"07894b4d12fe7853dd911402db1620920d261b9627c447f931417d330c25f06e\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "56dfe4a1b055a99118762a417f36fee507315d45",
        "filename": "src/test/data/txcreatedata2.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata2.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"4ed17118f5e932ba8c75c461787d171bc02a016d8557cb5bcf34cd416c27bb8b\",\n+    \"hash\": \"4ed17118f5e932ba8c75c461787d171bc02a016d8557cb5bcf34cd416c27bb8b\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "9bc0ed459360920bdda25b58c93bcde7f4beddd9",
        "filename": "src/test/data/txcreatedata_seq0.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata_seq0.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata_seq0.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata_seq0.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"71603ccb1cd76d73d76eb6cfd5f0b9df6d65d90d76860ee52cb461c4be7032e8\",\n+    \"hash\": \"71603ccb1cd76d73d76eb6cfd5f0b9df6d65d90d76860ee52cb461c4be7032e8\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "d323255418d04843ed7201fc12a71ae1c5c9d5dd",
        "filename": "src/test/data/txcreatedata_seq1.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata_seq1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatedata_seq1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatedata_seq1.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"c4dea671b0d7b48f8ab10bc46650e8329d3c5766931f548f513847a19f5ba75b\",\n+    \"hash\": \"c4dea671b0d7b48f8ab10bc46650e8329d3c5766931f548f513847a19f5ba75b\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      },
      {
        "sha": "ff39e71b40c0d68a55a4aba988e5ef95a332ee29",
        "filename": "src/test/data/txcreatesign.json",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatesign.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2b8c394d61de1e153b9b39d99c45654774f00de/src/test/data/txcreatesign.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/txcreatesign.json?ref=e2b8c394d61de1e153b9b39d99c45654774f00de",
        "patch": "@@ -1,5 +1,6 @@\n {\n     \"txid\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n+    \"hash\": \"977e7cd286cb72cd470d539ba6cb48400f8f387d97451d45cdb8819437a303af\",\n     \"version\": 1,\n     \"locktime\": 0,\n     \"vin\": ["
      }
    ]
  },
  {
    "sha": "36f60a5d5b1bc9a12b87d6475e3245b8236775e4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmY2MGE1ZDViMWJjOWExMmI4N2Q2NDc1ZTMyNDViODIzNjc3NWU0",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2016-10-13T17:31:52Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2016-10-13T17:47:43Z"
      },
      "message": "Add copyright/patent issues to possible NACK reasons\n\nAdding in response to a Slack discussion where someone was unclear on the fact\nthat a NACK may be justified if code can't be accepted due to copyright/patent\nissues.  For example, it would be reasonable and prudent to NACK a contribution\nof AGPL-licensed consensus code on the basis that the license terms are\nincompatible with the MIT license used by the rest of the codebase.",
      "tree": {
        "sha": "1cdb1262d476d1bf3984191b0324091914342302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cdb1262d476d1bf3984191b0324091914342302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36f60a5d5b1bc9a12b87d6475e3245b8236775e4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCAAGBQJX/8jBAAoJEGOZARBE6K+y7xsH/RbWszAKw0z2JKMm7CQv7Fik\nNxJvpGc5A1aoegjB7n47/9d/8OaKoVgOu2Xyl3KyQKSCXM1rWjBFchU06qYrh0N1\nOHCTxoNijPDcX1HsH2rOvSQZGYax6RXHc1R0T4HI//+1Uf+sJOn0D19btX0ZRcFj\nHK94bJNoq0w8pd5WZNl6PwyZOQbDXWerXjY3VHSrXzcEASnp20jeAqNIm1YSVxXZ\nfqoA2byyLcGOvJrPbXmQMT1XJQc/oP9Q0nzWFrD5xkzNqOpneSIQkjS6cL6hLUko\nikcv8yAmk3SpR66U6Md6tw5Q6kuqjYj0A1BXrg4qqhjzrxL47T8M+p5hCeqNu1I=\n=WgAq\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwID0Nze71NuR9QzgBdL/Bw3WLm3M1b9ROUorGpCEq3YgbCP/wEN3c2zvZa7Wa\nJVyvzjx7ifYI8QRX/8jF8AhODP/uhTtsWQCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BD9pii+1r7vCKLl9YOx\n8bNQCPEEV//IxfAIxVEQiIp1PUsAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5j\nYWxlbmRhci5vcGVudGltZXN0YW1wcy5vcmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 1cdb1262d476d1bf3984191b0324091914342302\nparent e2b8c394d61de1e153b9b39d99c45654774f00de\nauthor Peter Todd <pete@petertodd.org> 1476379912 +0200\ncommitter Peter Todd <pete@petertodd.org> 1476380863 +0200\n\nAdd copyright/patent issues to possible NACK reasons\n\nAdding in response to a Slack discussion where someone was unclear on the fact\nthat a NACK may be justified if code can't be accepted due to copyright/patent\nissues.  For example, it would be reasonable and prudent to NACK a contribution\nof AGPL-licensed consensus code on the basis that the license terms are\nincompatible with the MIT license used by the rest of the codebase.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f60a5d5b1bc9a12b87d6475e3245b8236775e4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36f60a5d5b1bc9a12b87d6475e3245b8236775e4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f60a5d5b1bc9a12b87d6475e3245b8236775e4/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2b8c394d61de1e153b9b39d99c45654774f00de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b8c394d61de1e153b9b39d99c45654774f00de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b8c394d61de1e153b9b39d99c45654774f00de"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "06fcd8dd81301055f79cb048e4183a93a4302e5e",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36f60a5d5b1bc9a12b87d6475e3245b8236775e4/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36f60a5d5b1bc9a12b87d6475e3245b8236775e4/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=36f60a5d5b1bc9a12b87d6475e3245b8236775e4",
        "patch": "@@ -178,7 +178,9 @@ language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";\n   - NACK means \"I disagree this should be merged\", and must be accompanied by\n-    sound technical justification. NACKs without accompanying reasoning may be disregarded;\n+    sound technical justification (or in certain cases of copyright/patent/licensing\n+    issues, legal justification). NACKs without accompanying reasoning may be\n+    disregarded;\n   - utACK means \"I have not tested the code, but I have reviewed it and it looks\n     OK, I agree it can be merged\";\n   - Concept ACK means \"I agree in the general principle of this pull request\";"
      }
    ]
  },
  {
    "sha": "21f5a6364d5bad738d51e75ff96c8f8b88557d11",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWY1YTYzNjRkNWJhZDczOGQ1MWU3NWZmOTZjOGY4Yjg4NTU3ZDEx",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-13T23:27:26Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-13T23:27:43Z"
      },
      "message": "Qt: Add \"Copy URI\" to payment request context menu",
      "tree": {
        "sha": "7ff8c562bef5f86c3daec839c961ea8c7f52eb87",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ff8c562bef5f86c3daec839c961ea8c7f52eb87"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21f5a6364d5bad738d51e75ff96c8f8b88557d11",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f5a6364d5bad738d51e75ff96c8f8b88557d11",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21f5a6364d5bad738d51e75ff96c8f8b88557d11",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f5a6364d5bad738d51e75ff96c8f8b88557d11/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cd836c1d855b92e7c73ab31979f471c4f8dad68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cd836c1d855b92e7c73ab31979f471c4f8dad68"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 33,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e89f06484ce46da75daabdf537c7ab4232434d82",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 8,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21f5a6364d5bad738d51e75ff96c8f8b88557d11/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21f5a6364d5bad738d51e75ff96c8f8b88557d11/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=21f5a6364d5bad738d51e75ff96c8f8b88557d11",
        "patch": "@@ -43,18 +43,21 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *platformStyle, QWidg\n     }\n \n     // context menu actions\n+    QAction *copyURIAction = new QAction(tr(\"Copy URI\"), this);\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n     QAction *copyMessageAction = new QAction(tr(\"Copy message\"), this);\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n \n     // context menu\n     contextMenu = new QMenu();\n+    contextMenu->addAction(copyURIAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyMessageAction);\n     contextMenu->addAction(copyAmountAction);\n \n     // context menu signals\n     connect(ui->recentRequestsView, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(showMenu(QPoint)));\n+    connect(copyURIAction, SIGNAL(triggered()), this, SLOT(copyURI()));\n     connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n     connect(copyMessageAction, SIGNAL(triggered()), this, SLOT(copyMessage()));\n     connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n@@ -227,30 +230,50 @@ void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)\n     this->QDialog::keyPressEvent(event);\n }\n \n-// copy column of selected row to clipboard\n-void ReceiveCoinsDialog::copyColumnToClipboard(int column)\n+QModelIndex ReceiveCoinsDialog::selectedRow()\n {\n     if(!model || !model->getRecentRequestsTableModel() || !ui->recentRequestsView->selectionModel())\n-        return;\n+        return QModelIndex();\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n     if(selection.empty())\n-        return;\n+        return QModelIndex();\n     // correct for selection mode ContiguousSelection\n     QModelIndex firstIndex = selection.at(0);\n+    return firstIndex;\n+}\n+\n+// copy column of selected row to clipboard\n+void ReceiveCoinsDialog::copyColumnToClipboard(int column)\n+{\n+    QModelIndex firstIndex = selectedRow();\n+    if (!firstIndex.isValid()) {\n+        return;\n+    }\n     GUIUtil::setClipboard(model->getRecentRequestsTableModel()->data(firstIndex.child(firstIndex.row(), column), Qt::EditRole).toString());\n }\n \n // context menu\n void ReceiveCoinsDialog::showMenu(const QPoint &point)\n {\n-    if(!model || !model->getRecentRequestsTableModel() || !ui->recentRequestsView->selectionModel())\n-        return;\n-    QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n-    if(selection.empty())\n+    if (!selectedRow().isValid()) {\n         return;\n+    }\n     contextMenu->exec(QCursor::pos());\n }\n \n+// context menu action: copy URI\n+void ReceiveCoinsDialog::copyURI()\n+{\n+    QModelIndex sel = selectedRow();\n+    if (!sel.isValid()) {\n+        return;\n+    }\n+\n+    const RecentRequestsTableModel * const submodel = model->getRecentRequestsTableModel();\n+    const QString uri = GUIUtil::formatBitcoinURI(submodel->entry(sel.row()).recipient);\n+    GUIUtil::setClipboard(uri);\n+}\n+\n // context menu action: copy label\n void ReceiveCoinsDialog::copyLabel()\n {"
      },
      {
        "sha": "9612da318c9be6d6923340a9f7f34a272cd7220a",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21f5a6364d5bad738d51e75ff96c8f8b88557d11/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21f5a6364d5bad738d51e75ff96c8f8b88557d11/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=21f5a6364d5bad738d51e75ff96c8f8b88557d11",
        "patch": "@@ -60,6 +60,7 @@ public Q_SLOTS:\n     QMenu *contextMenu;\n     const PlatformStyle *platformStyle;\n \n+    QModelIndex selectedRow();\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n \n@@ -71,6 +72,7 @@ private Q_SLOTS:\n     void recentRequestsView_selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);\n     void updateDisplayUnit();\n     void showMenu(const QPoint &point);\n+    void copyURI();\n     void copyLabel();\n     void copyMessage();\n     void copyAmount();"
      }
    ]
  },
  {
    "sha": "03dd707dc027fbf6f24120213f8eb66571600374",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowM2RkNzA3ZGMwMjdmYmY2ZjI0MTIwMjEzZjhlYjY2NTcxNjAwMzc0",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-14T07:52:29Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-14T07:53:22Z"
      },
      "message": "Merge #8915: Add copyright/patent issues to possible NACK reasons\n\n36f60a5 Add copyright/patent issues to possible NACK reasons (Peter Todd)",
      "tree": {
        "sha": "1cdb1262d476d1bf3984191b0324091914342302",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cdb1262d476d1bf3984191b0324091914342302"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/03dd707dc027fbf6f24120213f8eb66571600374",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYAI7yAAoJEC1/I3LlD+E35QEH/3U37ipnaPU+2DWW9mGVrZjC\nLDP78IFXbEhSJLxtF1edbIAcuKX1XQwbEt8LGIrCzsZ+SXDwGbkI7ge/veos4zqT\nTE7tKWhSu08+kNqrIjs8iIcb41GTSePqeJl7Blh3XexMFzQg1l0Pdu//KcAmuhLL\nZtU3n9T9HQBEza8psF84vntbO2AkvYskJ4opCXMD1h9SOjc4u3HHtSSVg0igPZCp\nig7CeqbPVHM65lu1gKOa8J534dv9vx+kiV6ZcCe7XzuUAg9Tz49UNGNHfiLa8tEB\nPYWLuSCh6Y/SUeEVTWEguC+qB5UD+5Aq0AY7iP5qezkWEd3FvcoqNoWxEF40jx0=\n=G8i7\n-----END PGP SIGNATURE-----",
        "payload": "tree 1cdb1262d476d1bf3984191b0324091914342302\nparent e2b8c394d61de1e153b9b39d99c45654774f00de\nparent 36f60a5d5b1bc9a12b87d6475e3245b8236775e4\nauthor MarcoFalke <falke.marco@gmail.com> 1476431549 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1476431602 +0200\n\nMerge #8915: Add copyright/patent issues to possible NACK reasons\n\n36f60a5 Add copyright/patent issues to possible NACK reasons (Peter Todd)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dd707dc027fbf6f24120213f8eb66571600374",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/03dd707dc027fbf6f24120213f8eb66571600374",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dd707dc027fbf6f24120213f8eb66571600374/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2b8c394d61de1e153b9b39d99c45654774f00de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b8c394d61de1e153b9b39d99c45654774f00de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b8c394d61de1e153b9b39d99c45654774f00de"
      },
      {
        "sha": "36f60a5d5b1bc9a12b87d6475e3245b8236775e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36f60a5d5b1bc9a12b87d6475e3245b8236775e4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36f60a5d5b1bc9a12b87d6475e3245b8236775e4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "06fcd8dd81301055f79cb048e4183a93a4302e5e",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/03dd707dc027fbf6f24120213f8eb66571600374/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/03dd707dc027fbf6f24120213f8eb66571600374/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=03dd707dc027fbf6f24120213f8eb66571600374",
        "patch": "@@ -178,7 +178,9 @@ language is used within pull-request comments:\n \n   - ACK means \"I have tested the code and I agree it should be merged\";\n   - NACK means \"I disagree this should be merged\", and must be accompanied by\n-    sound technical justification. NACKs without accompanying reasoning may be disregarded;\n+    sound technical justification (or in certain cases of copyright/patent/licensing\n+    issues, legal justification). NACKs without accompanying reasoning may be\n+    disregarded;\n   - utACK means \"I have not tested the code, but I have reviewed it and it looks\n     OK, I agree it can be merged\";\n   - Concept ACK means \"I agree in the general principle of this pull request\";"
      }
    ]
  },
  {
    "sha": "032e883b937a6b70d5c367fc2ee57d7eea8cb473",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzJlODgzYjkzN2E2YjcwZDVjMzY3ZmMyZWU1N2Q3ZWVhOGNiNDcz",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-14T16:54:15Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-14T16:54:15Z"
      },
      "message": "[qa] Send segwit-encoded blocktxn messages in p2p-compactblocks",
      "tree": {
        "sha": "6d8d266d29d72616931dbf8dfadc0479ae644b83",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d8d266d29d72616931dbf8dfadc0479ae644b83"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03dd707dc027fbf6f24120213f8eb66571600374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dd707dc027fbf6f24120213f8eb66571600374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03dd707dc027fbf6f24120213f8eb66571600374"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 18,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1beab609b68efc8b50afcb976f53d18c1f72ca9a",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 18,
        "deletions": 10,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/032e883b937a6b70d5c367fc2ee57d7eea8cb473/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/032e883b937a6b70d5c367fc2ee57d7eea8cb473/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=032e883b937a6b70d5c367fc2ee57d7eea8cb473",
        "patch": "@@ -6,7 +6,7 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n@@ -123,11 +123,13 @@ def setup_network(self):\n                  [\"-debug\", \"-logtimemicros\", \"-txindex\"]])\n         connect_nodes(self.nodes[0], 1)\n \n-    def build_block_on_tip(self, node):\n+    def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()\n         mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        if segwit:\n+            add_witness_commitment(block)\n         block.solve()\n         return block\n \n@@ -380,11 +382,11 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n     # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n     # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n     # any cb-version-1-supporting peer.\n-    def test_compactblock_requests(self, node, test_node):\n+    def test_compactblock_requests(self, node, test_node, version, segwit):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip(node)\n+            block = self.build_block_on_tip(node, segwit=segwit)\n             with mininode_lock:\n                 test_node.last_getdata = None\n \n@@ -403,8 +405,11 @@ def test_compactblock_requests(self, node, test_node):\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n             [k0, k1] = comp_block.get_siphash_keys()\n+            coinbase_hash = block.vtx[0].sha256\n+            if version == 2:\n+                coinbase_hash = block.vtx[0].calc_sha256(True)\n             comp_block.shortids = [\n-                    calculate_shortid(k0, k1, block.vtx[0].sha256) ]\n+                    calculate_shortid(k0, k1, coinbase_hash) ]\n             test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n@@ -414,7 +419,10 @@ def test_compactblock_requests(self, node, test_node):\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n \n             # Send the coinbase, and verify that the tip advances.\n-            msg = msg_blocktxn()\n+            if version == 2:\n+                msg = msg_witness_blocktxn()\n+            else:\n+                msg = msg_blocktxn()\n             msg.block_transactions.blockhash = block.sha256\n             msg.block_transactions.transactions = [block.vtx[0]]\n             test_node.send_and_ping(msg)\n@@ -750,9 +758,9 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, False)\n         sync_blocks(self.nodes)\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, False)\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting getblocktxn requests...\")\n@@ -800,7 +808,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests (unupgraded node)... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, True)\n \n         print(\"\\tTesting getblocktxn requests (unupgraded node)...\")\n         self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n@@ -815,7 +823,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), self.nodes[1].getbestblockhash())\n \n         print(\"\\tTesting compactblock requests (segwit node)... \")\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, True)\n \n         print(\"\\tTesting getblocktxn requests (segwit node)...\")\n         self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)"
      }
    ]
  },
  {
    "sha": "088d1f441301ca900b29b5cb64647e0e322c358d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowODhkMWY0NDEzMDFjYTkwMGIyOWI1Y2I2NDY0N2UwZTMyMmMzNThk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-15T07:44:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-15T07:44:20Z"
      },
      "message": "Merge #8906: [qt] sync-overlay: Don't show progress twice\n\nfafeec3 [qt] sync-overlay: Don't show progress twice (MarcoFalke)",
      "tree": {
        "sha": "7e47e5774de03decdf4fe5cacf11889689f05daf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e47e5774de03decdf4fe5cacf11889689f05daf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/088d1f441301ca900b29b5cb64647e0e322c358d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYAd5UAAoJEHSBCwEjRsmmmqUH/iabmtJCbULxu2wV2kPF5n0Y\npQU8BZws0Vb/KOrEbvKuX7eQjGAytOYMiV82JgM1O1+A3+EhkVxKzsnTnfr3u/bv\nvSMJcXI+0KKiM/e9NZNuON5slzkWZihQ5KgOZQoPjfVflW4bsuwlSYogaNvgtRef\nbupEziB7mnK5Qkbav825rwm9rJhUh0QTg6vcdOWO3HTy531OdRNXUU0sDNM1kodc\nOdtJZWlqeOFduxxJuuclukF6w2u2ZCKtgIjJ2G8nZJWkyPvUth01JeBbJQCeS2DS\nmXi7tidHnDvHJOw2RSz1alJMjCEe6fq+RtkIAGvjPUEyIA5EqwDz8DgcGseQBsE=\n=S3mz\n-----END PGP SIGNATURE-----",
        "payload": "tree 7e47e5774de03decdf4fe5cacf11889689f05daf\nparent 03dd707dc027fbf6f24120213f8eb66571600374\nparent fafeec3cf2ceb5330a04539adc90b27dc7e6fd42\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476517447 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476517460 +0200\n\nMerge #8906: [qt] sync-overlay: Don't show progress twice\n\nfafeec3 [qt] sync-overlay: Don't show progress twice (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088d1f441301ca900b29b5cb64647e0e322c358d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/088d1f441301ca900b29b5cb64647e0e322c358d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088d1f441301ca900b29b5cb64647e0e322c358d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03dd707dc027fbf6f24120213f8eb66571600374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dd707dc027fbf6f24120213f8eb66571600374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03dd707dc027fbf6f24120213f8eb66571600374"
      },
      {
        "sha": "fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fafeec3cf2ceb5330a04539adc90b27dc7e6fd42"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 5,
      "deletions": 4
    },
    "files": [
      {
        "sha": "73223735f5c6bd7ebb167bee03e50e4afe892bb9",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/088d1f441301ca900b29b5cb64647e0e322c358d/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/088d1f441301ca900b29b5cb64647e0e322c358d/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=088d1f441301ca900b29b5cb64647e0e322c358d",
        "patch": "@@ -276,6 +276,9 @@ QLabel { color: rgb(40,40,40);  }</string>\n                <property name=\"value\">\n                 <number>24</number>\n                </property>\n+               <property name=\"format\">\n+                <string/>\n+               </property>\n               </widget>\n              </item>\n             </layout>"
      },
      {
        "sha": "ae0d8f5f6367613d5ee0f8b12d7383ad1bfed1be",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/088d1f441301ca900b29b5cb64647e0e322c358d/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/088d1f441301ca900b29b5cb64647e0e322c358d/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=088d1f441301ca900b29b5cb64647e0e322c358d",
        "patch": "@@ -77,7 +77,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     QDateTime currentDate = QDateTime::currentDateTime();\n \n     // keep a vector of samples of verification progress at height\n-    blockProcessTime.push_front(qMakePair(currentDate.currentMSecsSinceEpoch(), nVerificationProgress));\n+    blockProcessTime.push_front(qMakePair(currentDate.toMSecsSinceEpoch(), nVerificationProgress));\n \n     // show progress speed if we have more then one sample\n     if (blockProcessTime.size() >= 2)\n@@ -93,8 +93,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n             QPair<qint64, double> sample = blockProcessTime[i];\n \n             // take first sample after 500 seconds or last available one\n-            if (sample.first < (currentDate.currentMSecsSinceEpoch() - 500*1000) || i == blockProcessTime.size()-1)\n-            {\n+            if (sample.first < (currentDate.toMSecsSinceEpoch() - 500 * 1000) || i == blockProcessTime.size() - 1) {\n                 progressDelta = progressStart-sample.second;\n                 timeDelta = blockProcessTime[0].first - sample.first;\n                 progressPerHour = progressDelta/(double)timeDelta*1000*3600;\n@@ -108,7 +107,6 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n         // show expected remaining time\n         ui->expectedTimeLeft->setText(GUIUtil::formateNiceTimeOffset(remainingMSecs/1000.0));\n \n-        // keep maximal 5000 samples\n         static const int MAX_SAMPLES = 5000;\n         if (blockProcessTime.count() > MAX_SAMPLES)\n             blockProcessTime.remove(MAX_SAMPLES, blockProcessTime.count()-MAX_SAMPLES);"
      }
    ]
  },
  {
    "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OWM1OTEwMzcyODk5YTM2NWZkNmI1N2I5ZTIyNzUxOGUyNDU0MWZh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-15T08:27:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-15T08:27:46Z"
      },
      "message": "Merge #8880: protocol.h: Move MESSAGE_START_SIZE into CMessageHeader\n\n1df3111 protocol.h: Make enums in GetDataMsg concrete values (Wladimir J. van der Laan)\n2c09a52 protocol.h: Move MESSAGE_START_SIZE into CMessageHeader (Wladimir J. van der Laan)\nf9bd92d version.h: s/shord/short/ in comment (Wladimir J. van der Laan)",
      "tree": {
        "sha": "7e947514672600b8d68e5d021e0d8ade3927e078",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7e947514672600b8d68e5d021e0d8ade3927e078"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/49c5910372899a365fd6b57b9e227518e24541fa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYAeiCAAoJEHSBCwEjRsmmK1EH/0NS3vH0p8WAoUJt7+9HJ8uh\nx8aSZ8x/KBsgKRjOvjwpSQ2Bsxws4ODbDasWqeWn1K2swV/iOxxaKCqHAXPLbFnM\nl3RvgEARlloYkpBcWBvE1HiHiAlnJhwk9t3EEl0qKJF4b+6WGVEz0R0qgXMP09wc\niCl5NdmWXRimr7RBsIcNi0gjalQHBRI/ZJZJoPECeTbJOMt5/6LV1G+iNfcAnNIh\nVtxhRZhbf+hy284CVo/2j2y3pGu+sNee1nXXUmUpyb6PxHKwEmdX5huudVquQZNf\nycbdSufjH2PRo9/SAKdmtxJ0KxKvUzjRH7GmPKWO1m3MEqIuK6N3c/Qubg0POD4=\n=dVbD\n-----END PGP SIGNATURE-----",
        "payload": "tree 7e947514672600b8d68e5d021e0d8ade3927e078\nparent 088d1f441301ca900b29b5cb64647e0e322c358d\nparent 1df311118d79c04df1d41e044b19444cfda015da\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476520062 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476520066 +0200\n\nMerge #8880: protocol.h: Move MESSAGE_START_SIZE into CMessageHeader\n\n1df3111 protocol.h: Make enums in GetDataMsg concrete values (Wladimir J. van der Laan)\n2c09a52 protocol.h: Move MESSAGE_START_SIZE into CMessageHeader (Wladimir J. van der Laan)\nf9bd92d version.h: s/shord/short/ in comment (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "088d1f441301ca900b29b5cb64647e0e322c358d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/088d1f441301ca900b29b5cb64647e0e322c358d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/088d1f441301ca900b29b5cb64647e0e322c358d"
      },
      {
        "sha": "1df311118d79c04df1d41e044b19444cfda015da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1df311118d79c04df1d41e044b19444cfda015da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1df311118d79c04df1d41e044b19444cfda015da"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 26,
      "deletions": 25
    },
    "files": [
      {
        "sha": "f3b0e3c22eb557fe86cae56167f0788957cae931",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49c5910372899a365fd6b57b9e227518e24541fa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49c5910372899a365fd6b57b9e227518e24541fa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=49c5910372899a365fd6b57b9e227518e24541fa",
        "patch": "@@ -4371,11 +4371,11 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n             unsigned int nSize = 0;\n             try {\n                 // locate a header\n-                unsigned char buf[MESSAGE_START_SIZE];\n+                unsigned char buf[CMessageHeader::MESSAGE_START_SIZE];\n                 blkdat.FindByte(chainparams.MessageStart()[0]);\n                 nRewind = blkdat.GetPos()+1;\n                 blkdat >> FLATDATA(buf);\n-                if (memcmp(buf, chainparams.MessageStart(), MESSAGE_START_SIZE))\n+                if (memcmp(buf, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE))\n                     continue;\n                 // read size\n                 blkdat >> nSize;\n@@ -6266,7 +6266,7 @@ bool ProcessMessages(CNode* pfrom, CConnman& connman)\n         it++;\n \n         // Scan for message start\n-        if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), MESSAGE_START_SIZE) != 0) {\n+        if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n             LogPrintf(\"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->id);\n             fOk = false;\n             break;"
      },
      {
        "sha": "d19e0d3a5e24e59fd7d66019a5ebba70a5b7b52b",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 22,
        "deletions": 21,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49c5910372899a365fd6b57b9e227518e24541fa/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49c5910372899a365fd6b57b9e227518e24541fa/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=49c5910372899a365fd6b57b9e227518e24541fa",
        "patch": "@@ -18,8 +18,6 @@\n #include <stdint.h>\n #include <string>\n \n-#define MESSAGE_START_SIZE 4\n-\n /** Message header.\n  * (4) message start.\n  * (12) command.\n@@ -29,6 +27,16 @@\n class CMessageHeader\n {\n public:\n+    enum {\n+        MESSAGE_START_SIZE = 4,\n+        COMMAND_SIZE = 12,\n+        MESSAGE_SIZE_SIZE = 4,\n+        CHECKSUM_SIZE = 4,\n+\n+        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n+        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n+        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n+    };\n     typedef unsigned char MessageStartChars[MESSAGE_START_SIZE];\n \n     CMessageHeader(const MessageStartChars& pchMessageStartIn);\n@@ -48,17 +56,6 @@ class CMessageHeader\n         READWRITE(FLATDATA(pchChecksum));\n     }\n \n-    // TODO: make private (improves encapsulation)\n-public:\n-    enum {\n-        COMMAND_SIZE = 12,\n-        MESSAGE_SIZE_SIZE = 4,\n-        CHECKSUM_SIZE = 4,\n-\n-        MESSAGE_SIZE_OFFSET = MESSAGE_START_SIZE + COMMAND_SIZE,\n-        CHECKSUM_OFFSET = MESSAGE_SIZE_OFFSET + MESSAGE_SIZE_SIZE,\n-        HEADER_SIZE = MESSAGE_START_SIZE + COMMAND_SIZE + MESSAGE_SIZE_SIZE + CHECKSUM_SIZE\n-    };\n     char pchMessageStart[MESSAGE_START_SIZE];\n     char pchCommand[COMMAND_SIZE];\n     uint32_t nMessageSize;\n@@ -315,20 +312,24 @@ class CAddress : public CService\n     unsigned int nTime;\n };\n \n-/** getdata message types */\n+/** getdata message type flags */\n const uint32_t MSG_WITNESS_FLAG = 1 << 30;\n const uint32_t MSG_TYPE_MASK    = 0xffffffff >> 2;\n+\n+/** getdata / inv message types.\n+ * These numbers are defined by the protocol. When adding a new value, be sure\n+ * to mention it in the respective BIP.\n+ */\n enum GetDataMsg\n {\n     UNDEFINED = 0,\n-    MSG_TX,\n-    MSG_BLOCK,\n-    MSG_TYPE_MAX = MSG_BLOCK,\n+    MSG_TX = 1,\n+    MSG_BLOCK = 2,\n     // The following can only occur in getdata. Invs always use TX or BLOCK.\n-    MSG_FILTERED_BLOCK,\n-    MSG_CMPCT_BLOCK,\n-    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG,\n-    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,\n+    MSG_FILTERED_BLOCK = 3,  //!< Defined in BIP37\n+    MSG_CMPCT_BLOCK = 4,     //!< Defined in BIP152\n+    MSG_WITNESS_BLOCK = MSG_BLOCK | MSG_WITNESS_FLAG, //!< Defined in BIP144\n+    MSG_WITNESS_TX = MSG_TX | MSG_WITNESS_FLAG,       //!< Defined in BIP144\n     MSG_FILTERED_WITNESS_BLOCK = MSG_FILTERED_BLOCK | MSG_WITNESS_FLAG,\n };\n "
      },
      {
        "sha": "87bd65506670a6ab99c44c4e2f1442c0baf98f19",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/49c5910372899a365fd6b57b9e227518e24541fa/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/49c5910372899a365fd6b57b9e227518e24541fa/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=49c5910372899a365fd6b57b9e227518e24541fa",
        "patch": "@@ -39,7 +39,7 @@ static const int SENDHEADERS_VERSION = 70012;\n //! \"feefilter\" tells peers to filter invs to you by fee starts with this version\n static const int FEEFILTER_VERSION = 70013;\n \n-//! shord-id-based block download starts with this version\n+//! short-id-based block download starts with this version\n static const int SHORT_IDS_BLOCKS_VERSION = 70014;\n \n #endif // BITCOIN_VERSION_H"
      }
    ]
  },
  {
    "sha": "1724a405c9065f2c939e936aca9b5d37fca5e954",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNzI0YTQwNWM5MDY1ZjJjOTM5ZTkzNmFjYTliNWQzN2ZjYTVlOTU0",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-10-14T14:11:38Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-10-15T13:43:11Z"
      },
      "message": "Display minimum ping in debug window.",
      "tree": {
        "sha": "ec0a4b2adf350f1dfbef0408d9d6e3dd314c207d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec0a4b2adf350f1dfbef0408d9d6e3dd314c207d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1724a405c9065f2c939e936aca9b5d37fca5e954",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1724a405c9065f2c939e936aca9b5d37fca5e954",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1724a405c9065f2c939e936aca9b5d37fca5e954",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1724a405c9065f2c939e936aca9b5d37fca5e954/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d46429c83ec3815d0c595bf541ef5557c6b4942"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 34,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0f719a9c7f430d92ccb965484bd7846a9f2bcd46",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1724a405c9065f2c939e936aca9b5d37fca5e954/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1724a405c9065f2c939e936aca9b5d37fca5e954/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1724a405c9065f2c939e936aca9b5d37fca5e954",
        "patch": "@@ -659,7 +659,7 @@ void CNode::copyStats(CNodeStats &stats)\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.dPingTime = (((double)nPingUsecTime) / 1e6);\n-    stats.dPingMin  = (((double)nMinPingUsecTime) / 1e6);\n+    stats.dMinPing  = (((double)nMinPingUsecTime) / 1e6);\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)"
      },
      {
        "sha": "90a4db2c63eeaaff2b902372687067660094e942",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1724a405c9065f2c939e936aca9b5d37fca5e954/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1724a405c9065f2c939e936aca9b5d37fca5e954/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=1724a405c9065f2c939e936aca9b5d37fca5e954",
        "patch": "@@ -503,7 +503,7 @@ class CNodeStats\n     bool fWhitelisted;\n     double dPingTime;\n     double dPingWait;\n-    double dPingMin;\n+    double dMinPing;\n     std::string addrLocal;\n     CAddress addr;\n };"
      },
      {
        "sha": "8be4a955b3d34ecb2960df6b25f716f67adfe8e5",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=1724a405c9065f2c939e936aca9b5d37fca5e954",
        "patch": "@@ -1353,13 +1353,36 @@\n            </widget>\n           </item>\n           <item row=\"16\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"peerMinPingLabel\">\n+            <property name=\"text\">\n+             <string>Min Ping</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"16\" column=\"2\">\n+           <widget class=\"QLabel\" name=\"peerMinPing\">\n+            <property name=\"cursor\">\n+             <cursorShape>IBeamCursor</cursorShape>\n+            </property>\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+            <property name=\"textFormat\">\n+             <enum>Qt::PlainText</enum>\n+            </property>\n+            <property name=\"textInteractionFlags\">\n+             <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"17\" column=\"0\">\n            <widget class=\"QLabel\" name=\"label_timeoffset\">\n             <property name=\"text\">\n              <string>Time Offset</string>\n             </property>\n            </widget>\n           </item>\n-          <item row=\"16\" column=\"2\">\n+          <item row=\"17\" column=\"2\">\n            <widget class=\"QLabel\" name=\"timeoffset\">\n             <property name=\"cursor\">\n              <cursorShape>IBeamCursor</cursorShape>\n@@ -1375,7 +1398,7 @@\n             </property>\n            </widget>\n           </item>\n-          <item row=\"17\" column=\"1\">\n+          <item row=\"18\" column=\"1\">\n            <spacer name=\"verticalSpacer_3\">\n             <property name=\"orientation\">\n              <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "42dafa117560518f479debd265795322b2b32687",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=1724a405c9065f2c939e936aca9b5d37fca5e954",
        "patch": "@@ -947,7 +947,7 @@ QString formatServicesStr(quint64 mask)\n \n QString formatPingTime(double dPingTime)\n {\n-    return dPingTime == 0 ? QObject::tr(\"N/A\") : QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(dPingTime * 1000), 10));\n+    return (dPingTime == std::numeric_limits<int64_t>::max()/1e6 || dPingTime == 0) ? QObject::tr(\"N/A\") : QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(dPingTime * 1000), 10));\n }\n \n QString formatTimeOffset(int64_t nTimeOffset)"
      },
      {
        "sha": "a2f9471fcc688520039088d8f270d429a3935882",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=1724a405c9065f2c939e936aca9b5d37fca5e954",
        "patch": "@@ -31,7 +31,7 @@ bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombine\n     case PeerTableModel::Subversion:\n         return pLeft->cleanSubVer.compare(pRight->cleanSubVer) < 0;\n     case PeerTableModel::Ping:\n-        return pLeft->dPingTime < pRight->dPingTime;\n+        return pLeft->dMinPing < pRight->dMinPing;\n     }\n \n     return false;\n@@ -113,7 +113,7 @@ PeerTableModel::PeerTableModel(ClientModel *parent) :\n     clientModel(parent),\n     timer(0)\n {\n-    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping Time\");\n+    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping\");\n     priv = new PeerTablePriv();\n     // default to unsorted\n     priv->sortColumn = -1;\n@@ -166,7 +166,7 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n         case Subversion:\n             return QString::fromStdString(rec->nodeStats.cleanSubVer);\n         case Ping:\n-            return GUIUtil::formatPingTime(rec->nodeStats.dPingTime);\n+            return GUIUtil::formatPingTime(rec->nodeStats.dMinPing);\n         }\n     } else if (role == Qt::TextAlignmentRole) {\n         if (index.column() == Ping)"
      },
      {
        "sha": "a1017e6c16bb86eb334ca66d2c0d928d3c557830",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1724a405c9065f2c939e936aca9b5d37fca5e954/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=1724a405c9065f2c939e936aca9b5d37fca5e954",
        "patch": "@@ -895,6 +895,7 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n     ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nTimeConnected));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingTime));\n     ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingWait));\n+    ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.dMinPing));\n     ui->timeoffset->setText(GUIUtil::formatTimeOffset(stats->nodeStats.nTimeOffset));\n     ui->peerVersion->setText(QString(\"%1\").arg(QString::number(stats->nodeStats.nVersion)));\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));"
      },
      {
        "sha": "a8442d86929b7300d339006d11c8621e23bc0cf7",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1724a405c9065f2c939e936aca9b5d37fca5e954/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1724a405c9065f2c939e936aca9b5d37fca5e954/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=1724a405c9065f2c939e936aca9b5d37fca5e954",
        "patch": "@@ -141,8 +141,8 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n         if (stats.dPingTime > 0.0)\n             obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dPingMin < std::numeric_limits<int64_t>::max()/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dPingMin));\n+        if (stats.dMinPing < std::numeric_limits<int64_t>::max()/1e6)\n+            obj.push_back(Pair(\"minping\", stats.dMinPing));\n         if (stats.dPingWait > 0.0)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));"
      }
    ]
  },
  {
    "sha": "acf853df910339412bafb1743f42af1774f5b910",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2Y4NTNkZjkxMDMzOTQxMmJhZmIxNzQzZjQyYWYxNzc0ZjViOTEw",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-15T15:45:07Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-15T16:30:50Z"
      },
      "message": "Add script tests for FindAndDelete in pre-segwit and segwit scripts",
      "tree": {
        "sha": "8730503b621476df15f82f30765c57f8fbaadb0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8730503b621476df15f82f30765c57f8fbaadb0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acf853df910339412bafb1743f42af1774f5b910",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf853df910339412bafb1743f42af1774f5b910",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acf853df910339412bafb1743f42af1774f5b910",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf853df910339412bafb1743f42af1774f5b910/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 51,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e0f2f89190d936c7caec614c23bb5e889128ed0d",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf853df910339412bafb1743f42af1774f5b910/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf853df910339412bafb1743f42af1774f5b910/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=acf853df910339412bafb1743f42af1774f5b910",
        "patch": "@@ -874,7 +874,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     // Subset of script starting at the most recent codeseparator\n                     CScript scriptCode(pbegincodehash, pend);\n \n-                    // Drop the signature, since there's no way for a signature to sign itself\n+                    // Drop the signature in pre-segwit scripts but not segwit scripts\n                     if (sigversion == SIGVERSION_BASE) {\n                         scriptCode.FindAndDelete(CScript(vchSig));\n                     }\n@@ -935,7 +935,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     // Subset of script starting at the most recent codeseparator\n                     CScript scriptCode(pbegincodehash, pend);\n \n-                    // Drop the signatures, since there's no way for a signature to sign itself\n+                    // Drop the signature in pre-segwit scripts but not segwit scripts\n                     for (int k = 0; k < nSigsCount; k++)\n                     {\n                         valtype& vchSig = stacktop(-isig-k);"
      },
      {
        "sha": "f7d9e1847ffa0a69392b39a0ff58fe8f5a862814",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf853df910339412bafb1743f42af1774f5b910/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf853df910339412bafb1743f42af1774f5b910/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=acf853df910339412bafb1743f42af1774f5b910",
        "patch": "@@ -314,5 +314,31 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x21 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbff\", 1000]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n \n+[\"FindAndDelete tests\"],\n+[\"This is a test of FindAndDelete. The first tx is a spend of normal scriptPubKey and the second tx is a spend of bare P2WSH.\"],\n+[\"The redeemScript/witnessScript is CHECKSIGVERIFY <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01>.\"],\n+[\"The signature is <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01> <pubkey>,\"],\n+[\"where the pubkey is obtained through key recovery with sig and the wrong sighash.\"],\n+[\"This is to show that FindAndDelete is applied only to non-segwit scripts\"],\n+[\"To show that the tests are 'correctly wrong', they should pass by modifying OP_CHECKSIG under interpreter.cpp\"],\n+[\"by replacing (sigversion == SIGVERSION_BASE) with (sigversion != SIGVERSION_BASE)\"],\n+[\"Non-segwit: wrong sighash (without FindAndDelete) = 1ba1fe3bc90c5d1265460e684ce6774e324f0fabdf67619eda729e64e8b6bc08\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7000, \"HASH160 0x14 0x0c746489e2d83cdbb5b90b432773342ba809c134 EQUAL\", 200000]],\n+\"010000000169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f1581b0000b64830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012103b12a1ec8428fc74166926318c15e17408fea82dbb157575e16a8c365f546248f4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: wrong sighash (with FindAndDelete) = 71c9cd9b2869b9c70b01b1f0360c148f42dee72297db312638df136f43311f23\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7500, \"0x00 0x20 0x9e1be07558ea5cc8e02ed1d80c0911048afad949affa36d5c3951e3159dbea19\", 200000]],\n+\"0100000000010169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f14c1d000000ffffffff01010000000000000000034830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012102a9d7ed6e161f0e255c10bbfcca0128a9e2035c2c8da58899c54d22d3a31afdef4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0100000000\", \"P2SH,WITNESS\"],\n+[\"This is multisig version of the FindAndDelete tests\"],\n+[\"Script is 2 CHECKMULTISIGVERIFY <sig1> <sig2> DROP\"],\n+[\"52af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175\"],\n+[\"Signature is 0 <sig1> <sig2> 2 <key1> <key2>\"],\n+[\"Should pass by replacing (sigversion == SIGVERSION_BASE) with (sigversion != SIGVERSION_BASE) under OP_CHECKMULTISIG\"],\n+[\"Non-segwit: wrong sighash (without FindAndDelete) = 4bc6a53e8e16ef508c19e38bba08831daba85228b0211f323d4cb0999cf2a5e8\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7000, \"HASH160 0x14 0x5748407f5ca5cdca53ba30b79040260770c9ee1b EQUAL\", 200000]],\n+\"01000000019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a662896581b0000fd6f01004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596015221023fd5dd42b44769c5653cbc5947ff30ab8871f240ad0c0e7432aefe84b5b4ff3421039d52178dbde360b83f19cf348deb04fa8360e1bf5634577be8e50fafc2b0e4ef4c9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: wrong sighash (with FindAndDelete) = 17c50ec2181ecdfdc85ca081174b248199ba81fff730794d4f69b8ec031f2dce\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n+\"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c03959601010221023cb6055f4b57a1580c5a753e19610cafaedf7e0ff377731c77837fd666eae1712102c1b1db303ac232ffa8e5e7cc2cf5f96c6e40d3e6914061204c0541cb2043a0969552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "2f299aa5fea37a038ffe0678f3372254173ea199",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acf853df910339412bafb1743f42af1774f5b910/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acf853df910339412bafb1743f42af1774f5b910/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=acf853df910339412bafb1743f42af1774f5b910",
        "patch": "@@ -487,5 +487,28 @@\n [[[\"6eb98797a21c6c10aa74edf29d618be109f48a8e94c694f3701e08ca69186436\", 1, \"HASH160 0x14 0x9993a429037b5d912407a71c252019287b8d27a5 EQUAL\", 987654321]],\n \"0100000000010136641869ca081e70f394c6948e8af409e18b619df2ed74aa106c1ca29787b96e0100000023220020a16b5755f7f6f96dbd65f5f0d6ab9418b89af4b1f14a1bb8a09062c35f0dcb54ffffffff0200e9a435000000001976a914389ffce9cd9ae88dcc0631e88a821ffdbe9bfe2688acc0832f05000000001976a9147480a33f950689af511e6e84c138dbbd3c3ee41588ac080047304402206ac44d672dac41f9b00e28f4df20c52eeb087207e8d758d76d92c6fab3b73e2b0220367750dbbe19290069cba53d096f44530e4f98acaa594810388cf7409a1870ce01473044022068c7946a43232757cbdf9176f009a928e1cd9a1a8c212f15c1e11ac9f2925d9002205b75f937ff2f9f3c1246e547e54f62e027f64eefa2695578cc6432cdabce271502473044022059ebf56d98010a932cf8ecfec54c48e6139ed6adb0728c09cbe1e4fa0915302e022007cd986c8fa870ff5d2b3a89139c9fe7e499259875357e20fcbb15571c76795403483045022100fbefd94bd0a488d50b79102b5dad4ab6ced30c4069f1eaa69a4b5a763414067e02203156c6a5c9cf88f91265f5a942e96213afae16d83321c8b31bb342142a14d16381483045022100a5263ea0553ba89221984bd7f0b13613db16e7a70c549a86de0cc0444141a407022005c360ef0ae5a5d4f9f2f87a56c1546cc8268cab08c73501d6b3be2e1e1a8a08824730440220525406a1482936d5a21888260dc165497a90a15669636d8edca6b9fe490d309c022032af0c646a34a44d1f4576bf6a4a74b67940f8faa84c7df9abe12a01a11e2b4783cf56210307b8ae49ac90a048e9b53357a2354b3334e9c8bee813ecb98e99a7e07e8c3ba32103b28f0c28bfab54554ae8c658ac5c3e0ce6e79ad336331f78c428dd43eea8449b21034b8113d703413d57761b8b9781957b8c0ac1dfe69f492580ca4195f50376ba4a21033400f6afecb833092a9a21cfdf1ed1376e58c5d1f47de74683123987e967a8f42103a6d48b1131e94ba04d9737d61acdaa1322008af9602b3b14862c07a1789aac162102d8b661b0b3302ee2f162b09e07a55ad5dfbe673a9f01d9f0c19617681024306b56ae00000000\", \"P2SH,WITNESS\"],\n \n+[\"FindAndDelete tests\"],\n+[\"This is a test of FindAndDelete. The first tx is a spend of normal P2SH and the second tx is a spend of bare P2WSH.\"],\n+[\"The redeemScript/witnessScript is CHECKSIGVERIFY <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01>.\"],\n+[\"The signature is <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01> <pubkey>,\"],\n+[\"where the pubkey is obtained through key recovery with sig and correct sighash.\"],\n+[\"This is to show that FindAndDelete is applied only to non-segwit scripts\"],\n+[\"Non-segwit: correct sighash (with FindAndDelete) = 1ba1fe3bc90c5d1265460e684ce6774e324f0fabdf67619eda729e64e8b6bc08\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7000, \"HASH160 0x14 0x0c746489e2d83cdbb5b90b432773342ba809c134 EQUAL\", 200000]],\n+\"010000000169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f1581b0000b64830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0121037a3fb04bcdb09eba90f69961ba1692a3528e45e67c85b200df820212d7594d334aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: correct sighash (without FindAndDelete) = 71c9cd9b2869b9c70b01b1f0360c148f42dee72297db312638df136f43311f23\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7500, \"0x00 0x20 0x9e1be07558ea5cc8e02ed1d80c0911048afad949affa36d5c3951e3159dbea19\", 200000]],\n+\"0100000000010169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f14c1d000000ffffffff01010000000000000000034830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012102a9781d66b61fb5a7ef00ac5ad5bc6ffc78be7b44a566e3c87870e1079368df4c4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0100000000\", \"P2SH,WITNESS\"],\n+[\"This is multisig version of the FindAndDelete tests\"],\n+[\"Script is 2 CHECKMULTISIGVERIFY <sig1> <sig2> DROP\"],\n+[\"52af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175\"],\n+[\"Signature is 0 <sig1> <sig2> 2 <key1> <key2>\"],\n+[\"Non-segwit: correct sighash (with FindAndDelete) = 1d50f00ba4db2917b903b0ec5002e017343bb38876398c9510570f5dce099295\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7000, \"HASH160 0x14 0x5748407f5ca5cdca53ba30b79040260770c9ee1b EQUAL\", 200000]],\n+\"01000000019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a662896581b0000fd6f01004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c03959601522102cd74a2809ffeeed0092bc124fd79836706e41f048db3f6ae9df8708cefb83a1c2102e615999372426e46fd107b76eaf007156a507584aa2cc21de9eee3bdbd26d36c4c9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: correct sighash (without FindAndDelete) = c1628a1e7c67f14ca0c27c06e4fdeec2e6d1a73c7a91d7c046ff83e835aebb72\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n+\"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960101022102966f109c54e85d3aee8321301136cedeb9fc710fdef58a9de8a73942f8e567c021034ffc99dd9a79dd3cb31e2ab3e0b09e0e67db41ac068c625cd1f491576016c84e9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "37aefff5fcf7169a1b07ff8939850f630640f7e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozN2FlZmZmNWZjZjcxNjlhMWIwN2ZmODkzOTg1MGY2MzA2NDBmN2U3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T17:19:16Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T17:19:16Z"
      },
      "message": "Fix init segfault where InitLoadWallet() calls ATMP before genesis",
      "tree": {
        "sha": "d5aae4fc2f7709e607b545b1039fd57483fea7db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5aae4fc2f7709e607b545b1039fd57483fea7db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/37aefff5fcf7169a1b07ff8939850f630640f7e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37aefff5fcf7169a1b07ff8939850f630640f7e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/37aefff5fcf7169a1b07ff8939850f630640f7e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37aefff5fcf7169a1b07ff8939850f630640f7e7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "057d8eefeef9b49ce3af33faec5adcd7f800da08",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37aefff5fcf7169a1b07ff8939850f630640f7e7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37aefff5fcf7169a1b07ff8939850f630640f7e7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=37aefff5fcf7169a1b07ff8939850f630640f7e7",
        "patch": "@@ -1488,6 +1488,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n+#ifdef ENABLE_WALLET\n+    // Add wallet transactions that aren't already in a block to mempool\n+    // Do this here as mempool requires genesis block to be loaded\n+    if (pwalletMain)\n+        pwalletMain->ReacceptWalletTransactions();\n+#endif\n+\n     // ********************************************************* Step 11: start node\n \n     //// debug print"
      },
      {
        "sha": "6f86f3360db2ce16fcd43a151dc34ce8a57466b5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/37aefff5fcf7169a1b07ff8939850f630640f7e7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/37aefff5fcf7169a1b07ff8939850f630640f7e7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=37aefff5fcf7169a1b07ff8939850f630640f7e7",
        "patch": "@@ -3467,8 +3467,6 @@ bool CWallet::InitLoadWallet()\n         LogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n         LogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n     }\n-    // Add wallet transactions that aren't already in a block to mapTransactions\n-    walletInstance->ReacceptWalletTransactions();\n \n     pwalletMain = walletInstance;\n "
      }
    ]
  },
  {
    "sha": "aa9d3c9a503952589b359624bbb0da11dd7a5e3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTlkM2M5YTUwMzk1MjU4OWIzNTk2MjRiYmIwZGExMWRkN2E1ZTNm",
    "commit": {
      "author": {
        "name": "Steven",
        "email": "steven@sigwo.com",
        "date": "2016-10-15T17:57:19Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-15T17:57:19Z"
      },
      "message": "add software-properties-common\n\nThis allows using `add-apt-repository`.",
      "tree": {
        "sha": "da4fbd9c537698f3a8a0dc2955d0022bc9ea459f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da4fbd9c537698f3a8a0dc2955d0022bc9ea459f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa9d3c9a503952589b359624bbb0da11dd7a5e3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa9d3c9a503952589b359624bbb0da11dd7a5e3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa9d3c9a503952589b359624bbb0da11dd7a5e3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa9d3c9a503952589b359624bbb0da11dd7a5e3f/comments",
    "author": {
      "login": "sigwo",
      "id": 205676,
      "node_id": "MDQ6VXNlcjIwNTY3Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/205676?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sigwo",
      "html_url": "https://github.com/sigwo",
      "followers_url": "https://api.github.com/users/sigwo/followers",
      "following_url": "https://api.github.com/users/sigwo/following{/other_user}",
      "gists_url": "https://api.github.com/users/sigwo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sigwo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sigwo/subscriptions",
      "organizations_url": "https://api.github.com/users/sigwo/orgs",
      "repos_url": "https://api.github.com/users/sigwo/repos",
      "events_url": "https://api.github.com/users/sigwo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sigwo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7221ddc6d1609611205ff800a7c3f1b124fb810",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa9d3c9a503952589b359624bbb0da11dd7a5e3f/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa9d3c9a503952589b359624bbb0da11dd7a5e3f/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=aa9d3c9a503952589b359624bbb0da11dd7a5e3f",
        "patch": "@@ -82,6 +82,7 @@ install necessary parts of boost:\n BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n You can add the repository and install using the following commands:\n \n+    sudo apt-get install software-properties-common\n     sudo add-apt-repository ppa:bitcoin/bitcoin\n     sudo apt-get update\n     sudo apt-get install libdb4.8-dev libdb4.8++-dev"
      }
    ]
  },
  {
    "sha": "a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGFkMzdkNGVmNGJjZDgxYmM5ZDg2N2IyNzdlZmRlYmM4NmJjMmU4",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T21:51:05Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-15T21:51:05Z"
      },
      "message": "[qa] Build v4 blocks in p2p-compactblocktests\n\nThis fixes an issue in backporting to 0.13 as 0.13 enforces SF\nactivation by block version lockin instead of through a hard-coded\nblock height.",
      "tree": {
        "sha": "c3c3d2ee1fbc0113d1a6db738a268624914a028f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3c3d2ee1fbc0113d1a6db738a268624914a028f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "032e883b937a6b70d5c367fc2ee57d7eea8cb473",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/032e883b937a6b70d5c367fc2ee57d7eea8cb473",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/032e883b937a6b70d5c367fc2ee57d7eea8cb473"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "131654c333d4daa48687c47b32411b2efc84b05c",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
        "patch": "@@ -128,6 +128,7 @@ def build_block_on_tip(self, node, segwit=False):\n         tip = node.getbestblockhash()\n         mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        block.nVersion = 4\n         if segwit:\n             add_witness_commitment(block)\n         block.solve()"
      }
    ]
  },
  {
    "sha": "3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWRlMmY2NGNmZTQzYWI1M2U0ODY5ZmZjMzVkNWZkMjMyMDFlMWMx",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T15:53:16Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T15:53:35Z"
      },
      "message": "Add standard limits for P2WSH with tests",
      "tree": {
        "sha": "78eff29685321a56c9456c5d457c4c079aa7ddb9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78eff29685321a56c9456c5d457c4c079aa7ddb9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03dd707dc027fbf6f24120213f8eb66571600374",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03dd707dc027fbf6f24120213f8eb66571600374",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03dd707dc027fbf6f24120213f8eb66571600374"
      }
    ],
    "stats": {
      "total": 183,
      "additions": 181,
      "deletions": 2
    },
    "files": [
      {
        "sha": "16d1e8680273f878ba43dc1aa12d2cdc6306ed0e",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 111,
        "deletions": 0,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
        "patch": "@@ -1706,6 +1706,116 @@ def test_getblocktemplate_before_lockin(self):\n         assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n         self.nodes[0].setmocktime(0) # undo mocktime\n \n+    def test_non_standard_witness(self):\n+        print(\"\\tTesting detection of non-standard P2WSH witness\")\n+        pad = chr(1).encode('latin-1')\n+\n+        # Create scripts for tests\n+        scripts = []\n+        scripts.append(CScript([OP_DROP] * 100))\n+        scripts.append(CScript([OP_DROP] * 99))\n+        scripts.append(CScript([pad * 59] * 59 + [OP_DROP] * 60))\n+        scripts.append(CScript([pad * 59] * 59 + [OP_DROP] * 61))\n+\n+        p2wsh_scripts = []\n+\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # For each script, generate a pair of P2WSH and P2SH-P2WSH output.\n+        outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n+        for i in scripts:\n+            p2wsh = CScript([OP_0, sha256(i)])\n+            p2sh = hash160(p2wsh)\n+            p2wsh_scripts.append(p2wsh)\n+            tx.vout.append(CTxOut(outputvalue, p2wsh))\n+            tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n+        tx.rehash()\n+        txid = tx.sha256\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Creating transactions for tests\n+        p2wsh_txs = []\n+        p2sh_txs = []\n+        for i in range(len(scripts)):\n+            p2wsh_tx = CTransaction()\n+            p2wsh_tx.vin.append(CTxIn(COutPoint(txid,i*2)))\n+            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n+            p2wsh_tx.rehash()\n+            p2wsh_txs.append(p2wsh_tx)\n+            p2sh_tx = CTransaction()\n+            p2sh_tx.vin.append(CTxIn(COutPoint(txid,i*2+1), CScript([p2wsh_scripts[i]])))\n+            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2sh_tx.wit.vtxinwit.append(CTxInWitness())\n+            p2sh_tx.rehash()\n+            p2sh_txs.append(p2sh_tx)\n+\n+        # Testing native P2WSH\n+        # Witness stack size, excluding witnessScript, over 100 is non-standard\n+        p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[0], True, True)\n+\n+        # Stack element size over 80 bytes is non-standard\n+        p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n+        # It can't be used to blind a node to the transaction\n+        self.std_node.announce_tx_and_wait_for_getdata(p2wsh_txs[1])\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        self.std_node.announce_tx_and_wait_for_getdata(p2wsh_txs[1])\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+        # Standard nodes should accept if element size is not over 80 bytes\n+        p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n+        self.std_node.announce_tx_and_wait_for_getdata(p2wsh_txs[1])\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+\n+        # witnessScript size at 3600 bytes is standard\n+        p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+\n+        # witnessScript size at 3601 bytes is non-standard\n+        p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[3], True, True)\n+\n+        # Repeating the same tests with P2SH-P2WSH\n+        p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[0], True, True)\n+        p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n+        self.std_node.announce_tx_and_wait_for_getdata(p2sh_txs[1])\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        self.std_node.announce_tx_and_wait_for_getdata(p2sh_txs[1])\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n+        self.std_node.announce_tx_and_wait_for_getdata(p2sh_txs[1])\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n+        self.test_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        self.std_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[3], True, True)\n+\n+        self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n+        # Valid but non-standard transactions in a block should be accepted by standard node\n+        sync_blocks(self.nodes)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+\n+        self.utxo.pop(0)\n+\n+\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         self.test_node = TestNode() # sets NODE_WITNESS|NODE_NETWORK\n@@ -1778,6 +1888,7 @@ def run_test(self):\n         self.test_segwit_versions()\n         self.test_premature_coinbase_witness_spend()\n         self.test_signature_version_1()\n+        self.test_non_standard_witness()\n         sync_blocks(self.nodes)\n         if self.test_upgrade:\n             self.test_upgrade_after_activation(self.nodes[2], 2)"
      },
      {
        "sha": "020378b5dc4ea09535f4d1fdb02c5459ee79a120",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1273,6 +1273,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n+        // Check for non-standard witness in P2WSH\n+        if (!tx.wit.IsNull() && fRequireStandard && !IsWitnessStandard(tx, view))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n+\n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();"
      },
      {
        "sha": "ae42b2bd74fd8b3bbe38cefa0d4f13a82db7ae9f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin developers\n+// Copyright (c) 2009-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -154,6 +154,58 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        // We don't care if witness for this input is empty, since it must not be bloated.\n+        // If the script is invalid without witness, it would be caught sooner or later during validation.\n+        if (tx.wit.vtxinwit[i].IsNull())\n+            continue;\n+\n+        const CTxOut &prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+\n+        if (prevScript.IsPayToScriptHash()) {\n+            std::vector <std::vector<unsigned char> > stack;\n+            // If the scriptPubKey is P2SH, we try to extract the redeemScript casually by converting the scriptSig\n+            // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n+            // If the check fails at this stage, we know that this txid must be a bad one.\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return false;\n+            if (stack.empty())\n+                return false;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram))\n+            return false;\n+\n+        // Check P2WSH standard limits\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n+                return false;\n+            size_t sizeWitnessStack = tx.wit.vtxinwit[i].scriptWitness.stack.size() - 1;\n+            if (sizeWitnessStack > MAX_STANDARD_P2WSH_STACK_ITEMS)\n+                return false;\n+            for (unsigned int j = 0; j < sizeWitnessStack; j++) {\n+                if (tx.wit.vtxinwit[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n+                    return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n \n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)"
      },
      {
        "sha": "fb528d74868c56b770998c36799dc853b1bf38eb",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
        "patch": "@@ -30,6 +30,12 @@ static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n+/** The maximum number of witness stack items in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n+/** The maximum size of each witness stack item in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n+/** The maximum size of a standard witnessScript */\n+static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid\n@@ -69,6 +75,12 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+    /**\n+     * Check if the transaction is over standard P2WSH resources limit:\n+     * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n+     * These limits are adequate for multi-signature up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL,\n+     */\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n extern unsigned int nBytesPerSigOp;\n "
      }
    ]
  },
  {
    "sha": "4c0c25a604cec39675187507df423cff5d707ab5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzBjMjVhNjA0Y2VjMzk2NzUxODc1MDdkZjQyM2NmZjVkNzA3YWI1",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-01T17:19:33Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T15:53:35Z"
      },
      "message": "Require compressed keys in segwit as policy and disable signing with uncompressed keys for segwit scripts",
      "tree": {
        "sha": "efdefd6a50693257a234ebf9a8988c306a54a12b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efdefd6a50693257a234ebf9a8988c306a54a12b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c0c25a604cec39675187507df423cff5d707ab5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c0c25a604cec39675187507df423cff5d707ab5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c0c25a604cec39675187507df423cff5d707ab5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c0c25a604cec39675187507df423cff5d707ab5/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ade2f64cfe43ab53e4869ffc35d5fd23201e1c1"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 49,
      "deletions": 36
    },
    "files": [
      {
        "sha": "814e6c0b6ff94231f48b54830191e0ab819b1e65",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin developers\n+// Copyright (c) 2009-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -54,7 +54,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n                                                          SCRIPT_VERIFY_LOW_S |\n                                                          SCRIPT_VERIFY_WITNESS |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM;\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n+                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;"
      },
      {
        "sha": "836cf9ee352a04037b7c773abba6fccda5682720",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -79,8 +79,20 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n             return false;\n         }\n     } else {\n-          //  Non-canonical public key: neither compressed nor uncompressed\n-          return false;\n+        //  Non-canonical public key: neither compressed nor uncompressed\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool static IsCompressedPubKey(const valtype &vchPubKey) {\n+    if (vchPubKey.size() != 33) {\n+        //  Non-canonical public key: invalid length for compressed key\n+        return false;\n+    }\n+    if (vchPubKey[0] != 0x02 && vchPubKey[0] != 0x03) {\n+        //  Non-canonical public key: invalid prefix for compressed key\n+        return false;\n     }\n     return true;\n }\n@@ -199,10 +211,14 @@ bool CheckSignatureEncoding(const vector<unsigned char> &vchSig, unsigned int fl\n     return true;\n }\n \n-bool static CheckPubKeyEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {\n-    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchSig)) {\n+bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, const SigVersion &sigversion, ScriptError* serror) {\n+    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchPubKey)) {\n         return set_error(serror, SCRIPT_ERR_PUBKEYTYPE);\n     }\n+    // Only compressed keys are accepted in segwit\n+    if ((flags & SCRIPT_VERIFY_WITNESS_PUBKEYTYPE) != 0 && sigversion == SIGVERSION_WITNESS_V0 && !IsCompressedPubKey(vchPubKey)) {\n+        return set_error(serror, SCRIPT_ERR_WITNESS_PUBKEYTYPE);\n+    }\n     return true;\n }\n \n@@ -879,7 +895,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         scriptCode.FindAndDelete(CScript(vchSig));\n                     }\n \n-                    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n+                    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n                         //serror is set\n                         return false;\n                     }\n@@ -953,7 +969,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         // Note how this makes the exact order of pubkey/signature evaluation\n                         // distinguishable by CHECKMULTISIG NOT if the STRICTENC flag is set.\n                         // See the script_(in)valid tests for details.\n-                        if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n+                        if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n                             // serror is set\n                             return false;\n                         }"
      },
      {
        "sha": "79894c53003480de5a8b547ca00689f549422204",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -102,6 +102,10 @@ enum\n     // Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n     //\n     SCRIPT_VERIFY_NULLFAIL = (1U << 14),\n+\n+    // Public keys in segregated witness scripts must be compressed\n+    //\n+    SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);"
      },
      {
        "sha": "2c5359fe8afdb96b56d8649735d07f9fba4f7a26",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -85,6 +85,8 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Witness requires only-redeemscript scriptSig\";\n         case SCRIPT_ERR_WITNESS_UNEXPECTED:\n             return \"Witness provided for non-witness script\";\n+        case SCRIPT_ERR_WITNESS_PUBKEYTYPE:\n+            return \"Using non-compressed keys in segwit\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "430836991b2cf5bd7652e279263ae676cf9a6fa1",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -62,6 +62,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_WITNESS_MALLEATED,\n     SCRIPT_ERR_WITNESS_MALLEATED_P2SH,\n     SCRIPT_ERR_WITNESS_UNEXPECTED,\n+    SCRIPT_ERR_WITNESS_PUBKEYTYPE,\n \n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;"
      },
      {
        "sha": "f552ad5bbad25a95443e5733fd6b114d625dbf6d",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -26,6 +26,10 @@ bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig,\n     if (!keystore->GetKey(address, key))\n         return false;\n \n+    // Signing with uncompressed keys is disabled in witness scripts\n+    if (sigversion == SIGVERSION_WITNESS_V0 && !key.IsCompressed())\n+        return false;\n+\n     uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n     if (!key.Sign(hash, vchSig))\n         return false;"
      },
      {
        "sha": "7da95488afc4365b13b9202e4dd92209f53c3e4b",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -99,6 +99,7 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_WITNESS_MALLEATED, \"WITNESS_MALLEATED\"},\n     {SCRIPT_ERR_WITNESS_MALLEATED_P2SH, \"WITNESS_MALLEATED_P2SH\"},\n     {SCRIPT_ERR_WITNESS_UNEXPECTED, \"WITNESS_UNEXPECTED\"},\n+    {SCRIPT_ERR_WITNESS_PUBKEYTYPE, \"WITNESS_PUBKEYTYPE\"},\n };\n \n const char *FormatScriptError(ScriptError_t err)"
      },
      {
        "sha": "34d9547f3dc6013189560ac68c8c6585ca2a1166",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 26,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c0c25a604cec39675187507df423cff5d707ab5/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c0c25a604cec39675187507df423cff5d707ab5/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=4c0c25a604cec39675187507df423cff5d707ab5",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -55,7 +55,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n     (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n     (string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n-    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\n+    (string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE);\n \n unsigned int ParseScriptFlags(string strFlags)\n {\n@@ -429,7 +430,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     mtx.nVersion = 1;\n \n     CKey key;\n-    key.MakeNewKey(false);\n+    key.MakeNewKey(true); // Need to use compressed keys in segwit or the signing will fail\n     CBasicKeyStore keystore;\n     keystore.AddKeyPubKey(key, key.GetPubKey());\n     CKeyID hash = key.GetPubKey().GetID();\n@@ -625,30 +626,13 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n-    // Witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2);\n-    CheckWithFlag(output1, input1, 0, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n-    CheckWithFlag(output1, input2, 0, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    // Signing disabled for witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2, false);\n \n-    // P2SH witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1L));\n-    CheckWithFlag(output1, input1, 0, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n-    CheckWithFlag(output1, input2, 0, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    // Signing disabled for P2SH witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2, false);\n \n     // Normal 2-of-2 multisig\n     CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);"
      }
    ]
  },
  {
    "sha": "9f0397aff7afa2afa9328daea0a2053122e79d44",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjAzOTdhZmY3YWZhMmFmYTkzMjhkYWVhMGEyMDUzMTIyZTc5ZDQ0",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-24T06:44:17Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T15:53:35Z"
      },
      "message": "Make test framework produce lowS signatures",
      "tree": {
        "sha": "4f93095e7c5dab4be0bed8494401e70ca5ee818f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4f93095e7c5dab4be0bed8494401e70ca5ee818f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f0397aff7afa2afa9328daea0a2053122e79d44",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f0397aff7afa2afa9328daea0a2053122e79d44",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f0397aff7afa2afa9328daea0a2053122e79d44",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f0397aff7afa2afa9328daea0a2053122e79d44/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c0c25a604cec39675187507df423cff5d707ab5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c0c25a604cec39675187507df423cff5d707ab5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c0c25a604cec39675187507df423cff5d707ab5"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 23,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c63a15c1e0c92bd4a63d2b47bff4499e341cab3a",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f0397aff7afa2afa9328daea0a2053122e79d44/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f0397aff7afa2afa9328daea0a2053122e79d44/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=9f0397aff7afa2afa9328daea0a2053122e79d44",
        "patch": "@@ -75,6 +75,9 @@\n # this specifies the curve used with ECDSA.\n NID_secp256k1 = 714 # from openssl/obj_mac.h\n \n+SECP256K1_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n+SECP256K1_ORDER_HALF = SECP256K1_ORDER // 2\n+\n # Thx to Sam Devlin for the ctypes magic 64-bit fix.\n def _check_result(val, func, args):\n     if val == 0:\n@@ -147,7 +150,7 @@ def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n         r = self.get_raw_ecdh_key(other_pubkey)\n         return kdf(r)\n \n-    def sign(self, hash):\n+    def sign(self, hash, low_s = True):\n         # FIXME: need unit tests for below cases\n         if not isinstance(hash, bytes):\n             raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n@@ -159,7 +162,25 @@ def sign(self, hash):\n         mb_sig = ctypes.create_string_buffer(sig_size0.value)\n         result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n         assert 1 == result\n-        return mb_sig.raw[:sig_size0.value]\n+        assert mb_sig.raw[0] == 0x30\n+        assert mb_sig.raw[1] == sig_size0.value - 2\n+        total_size = mb_sig.raw[1]\n+        assert mb_sig.raw[2] == 2\n+        r_size = mb_sig.raw[3]\n+        assert mb_sig.raw[4 + r_size] == 2\n+        s_size = mb_sig.raw[5 + r_size]\n+        s_value = int.from_bytes(mb_sig.raw[6+r_size:6+r_size+s_size], byteorder='big')\n+        if (not low_s) or s_value <= SECP256K1_ORDER_HALF:\n+            return mb_sig.raw[:sig_size0.value]\n+        else:\n+            low_s_value = SECP256K1_ORDER - s_value\n+            low_s_bytes = (low_s_value).to_bytes(33, byteorder='big')\n+            while len(low_s_bytes) > 1 and low_s_bytes[0] == 0 and low_s_bytes[1] < 0x80:\n+                low_s_bytes = low_s_bytes[1:]\n+            new_s_size = len(low_s_bytes)\n+            new_total_size_byte = (total_size + new_s_size - s_size).to_bytes(1,byteorder='big')\n+            new_s_size_byte = (new_s_size).to_bytes(1,byteorder='big')\n+            return b'\\x30' + new_total_size_byte + mb_sig.raw[2:5+r_size] + new_s_size_byte + low_s_bytes\n \n     def verify(self, hash, sig):\n         \"\"\"Verify a DER signature\"\"\""
      }
    ]
  },
  {
    "sha": "b811124202152424109b8e95ebe7ac25ff2e83c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiODExMTI0MjAyMTUyNDI0MTA5YjhlOTVlYmU3YWMyNWZmMmU4M2Mw",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-10-06T17:15:33Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T15:53:35Z"
      },
      "message": "[qa] Add tests for uncompressed pubkeys in segwit",
      "tree": {
        "sha": "8c4238543241718a6de2b4a67b91a60dd43b630d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c4238543241718a6de2b4a67b91a60dd43b630d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b811124202152424109b8e95ebe7ac25ff2e83c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b811124202152424109b8e95ebe7ac25ff2e83c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b811124202152424109b8e95ebe7ac25ff2e83c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b811124202152424109b8e95ebe7ac25ff2e83c0/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9f0397aff7afa2afa9328daea0a2053122e79d44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f0397aff7afa2afa9328daea0a2053122e79d44",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9f0397aff7afa2afa9328daea0a2053122e79d44"
      }
    ],
    "stats": {
      "total": 125,
      "additions": 117,
      "deletions": 8
    },
    "files": [
      {
        "sha": "fa505d60c9b66a8ab1e1cd5eb7851d3a287412ab",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 117,
        "deletions": 8,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b811124202152424109b8e95ebe7ac25ff2e83c0/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b811124202152424109b8e95ebe7ac25ff2e83c0/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=b811124202152424109b8e95ebe7ac25ff2e83c0",
        "patch": "@@ -166,6 +166,17 @@ def __init__(self, sha256, n, nValue):\n         self.n = n\n         self.nValue = nValue\n \n+# Helper for getting the script associated with a P2PKH\n+def GetP2PKHScript(pubkeyhash):\n+    return CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+\n+# Add signature for a P2PK witness program.\n+def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n+    tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n+    signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n+    txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n+    txTo.rehash()\n+\n \n class SegWitTest(BitcoinTestFramework):\n \n@@ -1323,13 +1334,6 @@ def test_signature_version_1(self):\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n-        # Add signature for a P2PK witness program.\n-        def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n-            tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n-            signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n-            txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n-            txTo.rehash()\n-\n         # Test each hashtype\n         prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n         for sigflag in [ 0, SIGHASH_ANYONECANPAY ]:\n@@ -1443,7 +1447,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n-        script = CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+        script = GetP2PKHScript(pubkeyhash)\n         sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n \n@@ -1706,6 +1710,110 @@ def test_getblocktemplate_before_lockin(self):\n         assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n         self.nodes[0].setmocktime(0) # undo mocktime\n \n+    # Uncompressed pubkeys are no longer supported in default relay policy,\n+    # but (for now) are still valid in blocks.\n+    def test_uncompressed_pubkey(self):\n+        print(\"\\tTesting uncompressed pubkeys\")\n+        # Segwit transactions using uncompressed pubkeys are not accepted\n+        # under default policy, but should still pass consensus.\n+        key = CECKey()\n+        key.set_secretbytes(b\"9\")\n+        key.set_compressed(False)\n+        pubkey = CPubKey(key.get_pubkey())\n+        assert_equal(len(pubkey), 65) # This should be an uncompressed pubkey\n+\n+        assert(len(self.utxo) > 0)\n+        utxo = self.utxo.pop(0)\n+\n+        # Test 1: P2WPKH\n+        # First create a P2WPKH output that uses an uncompressed pubkey\n+        pubkeyhash = hash160(pubkey)\n+        scriptPKH = CScript([OP_0, pubkeyhash])\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(utxo.sha256, utxo.n), b\"\"))\n+        tx.vout.append(CTxOut(utxo.nValue-1000, scriptPKH))\n+        tx.rehash()\n+\n+        # Confirm it in a block.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try to spend it. Send it to a P2WSH output, which we'll\n+        # use in the next test.\n+        witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_hash = sha256(witness_program)\n+        scriptWSH = CScript([OP_0, witness_hash])\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptWSH))\n+        script = GetP2PKHScript(pubkeyhash)\n+        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ signature, pubkey ]\n+        tx2.rehash()\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        # But passes consensus.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 2: P2WSH\n+        # Try to spend the P2WSH output created in last test.\n+        # Send it to a P2SH(P2WSH) output, which we'll use in the next test.\n+        p2sh_witness_hash = hash160(scriptWSH)\n+        scriptP2SH = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        scriptSig = CScript([scriptWSH])\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, scriptP2SH))\n+        tx3.wit.vtxinwit.append(CTxInWitness())\n+        sign_P2PK_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        # But passes consensus.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 3: P2SH(P2WSH)\n+        # Try to spend the P2SH output created in the last test.\n+        # Send it to a P2PKH output, which we'll use in the next test.\n+        scriptPubKey = GetP2PKHScript(pubkeyhash)\n+        tx4 = CTransaction()\n+        tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), scriptSig))\n+        tx4.vout.append(CTxOut(tx3.vout[0].nValue-1000, scriptPubKey))\n+        tx4.wit.vtxinwit.append(CTxInWitness())\n+        sign_P2PK_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx4])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n+        # transactions.\n+        tx5 = CTransaction()\n+        tx5.vin.append(CTxIn(COutPoint(tx4.sha256, 0), b\"\"))\n+        tx5.vout.append(CTxOut(tx4.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        (sig_hash, err) = SignatureHash(scriptPubKey, tx5, 0, SIGHASH_ALL)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n+        tx5.vin[0].scriptSig = CScript([signature, pubkey])\n+        tx5.rehash()\n+        # Should pass policy and consensus.\n+        self.test_node.test_transaction_acceptance(tx5, True, True)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx5])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n+\n     def test_non_standard_witness(self):\n         print(\"\\tTesting detection of non-standard P2WSH witness\")\n         pad = chr(1).encode('latin-1')\n@@ -1887,6 +1995,7 @@ def run_test(self):\n         self.test_standardness_v0(segwit_activated=True)\n         self.test_segwit_versions()\n         self.test_premature_coinbase_witness_spend()\n+        self.test_uncompressed_pubkey()\n         self.test_signature_version_1()\n         self.test_non_standard_witness()\n         sync_blocks(self.nodes)"
      }
    ]
  },
  {
    "sha": "248f3a76a825a332e5495c5947ad283a9e5e938f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDhmM2E3NmE4MjVhMzMyZTU0OTVjNTk0N2FkMjgzYTllNWU5Mzhm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-16T16:32:36Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T16:34:37Z"
      },
      "message": "Fix ismine and addwitnessaddress: no uncompressed keys in segwit",
      "tree": {
        "sha": "558883d85e04a20c45d9292659dd60c7b178599b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/558883d85e04a20c45d9292659dd60c7b178599b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/248f3a76a825a332e5495c5947ad283a9e5e938f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248f3a76a825a332e5495c5947ad283a9e5e938f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/248f3a76a825a332e5495c5947ad283a9e5e938f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248f3a76a825a332e5495c5947ad283a9e5e938f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b811124202152424109b8e95ebe7ac25ff2e83c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b811124202152424109b8e95ebe7ac25ff2e83c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b811124202152424109b8e95ebe7ac25ff2e83c0"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 75,
      "deletions": 15
    },
    "files": [
      {
        "sha": "7467d23b2d3a20f4a655db73d0504c124f26a6a5",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 8,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/248f3a76a825a332e5495c5947ad283a9e5e938f/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/248f3a76a825a332e5495c5947ad283a9e5e938f/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=248f3a76a825a332e5495c5947ad283a9e5e938f",
        "patch": "@@ -29,13 +29,25 @@ unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n     return nResult;\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion sigversion)\n+{\n+    bool isInvalid = false;\n+    return IsMine(keystore, scriptPubKey, isInvalid, sigversion);\n+}\n+\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion sigversion)\n+{\n+    bool isInvalid = false;\n+    return IsMine(keystore, dest, isInvalid, sigversion);\n+}\n+\n+isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& isInvalid, SigVersion sigversion)\n {\n     CScript script = GetScriptForDestination(dest);\n-    return IsMine(keystore, script);\n+    return IsMine(keystore, script, isInvalid, sigversion);\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n+isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n@@ -53,12 +65,35 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n+        if (sigversion != SIGVERSION_BASE && vSolutions[0].size() != 33) {\n+            isInvalid = true;\n+            return ISMINE_NO;\n+        }\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n         break;\n-    case TX_PUBKEYHASH:\n     case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        isminetype ret = ::IsMine(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, SIGVERSION_WITNESS_V0);\n+        if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n+            return ret;\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n+        if (sigversion != SIGVERSION_BASE) {\n+            CPubKey pubkey;\n+            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n+                isInvalid = true;\n+                return ISMINE_NO;\n+            }\n+        }\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n         break;\n@@ -67,21 +102,24 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript);\n-            if (ret == ISMINE_SPENDABLE)\n+            isminetype ret = IsMine(keystore, subscript, isInvalid);\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n         break;\n     }\n     case TX_WITNESS_V0_SCRIPTHASH:\n     {\n+        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n         uint160 hash;\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n         CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript);\n-            if (ret == ISMINE_SPENDABLE)\n+            isminetype ret = IsMine(keystore, subscript, isInvalid, SIGVERSION_WITNESS_V0);\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n         break;\n@@ -95,6 +133,14 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         // them) enable spend-out-from-under-you attacks, especially\n         // in shared-wallet situations.\n         vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (sigversion != SIGVERSION_BASE) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    isInvalid = true;\n+                    return ISMINE_NO;\n+                }\n+            }\n+        }\n         if (HaveKeys(keys, keystore) == keys.size())\n             return ISMINE_SPENDABLE;\n         break;"
      },
      {
        "sha": "ec7a620e330cb57faa81cfec09beff9c2b8b1153",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/248f3a76a825a332e5495c5947ad283a9e5e938f/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/248f3a76a825a332e5495c5947ad283a9e5e938f/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=248f3a76a825a332e5495c5947ad283a9e5e938f",
        "patch": "@@ -28,7 +28,14 @@ enum isminetype\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n+/* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n+ * and return a ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n+ * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n+ * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n+ */\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion = SIGVERSION_BASE);\n \n #endif // BITCOIN_SCRIPT_ISMINE_H"
      },
      {
        "sha": "8e95426d11bdf74d5c24ba9f5866d113fa28a04d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/248f3a76a825a332e5495c5947ad283a9e5e938f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/248f3a76a825a332e5495c5947ad283a9e5e938f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=248f3a76a825a332e5495c5947ad283a9e5e938f",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1025,9 +1025,12 @@ class Witnessifier : public boost::static_visitor<bool>\n \n     bool operator()(const CKeyID &keyID) {\n         CPubKey pubkey;\n-        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n-            CScript basescript;\n-            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+        if (pwalletMain) {\n+            CScript basescript = GetScriptForDestination(keyID);\n+            isminetype typ;\n+            typ = IsMine(*pwalletMain, basescript, SIGVERSION_WITNESS_V0);\n+            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n+                return false;\n             CScript witscript = GetScriptForWitness(basescript);\n             pwalletMain->AddCScript(witscript);\n             result = CScriptID(witscript);\n@@ -1045,6 +1048,10 @@ class Witnessifier : public boost::static_visitor<bool>\n                 result = scriptID;\n                 return true;\n             }\n+            isminetype typ;\n+            typ = IsMine(*pwalletMain, subscript, SIGVERSION_WITNESS_V0);\n+            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n+                return false;\n             CScript witscript = GetScriptForWitness(subscript);\n             pwalletMain->AddCScript(witscript);\n             result = CScriptID(witscript);\n@@ -1090,7 +1097,7 @@ UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n     CTxDestination dest = address.Get();\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n     pwalletMain->SetAddressBook(w.result, \"\", \"receive\");"
      }
    ]
  },
  {
    "sha": "9260085377e89e666d0cb95b462261d7e3a9c82f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MjYwMDg1Mzc3ZTg5ZTY2NmQwY2I5NWI0NjIyNjFkN2UzYTljODJm",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-14T18:29:39Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T16:34:37Z"
      },
      "message": "test segwit uncompressed key fixes",
      "tree": {
        "sha": "88673704000636fad9ff454279f2632dea14a73e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88673704000636fad9ff454279f2632dea14a73e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9260085377e89e666d0cb95b462261d7e3a9c82f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9260085377e89e666d0cb95b462261d7e3a9c82f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9260085377e89e666d0cb95b462261d7e3a9c82f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9260085377e89e666d0cb95b462261d7e3a9c82f/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "248f3a76a825a332e5495c5947ad283a9e5e938f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/248f3a76a825a332e5495c5947ad283a9e5e938f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/248f3a76a825a332e5495c5947ad283a9e5e938f"
      }
    ],
    "stats": {
      "total": 895,
      "additions": 893,
      "deletions": 2
    },
    "files": [
      {
        "sha": "41a1b3b20fd00fbb7961b5c8c6b83c3e85297e37",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 359,
        "deletions": 1,
        "changes": 360,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9260085377e89e666d0cb95b462261d7e3a9c82f/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9260085377e89e666d0cb95b462261d7e3a9c82f/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=9260085377e89e666d0cb95b462261d7e3a9c82f",
        "patch": "@@ -9,7 +9,10 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import sha256, ripemd160\n+from test_framework.mininode import sha256, ripemd160, CTransaction, CTxIn, COutPoint, CTxOut\n+from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG\n+from io import BytesIO\n \n NODE_0 = 0\n NODE_1 = 1\n@@ -242,5 +245,360 @@ def run_test(self):\n             # This is an acceptable outcome\n             pass\n \n+        print(\"Verify behaviour of importaddress, addwitnessaddress and listunspent\")\n+\n+        # Some public keys to be used later\n+        pubkeys = [\n+            \"0363D44AABD0F1699138239DF2F042C3282C0671CC7A76826A55C8203D90E39242\", # cPiM8Ub4heR9NBYmgVzJQiUH1if44GSBGiqaeJySuL2BKxubvgwb\n+            \"02D3E626B3E616FC8662B489C123349FECBFC611E778E5BE739B257EAE4721E5BF\", # cPpAdHaD6VoYbW78kveN2bsvb45Q7G5PhaPApVUGwvF8VQ9brD97\n+            \"04A47F2CBCEFFA7B9BCDA184E7D5668D3DA6F9079AD41E422FA5FD7B2D458F2538A62F5BD8EC85C2477F39650BD391EA6250207065B2A81DA8B009FC891E898F0E\", # 91zqCU5B9sdWxzMt1ca3VzbtVm2YM6Hi5Rxn4UDtxEaN9C9nzXV\n+            \"02A47F2CBCEFFA7B9BCDA184E7D5668D3DA6F9079AD41E422FA5FD7B2D458F2538\", # cPQFjcVRpAUBG8BA9hzr2yEzHwKoMgLkJZBBtK9vJnvGJgMjzTbd\n+            \"036722F784214129FEB9E8129D626324F3F6716555B603FFE8300BBCB882151228\", # cQGtcm34xiLjB1v7bkRa4V3aAc9tS2UTuBZ1UnZGeSeNy627fN66\n+            \"0266A8396EE936BF6D99D17920DB21C6C7B1AB14C639D5CD72B300297E416FD2EC\", # cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\n+            \"0450A38BD7F0AC212FEBA77354A9B036A32E0F7C81FC4E0C5ADCA7C549C4505D2522458C2D9AE3CEFD684E039194B72C8A10F9CB9D4764AB26FCC2718D421D3B84\", # 92h2XPssjBpsJN5CqSP7v9a7cf2kgDunBC6PDFwJHMACM1rrVBJ\n+        ]\n+\n+        # Import a compressed key and an uncompressed key, generate some multisig addresses\n+        self.nodes[0].importprivkey(\"92e6XLo5jVAVwrQKPNTs93oQco8f8sDNBcpv73Dsrs397fQtFQn\")\n+        uncompressed_spendable_address = [\"mvozP4UwyGD2mGZU4D2eMvMLPB9WkMmMQu\"]\n+        self.nodes[0].importprivkey(\"cNC8eQ5dg3mFAVePDX4ddmPYpPbw41r9bm2jd1nLJT77e6RrzTRR\")\n+        compressed_spendable_address = [\"mmWQubrDomqpgSYekvsU7HWEVjLFHAakLe\"]\n+        assert ((self.nodes[0].validateaddress(uncompressed_spendable_address[0])['iscompressed'] == False))\n+        assert ((self.nodes[0].validateaddress(compressed_spendable_address[0])['iscompressed'] == True))\n+\n+        self.nodes[0].importpubkey(pubkeys[0])\n+        compressed_solvable_address = [key_to_p2pkh(pubkeys[0])]\n+        self.nodes[0].importpubkey(pubkeys[1])\n+        compressed_solvable_address.append(key_to_p2pkh(pubkeys[1]))\n+        self.nodes[0].importpubkey(pubkeys[2])\n+        uncompressed_solvable_address = [key_to_p2pkh(pubkeys[2])]\n+\n+        spendable_anytime = []                      # These outputs should be seen anytime after importprivkey and addmultisigaddress\n+        spendable_after_importaddress = []          # These outputs should be seen after importaddress\n+        solvable_after_importaddress = []           # These outputs should be seen after importaddress but not spendable\n+        unsolvable_after_importaddress = []         # These outputs should be unsolvable after importaddress\n+        solvable_anytime = []                       # These outputs should be solvable after importpubkey\n+        unseen_anytime = []                         # These outputs should never be seen\n+\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], uncompressed_spendable_address[0]]))\n+        compressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], uncompressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_solvable_address[0], compressed_solvable_address[1]]))\n+        unknown_address = [\"mtKKyoHabkk6e4ppT7NaM7THqPUt7AzPrT\", \"2NDP3jLWAFT8NDAiUa9qiE6oBt2awmMq7Dx\"]\n+\n+        # Test multisig_without_privkey\n+        # We have 2 public keys without private keys, use addmultisigaddress to add to wallet.\n+        # Money sent to P2SH of multisig of this should only be seen after importaddress with the BASE58 P2SH address.\n+\n+        multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])\n+        script = CScript([OP_2, hex_str_to_bytes(pubkeys[3]), hex_str_to_bytes(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n+        solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n+\n+        for i in compressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # bare and p2sh multisig with compressed keys should always be spendable\n+                spendable_anytime.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with compressed keys should always be spendable\n+                spendable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in uncompressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # bare and p2sh multisig with uncompressed keys should always be spendable\n+                spendable_anytime.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with uncompressed keys should always be spendable\n+                spendable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK and P2SH_P2PKH are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n+                # witness with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in compressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                solvable_after_importaddress.extend([bare, p2sh, p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with compressed keys should always be seen\n+                solvable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are seen after direct importaddress\n+                solvable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n+                solvable_after_importaddress.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with uncompressed keys should always be seen\n+                solvable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH with uncompressed keys are seen after direct importaddress\n+                solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n+                # witness with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        op1 = CScript([OP_1])\n+        op0 = CScript([OP_0])\n+        # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n+        unsolvable_address = [\"mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\", \"2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe\", script_to_p2sh(op1), script_to_p2sh(op0)]\n+        unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n+        unsolvablep2pkh = CScript([OP_DUP, OP_HASH160, hash160(unsolvable_address_key), OP_EQUALVERIFY, OP_CHECKSIG])\n+        unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n+        p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n+        p2wshop1 = CScript([OP_0, sha256(op1)])\n+        unsolvable_after_importaddress.append(unsolvablep2pkh)\n+        unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n+        unsolvable_after_importaddress.append(op1) # OP_1 will be imported as script\n+        unsolvable_after_importaddress.append(p2wshop1)\n+        unseen_anytime.append(op0) # OP_0 will be imported as P2SH address with no script provided\n+        unsolvable_after_importaddress.append(p2shop0)\n+\n+        spendable_txid = []\n+        solvable_txid = []\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime, 1))\n+        self.mine_and_test_listunspent(spendable_after_importaddress + solvable_after_importaddress + unseen_anytime + unsolvable_after_importaddress, 0)\n+\n+        importlist = []\n+        for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                bare = hex_str_to_bytes(v['hex'])\n+                importlist.append(bytes_to_hex_str(bare))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(bare)])))\n+            else:\n+                pubkey = hex_str_to_bytes(v['pubkey'])\n+                p2pk = CScript([pubkey, OP_CHECKSIG])\n+                p2pkh = CScript([OP_DUP, OP_HASH160, hash160(pubkey), OP_EQUALVERIFY, OP_CHECKSIG])\n+                importlist.append(bytes_to_hex_str(p2pk))\n+                importlist.append(bytes_to_hex_str(p2pkh))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, hash160(pubkey)])))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pk)])))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pkh)])))\n+\n+        importlist.append(bytes_to_hex_str(unsolvablep2pkh))\n+        importlist.append(bytes_to_hex_str(unsolvablep2wshp2pkh))\n+        importlist.append(bytes_to_hex_str(op1))\n+        importlist.append(bytes_to_hex_str(p2wshop1))\n+\n+        for i in importlist:\n+            try:\n+                self.nodes[0].importaddress(i,\"\",False,True)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n+\n+        self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n+        self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime + spendable_after_importaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime + solvable_after_importaddress, 1))\n+        self.mine_and_test_listunspent(unsolvable_after_importaddress, 1)\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used or the address is\n+        # not in the wallet\n+        # note that no witness address should be returned by unsolvable addresses\n+        # the multisig_without_privkey_address will fail because its keys were not added with importpubkey\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address + [multisig_without_privkey_address]:\n+            try:\n+                self.nodes[0].addwitnessaddress(i)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"Public key or redeemscript not known to wallet, or the key is uncompressed\")\n+            else:\n+                assert(False)\n+\n+        for i in compressed_spendable_address + compressed_solvable_address:\n+            witaddress = self.nodes[0].addwitnessaddress(i)\n+            # addwitnessaddress should return the same address if it is a known P2SH-witness address\n+            assert_equal(witaddress, self.nodes[0].addwitnessaddress(witaddress))\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime + spendable_after_importaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime + solvable_after_importaddress, 1))\n+        self.mine_and_test_listunspent(unsolvable_after_importaddress, 1)\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # Repeat some tests. This time we don't add witness scripts with importaddress\n+        # Import a compressed key and an uncompressed key, generate some multisig addresses\n+        self.nodes[0].importprivkey(\"927pw6RW8ZekycnXqBQ2JS5nPyo1yRfGNN8oq74HeddWSpafDJH\")\n+        uncompressed_spendable_address = [\"mguN2vNSCEUh6rJaXoAVwY3YZwZvEmf5xi\"]\n+        self.nodes[0].importprivkey(\"cMcrXaaUC48ZKpcyydfFo8PxHAjpsYLhdsp6nmtB3E2ER9UUHWnw\")\n+        compressed_spendable_address = [\"n1UNmpmbVUJ9ytXYXiurmGPQ3TRrXqPWKL\"]\n+\n+        self.nodes[0].importpubkey(pubkeys[5])\n+        compressed_solvable_address = [key_to_p2pkh(pubkeys[5])]\n+        self.nodes[0].importpubkey(pubkeys[6])\n+        uncompressed_solvable_address = [key_to_p2pkh(pubkeys[6])]\n+\n+        spendable_after_addwitnessaddress = []      # These outputs should be seen after importaddress\n+        solvable_after_addwitnessaddress=[]         # These outputs should be seen after importaddress but not spendable\n+        unseen_anytime = []                         # These outputs should never be seen\n+\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], uncompressed_spendable_address[0]]))\n+        compressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_solvable_address[0], uncompressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_solvable_address[0]]))\n+\n+        premature_witaddress = []\n+\n+        for i in compressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after addwitnessaddress\n+                spendable_after_addwitnessaddress.extend([p2wsh, p2sh_p2wsh])\n+                premature_witaddress.append(script_to_p2sh(p2wsh))\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2WPKH, P2SH_P2WPKH are spendable after addwitnessaddress\n+                spendable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n+                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2WPKH, P2SH_P2WPKH with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh])\n+\n+        for i in compressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                # P2WSH multisig without private key are seen after addwitnessaddress\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                solvable_after_addwitnessaddress.extend([p2wsh, p2sh_p2wsh])\n+                premature_witaddress.append(script_to_p2sh(p2wsh))\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2SH_P2PK, P2SH_P2PKH with compressed keys are seen after addwitnessaddress\n+                solvable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n+                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+\n+        self.mine_and_test_listunspent(spendable_after_addwitnessaddress + solvable_after_addwitnessaddress + unseen_anytime, 0)\n+\n+        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n+        # note that a multisig address returned by addmultisigaddress is not solvable until it is added with importaddress\n+        # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress + [compressed_solvable_address[1]]:\n+            try:\n+                self.nodes[0].addwitnessaddress(i)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"Public key or redeemscript not known to wallet, or the key is uncompressed\")\n+            else:\n+                assert(False)\n+\n+        # after importaddress it should pass addwitnessaddress\n+        v = self.nodes[0].validateaddress(compressed_solvable_address[1])\n+        self.nodes[0].importaddress(v['hex'],\"\",False,True)\n+        for i in compressed_spendable_address + compressed_solvable_address + premature_witaddress:\n+            witaddress = self.nodes[0].addwitnessaddress(i)\n+            assert_equal(witaddress, self.nodes[0].addwitnessaddress(witaddress))\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_after_addwitnessaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress, 1))\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # Check that spendable outputs are really spendable\n+        self.create_and_mine_tx_from_txids(spendable_txid)\n+\n+        # import all the private keys so solvable addresses become spendable\n+        self.nodes[0].importprivkey(\"cPiM8Ub4heR9NBYmgVzJQiUH1if44GSBGiqaeJySuL2BKxubvgwb\")\n+        self.nodes[0].importprivkey(\"cPpAdHaD6VoYbW78kveN2bsvb45Q7G5PhaPApVUGwvF8VQ9brD97\")\n+        self.nodes[0].importprivkey(\"91zqCU5B9sdWxzMt1ca3VzbtVm2YM6Hi5Rxn4UDtxEaN9C9nzXV\")\n+        self.nodes[0].importprivkey(\"cPQFjcVRpAUBG8BA9hzr2yEzHwKoMgLkJZBBtK9vJnvGJgMjzTbd\")\n+        self.nodes[0].importprivkey(\"cQGtcm34xiLjB1v7bkRa4V3aAc9tS2UTuBZ1UnZGeSeNy627fN66\")\n+        self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n+        self.create_and_mine_tx_from_txids(solvable_txid)\n+\n+    def mine_and_test_listunspent(self, script_list, ismine):\n+        utxo = find_unspent(self.nodes[0], 50)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(int('0x'+utxo['txid'],0), utxo['vout'])))\n+        for i in script_list:\n+            tx.vout.append(CTxOut(10000000, i))\n+        tx.rehash()\n+        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        txid = self.nodes[0].sendrawtransaction(signresults, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        watchcount = 0\n+        spendcount = 0\n+        for i in self.nodes[0].listunspent():\n+            if (i['txid'] == txid):\n+                watchcount += 1\n+                if (i['spendable'] == True):\n+                    spendcount += 1\n+        if (ismine == 2):\n+            assert_equal(spendcount, len(script_list))\n+        elif (ismine == 1):\n+            assert_equal(watchcount, len(script_list))\n+            assert_equal(spendcount, 0)\n+        else:\n+            assert_equal(watchcount, 0)\n+        return txid\n+\n+    def p2sh_address_to_script(self,v):\n+        bare = CScript(hex_str_to_bytes(v['hex']))\n+        p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        p2wsh = CScript([OP_0, sha256(bare)])\n+        p2sh_p2wsh = CScript([OP_HASH160, hash160(p2wsh), OP_EQUAL])\n+        return([bare, p2sh, p2wsh, p2sh_p2wsh])\n+\n+    def p2pkh_address_to_script(self,v):\n+        pubkey = hex_str_to_bytes(v['pubkey'])\n+        p2wpkh = CScript([OP_0, hash160(pubkey)])\n+        p2sh_p2wpkh = CScript([OP_HASH160, hash160(p2wpkh), OP_EQUAL])\n+        p2pk = CScript([pubkey, OP_CHECKSIG])\n+        p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        p2sh_p2pk = CScript([OP_HASH160, hash160(p2pk), OP_EQUAL])\n+        p2sh_p2pkh = CScript([OP_HASH160, hash160(p2pkh), OP_EQUAL])\n+        p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n+        p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n+        p2sh_p2wsh_p2pk = CScript([OP_HASH160, hash160(p2wsh_p2pk), OP_EQUAL])\n+        p2sh_p2wsh_p2pkh = CScript([OP_HASH160, hash160(p2wsh_p2pkh), OP_EQUAL])\n+        return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]\n+\n+    def create_and_mine_tx_from_txids(self, txids, success = True):\n+        tx = CTransaction()\n+        for i in txids:\n+            txtmp = CTransaction()\n+            txraw = self.nodes[0].getrawtransaction(i)\n+            f = BytesIO(hex_str_to_bytes(txraw))\n+            txtmp.deserialize(f)\n+            for j in range(len(txtmp.vout)):\n+                tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n+        tx.vout.append(CTxOut(0, CScript()))\n+        tx.rehash()\n+        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        self.nodes[0].sendrawtransaction(signresults, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+\n if __name__ == '__main__':\n     SegWitTest().main()"
      },
      {
        "sha": "50b999be6110d91df1730cc11961d14d5c87ccd9",
        "filename": "qa/rpc-tests/test_framework/address.py",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9260085377e89e666d0cb95b462261d7e3a9c82f/qa/rpc-tests/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9260085377e89e666d0cb95b462261d7e3a9c82f/qa/rpc-tests/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/address.py?ref=9260085377e89e666d0cb95b462261d7e3a9c82f",
        "patch": "@@ -0,0 +1,74 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# address.py\n+#\n+# This file encodes and decodes BASE58 P2PKH and P2SH addresses\n+#\n+\n+from .script import hash256, hash160, sha256, CScript, OP_0\n+from .util import bytes_to_hex_str, hex_str_to_bytes\n+\n+chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n+\n+def byte_to_base58(b, version):\n+    result = ''\n+    str = bytes_to_hex_str(b)\n+    str = bytes_to_hex_str(chr(version).encode('latin-1')) + str\n+    checksum = bytes_to_hex_str(hash256(hex_str_to_bytes(str)))\n+    str += checksum[:8]\n+    value = int('0x'+str,0)\n+    while value > 0:\n+        result = chars[value % 58] + result\n+        value //= 58\n+    while (str[:2] == '00'):\n+        result = chars[0] + result\n+        str = str[2:]\n+    return result\n+\n+# TODO: def base58_decode\n+\n+def keyhash_to_p2pkh(hash, main = False):\n+    assert (len(hash) == 20)\n+    version = 0 if main else 111\n+    return byte_to_base58(hash, version)\n+\n+def scripthash_to_p2sh(hash, main = False):\n+    assert (len(hash) == 20)\n+    version = 5 if main else 196\n+    return byte_to_base58(hash, version)\n+\n+def key_to_p2pkh(key, main = False):\n+    key = check_key(key)\n+    return keyhash_to_p2pkh(hash160(key), main)\n+\n+def script_to_p2sh(script, main = False):\n+    script = check_script(script)\n+    return scripthash_to_p2sh(hash160(script), main)\n+\n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def script_to_p2sh_p2wsh(script, main = False):\n+    script = check_script(script)\n+    p2shscript = CScript([OP_0, sha256(script)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def check_key(key):\n+    if (type(key) is str):\n+        key = hex_str_to_bytes(key) # Assuming this is hex string\n+    if (type(key) is bytes and (len(key) == 33 or len(key) == 65)):\n+        return key\n+    assert(False)\n+\n+def check_script(script):\n+    if (type(script) is str):\n+        script = hex_str_to_bytes(script) # Assuming this is hex string\n+    if (type(script) is bytes or type(script) is CScript):\n+        return script\n+    assert(False)"
      },
      {
        "sha": "5c054ed3e8fb06939a31061e6d2fe7d09222c9a2",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 367,
        "deletions": 1,
        "changes": 368,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9260085377e89e666d0cb95b462261d7e3a9c82f/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9260085377e89e666d0cb95b462261d7e3a9c82f/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=9260085377e89e666d0cb95b462261d7e3a9c82f",
        "patch": "@@ -1855,6 +1855,8 @@\n     \"OK\",\n     \"P2SH with CLEANSTACK\"\n ],\n+\n+[\"Testing with uncompressed keys in witness v0 without WITNESS_PUBKEYTYPE\"],\n [\n     [\n         \"304402200d461c140cfdfcf36b94961db57ae8c18d1cb80e9d95a9e47ac22470c1bf125502201c8dc1cbfef6a3ef90acbbb992ca22fe9466ee6f9d4898eda277a7ac3ab4b25101\",\n@@ -2139,7 +2141,371 @@\n     \"P2PK with witness\"\n ],\n \n-[\"CHECKSEQUENCEVERIFY tests\"], \n+[\"Testing with compressed keys in witness v0 with WITNESS_PUBKEYTYPE\"],\n+[\n+    [\n+        \"304402204256146fcf8e73b0fd817ffa2a4e408ff0418ff987dd08a4f485b62546f6c43c02203f3c8c3e2febc051e1222867f5f9d0eaf039d6792911c10940aa3cc74123378e01\",\n+        \"210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x1863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2WSH with compressed key\"\n+],\n+[\n+    [\n+        \"304402204edf27486f11432466b744df533e1acac727e0c83e5f912eb289a3df5bf8035f022075809fdd876ede40ad21667eba8b7e96394938f9c9c50f11b6a1280cce2cea8601\",\n+        \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2WPKH with compressed key\"\n+],\n+[\n+    [\n+        \"304402203a549090cc46bce1e5e95c4922ea2c12747988e0207b04c42f81cdbe87bb1539022050f57a245b875fd5119c419aaf050bcdf41384f0765f04b809e5bced1fe7093d01\",\n+        \"210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+        0.00000001\n+    ],\n+    \"0x22 0x00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+    \"HASH160 0x14 0xe4300531190587e3880d4c3004f5355d88ff928d EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2SH(P2WSH) with compressed key\"\n+],\n+[\n+    [\n+        \"304402201bc0d53046827f4a35a3166e33e3b3366c4085540dc383b95d21ed2ab11e368a0220333e78c6231214f5f8e59621e15d7eeab0d4e4d0796437e00bfbd2680c5f9c1701\",\n+        \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n+        0.00000001\n+    ],\n+    \"0x16 0x0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+    \"HASH160 0x14 0xbcfeb728b584253d5f3f70bcb780e9ef218a68f4 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2SH(P2WPKH) with compressed key\"\n+],\n+\n+[\"Testing with uncompressed keys in witness v0 with WITNESS_PUBKEYTYPE\"],\n+[\n+    [\n+        \"304402200d461c140cfdfcf36b94961db57ae8c18d1cb80e9d95a9e47ac22470c1bf125502201c8dc1cbfef6a3ef90acbbb992ca22fe9466ee6f9d4898eda277a7ac3ab4b25101\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2WSH\"\n+],\n+[\n+    [\n+        \"304402201e7216e5ccb3b61d46946ec6cc7e8c4e0117d13ac2fd4b152197e4805191c74202203e9903e33e84d9ee1dd13fb057afb7ccfb47006c23f6a067185efbc9dd780fc501\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2WPKH\"\n+],\n+[\n+    [\n+        \"3044022066e02c19a513049d49349cf5311a1b012b7c4fae023795a18ab1d91c23496c22022025e216342c8e07ce8ef51e8daee88f84306a9de66236cab230bb63067ded1ad301\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020b95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"HASH160 0x14 0xf386c2ba255cc56d20cfa6ea8b062f8b59945518 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2SH(P2WSH)\"\n+],\n+[\n+    [\n+        \"304402200929d11561cd958460371200f82e9cae64c727a495715a31828e27a7ad57b36d0220361732ced04a6f97351ecca21a56d0b8cd4932c1da1f8f569a2b68e5e48aed7801\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n+    ],\n+    \"0x16 0x001491b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"HASH160 0x14 0x17743beb429c55c942d2ec703b98c4d57c2df5c6 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2SH(P2WPKH)\"\n+],\n+\n+[\"Testing P2WSH multisig with compressed keys\"],\n+[\n+    [\n+        \"\",\n+        \"304402207eb8a59b5c65fc3f6aeef77066556ed5c541948a53a3ba7f7c375b8eed76ee7502201e036a7a9a98ff919ff94dc905d67a1ec006f79ef7cff0708485c8bb79dce38e01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x06c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022033706aed33b8155d5486df3b9bca8cdd3bd4bdb5436dce46d72cdaba51d22b4002203626e94fe53a178af46624f17315c6931f20a30b103f5e044e1eda0c3fe185c601\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002006c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"HASH160 0x14 0x26282aad7c29369d15fed062a778b6100d31a340 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402204048b7371ab1c544362efb89af0c80154747d665aa4fcfb2edfd2d161e57b42e02207e043748e96637080ffc3acbd4dcc6fee1e58d30f6d1269535f32188e5ddae7301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x06c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022073902ef0b8a554c36c44cc03c1b64df96ce2914ebcf946f5bb36078fd5245cdf02205b148f1ba127065fb8c83a5a9576f2dcd111739788ed4bb3ee08b2bd3860c91c01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002006c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"HASH160 0x14 0x26282aad7c29369d15fed062a778b6100d31a340 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\"\n+],\n+\n+[\"Testing P2WSH multisig with compressed and uncompressed keys (first key being the key closer to the top of stack)\"],\n+[\n+    [\n+        \"\",\n+        \"304402202d092ededd1f060609dbf8cb76950634ff42b3e62cf4adb69ab92397b07d742302204ff886f8d0817491a96d1daccdcc820f6feb122ee6230143303100db37dfa79f01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202dd7e91243f2235481ffb626c3b7baf2c859ae3a5a77fb750ef97b99a8125dc002204960de3d3c3ab9496e218ec57e5240e0e10a6f9546316fe240c216d45116d29301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202d092ededd1f060609dbf8cb76950634ff42b3e62cf4adb69ab92397b07d742302204ff886f8d0817491a96d1daccdcc820f6feb122ee6230143303100db37dfa79f01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202dd7e91243f2235481ffb626c3b7baf2c859ae3a5a77fb750ef97b99a8125dc002204960de3d3c3ab9496e218ec57e5240e0e10a6f9546316fe240c216d45116d29301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402201e9e6f7deef5b2f21d8223c5189b7d5e82d237c10e97165dd08f547c4e5ce6ed02206796372eb1cc6acb52e13ee2d7f45807780bf96b132cb6697f69434be74b1af901\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022045e667f3f0f3147b95597a24babe9afecea1f649fd23637dfa7ed7e9f3ac18440220295748e81005231135289fe3a88338dabba55afa1bdb4478691337009d82b68d01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402201e9e6f7deef5b2f21d8223c5189b7d5e82d237c10e97165dd08f547c4e5ce6ed02206796372eb1cc6acb52e13ee2d7f45807780bf96b132cb6697f69434be74b1af901\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022045e667f3f0f3147b95597a24babe9afecea1f649fd23637dfa7ed7e9f3ac18440220295748e81005231135289fe3a88338dabba55afa1bdb4478691337009d82b68d01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022046f5367a261fd8f8d7de6eb390491344f8ec2501638fb9a1095a0599a21d3f4c02205c1b3b51d20091c5f1020841bbca87b44ebe25405c64e4acf758f2eae8665f8401\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022053e210e4fb1881e6092fd75c3efc5163105599e246ded661c0ee2b5682cc2d6c02203a26b7ada8682a095b84c6d1b881637000b47d761fc837c4cee33555296d63f101\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG second key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022046f5367a261fd8f8d7de6eb390491344f8ec2501638fb9a1095a0599a21d3f4c02205c1b3b51d20091c5f1020841bbca87b44ebe25405c64e4acf758f2eae8665f8401\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022053e210e4fb1881e6092fd75c3efc5163105599e246ded661c0ee2b5682cc2d6c02203a26b7ada8682a095b84c6d1b881637000b47d761fc837c4cee33555296d63f101\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402206c6d9f5daf85b54af2a93ec38b15ab27f205dbf5c735365ff12451e43613d1f40220736a44be63423ed5ebf53491618b7cc3d8a5093861908da853739c73717938b701\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"30440220687871bc6144012d75baf585bb26ce13997f7d8c626f4d8825b069c3b2d064470220108936fe1c57327764782253e99090b09c203ec400ed35ce9e026ce2ecf842a001\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402206c6d9f5daf85b54af2a93ec38b15ab27f205dbf5c735365ff12451e43613d1f40220736a44be63423ed5ebf53491618b7cc3d8a5093861908da853739c73717938b701\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"30440220687871bc6144012d75baf585bb26ce13997f7d8c626f4d8825b069c3b2d064470220108936fe1c57327764782253e99090b09c203ec400ed35ce9e026ce2ecf842a001\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+\n+[\"CHECKSEQUENCEVERIFY tests\"],\n [\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on a empty stack\"],\n [\"-1\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"NEGATIVE_LOCKTIME\", \"CSV automatically fails if stack top is negative\"],\n [\"0x0100\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY,MINIMALDATA\", \"UNKNOWN_ERROR\", \"CSV fails if stack top is not minimally encoded\"],"
      },
      {
        "sha": "561adb8ea2252a9eebfa70ec8bd2a580c8dcbb4a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 0,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9260085377e89e666d0cb95b462261d7e3a9c82f/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9260085377e89e666d0cb95b462261d7e3a9c82f/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9260085377e89e666d0cb95b462261d7e3a9c82f",
        "patch": "@@ -826,6 +826,99 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                 \"P2PK with witness\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH\n                                ).PushSig(keys.key0).Push(\"0\").AsWit().ScriptError(SCRIPT_ERR_WITNESS_UNEXPECTED));\n \n+    // Compressed keys should pass SCRIPT_VERIFY_WITNESS_PUBKEYTYPE\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"Basic P2WSH with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C),\n+                                \"Basic P2WPKH with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0C).Push(keys.pubkey0C).AsWit());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C),\n+                                \"Basic P2SH(P2WPKH) with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0C).Push(keys.pubkey0C).AsWit().PushRedeem());\n+\n+    // Testing uncompressed key in witness with SCRIPT_VERIFY_WITNESS_PUBKEYTYPE\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2WSH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2WPKH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2SH(P2WPKH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+\n+    // P2WSH 1-of-2 multisig with compressed keys\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem());\n+\n+    // P2WSH 1-of-2 multisig with first key uncompressed\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    // P2WSH 1-of-2 multisig with second key uncompressed\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG second key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+\n     std::set<std::string> tests_set;\n \n     {"
      }
    ]
  },
  {
    "sha": "67d6ee1e3679504f46473fe0818970565ff3b137",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2N2Q2ZWUxZTM2Nzk1MDRmNDY0NzNmZTA4MTg5NzA1NjVmZjNiMTM3",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T19:18:36Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-10-16T19:18:36Z"
      },
      "message": "remove redundant tests in p2p-segwit.py",
      "tree": {
        "sha": "3a298b47bb9f6a33d96ba79599c9fccf80d22713",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a298b47bb9f6a33d96ba79599c9fccf80d22713"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67d6ee1e3679504f46473fe0818970565ff3b137",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d6ee1e3679504f46473fe0818970565ff3b137",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67d6ee1e3679504f46473fe0818970565ff3b137",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d6ee1e3679504f46473fe0818970565ff3b137/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9260085377e89e666d0cb95b462261d7e3a9c82f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9260085377e89e666d0cb95b462261d7e3a9c82f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9260085377e89e666d0cb95b462261d7e3a9c82f"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "09ab1b80fcbb2de0fda73a53a379a26c6197dc6d",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67d6ee1e3679504f46473fe0818970565ff3b137/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67d6ee1e3679504f46473fe0818970565ff3b137/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=67d6ee1e3679504f46473fe0818970565ff3b137",
        "patch": "@@ -1872,16 +1872,11 @@ def test_non_standard_witness(self):\n \n         # Stack element size over 80 bytes is non-standard\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        # It can't be used to blind a node to the transaction\n-        self.std_node.announce_tx_and_wait_for_getdata(p2wsh_txs[1])\n-        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n-        self.std_node.announce_tx_and_wait_for_getdata(p2wsh_txs[1])\n         self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n         # Non-standard nodes should accept\n         self.test_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n         # Standard nodes should accept if element size is not over 80 bytes\n         p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        self.std_node.announce_tx_and_wait_for_getdata(p2wsh_txs[1])\n         self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n \n         # witnessScript size at 3600 bytes is standard\n@@ -1900,13 +1895,9 @@ def test_non_standard_witness(self):\n         self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n         self.test_node.test_transaction_acceptance(p2sh_txs[0], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n-        self.std_node.announce_tx_and_wait_for_getdata(p2sh_txs[1])\n-        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n-        self.std_node.announce_tx_and_wait_for_getdata(p2sh_txs[1])\n         self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n         self.test_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n         p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n-        self.std_node.announce_tx_and_wait_for_getdata(p2sh_txs[1])\n         self.std_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n         p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n         self.test_node.test_transaction_acceptance(p2sh_txs[2], True, True)"
      }
    ]
  },
  {
    "sha": "b0aea8057921f0ed2288cf07048f652c7d6d9cf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMGFlYTgwNTc5MjFmMGVkMjI4OGNmMDcwNDhmNjUyYzdkNmQ5Y2Yz",
    "commit": {
      "author": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-08-26T21:35:46Z"
      },
      "committer": {
        "name": "BtcDrak",
        "email": "btcdrak@gmail.com",
        "date": "2016-10-16T22:22:15Z"
      },
      "message": "Sync bitcoin-tx with tx version policy",
      "tree": {
        "sha": "670008ea702bd826a4827d48b7c83a2535e52c3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/670008ea702bd826a4827d48b7c83a2535e52c3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b0aea8057921f0ed2288cf07048f652c7d6d9cf3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCgAGBQJYA/2YAAoJEMJrAopE8RGgyNkP/1fJuq+AIfmOUqatXQz3vZq6\nO7YzamW+iZPRLQu/xeFJGcumDIJUqa/M0lM0YOjgO7wqP2d32x7ErHEhur5salno\nQbi91V5iQlGlBpSwbQ8snQPyBf0zHph4qlKzonvjdowvNZIOMFL/RCBiwWEgJCjh\nXTM0by+aVUiaz0iGb3FkE5mNAG+Fez+OiRIfoeqp4DKevgP5EhvrBrrWvqowXWIC\njytPtcGwioNsKZHwS9uU4vyo/4ybBbkK2wLOPy1OPdWEoxB/qYKKI79c/cj9sWZi\n/ETdq1zyucB0WfubfWVr9ehBZhncBH/l3XlMknW05wY/b2+9CBlGhrljdBCU2er0\nz+7vpzeW6+PblyTF4TeRQqHb6lFsZbCekeOr/YVu0/462GL1HWBpn+Gaf7/P80O7\nzV050dfx7RxPkgVg0Z6vvIowsJnqPmsBh9OjuXBXZZIERV2lpJnTNBtk2HkfZExC\nG0vqUXV78nM5850IVA73NYNmh/Hus2utMQVwvcS0ecc1mkswNBuAerZ9hbTKPXdR\nZdTlzwcyG2pq+4H4nKfR+iQt4BXShUjAgrPfWPLZn2OekXanXS91ypF/DEqqUiAi\nfM95HvCYvbh+4fYNjK4miKb2zNtLJ8jQ0Fn9FKC6vXEzqILOSXTX8bZMtBTAubFm\nI/6SRusVwIPNxm9wept8\n=qsK0\n-----END PGP SIGNATURE-----",
        "payload": "tree 670008ea702bd826a4827d48b7c83a2535e52c3f\nparent 49c5910372899a365fd6b57b9e227518e24541fa\nauthor BtcDrak <btcdrak@gmail.com> 1472247346 +0100\ncommitter BtcDrak <btcdrak@gmail.com> 1476656535 +0100\n\nSync bitcoin-tx with tx version policy\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0aea8057921f0ed2288cf07048f652c7d6d9cf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b0aea8057921f0ed2288cf07048f652c7d6d9cf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0aea8057921f0ed2288cf07048f652c7d6d9cf3/comments",
    "author": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "btcdrak",
      "id": 7275704,
      "node_id": "MDQ6VXNlcjcyNzU3MDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7275704?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/btcdrak",
      "html_url": "https://github.com/btcdrak",
      "followers_url": "https://api.github.com/users/btcdrak/followers",
      "following_url": "https://api.github.com/users/btcdrak/following{/other_user}",
      "gists_url": "https://api.github.com/users/btcdrak/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/btcdrak/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/btcdrak/subscriptions",
      "organizations_url": "https://api.github.com/users/btcdrak/orgs",
      "repos_url": "https://api.github.com/users/btcdrak/repos",
      "events_url": "https://api.github.com/users/btcdrak/events{/privacy}",
      "received_events_url": "https://api.github.com/users/btcdrak/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e09afd632e3ff587312b8cdc7b4f34217a4d35f4",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b0aea8057921f0ed2288cf07048f652c7d6d9cf3/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b0aea8057921f0ed2288cf07048f652c7d6d9cf3/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=b0aea8057921f0ed2288cf07048f652c7d6d9cf3",
        "patch": "@@ -164,7 +164,7 @@ static void RegisterLoad(const string& strInput)\n static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n {\n     int64_t newVersion = atoi64(cmdVal);\n-    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+    if (newVersion < 1 || newVersion > CTransaction::MAX_STANDARD_VERSION)\n         throw runtime_error(\"Invalid TX version requested\");\n \n     tx.nVersion = (int) newVersion;"
      }
    ]
  },
  {
    "sha": "282abd8358e254d976cad05d0eb48586db276bcd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyODJhYmQ4MzU4ZTI1NGQ5NzZjYWQwNWQwZWI0ODU4NmRiMjc2YmNk",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-17T03:43:24Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-17T03:43:24Z"
      },
      "message": "[build-aux] Boost_Base serial 27",
      "tree": {
        "sha": "c2f52db41a9b78796b1466f494d8635b627bc1de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2f52db41a9b78796b1466f494d8635b627bc1de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/282abd8358e254d976cad05d0eb48586db276bcd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYBEjdAAoJEC7rn1zAlSbB/DsP+wa4p7PUij8lzstT9Wyo72GW\na5LVRCXGXCCUcg7mvn8Vhr4eANvBwMacSPU/i9i15gXN+LXb8P5VXAmoXwOV/sYo\nbM2qMiMmDMkPai9qExQ+Mco7NnMQF6JOuh+9d4rJaqGCEJQ3blc2tN8jZYR/mwdP\ntE4HwjIFipwbjS+zbjKyz5xGBdDSycrqfF3QTG+o6UINX6UaDr7lczQG1df6kz3z\nilh/elDMPcNH75CMNouzRBQ3p/yJ3RrjDpp+FUXlMFaeppxukT0PFStm3fKicjBk\nH1Yo9YWgYMBGFsfjjCyTQ5cFSs6/CHpj8q208L55jwkd5SBSsMfiDzftY4DW2nRL\nBZy+7WNKx9fMPLG/QrhR2VrZWsN8IDI+bAtpaOH9cOI0C4w3woXBaiGvyvohUSk2\nSj9q49EM5RAD0mnCMXf2D1/hyFv7S58nI2y6FRT9HNjiXw4RdN9/YTLRPGkfMZor\nX2bV3o9cv218F5rqDYzj3K1idjREIljtpIhGrALqmLFkcp1zLyFWC3fFp+cJQHRL\nuaG9Oa/P7HEg5pN1B0uC39FMJtMR7IMePuNbJRdkWeITeqcrvlTBJeLtuhQuKT1n\nfCgSIsipdElznRdhghsV8JhpR+NeOfWDs7qnLMrtlSFtX03WPizHd2XX1aIli2yE\nvgQ2AKqaOLHR8A6EsIFL\n=22MC\n-----END PGP SIGNATURE-----",
        "payload": "tree c2f52db41a9b78796b1466f494d8635b627bc1de\nparent e2b8c394d61de1e153b9b39d99c45654774f00de\nauthor fanquake <fanquake@gmail.com> 1476675804 +0800\ncommitter fanquake <fanquake@gmail.com> 1476675804 +0800\n\n[build-aux] Boost_Base serial 27\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/282abd8358e254d976cad05d0eb48586db276bcd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/282abd8358e254d976cad05d0eb48586db276bcd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/282abd8358e254d976cad05d0eb48586db276bcd/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2b8c394d61de1e153b9b39d99c45654774f00de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b8c394d61de1e153b9b39d99c45654774f00de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b8c394d61de1e153b9b39d99c45654774f00de"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "650c94fa64752a362a34eb6d489c194255ecfc51",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/282abd8358e254d976cad05d0eb48586db276bcd/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/282abd8358e254d976cad05d0eb48586db276bcd/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=282abd8358e254d976cad05d0eb48586db276bcd",
        "patch": "@@ -33,7 +33,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 26\n+#serial 27\n \n AC_DEFUN([AX_BOOST_BASE],\n [\n@@ -96,7 +96,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n         libsubdirs=\"lib64 libx32 lib lib64\"\n         ;;\n       ppc64|s390x|sparc64|aarch64|ppc64le)\n-        libsubdirs=\"lib64 lib lib64 ppc64le\"\n+        libsubdirs=\"lib64 lib lib64\"\n         ;;\n     esac\n "
      }
    ]
  },
  {
    "sha": "6dd37237222f7102e223ece948150cb5c5087e3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGQzNzIzNzIyMmY3MTAyZTIyM2VjZTk0ODE1MGNiNWM1MDg3ZTNj",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-17T03:43:59Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2016-10-17T03:43:59Z"
      },
      "message": "Set minimum required Boost to 1.47.0",
      "tree": {
        "sha": "6fd3b1bb537ce294cec7551197befc11e51aeded",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fd3b1bb537ce294cec7551197befc11e51aeded"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dd37237222f7102e223ece948150cb5c5087e3c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYBEkAAAoJEC7rn1zAlSbBk9EP/0sU8SAc0uXY5KfMCrJELAmB\naUzkqd6F6eKUft43s1p44wpSdVe89S0na38Zy92lkdJfLLqNTD2vnKTQCN99eAoY\nDg506dZBPbYtytJN9JcVuo7zebin4UypT2vB42hsDFYRHUgzhp9Z9mKngjjZ18CN\nwAa+0C5hXdWpJWyN5ECY7ywK94/eRkpjZnW5PM9UOWqiuXkq27t7fAitx01Nq8aM\nFOCiyUgG5zVQ4S7l8kYaewRHx3np0KSrERu+W6GeiJeE7FrQ5N6UTgXyU7QG/xxJ\nAXhdPL1KqCiWk5PLIzfAMY8YgNG3OrLz5urYauu/X96Jq7AXHznbtYY9YABoVbyz\nLbgjRdmWT/8HB2ZMC9852KT+xNm8iia74/m/zboaTvnGUPS85E3no0NUJazKMWKB\nFdGDM2LT/wwri/QCSyCboIG0PeD6k240Oo3Ql/KWvm5YwZSprvInuidbROw7Grs7\nXi0vFFNPn0lyyDLVllwc+jHoWVo7QrTLk3hJWU34sXkraYd0zBlxBJsv32ovYYdt\nepa+72ZBHUNRlLtBrN9sw0yeJwINACX7euKrvT0LFbJrR+wUtl4CGyDeem4J7qRu\n5Ym6laa+/bEkYpQuYBydmEeivYcr0AulbGTnaSqS4zVpENIESXSr7H9wBk+e5Gj3\nM6eUUlv7p64LlzluRNzj\n=CACD\n-----END PGP SIGNATURE-----",
        "payload": "tree 6fd3b1bb537ce294cec7551197befc11e51aeded\nparent 282abd8358e254d976cad05d0eb48586db276bcd\nauthor fanquake <fanquake@gmail.com> 1476675839 +0800\ncommitter fanquake <fanquake@gmail.com> 1476675839 +0800\n\nSet minimum required Boost to 1.47.0\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dd37237222f7102e223ece948150cb5c5087e3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dd37237222f7102e223ece948150cb5c5087e3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dd37237222f7102e223ece948150cb5c5087e3c/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "282abd8358e254d976cad05d0eb48586db276bcd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/282abd8358e254d976cad05d0eb48586db276bcd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/282abd8358e254d976cad05d0eb48586db276bcd"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "705327e816d94c437251acda2848f4470b7e5b12",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dd37237222f7102e223ece948150cb5c5087e3c/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dd37237222f7102e223ece948150cb5c5087e3c/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6dd37237222f7102e223ece948150cb5c5087e3c",
        "patch": "@@ -589,8 +589,11 @@ fi\n \n if test x$use_boost = xyes; then\n \n+dnl Minimum required Boost version\n+define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n+\n dnl Check for boost libs\n-AX_BOOST_BASE\n+AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_PROGRAM_OPTIONS"
      }
    ]
  },
  {
    "sha": "7c1716f65d1bfe5e98eec487d3484010305ab334",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzE3MTZmNjVkMWJmZTVlOThlZWM0ODdkMzQ4NDAxMDMwNWFiMzM0",
    "commit": {
      "author": {
        "name": "poole_party",
        "email": "james@esixteen.co",
        "date": "2016-10-17T04:08:33Z"
      },
      "committer": {
        "name": "poole_party",
        "email": "james@esixteen.co",
        "date": "2016-10-17T04:08:33Z"
      },
      "message": "Documentation for Building on Windows with WSL\n\nThe new Windows Subsystem for Linux (WSL) allows a user to run a bash shell directly on Windows in an Ubuntu based environment.  This can be used to cross-compile Bitcoin directly on Windows without the need for a separate Linux VM or Server.  The instructions included in this commit explain how to configure the environment and build Bitcoin Core using this new feature.",
      "tree": {
        "sha": "db2ae0404fd5f1842fc23cd504d0504d8ff9b654",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db2ae0404fd5f1842fc23cd504d0504d8ff9b654"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c1716f65d1bfe5e98eec487d3484010305ab334",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c1716f65d1bfe5e98eec487d3484010305ab334",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c1716f65d1bfe5e98eec487d3484010305ab334",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c1716f65d1bfe5e98eec487d3484010305ab334/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "044356830a6bae210587a696f29d7441c4bf298a",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c1716f65d1bfe5e98eec487d3484010305ab334/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c1716f65d1bfe5e98eec487d3484010305ab334/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=7c1716f65d1bfe5e98eec487d3484010305ab334",
        "patch": "@@ -1,13 +1,45 @@\n WINDOWS BUILD NOTES\n ====================\n \n-Some notes on how to build Bitcoin Core for Windows.\n+Below are some notes on how to build Bitcoin Core for Windows.\n \n Most developers use cross-compilation from Ubuntu to build executables for\n Windows. This is also used to build the release binaries.\n \n-Building on Windows itself is possible (for example using msys / mingw-w64),\n-but no one documented the steps to do this. If you are doing this, please contribute them.\n+While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n+using the Windows Subsystem For Linux is the most straight forward.  If you are building with\n+an alternative method, please contribute the instructions here for others who are running versions\n+of Windows that are not compatible with the Windows Subsystem for Linux.\n+\n+Compiling with the Windows Subsystem For Linux\n+-------------------\n+\n+With Windows 10, Microsoft has released a new feature named the\n+[Windows Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about).  This feature allows you to run a bash shell directly on Windows in an Ubuntu based\n+environment.  Within this environment you can cross compile for Windows without the need for a separate Linux VM or Server.\n+\n+This feature is not supported in versions of Windows prior to Windows 10 or on Windows Server SKUs.\n+\n+To get the bash shell, you must first activate the feature in Windows.\n+\n+1. Turn on Developer Mode\n+  * Open Settings -> Update and Security -> For developers\n+  * Select the Developer Mode radio button\n+  * Restart if necessary\n+2. Enable the Windows Subsystem for Linux feature\n+  * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n+  * Select Windows Subsystem for Linux (beta)\n+  * Click OK\n+  * Restart if necessary\n+3. Complete Installation\n+  * Open a cmd prompt and type \"bash\"\n+  * Accept the license\n+  * Create a new UNIX user account (this is a separate account from your Windows account)\n+\n+After the bash shell is active, you can follow the instructions below for Windows 64-bit Cross-compilation.\n+When building dependencies within the 'depends' folder, you may encounter an error building\n+the protobuf dependency.  If this occurs, re-run the command with sudo.  This is likely\n+a bug with the Windows Subsystem for Linux feature and may be fixed with a future update.\n \n Cross-compilation\n -------------------\n@@ -41,4 +73,3 @@ To build executables for Windows 64-bit:\n     make\n \n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n-"
      }
    ]
  },
  {
    "sha": "5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWFhYTgzYWMxZjVlYjUyNWY5M2UyODA4ZmFmZDczZjVlZDk3MDEz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-13T14:19:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:08:35Z"
      },
      "message": "Kill insecure_random and associated global state\n\nThere are only a few uses of `insecure_random` outside the tests.\nThis PR replaces uses of insecure_random (and its accompanying global\nstate) in the core code with an FastRandomContext that is automatically\nseeded on creation.\n\nThis is meant to be used for inner loops. The FastRandomContext\ncan be in the outer scope, or the class itself, then rand32() is used\ninside the loop. Useful e.g. for pushing addresses in CNode or the fee\nrounding, or randomization for coin selection.\n\nAs a context is created per purpose, thus it gets rid of\ncross-thread unprotected shared usage of a single set of globals, this\nshould also get rid of the potential race conditions.\n\n- I'd say TxMempool::check is not called enough to warrant using a special\n  fast random context, this is switched to GetRand() (open for\n  discussion...)\n\n- The use of `insecure_rand` in ConnectThroughProxy has been replaced by\n  an atomic integer counter. The only goal here is to have a different\n  credentials pair for each connection to go on a different Tor circuit,\n  it does not need to be random nor unpredictable.\n\n- To avoid having a FastRandomContext on every CNode, the context is\n  passed into PushAddress as appropriate.\n\nThere remains an insecure_random for test usage in `test_random.h`.",
      "tree": {
        "sha": "f4c1303e431e91743be29f775bdec90426e40702",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4c1303e431e91743be29f775bdec90426e40702"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d46429c83ec3815d0c595bf541ef5557c6b4942",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d46429c83ec3815d0c595bf541ef5557c6b4942"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 92,
      "deletions": 66
    },
    "files": [
      {
        "sha": "20165232122be0a3f71564c85475df3f315e39ec",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -358,8 +358,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nKBucket = RandomInt(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand()) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nKBucket = (nKBucket + insecure_rand.rand32()) % ADDRMAN_TRIED_BUCKET_COUNT;\n+                nKBucketPos = (nKBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n@@ -375,8 +375,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nUBucket = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvNew[nUBucket][nUBucketPos] == -1) {\n-                nUBucket = (nUBucket + insecure_rand()) % ADDRMAN_NEW_BUCKET_COUNT;\n-                nUBucketPos = (nUBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nUBucket = (nUBucket + insecure_rand.rand32()) % ADDRMAN_NEW_BUCKET_COUNT;\n+                nUBucketPos = (nUBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);"
      },
      {
        "sha": "e9e137c978a7e48b9a069475536d9695e7ba1c36",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -211,6 +211,9 @@ class CAddrMan\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n+    //! Source of random numbers for randomization in inner loops\n+    FastRandomContext insecure_rand;\n+\n     //! Find an entry.\n     CAddrInfo* Find(const CNetAddr& addr, int *pnId = NULL);\n "
      },
      {
        "sha": "ab0dc07529c477d510381e24c3f0ab285cc5a3db",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -4758,6 +4758,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     uint64_t hashAddr = addr.GetHash();\n     std::multimap<uint64_t, CNode*> mapMix;\n     const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+    FastRandomContext insecure_rand;\n \n     auto sortfunc = [&mapMix, &hasher](CNode* pnode) {\n         if (pnode->nVersion >= CADDR_TIME_VERSION) {\n@@ -4766,9 +4767,9 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n         }\n     };\n \n-    auto pushfunc = [&addr, &mapMix, &nRelayNodes] {\n+    auto pushfunc = [&addr, &mapMix, &nRelayNodes, &insecure_rand] {\n         for (auto mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n-            mi->second->PushAddress(addr);\n+            mi->second->PushAddress(addr, insecure_rand);\n     };\n \n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n@@ -5078,14 +5079,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (fListen && !IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices());\n+                FastRandomContext insecure_rand;\n                 if (addr.IsRoutable())\n                 {\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom->PushAddress(addr);\n+                    pfrom->PushAddress(addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n                     addr.SetIP(pfrom->addrLocal);\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom->PushAddress(addr);\n+                    pfrom->PushAddress(addr, insecure_rand);\n                 }\n             }\n \n@@ -6008,8 +6010,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = connman.GetAddresses();\n+        FastRandomContext insecure_rand;\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n-            pfrom->PushAddress(addr);\n+            pfrom->PushAddress(addr, insecure_rand);\n     }\n \n \n@@ -6842,7 +6845,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n             else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->nextSendTimeFeeFilter &&\n                      (currentFilter < 3 * pto->lastSentFeeFilter / 4 || currentFilter > 4 * pto->lastSentFeeFilter / 3)) {\n-                pto->nextSendTimeFeeFilter = timeNow + (insecure_rand() % MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+                pto->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n             }\n         }\n     }"
      },
      {
        "sha": "643dd806dfb5c1e220cb2cc8a23b16ed2afbf49d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -187,7 +187,8 @@ void AdvertiseLocal(CNode *pnode)\n         if (addrLocal.IsRoutable())\n         {\n             LogPrint(\"net\", \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n-            pnode->PushAddress(addrLocal);\n+            FastRandomContext insecure_rand;\n+            pnode->PushAddress(addrLocal, insecure_rand);\n         }\n     }\n }"
      },
      {
        "sha": "3417cb2abafb11ff369fb8567731bae03e5645a9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -735,14 +735,14 @@ class CNode\n         addrKnown.insert(_addr.GetKey());\n     }\n \n-    void PushAddress(const CAddress& _addr)\n+    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)\n     {\n         // Known checking here is only to save space from duplicates.\n         // SendMessages will filter it again for knowns that were added\n         // after addresses were pushed.\n         if (_addr.IsValid() && !addrKnown.contains(_addr.GetKey())) {\n             if (vAddrToSend.size() >= MAX_ADDR_TO_SEND) {\n-                vAddrToSend[insecure_rand() % vAddrToSend.size()] = _addr;\n+                vAddrToSend[insecure_rand.rand32() % vAddrToSend.size()] = _addr;\n             } else {\n                 vAddrToSend.push_back(_addr);\n             }"
      },
      {
        "sha": "9fe34108f57d1f67cb27eb38272086fb31c31ceb",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -596,8 +596,8 @@ static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDe\n     // do socks negotiation\n     if (proxy.randomize_credentials) {\n         ProxyCredentials random_auth;\n-        random_auth.username = strprintf(\"%i\", insecure_rand());\n-        random_auth.password = strprintf(\"%i\", insecure_rand());\n+        static std::atomic_int counter;\n+        random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n         if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n             return false;\n     } else {"
      },
      {
        "sha": "c07cd2eff8be07e370d415ed9a7a83184dadb11a",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -594,7 +594,7 @@ FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n CAmount FeeFilterRounder::round(CAmount currentMinFee)\n {\n     std::set<double>::iterator it = feeset.lower_bound(currentMinFee);\n-    if ((it != feeset.begin() && insecure_rand() % 3 != 0) || it == feeset.end()) {\n+    if ((it != feeset.begin() && insecure_rand.rand32() % 3 != 0) || it == feeset.end()) {\n         it--;\n     }\n     return *it;"
      },
      {
        "sha": "2c1ac3b934a121ec6691d001b3c0ad82da14b6d3",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"amount.h\"\n #include \"uint256.h\"\n+#include \"random.h\"\n \n #include <map>\n #include <string>\n@@ -298,5 +299,6 @@ class FeeFilterRounder\n \n private:\n     std::set<double> feeset;\n+    FastRandomContext insecure_rand;\n };\n #endif /*BITCOIN_POLICYESTIMATOR_H */"
      },
      {
        "sha": "aa027e49c437ff6556ce49db710773a97dc640c1",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -178,22 +178,21 @@ uint256 GetRandHash()\n     return hash;\n }\n \n-uint32_t insecure_rand_Rz = 11;\n-uint32_t insecure_rand_Rw = 11;\n-void seed_insecure_rand(bool fDeterministic)\n+FastRandomContext::FastRandomContext(bool fDeterministic)\n {\n     // The seed values have some unlikely fixed points which we avoid.\n     if (fDeterministic) {\n-        insecure_rand_Rz = insecure_rand_Rw = 11;\n+        Rz = Rw = 11;\n     } else {\n         uint32_t tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n         } while (tmp == 0 || tmp == 0x9068ffffU);\n-        insecure_rand_Rz = tmp;\n+        Rz = tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n         } while (tmp == 0 || tmp == 0x464fffffU);\n-        insecure_rand_Rw = tmp;\n+        Rw = tmp;\n     }\n }\n+"
      },
      {
        "sha": "e97d2d1fb0b54a3cbb19f6ce1ab125ca882ef2ab",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -28,25 +28,22 @@ uint256 GetRandHash();\n void GetStrongRandBytes(unsigned char* buf, int num);\n \n /**\n- * Seed insecure_rand using the random pool.\n- * @param Deterministic Use a deterministic seed\n+ * Fast randomness source. This is seeded once with secure random data, but\n+ * is completely deterministic and insecure after that.\n+ * This class is not thread-safe.\n  */\n-void seed_insecure_rand(bool fDeterministic = false);\n-\n-/**\n- * MWC RNG of George Marsaglia\n- * This is intended to be fast. It has a period of 2^59.3, though the\n- * least significant 16 bits only have a period of about 2^30.1.\n- *\n- * @return random value\n- */\n-extern uint32_t insecure_rand_Rz;\n-extern uint32_t insecure_rand_Rw;\n-static inline uint32_t insecure_rand(void)\n-{\n-    insecure_rand_Rz = 36969 * (insecure_rand_Rz & 65535) + (insecure_rand_Rz >> 16);\n-    insecure_rand_Rw = 18000 * (insecure_rand_Rw & 65535) + (insecure_rand_Rw >> 16);\n-    return (insecure_rand_Rw << 16) + insecure_rand_Rz;\n-}\n+class FastRandomContext {\n+public:\n+    explicit FastRandomContext(bool fDeterministic=false);\n+\n+    uint32_t rand32() {\n+        Rz = 36969 * (Rz & 65535) + (Rz >> 16);\n+        Rw = 18000 * (Rw & 65535) + (Rw >> 16);\n+        return (Rw << 16) + Rz;\n+    }\n+\n+    uint32_t Rz;\n+    uint32_t Rw;\n+};\n \n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "adff09f7548805d2bbbb805c63ad7bfbd1f3800c",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -26,7 +26,7 @@ class CAddrManTest : public CAddrMan\n     void MakeDeterministic()\n     {\n         nKey.SetNull();\n-        seed_insecure_rand(true);\n+        insecure_rand = FastRandomContext(true);\n     }\n \n     int RandomInt(int nMax)"
      },
      {
        "sha": "b487686136aaf8350e132c84d87b026c52d85a7e",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"coins.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "c7b4fb240c20e5554ecb40e42c196f0a82ba3be1",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -9,7 +9,7 @@\n #include \"crypto/sha512.h\"\n #include \"crypto/hmac_sha256.h\"\n #include \"crypto/hmac_sha512.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "66ca381ea7023836c002cb546617fa3339acbaed",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"consensus/merkle.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "f4b5768693bde890a5691441a30d623bddc5a9ad",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -23,7 +23,7 @@ class CAddrManSerializationMock : public CAddrMan\n     void MakeDeterministic()\n     {\n         nKey.SetNull();\n-        seed_insecure_rand(true);\n+        insecure_rand = FastRandomContext(true);\n     }\n };\n "
      },
      {
        "sha": "b7f83d38f0b8430c40650ac8c56b499997b0357e",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -9,7 +9,7 @@\n #include \"uint256.h\"\n #include \"arith_uint256.h\"\n #include \"version.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <vector>"
      },
      {
        "sha": "6cad02e738627d018dfb68d59ea639e611338288",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <vector>\n #include \"prevector.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n \n #include \"serialize.h\"\n #include \"streams.h\"\n@@ -27,8 +27,7 @@ class prevector_tester {\n \n     typedef typename pretype::size_type Size;\n     bool passed = true;\n-    uint32_t insecure_rand_Rz_cache;\n-    uint32_t insecure_rand_Rw_cache;\n+    FastRandomContext rand_cache;\n \n \n     template <typename A, typename B>\n@@ -171,15 +170,14 @@ class prevector_tester {\n         test();\n     }\n     ~prevector_tester() {\n-        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \" \n-                << insecure_rand_Rz_cache \n+        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \"\n+                << rand_cache.Rz\n                 << \", insecure_rand_Rw: \"\n-                << insecure_rand_Rw_cache);\n+                << rand_cache.Rw);\n     }\n     prevector_tester() {\n         seed_insecure_rand();\n-        insecure_rand_Rz_cache = insecure_rand_Rz;\n-        insecure_rand_Rw_cache = insecure_rand_Rw;\n+        rand_cache = insecure_rand_ctx;\n     }\n };\n "
      },
      {
        "sha": "891ecf501567f2a6fb22ecd7c7c74bed66a69861",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -42,8 +42,6 @@ static void MicroSleep(uint64_t n)\n \n BOOST_AUTO_TEST_CASE(manythreads)\n {\n-    seed_insecure_rand(false);\n-\n     // Stress test: hundreds of microsecond-scheduled tasks,\n     // serviced by 10 threads.\n     //\n@@ -58,7 +56,7 @@ BOOST_AUTO_TEST_CASE(manythreads)\n \n     boost::mutex counterMutex[10];\n     int counter[10] = { 0 };\n-    boost::random::mt19937 rng(insecure_rand());\n+    boost::random::mt19937 rng(42);\n     boost::random::uniform_int_distribution<> zeroToNine(0, 9);\n     boost::random::uniform_int_distribution<> randomMsec(-11, 1000);\n     boost::random::uniform_int_distribution<> randomDelta(-1000, 1000);"
      },
      {
        "sha": "0b1050d020cc56880228c97c3fe47003dc0a329f",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -6,7 +6,7 @@\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n #include \"main.h\" // For CheckTransaction\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\""
      },
      {
        "sha": "b19f8fbffb33b05abb88d23419476938056a7c44",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "27ea837fbffe17efb6607f8de00ed71d1be24f15",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -27,6 +27,7 @@\n #include <boost/thread.hpp>\n \n std::unique_ptr<CConnman> g_connman;\n+FastRandomContext insecure_rand_ctx(true);\n \n extern bool fPrintToConsole;\n extern void noui_connect();"
      },
      {
        "sha": "e61b92b7bce943cc79a2798f1459e87617a4977c",
        "filename": "src/test/test_random.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/test_random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_random.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_RANDOM_H\n+#define BITCOIN_TEST_RANDOM_H\n+\n+#include \"random.h\"\n+\n+extern FastRandomContext insecure_rand_ctx;\n+\n+static inline void seed_insecure_rand(bool fDeterministic = false)\n+{\n+    insecure_rand_ctx = FastRandomContext(fDeterministic);\n+}\n+\n+static inline uint32_t insecure_rand(void)\n+{\n+    return insecure_rand_ctx.rand32();\n+}\n+\n+#endif"
      },
      {
        "sha": "0f1c7ab2224b23ca47cfa1831bbe6a3b6d29aa80",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "ffc0ff6f8ead3257a68a94888006d2e32fff1533",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"versionbits.h\"\n #include \"test/test_bitcoin.h\"\n #include \"chainparams.h\""
      },
      {
        "sha": "0f1c166abc4166c3ed6c2de23d23532db379c9a9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -647,7 +647,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     if (nCheckFrequency == 0)\n         return;\n \n-    if (insecure_rand() >= nCheckFrequency)\n+    if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n         return;\n \n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());"
      },
      {
        "sha": "1763930ba05b184bb9e20800e9e731af71fbe95e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -15,6 +15,7 @@\n #include \"indirectmap.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n+#include \"random.h\"\n \n #undef foreach\n #include \"boost/multi_index_container.hpp\""
      },
      {
        "sha": "c5f55ef5f0dac3559dfc60f4383b8baeab569a00",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n+#include \"test/test_random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n #include \"wallet/crypter.h\""
      },
      {
        "sha": "687d84e77a46fd23a44d990f089ecb0170de2d7f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "patch": "@@ -1907,7 +1907,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n     vfBest.assign(vValue.size(), true);\n     nBest = nTotalLower;\n \n-    seed_insecure_rand();\n+    FastRandomContext insecure_rand;\n \n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n@@ -1924,7 +1924,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n                 //that the rng is fast. We do not use a constant random sequence,\n                 //because there may be some privacy improvement by making\n                 //the selection random.\n-                if (nPass == 0 ? insecure_rand()&1 : !vfIncluded[i])\n+                if (nPass == 0 ? insecure_rand.rand32()&1 : !vfIncluded[i])\n                 {\n                     nTotal += vValue[i].first;\n                     vfIncluded[i] = true;"
      }
    ]
  },
  {
    "sha": "0329511b9cd60146fcd27a75600e404122505593",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzI5NTExYjljZDYwMTQ2ZmNkMjdhNzU2MDBlNDA0MTIyNTA1NTkz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:12:25Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:12:36Z"
      },
      "message": "Merge #8922: [qa] Send segwit-encoded blocktxn messages in p2p-compactblocks\n\na4ad37d [qa] Build v4 blocks in p2p-compactblocktests (Matt Corallo)\n032e883 [qa] Send segwit-encoded blocktxn messages in p2p-compactblocks (Matt Corallo)",
      "tree": {
        "sha": "e1a29a25f65b3b1bef93410809159635f4c56fbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e1a29a25f65b3b1bef93410809159635f4c56fbb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0329511b9cd60146fcd27a75600e404122505593",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBLIkAAoJEHSBCwEjRsmmB0UH/ipVYvqI23iAUIuOiTRi/48l\nUK8O6H5LlEYK7fcO7hpoPv5joxb1QDcIktClupVA3bDG/R9Xrl9pra3KMN+2Gwnn\nkZltjGjc6aThdVUVDbp97uYAE76f9gWpab1YXt3WlYjLtaBuF+H9qzYTA/dRE0sa\nSLzlKh7k9hpTqcYyevqIqaX0lz17ivixmq82XlPNipWHCvpGLC8OeyW8owaiM4lr\nEFW6uvmWzca92BKRXeaObMuJUPzaWRFElSEWeWbvipB6gPzw4ylrEr7E6vw1Jw4I\nPd8CdkG7ERB5eGYUK8DB8hY9yrnvf64DXHcl7MBsyU5LO4bGGEcRip+KZv93RO0=\n=6pZx\n-----END PGP SIGNATURE-----",
        "payload": "tree e1a29a25f65b3b1bef93410809159635f4c56fbb\nparent 49c5910372899a365fd6b57b9e227518e24541fa\nparent a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476702745 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476702756 +0200\n\nMerge #8922: [qa] Send segwit-encoded blocktxn messages in p2p-compactblocks\n\na4ad37d [qa] Build v4 blocks in p2p-compactblocktests (Matt Corallo)\n032e883 [qa] Send segwit-encoded blocktxn messages in p2p-compactblocks (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0329511b9cd60146fcd27a75600e404122505593",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0329511b9cd60146fcd27a75600e404122505593",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0329511b9cd60146fcd27a75600e404122505593/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      },
      {
        "sha": "a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4ad37d4ef4bcd81bc9d867b277efdebc86bc2e8"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 19,
      "deletions": 10
    },
    "files": [
      {
        "sha": "131654c333d4daa48687c47b32411b2efc84b05c",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0329511b9cd60146fcd27a75600e404122505593/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0329511b9cd60146fcd27a75600e404122505593/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=0329511b9cd60146fcd27a75600e404122505593",
        "patch": "@@ -6,7 +6,7 @@\n from test_framework.mininode import *\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import create_block, create_coinbase, add_witness_commitment\n from test_framework.siphash import siphash256\n from test_framework.script import CScript, OP_TRUE\n \n@@ -123,11 +123,14 @@ def setup_network(self):\n                  [\"-debug\", \"-logtimemicros\", \"-txindex\"]])\n         connect_nodes(self.nodes[0], 1)\n \n-    def build_block_on_tip(self, node):\n+    def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()\n         mtp = node.getblockheader(tip)['mediantime']\n         block = create_block(int(tip, 16), create_coinbase(height + 1), mtp + 1)\n+        block.nVersion = 4\n+        if segwit:\n+            add_witness_commitment(block)\n         block.solve()\n         return block\n \n@@ -380,11 +383,11 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n     # Post-segwit: upgraded nodes would only make this request of cb-version-2,\n     # NODE_WITNESS peers.  Unupgraded nodes would still make this request of\n     # any cb-version-1-supporting peer.\n-    def test_compactblock_requests(self, node, test_node):\n+    def test_compactblock_requests(self, node, test_node, version, segwit):\n         # Try announcing a block with an inv or header, expect a compactblock\n         # request\n         for announce in [\"inv\", \"header\"]:\n-            block = self.build_block_on_tip(node)\n+            block = self.build_block_on_tip(node, segwit=segwit)\n             with mininode_lock:\n                 test_node.last_getdata = None\n \n@@ -403,8 +406,11 @@ def test_compactblock_requests(self, node, test_node):\n             comp_block.header = CBlockHeader(block)\n             comp_block.nonce = 0\n             [k0, k1] = comp_block.get_siphash_keys()\n+            coinbase_hash = block.vtx[0].sha256\n+            if version == 2:\n+                coinbase_hash = block.vtx[0].calc_sha256(True)\n             comp_block.shortids = [\n-                    calculate_shortid(k0, k1, block.vtx[0].sha256) ]\n+                    calculate_shortid(k0, k1, coinbase_hash) ]\n             test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n@@ -414,7 +420,10 @@ def test_compactblock_requests(self, node, test_node):\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n \n             # Send the coinbase, and verify that the tip advances.\n-            msg = msg_blocktxn()\n+            if version == 2:\n+                msg = msg_witness_blocktxn()\n+            else:\n+                msg = msg_blocktxn()\n             msg.block_transactions.blockhash = block.sha256\n             msg.block_transactions.transactions = [block.vtx[0]]\n             test_node.send_and_ping(msg)\n@@ -750,9 +759,9 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, False)\n         sync_blocks(self.nodes)\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, False)\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting getblocktxn requests...\")\n@@ -800,7 +809,7 @@ def run_test(self):\n         sync_blocks(self.nodes)\n \n         print(\"\\tTesting compactblock requests (unupgraded node)... \")\n-        self.test_compactblock_requests(self.nodes[0], self.test_node)\n+        self.test_compactblock_requests(self.nodes[0], self.test_node, 1, True)\n \n         print(\"\\tTesting getblocktxn requests (unupgraded node)...\")\n         self.test_getblocktxn_requests(self.nodes[0], self.test_node, 1)\n@@ -815,7 +824,7 @@ def run_test(self):\n         assert_equal(self.nodes[0].getbestblockhash(), self.nodes[1].getbestblockhash())\n \n         print(\"\\tTesting compactblock requests (segwit node)... \")\n-        self.test_compactblock_requests(self.nodes[1], self.segwit_node)\n+        self.test_compactblock_requests(self.nodes[1], self.segwit_node, 2, True)\n \n         print(\"\\tTesting getblocktxn requests (segwit node)...\")\n         self.test_getblocktxn_requests(self.nodes[1], self.segwit_node, 2)"
      }
    ]
  },
  {
    "sha": "53133c1c041d113c2a480a18e6ff38681d135dca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzEzM2MxYzA0MWQxMTNjMmE0ODBhMThlNmZmMzg2ODFkMTM1ZGNh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:26:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:27:05Z"
      },
      "message": "Merge #8499: Add several policy limits and disable uncompressed keys for segwit scripts\n\n67d6ee1 remove redundant tests in p2p-segwit.py (Johnson Lau)\n9260085 test segwit uncompressed key fixes (Johnson Lau)\n248f3a7 Fix ismine and addwitnessaddress: no uncompressed keys in segwit (Pieter Wuille)\nb811124 [qa] Add tests for uncompressed pubkeys in segwit (Suhas Daftuar)\n9f0397a Make test framework produce lowS signatures (Johnson Lau)\n4c0c25a Require compressed keys in segwit as policy and disable signing with uncompressed keys for segwit scripts (Johnson Lau)\n3ade2f6 Add standard limits for P2WSH with tests (Johnson Lau)",
      "tree": {
        "sha": "d272f24e8715993840724b3fa733c61d9b5dffcf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d272f24e8715993840724b3fa733c61d9b5dffcf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/53133c1c041d113c2a480a18e6ff38681d135dca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBLWJAAoJEHSBCwEjRsmmTFAH/R3FId0pJnezsYrncKzNvfbx\n40/5bPKFcmMI5NPqPmffAn/BI3wOs/GYJT8Og6AVSU9kEvvHpV6aoCrZikiiLk6A\n5ciO7RnfQD+I75CMmy7fYnipQdJGj/u+E1ZI3F2t5z+PF1JMbkNlj3hU8kOd8Wur\nP1kPnuoowb/QTkzDpoLBiyP9GL+HndO2FgHEHQWdirFVSXqp4rCYpPta1+nV02wB\noHh2GB9ZI+FR4pg5nOsM7NAf4C0NpZ8dObUi8QnJIaHfhDtKA6kwaiRbSd9byqhf\nptl9xq5Qlue74Xm+8mO5bhW4VClmgL2uUJQRYgNTIGYvukzq1kw4RJ4n48wRlgk=\n=mzAw\n-----END PGP SIGNATURE-----",
        "payload": "tree d272f24e8715993840724b3fa733c61d9b5dffcf\nparent 0329511b9cd60146fcd27a75600e404122505593\nparent 67d6ee1e3679504f46473fe0818970565ff3b137\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476703586 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476703625 +0200\n\nMerge #8499: Add several policy limits and disable uncompressed keys for segwit scripts\n\n67d6ee1 remove redundant tests in p2p-segwit.py (Johnson Lau)\n9260085 test segwit uncompressed key fixes (Johnson Lau)\n248f3a7 Fix ismine and addwitnessaddress: no uncompressed keys in segwit (Pieter Wuille)\nb811124 [qa] Add tests for uncompressed pubkeys in segwit (Suhas Daftuar)\n9f0397a Make test framework produce lowS signatures (Johnson Lau)\n4c0c25a Require compressed keys in segwit as policy and disable signing with uncompressed keys for segwit scripts (Johnson Lau)\n3ade2f6 Add standard limits for P2WSH with tests (Johnson Lau)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53133c1c041d113c2a480a18e6ff38681d135dca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/53133c1c041d113c2a480a18e6ff38681d135dca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53133c1c041d113c2a480a18e6ff38681d135dca/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0329511b9cd60146fcd27a75600e404122505593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0329511b9cd60146fcd27a75600e404122505593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0329511b9cd60146fcd27a75600e404122505593"
      },
      {
        "sha": "67d6ee1e3679504f46473fe0818970565ff3b137",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67d6ee1e3679504f46473fe0818970565ff3b137",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67d6ee1e3679504f46473fe0818970565ff3b137"
      }
    ],
    "stats": {
      "total": 1394,
      "additions": 1329,
      "deletions": 65
    },
    "files": [
      {
        "sha": "09ab1b80fcbb2de0fda73a53a379a26c6197dc6d",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 219,
        "deletions": 8,
        "changes": 227,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -166,6 +166,17 @@ def __init__(self, sha256, n, nValue):\n         self.n = n\n         self.nValue = nValue\n \n+# Helper for getting the script associated with a P2PKH\n+def GetP2PKHScript(pubkeyhash):\n+    return CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+\n+# Add signature for a P2PK witness program.\n+def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n+    tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n+    signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n+    txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n+    txTo.rehash()\n+\n \n class SegWitTest(BitcoinTestFramework):\n \n@@ -1323,13 +1334,6 @@ def test_signature_version_1(self):\n         sync_blocks(self.nodes)\n         self.utxo.pop(0)\n \n-        # Add signature for a P2PK witness program.\n-        def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n-            tx_hash = SegwitVersion1SignatureHash(script, txTo, inIdx, hashtype, value)\n-            signature = key.sign(tx_hash) + chr(hashtype).encode('latin-1')\n-            txTo.wit.vtxinwit[inIdx].scriptWitness.stack = [signature, script]\n-            txTo.rehash()\n-\n         # Test each hashtype\n         prev_utxo = UTXO(tx.sha256, 0, tx.vout[0].nValue)\n         for sigflag in [ 0, SIGHASH_ANYONECANPAY ]:\n@@ -1443,7 +1447,7 @@ def sign_P2PK_witness_input(script, txTo, inIdx, hashtype, value, key):\n         tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n         tx2.vout.append(CTxOut(tx.vout[0].nValue, CScript([OP_TRUE])))\n \n-        script = CScript([CScriptOp(OP_DUP), CScriptOp(OP_HASH160), pubkeyhash, CScriptOp(OP_EQUALVERIFY), CScriptOp(OP_CHECKSIG)])\n+        script = GetP2PKHScript(pubkeyhash)\n         sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n         signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n \n@@ -1706,6 +1710,211 @@ def test_getblocktemplate_before_lockin(self):\n         assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n         self.nodes[0].setmocktime(0) # undo mocktime\n \n+    # Uncompressed pubkeys are no longer supported in default relay policy,\n+    # but (for now) are still valid in blocks.\n+    def test_uncompressed_pubkey(self):\n+        print(\"\\tTesting uncompressed pubkeys\")\n+        # Segwit transactions using uncompressed pubkeys are not accepted\n+        # under default policy, but should still pass consensus.\n+        key = CECKey()\n+        key.set_secretbytes(b\"9\")\n+        key.set_compressed(False)\n+        pubkey = CPubKey(key.get_pubkey())\n+        assert_equal(len(pubkey), 65) # This should be an uncompressed pubkey\n+\n+        assert(len(self.utxo) > 0)\n+        utxo = self.utxo.pop(0)\n+\n+        # Test 1: P2WPKH\n+        # First create a P2WPKH output that uses an uncompressed pubkey\n+        pubkeyhash = hash160(pubkey)\n+        scriptPKH = CScript([OP_0, pubkeyhash])\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(utxo.sha256, utxo.n), b\"\"))\n+        tx.vout.append(CTxOut(utxo.nValue-1000, scriptPKH))\n+        tx.rehash()\n+\n+        # Confirm it in a block.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Now try to spend it. Send it to a P2WSH output, which we'll\n+        # use in the next test.\n+        witness_program = CScript([pubkey, CScriptOp(OP_CHECKSIG)])\n+        witness_hash = sha256(witness_program)\n+        scriptWSH = CScript([OP_0, witness_hash])\n+\n+        tx2 = CTransaction()\n+        tx2.vin.append(CTxIn(COutPoint(tx.sha256, 0), b\"\"))\n+        tx2.vout.append(CTxOut(tx.vout[0].nValue-1000, scriptWSH))\n+        script = GetP2PKHScript(pubkeyhash)\n+        sig_hash = SegwitVersion1SignatureHash(script, tx2, 0, SIGHASH_ALL, tx.vout[0].nValue)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n+        tx2.wit.vtxinwit.append(CTxInWitness())\n+        tx2.wit.vtxinwit[0].scriptWitness.stack = [ signature, pubkey ]\n+        tx2.rehash()\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx2, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        # But passes consensus.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx2])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 2: P2WSH\n+        # Try to spend the P2WSH output created in last test.\n+        # Send it to a P2SH(P2WSH) output, which we'll use in the next test.\n+        p2sh_witness_hash = hash160(scriptWSH)\n+        scriptP2SH = CScript([OP_HASH160, p2sh_witness_hash, OP_EQUAL])\n+        scriptSig = CScript([scriptWSH])\n+\n+        tx3 = CTransaction()\n+        tx3.vin.append(CTxIn(COutPoint(tx2.sha256, 0), b\"\"))\n+        tx3.vout.append(CTxOut(tx2.vout[0].nValue-1000, scriptP2SH))\n+        tx3.wit.vtxinwit.append(CTxInWitness())\n+        sign_P2PK_witness_input(witness_program, tx3, 0, SIGHASH_ALL, tx2.vout[0].nValue, key)\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx3, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        # But passes consensus.\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx3])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 3: P2SH(P2WSH)\n+        # Try to spend the P2SH output created in the last test.\n+        # Send it to a P2PKH output, which we'll use in the next test.\n+        scriptPubKey = GetP2PKHScript(pubkeyhash)\n+        tx4 = CTransaction()\n+        tx4.vin.append(CTxIn(COutPoint(tx3.sha256, 0), scriptSig))\n+        tx4.vout.append(CTxOut(tx3.vout[0].nValue-1000, scriptPubKey))\n+        tx4.wit.vtxinwit.append(CTxInWitness())\n+        sign_P2PK_witness_input(witness_program, tx4, 0, SIGHASH_ALL, tx3.vout[0].nValue, key)\n+\n+        # Should fail policy test.\n+        self.test_node.test_transaction_acceptance(tx4, True, False, b'non-mandatory-script-verify-flag (Using non-compressed keys in segwit)')\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx4])\n+        self.test_node.test_witness_block(block, accepted=True)\n+\n+        # Test 4: Uncompressed pubkeys should still be valid in non-segwit\n+        # transactions.\n+        tx5 = CTransaction()\n+        tx5.vin.append(CTxIn(COutPoint(tx4.sha256, 0), b\"\"))\n+        tx5.vout.append(CTxOut(tx4.vout[0].nValue-1000, CScript([OP_TRUE])))\n+        (sig_hash, err) = SignatureHash(scriptPubKey, tx5, 0, SIGHASH_ALL)\n+        signature = key.sign(sig_hash) + b'\\x01' # 0x1 is SIGHASH_ALL\n+        tx5.vin[0].scriptSig = CScript([signature, pubkey])\n+        tx5.rehash()\n+        # Should pass policy and consensus.\n+        self.test_node.test_transaction_acceptance(tx5, True, True)\n+        block = self.build_next_block()\n+        self.update_witness_block_with_transactions(block, [tx5])\n+        self.test_node.test_witness_block(block, accepted=True)\n+        self.utxo.append(UTXO(tx5.sha256, 0, tx5.vout[0].nValue))\n+\n+    def test_non_standard_witness(self):\n+        print(\"\\tTesting detection of non-standard P2WSH witness\")\n+        pad = chr(1).encode('latin-1')\n+\n+        # Create scripts for tests\n+        scripts = []\n+        scripts.append(CScript([OP_DROP] * 100))\n+        scripts.append(CScript([OP_DROP] * 99))\n+        scripts.append(CScript([pad * 59] * 59 + [OP_DROP] * 60))\n+        scripts.append(CScript([pad * 59] * 59 + [OP_DROP] * 61))\n+\n+        p2wsh_scripts = []\n+\n+        assert(len(self.utxo))\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(self.utxo[0].sha256, self.utxo[0].n), b\"\"))\n+\n+        # For each script, generate a pair of P2WSH and P2SH-P2WSH output.\n+        outputvalue = (self.utxo[0].nValue - 1000) // (len(scripts) * 2)\n+        for i in scripts:\n+            p2wsh = CScript([OP_0, sha256(i)])\n+            p2sh = hash160(p2wsh)\n+            p2wsh_scripts.append(p2wsh)\n+            tx.vout.append(CTxOut(outputvalue, p2wsh))\n+            tx.vout.append(CTxOut(outputvalue, CScript([OP_HASH160, p2sh, OP_EQUAL])))\n+        tx.rehash()\n+        txid = tx.sha256\n+        self.test_node.test_transaction_acceptance(tx, with_witness=False, accepted=True)\n+\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+        # Creating transactions for tests\n+        p2wsh_txs = []\n+        p2sh_txs = []\n+        for i in range(len(scripts)):\n+            p2wsh_tx = CTransaction()\n+            p2wsh_tx.vin.append(CTxIn(COutPoint(txid,i*2)))\n+            p2wsh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2wsh_tx.wit.vtxinwit.append(CTxInWitness())\n+            p2wsh_tx.rehash()\n+            p2wsh_txs.append(p2wsh_tx)\n+            p2sh_tx = CTransaction()\n+            p2sh_tx.vin.append(CTxIn(COutPoint(txid,i*2+1), CScript([p2wsh_scripts[i]])))\n+            p2sh_tx.vout.append(CTxOut(outputvalue - 5000, CScript([OP_0, hash160(hex_str_to_bytes(\"\"))])))\n+            p2sh_tx.wit.vtxinwit.append(CTxInWitness())\n+            p2sh_tx.rehash()\n+            p2sh_txs.append(p2sh_tx)\n+\n+        # Testing native P2WSH\n+        # Witness stack size, excluding witnessScript, over 100 is non-standard\n+        p2wsh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[0], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[0], True, True)\n+\n+        # Stack element size over 80 bytes is non-standard\n+        p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+        # Standard nodes should accept if element size is not over 80 bytes\n+        p2wsh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[1], True, True)\n+\n+        # witnessScript size at 3600 bytes is standard\n+        p2wsh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[2], True, True)\n+\n+        # witnessScript size at 3601 bytes is non-standard\n+        p2wsh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n+        self.std_node.test_transaction_acceptance(p2wsh_txs[3], True, False, b'bad-witness-nonstandard')\n+        # Non-standard nodes should accept\n+        self.test_node.test_transaction_acceptance(p2wsh_txs[3], True, True)\n+\n+        # Repeating the same tests with P2SH-P2WSH\n+        p2sh_txs[0].wit.vtxinwit[0].scriptWitness.stack = [pad] * 101 + [scripts[0]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[0], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[0], True, True)\n+        p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 81] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        p2sh_txs[1].wit.vtxinwit[0].scriptWitness.stack = [pad * 80] * 100 + [scripts[1]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[1], True, True)\n+        p2sh_txs[2].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, scripts[2]]\n+        self.test_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        self.std_node.test_transaction_acceptance(p2sh_txs[2], True, True)\n+        p2sh_txs[3].wit.vtxinwit[0].scriptWitness.stack = [pad, pad, pad, scripts[3]]\n+        self.std_node.test_transaction_acceptance(p2sh_txs[3], True, False, b'bad-witness-nonstandard')\n+        self.test_node.test_transaction_acceptance(p2sh_txs[3], True, True)\n+\n+        self.nodes[0].generate(1)  # Mine and clean up the mempool of non-standard node\n+        # Valid but non-standard transactions in a block should be accepted by standard node\n+        sync_blocks(self.nodes)\n+        assert_equal(len(self.nodes[0].getrawmempool()), 0)\n+        assert_equal(len(self.nodes[1].getrawmempool()), 0)\n+\n+        self.utxo.pop(0)\n+\n+\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         self.test_node = TestNode() # sets NODE_WITNESS|NODE_NETWORK\n@@ -1777,7 +1986,9 @@ def run_test(self):\n         self.test_standardness_v0(segwit_activated=True)\n         self.test_segwit_versions()\n         self.test_premature_coinbase_witness_spend()\n+        self.test_uncompressed_pubkey()\n         self.test_signature_version_1()\n+        self.test_non_standard_witness()\n         sync_blocks(self.nodes)\n         if self.test_upgrade:\n             self.test_upgrade_after_activation(self.nodes[2], 2)"
      },
      {
        "sha": "41a1b3b20fd00fbb7961b5c8c6b83c3e85297e37",
        "filename": "qa/rpc-tests/segwit.py",
        "status": "modified",
        "additions": 359,
        "deletions": 1,
        "changes": 360,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/segwit.py?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -9,7 +9,10 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-from test_framework.mininode import sha256, ripemd160\n+from test_framework.mininode import sha256, ripemd160, CTransaction, CTxIn, COutPoint, CTxOut\n+from test_framework.address import script_to_p2sh, key_to_p2pkh\n+from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG\n+from io import BytesIO\n \n NODE_0 = 0\n NODE_1 = 1\n@@ -242,5 +245,360 @@ def run_test(self):\n             # This is an acceptable outcome\n             pass\n \n+        print(\"Verify behaviour of importaddress, addwitnessaddress and listunspent\")\n+\n+        # Some public keys to be used later\n+        pubkeys = [\n+            \"0363D44AABD0F1699138239DF2F042C3282C0671CC7A76826A55C8203D90E39242\", # cPiM8Ub4heR9NBYmgVzJQiUH1if44GSBGiqaeJySuL2BKxubvgwb\n+            \"02D3E626B3E616FC8662B489C123349FECBFC611E778E5BE739B257EAE4721E5BF\", # cPpAdHaD6VoYbW78kveN2bsvb45Q7G5PhaPApVUGwvF8VQ9brD97\n+            \"04A47F2CBCEFFA7B9BCDA184E7D5668D3DA6F9079AD41E422FA5FD7B2D458F2538A62F5BD8EC85C2477F39650BD391EA6250207065B2A81DA8B009FC891E898F0E\", # 91zqCU5B9sdWxzMt1ca3VzbtVm2YM6Hi5Rxn4UDtxEaN9C9nzXV\n+            \"02A47F2CBCEFFA7B9BCDA184E7D5668D3DA6F9079AD41E422FA5FD7B2D458F2538\", # cPQFjcVRpAUBG8BA9hzr2yEzHwKoMgLkJZBBtK9vJnvGJgMjzTbd\n+            \"036722F784214129FEB9E8129D626324F3F6716555B603FFE8300BBCB882151228\", # cQGtcm34xiLjB1v7bkRa4V3aAc9tS2UTuBZ1UnZGeSeNy627fN66\n+            \"0266A8396EE936BF6D99D17920DB21C6C7B1AB14C639D5CD72B300297E416FD2EC\", # cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\n+            \"0450A38BD7F0AC212FEBA77354A9B036A32E0F7C81FC4E0C5ADCA7C549C4505D2522458C2D9AE3CEFD684E039194B72C8A10F9CB9D4764AB26FCC2718D421D3B84\", # 92h2XPssjBpsJN5CqSP7v9a7cf2kgDunBC6PDFwJHMACM1rrVBJ\n+        ]\n+\n+        # Import a compressed key and an uncompressed key, generate some multisig addresses\n+        self.nodes[0].importprivkey(\"92e6XLo5jVAVwrQKPNTs93oQco8f8sDNBcpv73Dsrs397fQtFQn\")\n+        uncompressed_spendable_address = [\"mvozP4UwyGD2mGZU4D2eMvMLPB9WkMmMQu\"]\n+        self.nodes[0].importprivkey(\"cNC8eQ5dg3mFAVePDX4ddmPYpPbw41r9bm2jd1nLJT77e6RrzTRR\")\n+        compressed_spendable_address = [\"mmWQubrDomqpgSYekvsU7HWEVjLFHAakLe\"]\n+        assert ((self.nodes[0].validateaddress(uncompressed_spendable_address[0])['iscompressed'] == False))\n+        assert ((self.nodes[0].validateaddress(compressed_spendable_address[0])['iscompressed'] == True))\n+\n+        self.nodes[0].importpubkey(pubkeys[0])\n+        compressed_solvable_address = [key_to_p2pkh(pubkeys[0])]\n+        self.nodes[0].importpubkey(pubkeys[1])\n+        compressed_solvable_address.append(key_to_p2pkh(pubkeys[1]))\n+        self.nodes[0].importpubkey(pubkeys[2])\n+        uncompressed_solvable_address = [key_to_p2pkh(pubkeys[2])]\n+\n+        spendable_anytime = []                      # These outputs should be seen anytime after importprivkey and addmultisigaddress\n+        spendable_after_importaddress = []          # These outputs should be seen after importaddress\n+        solvable_after_importaddress = []           # These outputs should be seen after importaddress but not spendable\n+        unsolvable_after_importaddress = []         # These outputs should be unsolvable after importaddress\n+        solvable_anytime = []                       # These outputs should be solvable after importpubkey\n+        unseen_anytime = []                         # These outputs should never be seen\n+\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], uncompressed_spendable_address[0]]))\n+        compressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], uncompressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_solvable_address[0], compressed_solvable_address[1]]))\n+        unknown_address = [\"mtKKyoHabkk6e4ppT7NaM7THqPUt7AzPrT\", \"2NDP3jLWAFT8NDAiUa9qiE6oBt2awmMq7Dx\"]\n+\n+        # Test multisig_without_privkey\n+        # We have 2 public keys without private keys, use addmultisigaddress to add to wallet.\n+        # Money sent to P2SH of multisig of this should only be seen after importaddress with the BASE58 P2SH address.\n+\n+        multisig_without_privkey_address = self.nodes[0].addmultisigaddress(2, [pubkeys[3], pubkeys[4]])\n+        script = CScript([OP_2, hex_str_to_bytes(pubkeys[3]), hex_str_to_bytes(pubkeys[4]), OP_2, OP_CHECKMULTISIG])\n+        solvable_after_importaddress.append(CScript([OP_HASH160, hash160(script), OP_EQUAL]))\n+\n+        for i in compressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # bare and p2sh multisig with compressed keys should always be spendable\n+                spendable_anytime.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with compressed keys should always be spendable\n+                spendable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in uncompressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # bare and p2sh multisig with uncompressed keys should always be spendable\n+                spendable_anytime.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with uncompressed keys should always be spendable\n+                spendable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK and P2SH_P2PKH are spendable after direct importaddress\n+                spendable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n+                # witness with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in compressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                # Multisig without private is not seen after addmultisigaddress, but seen after importaddress\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                solvable_after_importaddress.extend([bare, p2sh, p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with compressed keys should always be seen\n+                solvable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH, and witness with compressed keys are seen after direct importaddress\n+                solvable_after_importaddress.extend([p2wpkh, p2sh_p2wpkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        for i in uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # Base uncompressed multisig without private is not seen after addmultisigaddress, but seen after importaddress\n+                solvable_after_importaddress.extend([bare, p2sh])\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # normal P2PKH and P2PK with uncompressed keys should always be seen\n+                solvable_anytime.extend([p2pkh, p2pk])\n+                # P2SH_P2PK, P2SH_P2PKH with uncompressed keys are seen after direct importaddress\n+                solvable_after_importaddress.extend([p2sh_p2pk, p2sh_p2pkh])\n+                # witness with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh])\n+\n+        op1 = CScript([OP_1])\n+        op0 = CScript([OP_0])\n+        # 2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe is the P2SH(P2PKH) version of mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\n+        unsolvable_address = [\"mjoE3sSrb8ByYEvgnC3Aox86u1CHnfJA4V\", \"2N7MGY19ti4KDMSzRfPAssP6Pxyuxoi6jLe\", script_to_p2sh(op1), script_to_p2sh(op0)]\n+        unsolvable_address_key = hex_str_to_bytes(\"02341AEC7587A51CDE5279E0630A531AEA2615A9F80B17E8D9376327BAEAA59E3D\")\n+        unsolvablep2pkh = CScript([OP_DUP, OP_HASH160, hash160(unsolvable_address_key), OP_EQUALVERIFY, OP_CHECKSIG])\n+        unsolvablep2wshp2pkh = CScript([OP_0, sha256(unsolvablep2pkh)])\n+        p2shop0 = CScript([OP_HASH160, hash160(op0), OP_EQUAL])\n+        p2wshop1 = CScript([OP_0, sha256(op1)])\n+        unsolvable_after_importaddress.append(unsolvablep2pkh)\n+        unsolvable_after_importaddress.append(unsolvablep2wshp2pkh)\n+        unsolvable_after_importaddress.append(op1) # OP_1 will be imported as script\n+        unsolvable_after_importaddress.append(p2wshop1)\n+        unseen_anytime.append(op0) # OP_0 will be imported as P2SH address with no script provided\n+        unsolvable_after_importaddress.append(p2shop0)\n+\n+        spendable_txid = []\n+        solvable_txid = []\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime, 1))\n+        self.mine_and_test_listunspent(spendable_after_importaddress + solvable_after_importaddress + unseen_anytime + unsolvable_after_importaddress, 0)\n+\n+        importlist = []\n+        for i in compressed_spendable_address + uncompressed_spendable_address + compressed_solvable_address + uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                bare = hex_str_to_bytes(v['hex'])\n+                importlist.append(bytes_to_hex_str(bare))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(bare)])))\n+            else:\n+                pubkey = hex_str_to_bytes(v['pubkey'])\n+                p2pk = CScript([pubkey, OP_CHECKSIG])\n+                p2pkh = CScript([OP_DUP, OP_HASH160, hash160(pubkey), OP_EQUALVERIFY, OP_CHECKSIG])\n+                importlist.append(bytes_to_hex_str(p2pk))\n+                importlist.append(bytes_to_hex_str(p2pkh))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, hash160(pubkey)])))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pk)])))\n+                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pkh)])))\n+\n+        importlist.append(bytes_to_hex_str(unsolvablep2pkh))\n+        importlist.append(bytes_to_hex_str(unsolvablep2wshp2pkh))\n+        importlist.append(bytes_to_hex_str(op1))\n+        importlist.append(bytes_to_hex_str(p2wshop1))\n+\n+        for i in importlist:\n+            try:\n+                self.nodes[0].importaddress(i,\"\",False,True)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"The wallet already contains the private key for this address or script\")\n+\n+        self.nodes[0].importaddress(script_to_p2sh(op0)) # import OP_0 as address only\n+        self.nodes[0].importaddress(multisig_without_privkey_address) # Test multisig_without_privkey\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime + spendable_after_importaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime + solvable_after_importaddress, 1))\n+        self.mine_and_test_listunspent(unsolvable_after_importaddress, 1)\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used or the address is\n+        # not in the wallet\n+        # note that no witness address should be returned by unsolvable addresses\n+        # the multisig_without_privkey_address will fail because its keys were not added with importpubkey\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + unknown_address + unsolvable_address + [multisig_without_privkey_address]:\n+            try:\n+                self.nodes[0].addwitnessaddress(i)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"Public key or redeemscript not known to wallet, or the key is uncompressed\")\n+            else:\n+                assert(False)\n+\n+        for i in compressed_spendable_address + compressed_solvable_address:\n+            witaddress = self.nodes[0].addwitnessaddress(i)\n+            # addwitnessaddress should return the same address if it is a known P2SH-witness address\n+            assert_equal(witaddress, self.nodes[0].addwitnessaddress(witaddress))\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_anytime + spendable_after_importaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_anytime + solvable_after_importaddress, 1))\n+        self.mine_and_test_listunspent(unsolvable_after_importaddress, 1)\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # Repeat some tests. This time we don't add witness scripts with importaddress\n+        # Import a compressed key and an uncompressed key, generate some multisig addresses\n+        self.nodes[0].importprivkey(\"927pw6RW8ZekycnXqBQ2JS5nPyo1yRfGNN8oq74HeddWSpafDJH\")\n+        uncompressed_spendable_address = [\"mguN2vNSCEUh6rJaXoAVwY3YZwZvEmf5xi\"]\n+        self.nodes[0].importprivkey(\"cMcrXaaUC48ZKpcyydfFo8PxHAjpsYLhdsp6nmtB3E2ER9UUHWnw\")\n+        compressed_spendable_address = [\"n1UNmpmbVUJ9ytXYXiurmGPQ3TRrXqPWKL\"]\n+\n+        self.nodes[0].importpubkey(pubkeys[5])\n+        compressed_solvable_address = [key_to_p2pkh(pubkeys[5])]\n+        self.nodes[0].importpubkey(pubkeys[6])\n+        uncompressed_solvable_address = [key_to_p2pkh(pubkeys[6])]\n+\n+        spendable_after_addwitnessaddress = []      # These outputs should be seen after importaddress\n+        solvable_after_addwitnessaddress=[]         # These outputs should be seen after importaddress but not spendable\n+        unseen_anytime = []                         # These outputs should never be seen\n+\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [uncompressed_spendable_address[0], uncompressed_spendable_address[0]]))\n+        compressed_spendable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_spendable_address[0]]))\n+        uncompressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_solvable_address[0], uncompressed_solvable_address[0]]))\n+        compressed_solvable_address.append(self.nodes[0].addmultisigaddress(2, [compressed_spendable_address[0], compressed_solvable_address[0]]))\n+\n+        premature_witaddress = []\n+\n+        for i in compressed_spendable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # P2WSH and P2SH(P2WSH) multisig with compressed keys are spendable after addwitnessaddress\n+                spendable_after_addwitnessaddress.extend([p2wsh, p2sh_p2wsh])\n+                premature_witaddress.append(script_to_p2sh(p2wsh))\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2WPKH, P2SH_P2WPKH are spendable after addwitnessaddress\n+                spendable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n+                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                # P2WSH and P2SH(P2WSH) multisig with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wsh, p2sh_p2wsh])\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2WPKH, P2SH_P2WPKH with uncompressed keys are never seen\n+                unseen_anytime.extend([p2wpkh, p2sh_p2wpkh])\n+\n+        for i in compressed_solvable_address:\n+            v = self.nodes[0].validateaddress(i)\n+            if (v['isscript']):\n+                # P2WSH multisig without private key are seen after addwitnessaddress\n+                [bare, p2sh, p2wsh, p2sh_p2wsh] = self.p2sh_address_to_script(v)\n+                solvable_after_addwitnessaddress.extend([p2wsh, p2sh_p2wsh])\n+                premature_witaddress.append(script_to_p2sh(p2wsh))\n+            else:\n+                [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh] = self.p2pkh_address_to_script(v)\n+                # P2SH_P2PK, P2SH_P2PKH with compressed keys are seen after addwitnessaddress\n+                solvable_after_addwitnessaddress.extend([p2wpkh, p2sh_p2wpkh])\n+                premature_witaddress.append(script_to_p2sh(p2wpkh))\n+\n+        self.mine_and_test_listunspent(spendable_after_addwitnessaddress + solvable_after_addwitnessaddress + unseen_anytime, 0)\n+\n+        # addwitnessaddress should refuse to return a witness address if an uncompressed key is used\n+        # note that a multisig address returned by addmultisigaddress is not solvable until it is added with importaddress\n+        # premature_witaddress are not accepted until the script is added with addwitnessaddress first\n+        for i in uncompressed_spendable_address + uncompressed_solvable_address + premature_witaddress + [compressed_solvable_address[1]]:\n+            try:\n+                self.nodes[0].addwitnessaddress(i)\n+            except JSONRPCException as exp:\n+                assert_equal(exp.error[\"message\"], \"Public key or redeemscript not known to wallet, or the key is uncompressed\")\n+            else:\n+                assert(False)\n+\n+        # after importaddress it should pass addwitnessaddress\n+        v = self.nodes[0].validateaddress(compressed_solvable_address[1])\n+        self.nodes[0].importaddress(v['hex'],\"\",False,True)\n+        for i in compressed_spendable_address + compressed_solvable_address + premature_witaddress:\n+            witaddress = self.nodes[0].addwitnessaddress(i)\n+            assert_equal(witaddress, self.nodes[0].addwitnessaddress(witaddress))\n+\n+        spendable_txid.append(self.mine_and_test_listunspent(spendable_after_addwitnessaddress, 2))\n+        solvable_txid.append(self.mine_and_test_listunspent(solvable_after_addwitnessaddress, 1))\n+        self.mine_and_test_listunspent(unseen_anytime, 0)\n+\n+        # Check that spendable outputs are really spendable\n+        self.create_and_mine_tx_from_txids(spendable_txid)\n+\n+        # import all the private keys so solvable addresses become spendable\n+        self.nodes[0].importprivkey(\"cPiM8Ub4heR9NBYmgVzJQiUH1if44GSBGiqaeJySuL2BKxubvgwb\")\n+        self.nodes[0].importprivkey(\"cPpAdHaD6VoYbW78kveN2bsvb45Q7G5PhaPApVUGwvF8VQ9brD97\")\n+        self.nodes[0].importprivkey(\"91zqCU5B9sdWxzMt1ca3VzbtVm2YM6Hi5Rxn4UDtxEaN9C9nzXV\")\n+        self.nodes[0].importprivkey(\"cPQFjcVRpAUBG8BA9hzr2yEzHwKoMgLkJZBBtK9vJnvGJgMjzTbd\")\n+        self.nodes[0].importprivkey(\"cQGtcm34xiLjB1v7bkRa4V3aAc9tS2UTuBZ1UnZGeSeNy627fN66\")\n+        self.nodes[0].importprivkey(\"cTW5mR5M45vHxXkeChZdtSPozrFwFgmEvTNnanCW6wrqwaCZ1X7K\")\n+        self.create_and_mine_tx_from_txids(solvable_txid)\n+\n+    def mine_and_test_listunspent(self, script_list, ismine):\n+        utxo = find_unspent(self.nodes[0], 50)\n+        tx = CTransaction()\n+        tx.vin.append(CTxIn(COutPoint(int('0x'+utxo['txid'],0), utxo['vout'])))\n+        for i in script_list:\n+            tx.vout.append(CTxOut(10000000, i))\n+        tx.rehash()\n+        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        txid = self.nodes[0].sendrawtransaction(signresults, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        watchcount = 0\n+        spendcount = 0\n+        for i in self.nodes[0].listunspent():\n+            if (i['txid'] == txid):\n+                watchcount += 1\n+                if (i['spendable'] == True):\n+                    spendcount += 1\n+        if (ismine == 2):\n+            assert_equal(spendcount, len(script_list))\n+        elif (ismine == 1):\n+            assert_equal(watchcount, len(script_list))\n+            assert_equal(spendcount, 0)\n+        else:\n+            assert_equal(watchcount, 0)\n+        return txid\n+\n+    def p2sh_address_to_script(self,v):\n+        bare = CScript(hex_str_to_bytes(v['hex']))\n+        p2sh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        p2wsh = CScript([OP_0, sha256(bare)])\n+        p2sh_p2wsh = CScript([OP_HASH160, hash160(p2wsh), OP_EQUAL])\n+        return([bare, p2sh, p2wsh, p2sh_p2wsh])\n+\n+    def p2pkh_address_to_script(self,v):\n+        pubkey = hex_str_to_bytes(v['pubkey'])\n+        p2wpkh = CScript([OP_0, hash160(pubkey)])\n+        p2sh_p2wpkh = CScript([OP_HASH160, hash160(p2wpkh), OP_EQUAL])\n+        p2pk = CScript([pubkey, OP_CHECKSIG])\n+        p2pkh = CScript(hex_str_to_bytes(v['scriptPubKey']))\n+        p2sh_p2pk = CScript([OP_HASH160, hash160(p2pk), OP_EQUAL])\n+        p2sh_p2pkh = CScript([OP_HASH160, hash160(p2pkh), OP_EQUAL])\n+        p2wsh_p2pk = CScript([OP_0, sha256(p2pk)])\n+        p2wsh_p2pkh = CScript([OP_0, sha256(p2pkh)])\n+        p2sh_p2wsh_p2pk = CScript([OP_HASH160, hash160(p2wsh_p2pk), OP_EQUAL])\n+        p2sh_p2wsh_p2pkh = CScript([OP_HASH160, hash160(p2wsh_p2pkh), OP_EQUAL])\n+        return [p2wpkh, p2sh_p2wpkh, p2pk, p2pkh, p2sh_p2pk, p2sh_p2pkh, p2wsh_p2pk, p2wsh_p2pkh, p2sh_p2wsh_p2pk, p2sh_p2wsh_p2pkh]\n+\n+    def create_and_mine_tx_from_txids(self, txids, success = True):\n+        tx = CTransaction()\n+        for i in txids:\n+            txtmp = CTransaction()\n+            txraw = self.nodes[0].getrawtransaction(i)\n+            f = BytesIO(hex_str_to_bytes(txraw))\n+            txtmp.deserialize(f)\n+            for j in range(len(txtmp.vout)):\n+                tx.vin.append(CTxIn(COutPoint(int('0x'+i,0), j)))\n+        tx.vout.append(CTxOut(0, CScript()))\n+        tx.rehash()\n+        signresults = self.nodes[0].signrawtransaction(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        self.nodes[0].sendrawtransaction(signresults, True)\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+\n+\n if __name__ == '__main__':\n     SegWitTest().main()"
      },
      {
        "sha": "50b999be6110d91df1730cc11961d14d5c87ccd9",
        "filename": "qa/rpc-tests/test_framework/address.py",
        "status": "added",
        "additions": 74,
        "deletions": 0,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/address.py?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -0,0 +1,74 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# address.py\n+#\n+# This file encodes and decodes BASE58 P2PKH and P2SH addresses\n+#\n+\n+from .script import hash256, hash160, sha256, CScript, OP_0\n+from .util import bytes_to_hex_str, hex_str_to_bytes\n+\n+chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n+\n+def byte_to_base58(b, version):\n+    result = ''\n+    str = bytes_to_hex_str(b)\n+    str = bytes_to_hex_str(chr(version).encode('latin-1')) + str\n+    checksum = bytes_to_hex_str(hash256(hex_str_to_bytes(str)))\n+    str += checksum[:8]\n+    value = int('0x'+str,0)\n+    while value > 0:\n+        result = chars[value % 58] + result\n+        value //= 58\n+    while (str[:2] == '00'):\n+        result = chars[0] + result\n+        str = str[2:]\n+    return result\n+\n+# TODO: def base58_decode\n+\n+def keyhash_to_p2pkh(hash, main = False):\n+    assert (len(hash) == 20)\n+    version = 0 if main else 111\n+    return byte_to_base58(hash, version)\n+\n+def scripthash_to_p2sh(hash, main = False):\n+    assert (len(hash) == 20)\n+    version = 5 if main else 196\n+    return byte_to_base58(hash, version)\n+\n+def key_to_p2pkh(key, main = False):\n+    key = check_key(key)\n+    return keyhash_to_p2pkh(hash160(key), main)\n+\n+def script_to_p2sh(script, main = False):\n+    script = check_script(script)\n+    return scripthash_to_p2sh(hash160(script), main)\n+\n+def key_to_p2sh_p2wpkh(key, main = False):\n+    key = check_key(key)\n+    p2shscript = CScript([OP_0, hash160(key)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def script_to_p2sh_p2wsh(script, main = False):\n+    script = check_script(script)\n+    p2shscript = CScript([OP_0, sha256(script)])\n+    return script_to_p2sh(p2shscript, main)\n+\n+def check_key(key):\n+    if (type(key) is str):\n+        key = hex_str_to_bytes(key) # Assuming this is hex string\n+    if (type(key) is bytes and (len(key) == 33 or len(key) == 65)):\n+        return key\n+    assert(False)\n+\n+def check_script(script):\n+    if (type(script) is str):\n+        script = hex_str_to_bytes(script) # Assuming this is hex string\n+    if (type(script) is bytes or type(script) is CScript):\n+        return script\n+    assert(False)"
      },
      {
        "sha": "c63a15c1e0c92bd4a63d2b47bff4499e341cab3a",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 23,
        "deletions": 2,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -75,6 +75,9 @@\n # this specifies the curve used with ECDSA.\n NID_secp256k1 = 714 # from openssl/obj_mac.h\n \n+SECP256K1_ORDER = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\n+SECP256K1_ORDER_HALF = SECP256K1_ORDER // 2\n+\n # Thx to Sam Devlin for the ctypes magic 64-bit fix.\n def _check_result(val, func, args):\n     if val == 0:\n@@ -147,7 +150,7 @@ def get_ecdh_key(self, other_pubkey, kdf=lambda k: hashlib.sha256(k).digest()):\n         r = self.get_raw_ecdh_key(other_pubkey)\n         return kdf(r)\n \n-    def sign(self, hash):\n+    def sign(self, hash, low_s = True):\n         # FIXME: need unit tests for below cases\n         if not isinstance(hash, bytes):\n             raise TypeError('Hash must be bytes instance; got %r' % hash.__class__)\n@@ -159,7 +162,25 @@ def sign(self, hash):\n         mb_sig = ctypes.create_string_buffer(sig_size0.value)\n         result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n         assert 1 == result\n-        return mb_sig.raw[:sig_size0.value]\n+        assert mb_sig.raw[0] == 0x30\n+        assert mb_sig.raw[1] == sig_size0.value - 2\n+        total_size = mb_sig.raw[1]\n+        assert mb_sig.raw[2] == 2\n+        r_size = mb_sig.raw[3]\n+        assert mb_sig.raw[4 + r_size] == 2\n+        s_size = mb_sig.raw[5 + r_size]\n+        s_value = int.from_bytes(mb_sig.raw[6+r_size:6+r_size+s_size], byteorder='big')\n+        if (not low_s) or s_value <= SECP256K1_ORDER_HALF:\n+            return mb_sig.raw[:sig_size0.value]\n+        else:\n+            low_s_value = SECP256K1_ORDER - s_value\n+            low_s_bytes = (low_s_value).to_bytes(33, byteorder='big')\n+            while len(low_s_bytes) > 1 and low_s_bytes[0] == 0 and low_s_bytes[1] < 0x80:\n+                low_s_bytes = low_s_bytes[1:]\n+            new_s_size = len(low_s_bytes)\n+            new_total_size_byte = (total_size + new_s_size - s_size).to_bytes(1,byteorder='big')\n+            new_s_size_byte = (new_s_size).to_bytes(1,byteorder='big')\n+            return b'\\x30' + new_total_size_byte + mb_sig.raw[2:5+r_size] + new_s_size_byte + low_s_bytes\n \n     def verify(self, hash, sig):\n         \"\"\"Verify a DER signature\"\"\""
      },
      {
        "sha": "ad4c3fce6866c5c911dca692f45de16b6df12438",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1273,6 +1273,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         if (fRequireStandard && !AreInputsStandard(tx, view))\n             return state.Invalid(false, REJECT_NONSTANDARD, \"bad-txns-nonstandard-inputs\");\n \n+        // Check for non-standard witness in P2WSH\n+        if (!tx.wit.IsNull() && fRequireStandard && !IsWitnessStandard(tx, view))\n+            return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-witness-nonstandard\", true);\n+\n         int64_t nSigOpsCost = GetTransactionSigOpCost(tx, view, STANDARD_SCRIPT_VERIFY_FLAGS);\n \n         CAmount nValueOut = tx.GetValueOut();"
      },
      {
        "sha": "ae42b2bd74fd8b3bbe38cefa0d4f13a82db7ae9f",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 53,
        "deletions": 1,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin developers\n+// Copyright (c) 2009-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -154,6 +154,58 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n+{\n+    if (tx.IsCoinBase())\n+        return true; // Coinbases are skipped\n+\n+    for (unsigned int i = 0; i < tx.vin.size(); i++)\n+    {\n+        // We don't care if witness for this input is empty, since it must not be bloated.\n+        // If the script is invalid without witness, it would be caught sooner or later during validation.\n+        if (tx.wit.vtxinwit[i].IsNull())\n+            continue;\n+\n+        const CTxOut &prev = mapInputs.GetOutputFor(tx.vin[i]);\n+\n+        // get the scriptPubKey corresponding to this input:\n+        CScript prevScript = prev.scriptPubKey;\n+\n+        if (prevScript.IsPayToScriptHash()) {\n+            std::vector <std::vector<unsigned char> > stack;\n+            // If the scriptPubKey is P2SH, we try to extract the redeemScript casually by converting the scriptSig\n+            // into a stack. We do not check IsPushOnly nor compare the hash as these will be done later anyway.\n+            // If the check fails at this stage, we know that this txid must be a bad one.\n+            if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker(), SIGVERSION_BASE))\n+                return false;\n+            if (stack.empty())\n+                return false;\n+            prevScript = CScript(stack.back().begin(), stack.back().end());\n+        }\n+\n+        int witnessversion = 0;\n+        std::vector<unsigned char> witnessprogram;\n+\n+        // Non-witness program must not be associated with any witness\n+        if (!prevScript.IsWitnessProgram(witnessversion, witnessprogram))\n+            return false;\n+\n+        // Check P2WSH standard limits\n+        if (witnessversion == 0 && witnessprogram.size() == 32) {\n+            if (tx.wit.vtxinwit[i].scriptWitness.stack.back().size() > MAX_STANDARD_P2WSH_SCRIPT_SIZE)\n+                return false;\n+            size_t sizeWitnessStack = tx.wit.vtxinwit[i].scriptWitness.stack.size() - 1;\n+            if (sizeWitnessStack > MAX_STANDARD_P2WSH_STACK_ITEMS)\n+                return false;\n+            for (unsigned int j = 0; j < sizeWitnessStack; j++) {\n+                if (tx.wit.vtxinwit[i].scriptWitness.stack[j].size() > MAX_STANDARD_P2WSH_STACK_ITEM_SIZE)\n+                    return false;\n+            }\n+        }\n+    }\n+    return true;\n+}\n+\n unsigned int nBytesPerSigOp = DEFAULT_BYTES_PER_SIGOP;\n \n int64_t GetVirtualTransactionSize(int64_t nWeight, int64_t nSigOpCost)"
      },
      {
        "sha": "814e6c0b6ff94231f48b54830191e0ab819b1e65",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 15,
        "deletions": 2,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin developers\n+// Copyright (c) 2009-2016 The Bitcoin developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,6 +30,12 @@ static const unsigned int MAX_STANDARD_TX_SIGOPS_COST = MAX_BLOCK_SIGOPS_COST/5;\n static const unsigned int DEFAULT_MAX_MEMPOOL_SIZE = 300;\n /** Default for -bytespersigop */\n static const unsigned int DEFAULT_BYTES_PER_SIGOP = 20;\n+/** The maximum number of witness stack items in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEMS = 100;\n+/** The maximum size of each witness stack item in a standard P2WSH script */\n+static const unsigned int MAX_STANDARD_P2WSH_STACK_ITEM_SIZE = 80;\n+/** The maximum size of a standard witnessScript */\n+static const unsigned int MAX_STANDARD_P2WSH_SCRIPT_SIZE = 3600;\n /**\n  * Standard script verification flags that standard transactions will comply\n  * with. However scripts violating these flags may still be present in valid\n@@ -48,7 +54,8 @@ static const unsigned int STANDARD_SCRIPT_VERIFY_FLAGS = MANDATORY_SCRIPT_VERIFY\n                                                          SCRIPT_VERIFY_CHECKSEQUENCEVERIFY |\n                                                          SCRIPT_VERIFY_LOW_S |\n                                                          SCRIPT_VERIFY_WITNESS |\n-                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM;\n+                                                         SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM |\n+                                                         SCRIPT_VERIFY_WITNESS_PUBKEYTYPE;\n \n /** For convenience, standard but not mandatory verify flags. */\n static const unsigned int STANDARD_NOT_MANDATORY_VERIFY_FLAGS = STANDARD_SCRIPT_VERIFY_FLAGS & ~MANDATORY_SCRIPT_VERIFY_FLAGS;\n@@ -69,6 +76,12 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason, const bool witnes\n      * @return True if all inputs (scriptSigs) use only standard transaction forms\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n+    /**\n+     * Check if the transaction is over standard P2WSH resources limit:\n+     * 3600bytes witnessScript size, 80bytes per witness stack element, 100 witness stack elements\n+     * These limits are adequate for multi-signature up to n-of-100 using OP_CHECKSIG, OP_ADD, and OP_EQUAL,\n+     */\n+bool IsWitnessStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n extern unsigned int nBytesPerSigOp;\n "
      },
      {
        "sha": "836cf9ee352a04037b7c773abba6fccda5682720",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -79,8 +79,20 @@ bool static IsCompressedOrUncompressedPubKey(const valtype &vchPubKey) {\n             return false;\n         }\n     } else {\n-          //  Non-canonical public key: neither compressed nor uncompressed\n-          return false;\n+        //  Non-canonical public key: neither compressed nor uncompressed\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool static IsCompressedPubKey(const valtype &vchPubKey) {\n+    if (vchPubKey.size() != 33) {\n+        //  Non-canonical public key: invalid length for compressed key\n+        return false;\n+    }\n+    if (vchPubKey[0] != 0x02 && vchPubKey[0] != 0x03) {\n+        //  Non-canonical public key: invalid prefix for compressed key\n+        return false;\n     }\n     return true;\n }\n@@ -199,10 +211,14 @@ bool CheckSignatureEncoding(const vector<unsigned char> &vchSig, unsigned int fl\n     return true;\n }\n \n-bool static CheckPubKeyEncoding(const valtype &vchSig, unsigned int flags, ScriptError* serror) {\n-    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchSig)) {\n+bool static CheckPubKeyEncoding(const valtype &vchPubKey, unsigned int flags, const SigVersion &sigversion, ScriptError* serror) {\n+    if ((flags & SCRIPT_VERIFY_STRICTENC) != 0 && !IsCompressedOrUncompressedPubKey(vchPubKey)) {\n         return set_error(serror, SCRIPT_ERR_PUBKEYTYPE);\n     }\n+    // Only compressed keys are accepted in segwit\n+    if ((flags & SCRIPT_VERIFY_WITNESS_PUBKEYTYPE) != 0 && sigversion == SIGVERSION_WITNESS_V0 && !IsCompressedPubKey(vchPubKey)) {\n+        return set_error(serror, SCRIPT_ERR_WITNESS_PUBKEYTYPE);\n+    }\n     return true;\n }\n \n@@ -879,7 +895,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         scriptCode.FindAndDelete(CScript(vchSig));\n                     }\n \n-                    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n+                    if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n                         //serror is set\n                         return false;\n                     }\n@@ -953,7 +969,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                         // Note how this makes the exact order of pubkey/signature evaluation\n                         // distinguishable by CHECKMULTISIG NOT if the STRICTENC flag is set.\n                         // See the script_(in)valid tests for details.\n-                        if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, serror)) {\n+                        if (!CheckSignatureEncoding(vchSig, flags, serror) || !CheckPubKeyEncoding(vchPubKey, flags, sigversion, serror)) {\n                             // serror is set\n                             return false;\n                         }"
      },
      {
        "sha": "79894c53003480de5a8b547ca00689f549422204",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -102,6 +102,10 @@ enum\n     // Signature(s) must be empty vector if an CHECK(MULTI)SIG operation failed\n     //\n     SCRIPT_VERIFY_NULLFAIL = (1U << 14),\n+\n+    // Public keys in segregated witness scripts must be compressed\n+    //\n+    SCRIPT_VERIFY_WITNESS_PUBKEYTYPE = (1U << 15),\n };\n \n bool CheckSignatureEncoding(const std::vector<unsigned char> &vchSig, unsigned int flags, ScriptError* serror);"
      },
      {
        "sha": "7467d23b2d3a20f4a655db73d0504c124f26a6a5",
        "filename": "src/script/ismine.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 8,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/ismine.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/ismine.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -29,13 +29,25 @@ unsigned int HaveKeys(const vector<valtype>& pubkeys, const CKeyStore& keystore)\n     return nResult;\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest)\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion sigversion)\n+{\n+    bool isInvalid = false;\n+    return IsMine(keystore, scriptPubKey, isInvalid, sigversion);\n+}\n+\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion sigversion)\n+{\n+    bool isInvalid = false;\n+    return IsMine(keystore, dest, isInvalid, sigversion);\n+}\n+\n+isminetype IsMine(const CKeyStore &keystore, const CTxDestination& dest, bool& isInvalid, SigVersion sigversion)\n {\n     CScript script = GetScriptForDestination(dest);\n-    return IsMine(keystore, script);\n+    return IsMine(keystore, script, isInvalid, sigversion);\n }\n \n-isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n+isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion sigversion)\n {\n     vector<valtype> vSolutions;\n     txnouttype whichType;\n@@ -53,12 +65,35 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         break;\n     case TX_PUBKEY:\n         keyID = CPubKey(vSolutions[0]).GetID();\n+        if (sigversion != SIGVERSION_BASE && vSolutions[0].size() != 33) {\n+            isInvalid = true;\n+            return ISMINE_NO;\n+        }\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n         break;\n-    case TX_PUBKEYHASH:\n     case TX_WITNESS_V0_KEYHASH:\n+    {\n+        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            // We do not support bare witness outputs unless the P2SH version of it would be\n+            // acceptable as well. This protects against matching before segwit activates.\n+            // This also applies to the P2WSH case.\n+            break;\n+        }\n+        isminetype ret = ::IsMine(keystore, GetScriptForDestination(CKeyID(uint160(vSolutions[0]))), isInvalid, SIGVERSION_WITNESS_V0);\n+        if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n+            return ret;\n+        break;\n+    }\n+    case TX_PUBKEYHASH:\n         keyID = CKeyID(uint160(vSolutions[0]));\n+        if (sigversion != SIGVERSION_BASE) {\n+            CPubKey pubkey;\n+            if (keystore.GetPubKey(keyID, pubkey) && !pubkey.IsCompressed()) {\n+                isInvalid = true;\n+                return ISMINE_NO;\n+            }\n+        }\n         if (keystore.HaveKey(keyID))\n             return ISMINE_SPENDABLE;\n         break;\n@@ -67,21 +102,24 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         CScriptID scriptID = CScriptID(uint160(vSolutions[0]));\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript);\n-            if (ret == ISMINE_SPENDABLE)\n+            isminetype ret = IsMine(keystore, subscript, isInvalid);\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n         break;\n     }\n     case TX_WITNESS_V0_SCRIPTHASH:\n     {\n+        if (!keystore.HaveCScript(CScriptID(CScript() << OP_0 << vSolutions[0]))) {\n+            break;\n+        }\n         uint160 hash;\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(hash.begin());\n         CScriptID scriptID = CScriptID(hash);\n         CScript subscript;\n         if (keystore.GetCScript(scriptID, subscript)) {\n-            isminetype ret = IsMine(keystore, subscript);\n-            if (ret == ISMINE_SPENDABLE)\n+            isminetype ret = IsMine(keystore, subscript, isInvalid, SIGVERSION_WITNESS_V0);\n+            if (ret == ISMINE_SPENDABLE || ret == ISMINE_WATCH_SOLVABLE || (ret == ISMINE_NO && isInvalid))\n                 return ret;\n         }\n         break;\n@@ -95,6 +133,14 @@ isminetype IsMine(const CKeyStore &keystore, const CScript& scriptPubKey)\n         // them) enable spend-out-from-under-you attacks, especially\n         // in shared-wallet situations.\n         vector<valtype> keys(vSolutions.begin()+1, vSolutions.begin()+vSolutions.size()-1);\n+        if (sigversion != SIGVERSION_BASE) {\n+            for (size_t i = 0; i < keys.size(); i++) {\n+                if (keys[i].size() != 33) {\n+                    isInvalid = true;\n+                    return ISMINE_NO;\n+                }\n+            }\n+        }\n         if (HaveKeys(keys, keystore) == keys.size())\n             return ISMINE_SPENDABLE;\n         break;"
      },
      {
        "sha": "ec7a620e330cb57faa81cfec09beff9c2b8b1153",
        "filename": "src/script/ismine.h",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/ismine.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/ismine.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/ismine.h?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -28,7 +28,14 @@ enum isminetype\n /** used for bitflags of isminetype */\n typedef uint8_t isminefilter;\n \n-isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n-isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest);\n+/* isInvalid becomes true when the script is found invalid by consensus or policy. This will terminate the recursion\n+ * and return a ISMINE_NO immediately, as an invalid script should never be considered as \"mine\". This is needed as\n+ * different SIGVERSION may have different network rules. Currently the only use of isInvalid is indicate uncompressed\n+ * keys in SIGVERSION_WITNESS_V0 script, but could also be used in similar cases in the future\n+ */\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CScript& scriptPubKey, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, bool& isInvalid, SigVersion = SIGVERSION_BASE);\n+isminetype IsMine(const CKeyStore& keystore, const CTxDestination& dest, SigVersion = SIGVERSION_BASE);\n \n #endif // BITCOIN_SCRIPT_ISMINE_H"
      },
      {
        "sha": "2c5359fe8afdb96b56d8649735d07f9fba4f7a26",
        "filename": "src/script/script_error.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/script_error.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/script_error.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -85,6 +85,8 @@ const char* ScriptErrorString(const ScriptError serror)\n             return \"Witness requires only-redeemscript scriptSig\";\n         case SCRIPT_ERR_WITNESS_UNEXPECTED:\n             return \"Witness provided for non-witness script\";\n+        case SCRIPT_ERR_WITNESS_PUBKEYTYPE:\n+            return \"Using non-compressed keys in segwit\";\n         case SCRIPT_ERR_UNKNOWN_ERROR:\n         case SCRIPT_ERR_ERROR_COUNT:\n         default: break;"
      },
      {
        "sha": "430836991b2cf5bd7652e279263ae676cf9a6fa1",
        "filename": "src/script/script_error.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/script_error.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/script_error.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script_error.h?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -62,6 +62,7 @@ typedef enum ScriptError_t\n     SCRIPT_ERR_WITNESS_MALLEATED,\n     SCRIPT_ERR_WITNESS_MALLEATED_P2SH,\n     SCRIPT_ERR_WITNESS_UNEXPECTED,\n+    SCRIPT_ERR_WITNESS_PUBKEYTYPE,\n \n     SCRIPT_ERR_ERROR_COUNT\n } ScriptError;"
      },
      {
        "sha": "f552ad5bbad25a95443e5733fd6b114d625dbf6d",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -26,6 +26,10 @@ bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig,\n     if (!keystore->GetKey(address, key))\n         return false;\n \n+    // Signing with uncompressed keys is disabled in witness scripts\n+    if (sigversion == SIGVERSION_WITNESS_V0 && !key.IsCompressed())\n+        return false;\n+\n     uint256 hash = SignatureHash(scriptCode, *txTo, nIn, nHashType, amount, sigversion);\n     if (!key.Sign(hash, vchSig))\n         return false;"
      },
      {
        "sha": "5c054ed3e8fb06939a31061e6d2fe7d09222c9a2",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 367,
        "deletions": 1,
        "changes": 368,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1855,6 +1855,8 @@\n     \"OK\",\n     \"P2SH with CLEANSTACK\"\n ],\n+\n+[\"Testing with uncompressed keys in witness v0 without WITNESS_PUBKEYTYPE\"],\n [\n     [\n         \"304402200d461c140cfdfcf36b94961db57ae8c18d1cb80e9d95a9e47ac22470c1bf125502201c8dc1cbfef6a3ef90acbbb992ca22fe9466ee6f9d4898eda277a7ac3ab4b25101\",\n@@ -2139,7 +2141,371 @@\n     \"P2PK with witness\"\n ],\n \n-[\"CHECKSEQUENCEVERIFY tests\"], \n+[\"Testing with compressed keys in witness v0 with WITNESS_PUBKEYTYPE\"],\n+[\n+    [\n+        \"304402204256146fcf8e73b0fd817ffa2a4e408ff0418ff987dd08a4f485b62546f6c43c02203f3c8c3e2febc051e1222867f5f9d0eaf039d6792911c10940aa3cc74123378e01\",\n+        \"210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x1863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2WSH with compressed key\"\n+],\n+[\n+    [\n+        \"304402204edf27486f11432466b744df533e1acac727e0c83e5f912eb289a3df5bf8035f022075809fdd876ede40ad21667eba8b7e96394938f9c9c50f11b6a1280cce2cea8601\",\n+        \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x14 0x751e76e8199196d454941c45d1b3a323f1433bd6\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2WPKH with compressed key\"\n+],\n+[\n+    [\n+        \"304402203a549090cc46bce1e5e95c4922ea2c12747988e0207b04c42f81cdbe87bb1539022050f57a245b875fd5119c419aaf050bcdf41384f0765f04b809e5bced1fe7093d01\",\n+        \"210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+        0.00000001\n+    ],\n+    \"0x22 0x00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262\",\n+    \"HASH160 0x14 0xe4300531190587e3880d4c3004f5355d88ff928d EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2SH(P2WSH) with compressed key\"\n+],\n+[\n+    [\n+        \"304402201bc0d53046827f4a35a3166e33e3b3366c4085540dc383b95d21ed2ab11e368a0220333e78c6231214f5f8e59621e15d7eeab0d4e4d0796437e00bfbd2680c5f9c1701\",\n+        \"0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n+        0.00000001\n+    ],\n+    \"0x16 0x0014751e76e8199196d454941c45d1b3a323f1433bd6\",\n+    \"HASH160 0x14 0xbcfeb728b584253d5f3f70bcb780e9ef218a68f4 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"Basic P2SH(P2WPKH) with compressed key\"\n+],\n+\n+[\"Testing with uncompressed keys in witness v0 with WITNESS_PUBKEYTYPE\"],\n+[\n+    [\n+        \"304402200d461c140cfdfcf36b94961db57ae8c18d1cb80e9d95a9e47ac22470c1bf125502201c8dc1cbfef6a3ef90acbbb992ca22fe9466ee6f9d4898eda277a7ac3ab4b25101\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0xb95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2WSH\"\n+],\n+[\n+    [\n+        \"304402201e7216e5ccb3b61d46946ec6cc7e8c4e0117d13ac2fd4b152197e4805191c74202203e9903e33e84d9ee1dd13fb057afb7ccfb47006c23f6a067185efbc9dd780fc501\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x14 0x91b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2WPKH\"\n+],\n+[\n+    [\n+        \"3044022066e02c19a513049d49349cf5311a1b012b7c4fae023795a18ab1d91c23496c22022025e216342c8e07ce8ef51e8daee88f84306a9de66236cab230bb63067ded1ad301\",\n+        \"410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020b95237b48faaa69eb078e1170be3b5cbb3fddf16d0a991e14ad274f7b33a4f64\",\n+    \"HASH160 0x14 0xf386c2ba255cc56d20cfa6ea8b062f8b59945518 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2SH(P2WSH)\"\n+],\n+[\n+    [\n+        \"304402200929d11561cd958460371200f82e9cae64c727a495715a31828e27a7ad57b36d0220361732ced04a6f97351ecca21a56d0b8cd4932c1da1f8f569a2b68e5e48aed7801\",\n+        \"0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\",\n+        0.00000001\n+    ],\n+    \"0x16 0x001491b24bf9f5288532960ac687abb035127b1d28a5\",\n+    \"HASH160 0x14 0x17743beb429c55c942d2ec703b98c4d57c2df5c6 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"Basic P2SH(P2WPKH)\"\n+],\n+\n+[\"Testing P2WSH multisig with compressed keys\"],\n+[\n+    [\n+        \"\",\n+        \"304402207eb8a59b5c65fc3f6aeef77066556ed5c541948a53a3ba7f7c375b8eed76ee7502201e036a7a9a98ff919ff94dc905d67a1ec006f79ef7cff0708485c8bb79dce38e01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x06c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022033706aed33b8155d5486df3b9bca8cdd3bd4bdb5436dce46d72cdaba51d22b4002203626e94fe53a178af46624f17315c6931f20a30b103f5e044e1eda0c3fe185c601\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002006c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"HASH160 0x14 0x26282aad7c29369d15fed062a778b6100d31a340 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402204048b7371ab1c544362efb89af0c80154747d665aa4fcfb2edfd2d161e57b42e02207e043748e96637080ffc3acbd4dcc6fee1e58d30f6d1269535f32188e5ddae7301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x06c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with compressed keys\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022073902ef0b8a554c36c44cc03c1b64df96ce2914ebcf946f5bb36078fd5245cdf02205b148f1ba127065fb8c83a5a9576f2dcd111739788ed4bb3ee08b2bd3860c91c01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002006c24420938f0fa3c1cb2707d867154220dca365cdbfa0dd2a83854730221460\",\n+    \"HASH160 0x14 0x26282aad7c29369d15fed062a778b6100d31a340 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\"\n+],\n+\n+[\"Testing P2WSH multisig with compressed and uncompressed keys (first key being the key closer to the top of stack)\"],\n+[\n+    [\n+        \"\",\n+        \"304402202d092ededd1f060609dbf8cb76950634ff42b3e62cf4adb69ab92397b07d742302204ff886f8d0817491a96d1daccdcc820f6feb122ee6230143303100db37dfa79f01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202dd7e91243f2235481ffb626c3b7baf2c859ae3a5a77fb750ef97b99a8125dc002204960de3d3c3ab9496e218ec57e5240e0e10a6f9546316fe240c216d45116d29301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202d092ededd1f060609dbf8cb76950634ff42b3e62cf4adb69ab92397b07d742302204ff886f8d0817491a96d1daccdcc820f6feb122ee6230143303100db37dfa79f01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402202dd7e91243f2235481ffb626c3b7baf2c859ae3a5a77fb750ef97b99a8125dc002204960de3d3c3ab9496e218ec57e5240e0e10a6f9546316fe240c216d45116d29301\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402201e9e6f7deef5b2f21d8223c5189b7d5e82d237c10e97165dd08f547c4e5ce6ed02206796372eb1cc6acb52e13ee2d7f45807780bf96b132cb6697f69434be74b1af901\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022045e667f3f0f3147b95597a24babe9afecea1f649fd23637dfa7ed7e9f3ac18440220295748e81005231135289fe3a88338dabba55afa1bdb4478691337009d82b68d01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402201e9e6f7deef5b2f21d8223c5189b7d5e82d237c10e97165dd08f547c4e5ce6ed02206796372eb1cc6acb52e13ee2d7f45807780bf96b132cb6697f69434be74b1af901\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x08a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022045e667f3f0f3147b95597a24babe9afecea1f649fd23637dfa7ed7e9f3ac18440220295748e81005231135289fe3a88338dabba55afa1bdb4478691337009d82b68d01\",\n+        \"5121038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x002008a6665ebfd43b02323423e764e185d98d1587f903b81507dbb69bfc41005efa\",\n+    \"HASH160 0x14 0x6f5ecd4b83b77f3c438f5214eff96454934fc5d1 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022046f5367a261fd8f8d7de6eb390491344f8ec2501638fb9a1095a0599a21d3f4c02205c1b3b51d20091c5f1020841bbca87b44ebe25405c64e4acf758f2eae8665f8401\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022053e210e4fb1881e6092fd75c3efc5163105599e246ded661c0ee2b5682cc2d6c02203a26b7ada8682a095b84c6d1b881637000b47d761fc837c4cee33555296d63f101\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG second key uncompressed and signing with the first key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022046f5367a261fd8f8d7de6eb390491344f8ec2501638fb9a1095a0599a21d3f4c02205c1b3b51d20091c5f1020841bbca87b44ebe25405c64e4acf758f2eae8665f8401\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\"\n+],\n+[\n+    [\n+        \"\",\n+        \"3044022053e210e4fb1881e6092fd75c3efc5163105599e246ded661c0ee2b5682cc2d6c02203a26b7ada8682a095b84c6d1b881637000b47d761fc837c4cee33555296d63f101\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402206c6d9f5daf85b54af2a93ec38b15ab27f205dbf5c735365ff12451e43613d1f40220736a44be63423ed5ebf53491618b7cc3d8a5093861908da853739c73717938b701\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"30440220687871bc6144012d75baf585bb26ce13997f7d8c626f4d8825b069c3b2d064470220108936fe1c57327764782253e99090b09c203ec400ed35ce9e026ce2ecf842a001\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS\",\n+    \"OK\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"304402206c6d9f5daf85b54af2a93ec38b15ab27f205dbf5c735365ff12451e43613d1f40220736a44be63423ed5ebf53491618b7cc3d8a5093861908da853739c73717938b701\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"\",\n+    \"0 0x20 0x230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+[\n+    [\n+        \"\",\n+        \"30440220687871bc6144012d75baf585bb26ce13997f7d8c626f4d8825b069c3b2d064470220108936fe1c57327764782253e99090b09c203ec400ed35ce9e026ce2ecf842a001\",\n+        \"5141048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179852ae\",\n+        0.00000001\n+    ],\n+    \"0x22 0x0020230828ed48871f0f362ce9432aa52f620f442cc8d9ce7a8b5e798365595a38bb\",\n+    \"HASH160 0x14 0x3478e7019ce61a68148f87549579b704cbe4c393 EQUAL\",\n+    \"P2SH,WITNESS,WITNESS_PUBKEYTYPE\",\n+    \"WITNESS_PUBKEYTYPE\",\n+    \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\"\n+],\n+\n+[\"CHECKSEQUENCEVERIFY tests\"],\n [\"\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"INVALID_STACK_OPERATION\", \"CSV automatically fails on a empty stack\"],\n [\"-1\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"NEGATIVE_LOCKTIME\", \"CSV automatically fails if stack top is negative\"],\n [\"0x0100\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY,MINIMALDATA\", \"UNKNOWN_ERROR\", \"CSV fails if stack top is not minimally encoded\"],"
      },
      {
        "sha": "561adb8ea2252a9eebfa70ec8bd2a580c8dcbb4a",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 94,
        "deletions": 0,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -99,6 +99,7 @@ static ScriptErrorDesc script_errors[]={\n     {SCRIPT_ERR_WITNESS_MALLEATED, \"WITNESS_MALLEATED\"},\n     {SCRIPT_ERR_WITNESS_MALLEATED_P2SH, \"WITNESS_MALLEATED_P2SH\"},\n     {SCRIPT_ERR_WITNESS_UNEXPECTED, \"WITNESS_UNEXPECTED\"},\n+    {SCRIPT_ERR_WITNESS_PUBKEYTYPE, \"WITNESS_PUBKEYTYPE\"},\n };\n \n const char *FormatScriptError(ScriptError_t err)\n@@ -825,6 +826,99 @@ BOOST_AUTO_TEST_CASE(script_build)\n                                 \"P2PK with witness\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH\n                                ).PushSig(keys.key0).Push(\"0\").AsWit().ScriptError(SCRIPT_ERR_WITNESS_UNEXPECTED));\n \n+    // Compressed keys should pass SCRIPT_VERIFY_WITNESS_PUBKEYTYPE\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"Basic P2WSH with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C),\n+                                \"Basic P2WPKH with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0C).Push(keys.pubkey0C).AsWit());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH) with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C),\n+                                \"Basic P2SH(P2WPKH) with compressed key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0C).Push(keys.pubkey0C).AsWit().PushRedeem());\n+\n+    // Testing uncompressed key in witness with SCRIPT_VERIFY_WITNESS_PUBKEYTYPE\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2WSH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2WPKH\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"Basic P2SH(P2WSH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0),\n+                                \"Basic P2SH(P2WPKH)\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_PKH,\n+                                0, 1).PushWitSig(keys.key0).Push(keys.pubkey0).AsWit().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+\n+    // P2WSH 1-of-2 multisig with compressed keys\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with compressed keys\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem());\n+\n+    // P2WSH 1-of-2 multisig with first key uncompressed\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with first key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1C).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    // P2WSH 1-of-2 multisig with second key uncompressed\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG second key uncompressed and signing with the first key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the first key should pass as the uncompressed key is not used\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key0C).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2WSH CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, false, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1) << ToByteVector(keys.pubkey0C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"P2SH(P2WSH) CHECKMULTISIG with second key uncompressed and signing with the second key\", SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH | SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, true, WITNESS_SH,\n+                                0, 1).Push(CScript()).AsWit().PushWitSig(keys.key1).PushWitRedeem().PushRedeem().ScriptError(SCRIPT_ERR_WITNESS_PUBKEYTYPE));\n+\n     std::set<std::string> tests_set;\n \n     {"
      },
      {
        "sha": "34d9547f3dc6013189560ac68c8c6585ca2a1166",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 26,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Copyright (c) 2011-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -55,7 +55,8 @@ static std::map<string, unsigned int> mapFlagNames = boost::assign::map_list_of\n     (string(\"CHECKLOCKTIMEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKLOCKTIMEVERIFY)\n     (string(\"CHECKSEQUENCEVERIFY\"), (unsigned int)SCRIPT_VERIFY_CHECKSEQUENCEVERIFY)\n     (string(\"WITNESS\"), (unsigned int)SCRIPT_VERIFY_WITNESS)\n-    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM);\n+    (string(\"DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"), (unsigned int)SCRIPT_VERIFY_DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM)\n+    (string(\"WITNESS_PUBKEYTYPE\"), (unsigned int)SCRIPT_VERIFY_WITNESS_PUBKEYTYPE);\n \n unsigned int ParseScriptFlags(string strFlags)\n {\n@@ -429,7 +430,7 @@ BOOST_AUTO_TEST_CASE(test_big_witness_transaction) {\n     mtx.nVersion = 1;\n \n     CKey key;\n-    key.MakeNewKey(false);\n+    key.MakeNewKey(true); // Need to use compressed keys in segwit or the signing will fail\n     CBasicKeyStore keystore;\n     keystore.AddKeyPubKey(key, key.GetPubKey());\n     CKeyID hash = key.GetPubKey().GetID();\n@@ -625,30 +626,13 @@ BOOST_AUTO_TEST_CASE(test_witness)\n     CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n     CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n \n-    // Witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2);\n-    CheckWithFlag(output1, input1, 0, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n-    CheckWithFlag(output1, input2, 0, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    // Signing disabled for witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey1L), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForWitness(scriptPubkey2L), output2, input2, false);\n \n-    // P2SH witness pay-to-uncompressed-pubkey (v1).\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1);\n-    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2);\n-    ReplaceRedeemScript(input2.vin[0].scriptSig, GetScriptForWitness(scriptPubkey1L));\n-    CheckWithFlag(output1, input1, 0, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input1, STANDARD_SCRIPT_VERIFY_FLAGS, true);\n-    CheckWithFlag(output1, input2, 0, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_P2SH, true);\n-    CheckWithFlag(output1, input2, SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH, false);\n-    CheckWithFlag(output1, input2, STANDARD_SCRIPT_VERIFY_FLAGS, false);\n+    // Signing disabled for P2SH witness pay-to-uncompressed-pubkey (v1).\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey1L))), output1, input1, false);\n+    CreateCreditAndSpend(keystore, GetScriptForDestination(CScriptID(GetScriptForWitness(scriptPubkey2L))), output2, input2, false);\n \n     // Normal 2-of-2 multisig\n     CreateCreditAndSpend(keystore, scriptMulti, output1, input1, false);"
      },
      {
        "sha": "8e95426d11bdf74d5c24ba9f5866d113fa28a04d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/53133c1c041d113c2a480a18e6ff38681d135dca/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/53133c1c041d113c2a480a18e6ff38681d135dca/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=53133c1c041d113c2a480a18e6ff38681d135dca",
        "patch": "@@ -1,5 +1,5 @@\n // Copyright (c) 2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n+// Copyright (c) 2009-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -1025,9 +1025,12 @@ class Witnessifier : public boost::static_visitor<bool>\n \n     bool operator()(const CKeyID &keyID) {\n         CPubKey pubkey;\n-        if (pwalletMain && pwalletMain->GetPubKey(keyID, pubkey)) {\n-            CScript basescript;\n-            basescript << ToByteVector(pubkey) << OP_CHECKSIG;\n+        if (pwalletMain) {\n+            CScript basescript = GetScriptForDestination(keyID);\n+            isminetype typ;\n+            typ = IsMine(*pwalletMain, basescript, SIGVERSION_WITNESS_V0);\n+            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n+                return false;\n             CScript witscript = GetScriptForWitness(basescript);\n             pwalletMain->AddCScript(witscript);\n             result = CScriptID(witscript);\n@@ -1045,6 +1048,10 @@ class Witnessifier : public boost::static_visitor<bool>\n                 result = scriptID;\n                 return true;\n             }\n+            isminetype typ;\n+            typ = IsMine(*pwalletMain, subscript, SIGVERSION_WITNESS_V0);\n+            if (typ != ISMINE_SPENDABLE && typ != ISMINE_WATCH_SOLVABLE)\n+                return false;\n             CScript witscript = GetScriptForWitness(subscript);\n             pwalletMain->AddCScript(witscript);\n             result = CScriptID(witscript);\n@@ -1090,7 +1097,7 @@ UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n     CTxDestination dest = address.Get();\n     bool ret = boost::apply_visitor(w, dest);\n     if (!ret) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet\");\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Public key or redeemscript not known to wallet, or the key is uncompressed\");\n     }\n \n     pwalletMain->SetAddressBook(w.result, \"\", \"receive\");"
      }
    ]
  },
  {
    "sha": "c90111314435ab67808a89cac1a664cb19eafd61",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOTAxMTEzMTQ0MzVhYjY3ODA4YTg5Y2FjMWE2NjRjYjE5ZWFmZDYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:32:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T11:32:18Z"
      },
      "message": "Merge #8920: Set minimum required Boost to 1.47.0\n\n6dd3723 Set minimum required Boost to 1.47.0 (fanquake)\n282abd8 [build-aux] Boost_Base serial 27 (fanquake)",
      "tree": {
        "sha": "8dee09135240e6b3e069b5feaafb23f2e8912664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dee09135240e6b3e069b5feaafb23f2e8912664"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c90111314435ab67808a89cac1a664cb19eafd61",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBLbCAAoJEHSBCwEjRsmmVs8H/ilGfJFmNVwqEYPzQ8sfElnF\nDI6sgsBHrT5w9HA3S3JCiLOsG30M/Cwpx+GDq0Fkg24DLDCpbMNO2yPn6AoSkmxL\nbnnR3QtYPqUMUHXFm3OrxW/gmFRegWVC5j2U9jqf5oonwtKOmXDfO/UDkrUNCqNJ\nZGnEeROm/DMQFIAvCzhA7FH+9JEqsLlPYvq45Ou4ELriMoZSYeAYULslLciJ1yiz\n7P6Q2uwjoY1HjBrQeCA1gwgBoMkzu2Z9ClUXeYey5G/xx7KuiTUIhtHf8nyPKxIW\ns3kn1RCjpYLV43W6bObCdEbUQVD/L1yJHWm+z9PsQ6nvIBY0mQg+1T5WHbLxQ64=\n=aWBt\n-----END PGP SIGNATURE-----",
        "payload": "tree 8dee09135240e6b3e069b5feaafb23f2e8912664\nparent 53133c1c041d113c2a480a18e6ff38681d135dca\nparent 6dd37237222f7102e223ece948150cb5c5087e3c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476703924 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476703938 +0200\n\nMerge #8920: Set minimum required Boost to 1.47.0\n\n6dd3723 Set minimum required Boost to 1.47.0 (fanquake)\n282abd8 [build-aux] Boost_Base serial 27 (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c90111314435ab67808a89cac1a664cb19eafd61",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c90111314435ab67808a89cac1a664cb19eafd61",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c90111314435ab67808a89cac1a664cb19eafd61/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "53133c1c041d113c2a480a18e6ff38681d135dca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/53133c1c041d113c2a480a18e6ff38681d135dca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/53133c1c041d113c2a480a18e6ff38681d135dca"
      },
      {
        "sha": "6dd37237222f7102e223ece948150cb5c5087e3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dd37237222f7102e223ece948150cb5c5087e3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dd37237222f7102e223ece948150cb5c5087e3c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "650c94fa64752a362a34eb6d489c194255ecfc51",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c90111314435ab67808a89cac1a664cb19eafd61/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c90111314435ab67808a89cac1a664cb19eafd61/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=c90111314435ab67808a89cac1a664cb19eafd61",
        "patch": "@@ -33,7 +33,7 @@\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 26\n+#serial 27\n \n AC_DEFUN([AX_BOOST_BASE],\n [\n@@ -96,7 +96,7 @@ if test \"x$want_boost\" = \"xyes\"; then\n         libsubdirs=\"lib64 libx32 lib lib64\"\n         ;;\n       ppc64|s390x|sparc64|aarch64|ppc64le)\n-        libsubdirs=\"lib64 lib lib64 ppc64le\"\n+        libsubdirs=\"lib64 lib lib64\"\n         ;;\n     esac\n "
      },
      {
        "sha": "705327e816d94c437251acda2848f4470b7e5b12",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c90111314435ab67808a89cac1a664cb19eafd61/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c90111314435ab67808a89cac1a664cb19eafd61/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=c90111314435ab67808a89cac1a664cb19eafd61",
        "patch": "@@ -589,8 +589,11 @@ fi\n \n if test x$use_boost = xyes; then\n \n+dnl Minimum required Boost version\n+define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n+\n dnl Check for boost libs\n-AX_BOOST_BASE\n+AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_PROGRAM_OPTIONS"
      }
    ]
  },
  {
    "sha": "f9c23dea976465c51b9fe2cead81b707678c16bb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWMyM2RlYTk3NjQ2NWM1MWI5ZmUyY2VhZDgxYjcwNzY3OGMxNmJi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T11:24:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T12:15:57Z"
      },
      "message": "Define start and end time for segwit deployment",
      "tree": {
        "sha": "c62980938db6b917e70b179ddbfcc45d0a1c8504",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c62980938db6b917e70b179ddbfcc45d0a1c8504"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9c23dea976465c51b9fe2cead81b707678c16bb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9c23dea976465c51b9fe2cead81b707678c16bb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9c23dea976465c51b9fe2cead81b707678c16bb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9c23dea976465c51b9fe2cead81b707678c16bb/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0329511b9cd60146fcd27a75600e404122505593",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0329511b9cd60146fcd27a75600e404122505593",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0329511b9cd60146fcd27a75600e404122505593"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "25ec94b75710a4ea85ae9327c3ae901c96950764",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9c23dea976465c51b9fe2cead81b707678c16bb/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9c23dea976465c51b9fe2cead81b707678c16bb/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=f9c23dea976465c51b9fe2cead81b707678c16bb",
        "patch": "@@ -91,10 +91,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n-        // Deployment of SegWit (BIP141 and BIP143)\n+        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 0; // Never / undefined\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -186,7 +186,7 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n-        // Deployment of SegWit (BIP141 and BIP143)\n+        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017"
      },
      {
        "sha": "0e73cace831711911c5bcc6c11c035866bb85b62",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9c23dea976465c51b9fe2cead81b707678c16bb/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9c23dea976465c51b9fe2cead81b707678c16bb/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=f9c23dea976465c51b9fe2cead81b707678c16bb",
        "patch": "@@ -16,7 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n-    DEPLOYMENT_SEGWIT, // Deployment of BIP141 and BIP143\n+    DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };"
      }
    ]
  },
  {
    "sha": "02a337defdd854efc78ecba6d1fb19cb1c075f16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMmEzMzdkZWZkZDg1NGVmYzc4ZWNiYTZkMWZiMTljYjFjMDc1ZjE2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-06-21T20:08:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T14:44:57Z"
      },
      "message": "Dont remove a \"preferred\" cmpctblock peer if they provide a block",
      "tree": {
        "sha": "15e2aa39b57368a77e4f6e9fff235ff0f2484e2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15e2aa39b57368a77e4f6e9fff235ff0f2484e2d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/02a337defdd854efc78ecba6d1fb19cb1c075f16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a337defdd854efc78ecba6d1fb19cb1c075f16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/02a337defdd854efc78ecba6d1fb19cb1c075f16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a337defdd854efc78ecba6d1fb19cb1c075f16/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c90111314435ab67808a89cac1a664cb19eafd61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c90111314435ab67808a89cac1a664cb19eafd61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c90111314435ab67808a89cac1a664cb19eafd61"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 12,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e27fb1fae6a504e7db5ff27fa6cdf5d1c72645df",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/02a337defdd854efc78ecba6d1fb19cb1c075f16/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/02a337defdd854efc78ecba6d1fb19cb1c075f16/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=02a337defdd854efc78ecba6d1fb19cb1c075f16",
        "patch": "@@ -485,9 +485,13 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pf\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n-        BOOST_FOREACH(const NodeId nodeid, lNodesAnnouncingHeaderAndIDs)\n-            if (nodeid == pfrom->GetId())\n+        for (std::list<NodeId>::iterator it = lNodesAnnouncingHeaderAndIDs.begin(); it != lNodesAnnouncingHeaderAndIDs.end(); it++) {\n+            if (*it == pfrom->GetId()) {\n+                lNodesAnnouncingHeaderAndIDs.erase(it);\n+                lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n                 return;\n+            }\n+        }\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n         if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n@@ -5731,6 +5735,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     return true;\n                 }\n \n+                if (!fAlreadyInFlight && mapBlocksInFlight.size() == 1 && pindex->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                    // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n+                    // with this block! Let's get them to announce using compact blocks in the future.\n+                    MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n+                }\n+\n                 BlockTransactionsRequest req;\n                 for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n                     if (!partialBlock.IsTxAvailable(i))"
      }
    ]
  },
  {
    "sha": "fe998e962dc015978f104b782afb7daec3c4d4df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTk5OGU5NjJkYzAxNTk3OGYxMDRiNzgyYWZiN2RhZWMzYzRkNGRm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-06-21T23:28:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T14:44:57Z"
      },
      "message": "More agressively filter compact block requests\n\nUnit test adaptations by Pieter Wuille.",
      "tree": {
        "sha": "b9b4c1e3ba1e107db8a0d0f3b3e52ad02c2a3915",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b9b4c1e3ba1e107db8a0d0f3b3e52ad02c2a3915"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe998e962dc015978f104b782afb7daec3c4d4df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe998e962dc015978f104b782afb7daec3c4d4df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe998e962dc015978f104b782afb7daec3c4d4df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe998e962dc015978f104b782afb7daec3c4d4df/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "02a337defdd854efc78ecba6d1fb19cb1c075f16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/02a337defdd854efc78ecba6d1fb19cb1c075f16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/02a337defdd854efc78ecba6d1fb19cb1c075f16"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "a24066b0773f20ca45193ba5ce6480083c55aa4c",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe998e962dc015978f104b782afb7daec3c4d4df/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe998e962dc015978f104b782afb7daec3c4d4df/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=fe998e962dc015978f104b782afb7daec3c4d4df",
        "patch": "@@ -591,7 +591,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n     def test_getblocktxn_handler(self, node, test_node, version):\n         # bitcoind won't respond for blocks whose height is more than 15 blocks\n         # deep.\n-        MAX_GETBLOCKTXN_DEPTH = 15\n+        MAX_GETBLOCKTXN_DEPTH = 10\n         chain_height = node.getblockcount()\n         current_height = chain_height\n         while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n@@ -632,7 +632,7 @@ def test_getblocktxn_handler(self, node, test_node, version):\n \n     def test_compactblocks_not_at_tip(self, node, test_node):\n         # Test that requesting old compactblocks doesn't work.\n-        MAX_CMPCTBLOCK_DEPTH = 11\n+        MAX_CMPCTBLOCK_DEPTH = 6\n         new_blocks = []\n         for i in range(MAX_CMPCTBLOCK_DEPTH):\n             test_node.clear_block_announcement()"
      },
      {
        "sha": "0002a1c08ff3daeda598a73d66ad1b761a96cb7d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe998e962dc015978f104b782afb7daec3c4d4df/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe998e962dc015978f104b782afb7daec3c4d4df/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fe998e962dc015978f104b782afb7daec3c4d4df",
        "patch": "@@ -4878,7 +4878,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // and we don't feel like constructing the object for them, so\n                         // instead we respond with the full, non-compact block.\n                         bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n-                        if (mi->second->nHeight >= chainActive.Height() - 10) {\n+                        if (CanDirectFetch(Params().GetConsensus()) && mi->second->nHeight >= chainActive.Height() - 5) {\n                             CBlockHeaderAndShortTxIDs cmpctblock(block, fPeerWantsWitness);\n                             pfrom->PushMessageWithFlag(fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                         } else\n@@ -5405,8 +5405,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        if (it->second->nHeight < chainActive.Height() - 15) {\n-            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n+        if (it->second->nHeight < chainActive.Height() - 10) {\n+            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > 10 deep\", pfrom->id);\n             return true;\n         }\n "
      }
    ]
  },
  {
    "sha": "b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmU5M2EzNDNlYzJkYzdkMjU1Yjk3MGU2ZWU0NWU5YzM5MGY3ZWQw",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-06-22T12:18:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T14:44:57Z"
      },
      "message": "Add cmpctblock to debug help list",
      "tree": {
        "sha": "02100d218ed38600b752f1a6dcef885b14db8bd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/02100d218ed38600b752f1a6dcef885b14db8bd4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe998e962dc015978f104b782afb7daec3c4d4df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe998e962dc015978f104b782afb7daec3c4d4df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe998e962dc015978f104b782afb7daec3c4d4df"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "685188c4584625ba0599fa5a1f8a63b1e6c5fe25",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      }
    ]
  },
  {
    "sha": "3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYWM2ZGUwYTA0NWNjOWIyMDQ3Y2ViMTlhZjk3MGU3ZmZiZjkwNWZh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-31T15:35:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T14:46:30Z"
      },
      "message": "Align constant names for maximum compact block / blocktxn depth",
      "tree": {
        "sha": "db39a34fe1c247bf8b42c05c2bcbf20b4ac3903c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db39a34fe1c247bf8b42c05c2bcbf20b4ac3903c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2e93a343ec2dc7d255b970e6ee45e9c390f7ed0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "6b5d4771310778e617cc4192b68f68c49502787e",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
        "patch": "@@ -632,9 +632,9 @@ def test_getblocktxn_handler(self, node, test_node, version):\n \n     def test_compactblocks_not_at_tip(self, node, test_node):\n         # Test that requesting old compactblocks doesn't work.\n-        MAX_CMPCTBLOCK_DEPTH = 6\n+        MAX_CMPCTBLOCK_DEPTH = 5\n         new_blocks = []\n-        for i in range(MAX_CMPCTBLOCK_DEPTH):\n+        for i in range(MAX_CMPCTBLOCK_DEPTH + 1):\n             test_node.clear_block_announcement()\n             new_blocks.append(node.generate(1)[0])\n             wait_until(test_node.received_block_announcement, timeout=30)"
      },
      {
        "sha": "7e274285138308810239638c136225223bddc319",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
        "patch": "@@ -4878,7 +4878,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // and we don't feel like constructing the object for them, so\n                         // instead we respond with the full, non-compact block.\n                         bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n-                        if (CanDirectFetch(Params().GetConsensus()) && mi->second->nHeight >= chainActive.Height() - 5) {\n+                        if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n                             CBlockHeaderAndShortTxIDs cmpctblock(block, fPeerWantsWitness);\n                             pfrom->PushMessageWithFlag(fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                         } else\n@@ -5405,8 +5405,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        if (it->second->nHeight < chainActive.Height() - 10) {\n-            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > 10 deep\", pfrom->id);\n+        if (it->second->nHeight < chainActive.Height() - MAX_BLOCKTXN_DEPTH) {\n+            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > %i deep\", pfrom->id, MAX_BLOCKTXN_DEPTH);\n             return true;\n         }\n "
      },
      {
        "sha": "db58b274872b1514c87dc6dde999d414b488e954",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
        "patch": "@@ -90,6 +90,11 @@ static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n /** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n  *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n static const unsigned int MAX_HEADERS_RESULTS = 2000;\n+/** Maximum depth of blocks we're willing to serve as compact blocks to peers\n+ *  when requested. For older blocks, a regular BLOCK response will be sent. */\n+static const int MAX_CMPCTBLOCK_DEPTH = 5;\n+/** Maximum depth of blocks we're willing to respond to GETBLOCKTXN requests for. */\n+static const int MAX_BLOCKTXN_DEPTH = 10;\n /** Size of the \"block download window\": how far ahead of our current height do we fetch?\n  *  Larger windows tolerate larger download speed differences between peer, but increase the potential\n  *  degree of disordering of blocks on disk (which make reindexing and in the future perhaps pruning"
      }
    ]
  },
  {
    "sha": "c6b959efcf2d9a694a85e4c4a32bea343fccd685",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNmI5NTllZmNmMmQ5YTY5NGE4NWU0YzRhMzJiZWEzNDNmY2NkNjg1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T14:48:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T14:49:12Z"
      },
      "message": "Merge #8937: Define start and end time for segwit deployment\n\nf9c23de Define start and end time for segwit deployment (Pieter Wuille)",
      "tree": {
        "sha": "89846ab99bf6e69f0dd44501f156664e8b4afced",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89846ab99bf6e69f0dd44501f156664e8b4afced"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c6b959efcf2d9a694a85e4c4a32bea343fccd685",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBOToAAoJEHSBCwEjRsmmzsEH/0Wx4xRtKOV57F4ldSYWXF+r\nTb0zdXJFQL4e7vheGDPDcXctk7sKIu+7BAg2sz9KGQkWC64MwjeF7+e7R8kxTZhO\nYz0rJYqenv8T9va67/4P2libl14n3229j59GeJCvhPDY7JcIkyVY2iuGG2Jp8QKp\naXSRizpdAa6JiJlVfx3jzgcrOODQDf4Iz+LF7bAbJp/i4Q7UYFLYE/oF3MvuFQA8\nDkygy+AbY+fGg8Wv+hn+zCGxx6hcICFiQV18nrgFK9v5ZHFZMEkFqST0vQ8iNHDh\ntK4Mnt7MNb/ZmOIwIJW646UdhmRDRcoVELjYG0L1XGr6BAKUm+8ybokql3vr6Sk=\n=QZYh\n-----END PGP SIGNATURE-----",
        "payload": "tree 89846ab99bf6e69f0dd44501f156664e8b4afced\nparent c90111314435ab67808a89cac1a664cb19eafd61\nparent f9c23dea976465c51b9fe2cead81b707678c16bb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476715684 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476715752 +0200\n\nMerge #8937: Define start and end time for segwit deployment\n\nf9c23de Define start and end time for segwit deployment (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b959efcf2d9a694a85e4c4a32bea343fccd685",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b959efcf2d9a694a85e4c4a32bea343fccd685",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b959efcf2d9a694a85e4c4a32bea343fccd685/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c90111314435ab67808a89cac1a664cb19eafd61",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c90111314435ab67808a89cac1a664cb19eafd61",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c90111314435ab67808a89cac1a664cb19eafd61"
      },
      {
        "sha": "f9c23dea976465c51b9fe2cead81b707678c16bb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9c23dea976465c51b9fe2cead81b707678c16bb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f9c23dea976465c51b9fe2cead81b707678c16bb"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 5,
      "deletions": 5
    },
    "files": [
      {
        "sha": "25ec94b75710a4ea85ae9327c3ae901c96950764",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6b959efcf2d9a694a85e4c4a32bea343fccd685/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6b959efcf2d9a694a85e4c4a32bea343fccd685/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "patch": "@@ -91,10 +91,10 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1462060800; // May 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n-        // Deployment of SegWit (BIP141 and BIP143)\n+        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n-        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 0; // Never / undefined\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n+        consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n@@ -186,7 +186,7 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nStartTime = 1456790400; // March 1st, 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_CSV].nTimeout = 1493596800; // May 1st, 2017\n \n-        // Deployment of SegWit (BIP141 and BIP143)\n+        // Deployment of SegWit (BIP141, BIP143, and BIP147)\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].bit = 1;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017"
      },
      {
        "sha": "0e73cace831711911c5bcc6c11c035866bb85b62",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c6b959efcf2d9a694a85e4c4a32bea343fccd685/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c6b959efcf2d9a694a85e4c4a32bea343fccd685/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "patch": "@@ -16,7 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n-    DEPLOYMENT_SEGWIT, // Deployment of BIP141 and BIP143\n+    DEPLOYMENT_SEGWIT, // Deployment of BIP141, BIP143, and BIP147.\n     // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };"
      }
    ]
  },
  {
    "sha": "0941f556b7f228517fcb35f8b19926dfd62f481c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTQxZjU1NmI3ZjIyODUxN2ZjYjM1ZjhiMTk5MjZkZmQ2MmY0ODFj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T15:09:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-17T15:09:38Z"
      },
      "message": "Update implemented bips for 0.13.1",
      "tree": {
        "sha": "f2f1eabbf35662385c64fd3f4bd50d02cdc4cedc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2f1eabbf35662385c64fd3f4bd50d02cdc4cedc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0941f556b7f228517fcb35f8b19926dfd62f481c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0941f556b7f228517fcb35f8b19926dfd62f481c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0941f556b7f228517fcb35f8b19926dfd62f481c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0941f556b7f228517fcb35f8b19926dfd62f481c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b959efcf2d9a694a85e4c4a32bea343fccd685"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4f4161008916e64180705274af7c689c11dffafb",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0941f556b7f228517fcb35f8b19926dfd62f481c/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0941f556b7f228517fcb35f8b19926dfd62f481c/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=0941f556b7f228517fcb35f8b19926dfd62f481c",
        "patch": "@@ -26,9 +26,9 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n * [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542)).\n-* [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n-* [`BIP 143`](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki): Transaction Signature Verification for Version 0 Witness Program as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)), and defined for mainnet as of **v0.13.1** ([PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n+* [`BIP 143`](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki): Transaction Signature Verification for Version 0 Witness Program as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)) and defined for mainnet as of **v0.13.1** ([PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 144`](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki): Segregated Witness as of **0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n * [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n-* [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636)).\n+* [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636) and [PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068))."
      }
    ]
  },
  {
    "sha": "164196b7c8aecb72dd20c8681bb24b81b18aecaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjQxOTZiN2M4YWVjYjcyZGQyMGM4NjgxYmIyNGI4MWIxOGFlY2Fh",
    "commit": {
      "author": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-17T15:45:36Z"
      },
      "committer": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-17T16:03:43Z"
      },
      "message": "Simple Update to File 'bitcoin-qt.desktop'",
      "tree": {
        "sha": "4357bca53d96a8cb676791f76c1c9e8251d86895",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4357bca53d96a8cb676791f76c1c9e8251d86895"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/164196b7c8aecb72dd20c8681bb24b81b18aecaa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/164196b7c8aecb72dd20c8681bb24b81b18aecaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/164196b7c8aecb72dd20c8681bb24b81b18aecaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/164196b7c8aecb72dd20c8681bb24b81b18aecaa/comments",
    "author": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b959efcf2d9a694a85e4c4a32bea343fccd685"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "593d7584ab06d3147dfa56c708d250041472fd32",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/164196b7c8aecb72dd20c8681bb24b81b18aecaa/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/164196b7c8aecb72dd20c8681bb24b81b18aecaa/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=164196b7c8aecb72dd20c8681bb24b81b18aecaa",
        "patch": "@@ -1,7 +1,8 @@\n [Desktop Entry]\n Encoding=UTF-8\n-Name=Bitcoin\n-Comment=Bitcoin P2P Cryptocurrency\n+Name=Bitcoin Core\n+Comment=Connect to the Bitcoin P2P Network\n+Comment[de]=Verbinde mit dem Bitcoin peer-to-peer Netzwerk\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n Exec=bitcoin-qt %u"
      }
    ]
  },
  {
    "sha": "ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjM0MDJkOWE4Y2I0YjJjOGRhM2JkMmIxOWRhM2ZhYTdhNDM5YjUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T16:54:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T16:57:21Z"
      },
      "message": "Merge #8939: Update implemented bips for 0.13.1\n\n0941f55 Update implemented bips for 0.13.1 (Pieter Wuille)",
      "tree": {
        "sha": "f2f1eabbf35662385c64fd3f4bd50d02cdc4cedc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f2f1eabbf35662385c64fd3f4bd50d02cdc4cedc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBQLxAAoJEHSBCwEjRsmmVmEH/1pxg0ltiMfveNS2g/CfmQ4d\nk8MvwUvoVU42J08wSknsZNHD53h1M6bnrqCYIcUzGyv3YdplVtj0BRT7HKktTTeh\nVOjqvPDV74HJzyOH/lMIZIw5bzdzS0nJdxkArxXWUmuvQqW5tk5efVxYjdLbfkNM\n0RWzlRcnRDtPw2k89Nn7Fybj9H/WWHS+3azpTYpHMKe6um8PfHtksa290UVgrThJ\nWU0Q9REXydhxZ1KbJO60G2w9CLakTW85QQRr9vtOmPY9XjBtbArIt1SaeOmqSDjn\nSZN4dTOAIgY0yc9t8ejgSgoxVQuSXh7uZxxfAiIIqiuIez7TnSefbOVGai5hv3U=\n=QHeS\n-----END PGP SIGNATURE-----",
        "payload": "tree f2f1eabbf35662385c64fd3f4bd50d02cdc4cedc\nparent c6b959efcf2d9a694a85e4c4a32bea343fccd685\nparent 0941f556b7f228517fcb35f8b19926dfd62f481c\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476723295 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476723441 +0200\n\nMerge #8939: Update implemented bips for 0.13.1\n\n0941f55 Update implemented bips for 0.13.1 (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c6b959efcf2d9a694a85e4c4a32bea343fccd685",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c6b959efcf2d9a694a85e4c4a32bea343fccd685"
      },
      {
        "sha": "0941f556b7f228517fcb35f8b19926dfd62f481c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0941f556b7f228517fcb35f8b19926dfd62f481c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0941f556b7f228517fcb35f8b19926dfd62f481c"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4f4161008916e64180705274af7c689c11dffafb",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
        "patch": "@@ -26,9 +26,9 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.13.0**):\n * [`BIP 125`](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki): Opt-in full replace-by-fee signaling honoured in mempool and mining as of **v0.12.0** ([PR 6871](https://github.com/bitcoin/bitcoin/pull/6871)).\n * [`BIP 130`](https://github.com/bitcoin/bips/blob/master/bip-0130.mediawiki): direct headers announcement is negotiated with peer versions `>=70012` as of **v0.12.0** ([PR 6494](https://github.com/bitcoin/bitcoin/pull/6494)).\n * [`BIP 133`](https://github.com/bitcoin/bips/blob/master/bip-0133.mediawiki): feefilter messages are respected and sent for peer versions `>=70013` as of **v0.13.0** ([PR 7542](https://github.com/bitcoin/bitcoin/pull/7542)).\n-* [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n-* [`BIP 143`](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki): Transaction Signature Verification for Version 0 Witness Program as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n+* [`BIP 141`](https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki): Segregated Witness (Consensus Layer) as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)), and defined for mainnet as of **v0.13.1** ([PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n+* [`BIP 143`](https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki): Transaction Signature Verification for Version 0 Witness Program as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)) and defined for mainnet as of **v0.13.1** ([PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 144`](https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki): Segregated Witness as of **0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n * [`BIP 145`](https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki): getblocktemplate updates for Segregated Witness as of **v0.13.0** ([PR 8149](https://github.com/bitcoin/bitcoin/pull/8149)).\n-* [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636)).\n+* [`BIP 147`](https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki): NULLDUMMY softfork as of **v0.13.1** ([PR 8636](https://github.com/bitcoin/bitcoin/pull/8636) and [PR 8937](https://github.com/bitcoin/bitcoin/pull/8937)).\n * [`BIP 152`](https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki): Compact block transfer and related optimizations are used as of **v0.13.0** ([PR 8068](https://github.com/bitcoin/bitcoin/pull/8068))."
      }
    ]
  },
  {
    "sha": "504c72ad346a1b619f1fc58d0edce91ec955a67d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDRjNzJhZDM0NmExYjYxOWYxZmM1OGQwZWRjZTkxZWM5NTVhNjdk",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-17T15:25:25Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-17T17:33:25Z"
      },
      "message": "Comment that most dnsseeds only support some service bits combos",
      "tree": {
        "sha": "f976b9a02f6b3521403d414e74b434cb4a0771f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f976b9a02f6b3521403d414e74b434cb4a0771f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/504c72ad346a1b619f1fc58d0edce91ec955a67d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504c72ad346a1b619f1fc58d0edce91ec955a67d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/504c72ad346a1b619f1fc58d0edce91ec955a67d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504c72ad346a1b619f1fc58d0edce91ec955a67d/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8670110b9a1144ddf504757def8dbaecc88501dc",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/504c72ad346a1b619f1fc58d0edce91ec955a67d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/504c72ad346a1b619f1fc58d0edce91ec955a67d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=504c72ad346a1b619f1fc58d0edce91ec955a67d",
        "patch": "@@ -113,12 +113,13 @@ class CMainParams : public CChainParams {\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille\n+        // Note that of those with the service bits flag, most only support a subset of possible options\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\")); // Matt Corallo\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\")); // Christian Decker\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);"
      },
      {
        "sha": "5f9942c9dc0ef676169257b43f2a9c7f1c5dcfce",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/504c72ad346a1b619f1fc58d0edce91ec955a67d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/504c72ad346a1b619f1fc58d0edce91ec955a67d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=504c72ad346a1b619f1fc58d0edce91ec955a67d",
        "patch": "@@ -1454,6 +1454,7 @@ static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredSe\n         return data.host;\n     }\n \n+    // See chainparams.cpp, most dnsseeds only support one or two possible servicebits hostnames\n     return strprintf(\"x%x.%s\", *requiredServiceBits, data.host);\n }\n "
      }
    ]
  },
  {
    "sha": "ffb4713920205db39bfd219b6162986a52ddf32b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZmI0NzEzOTIwMjA1ZGIzOWJmZDIxOWI2MTYyOTg2YTUyZGRmMzJi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-17T15:25:52Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-17T17:33:52Z"
      },
      "message": "Add x9 service bit support to dnsseed.bluematt.me",
      "tree": {
        "sha": "0e3d2129c8bc2c8129a8cb66286890a03c6329d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e3d2129c8bc2c8129a8cb66286890a03c6329d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ffb4713920205db39bfd219b6162986a52ddf32b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb4713920205db39bfd219b6162986a52ddf32b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ffb4713920205db39bfd219b6162986a52ddf32b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb4713920205db39bfd219b6162986a52ddf32b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "504c72ad346a1b619f1fc58d0edce91ec955a67d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/504c72ad346a1b619f1fc58d0edce91ec955a67d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/504c72ad346a1b619f1fc58d0edce91ec955a67d"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fb7097cd4d59a922e0f17c21adac370042d35194",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ffb4713920205db39bfd219b6162986a52ddf32b/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ffb4713920205db39bfd219b6162986a52ddf32b/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=ffb4713920205db39bfd219b6162986a52ddf32b",
        "patch": "@@ -115,7 +115,7 @@ class CMainParams : public CChainParams {\n \n         // Note that of those with the service bits flag, most only support a subset of possible options\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n-        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\")); // Matt Corallo\n+        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n         vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\")); // Christian Decker\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik"
      }
    ]
  },
  {
    "sha": "2449e12681ab549695f143d9b3ad2c24be03a78d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNDQ5ZTEyNjgxYWI1NDk2OTVmMTQzZDliM2FkMmMyNGJlMDNhNzhk",
    "commit": {
      "author": {
        "name": "Christian Decker",
        "email": "decker.christian@gmail.com",
        "date": "2016-10-17T17:27:23Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-17T17:33:53Z"
      },
      "message": "My DNS seed supports filtering\n\nCurrently supports filtering by any combination of the 4 least\nsignificant bits.",
      "tree": {
        "sha": "8e7d11a20934369676fc9b6bac2fee68b2a6c7d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e7d11a20934369676fc9b6bac2fee68b2a6c7d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2449e12681ab549695f143d9b3ad2c24be03a78d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2449e12681ab549695f143d9b3ad2c24be03a78d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2449e12681ab549695f143d9b3ad2c24be03a78d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2449e12681ab549695f143d9b3ad2c24be03a78d/comments",
    "author": {
      "login": "cdecker",
      "id": 120117,
      "node_id": "MDQ6VXNlcjEyMDExNw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/cdecker",
      "html_url": "https://github.com/cdecker",
      "followers_url": "https://api.github.com/users/cdecker/followers",
      "following_url": "https://api.github.com/users/cdecker/following{/other_user}",
      "gists_url": "https://api.github.com/users/cdecker/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/cdecker/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
      "organizations_url": "https://api.github.com/users/cdecker/orgs",
      "repos_url": "https://api.github.com/users/cdecker/repos",
      "events_url": "https://api.github.com/users/cdecker/events{/privacy}",
      "received_events_url": "https://api.github.com/users/cdecker/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffb4713920205db39bfd219b6162986a52ddf32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffb4713920205db39bfd219b6162986a52ddf32b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffb4713920205db39bfd219b6162986a52ddf32b"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "7279570855e448da55de277e518d942e95d242c6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2449e12681ab549695f143d9b3ad2c24be03a78d/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2449e12681ab549695f143d9b3ad2c24be03a78d/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=2449e12681ab549695f143d9b3ad2c24be03a78d",
        "patch": "@@ -117,7 +117,7 @@ class CMainParams : public CChainParams {\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n         vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n-        vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\")); // Christian Decker\n+        vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik\n         vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n "
      }
    ]
  },
  {
    "sha": "763828df499f67c1c9d669d3223bd0636ed2b185",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NjM4MjhkZjQ5OWY2N2MxYzlkNjY5ZDMyMjNiZDA2MzZlZDJiMTg1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T17:35:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-17T17:37:36Z"
      },
      "message": "Merge #8940: Add x9 service bit support to dnsseed.bluematt.me\n\n2449e12 My DNS seed supports filtering (Christian Decker)\nffb4713 Add x9 service bit support to dnsseed.bluematt.me (Matt Corallo)\n504c72a Comment that most dnsseeds only support some service bits combos (Matt Corallo)",
      "tree": {
        "sha": "8e7d11a20934369676fc9b6bac2fee68b2a6c7d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e7d11a20934369676fc9b6bac2fee68b2a6c7d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/763828df499f67c1c9d669d3223bd0636ed2b185",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBQxgAAoJEHSBCwEjRsmmM8oH/RS8lVZQSAdwNY+U6wabFy1p\n75WvX58y3JKtn3F2q9ozh/PrmvThBQ8gb2IOvGtGlTolmn31TD/ZXuR0C2++bgzj\nrWr2nMO2g4XmIgj4EdbxHrRHlYpFKOF8tv+r+dygtVXPYpQuuoclO56lcKLooO9t\ny7OmSD4GzkSMl3bhGF9CKgrVnzBNcrtyQLcy6fAM53jUsJiCiq43qj7YT67rCxyu\n8M3N9rIZNcs8wEDLepS2kF1KQCmVDpPUo/mOGMEB/ppbCnjPExaDKuXL8MmpmZfi\nto5re8Rfc6xB42/2iobmRxy5F6HouNZAHKmjZLQJQn4jmnBSpSEhTF35lel63Cw=\n=beB+\n-----END PGP SIGNATURE-----",
        "payload": "tree 8e7d11a20934369676fc9b6bac2fee68b2a6c7d5\nparent ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50\nparent 2449e12681ab549695f143d9b3ad2c24be03a78d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476725745 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476725856 +0200\n\nMerge #8940: Add x9 service bit support to dnsseed.bluematt.me\n\n2449e12 My DNS seed supports filtering (Christian Decker)\nffb4713 Add x9 service bit support to dnsseed.bluematt.me (Matt Corallo)\n504c72a Comment that most dnsseeds only support some service bits combos (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763828df499f67c1c9d669d3223bd0636ed2b185",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/763828df499f67c1c9d669d3223bd0636ed2b185",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763828df499f67c1c9d669d3223bd0636ed2b185/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef3402d9a8cb4b2c8da3bd2b19da3faa7a439b50"
      },
      {
        "sha": "2449e12681ab549695f143d9b3ad2c24be03a78d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2449e12681ab549695f143d9b3ad2c24be03a78d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2449e12681ab549695f143d9b3ad2c24be03a78d"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "7279570855e448da55de277e518d942e95d242c6",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/763828df499f67c1c9d669d3223bd0636ed2b185/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/763828df499f67c1c9d669d3223bd0636ed2b185/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=763828df499f67c1c9d669d3223bd0636ed2b185",
        "patch": "@@ -113,12 +113,13 @@ class CMainParams : public CChainParams {\n         assert(consensus.hashGenesisBlock == uint256S(\"0x000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f\"));\n         assert(genesis.hashMerkleRoot == uint256S(\"0x4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b\"));\n \n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille\n-        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\")); // Matt Corallo\n+        // Note that of those with the service bits flag, most only support a subset of possible options\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.sipa.be\", \"seed.bitcoin.sipa.be\", true)); // Pieter Wuille, only supports x1, x5, x9, and xd\n+        vSeeds.push_back(CDNSSeedData(\"bluematt.me\", \"dnsseed.bluematt.me\", true)); // Matt Corallo, only supports x9\n         vSeeds.push_back(CDNSSeedData(\"dashjr.org\", \"dnsseed.bitcoin.dashjr.org\")); // Luke Dashjr\n-        vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\")); // Christian Decker\n+        vSeeds.push_back(CDNSSeedData(\"bitcoinstats.com\", \"seed.bitcoinstats.com\", true)); // Christian Decker, supports x1 - xf\n         vSeeds.push_back(CDNSSeedData(\"xf2.org\", \"bitseed.xf2.org\")); // Jeff Garzik\n-        vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli\n+        vSeeds.push_back(CDNSSeedData(\"bitcoin.jonasschnelli.ch\", \"seed.bitcoin.jonasschnelli.ch\", true)); // Jonas Schnelli, only supports x1, x5, x9, and xd\n \n         base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);\n         base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);"
      },
      {
        "sha": "5f9942c9dc0ef676169257b43f2a9c7f1c5dcfce",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/763828df499f67c1c9d669d3223bd0636ed2b185/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/763828df499f67c1c9d669d3223bd0636ed2b185/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=763828df499f67c1c9d669d3223bd0636ed2b185",
        "patch": "@@ -1454,6 +1454,7 @@ static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredSe\n         return data.host;\n     }\n \n+    // See chainparams.cpp, most dnsseeds only support one or two possible servicebits hostnames\n     return strprintf(\"x%x.%s\", *requiredServiceBits, data.host);\n }\n "
      }
    ]
  },
  {
    "sha": "1ab21cf344ed0547de5ae679b7e479cb4b1a923b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWIyMWNmMzQ0ZWQwNTQ3ZGU1YWU2NzliN2U0NzljYjRiMWE5MjNi",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-17T20:29:03Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-17T20:29:03Z"
      },
      "message": "Remove bogus assert on number of oubound connections.\n\nThis value can be significantly higher if the users uses addnode",
      "tree": {
        "sha": "b30c847e7b03e332b2803085bed641f9b0538d0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b30c847e7b03e332b2803085bed641f9b0538d0e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ab21cf344ed0547de5ae679b7e479cb4b1a923b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ab21cf344ed0547de5ae679b7e479cb4b1a923b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ab21cf344ed0547de5ae679b7e479cb4b1a923b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ab21cf344ed0547de5ae679b7e479cb4b1a923b/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763828df499f67c1c9d669d3223bd0636ed2b185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763828df499f67c1c9d669d3223bd0636ed2b185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763828df499f67c1c9d669d3223bd0636ed2b185"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cdd3076a2fc795b24cb382992ef5bd8e2f3ecc3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ab21cf344ed0547de5ae679b7e479cb4b1a923b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ab21cf344ed0547de5ae679b7e479cb4b1a923b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1ab21cf344ed0547de5ae679b7e479cb4b1a923b",
        "patch": "@@ -1622,7 +1622,6 @@ void CConnman::ThreadOpenConnections()\n                 }\n             }\n         }\n-        assert(nOutbound <= (nMaxOutbound + nMaxFeeler));\n \n         // Feeler Connections\n         //"
      }
    ]
  },
  {
    "sha": "3f7581d9a4f9cb7dc5499fc85528e959da6b0efc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjc1ODFkOWE0ZjljYjdkYzU0OTlmYzg1NTI4ZTk1OWRhNmIwZWZj",
    "commit": {
      "author": {
        "name": "Micha",
        "email": "Michagogo@users.noreply.github.com",
        "date": "2016-10-17T22:07:53Z"
      },
      "committer": {
        "name": "Micha",
        "email": "Michagogo@users.noreply.github.com",
        "date": "2016-10-17T22:07:53Z"
      },
      "message": "[TRIVIAL] reorder Windows gitian build order to match Linux\n\nThe consistency is helpful for gauging Gitian build progress. Right now it's necessary to remember which platform builds in which order, which can be confusing if you're attempting to get a quick idea of how far along your builds are.",
      "tree": {
        "sha": "c515fb70d252004e0aa313e8402a2075aa1364c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c515fb70d252004e0aa313e8402a2075aa1364c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABAgAGBQJYBUw0AAoJEILFwAlijs8MJwgH/1n2NkDe84zIEl0hmIl8ftTt\n5kTG9QeqcbOR7kJcQ+B2YfI1cjk9kL3JLw8Q7oUabtCZWVuTZQ4AKprxlrmzytMc\ngwT+8CcJHrRaKQg8JtSlJp/+t/kkg0iaEtYJZopc66WZq7REt0pI/LGq/psMWnxt\ndfU54x1InCcbbOGHWEwXv9sh3bbHWrzAZggrQTVpeIDNdeQutkqOEYIwoEk7rHP8\n/LaygX/WaR1st8VbB0Ok6Exmu1pBpuCF1KasbawfwHgtqABQ/6hJ4Vb3nQXoAHue\nbllqIFw89S1YqoOCLZWWCapb1VUnpc49jgvo53onXtOL8xIGM+M+MGKBmy6Nmrk=\n=mN3q\n-----END PGP SIGNATURE-----",
        "payload": "tree c515fb70d252004e0aa313e8402a2075aa1364c7\nparent 763828df499f67c1c9d669d3223bd0636ed2b185\nauthor Micha <Michagogo@users.noreply.github.com> 1476742073 +0300\ncommitter Micha <Michagogo@users.noreply.github.com> 1476742073 +0300\n\n[TRIVIAL] reorder Windows gitian build order to match Linux\n\nThe consistency is helpful for gauging Gitian build progress. Right now it's necessary to remember which platform builds in which order, which can be confusing if you're attempting to get a quick idea of how far along your builds are.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc/comments",
    "author": {
      "login": "Michagogo",
      "id": 2559390,
      "node_id": "MDQ6VXNlcjI1NTkzOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2559390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Michagogo",
      "html_url": "https://github.com/Michagogo",
      "followers_url": "https://api.github.com/users/Michagogo/followers",
      "following_url": "https://api.github.com/users/Michagogo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Michagogo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Michagogo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Michagogo/subscriptions",
      "organizations_url": "https://api.github.com/users/Michagogo/orgs",
      "repos_url": "https://api.github.com/users/Michagogo/repos",
      "events_url": "https://api.github.com/users/Michagogo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Michagogo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "Michagogo",
      "id": 2559390,
      "node_id": "MDQ6VXNlcjI1NTkzOTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2559390?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Michagogo",
      "html_url": "https://github.com/Michagogo",
      "followers_url": "https://api.github.com/users/Michagogo/followers",
      "following_url": "https://api.github.com/users/Michagogo/following{/other_user}",
      "gists_url": "https://api.github.com/users/Michagogo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Michagogo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Michagogo/subscriptions",
      "organizations_url": "https://api.github.com/users/Michagogo/orgs",
      "repos_url": "https://api.github.com/users/Michagogo/repos",
      "events_url": "https://api.github.com/users/Michagogo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Michagogo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763828df499f67c1c9d669d3223bd0636ed2b185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763828df499f67c1c9d669d3223bd0636ed2b185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763828df499f67c1c9d669d3223bd0636ed2b185"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fe01b5b95726a04e0277af7fc8d15c6c93d89110",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=3f7581d9a4f9cb7dc5499fc85528e959da6b0efc",
        "patch": "@@ -27,7 +27,7 @@ remotes:\n files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n+  HOSTS=\"i686-w64-mingw32 x86_64-w64-mingw32\"\n   CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip objcopy\"\n   FAKETIME_PROGS=\"date makensis zip\""
      }
    ]
  },
  {
    "sha": "9583477288072e203541b747fcffe8d50cfefb8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTgzNDc3Mjg4MDcyZTIwMzU0MWI3NDdmY2ZmZThkNTBjZmVmYjhk",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-10-17T23:08:52Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-10-17T23:08:52Z"
      },
      "message": "Be more aggressive in connecting to peers with relevant services.\n\nOnly allow skipping relevant services until there are four outbound\n connections up.\n\nThis avoids quickly filling up with peers lacking the relevant\n services when addrman has few or none of them.",
      "tree": {
        "sha": "6ef99e228311d612669e8ad7dffc5e84eb8d60b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6ef99e228311d612669e8ad7dffc5e84eb8d60b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9583477288072e203541b747fcffe8d50cfefb8d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9583477288072e203541b747fcffe8d50cfefb8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9583477288072e203541b747fcffe8d50cfefb8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9583477288072e203541b747fcffe8d50cfefb8d/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763828df499f67c1c9d669d3223bd0636ed2b185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763828df499f67c1c9d669d3223bd0636ed2b185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763828df499f67c1c9d669d3223bd0636ed2b185"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "de8f8184a28c9e333e7386204bf507f47e71661e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9583477288072e203541b747fcffe8d50cfefb8d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9583477288072e203541b747fcffe8d50cfefb8d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=9583477288072e203541b747fcffe8d50cfefb8d",
        "patch": "@@ -1675,8 +1675,8 @@ void CConnman::ThreadOpenConnections()\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n-            // only consider nodes missing relevant services after 40 failed attempts\n-            if ((addr.nServices & nRelevantServices) != nRelevantServices && nTries < 40)\n+            // only consider nodes missing relevant services after 40 failed attempts and only if less than half the outbound are up.\n+            if ((addr.nServices & nRelevantServices) != nRelevantServices && (nTries < 40 || nOutbound >= (nMaxOutbound >> 1)))\n                 continue;\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already"
      }
    ]
  },
  {
    "sha": "a1919adab0e72e8b465f723099788d9cc00363da",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMTkxOWFkYWIwZTcyZThiNDY1ZjcyMzA5OTc4OGQ5Y2MwMDM2M2Rh",
    "commit": {
      "author": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-09-12T08:54:05Z"
      },
      "committer": {
        "name": "R E Broadley",
        "email": "rebroad+github@gmail.com",
        "date": "2016-10-18T00:17:09Z"
      },
      "message": "Report NodeId in misbehaving debug",
      "tree": {
        "sha": "6fcf90e657ca846d57f0c4ba4e7bc274ffabfc4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fcf90e657ca846d57f0c4ba4e7bc274ffabfc4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1919adab0e72e8b465f723099788d9cc00363da",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1919adab0e72e8b465f723099788d9cc00363da",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1919adab0e72e8b465f723099788d9cc00363da",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1919adab0e72e8b465f723099788d9cc00363da/comments",
    "author": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "rebroad",
      "id": 1530283,
      "node_id": "MDQ6VXNlcjE1MzAyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1530283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/rebroad",
      "html_url": "https://github.com/rebroad",
      "followers_url": "https://api.github.com/users/rebroad/followers",
      "following_url": "https://api.github.com/users/rebroad/following{/other_user}",
      "gists_url": "https://api.github.com/users/rebroad/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/rebroad/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/rebroad/subscriptions",
      "organizations_url": "https://api.github.com/users/rebroad/orgs",
      "repos_url": "https://api.github.com/users/rebroad/repos",
      "events_url": "https://api.github.com/users/rebroad/events{/privacy}",
      "received_events_url": "https://api.github.com/users/rebroad/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "49c5910372899a365fd6b57b9e227518e24541fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/49c5910372899a365fd6b57b9e227518e24541fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/49c5910372899a365fd6b57b9e227518e24541fa"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1e59f80e13f5985c0e54123ecc94775ac38ee2c0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1919adab0e72e8b465f723099788d9cc00363da/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1919adab0e72e8b465f723099788d9cc00363da/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=a1919adab0e72e8b465f723099788d9cc00363da",
        "patch": "@@ -1846,10 +1846,10 @@ void Misbehaving(NodeId pnode, int howmuch)\n     int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrintf(\"%s: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrintf(\"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n         state->fShouldBan = true;\n     } else\n-        LogPrintf(\"%s: %s (%d -> %d)\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrintf(\"%s: %s peer=%d (%d -> %d)\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n }\n \n void static InvalidChainFound(CBlockIndex* pindexNew)"
      }
    ]
  },
  {
    "sha": "47ace4240a4ea587fd75a41f0e0163df869c60b5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0N2FjZTQyNDBhNGVhNTg3ZmQ3NWE0MWYwZTAxNjNkZjg2OWM2MGI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T08:37:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T08:37:17Z"
      },
      "message": "Merge #8918: Qt: Add \"Copy URI\" to payment request context menu\n\n21f5a63 Qt: Add \"Copy URI\" to payment request context menu (Luke Dashjr)",
      "tree": {
        "sha": "5ea2130d45f09522480a8a1c9b56d564fa50943a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5ea2130d45f09522480a8a1c9b56d564fa50943a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/47ace4240a4ea587fd75a41f0e0163df869c60b5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBd89AAoJEHSBCwEjRsmm0vMH/0AsCkMskFdwonKU9jL5abc3\nuX0p8Kzs6WDJpbgfe0exYo27Zb1v0CaJNxCciMIXjXErxjTdEjSWEdLr5vrM9p6W\n8tQA6DMg/r7YzOyXio3A6mlqKKpo5Tyr+8lATms7q1xjTyqGILuf9kU3kVkNBxQu\ntYOHInBF1zThpYzyCRAgHX7KSd4HLQl6GfdTqZgB+zqMVp6twTearln2ShxRLOAJ\nAlHqTcL73hG1mjckJqtcnSOdeEsOdcbGNbhmuiyY8j7eqc56ZZlgABWLkuOMeSYo\nsniJa5tpyfNsvwPwWYIQQBZg+5y5FJzTd+NlBrHfO+hv7VRpZySJoFWbU5HpYR4=\n=mknO\n-----END PGP SIGNATURE-----",
        "payload": "tree 5ea2130d45f09522480a8a1c9b56d564fa50943a\nparent 763828df499f67c1c9d669d3223bd0636ed2b185\nparent 21f5a6364d5bad738d51e75ff96c8f8b88557d11\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476779823 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476779837 +0200\n\nMerge #8918: Qt: Add \"Copy URI\" to payment request context menu\n\n21f5a63 Qt: Add \"Copy URI\" to payment request context menu (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ace4240a4ea587fd75a41f0e0163df869c60b5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/47ace4240a4ea587fd75a41f0e0163df869c60b5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ace4240a4ea587fd75a41f0e0163df869c60b5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763828df499f67c1c9d669d3223bd0636ed2b185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763828df499f67c1c9d669d3223bd0636ed2b185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763828df499f67c1c9d669d3223bd0636ed2b185"
      },
      {
        "sha": "21f5a6364d5bad738d51e75ff96c8f8b88557d11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21f5a6364d5bad738d51e75ff96c8f8b88557d11",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21f5a6364d5bad738d51e75ff96c8f8b88557d11"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 33,
      "deletions": 8
    },
    "files": [
      {
        "sha": "b50cad4975a8190e700212b98f209089e3c5d4b5",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 8,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ace4240a4ea587fd75a41f0e0163df869c60b5/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ace4240a4ea587fd75a41f0e0163df869c60b5/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=47ace4240a4ea587fd75a41f0e0163df869c60b5",
        "patch": "@@ -43,18 +43,21 @@ ReceiveCoinsDialog::ReceiveCoinsDialog(const PlatformStyle *_platformStyle, QWid\n     }\n \n     // context menu actions\n+    QAction *copyURIAction = new QAction(tr(\"Copy URI\"), this);\n     QAction *copyLabelAction = new QAction(tr(\"Copy label\"), this);\n     QAction *copyMessageAction = new QAction(tr(\"Copy message\"), this);\n     QAction *copyAmountAction = new QAction(tr(\"Copy amount\"), this);\n \n     // context menu\n     contextMenu = new QMenu();\n+    contextMenu->addAction(copyURIAction);\n     contextMenu->addAction(copyLabelAction);\n     contextMenu->addAction(copyMessageAction);\n     contextMenu->addAction(copyAmountAction);\n \n     // context menu signals\n     connect(ui->recentRequestsView, SIGNAL(customContextMenuRequested(QPoint)), this, SLOT(showMenu(QPoint)));\n+    connect(copyURIAction, SIGNAL(triggered()), this, SLOT(copyURI()));\n     connect(copyLabelAction, SIGNAL(triggered()), this, SLOT(copyLabel()));\n     connect(copyMessageAction, SIGNAL(triggered()), this, SLOT(copyMessage()));\n     connect(copyAmountAction, SIGNAL(triggered()), this, SLOT(copyAmount()));\n@@ -228,30 +231,50 @@ void ReceiveCoinsDialog::keyPressEvent(QKeyEvent *event)\n     this->QDialog::keyPressEvent(event);\n }\n \n-// copy column of selected row to clipboard\n-void ReceiveCoinsDialog::copyColumnToClipboard(int column)\n+QModelIndex ReceiveCoinsDialog::selectedRow()\n {\n     if(!model || !model->getRecentRequestsTableModel() || !ui->recentRequestsView->selectionModel())\n-        return;\n+        return QModelIndex();\n     QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n     if(selection.empty())\n-        return;\n+        return QModelIndex();\n     // correct for selection mode ContiguousSelection\n     QModelIndex firstIndex = selection.at(0);\n+    return firstIndex;\n+}\n+\n+// copy column of selected row to clipboard\n+void ReceiveCoinsDialog::copyColumnToClipboard(int column)\n+{\n+    QModelIndex firstIndex = selectedRow();\n+    if (!firstIndex.isValid()) {\n+        return;\n+    }\n     GUIUtil::setClipboard(model->getRecentRequestsTableModel()->data(firstIndex.child(firstIndex.row(), column), Qt::EditRole).toString());\n }\n \n // context menu\n void ReceiveCoinsDialog::showMenu(const QPoint &point)\n {\n-    if(!model || !model->getRecentRequestsTableModel() || !ui->recentRequestsView->selectionModel())\n-        return;\n-    QModelIndexList selection = ui->recentRequestsView->selectionModel()->selectedRows();\n-    if(selection.empty())\n+    if (!selectedRow().isValid()) {\n         return;\n+    }\n     contextMenu->exec(QCursor::pos());\n }\n \n+// context menu action: copy URI\n+void ReceiveCoinsDialog::copyURI()\n+{\n+    QModelIndex sel = selectedRow();\n+    if (!sel.isValid()) {\n+        return;\n+    }\n+\n+    const RecentRequestsTableModel * const submodel = model->getRecentRequestsTableModel();\n+    const QString uri = GUIUtil::formatBitcoinURI(submodel->entry(sel.row()).recipient);\n+    GUIUtil::setClipboard(uri);\n+}\n+\n // context menu action: copy label\n void ReceiveCoinsDialog::copyLabel()\n {"
      },
      {
        "sha": "d137f1616e7963562ef56bb8f404a3eac1e52136",
        "filename": "src/qt/receivecoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/47ace4240a4ea587fd75a41f0e0163df869c60b5/src/qt/receivecoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/47ace4240a4ea587fd75a41f0e0163df869c60b5/src/qt/receivecoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.h?ref=47ace4240a4ea587fd75a41f0e0163df869c60b5",
        "patch": "@@ -60,6 +60,7 @@ public Q_SLOTS:\n     QMenu *contextMenu;\n     const PlatformStyle *platformStyle;\n \n+    QModelIndex selectedRow();\n     void copyColumnToClipboard(int column);\n     virtual void resizeEvent(QResizeEvent *event);\n \n@@ -71,6 +72,7 @@ private Q_SLOTS:\n     void recentRequestsView_selectionChanged(const QItemSelection &selected, const QItemSelection &deselected);\n     void updateDisplayUnit();\n     void showMenu(const QPoint &point);\n+    void copyURI();\n     void copyLabel();\n     void copyMessage();\n     void copyAmount();"
      }
    ]
  },
  {
    "sha": "cd761fb85a24e07d69d5823418f9e8a506ce5382",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZDc2MWZiODVhMjRlMDdkNjlkNTgyMzQxOGY5ZThhNTA2Y2U1Mzgy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T08:43:45Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T08:43:52Z"
      },
      "message": "Merge #8944: Remove bogus assert on number of oubound connections.\n\n1ab21cf Remove bogus assert on number of oubound connections. (Matt Corallo)",
      "tree": {
        "sha": "ec3afa067d3fbae0212c7eddbff3c67026b63203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec3afa067d3fbae0212c7eddbff3c67026b63203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cd761fb85a24e07d69d5823418f9e8a506ce5382",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBeDIAAoJEHSBCwEjRsmmuigH/2pyULnlW642VoSU+38TpDv0\nb7PVwOXG+/hksukePkxzDinAqYwlE8ir79JdjYt8eO0lJzuYxcpw2/Of7z2XI8/r\nIXNHg29QouWYcPyD8BK8MyE+Lv1kwUdkLwyUCvrRCJ48B8TolKimgEBZ8vSUwqQS\n6ewLH2K9bG+Jnxg9X8NJzetmgRKXinWLJj4qHk8J75FaxOgdSv5HMcfoc6G3+3an\nYl+/50s4ftnCjQKMniTckx/pAVR69ngANYanY8XmGvNZE0UcQRsNmI8S+LtJjJSu\nJGLfmD4DPMoi7PNoLpLw8stOpydo1esRtJl2KNCWv7FeeH+rL0lWc6CgIKj9Zvk=\n=JLcK\n-----END PGP SIGNATURE-----",
        "payload": "tree ec3afa067d3fbae0212c7eddbff3c67026b63203\nparent 47ace4240a4ea587fd75a41f0e0163df869c60b5\nparent 1ab21cf344ed0547de5ae679b7e479cb4b1a923b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476780225 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476780232 +0200\n\nMerge #8944: Remove bogus assert on number of oubound connections.\n\n1ab21cf Remove bogus assert on number of oubound connections. (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd761fb85a24e07d69d5823418f9e8a506ce5382",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cd761fb85a24e07d69d5823418f9e8a506ce5382",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd761fb85a24e07d69d5823418f9e8a506ce5382/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "47ace4240a4ea587fd75a41f0e0163df869c60b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/47ace4240a4ea587fd75a41f0e0163df869c60b5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/47ace4240a4ea587fd75a41f0e0163df869c60b5"
      },
      {
        "sha": "1ab21cf344ed0547de5ae679b7e479cb4b1a923b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ab21cf344ed0547de5ae679b7e479cb4b1a923b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ab21cf344ed0547de5ae679b7e479cb4b1a923b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "cdd3076a2fc795b24cb382992ef5bd8e2f3ecc3a",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cd761fb85a24e07d69d5823418f9e8a506ce5382/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cd761fb85a24e07d69d5823418f9e8a506ce5382/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=cd761fb85a24e07d69d5823418f9e8a506ce5382",
        "patch": "@@ -1622,7 +1622,6 @@ void CConnman::ThreadOpenConnections()\n                 }\n             }\n         }\n-        assert(nOutbound <= (nMaxOutbound + nMaxFeeler));\n \n         // Feeler Connections\n         //"
      }
    ]
  },
  {
    "sha": "614d522c3e4468262406f767f8b31da4ac5a0878",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MTRkNTIyYzNlNDQ2ODI2MjQwNmY3NjdmOGIzMWRhNGFjNWEwODc4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T08:55:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T09:45:07Z"
      },
      "message": "Merge #8932: Allow bitcoin-tx to create v2 transactions\n\nb0aea80 Sync bitcoin-tx with tx version policy (BtcDrak)",
      "tree": {
        "sha": "7b65c30331ca51e17bc55f7c90f99d9288cdf05a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7b65c30331ca51e17bc55f7c90f99d9288cdf05a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/614d522c3e4468262406f767f8b31da4ac5a0878",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBe8jAAoJEHSBCwEjRsmmxyYIAKGtrAshCRlCgBqzf9RqPkMm\nb8oOdardkFaVLnRL5mhTluaswbIYD+KmCtQigTNPoH5ymNqIUufWzlfkQd87oUvX\npL/38/F3MYJAZJgIzYMM3EQrQZVSfjjnC5eCLBi7p1O9lHCDcCu6669uiKWzpmGA\na15uaN9sW7nqQQYBzste8aD708JhuV2Ij1a+5B/Ts7Yll3ZrlcgbkHLrc1pfwhxn\nEi23xpitwfcl9unANoDxsw6m9kG5V0LHi18UH7yGK6X/ZKf42E5LlsuqVUKPq54c\nAuTuBveZ/0GIHCEmZrQvW+zMG57YG+SE1MTEVjP43zUzT/KJDt5OnoXmOJn5MEQ=\n=rLH8\n-----END PGP SIGNATURE-----",
        "payload": "tree 7b65c30331ca51e17bc55f7c90f99d9288cdf05a\nparent cd761fb85a24e07d69d5823418f9e8a506ce5382\nparent b0aea8057921f0ed2288cf07048f652c7d6d9cf3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476780951 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476783907 +0200\n\nMerge #8932: Allow bitcoin-tx to create v2 transactions\n\nb0aea80 Sync bitcoin-tx with tx version policy (BtcDrak)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614d522c3e4468262406f767f8b31da4ac5a0878",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/614d522c3e4468262406f767f8b31da4ac5a0878",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614d522c3e4468262406f767f8b31da4ac5a0878/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd761fb85a24e07d69d5823418f9e8a506ce5382",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd761fb85a24e07d69d5823418f9e8a506ce5382",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd761fb85a24e07d69d5823418f9e8a506ce5382"
      },
      {
        "sha": "b0aea8057921f0ed2288cf07048f652c7d6d9cf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b0aea8057921f0ed2288cf07048f652c7d6d9cf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b0aea8057921f0ed2288cf07048f652c7d6d9cf3"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e09afd632e3ff587312b8cdc7b4f34217a4d35f4",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/614d522c3e4468262406f767f8b31da4ac5a0878/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/614d522c3e4468262406f767f8b31da4ac5a0878/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=614d522c3e4468262406f767f8b31da4ac5a0878",
        "patch": "@@ -164,7 +164,7 @@ static void RegisterLoad(const string& strInput)\n static void MutateTxVersion(CMutableTransaction& tx, const string& cmdVal)\n {\n     int64_t newVersion = atoi64(cmdVal);\n-    if (newVersion < 1 || newVersion > CTransaction::CURRENT_VERSION)\n+    if (newVersion < 1 || newVersion > CTransaction::MAX_STANDARD_VERSION)\n         throw runtime_error(\"Invalid TX version requested\");\n \n     tx.nVersion = (int) newVersion;"
      }
    ]
  },
  {
    "sha": "b26a7b5377f400760f49ba3aed468469ef27786e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjZhN2I1Mzc3ZjQwMDc2MGY0OWJhM2FlZDQ2ODQ2OWVmMjc3ODZl",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-13T22:57:18Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-18T11:17:38Z"
      },
      "message": "RPC: Chainparams: Remove Chainparams::fTestnetToBeDeprecatedFieldRPC",
      "tree": {
        "sha": "dbdc011ae0688c3a8e964c11c79c3500bd1708e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbdc011ae0688c3a8e964c11c79c3500bd1708e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b26a7b5377f400760f49ba3aed468469ef27786e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYBgTWAAoJEIhmwY6hyUSi3a4P/3GMUwqsqslob+Yau4nBx8JR\nFbRVBS4ZAQ9Le/nzkVUKkP6A1CEvxLwaCLsAj1tLC5mpiWZQ7G6naVgylQUVnUGO\nnpil5G/aIZpl/E9FyVCBzcd41/rKKtFMWXWboCeQ+3LnHNHzBo59sf166QLf33xO\nzFsEpYGkJKedOHObXaE9ZUqTZRAgHaug5Ap9NkgcGHNTdSLy9+Pm2BERD7mFWA5S\n4hsO5Qav2KmBq+q1TFG71XMJoycFHwIl638RjgEF+if2Fx5rL9/ZdTKowYHGyuDq\ngD3v5Hrr8ZohS7lwAabFq/k7z/K0Zb+mrGThrDYl8AOOS3MnMomb99QaNAqdITsK\nchCJ+n8q1gUH2B5deE+qvBAGdpOvDj50X4RTzxHrCUeXtuLth9Shb3sklzK1m5do\ngMjOO+MApxsC9wlWzU8ff0dT96qq2Qj1ATs3UFXjGbGapmj0A5/LIG9rOxIFd2WG\nzc5kclZ7RzHvj5MISy/42aVYWVQA6EEN0BVqu03ab9pF9hzIGJryR7AhCim8mvrw\nMCcHoemxl0N7kp7vRRn2hc+ROsLvzUIjcjZ45axEZccnAXfAQ3XtAapNF+XamXdD\nP16Egm0neaEZyiwOm4jMqmBs2Psav33WpSW4s32EF6qkWrCiNi0ZdvdoDpsLjRYr\nkKCudOV7f+A+0BP816Ci\n=hWf7\n-----END PGP SIGNATURE-----",
        "payload": "tree dbdc011ae0688c3a8e964c11c79c3500bd1708e3\nparent e2b8c394d61de1e153b9b39d99c45654774f00de\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476399438 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476789458 +0200\n\nRPC: Chainparams: Remove Chainparams::fTestnetToBeDeprecatedFieldRPC\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b26a7b5377f400760f49ba3aed468469ef27786e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b26a7b5377f400760f49ba3aed468469ef27786e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b26a7b5377f400760f49ba3aed468469ef27786e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2b8c394d61de1e153b9b39d99c45654774f00de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2b8c394d61de1e153b9b39d99c45654774f00de",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2b8c394d61de1e153b9b39d99c45654774f00de"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0463cb8a613e25f68a382c8854c8d1b9eb650fe7",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b26a7b5377f400760f49ba3aed468469ef27786e/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b26a7b5377f400760f49ba3aed468469ef27786e/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=b26a7b5377f400760f49ba3aed468469ef27786e",
        "patch": "@@ -65,6 +65,8 @@ contain invalid parameters.\n \n The first boolean argument to `getaddednodeinfo` has been removed. This is an incompatible change.\n \n+Call \"getmininginfo\" loses the \"testnet\" field in favor of the more generic \"chain\" (which has been present for years).\n+\n ### Configuration and command-line options\n \n ### Block and transaction handling"
      },
      {
        "sha": "5509f11b67e14e7917b553123a8210accf0c109c",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b26a7b5377f400760f49ba3aed468469ef27786e/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b26a7b5377f400760f49ba3aed468469ef27786e/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=b26a7b5377f400760f49ba3aed468469ef27786e",
        "patch": "@@ -132,7 +132,6 @@ class CMainParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n-        fTestnetToBeDeprecatedFieldRPC = false;\n \n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n@@ -223,7 +222,6 @@ class CTestNetParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n-        fTestnetToBeDeprecatedFieldRPC = true;\n \n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n@@ -285,7 +283,6 @@ class CRegTestParams : public CChainParams {\n         fDefaultConsistencyChecks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n-        fTestnetToBeDeprecatedFieldRPC = false;\n \n         checkpointData = (CCheckpointData){\n             boost::assign::map_list_of"
      },
      {
        "sha": "633fbd51203f12ff026119ab34878f8117bc0016",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b26a7b5377f400760f49ba3aed468469ef27786e/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b26a7b5377f400760f49ba3aed468469ef27786e/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=b26a7b5377f400760f49ba3aed468469ef27786e",
        "patch": "@@ -67,8 +67,6 @@ class CChainParams\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n-    /** In the future use NetworkIDString() for RPC fields */\n-    bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n     /** Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n@@ -91,7 +89,6 @@ class CChainParams\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n-    bool fTestnetToBeDeprecatedFieldRPC;\n     CCheckpointData checkpointData;\n };\n "
      },
      {
        "sha": "fa64ce8fad4b29bcd1d7b6f340e1a9c09e8fdd66",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b26a7b5377f400760f49ba3aed468469ef27786e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b26a7b5377f400760f49ba3aed468469ef27786e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b26a7b5377f400760f49ba3aed468469ef27786e",
        "patch": "@@ -230,7 +230,6 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n             \"  \\\"errors\\\": \\\"...\\\"            (string) Current errors\\n\"\n             \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n-            \"  \\\"testnet\\\": true|false      (boolean) If using testnet or not\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -250,7 +249,6 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n     return obj;\n }"
      },
      {
        "sha": "6bbb3925ddece8ed622b204085a8838ff20f9ed7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b26a7b5377f400760f49ba3aed468469ef27786e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b26a7b5377f400760f49ba3aed468469ef27786e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=b26a7b5377f400760f49ba3aed468469ef27786e",
        "patch": "@@ -93,7 +93,7 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n     obj.push_back(Pair(\"proxy\",         (proxy.IsValid() ? proxy.proxy.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       Params().TestnetToBeDeprecatedFieldRPC()));\n+    obj.push_back(Pair(\"testnet\",       Params().NetworkIDString() == CBaseChainParams::TESTNET));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));"
      }
    ]
  },
  {
    "sha": "dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZDA3YzZiMmNjOTBmNGM2MWNmN2I4NmEyY2MyMjFmNjI4ODk1MzI1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T11:31:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T11:31:59Z"
      },
      "message": "Merge #8921: RPC: Chainparams: Remove Chainparams::fTestnetToBeDeprecatedFieldRPC\n\nb26a7b5 RPC: Chainparams: Remove Chainparams::fTestnetToBeDeprecatedFieldRPC (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "0e38b7291b0898d8efd415a22e29b5f60cf88c9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e38b7291b0898d8efd415a22e29b5f60cf88c9f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBggvAAoJEHSBCwEjRsmm7ogIAJvodjKefgTQ2tpSfTRXCK7H\nVjTQLZfdT8mhFHn741L6qSvOlRuHus6EI3kpi6Y++u1uMqY73epAdWCgxmniWWn7\nUBsrg5RI0lqdJbt1uTeDRK1sHpKd9onOphTShGI6zyK0aT2mMBYeFjH+3v5Yxrjw\ngTA2lwmiWCYy3narp7Vdvg/4FfiSuj9n6DT5Sz6is9LLMgEcq6Mqy747Dmoj731F\nBqQakRp/Z/WXgCpi3qfe8zIvQq77cDcMyLsCP6OMREwhiMbK4Ctnf8oSspcRHDC7\nfvJ15ADlSASPRf+vJtGtpI90cU1CiefAEf4MIzsnp6zEeswzwunpSduZueeAkYg=\n=LPfW\n-----END PGP SIGNATURE-----",
        "payload": "tree 0e38b7291b0898d8efd415a22e29b5f60cf88c9f\nparent 614d522c3e4468262406f767f8b31da4ac5a0878\nparent b26a7b5377f400760f49ba3aed468469ef27786e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476790295 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476790319 +0200\n\nMerge #8921: RPC: Chainparams: Remove Chainparams::fTestnetToBeDeprecatedFieldRPC\n\nb26a7b5 RPC: Chainparams: Remove Chainparams::fTestnetToBeDeprecatedFieldRPC (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "614d522c3e4468262406f767f8b31da4ac5a0878",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/614d522c3e4468262406f767f8b31da4ac5a0878",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/614d522c3e4468262406f767f8b31da4ac5a0878"
      },
      {
        "sha": "b26a7b5377f400760f49ba3aed468469ef27786e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b26a7b5377f400760f49ba3aed468469ef27786e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b26a7b5377f400760f49ba3aed468469ef27786e"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "0463cb8a613e25f68a382c8854c8d1b9eb650fe7",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
        "patch": "@@ -65,6 +65,8 @@ contain invalid parameters.\n \n The first boolean argument to `getaddednodeinfo` has been removed. This is an incompatible change.\n \n+Call \"getmininginfo\" loses the \"testnet\" field in favor of the more generic \"chain\" (which has been present for years).\n+\n ### Configuration and command-line options\n \n ### Block and transaction handling"
      },
      {
        "sha": "5850016ae27858608a6112b42329d5fc27049d06",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
        "patch": "@@ -133,7 +133,6 @@ class CMainParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = true;\n         fMineBlocksOnDemand = false;\n-        fTestnetToBeDeprecatedFieldRPC = false;\n \n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n@@ -224,7 +223,6 @@ class CTestNetParams : public CChainParams {\n         fDefaultConsistencyChecks = false;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n-        fTestnetToBeDeprecatedFieldRPC = true;\n \n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n@@ -286,7 +284,6 @@ class CRegTestParams : public CChainParams {\n         fDefaultConsistencyChecks = true;\n         fRequireStandard = false;\n         fMineBlocksOnDemand = true;\n-        fTestnetToBeDeprecatedFieldRPC = false;\n \n         checkpointData = (CCheckpointData){\n             boost::assign::map_list_of"
      },
      {
        "sha": "633fbd51203f12ff026119ab34878f8117bc0016",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
        "patch": "@@ -67,8 +67,6 @@ class CChainParams\n     uint64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */\n     bool MineBlocksOnDemand() const { return fMineBlocksOnDemand; }\n-    /** In the future use NetworkIDString() for RPC fields */\n-    bool TestnetToBeDeprecatedFieldRPC() const { return fTestnetToBeDeprecatedFieldRPC; }\n     /** Return the BIP70 network string (main, test or regtest) */\n     std::string NetworkIDString() const { return strNetworkID; }\n     const std::vector<CDNSSeedData>& DNSSeeds() const { return vSeeds; }\n@@ -91,7 +89,6 @@ class CChainParams\n     bool fDefaultConsistencyChecks;\n     bool fRequireStandard;\n     bool fMineBlocksOnDemand;\n-    bool fTestnetToBeDeprecatedFieldRPC;\n     CCheckpointData checkpointData;\n };\n "
      },
      {
        "sha": "fa64ce8fad4b29bcd1d7b6f340e1a9c09e8fdd66",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
        "patch": "@@ -230,7 +230,6 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n             \"  \\\"errors\\\": \\\"...\\\"            (string) Current errors\\n\"\n             \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n             \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n-            \"  \\\"testnet\\\": true|false      (boolean) If using testnet or not\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n@@ -250,7 +249,6 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n     obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n-    obj.push_back(Pair(\"testnet\",          Params().TestnetToBeDeprecatedFieldRPC()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n     return obj;\n }"
      },
      {
        "sha": "6bbb3925ddece8ed622b204085a8838ff20f9ed7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dd07c6b2cc90f4c61cf7b86a2cc221f628895325/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
        "patch": "@@ -93,7 +93,7 @@ UniValue getinfo(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL)));\n     obj.push_back(Pair(\"proxy\",         (proxy.IsValid() ? proxy.proxy.ToStringIPPort() : string())));\n     obj.push_back(Pair(\"difficulty\",    (double)GetDifficulty()));\n-    obj.push_back(Pair(\"testnet\",       Params().TestnetToBeDeprecatedFieldRPC()));\n+    obj.push_back(Pair(\"testnet\",       Params().NetworkIDString() == CBaseChainParams::TESTNET));\n #ifdef ENABLE_WALLET\n     if (pwalletMain) {\n         obj.push_back(Pair(\"keypoololdest\", pwalletMain->GetOldestKeyPoolTime()));"
      }
    ]
  },
  {
    "sha": "6e094e54f7ffe460060f9ebbe9b57f62bd11182b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTA5NGU1NGY3ZmZlNDYwMDYwZjllYmJlOWI1N2Y2MmJkMTExODJi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T12:30:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T12:33:26Z"
      },
      "message": "Merge #8845: Don't return the address of a P2SH of a P2SH\n\nd51f182 Don't return the address of a P2SH of a P2SH. (jnewbery)",
      "tree": {
        "sha": "8915991afd2242b718dd44fcf403940da897410e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8915991afd2242b718dd44fcf403940da897410e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e094e54f7ffe460060f9ebbe9b57f62bd11182b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBhaWAAoJEHSBCwEjRsmmOZEH/R83f/a0MVC/3O9fMbMr0hYE\nHeyggivJgDqkDrHNOqC9vmMGaixt0bVTxqIRYzZhjrVCLT208Kk1zMBw+3rZrXOc\nN2xFdKF5Oui+XD6US3qYXt6G9/pzTrTW3lsVPxxn3MYaEPJ3wMFrCxqifWmP+buk\nrR+nvgLmT7a3gKkiDS7syPmr6Z+pe8KhwreND/7ZrbvPyxjVf/9exMScPR4Udaxv\nztzIpk4FK6MejQDEWc54WeSgUAzYEJRK0GvkvaZ0Qa3pR6FnRYzLyrJ6PurbuU/j\n5JgvdGIVNP8bs3gjlcTLnJVhmd3tQyT8pvi84gWfQv2ceet7bN8VivgBBE4e5pM=\n=nYiL\n-----END PGP SIGNATURE-----",
        "payload": "tree 8915991afd2242b718dd44fcf403940da897410e\nparent dd07c6b2cc90f4c61cf7b86a2cc221f628895325\nparent d51f18246165b580761af824f1bb4a49b6908f28\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476793837 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476794006 +0200\n\nMerge #8845: Don't return the address of a P2SH of a P2SH\n\nd51f182 Don't return the address of a P2SH of a P2SH. (jnewbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e094e54f7ffe460060f9ebbe9b57f62bd11182b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e094e54f7ffe460060f9ebbe9b57f62bd11182b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e094e54f7ffe460060f9ebbe9b57f62bd11182b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dd07c6b2cc90f4c61cf7b86a2cc221f628895325",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dd07c6b2cc90f4c61cf7b86a2cc221f628895325"
      },
      {
        "sha": "d51f18246165b580761af824f1bb4a49b6908f28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d51f18246165b580761af824f1bb4a49b6908f28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d51f18246165b580761af824f1bb4a49b6908f28"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e48fe256519bdbdedc69d9e25607266a1de15c0a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e094e54f7ffe460060f9ebbe9b57f62bd11182b/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e094e54f7ffe460060f9ebbe9b57f62bd11182b/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=6e094e54f7ffe460060f9ebbe9b57f62bd11182b",
        "patch": "@@ -535,7 +535,7 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n             \"     \\\"address\\\"     (string) bitcoin address\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"p2sh\\\",\\\"address\\\" (string) script address\\n\"\n+            \"  \\\"p2sh\\\",\\\"address\\\" (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"decodescript\", \"\\\"hexstring\\\"\")\n@@ -554,7 +554,15 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n     }\n     ScriptPubKeyToJSON(script, r, false);\n \n-    r.push_back(Pair(\"p2sh\", CBitcoinAddress(CScriptID(script)).ToString()));\n+    UniValue type;\n+    type = find_value(r, \"type\");\n+\n+    if (type.isStr() && type.get_str() != \"scripthash\") {\n+        // P2SH cannot be wrapped in a P2SH. If this script is already a P2SH,\n+        // don't return the address for a P2SH of the P2SH.\n+        r.push_back(Pair(\"p2sh\", CBitcoinAddress(CScriptID(script)).ToString()));\n+    }\n+\n     return r;\n }\n "
      }
    ]
  },
  {
    "sha": "c71a654c5fffbd7d7e160142f845d9384b43faf3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzFhNjU0YzVmZmZiZDdkN2UxNjAxNDJmODQ1ZDkzODRiNDNmYWYz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T12:46:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T12:46:57Z"
      },
      "message": "Merge #8890: [Doc] Update Doxygen configuration file\n\nf2e939b [Doc] Update Doxygen configuration file (fanquake)",
      "tree": {
        "sha": "a93c7a65502567c0ec6bbc6bea8439b9f9afa458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a93c7a65502567c0ec6bbc6bea8439b9f9afa458"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c71a654c5fffbd7d7e160142f845d9384b43faf3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBhnBAAoJEHSBCwEjRsmmlSwIAM3qVNJcPhwCBaU9hAkGWZWS\nB9JDCe9L2IN3aU9yxkytuR7wff2NLqYWh4SjcTvSQQQ0PteeFIYxW4HhtqDaW9bP\nAIWq8VRY1Z+3kaBm5lDLCcQipFR53oIWRbBM3RAKPl3AOF4pz9FPoDb5QMA58HA2\nw3wS4sx7SnmG2OHhbBt4xsbwG1CyNKM+UwAO9J0X3ruYjUtGKFwcqmVBY4sZrz8f\nMVyPItqqlwoFzMcpx/1hjaCy7vDx9FTDwRArqc0/5Y0hluOkiz6bF/HoM43i7iZO\nWhhQdJ9ZFY8DG2IdZfxYZPQ+wJBgO97xk5PrelDjS6u+xduaDpqSQ/kedizFRbU=\n=hEME\n-----END PGP SIGNATURE-----",
        "payload": "tree a93c7a65502567c0ec6bbc6bea8439b9f9afa458\nparent 6e094e54f7ffe460060f9ebbe9b57f62bd11182b\nparent f2e939bdbceef1ee90d59fab9ab99b944b44bce1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476794799 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476794817 +0200\n\nMerge #8890: [Doc] Update Doxygen configuration file\n\nf2e939b [Doc] Update Doxygen configuration file (fanquake)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c71a654c5fffbd7d7e160142f845d9384b43faf3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c71a654c5fffbd7d7e160142f845d9384b43faf3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c71a654c5fffbd7d7e160142f845d9384b43faf3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e094e54f7ffe460060f9ebbe9b57f62bd11182b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e094e54f7ffe460060f9ebbe9b57f62bd11182b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e094e54f7ffe460060f9ebbe9b57f62bd11182b"
      },
      {
        "sha": "f2e939bdbceef1ee90d59fab9ab99b944b44bce1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e939bdbceef1ee90d59fab9ab99b944b44bce1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e939bdbceef1ee90d59fab9ab99b944b44bce1"
      }
    ],
    "stats": {
      "total": 2746,
      "additions": 1727,
      "deletions": 1019
    },
    "files": [
      {
        "sha": "a0cbf7139a42c3e00a9cdc14a80c28d903656fb8",
        "filename": "doc/Doxyfile",
        "status": "modified",
        "additions": 1727,
        "deletions": 1019,
        "changes": 2746,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c71a654c5fffbd7d7e160142f845d9384b43faf3/doc/Doxyfile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c71a654c5fffbd7d7e160142f845d9384b43faf3/doc/Doxyfile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile?ref=c71a654c5fffbd7d7e160142f845d9384b43faf3"
      }
    ]
  },
  {
    "sha": "fab5ca8fee25839b76084cabf70f3f92395112c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI1Y2E4ZmVlMjU4MzliNzYwODRjYWJmNzBmM2Y5MjM5NTExMmMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-18T13:09:32Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-18T13:08:46Z"
      },
      "message": "contrib: Add README for pgp keys",
      "tree": {
        "sha": "aa2fb1ac2cd46469e50e24c98d074a1601c158a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa2fb1ac2cd46469e50e24c98d074a1601c158a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab5ca8fee25839b76084cabf70f3f92395112c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5ca8fee25839b76084cabf70f3f92395112c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab5ca8fee25839b76084cabf70f3f92395112c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5ca8fee25839b76084cabf70f3f92395112c2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd761fb85a24e07d69d5823418f9e8a506ce5382",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd761fb85a24e07d69d5823418f9e8a506ce5382",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd761fb85a24e07d69d5823418f9e8a506ce5382"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "439910330d14a7d3f2f8e6be23c5393f75b163b1",
        "filename": "contrib/gitian-keys/README.md",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5ca8fee25839b76084cabf70f3f92395112c2/contrib/gitian-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5ca8fee25839b76084cabf70f3f92395112c2/contrib/gitian-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/README.md?ref=fab5ca8fee25839b76084cabf70f3f92395112c2",
        "patch": "@@ -0,0 +1,16 @@\n+PGP keys\n+========\n+\n+This folder contains the public keys of developers and active contributors.\n+\n+The keys are mainly used to sign git commits or the build results of gitian\n+builds.\n+\n+You can import the keys into gpg as follows. Also, make sure to fetch the\n+latest version from the key server to see if any key was revoked in the\n+meantime.\n+\n+```sh\n+gpg --import ./*.pgp\n+gpg --refresh-keys\n+```"
      }
    ]
  },
  {
    "sha": "f628d9a29a2d83c80323c801f618b5375543bd0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNjI4ZDlhMjlhMmQ4M2M4MDMyM2M4MDFmNjE4YjUzNzU1NDNiZDBk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T12:48:55Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T13:16:39Z"
      },
      "message": "Merge #8925: qt: Display minimum ping in debug window.\n\n1724a40 Display minimum ping in debug window. (R E Broadley)",
      "tree": {
        "sha": "dbaa0678573e9c93afd3135a6bc36b5f4e13e0c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbaa0678573e9c93afd3135a6bc36b5f4e13e0c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f628d9a29a2d83c80323c801f618b5375543bd0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBiC3AAoJEHSBCwEjRsmmMKMH/0d9nzXSHodZwjDZu/6uVLr2\naEYhNtjZcUKBZAc3eJQHLlIeJu1/WPSQM1VoQuKPLUSIMNb2mgNoZduGwYcuPi/q\nP4qwyFJdTaBRqaohHJY7V7KeAN/KphfEpmQsufbk8EzKE6px1RhoccAFlfBFlAvr\nudmKDtRfbzwTLJFS358bhxnCdWmL2fA0g30MQcQ0QjtcX1WT6eoAnzQqbhzqC7wN\nD3THOxGSx9VEdgSmLXCn3MkUGjULXmVCcKYmhmSEUzFQYj9Gc3VbYKna85f6iBPd\njnO6lNWTKyAMMPswGqJ7G9hekenfaI/eRTD5iRoRTyKGhjSzHA1WEwTML7ZixIA=\n=QNso\n-----END PGP SIGNATURE-----",
        "payload": "tree dbaa0678573e9c93afd3135a6bc36b5f4e13e0c3\nparent c71a654c5fffbd7d7e160142f845d9384b43faf3\nparent 1724a405c9065f2c939e936aca9b5d37fca5e954\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476794935 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476796599 +0200\n\nMerge #8925: qt: Display minimum ping in debug window.\n\n1724a40 Display minimum ping in debug window. (R E Broadley)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f628d9a29a2d83c80323c801f618b5375543bd0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f628d9a29a2d83c80323c801f618b5375543bd0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f628d9a29a2d83c80323c801f618b5375543bd0d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c71a654c5fffbd7d7e160142f845d9384b43faf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c71a654c5fffbd7d7e160142f845d9384b43faf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c71a654c5fffbd7d7e160142f845d9384b43faf3"
      },
      {
        "sha": "1724a405c9065f2c939e936aca9b5d37fca5e954",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1724a405c9065f2c939e936aca9b5d37fca5e954",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1724a405c9065f2c939e936aca9b5d37fca5e954"
      }
    ],
    "stats": {
      "total": 44,
      "additions": 34,
      "deletions": 10
    },
    "files": [
      {
        "sha": "8d00c616f6b08607acac45f0437b4e508862a51f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f628d9a29a2d83c80323c801f618b5375543bd0d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f628d9a29a2d83c80323c801f618b5375543bd0d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f628d9a29a2d83c80323c801f618b5375543bd0d",
        "patch": "@@ -659,7 +659,7 @@ void CNode::copyStats(CNodeStats &stats)\n \n     // Raw ping time is in microseconds, but show it to user as whole seconds (Bitcoin users should be well used to small numbers with many decimal places by now :)\n     stats.dPingTime = (((double)nPingUsecTime) / 1e6);\n-    stats.dPingMin  = (((double)nMinPingUsecTime) / 1e6);\n+    stats.dMinPing  = (((double)nMinPingUsecTime) / 1e6);\n     stats.dPingWait = (((double)nPingUsecWait) / 1e6);\n \n     // Leave string empty if addrLocal invalid (not filled in yet)"
      },
      {
        "sha": "90a4db2c63eeaaff2b902372687067660094e942",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f628d9a29a2d83c80323c801f618b5375543bd0d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f628d9a29a2d83c80323c801f618b5375543bd0d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f628d9a29a2d83c80323c801f618b5375543bd0d",
        "patch": "@@ -503,7 +503,7 @@ class CNodeStats\n     bool fWhitelisted;\n     double dPingTime;\n     double dPingWait;\n-    double dPingMin;\n+    double dMinPing;\n     std::string addrLocal;\n     CAddress addr;\n };"
      },
      {
        "sha": "8be4a955b3d34ecb2960df6b25f716f67adfe8e5",
        "filename": "src/qt/forms/debugwindow.ui",
        "status": "modified",
        "additions": 25,
        "deletions": 2,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/forms/debugwindow.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/forms/debugwindow.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/debugwindow.ui?ref=f628d9a29a2d83c80323c801f618b5375543bd0d",
        "patch": "@@ -1353,13 +1353,36 @@\n            </widget>\n           </item>\n           <item row=\"16\" column=\"0\">\n+           <widget class=\"QLabel\" name=\"peerMinPingLabel\">\n+            <property name=\"text\">\n+             <string>Min Ping</string>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"16\" column=\"2\">\n+           <widget class=\"QLabel\" name=\"peerMinPing\">\n+            <property name=\"cursor\">\n+             <cursorShape>IBeamCursor</cursorShape>\n+            </property>\n+            <property name=\"text\">\n+             <string>N/A</string>\n+            </property>\n+            <property name=\"textFormat\">\n+             <enum>Qt::PlainText</enum>\n+            </property>\n+            <property name=\"textInteractionFlags\">\n+             <set>Qt::LinksAccessibleByMouse|Qt::TextSelectableByKeyboard|Qt::TextSelectableByMouse</set>\n+            </property>\n+           </widget>\n+          </item>\n+          <item row=\"17\" column=\"0\">\n            <widget class=\"QLabel\" name=\"label_timeoffset\">\n             <property name=\"text\">\n              <string>Time Offset</string>\n             </property>\n            </widget>\n           </item>\n-          <item row=\"16\" column=\"2\">\n+          <item row=\"17\" column=\"2\">\n            <widget class=\"QLabel\" name=\"timeoffset\">\n             <property name=\"cursor\">\n              <cursorShape>IBeamCursor</cursorShape>\n@@ -1375,7 +1398,7 @@\n             </property>\n            </widget>\n           </item>\n-          <item row=\"17\" column=\"1\">\n+          <item row=\"18\" column=\"1\">\n            <spacer name=\"verticalSpacer_3\">\n             <property name=\"orientation\">\n              <enum>Qt::Vertical</enum>"
      },
      {
        "sha": "42dafa117560518f479debd265795322b2b32687",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=f628d9a29a2d83c80323c801f618b5375543bd0d",
        "patch": "@@ -947,7 +947,7 @@ QString formatServicesStr(quint64 mask)\n \n QString formatPingTime(double dPingTime)\n {\n-    return dPingTime == 0 ? QObject::tr(\"N/A\") : QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(dPingTime * 1000), 10));\n+    return (dPingTime == std::numeric_limits<int64_t>::max()/1e6 || dPingTime == 0) ? QObject::tr(\"N/A\") : QString(QObject::tr(\"%1 ms\")).arg(QString::number((int)(dPingTime * 1000), 10));\n }\n \n QString formatTimeOffset(int64_t nTimeOffset)"
      },
      {
        "sha": "a2f9471fcc688520039088d8f270d429a3935882",
        "filename": "src/qt/peertablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/peertablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/peertablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/peertablemodel.cpp?ref=f628d9a29a2d83c80323c801f618b5375543bd0d",
        "patch": "@@ -31,7 +31,7 @@ bool NodeLessThan::operator()(const CNodeCombinedStats &left, const CNodeCombine\n     case PeerTableModel::Subversion:\n         return pLeft->cleanSubVer.compare(pRight->cleanSubVer) < 0;\n     case PeerTableModel::Ping:\n-        return pLeft->dPingTime < pRight->dPingTime;\n+        return pLeft->dMinPing < pRight->dMinPing;\n     }\n \n     return false;\n@@ -113,7 +113,7 @@ PeerTableModel::PeerTableModel(ClientModel *parent) :\n     clientModel(parent),\n     timer(0)\n {\n-    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping Time\");\n+    columns << tr(\"NodeId\") << tr(\"Node/Service\") << tr(\"User Agent\") << tr(\"Ping\");\n     priv = new PeerTablePriv();\n     // default to unsorted\n     priv->sortColumn = -1;\n@@ -166,7 +166,7 @@ QVariant PeerTableModel::data(const QModelIndex &index, int role) const\n         case Subversion:\n             return QString::fromStdString(rec->nodeStats.cleanSubVer);\n         case Ping:\n-            return GUIUtil::formatPingTime(rec->nodeStats.dPingTime);\n+            return GUIUtil::formatPingTime(rec->nodeStats.dMinPing);\n         }\n     } else if (role == Qt::TextAlignmentRole) {\n         if (index.column() == Ping)"
      },
      {
        "sha": "a1017e6c16bb86eb334ca66d2c0d928d3c557830",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f628d9a29a2d83c80323c801f618b5375543bd0d/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=f628d9a29a2d83c80323c801f618b5375543bd0d",
        "patch": "@@ -895,6 +895,7 @@ void RPCConsole::updateNodeDetail(const CNodeCombinedStats *stats)\n     ui->peerConnTime->setText(GUIUtil::formatDurationStr(GetTime() - stats->nodeStats.nTimeConnected));\n     ui->peerPingTime->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingTime));\n     ui->peerPingWait->setText(GUIUtil::formatPingTime(stats->nodeStats.dPingWait));\n+    ui->peerMinPing->setText(GUIUtil::formatPingTime(stats->nodeStats.dMinPing));\n     ui->timeoffset->setText(GUIUtil::formatTimeOffset(stats->nodeStats.nTimeOffset));\n     ui->peerVersion->setText(QString(\"%1\").arg(QString::number(stats->nodeStats.nVersion)));\n     ui->peerSubversion->setText(QString::fromStdString(stats->nodeStats.cleanSubVer));"
      },
      {
        "sha": "a8442d86929b7300d339006d11c8621e23bc0cf7",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f628d9a29a2d83c80323c801f618b5375543bd0d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f628d9a29a2d83c80323c801f618b5375543bd0d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=f628d9a29a2d83c80323c801f618b5375543bd0d",
        "patch": "@@ -141,8 +141,8 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n         obj.push_back(Pair(\"timeoffset\", stats.nTimeOffset));\n         if (stats.dPingTime > 0.0)\n             obj.push_back(Pair(\"pingtime\", stats.dPingTime));\n-        if (stats.dPingMin < std::numeric_limits<int64_t>::max()/1e6)\n-            obj.push_back(Pair(\"minping\", stats.dPingMin));\n+        if (stats.dMinPing < std::numeric_limits<int64_t>::max()/1e6)\n+            obj.push_back(Pair(\"minping\", stats.dMinPing));\n         if (stats.dPingWait > 0.0)\n             obj.push_back(Pair(\"pingwait\", stats.dPingWait));\n         obj.push_back(Pair(\"version\", stats.nVersion));"
      }
    ]
  },
  {
    "sha": "0306978394dbf96d07e61cde5fb7240d29706361",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzA2OTc4Mzk0ZGJmOTZkMDdlNjFjZGU1ZmI3MjQwZDI5NzA2MzYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T13:35:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T13:35:12Z"
      },
      "message": "Merge #8935: Documentation: Building on Windows with WSL\n\n7c1716f Documentation for Building on Windows with WSL (poole_party)",
      "tree": {
        "sha": "b479f8b0bdc98c0fca6a65b85005dd1fd009b705",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b479f8b0bdc98c0fca6a65b85005dd1fd009b705"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0306978394dbf96d07e61cde5fb7240d29706361",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBiUQAAoJEHSBCwEjRsmmB6YH/0GZPVgQoT9xfVsup1jeBPEe\nH8zMXMg/WGs9MTl5t8GnAivGZBwv44UeRGsIQMpHkbILDdkXJguozsea6qOUyc/a\nl1rqTnqoT1g+c5Hgyw8wFW4CnvV0oApVf3EUv9+8Oaf7Qgd0H1tK7qMRqYxqEBnJ\nh16Al7/SdJgcKumzn5e5T47l7aSdXmZf47j8L7ZnjyzMea5zIAKjALO+me2JWuow\nxaZ8n1aoC9ZO3OebJmK1b1xX0qkvIWpZcPCn7jkk+gTeOpve1+tqr1WeldTIn/gh\n5VX9/Mmno8gwrnzloIv+VGsNJGsP3wQfOqIdr9NUS1quGk/MUJBD0ry8XbMwgeE=\n=rhs8\n-----END PGP SIGNATURE-----",
        "payload": "tree b479f8b0bdc98c0fca6a65b85005dd1fd009b705\nparent f628d9a29a2d83c80323c801f618b5375543bd0d\nparent 7c1716f65d1bfe5e98eec487d3484010305ab334\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476797710 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476797712 +0200\n\nMerge #8935: Documentation: Building on Windows with WSL\n\n7c1716f Documentation for Building on Windows with WSL (poole_party)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0306978394dbf96d07e61cde5fb7240d29706361",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0306978394dbf96d07e61cde5fb7240d29706361",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0306978394dbf96d07e61cde5fb7240d29706361/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f628d9a29a2d83c80323c801f618b5375543bd0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f628d9a29a2d83c80323c801f618b5375543bd0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f628d9a29a2d83c80323c801f618b5375543bd0d"
      },
      {
        "sha": "7c1716f65d1bfe5e98eec487d3484010305ab334",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c1716f65d1bfe5e98eec487d3484010305ab334",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c1716f65d1bfe5e98eec487d3484010305ab334"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 35,
      "deletions": 4
    },
    "files": [
      {
        "sha": "044356830a6bae210587a696f29d7441c4bf298a",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 35,
        "deletions": 4,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0306978394dbf96d07e61cde5fb7240d29706361/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0306978394dbf96d07e61cde5fb7240d29706361/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=0306978394dbf96d07e61cde5fb7240d29706361",
        "patch": "@@ -1,13 +1,45 @@\n WINDOWS BUILD NOTES\n ====================\n \n-Some notes on how to build Bitcoin Core for Windows.\n+Below are some notes on how to build Bitcoin Core for Windows.\n \n Most developers use cross-compilation from Ubuntu to build executables for\n Windows. This is also used to build the release binaries.\n \n-Building on Windows itself is possible (for example using msys / mingw-w64),\n-but no one documented the steps to do this. If you are doing this, please contribute them.\n+While there are potentially a number of ways to build on Windows (for example using msys / mingw-w64),\n+using the Windows Subsystem For Linux is the most straight forward.  If you are building with\n+an alternative method, please contribute the instructions here for others who are running versions\n+of Windows that are not compatible with the Windows Subsystem for Linux.\n+\n+Compiling with the Windows Subsystem For Linux\n+-------------------\n+\n+With Windows 10, Microsoft has released a new feature named the\n+[Windows Subsystem for Linux](https://msdn.microsoft.com/commandline/wsl/about).  This feature allows you to run a bash shell directly on Windows in an Ubuntu based\n+environment.  Within this environment you can cross compile for Windows without the need for a separate Linux VM or Server.\n+\n+This feature is not supported in versions of Windows prior to Windows 10 or on Windows Server SKUs.\n+\n+To get the bash shell, you must first activate the feature in Windows.\n+\n+1. Turn on Developer Mode\n+  * Open Settings -> Update and Security -> For developers\n+  * Select the Developer Mode radio button\n+  * Restart if necessary\n+2. Enable the Windows Subsystem for Linux feature\n+  * From Start, search for \"Turn Windows features on or off\" (type 'turn')\n+  * Select Windows Subsystem for Linux (beta)\n+  * Click OK\n+  * Restart if necessary\n+3. Complete Installation\n+  * Open a cmd prompt and type \"bash\"\n+  * Accept the license\n+  * Create a new UNIX user account (this is a separate account from your Windows account)\n+\n+After the bash shell is active, you can follow the instructions below for Windows 64-bit Cross-compilation.\n+When building dependencies within the 'depends' folder, you may encounter an error building\n+the protobuf dependency.  If this occurs, re-run the command with sudo.  This is likely\n+a bug with the Windows Subsystem for Linux feature and may be fixed with a future update.\n \n Cross-compilation\n -------------------\n@@ -41,4 +73,3 @@ To build executables for Windows 64-bit:\n     make\n \n For further documentation on the depends system see [README.md](../depends/README.md) in the depends directory.\n-"
      }
    ]
  },
  {
    "sha": "cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGZiNzc1NWE2YWYyZTk1ZTg1OThjYThlOGQ2ODk2Yzc0NWJjZDcy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T13:38:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T13:44:57Z"
      },
      "message": "Merge #8914: Kill insecure_random and associated global state\n\n5eaaa83 Kill insecure_random and associated global state (Wladimir J. van der Laan)",
      "tree": {
        "sha": "fce0cfa5a1d83ef5f9c6f84a6f0875bf1903323f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fce0cfa5a1d83ef5f9c6f84a6f0875bf1903323f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBidZAAoJEHSBCwEjRsmmNV4H/37zXD3cx5K4hZGq53o8z8Uk\n87XudYWYTE9VN2ZMNhKqIfVB+obgQd52NhQIhhueoeDVjUgmkthhi+y645NrMZZo\n081NoQjk6e7290hq7LRxurTcSag84KXszyqMj10rLl8OLtvgnllNEYZoxrErlkmc\nN99nJyZwprjNxgL2udul0xkr2iBz6BsoZKVyBFIv9D4xVSX1xrt6WadZmA/TcSK9\nax9zvESH3pZ5Ls1vJUbjasEzKbHJu+4CLeGBKU1M1IzxRiRT4sJ2H4TG0eKPZ8De\npucO57VPAjLxyCVDd4okMT+LQZDLNRjsl/OmXq23sHO71dVKmKQMgIGmMi2PHhY=\n=sB6t\n-----END PGP SIGNATURE-----",
        "payload": "tree fce0cfa5a1d83ef5f9c6f84a6f0875bf1903323f\nparent 0306978394dbf96d07e61cde5fb7240d29706361\nparent 5eaaa83ac1f5eb525f93e2808fafd73f5ed97013\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476797924 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476798297 +0200\n\nMerge #8914: Kill insecure_random and associated global state\n\n5eaaa83 Kill insecure_random and associated global state (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0306978394dbf96d07e61cde5fb7240d29706361",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0306978394dbf96d07e61cde5fb7240d29706361",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0306978394dbf96d07e61cde5fb7240d29706361"
      },
      {
        "sha": "5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5eaaa83ac1f5eb525f93e2808fafd73f5ed97013"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 92,
      "deletions": 66
    },
    "files": [
      {
        "sha": "20165232122be0a3f71564c85475df3f315e39ec",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -358,8 +358,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nKBucket = RandomInt(ADDRMAN_TRIED_BUCKET_COUNT);\n             int nKBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvTried[nKBucket][nKBucketPos] == -1) {\n-                nKBucket = (nKBucket + insecure_rand()) % ADDRMAN_TRIED_BUCKET_COUNT;\n-                nKBucketPos = (nKBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nKBucket = (nKBucket + insecure_rand.rand32()) % ADDRMAN_TRIED_BUCKET_COUNT;\n+                nKBucketPos = (nKBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvTried[nKBucket][nKBucketPos];\n             assert(mapInfo.count(nId) == 1);\n@@ -375,8 +375,8 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n             int nUBucket = RandomInt(ADDRMAN_NEW_BUCKET_COUNT);\n             int nUBucketPos = RandomInt(ADDRMAN_BUCKET_SIZE);\n             while (vvNew[nUBucket][nUBucketPos] == -1) {\n-                nUBucket = (nUBucket + insecure_rand()) % ADDRMAN_NEW_BUCKET_COUNT;\n-                nUBucketPos = (nUBucketPos + insecure_rand()) % ADDRMAN_BUCKET_SIZE;\n+                nUBucket = (nUBucket + insecure_rand.rand32()) % ADDRMAN_NEW_BUCKET_COUNT;\n+                nUBucketPos = (nUBucketPos + insecure_rand.rand32()) % ADDRMAN_BUCKET_SIZE;\n             }\n             int nId = vvNew[nUBucket][nUBucketPos];\n             assert(mapInfo.count(nId) == 1);"
      },
      {
        "sha": "e9e137c978a7e48b9a069475536d9695e7ba1c36",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -211,6 +211,9 @@ class CAddrMan\n     //! secret key to randomize bucket select with\n     uint256 nKey;\n \n+    //! Source of random numbers for randomization in inner loops\n+    FastRandomContext insecure_rand;\n+\n     //! Find an entry.\n     CAddrInfo* Find(const CNetAddr& addr, int *pnId = NULL);\n "
      },
      {
        "sha": "d14a1bed3ac55500bb37ae535840364d14a07175",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -4762,6 +4762,7 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n     uint64_t hashAddr = addr.GetHash();\n     std::multimap<uint64_t, CNode*> mapMix;\n     const CSipHasher hasher = connman.GetDeterministicRandomizer(RANDOMIZER_ID_ADDRESS_RELAY).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));\n+    FastRandomContext insecure_rand;\n \n     auto sortfunc = [&mapMix, &hasher](CNode* pnode) {\n         if (pnode->nVersion >= CADDR_TIME_VERSION) {\n@@ -4770,9 +4771,9 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman& connma\n         }\n     };\n \n-    auto pushfunc = [&addr, &mapMix, &nRelayNodes] {\n+    auto pushfunc = [&addr, &mapMix, &nRelayNodes, &insecure_rand] {\n         for (auto mi = mapMix.begin(); mi != mapMix.end() && nRelayNodes-- > 0; ++mi)\n-            mi->second->PushAddress(addr);\n+            mi->second->PushAddress(addr, insecure_rand);\n     };\n \n     connman.ForEachNodeThen(std::move(sortfunc), std::move(pushfunc));\n@@ -5082,14 +5083,15 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (fListen && !IsInitialBlockDownload())\n             {\n                 CAddress addr = GetLocalAddress(&pfrom->addr, pfrom->GetLocalServices());\n+                FastRandomContext insecure_rand;\n                 if (addr.IsRoutable())\n                 {\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom->PushAddress(addr);\n+                    pfrom->PushAddress(addr, insecure_rand);\n                 } else if (IsPeerAddrLocalGood(pfrom)) {\n                     addr.SetIP(pfrom->addrLocal);\n                     LogPrint(\"net\", \"ProcessMessages: advertising address %s\\n\", addr.ToString());\n-                    pfrom->PushAddress(addr);\n+                    pfrom->PushAddress(addr, insecure_rand);\n                 }\n             }\n \n@@ -6012,8 +6014,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n         pfrom->vAddrToSend.clear();\n         vector<CAddress> vAddr = connman.GetAddresses();\n+        FastRandomContext insecure_rand;\n         BOOST_FOREACH(const CAddress &addr, vAddr)\n-            pfrom->PushAddress(addr);\n+            pfrom->PushAddress(addr, insecure_rand);\n     }\n \n \n@@ -6846,7 +6849,7 @@ bool SendMessages(CNode* pto, CConnman& connman)\n             // until scheduled broadcast, then move the broadcast to within MAX_FEEFILTER_CHANGE_DELAY.\n             else if (timeNow + MAX_FEEFILTER_CHANGE_DELAY * 1000000 < pto->nextSendTimeFeeFilter &&\n                      (currentFilter < 3 * pto->lastSentFeeFilter / 4 || currentFilter > 4 * pto->lastSentFeeFilter / 3)) {\n-                pto->nextSendTimeFeeFilter = timeNow + (insecure_rand() % MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n+                pto->nextSendTimeFeeFilter = timeNow + GetRandInt(MAX_FEEFILTER_CHANGE_DELAY) * 1000000;\n             }\n         }\n     }"
      },
      {
        "sha": "34dc67eb43890d88b39e4a43474aeac360bfc343",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -187,7 +187,8 @@ void AdvertiseLocal(CNode *pnode)\n         if (addrLocal.IsRoutable())\n         {\n             LogPrint(\"net\", \"AdvertiseLocal: advertising address %s\\n\", addrLocal.ToString());\n-            pnode->PushAddress(addrLocal);\n+            FastRandomContext insecure_rand;\n+            pnode->PushAddress(addrLocal, insecure_rand);\n         }\n     }\n }"
      },
      {
        "sha": "58b492e5929f2e0d3f620c3e19a5ceb18e3dd76c",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -735,14 +735,14 @@ class CNode\n         addrKnown.insert(_addr.GetKey());\n     }\n \n-    void PushAddress(const CAddress& _addr)\n+    void PushAddress(const CAddress& _addr, FastRandomContext &insecure_rand)\n     {\n         // Known checking here is only to save space from duplicates.\n         // SendMessages will filter it again for knowns that were added\n         // after addresses were pushed.\n         if (_addr.IsValid() && !addrKnown.contains(_addr.GetKey())) {\n             if (vAddrToSend.size() >= MAX_ADDR_TO_SEND) {\n-                vAddrToSend[insecure_rand() % vAddrToSend.size()] = _addr;\n+                vAddrToSend[insecure_rand.rand32() % vAddrToSend.size()] = _addr;\n             } else {\n                 vAddrToSend.push_back(_addr);\n             }"
      },
      {
        "sha": "9fe34108f57d1f67cb27eb38272086fb31c31ceb",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -596,8 +596,8 @@ static bool ConnectThroughProxy(const proxyType &proxy, const std::string& strDe\n     // do socks negotiation\n     if (proxy.randomize_credentials) {\n         ProxyCredentials random_auth;\n-        random_auth.username = strprintf(\"%i\", insecure_rand());\n-        random_auth.password = strprintf(\"%i\", insecure_rand());\n+        static std::atomic_int counter;\n+        random_auth.username = random_auth.password = strprintf(\"%i\", counter++);\n         if (!Socks5(strDest, (unsigned short)port, &random_auth, hSocket))\n             return false;\n     } else {"
      },
      {
        "sha": "c07cd2eff8be07e370d415ed9a7a83184dadb11a",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -594,7 +594,7 @@ FeeFilterRounder::FeeFilterRounder(const CFeeRate& minIncrementalFee)\n CAmount FeeFilterRounder::round(CAmount currentMinFee)\n {\n     std::set<double>::iterator it = feeset.lower_bound(currentMinFee);\n-    if ((it != feeset.begin() && insecure_rand() % 3 != 0) || it == feeset.end()) {\n+    if ((it != feeset.begin() && insecure_rand.rand32() % 3 != 0) || it == feeset.end()) {\n         it--;\n     }\n     return *it;"
      },
      {
        "sha": "2c1ac3b934a121ec6691d001b3c0ad82da14b6d3",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"amount.h\"\n #include \"uint256.h\"\n+#include \"random.h\"\n \n #include <map>\n #include <string>\n@@ -298,5 +299,6 @@ class FeeFilterRounder\n \n private:\n     std::set<double> feeset;\n+    FastRandomContext insecure_rand;\n };\n #endif /*BITCOIN_POLICYESTIMATOR_H */"
      },
      {
        "sha": "aa027e49c437ff6556ce49db710773a97dc640c1",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -178,22 +178,21 @@ uint256 GetRandHash()\n     return hash;\n }\n \n-uint32_t insecure_rand_Rz = 11;\n-uint32_t insecure_rand_Rw = 11;\n-void seed_insecure_rand(bool fDeterministic)\n+FastRandomContext::FastRandomContext(bool fDeterministic)\n {\n     // The seed values have some unlikely fixed points which we avoid.\n     if (fDeterministic) {\n-        insecure_rand_Rz = insecure_rand_Rw = 11;\n+        Rz = Rw = 11;\n     } else {\n         uint32_t tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n         } while (tmp == 0 || tmp == 0x9068ffffU);\n-        insecure_rand_Rz = tmp;\n+        Rz = tmp;\n         do {\n             GetRandBytes((unsigned char*)&tmp, 4);\n         } while (tmp == 0 || tmp == 0x464fffffU);\n-        insecure_rand_Rw = tmp;\n+        Rw = tmp;\n     }\n }\n+"
      },
      {
        "sha": "e97d2d1fb0b54a3cbb19f6ce1ab125ca882ef2ab",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 16,
        "deletions": 19,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -28,25 +28,22 @@ uint256 GetRandHash();\n void GetStrongRandBytes(unsigned char* buf, int num);\n \n /**\n- * Seed insecure_rand using the random pool.\n- * @param Deterministic Use a deterministic seed\n+ * Fast randomness source. This is seeded once with secure random data, but\n+ * is completely deterministic and insecure after that.\n+ * This class is not thread-safe.\n  */\n-void seed_insecure_rand(bool fDeterministic = false);\n-\n-/**\n- * MWC RNG of George Marsaglia\n- * This is intended to be fast. It has a period of 2^59.3, though the\n- * least significant 16 bits only have a period of about 2^30.1.\n- *\n- * @return random value\n- */\n-extern uint32_t insecure_rand_Rz;\n-extern uint32_t insecure_rand_Rw;\n-static inline uint32_t insecure_rand(void)\n-{\n-    insecure_rand_Rz = 36969 * (insecure_rand_Rz & 65535) + (insecure_rand_Rz >> 16);\n-    insecure_rand_Rw = 18000 * (insecure_rand_Rw & 65535) + (insecure_rand_Rw >> 16);\n-    return (insecure_rand_Rw << 16) + insecure_rand_Rz;\n-}\n+class FastRandomContext {\n+public:\n+    explicit FastRandomContext(bool fDeterministic=false);\n+\n+    uint32_t rand32() {\n+        Rz = 36969 * (Rz & 65535) + (Rz >> 16);\n+        Rw = 18000 * (Rw & 65535) + (Rw >> 16);\n+        return (Rw << 16) + Rz;\n+    }\n+\n+    uint32_t Rz;\n+    uint32_t Rw;\n+};\n \n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "adff09f7548805d2bbbb805c63ad7bfbd1f3800c",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -26,7 +26,7 @@ class CAddrManTest : public CAddrMan\n     void MakeDeterministic()\n     {\n         nKey.SetNull();\n-        seed_insecure_rand(true);\n+        insecure_rand = FastRandomContext(true);\n     }\n \n     int RandomInt(int nMax)"
      },
      {
        "sha": "b487686136aaf8350e132c84d87b026c52d85a7e",
        "filename": "src/test/coins_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/coins_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/coins_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/coins_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"coins.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"script/standard.h\"\n #include \"uint256.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "c7b4fb240c20e5554ecb40e42c196f0a82ba3be1",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -9,7 +9,7 @@\n #include \"crypto/sha512.h\"\n #include \"crypto/hmac_sha256.h\"\n #include \"crypto/hmac_sha512.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "66ca381ea7023836c002cb546617fa3339acbaed",
        "filename": "src/test/merkle_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/merkle_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/merkle_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/merkle_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -4,7 +4,7 @@\n \n #include \"consensus/merkle.h\"\n #include \"test/test_bitcoin.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n \n #include <boost/test/unit_test.hpp>\n "
      },
      {
        "sha": "f4b5768693bde890a5691441a30d623bddc5a9ad",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -23,7 +23,7 @@ class CAddrManSerializationMock : public CAddrMan\n     void MakeDeterministic()\n     {\n         nKey.SetNull();\n-        seed_insecure_rand(true);\n+        insecure_rand = FastRandomContext(true);\n     }\n };\n "
      },
      {
        "sha": "b7f83d38f0b8430c40650ac8c56b499997b0357e",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -9,7 +9,7 @@\n #include \"uint256.h\"\n #include \"arith_uint256.h\"\n #include \"version.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"test/test_bitcoin.h\"\n \n #include <vector>"
      },
      {
        "sha": "6cad02e738627d018dfb68d59ea639e611338288",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -4,7 +4,7 @@\n \n #include <vector>\n #include \"prevector.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n \n #include \"serialize.h\"\n #include \"streams.h\"\n@@ -27,8 +27,7 @@ class prevector_tester {\n \n     typedef typename pretype::size_type Size;\n     bool passed = true;\n-    uint32_t insecure_rand_Rz_cache;\n-    uint32_t insecure_rand_Rw_cache;\n+    FastRandomContext rand_cache;\n \n \n     template <typename A, typename B>\n@@ -171,15 +170,14 @@ class prevector_tester {\n         test();\n     }\n     ~prevector_tester() {\n-        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \" \n-                << insecure_rand_Rz_cache \n+        BOOST_CHECK_MESSAGE(passed, \"insecure_rand_Rz: \"\n+                << rand_cache.Rz\n                 << \", insecure_rand_Rw: \"\n-                << insecure_rand_Rw_cache);\n+                << rand_cache.Rw);\n     }\n     prevector_tester() {\n         seed_insecure_rand();\n-        insecure_rand_Rz_cache = insecure_rand_Rz;\n-        insecure_rand_Rw_cache = insecure_rand_Rw;\n+        rand_cache = insecure_rand_ctx;\n     }\n };\n "
      },
      {
        "sha": "891ecf501567f2a6fb22ecd7c7c74bed66a69861",
        "filename": "src/test/scheduler_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/scheduler_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/scheduler_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scheduler_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -42,8 +42,6 @@ static void MicroSleep(uint64_t n)\n \n BOOST_AUTO_TEST_CASE(manythreads)\n {\n-    seed_insecure_rand(false);\n-\n     // Stress test: hundreds of microsecond-scheduled tasks,\n     // serviced by 10 threads.\n     //\n@@ -58,7 +56,7 @@ BOOST_AUTO_TEST_CASE(manythreads)\n \n     boost::mutex counterMutex[10];\n     int counter[10] = { 0 };\n-    boost::random::mt19937 rng(insecure_rand());\n+    boost::random::mt19937 rng(42);\n     boost::random::uniform_int_distribution<> zeroToNine(0, 9);\n     boost::random::uniform_int_distribution<> randomMsec(-11, 1000);\n     boost::random::uniform_int_distribution<> randomDelta(-1000, 1000);"
      },
      {
        "sha": "0b1050d020cc56880228c97c3fe47003dc0a329f",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -6,7 +6,7 @@\n #include \"data/sighash.json.h\"\n #include \"hash.h\"\n #include \"main.h\" // For CheckTransaction\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"script/interpreter.h\"\n #include \"script/script.h\"\n #include \"serialize.h\""
      },
      {
        "sha": "b19f8fbffb33b05abb88d23419476938056a7c44",
        "filename": "src/test/skiplist_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/skiplist_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/skiplist_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/skiplist_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"util.h\"\n #include \"test/test_bitcoin.h\"\n "
      },
      {
        "sha": "27ea837fbffe17efb6607f8de00ed71d1be24f15",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -27,6 +27,7 @@\n #include <boost/thread.hpp>\n \n std::unique_ptr<CConnman> g_connman;\n+FastRandomContext insecure_rand_ctx(true);\n \n extern bool fPrintToConsole;\n extern void noui_connect();"
      },
      {
        "sha": "e61b92b7bce943cc79a2798f1459e87617a4977c",
        "filename": "src/test/test_random.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/test_random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/test_random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_random.h?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_RANDOM_H\n+#define BITCOIN_TEST_RANDOM_H\n+\n+#include \"random.h\"\n+\n+extern FastRandomContext insecure_rand_ctx;\n+\n+static inline void seed_insecure_rand(bool fDeterministic = false)\n+{\n+    insecure_rand_ctx = FastRandomContext(fDeterministic);\n+}\n+\n+static inline uint32_t insecure_rand(void)\n+{\n+    return insecure_rand_ctx.rand32();\n+}\n+\n+#endif"
      },
      {
        "sha": "0f1c7ab2224b23ca47cfa1831bbe6a3b6d29aa80",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -6,7 +6,7 @@\n \n #include \"clientversion.h\"\n #include \"primitives/transaction.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"sync.h\"\n #include \"utilstrencodings.h\"\n #include \"utilmoneystr.h\""
      },
      {
        "sha": "ffc0ff6f8ead3257a68a94888006d2e32fff1533",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -3,7 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"chain.h\"\n-#include \"random.h\"\n+#include \"test_random.h\"\n #include \"versionbits.h\"\n #include \"test/test_bitcoin.h\"\n #include \"chainparams.h\""
      },
      {
        "sha": "0f1c166abc4166c3ed6c2de23d23532db379c9a9",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -647,7 +647,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n     if (nCheckFrequency == 0)\n         return;\n \n-    if (insecure_rand() >= nCheckFrequency)\n+    if (GetRand(std::numeric_limits<uint32_t>::max()) >= nCheckFrequency)\n         return;\n \n     LogPrint(\"mempool\", \"Checking mempool with %u transactions and %u inputs\\n\", (unsigned int)mapTx.size(), (unsigned int)mapNextTx.size());"
      },
      {
        "sha": "1763930ba05b184bb9e20800e9e731af71fbe95e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -15,6 +15,7 @@\n #include \"indirectmap.h\"\n #include \"primitives/transaction.h\"\n #include \"sync.h\"\n+#include \"random.h\"\n \n #undef foreach\n #include \"boost/multi_index_container.hpp\""
      },
      {
        "sha": "c5f55ef5f0dac3559dfc60f4383b8baeab569a00",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -2,7 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"random.h\"\n+#include \"test/test_random.h\"\n #include \"utilstrencodings.h\"\n #include \"test/test_bitcoin.h\"\n #include \"wallet/crypter.h\""
      },
      {
        "sha": "687d84e77a46fd23a44d990f089ecb0170de2d7f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "patch": "@@ -1907,7 +1907,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n     vfBest.assign(vValue.size(), true);\n     nBest = nTotalLower;\n \n-    seed_insecure_rand();\n+    FastRandomContext insecure_rand;\n \n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n@@ -1924,7 +1924,7 @@ static void ApproximateBestSubset(vector<pair<CAmount, pair<const CWalletTx*,uns\n                 //that the rng is fast. We do not use a constant random sequence,\n                 //because there may be some privacy improvement by making\n                 //the selection random.\n-                if (nPass == 0 ? insecure_rand()&1 : !vfIncluded[i])\n+                if (nPass == 0 ? insecure_rand.rand32()&1 : !vfIncluded[i])\n                 {\n                     nTotal += vValue[i].first;\n                     vfIncluded[i] = true;"
      }
    ]
  },
  {
    "sha": "83c0f7fea8f40292700742f958d0bcab81560b85",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4M2MwZjdmZWE4ZjQwMjkyNzAwNzQyZjk1OGQwYmNhYjgxNTYwYjg1",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-10-18T13:58:20Z"
      },
      "committer": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-10-18T13:58:20Z"
      },
      "message": "trivial: update 0.13.0 release note info on linux arm builds",
      "tree": {
        "sha": "8b00ffce071da41449b8c69f616820105f1389f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b00ffce071da41449b8c69f616820105f1389f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83c0f7fea8f40292700742f958d0bcab81560b85",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83c0f7fea8f40292700742f958d0bcab81560b85",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83c0f7fea8f40292700742f958d0bcab81560b85",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83c0f7fea8f40292700742f958d0bcab81560b85/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c71a654c5fffbd7d7e160142f845d9384b43faf3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c71a654c5fffbd7d7e160142f845d9384b43faf3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c71a654c5fffbd7d7e160142f845d9384b43faf3"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4c3cb97df34cf5e13939e538bd8af50759cc92f6",
        "filename": "doc/release-notes/release-notes-0.13.0.md",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83c0f7fea8f40292700742f958d0bcab81560b85/doc/release-notes/release-notes-0.13.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83c0f7fea8f40292700742f958d0bcab81560b85/doc/release-notes/release-notes-0.13.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.0.md?ref=83c0f7fea8f40292700742f958d0bcab81560b85",
        "patch": "@@ -95,14 +95,19 @@ executables.\n \n The following extra files can be found in the download directory or torrent:\n \n-- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries for the most\n-  common 32-bit ARM architecture.\n-- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries for the most\n-  common 64-bit ARM architecture.\n+- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries targeting\n+  the 32-bit ARMv7-A architecture.\n+- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries targeting\n+  the 64-bit ARMv8-A architecture.\n \n ARM builds are still experimental. If you have problems on a certain device or\n Linux distribution combination please report them on the bug tracker, it may be\n-possible to resolve them.\n+possible to resolve them. Note that the device you use must be (backward)\n+compatible with the architecture targeted by the binary that you use.\n+For example, a Raspberry Pi 2 Model B or Raspberry Pi 3 Model B (in its 32-bit\n+execution state) device, can run the 32-bit ARMv7-A targeted binary. However,\n+no model of Raspberry Pi 1 device can run either binary because they are all\n+ARMv6 architecture devices that are not compatible with ARMv7-A or ARMv8-A.\n \n Note that Android is not considered ARM Linux in this context. The executables\n are not expected to work out of the box on Android."
      }
    ]
  },
  {
    "sha": "1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZTFiOGNlYjVlYmNlNmIyY2RlZGNkOGU3Njc1ZWM5ODQ4MzQ5Y2Iy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T13:52:56Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T15:30:31Z"
      },
      "message": "Merge #8929: add software-properties-common\n\naa9d3c9 add software-properties-common (Steven)",
      "tree": {
        "sha": "9a5eef91ee82d50e446696ba2362d2dffc8add98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a5eef91ee82d50e446696ba2362d2dffc8add98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBkAXAAoJEHSBCwEjRsmm9+wH/2i1mB79KppQvKwn/UszD3GH\n5whMxt00DljmjA22n43U2XoEJimIhGKDzkLLzC9krZet9NbVFcQpCYf4YuX1tAXe\nVwj6ayAjmRkegzvaWvGMHwMeNPtiRJmtq5nmXXbBbQFms26qq+G0y+qIb8VbHDRW\nbCrVpAkn1mytX1csswH9ViRH7ahYpDE2mh3Mw1ss4sCXy93F9b3qaZxsFguUR30c\nEA4MoLYBXFnPj5D+pFjq1hBgGJAvrWw68I7iCxD1JCSpiK12gnTGrFvNzMMpwkBo\nY++0BR6p5o2/atXYWpQ3RzVU0MsSTNosHunhZbVDRycj/hVNsEiHnYiC1S745G8=\n=2RCZ\n-----END PGP SIGNATURE-----",
        "payload": "tree 9a5eef91ee82d50e446696ba2362d2dffc8add98\nparent cdfb7755a6af2e95e8598ca8e8d6896c745bcd72\nparent aa9d3c9a503952589b359624bbb0da11dd7a5e3f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476798776 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476804631 +0200\n\nMerge #8929: add software-properties-common\n\naa9d3c9 add software-properties-common (Steven)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdfb7755a6af2e95e8598ca8e8d6896c745bcd72"
      },
      {
        "sha": "aa9d3c9a503952589b359624bbb0da11dd7a5e3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa9d3c9a503952589b359624bbb0da11dd7a5e3f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aa9d3c9a503952589b359624bbb0da11dd7a5e3f"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "a7221ddc6d1609611205ff800a7c3f1b124fb810",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2",
        "patch": "@@ -82,6 +82,7 @@ install necessary parts of boost:\n BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n You can add the repository and install using the following commands:\n \n+    sudo apt-get install software-properties-common\n     sudo add-apt-repository ppa:bitcoin/bitcoin\n     sudo apt-get update\n     sudo apt-get install libdb4.8-dev libdb4.8++-dev"
      }
    ]
  },
  {
    "sha": "80a707824489b833a350e22aedd123b03e80946d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MGE3MDc4MjQ0ODliODMzYTM1MGUyMmFlZGQxMjNiMDNlODA5NDZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T16:40:42Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T16:41:45Z"
      },
      "message": "Merge #8955: doc: update 0.13.0 release note info on linux arm builds\n\n83c0f7f trivial: update 0.13.0 release note info on linux arm builds (mruddy)",
      "tree": {
        "sha": "bd90849b24dd6dbaa76175fd34b020438d6a98fd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd90849b24dd6dbaa76175fd34b020438d6a98fd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/80a707824489b833a350e22aedd123b03e80946d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBlDJAAoJEHSBCwEjRsmmhgMIALOUbjWRwO3QbH8W1ZAt/mCK\nNsUb/OdkEwwAJFOvudzTbXqjFJxI8OkPpg9tqEwWVIsk7Elm3SoowlTOV32m1HEW\ngCtA2AgZeflELJE06FNusWacymOqfej56yvlREl/dyBuB+8PccNmA5v8ZDCaIaJZ\nJ82ChpNlZnVLBNz8AfT3NQZIQnzoQE3wzt2AYEpKmLceQ2gHzRNfkAOMcVyyopG2\n5oE0Ady/LAZsLiT85BrgLgZkAQzvm30YjVkzdrVYysdiC0FZzfPmZYfpi6iJiM/t\ntenGbkYUbIA3r9Q8DzTqY42ETm2GS1BAjoaZc86hBvgQFMM9K33RYEkKr78GrAg=\n=GgsS\n-----END PGP SIGNATURE-----",
        "payload": "tree bd90849b24dd6dbaa76175fd34b020438d6a98fd\nparent 1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2\nparent 83c0f7fea8f40292700742f958d0bcab81560b85\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476808842 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476808905 +0200\n\nMerge #8955: doc: update 0.13.0 release note info on linux arm builds\n\n83c0f7f trivial: update 0.13.0 release note info on linux arm builds (mruddy)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a707824489b833a350e22aedd123b03e80946d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/80a707824489b833a350e22aedd123b03e80946d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a707824489b833a350e22aedd123b03e80946d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1e1b8ceb5ebce6b2cdedcd8e7675ec9848349cb2"
      },
      {
        "sha": "83c0f7fea8f40292700742f958d0bcab81560b85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83c0f7fea8f40292700742f958d0bcab81560b85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83c0f7fea8f40292700742f958d0bcab81560b85"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "4c3cb97df34cf5e13939e538bd8af50759cc92f6",
        "filename": "doc/release-notes/release-notes-0.13.0.md",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/80a707824489b833a350e22aedd123b03e80946d/doc/release-notes/release-notes-0.13.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/80a707824489b833a350e22aedd123b03e80946d/doc/release-notes/release-notes-0.13.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.0.md?ref=80a707824489b833a350e22aedd123b03e80946d",
        "patch": "@@ -95,14 +95,19 @@ executables.\n \n The following extra files can be found in the download directory or torrent:\n \n-- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries for the most\n-  common 32-bit ARM architecture.\n-- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries for the most\n-  common 64-bit ARM architecture.\n+- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries targeting\n+  the 32-bit ARMv7-A architecture.\n+- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries targeting\n+  the 64-bit ARMv8-A architecture.\n \n ARM builds are still experimental. If you have problems on a certain device or\n Linux distribution combination please report them on the bug tracker, it may be\n-possible to resolve them.\n+possible to resolve them. Note that the device you use must be (backward)\n+compatible with the architecture targeted by the binary that you use.\n+For example, a Raspberry Pi 2 Model B or Raspberry Pi 3 Model B (in its 32-bit\n+execution state) device, can run the 32-bit ARMv7-A targeted binary. However,\n+no model of Raspberry Pi 1 device can run either binary because they are all\n+ARMv6 architecture devices that are not compatible with ARMv7-A or ARMv8-A.\n \n Note that Android is not considered ARM Linux in this context. The executables\n are not expected to work out of the box on Android."
      }
    ]
  },
  {
    "sha": "932d02ae392b4a4971976cb533e88c8dc3daffe1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzJkMDJhZTM5MmI0YTQ5NzE5NzZjYjUzM2U4OGM4ZGMzZGFmZmUx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T18:42:23Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T18:42:59Z"
      },
      "message": "Merge #8954: contrib: Add README for pgp keys\n\nfab5ca8 contrib: Add README for pgp keys (MarcoFalke)",
      "tree": {
        "sha": "47e5d588cecbda44bb1ec73012be5d479028f6e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/47e5d588cecbda44bb1ec73012be5d479028f6e8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/932d02ae392b4a4971976cb533e88c8dc3daffe1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBm0zAAoJEHSBCwEjRsmmCB8H/0A9kpogkKpIDbUpYtL33ctj\n/qoWspbMmxQynWHT3JrOwJDc/JJf8P2zm+kBkVm5e1zd8ReRp838Hh5bSOGhFgCh\nEv98Qxqa88j0o0mpe4KnrxqGzQHqgqjr/PCszAyE06B0pDSx9YJsi+IInVOLawzV\npzvkSWcujTEdX209O2dDPN2C+UPYaO/f0uEKBuoWYGSEPzU2QkrFmMHf8ckcdIAz\n8dsucMPZbSrA2vK3/Xblom+5r7sR/rTGdP3MS9EJCwk2nsDJKMH7cPKWPmBGYxlU\nNG5JTRKcyFG07idcI9M9aBfQwpuBArLqmer0oDVm+4p6e7HIdxj9drZCOarUzDM=\n=eRMx\n-----END PGP SIGNATURE-----",
        "payload": "tree 47e5d588cecbda44bb1ec73012be5d479028f6e8\nparent 80a707824489b833a350e22aedd123b03e80946d\nparent fab5ca8fee25839b76084cabf70f3f92395112c2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476816143 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476816179 +0200\n\nMerge #8954: contrib: Add README for pgp keys\n\nfab5ca8 contrib: Add README for pgp keys (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/932d02ae392b4a4971976cb533e88c8dc3daffe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/932d02ae392b4a4971976cb533e88c8dc3daffe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/932d02ae392b4a4971976cb533e88c8dc3daffe1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "80a707824489b833a350e22aedd123b03e80946d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/80a707824489b833a350e22aedd123b03e80946d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/80a707824489b833a350e22aedd123b03e80946d"
      },
      {
        "sha": "fab5ca8fee25839b76084cabf70f3f92395112c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5ca8fee25839b76084cabf70f3f92395112c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab5ca8fee25839b76084cabf70f3f92395112c2"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "439910330d14a7d3f2f8e6be23c5393f75b163b1",
        "filename": "contrib/gitian-keys/README.md",
        "status": "added",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/932d02ae392b4a4971976cb533e88c8dc3daffe1/contrib/gitian-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/932d02ae392b4a4971976cb533e88c8dc3daffe1/contrib/gitian-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/README.md?ref=932d02ae392b4a4971976cb533e88c8dc3daffe1",
        "patch": "@@ -0,0 +1,16 @@\n+PGP keys\n+========\n+\n+This folder contains the public keys of developers and active contributors.\n+\n+The keys are mainly used to sign git commits or the build results of gitian\n+builds.\n+\n+You can import the keys into gpg as follows. Also, make sure to fetch the\n+latest version from the key server to see if any key was revoked in the\n+meantime.\n+\n+```sh\n+gpg --import ./*.pgp\n+gpg --refresh-keys\n+```"
      }
    ]
  },
  {
    "sha": "e10af96cf450494fdb893b71540e709ed311b871",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTBhZjk2Y2Y0NTA0OTRmZGI4OTNiNzE1NDBlNzA5ZWQzMTFiODcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T18:54:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:05:07Z"
      },
      "message": "Merge #8287: [wallet] Set fLimitFree = true\n\nfa8b02d [rpc] rawtx: Prepare fLimitFree to make it an option (MarcoFalke)\nfa28bfa [wallet] Set fLimitFree = true (MarcoFalke)",
      "tree": {
        "sha": "5d3140bf4c9f0ca37476dab86d85cf30b70475cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5d3140bf4c9f0ca37476dab86d85cf30b70475cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e10af96cf450494fdb893b71540e709ed311b871",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBnJjAAoJEHSBCwEjRsmmOZkIAJnX+ZiO6ZLRaNSY5ilB9QUi\nEY03sSrzwFWae77Cr+j53HxYrKr1CuGFCJBo/8JcgxPXczPJ4PP244+NHPmSZnqb\nDBJ62Dx0NFi5xycLSbRz2CpuAfYYtFfhijU4qRT+MOqWbcbuP5R52zO5JcFbW8rE\nwNENBk160siVFZnzH24t/DGFgk92nnpaF93aZacJzBiz81ltV2yTif35FmRR//ho\nFTHG3aekoUk89oPz9dfn0/fTFG3oM2IRVSPGztJFGdrJShS8SN/cIv6nEwd7Vm9x\nqWnQnisUyoetnESvI05BK0k7cteRjLoaonmek5i85LIiW1lsdaYl8NLIJ60dyE0=\n=4lT5\n-----END PGP SIGNATURE-----",
        "payload": "tree 5d3140bf4c9f0ca37476dab86d85cf30b70475cd\nparent 932d02ae392b4a4971976cb533e88c8dc3daffe1\nparent fa8b02d36d5c75266d3c8ffb91ece761ce90e774\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476816890 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476817507 +0200\n\nMerge #8287: [wallet] Set fLimitFree = true\n\nfa8b02d [rpc] rawtx: Prepare fLimitFree to make it an option (MarcoFalke)\nfa28bfa [wallet] Set fLimitFree = true (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10af96cf450494fdb893b71540e709ed311b871",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e10af96cf450494fdb893b71540e709ed311b871",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10af96cf450494fdb893b71540e709ed311b871/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "932d02ae392b4a4971976cb533e88c8dc3daffe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/932d02ae392b4a4971976cb533e88c8dc3daffe1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/932d02ae392b4a4971976cb533e88c8dc3daffe1"
      },
      {
        "sha": "fa8b02d36d5c75266d3c8ffb91ece761ce90e774",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa8b02d36d5c75266d3c8ffb91ece761ce90e774",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa8b02d36d5c75266d3c8ffb91ece761ce90e774"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "2ea65b8e99ac4cfebb8bbd4be9013aa42c8d3d0a",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10af96cf450494fdb893b71540e709ed311b871/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10af96cf450494fdb893b71540e709ed311b871/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e10af96cf450494fdb893b71540e709ed311b871",
        "patch": "@@ -874,6 +874,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n \n+    bool fLimitFree = false;\n     CAmount nMaxRawTxFee = maxTxFee;\n     if (params.size() > 1 && params[1].get_bool())\n         nMaxRawTxFee = 0;\n@@ -886,7 +887,7 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         // push to local node and sync with wallets\n         CValidationState state;\n         bool fMissingInputs;\n-        if (!AcceptToMemoryPool(mempool, state, tx, false, &fMissingInputs, false, nMaxRawTxFee)) {\n+        if (!AcceptToMemoryPool(mempool, state, tx, fLimitFree, &fMissingInputs, false, nMaxRawTxFee)) {\n             if (state.IsInvalid()) {\n                 throw JSONRPCError(RPC_TRANSACTION_REJECTED, strprintf(\"%i: %s\", state.GetRejectCode(), state.GetRejectReason()));\n             } else {"
      },
      {
        "sha": "282917d64f40b8c80033e21f1fbf557ea86008d1",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10af96cf450494fdb893b71540e709ed311b871/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10af96cf450494fdb893b71540e709ed311b871/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e10af96cf450494fdb893b71540e709ed311b871",
        "patch": "@@ -1463,7 +1463,7 @@ void CWallet::ReacceptWalletTransactions()\n         CWalletTx& wtx = *(item.second);\n \n         LOCK(mempool.cs);\n-        wtx.AcceptToMemoryPool(false, maxTxFee);\n+        wtx.AcceptToMemoryPool(maxTxFee);\n     }\n }\n \n@@ -2502,8 +2502,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(false, maxTxFee))\n-            {\n+            if (!wtxNew.AcceptToMemoryPool(maxTxFee)) {\n                 // This must not fail. The transaction has already been signed and recorded.\n                 LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n                 return false;\n@@ -3652,8 +3651,8 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(bool fLimitFree, CAmount nAbsurdFee)\n+bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee)\n {\n     CValidationState state;\n-    return ::AcceptToMemoryPool(mempool, state, *this, fLimitFree, NULL, false, nAbsurdFee);\n+    return ::AcceptToMemoryPool(mempool, state, *this, true, NULL, false, nAbsurdFee);\n }"
      },
      {
        "sha": "3b37f7cb1fd631bbdd38706119b5da32cd2938a0",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e10af96cf450494fdb893b71540e709ed311b871/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e10af96cf450494fdb893b71540e709ed311b871/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=e10af96cf450494fdb893b71540e709ed311b871",
        "patch": "@@ -215,7 +215,7 @@ class CMerkleTx : public CTransaction\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(bool fLimitFree, const CAmount nAbsurdFee);\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }"
      }
    ]
  },
  {
    "sha": "744d2652dda0251bad7c1d8e3bbb468c2fe27510",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDRkMjY1MmRkYTAyNTFiYWQ3YzFkOGUzYmJiNDY4YzJmZTI3NTEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:11:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:16:08Z"
      },
      "message": "Merge #8223: [c++11] Use std::unique_ptr for block creation.\n\n9fce062 [c++11] Use std::unique_ptr for block creation. (Daniel Kraft)",
      "tree": {
        "sha": "e5ec5ff5dd0238954af403425b94a4e084369244",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5ec5ff5dd0238954af403425b94a4e084369244"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/744d2652dda0251bad7c1d8e3bbb468c2fe27510",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBnT4AAoJEHSBCwEjRsmm/gwH/3d9LXyfWpL9AeEp2zXEOtki\nAjE8HaMghX2/Tb9uAHMIkUm+45isQPZf5O8SGXPYdrD3VIzv1fmTVb2Qb1mHMF+k\nXlRraw+Cy2LopWJWFHLPTnkrQIgINxJwSulyj0n6X+mXaBpNTNQ7GNUmEiWdBfdi\nc+lzUKODoX4S6lWWJsWwBwZ9tOGKbmcvlmLzLh9snUr45Jg6jvLmsVZJDr1cQWhB\nQK2CLn7weFecuOO7H0n3G42knABGyzR8/IlGvpmwDLzk2gxnHctoXbZWwG32CPY4\ndpHFvOCeSpP9qVnHZ94BX42YfHiEBuREZIvXrHz0buY9+CPw4C9usf8O2+3cXiw=\n=UH1n\n-----END PGP SIGNATURE-----",
        "payload": "tree e5ec5ff5dd0238954af403425b94a4e084369244\nparent e10af96cf450494fdb893b71540e709ed311b871\nparent 9fce0629b437441cb09c14055ee810b8ee6b7978\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476817882 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476818168 +0200\n\nMerge #8223: [c++11] Use std::unique_ptr for block creation.\n\n9fce062 [c++11] Use std::unique_ptr for block creation. (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/744d2652dda0251bad7c1d8e3bbb468c2fe27510",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/744d2652dda0251bad7c1d8e3bbb468c2fe27510",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/744d2652dda0251bad7c1d8e3bbb468c2fe27510/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e10af96cf450494fdb893b71540e709ed311b871",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e10af96cf450494fdb893b71540e709ed311b871",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e10af96cf450494fdb893b71540e709ed311b871"
      },
      {
        "sha": "9fce0629b437441cb09c14055ee810b8ee6b7978",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fce0629b437441cb09c14055ee810b8ee6b7978",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fce0629b437441cb09c14055ee810b8ee6b7978"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 15,
      "deletions": 24
    },
    "files": [
      {
        "sha": "ebf2f21ffd1006ad5b8e7eb846accce0c06f9952",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=744d2652dda0251bad7c1d8e3bbb468c2fe27510",
        "patch": "@@ -29,6 +29,7 @@\n #include <boost/thread.hpp>\n #include <boost/tuple/tuple.hpp>\n #include <queue>\n+#include <utility>\n \n using namespace std;\n \n@@ -122,14 +123,14 @@ void BlockAssembler::resetBlock()\n     blockFinished = false;\n }\n \n-CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n+std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n {\n     resetBlock();\n \n     pblocktemplate.reset(new CBlockTemplate());\n \n     if(!pblocktemplate.get())\n-        return NULL;\n+        return nullptr;\n     pblock = &pblocktemplate->block; // pointer for convenience\n \n     // Add dummy coinbase tx as first transaction\n@@ -194,7 +195,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n         throw std::runtime_error(strprintf(\"%s: TestBlockValidity failed: %s\", __func__, FormatStateMessage(state)));\n     }\n \n-    return pblocktemplate.release();\n+    return std::move(pblocktemplate);\n }\n \n bool BlockAssembler::isStillDependent(CTxMemPool::txiter iter)"
      },
      {
        "sha": "bad443b82ad37227b685150a485f1318161b09fc",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=744d2652dda0251bad7c1d8e3bbb468c2fe27510",
        "patch": "@@ -164,7 +164,7 @@ class BlockAssembler\n public:\n     BlockAssembler(const CChainParams& chainparams);\n     /** Construct a new block template with coinbase to scriptPubKeyIn */\n-    CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn);\n+    std::unique_ptr<CBlockTemplate> CreateNewBlock(const CScript& scriptPubKeyIn);\n \n private:\n     // utility functions"
      },
      {
        "sha": "cd3bb5c924d12dad756c21ccb951befc812bde1d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=744d2652dda0251bad7c1d8e3bbb468c2fe27510",
        "patch": "@@ -22,6 +22,7 @@\n #include \"utilstrencodings.h\"\n #include \"validationinterface.h\"\n \n+#include <memory>\n #include <stdint.h>\n \n #include <boost/assign/list_of.hpp>\n@@ -515,24 +516,19 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     // Update block\n     static CBlockIndex* pindexPrev;\n     static int64_t nStart;\n-    static CBlockTemplate* pblocktemplate;\n+    static std::unique_ptr<CBlockTemplate> pblocktemplate;\n     if (pindexPrev != chainActive.Tip() ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))\n     {\n         // Clear pindexPrev so future calls make a new block, despite any failures from here on\n-        pindexPrev = NULL;\n+        pindexPrev = nullptr;\n \n         // Store the pindexBest used before CreateNewBlock, to avoid races\n         nTransactionsUpdatedLast = mempool.GetTransactionsUpdated();\n         CBlockIndex* pindexPrevNew = chainActive.Tip();\n         nStart = GetTime();\n \n         // Create new block\n-        if(pblocktemplate)\n-        {\n-            delete pblocktemplate;\n-            pblocktemplate = NULL;\n-        }\n         CScript scriptDummy = CScript() << OP_TRUE;\n         pblocktemplate = BlockAssembler(Params()).CreateNewBlock(scriptDummy);\n         if (!pblocktemplate)"
      },
      {
        "sha": "0c48f089c7bb2f3ec7d88a5569e71430ebe18dba",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 11,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=744d2652dda0251bad7c1d8e3bbb468c2fe27510",
        "patch": "@@ -18,6 +18,8 @@\n \n #include \"test/test_bitcoin.h\"\n \n+#include <memory>\n+\n #include <boost/test/unit_test.hpp>\n \n BOOST_FIXTURE_TEST_SUITE(miner_tests, TestingSetup)\n@@ -105,7 +107,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     uint256 hashHighFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashHighFeeTx, entry.Fee(50000).Time(GetTime()).SpendsCoinbase(false).FromTx(tx));\n \n-    CBlockTemplate *pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n     BOOST_CHECK(pblocktemplate->block.vtx[1].GetHash() == hashParentTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[2].GetHash() == hashHighFeeTx);\n     BOOST_CHECK(pblocktemplate->block.vtx[3].GetHash() == hashMediumFeeTx);\n@@ -184,7 +186,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // Note that by default, these tests run with size accounting enabled.\n     const CChainParams& chainparams = Params(CBaseChainParams::MAIN);\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n-    CBlockTemplate *pblocktemplate;\n+    std::unique_ptr<CBlockTemplate> pblocktemplate;\n     CMutableTransaction tx,tx2;\n     CScript script;\n     uint256 hash;\n@@ -226,11 +228,9 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }\n-    delete pblocktemplate;\n \n     // Just to make sure we can still make simple blocks\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n \n     const CAmount BLOCKSUBSIDY = 50*COIN;\n     const CAmount LOWFEE = CENT;\n@@ -269,7 +269,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     mempool.clear();\n \n     // block size > limit\n@@ -290,7 +289,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     mempool.clear();\n \n     // orphan in mempool, template creation fails\n@@ -314,7 +312,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     hash = tx.GetHash();\n     mempool.addUnchecked(hash, entry.Fee(HIGHERFEE).Time(GetTime()).SpendsCoinbase(true).FromTx(tx));\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     mempool.clear();\n \n     // coinbase in mempool, template creation fails\n@@ -372,7 +369,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         chainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     // Extend to a 210000-long block chain.\n     while (chainActive.Tip()->nHeight < 210000) {\n         CBlockIndex* prev = chainActive.Tip();\n@@ -385,7 +381,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         chainActive.SetTip(next);\n     }\n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n-    delete pblocktemplate;\n     // Delete the dummy blocks again.\n     while (chainActive.Tip()->nHeight > nHeight) {\n         CBlockIndex* del = chainActive.Tip();\n@@ -478,7 +473,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     // but relative locked txs will if inconsistently added to mempool.\n     // For now these will still generate a valid template until BIP68 soft fork\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n-    delete pblocktemplate;\n     // However if we advance height by 1 and time by 512, all of them should be mined\n     for (int i = 0; i < CBlockIndex::nMedianTimeSpan; i++)\n         chainActive.Tip()->GetAncestor(chainActive.Tip()->nHeight - i)->nTime += 512; //Trick the MedianTimePast\n@@ -487,7 +481,6 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     BOOST_CHECK(pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey));\n     BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 5);\n-    delete pblocktemplate;\n \n     chainActive.Tip()->nHeight--;\n     SetMockTime(0);"
      },
      {
        "sha": "97076d1acbaf2c8f511673e47f68ebdf98cdd1b7",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/744d2652dda0251bad7c1d8e3bbb468c2fe27510/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=744d2652dda0251bad7c1d8e3bbb468c2fe27510",
        "patch": "@@ -22,6 +22,8 @@\n \n #include \"test/testutil.h\"\n \n+#include <memory>\n+\n #include <boost/filesystem.hpp>\n #include <boost/test/unit_test.hpp>\n #include <boost/thread.hpp>\n@@ -111,7 +113,7 @@ CBlock\n TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n {\n     const CChainParams& chainparams = Params();\n-    CBlockTemplate *pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n+    std::unique_ptr<CBlockTemplate> pblocktemplate = BlockAssembler(chainparams).CreateNewBlock(scriptPubKey);\n     CBlock& block = pblocktemplate->block;\n \n     // Replace mempool-selected txns with just coinbase plus passed-in txns:\n@@ -128,7 +130,6 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     ProcessNewBlock(state, chainparams, NULL, &block, true, NULL, connman);\n \n     CBlock result = block;\n-    delete pblocktemplate;\n     return result;\n }\n "
      }
    ]
  },
  {
    "sha": "0b5a997acfb64878363f0b04a69d6df27a289aa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYjVhOTk3YWNmYjY0ODc4MzYzZjBiMDRhNjlkNmRmMjdhMjg5YWEw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:18:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:19:54Z"
      },
      "message": "Merge #8637: Compact Block Tweaks (rebase of #8235)\n\n3ac6de0 Align constant names for maximum compact block / blocktxn depth (Pieter Wuille)\nb2e93a3 Add cmpctblock to debug help list (instagibbs)\nfe998e9 More agressively filter compact block requests (Matt Corallo)\n02a337d Dont remove a \"preferred\" cmpctblock peer if they provide a block (Matt Corallo)",
      "tree": {
        "sha": "5eb8c41a2ab311c4956f5bb20620374a7e2dc97d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5eb8c41a2ab311c4956f5bb20620374a7e2dc97d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0b5a997acfb64878363f0b04a69d6df27a289aa0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBnXaAAoJEHSBCwEjRsmm3m8H/RZK78+WZKhAOT1dzEa3gwi5\nmNHNuH7n5x+cYOYR5V872PXm1LYvRlwPGx4ITzsPEd0JSEk9eHslrI717Bz7FARs\n8ee61XKE6oUg6h8oJ9Hoy+DP7GT1FCBmCeJRZKOZAso2sVl1j4iQ1lCwRol+oJF8\n6oRvH8VBbQ5sghVYFhUvIQUGH6uuHdx6VbLwz6A4cuubBaR1I4M439ywuJULcGB7\nV4kLvuLTrbrdilr6ks/zm5yfJDHbJJIPEp2098WF6GqDBD33tAC86xf7VEI+vusB\nfHHScLQ/iOeFcoSF3lpjalfHr0aLEtTtN3DoyXSgyd3Qg3XKkYgEp9N6Vktzeuk=\n=8CAr\n-----END PGP SIGNATURE-----",
        "payload": "tree 5eb8c41a2ab311c4956f5bb20620374a7e2dc97d\nparent 744d2652dda0251bad7c1d8e3bbb468c2fe27510\nparent 3ac6de0a045cc9b2047ceb19af970e7ffbf905fa\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476818290 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476818394 +0200\n\nMerge #8637: Compact Block Tweaks (rebase of #8235)\n\n3ac6de0 Align constant names for maximum compact block / blocktxn depth (Pieter Wuille)\nb2e93a3 Add cmpctblock to debug help list (instagibbs)\nfe998e9 More agressively filter compact block requests (Matt Corallo)\n02a337d Dont remove a \"preferred\" cmpctblock peer if they provide a block (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b5a997acfb64878363f0b04a69d6df27a289aa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0b5a997acfb64878363f0b04a69d6df27a289aa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b5a997acfb64878363f0b04a69d6df27a289aa0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "744d2652dda0251bad7c1d8e3bbb468c2fe27510",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/744d2652dda0251bad7c1d8e3bbb468c2fe27510",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/744d2652dda0251bad7c1d8e3bbb468c2fe27510"
      },
      {
        "sha": "3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3ac6de0a045cc9b2047ceb19af970e7ffbf905fa"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 24,
      "deletions": 9
    },
    "files": [
      {
        "sha": "6b5d4771310778e617cc4192b68f68c49502787e",
        "filename": "qa/rpc-tests/p2p-compactblocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b5a997acfb64878363f0b04a69d6df27a289aa0/qa/rpc-tests/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b5a997acfb64878363f0b04a69d6df27a289aa0/qa/rpc-tests/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-compactblocks.py?ref=0b5a997acfb64878363f0b04a69d6df27a289aa0",
        "patch": "@@ -591,7 +591,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n     def test_getblocktxn_handler(self, node, test_node, version):\n         # bitcoind won't respond for blocks whose height is more than 15 blocks\n         # deep.\n-        MAX_GETBLOCKTXN_DEPTH = 15\n+        MAX_GETBLOCKTXN_DEPTH = 10\n         chain_height = node.getblockcount()\n         current_height = chain_height\n         while (current_height >= chain_height - MAX_GETBLOCKTXN_DEPTH):\n@@ -632,9 +632,9 @@ def test_getblocktxn_handler(self, node, test_node, version):\n \n     def test_compactblocks_not_at_tip(self, node, test_node):\n         # Test that requesting old compactblocks doesn't work.\n-        MAX_CMPCTBLOCK_DEPTH = 11\n+        MAX_CMPCTBLOCK_DEPTH = 5\n         new_blocks = []\n-        for i in range(MAX_CMPCTBLOCK_DEPTH):\n+        for i in range(MAX_CMPCTBLOCK_DEPTH + 1):\n             test_node.clear_block_announcement()\n             new_blocks.append(node.generate(1)[0])\n             wait_until(test_node.received_block_announcement, timeout=30)"
      },
      {
        "sha": "685188c4584625ba0599fa5a1f8a63b1e6c5fe25",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b5a997acfb64878363f0b04a69d6df27a289aa0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b5a997acfb64878363f0b04a69d6df27a289aa0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=0b5a997acfb64878363f0b04a69d6df27a289aa0",
        "patch": "@@ -423,7 +423,7 @@ std::string HelpMessage(HelpMessageMode mode)\n         strUsage += HelpMessageOpt(\"-limitdescendantsize=<n>\", strprintf(\"Do not accept transactions if any ancestor would have more than <n> kilobytes of in-mempool descendants (default: %u).\", DEFAULT_DESCENDANT_SIZE_LIMIT));\n         strUsage += HelpMessageOpt(\"-bip9params=deployment:start:end\", \"Use given start/end times for specified BIP9 deployment (regtest-only)\");\n     }\n-    string debugCategories = \"addrman, alert, bench, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, cmpctblock, coindb, db, http, libevent, lock, mempool, mempoolrej, net, proxy, prune, rand, reindex, rpc, selectcoins, tor, zmq\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n         debugCategories += \", qt\";\n     strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +"
      },
      {
        "sha": "9f3116e358c24d59edbfd3eb08a45af43a3ee09e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b5a997acfb64878363f0b04a69d6df27a289aa0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b5a997acfb64878363f0b04a69d6df27a289aa0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0b5a997acfb64878363f0b04a69d6df27a289aa0",
        "patch": "@@ -485,9 +485,13 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(const CNodeState* nodestate, CNode* pf\n         return;\n     }\n     if (nodestate->fProvidesHeaderAndIDs) {\n-        BOOST_FOREACH(const NodeId nodeid, lNodesAnnouncingHeaderAndIDs)\n-            if (nodeid == pfrom->GetId())\n+        for (std::list<NodeId>::iterator it = lNodesAnnouncingHeaderAndIDs.begin(); it != lNodesAnnouncingHeaderAndIDs.end(); it++) {\n+            if (*it == pfrom->GetId()) {\n+                lNodesAnnouncingHeaderAndIDs.erase(it);\n+                lNodesAnnouncingHeaderAndIDs.push_back(pfrom->GetId());\n                 return;\n+            }\n+        }\n         bool fAnnounceUsingCMPCTBLOCK = false;\n         uint64_t nCMPCTBLOCKVersion = (pfrom->GetLocalServices() & NODE_WITNESS) ? 2 : 1;\n         if (lNodesAnnouncingHeaderAndIDs.size() >= 3) {\n@@ -4875,7 +4879,7 @@ void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParam\n                         // and we don't feel like constructing the object for them, so\n                         // instead we respond with the full, non-compact block.\n                         bool fPeerWantsWitness = State(pfrom->GetId())->fWantsCmpctWitness;\n-                        if (mi->second->nHeight >= chainActive.Height() - 10) {\n+                        if (CanDirectFetch(consensusParams) && mi->second->nHeight >= chainActive.Height() - MAX_CMPCTBLOCK_DEPTH) {\n                             CBlockHeaderAndShortTxIDs cmpctblock(block, fPeerWantsWitness);\n                             pfrom->PushMessageWithFlag(fPeerWantsWitness ? 0 : SERIALIZE_TRANSACTION_NO_WITNESS, NetMsgType::CMPCTBLOCK, cmpctblock);\n                         } else\n@@ -5403,8 +5407,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             return true;\n         }\n \n-        if (it->second->nHeight < chainActive.Height() - 15) {\n-            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > 15 deep\", pfrom->id);\n+        if (it->second->nHeight < chainActive.Height() - MAX_BLOCKTXN_DEPTH) {\n+            LogPrint(\"net\", \"Peer %d sent us a getblocktxn for a block > %i deep\", pfrom->id, MAX_BLOCKTXN_DEPTH);\n             return true;\n         }\n \n@@ -5733,6 +5737,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     return true;\n                 }\n \n+                if (!fAlreadyInFlight && mapBlocksInFlight.size() == 1 && pindex->pprev->IsValid(BLOCK_VALID_CHAIN)) {\n+                    // We seem to be rather well-synced, so it appears pfrom was the first to provide us\n+                    // with this block! Let's get them to announce using compact blocks in the future.\n+                    MaybeSetPeerAsAnnouncingHeaderAndIDs(nodestate, pfrom, connman);\n+                }\n+\n                 BlockTransactionsRequest req;\n                 for (size_t i = 0; i < cmpctblock.BlockTxCount(); i++) {\n                     if (!partialBlock.IsTxAvailable(i))"
      },
      {
        "sha": "db58b274872b1514c87dc6dde999d414b488e954",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0b5a997acfb64878363f0b04a69d6df27a289aa0/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0b5a997acfb64878363f0b04a69d6df27a289aa0/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=0b5a997acfb64878363f0b04a69d6df27a289aa0",
        "patch": "@@ -90,6 +90,11 @@ static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n /** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n  *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n static const unsigned int MAX_HEADERS_RESULTS = 2000;\n+/** Maximum depth of blocks we're willing to serve as compact blocks to peers\n+ *  when requested. For older blocks, a regular BLOCK response will be sent. */\n+static const int MAX_CMPCTBLOCK_DEPTH = 5;\n+/** Maximum depth of blocks we're willing to respond to GETBLOCKTXN requests for. */\n+static const int MAX_BLOCKTXN_DEPTH = 10;\n /** Size of the \"block download window\": how far ahead of our current height do we fetch?\n  *  Larger windows tolerate larger download speed differences between peer, but increase the potential\n  *  degree of disordering of blocks on disk (which make reindexing and in the future perhaps pruning"
      }
    ]
  },
  {
    "sha": "df7519cbc1a9613a557bf84ad3c124795155f287",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjc1MTljYmMxYTk2MTNhNTU3YmY4NGFkM2MxMjQ3OTUxNTVmMjg3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-18T19:20:07Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-18T19:20:20Z"
      },
      "message": "Merge #8908: Update bitcoin-qt.desktop\n\n164196b Simple Update to File 'bitcoin-qt.desktop' (matthias)",
      "tree": {
        "sha": "0cb87fb0364d85c63f587abceb7458bf21b7389e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0cb87fb0364d85c63f587abceb7458bf21b7389e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df7519cbc1a9613a557bf84ad3c124795155f287",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYBnX0AAoJECnUvLZBb1Ps91kQAJSBTo/hYyABTS0C6GWB84xn\nFQGTHyz58gAWBGHhE250X30L49dIjAB615wmwitn2hQkt1PXLLSE6a9VHwrFLFwI\niVdDNLTES/lqAInkSjSgH1gnhqo2nPPaIXHZfzlam4ik4NDQcdltYbe2qXz3DjEx\nGLfK3oHvTXhBYMkrzcrRTnJHYCVuoHZmFMpAxfQ3Mgxj1pncxyXALKbPNtmZ/Q5g\nTPwkBGanBLt824MKqKF4Z1L7b5NA1sTW2Nk6rzCoA2eRACQ6B0AUDxlu9yW4xNmK\n/U2DHlRMbcqzEYoKsbzo0H+4JQTC5ObvTVS4dbkDiCO/b9sqVB4Jb6YAkLjWHTdn\ngN3ySnBXkTz5KDHFD2spX/A6YGWXDJRd+Sx0du8wGVk3uQ8N9I7Y1ZxdtRtFSvZF\nTJhXDCXPityBvNx8zD7aNWeqJ23wyiDrpuZ0X9Svm0plakZqODMlCNPq7g6KVMhy\n3WZVP+kUOKIvyZb4NK/jXyuyUEi5g9MuoE3+pHQgauu26VaJRpNLQ5DB6vBYlluO\nwLo0i+TqxxVYz/2dNAmDC7R1n/A2iITotfBjMvOuITeUbgSzh0LUKQScZEEArWDA\npVpazXdS2t4Tup/4Bsvh1vT6RqXDLqRUluG28zviylvQ2D7TcVZkkIJQ2aldsuVg\n/ZLS8gMt1Ykwu+hGd8bb\n=70ss\n-----END PGP SIGNATURE-----",
        "payload": "tree 0cb87fb0364d85c63f587abceb7458bf21b7389e\nparent 0b5a997acfb64878363f0b04a69d6df27a289aa0\nparent 164196b7c8aecb72dd20c8681bb24b81b18aecaa\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1476818407 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476818420 +0200\n\nMerge #8908: Update bitcoin-qt.desktop\n\n164196b Simple Update to File 'bitcoin-qt.desktop' (matthias)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7519cbc1a9613a557bf84ad3c124795155f287",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df7519cbc1a9613a557bf84ad3c124795155f287",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7519cbc1a9613a557bf84ad3c124795155f287/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b5a997acfb64878363f0b04a69d6df27a289aa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b5a997acfb64878363f0b04a69d6df27a289aa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b5a997acfb64878363f0b04a69d6df27a289aa0"
      },
      {
        "sha": "164196b7c8aecb72dd20c8681bb24b81b18aecaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/164196b7c8aecb72dd20c8681bb24b81b18aecaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/164196b7c8aecb72dd20c8681bb24b81b18aecaa"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "593d7584ab06d3147dfa56c708d250041472fd32",
        "filename": "contrib/debian/bitcoin-qt.desktop",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df7519cbc1a9613a557bf84ad3c124795155f287/contrib/debian/bitcoin-qt.desktop",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df7519cbc1a9613a557bf84ad3c124795155f287/contrib/debian/bitcoin-qt.desktop",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/bitcoin-qt.desktop?ref=df7519cbc1a9613a557bf84ad3c124795155f287",
        "patch": "@@ -1,7 +1,8 @@\n [Desktop Entry]\n Encoding=UTF-8\n-Name=Bitcoin\n-Comment=Bitcoin P2P Cryptocurrency\n+Name=Bitcoin Core\n+Comment=Connect to the Bitcoin P2P Network\n+Comment[de]=Verbinde mit dem Bitcoin peer-to-peer Netzwerk\n Comment[fr]=Bitcoin, monnaie virtuelle cryptographique pair \u00e0 pair\n Comment[tr]=Bitcoin, e\u015ften e\u015fe kriptografik sanal para birimi\n Exec=bitcoin-qt %u"
      }
    ]
  },
  {
    "sha": "72ca7d924e3896838d2709d95f4c8cca670af8cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmNhN2Q5MjRlMzg5NjgzOGQyNzA5ZDk1ZjRjOGNjYTY3MGFmOGNm",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-09-30T21:12:00Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-18T19:24:59Z"
      },
      "message": "Don't hold cs_main when calling ProcessNewBlock from a cmpctblock",
      "tree": {
        "sha": "f9816dfc8c59e9aa0e891da6fc9fab0241405b9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9816dfc8c59e9aa0e891da6fc9fab0241405b9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72ca7d924e3896838d2709d95f4c8cca670af8cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ca7d924e3896838d2709d95f4c8cca670af8cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72ca7d924e3896838d2709d95f4c8cca670af8cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ca7d924e3896838d2709d95f4c8cca670af8cf/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df7519cbc1a9613a557bf84ad3c124795155f287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7519cbc1a9613a557bf84ad3c124795155f287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df7519cbc1a9613a557bf84ad3c124795155f287"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 26,
      "deletions": 21
    },
    "files": [
      {
        "sha": "4199cb30e8397921de4107cc9e1341059af08421",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 21,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72ca7d924e3896838d2709d95f4c8cca670af8cf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72ca7d924e3896838d2709d95f4c8cca670af8cf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=72ca7d924e3896838d2709d95f4c8cca670af8cf",
        "patch": "@@ -5787,29 +5787,34 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         BlockTransactions resp;\n         vRecv >> resp;\n \n-        LOCK(cs_main);\n+        CBlock block;\n+        bool fBlockRead = false;\n+        {\n+            LOCK(cs_main);\n \n-        map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n-        if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n-                it->second.first != pfrom->GetId()) {\n-            LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n-            return true;\n-        }\n+            map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n+            if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n+                    it->second.first != pfrom->GetId()) {\n+                LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+                return true;\n+            }\n \n-        PartiallyDownloadedBlock& partialBlock = *it->second.second->partialBlock;\n-        CBlock block;\n-        ReadStatus status = partialBlock.FillBlock(block, resp.txn);\n-        if (status == READ_STATUS_INVALID) {\n-            MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n-            Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->id);\n-            return true;\n-        } else if (status == READ_STATUS_FAILED) {\n-            // Might have collided, fall back to getdata now :(\n-            std::vector<CInv> invs;\n-            invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n-            pfrom->PushMessage(NetMsgType::GETDATA, invs);\n-        } else {\n+            PartiallyDownloadedBlock& partialBlock = *it->second.second->partialBlock;\n+            ReadStatus status = partialBlock.FillBlock(block, resp.txn);\n+            if (status == READ_STATUS_INVALID) {\n+                MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n+                Misbehaving(pfrom->GetId(), 100);\n+                LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->id);\n+                return true;\n+            } else if (status == READ_STATUS_FAILED) {\n+                // Might have collided, fall back to getdata now :(\n+                std::vector<CInv> invs;\n+                invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n+                pfrom->PushMessage(NetMsgType::GETDATA, invs);\n+            } else\n+                fBlockRead = true;\n+        } // Don't hold cs_main when we call into ProcessNewBlock\n+        if (fBlockRead) {\n             CValidationState state;\n             ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL, &connman);\n             int nDoS;"
      }
    ]
  },
  {
    "sha": "7f71a3c591945769ad33e5734105219062311d1e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjcxYTNjNTkxOTQ1NzY5YWQzM2U1NzM0MTA1MjE5MDYyMzExZDFl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:35:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:36:38Z"
      },
      "message": "Merge #6996: Add preciousblock RPC\n\n5805ac8 Add preciousblock tests (Pieter Wuille)\n5127c4f Add preciousblock RPC (Pieter Wuille)",
      "tree": {
        "sha": "fe9c4008eeeb0f912630ecf80b7342072f15e353",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fe9c4008eeeb0f912630ecf80b7342072f15e353"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f71a3c591945769ad33e5734105219062311d1e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBnnGAAoJEHSBCwEjRsmm/vQIALUdVIrm9dpeEVN9APCmpRUe\n732/G+HEFl9TAGEKH67JoUBTl6PGZWWgmZpb8QC9bL6ltYS4y81R36rbg2tk0Qfv\nBwMoiUeMQmAs+CY5O4CeUtKQoMkubQSfij+OM8VfBQKjezYJY01ZjRg+BeNSYDHU\nMJK9Ld/8Sdb4adX94NzxV2WfiCe3IEGOY7YSW613W30ToxJGCllkipkYlFu+J7Jw\nPNjU533nwMPn5XBg8hTkuhsbAP7uMeZoyu3yCSPFwi46r7dT9RORCuTKgg6n0SLh\njLXR5AeRpWl3u8t7PU1VrZc83zM5NE/CQzQ15DrPPD+xyVvQpezwXFJOzd2aGUY=\n=tAZO\n-----END PGP SIGNATURE-----",
        "payload": "tree fe9c4008eeeb0f912630ecf80b7342072f15e353\nparent df7519cbc1a9613a557bf84ad3c124795155f287\nparent 5805ac836c5847bc54cbef3e71154d022ca18eda\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476819327 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476819398 +0200\n\nMerge #6996: Add preciousblock RPC\n\n5805ac8 Add preciousblock tests (Pieter Wuille)\n5127c4f Add preciousblock RPC (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f71a3c591945769ad33e5734105219062311d1e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f71a3c591945769ad33e5734105219062311d1e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f71a3c591945769ad33e5734105219062311d1e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df7519cbc1a9613a557bf84ad3c124795155f287",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df7519cbc1a9613a557bf84ad3c124795155f287",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df7519cbc1a9613a557bf84ad3c124795155f287"
      },
      {
        "sha": "5805ac836c5847bc54cbef3e71154d022ca18eda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5805ac836c5847bc54cbef3e71154d022ca18eda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5805ac836c5847bc54cbef3e71154d022ca18eda"
      }
    ],
    "stats": {
      "total": 210,
      "additions": 207,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7430bb22565e4438c60faf8e98ba5d32161ecc80",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f71a3c591945769ad33e5734105219062311d1e/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f71a3c591945769ad33e5734105219062311d1e/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=7f71a3c591945769ad33e5734105219062311d1e",
        "patch": "@@ -140,6 +140,7 @@\n     'invalidtxrequest.py',\n     'abandonconflict.py',\n     'p2p-versionbits-warning.py',\n+    'preciousblock.py',\n     'importprunedfunds.py',\n     'signmessages.py',\n     'p2p-compactblocks.py',"
      },
      {
        "sha": "854dcc7251d1d4625af810a58ea75523430f83f4",
        "filename": "qa/rpc-tests/preciousblock.py",
        "status": "added",
        "additions": 116,
        "deletions": 0,
        "changes": 116,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f71a3c591945769ad33e5734105219062311d1e/qa/rpc-tests/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f71a3c591945769ad33e5734105219062311d1e/qa/rpc-tests/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/preciousblock.py?ref=7f71a3c591945769ad33e5734105219062311d1e",
        "patch": "@@ -0,0 +1,116 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2015 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test PreciousBlock code\n+#\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+def unidirectional_node_sync_via_rpc(node_src, node_dest):\n+    blocks_to_copy = []\n+    blockhash = node_src.getbestblockhash()\n+    while True:\n+        try:\n+            assert(len(node_dest.getblock(blockhash, False)) > 0)\n+            break\n+        except:\n+            blocks_to_copy.append(blockhash)\n+            blockhash = node_src.getblockheader(blockhash, True)['previousblockhash']\n+    blocks_to_copy.reverse()\n+    for blockhash in blocks_to_copy:\n+        blockdata = node_src.getblock(blockhash, False)\n+        assert(node_dest.submitblock(blockdata) in (None, 'inconclusive'))\n+\n+def node_sync_via_rpc(nodes):\n+    for node_src in nodes:\n+        for node_dest in nodes:\n+            if node_src is node_dest:\n+                continue\n+            unidirectional_node_sync_via_rpc(node_src, node_dest)\n+\n+class PreciousTest(BitcoinTestFramework):\n+    def setup_chain(self):\n+        print(\"Initializing test directory \"+self.options.tmpdir)\n+        initialize_chain_clean(self.options.tmpdir, 3)\n+\n+    def setup_network(self):\n+        self.nodes = []\n+        self.is_network_split = False\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-debug\"]))\n+        self.nodes.append(start_node(2, self.options.tmpdir, [\"-debug\"]))\n+\n+    def run_test(self):\n+        print(\"Ensure submitblock can in principle reorg to a competing chain\")\n+        self.nodes[0].generate(1)\n+        assert(self.nodes[0].getblockcount() == 1)\n+        (hashY, hashZ) = self.nodes[1].generate(2)\n+        assert(self.nodes[1].getblockcount() == 2)\n+        node_sync_via_rpc(self.nodes[0:3])\n+        assert(self.nodes[0].getbestblockhash() == hashZ)\n+\n+        print(\"Mine blocks A-B-C on Node 0\")\n+        (hashA, hashB, hashC) = self.nodes[0].generate(3)\n+        assert(self.nodes[0].getblockcount() == 5)\n+        print(\"Mine competing blocks E-F-G on Node 1\")\n+        (hashE, hashF, hashG) = self.nodes[1].generate(3)\n+        assert(self.nodes[1].getblockcount() == 5)\n+        assert(hashC != hashG)\n+        print(\"Connect nodes and check no reorg occurs\")\n+        # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n+        node_sync_via_rpc(self.nodes[0:2])\n+        connect_nodes_bi(self.nodes,0,1)\n+        assert(self.nodes[0].getbestblockhash() == hashC)\n+        assert(self.nodes[1].getbestblockhash() == hashG)\n+        print(\"Make Node0 prefer block G\")\n+        self.nodes[0].preciousblock(hashG)\n+        assert(self.nodes[0].getbestblockhash() == hashG)\n+        print(\"Make Node0 prefer block C again\")\n+        self.nodes[0].preciousblock(hashC)\n+        assert(self.nodes[0].getbestblockhash() == hashC)\n+        print(\"Make Node1 prefer block C\")\n+        self.nodes[1].preciousblock(hashC)\n+        sync_chain(self.nodes[0:2]) # wait because node 1 may not have downloaded hashC\n+        assert(self.nodes[1].getbestblockhash() == hashC)\n+        print(\"Make Node1 prefer block G again\")\n+        self.nodes[1].preciousblock(hashG)\n+        assert(self.nodes[1].getbestblockhash() == hashG)\n+        print(\"Make Node0 prefer block G again\")\n+        self.nodes[0].preciousblock(hashG)\n+        assert(self.nodes[0].getbestblockhash() == hashG)\n+        print(\"Make Node1 prefer block C again\")\n+        self.nodes[1].preciousblock(hashC)\n+        assert(self.nodes[1].getbestblockhash() == hashC)\n+        print(\"Mine another block (E-F-G-)H on Node 0 and reorg Node 1\")\n+        self.nodes[0].generate(1)\n+        assert(self.nodes[0].getblockcount() == 6)\n+        sync_blocks(self.nodes[0:2])\n+        hashH = self.nodes[0].getbestblockhash()\n+        assert(self.nodes[1].getbestblockhash() == hashH)\n+        print(\"Node1 should not be able to prefer block C anymore\")\n+        self.nodes[1].preciousblock(hashC)\n+        assert(self.nodes[1].getbestblockhash() == hashH)\n+        print(\"Mine competing blocks I-J-K-L on Node 2\")\n+        self.nodes[2].generate(4)\n+        assert(self.nodes[2].getblockcount() == 6)\n+        hashL = self.nodes[2].getbestblockhash()\n+        print(\"Connect nodes and check no reorg occurs\")\n+        node_sync_via_rpc(self.nodes[0:3])\n+        connect_nodes_bi(self.nodes,1,2)\n+        connect_nodes_bi(self.nodes,0,2)\n+        assert(self.nodes[0].getbestblockhash() == hashH)\n+        assert(self.nodes[1].getbestblockhash() == hashH)\n+        assert(self.nodes[2].getbestblockhash() == hashL)\n+        print(\"Make Node1 prefer block L\")\n+        self.nodes[1].preciousblock(hashL)\n+        assert(self.nodes[1].getbestblockhash() == hashL)\n+        print(\"Make Node2 prefer block H\")\n+        self.nodes[2].preciousblock(hashH)\n+        assert(self.nodes[2].getbestblockhash() == hashH)\n+\n+if __name__ == '__main__':\n+    PreciousTest().main()"
      },
      {
        "sha": "c818af4bd715541bc1ac1c986c4e86b25c322f85",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f71a3c591945769ad33e5734105219062311d1e/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f71a3c591945769ad33e5734105219062311d1e/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=7f71a3c591945769ad33e5734105219062311d1e",
        "patch": "@@ -137,6 +137,16 @@ def sync_blocks(rpc_connections, wait=1, timeout=60):\n         maxheight = max(heights)\n     raise AssertionError(\"Block sync failed\")\n \n+def sync_chain(rpc_connections, wait=1):\n+    \"\"\"\n+    Wait until everybody has the same best block\n+    \"\"\"\n+    while True:\n+        counts = [ x.getbestblockhash() for x in rpc_connections ]\n+        if counts == [ counts[0] ]*len(counts):\n+            break\n+        time.sleep(wait)\n+\n def sync_mempools(rpc_connections, wait=1, timeout=60):\n     \"\"\"\n     Wait until everybody has the same transactions in their memory"
      },
      {
        "sha": "e2f8c565224c294ed0efbe152d209cd09644ced0",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f71a3c591945769ad33e5734105219062311d1e/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f71a3c591945769ad33e5734105219062311d1e/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=7f71a3c591945769ad33e5734105219062311d1e",
        "patch": "@@ -200,7 +200,7 @@ class CBlockIndex\n     unsigned int nNonce;\n \n     //! (memory only) Sequential id assigned to distinguish order in which blocks are received.\n-    uint32_t nSequenceId;\n+    int32_t nSequenceId;\n \n     void SetNull()\n     {"
      },
      {
        "sha": "cb3e771602d45fc03ddaccbaec9edaf555b14499",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 2,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f71a3c591945769ad33e5734105219062311d1e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f71a3c591945769ad33e5734105219062311d1e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7f71a3c591945769ad33e5734105219062311d1e",
        "patch": "@@ -169,7 +169,11 @@ namespace {\n      */\n     CCriticalSection cs_nBlockSequenceId;\n     /** Blocks loaded from disk are assigned id 0, so start the counter at 1. */\n-    uint32_t nBlockSequenceId = 1;\n+    int32_t nBlockSequenceId = 1;\n+    /** Decreasing counter (used by subsequent preciousblock calls). */\n+    int32_t nBlockReverseSequenceId = -1;\n+    /** chainwork for the last block that preciousblock has been applied to. */\n+    arith_uint256 nLastPreciousChainwork = 0;\n \n     /**\n      * Sources of received blocks, saved to be able to send them reject\n@@ -3137,6 +3141,36 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n     return true;\n }\n \n+\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex)\n+{\n+    {\n+        LOCK(cs_main);\n+        if (pindex->nChainWork < chainActive.Tip()->nChainWork) {\n+            // Nothing to do, this block is not at the tip.\n+            return true;\n+        }\n+        if (chainActive.Tip()->nChainWork > nLastPreciousChainwork) {\n+            // The chain has been extended since the last call, reset the counter.\n+            nBlockReverseSequenceId = -1;\n+        }\n+        nLastPreciousChainwork = chainActive.Tip()->nChainWork;\n+        setBlockIndexCandidates.erase(pindex);\n+        pindex->nSequenceId = nBlockReverseSequenceId;\n+        if (nBlockReverseSequenceId > std::numeric_limits<int32_t>::min()) {\n+            // We can't keep reducing the counter if somebody really wants to\n+            // call preciousblock 2**31-1 times on the same set of tips...\n+            nBlockReverseSequenceId--;\n+        }\n+        if (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) && pindex->nChainTx) {\n+            setBlockIndexCandidates.insert(pindex);\n+            PruneBlockIndexCandidates();\n+        }\n+    }\n+\n+    return ActivateBestChain(state, params);\n+}\n+\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex)\n {\n     AssertLockHeld(cs_main);\n@@ -4531,7 +4565,7 @@ void static CheckBlockIndex(const Consensus::Params& consensusParams)\n             assert(pindex->GetBlockHash() == consensusParams.hashGenesisBlock); // Genesis block's hash must match.\n             assert(pindex == chainActive.Genesis()); // The current active chain's genesis block must be this block.\n         }\n-        if (pindex->nChainTx == 0) assert(pindex->nSequenceId == 0);  // nSequenceId can't be set for blocks that aren't linked\n+        if (pindex->nChainTx == 0) assert(pindex->nSequenceId <= 0);  // nSequenceId can't be set positive for blocks that aren't linked (negative is used for preciousblock)\n         // VALID_TRANSACTIONS is equivalent to nTx > 0 for all nodes (whether or not pruning has occurred).\n         // HAVE_DATA is only equivalent to nTx > 0 (or VALID_TRANSACTIONS) if no pruning has occurred.\n         if (!fHavePruned) {"
      },
      {
        "sha": "49768f21c1ae68b7a12768d98af1d34d8fbcf1f2",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f71a3c591945769ad33e5734105219062311d1e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f71a3c591945769ad33e5734105219062311d1e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7f71a3c591945769ad33e5734105219062311d1e",
        "patch": "@@ -509,6 +509,9 @@ class CVerifyDB {\n /** Find the last common block between the parameter chain and a locator. */\n CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n \n+/** Mark a block as precious and reorganize. */\n+bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n+\n /** Mark a block as invalid. */\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n "
      },
      {
        "sha": "1ca4a7c6d74a6388f4df35c1c19b900af655776f",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f71a3c591945769ad33e5734105219062311d1e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f71a3c591945769ad33e5734105219062311d1e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=7f71a3c591945769ad33e5734105219062311d1e",
        "patch": "@@ -1251,6 +1251,44 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     return mempoolInfoToJSON();\n }\n \n+UniValue preciousblock(const UniValue& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"preciousblock \\\"hash\\\"\\n\"\n+            \"\\nTreats a block as if it were received before others with the same work.\\n\"\n+            \"\\nA later preciousblock call can override the effect of an earlier one.\\n\"\n+            \"\\nThe effects of preciousblock are not retained across restarts.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. hash   (string, required) the hash of the block to mark as precious\\n\"\n+            \"\\nResult:\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n+            + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n+        );\n+\n+    std::string strHash = params[0].get_str();\n+    uint256 hash(uint256S(strHash));\n+    CBlockIndex* pblockindex;\n+\n+    {\n+        LOCK(cs_main);\n+        if (mapBlockIndex.count(hash) == 0)\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n+\n+        pblockindex = mapBlockIndex[hash];\n+    }\n+\n+    CValidationState state;\n+    PreciousBlock(state, Params(), pblockindex);\n+\n+    if (!state.IsValid()) {\n+        throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());\n+    }\n+\n+    return NullUniValue;\n+}\n+\n UniValue invalidateblock(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n@@ -1346,6 +1384,8 @@ static const CRPCCommand commands[] =\n     { \"blockchain\",         \"gettxoutsetinfo\",        &gettxoutsetinfo,        true  },\n     { \"blockchain\",         \"verifychain\",            &verifychain,            true  },\n \n+    { \"blockchain\",         \"preciousblock\",          &preciousblock,          true  },\n+\n     /* Not shown in help */\n     { \"hidden\",             \"invalidateblock\",        &invalidateblock,        true  },\n     { \"hidden\",             \"reconsiderblock\",        &reconsiderblock,        true  },"
      }
    ]
  },
  {
    "sha": "b55d823369b163edfe23f92983b2287441b98fa2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTVkODIzMzY5YjE2M2VkZmUyM2Y5Mjk4M2IyMjg3NDQxYjk4ZmEy",
    "commit": {
      "author": {
        "name": "anduck",
        "email": "anduck@users.noreply.github.com",
        "date": "2016-10-18T19:43:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-18T19:45:56Z"
      },
      "message": "Explicitly state that PPA is for Ubuntu only",
      "tree": {
        "sha": "1ef90d249283ae46c17e187e938aafeabc4c45ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1ef90d249283ae46c17e187e938aafeabc4c45ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b55d823369b163edfe23f92983b2287441b98fa2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55d823369b163edfe23f92983b2287441b98fa2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b55d823369b163edfe23f92983b2287441b98fa2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55d823369b163edfe23f92983b2287441b98fa2/comments",
    "author": {
      "login": "anduck",
      "id": 6894265,
      "node_id": "MDQ6VXNlcjY4OTQyNjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6894265?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/anduck",
      "html_url": "https://github.com/anduck",
      "followers_url": "https://api.github.com/users/anduck/followers",
      "following_url": "https://api.github.com/users/anduck/following{/other_user}",
      "gists_url": "https://api.github.com/users/anduck/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/anduck/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/anduck/subscriptions",
      "organizations_url": "https://api.github.com/users/anduck/orgs",
      "repos_url": "https://api.github.com/users/anduck/repos",
      "events_url": "https://api.github.com/users/anduck/events{/privacy}",
      "received_events_url": "https://api.github.com/users/anduck/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "763828df499f67c1c9d669d3223bd0636ed2b185",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/763828df499f67c1c9d669d3223bd0636ed2b185",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/763828df499f67c1c9d669d3223bd0636ed2b185"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d2fe2f9985b4d90a550960face603263e9920cb1",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b55d823369b163edfe23f92983b2287441b98fa2/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b55d823369b163edfe23f92983b2287441b98fa2/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=b55d823369b163edfe23f92983b2287441b98fa2",
        "patch": "@@ -79,7 +79,9 @@ install necessary parts of boost:\n \n         sudo apt-get install libboost-all-dev\n \n-BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n+BerkeleyDB is required for the wallet.\n+\n+**For Ubuntu only:** db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n You can add the repository and install using the following commands:\n \n     sudo add-apt-repository ppa:bitcoin/bitcoin"
      }
    ]
  },
  {
    "sha": "18dacf9bd25154e184b097ee4e8f786d9be25637",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOGRhY2Y5YmQyNTE1NGUxODRiMDk3ZWU0ZThmNzg2ZDliZTI1NjM3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2016-10-02T21:38:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T19:59:05Z"
      },
      "message": "Add microbenchmarks to profile more code paths.\n\nThe new benchmarks exercise script validation, CCoinsDBView caching,\nmempool eviction, and wallet coin selection code.\n\nAll of the benchmarks added here are extremely simple and don't\nnecessarily mirror common real world conditions or interesting\nperformance edge cases. Details about how specific benchmarks can be\nimproved are noted in comments.\n\nGithub-Issue: #7883",
      "tree": {
        "sha": "41f1a7a0d66a5183bf0594b508a09681ac04f001",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41f1a7a0d66a5183bf0594b508a09681ac04f001"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18dacf9bd25154e184b097ee4e8f786d9be25637",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dacf9bd25154e184b097ee4e8f786d9be25637",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18dacf9bd25154e184b097ee4e8f786d9be25637",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dacf9bd25154e184b097ee4e8f786d9be25637/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7e5cbb209d4aeb8c2e4c58c92bf214759998056",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a7e5cbb209d4aeb8c2e4c58c92bf214759998056"
      }
    ],
    "stats": {
      "total": 373,
      "additions": 372,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c83432e91a600cd8ec53c3d657e0e979b1c34492",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -14,6 +14,9 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/Examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\\n+  bench/ccoins_caching.cpp \\\n+  bench/mempool_eviction.cpp \\\n+  bench/verify_script.cpp \\\n   bench/base58.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n@@ -34,7 +37,8 @@ bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_WALLET\n-bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n+bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n+bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)\n endif\n \n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "1e8e3d462fc157a33d4b3644d326dedbd83473eb",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"coins.h\"\n+#include \"policy/policy.h\"\n+#include \"wallet/crypter.h\"\n+\n+#include <vector>\n+\n+// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n+//\n+// Helper: create two dummy transactions, each with\n+// two outputs.  The first has 11 and 50 CENT outputs\n+// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n+// paid to a TX_PUBKEYHASH.\n+//\n+static std::vector<CMutableTransaction>\n+SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+{\n+    std::vector<CMutableTransaction> dummyTransactions;\n+    dummyTransactions.resize(2);\n+\n+    // Add some keys to the keystore:\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++) {\n+        key[i].MakeNewKey(i % 2);\n+        keystoreRet.AddKey(key[i]);\n+    }\n+\n+    // Create some dummy input transactions\n+    dummyTransactions[0].vout.resize(2);\n+    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n+    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n+    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n+    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n+    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n+\n+    dummyTransactions[1].vout.resize(2);\n+    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n+    coinsRet.ModifyCoins(dummyTransactions[1].GetHash())->FromTx(dummyTransactions[1], 0);\n+\n+    return dummyTransactions;\n+}\n+\n+// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n+// laanwj, \"replicating the actual usage patterns of the client is hard though,\n+// many times micro-benchmarks of the database showed completely different\n+// characteristics than e.g. reindex timings. But that's not a requirement of\n+// every benchmark.\"\n+// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n+static void CCoinsCaching(benchmark::State& state)\n+{\n+    CBasicKeyStore keystore;\n+    CCoinsView coinsDummy;\n+    CCoinsViewCache coins(&coinsDummy);\n+    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+\n+    CMutableTransaction t1;\n+    t1.vin.resize(3);\n+    t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n+    t1.vin[0].prevout.n = 1;\n+    t1.vin[0].scriptSig << std::vector<unsigned char>(65, 0);\n+    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[1].prevout.n = 0;\n+    t1.vin[1].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[2].prevout.n = 1;\n+    t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vout.resize(2);\n+    t1.vout[0].nValue = 90 * CENT;\n+    t1.vout[0].scriptPubKey << OP_1;\n+\n+    // Benchmark.\n+    while (state.KeepRunning()) {\n+        bool success = AreInputsStandard(t1, coins);\n+        assert(success);\n+        CAmount value = coins.GetValueIn(t1);\n+        assert(value == (50 + 21 + 22) * CENT);\n+    }\n+}\n+\n+BENCHMARK(CCoinsCaching);"
      },
      {
        "sha": "7091ee3e1143534bc70d9a099079b01fa51cce4d",
        "filename": "src/bench/coin_selection.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"wallet/wallet.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <set>\n+\n+using namespace std;\n+\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, vector<COutput>& vCoins)\n+{\n+    int nInput = 0;\n+\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    CWalletTx* wtx = new CWalletTx(&wallet, tx);\n+\n+    int nAge = 6 * 24;\n+    COutput output(wtx, nInput, nAge, true, true);\n+    vCoins.push_back(output);\n+}\n+\n+// Simple benchmark for wallet coin selection. Note that it maybe be necessary\n+// to build up more complicated scenarios in order to get meaningful\n+// measurements of performance. From laanwj, \"Wallet coin selection is probably\n+// the hardest, as you need a wider selection of scenarios, just testing the\n+// same one over and over isn't too useful. Generating random isn't useful\n+// either for measurements.\"\n+// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n+static void CoinSelection(benchmark::State& state)\n+{\n+    const CWallet wallet;\n+    vector<COutput> vCoins;\n+    LOCK(wallet.cs_wallet);\n+\n+    while (state.KeepRunning()) {\n+        // Empty wallet.\n+        BOOST_FOREACH (COutput output, vCoins)\n+            delete output.tx;\n+        vCoins.clear();\n+\n+        // Add coins.\n+        for (int i = 0; i < 1000; i++)\n+            addCoin(1000 * COIN, wallet, vCoins);\n+        addCoin(3 * COIN, wallet, vCoins);\n+\n+        set<pair<const CWalletTx*, unsigned int> > setCoinsRet;\n+        CAmount nValueRet;\n+        bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, vCoins, setCoinsRet, nValueRet);\n+        assert(success);\n+        assert(nValueRet == 1003 * COIN);\n+        assert(setCoinsRet.size() == 2);\n+    }\n+}\n+\n+BENCHMARK(CoinSelection);"
      },
      {
        "sha": "0ae69c75fcaeb3326d648e7633dbf6209d5c2aa8",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"policy/policy.h\"\n+#include \"txmempool.h\"\n+\n+#include <list>\n+#include <vector>\n+\n+static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n+{\n+    int64_t nTime = 0;\n+    double dPriority = 10.0;\n+    unsigned int nHeight = 1;\n+    bool spendsCoinbase = false;\n+    unsigned int sigOpCost = 4;\n+    LockPoints lp;\n+    pool.addUnchecked(tx.GetHash(), CTxMemPoolEntry(\n+                                        tx, nFee, nTime, dPriority, nHeight, pool.HasNoInputsOf(tx),\n+                                        tx.GetValueOut(), spendsCoinbase, sigOpCost, lp));\n+}\n+\n+// Right now this is only testing eviction performance in an extremely small\n+// mempool. Code needs to be written to generate a much wider variety of\n+// unique transactions for a more meaningful performance measurement.\n+static void MempoolEviction(benchmark::State& state)\n+{\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vin.resize(1);\n+    tx1.vin[0].scriptSig = CScript() << OP_1;\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vin.resize(1);\n+    tx2.vin[0].scriptSig = CScript() << OP_2;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n+    tx2.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vin.resize(1);\n+    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n+    tx3.vin[0].scriptSig = CScript() << OP_2;\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n+    tx3.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vin.resize(2);\n+    tx4.vin[0].prevout.SetNull();\n+    tx4.vin[0].scriptSig = CScript() << OP_4;\n+    tx4.vin[1].prevout.SetNull();\n+    tx4.vin[1].scriptSig = CScript() << OP_4;\n+    tx4.vout.resize(2);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[0].nValue = 10 * COIN;\n+    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vin.resize(2);\n+    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n+    tx5.vin[0].scriptSig = CScript() << OP_4;\n+    tx5.vin[1].prevout.SetNull();\n+    tx5.vin[1].scriptSig = CScript() << OP_5;\n+    tx5.vout.resize(2);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[0].nValue = 10 * COIN;\n+    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx6 = CMutableTransaction();\n+    tx6.vin.resize(2);\n+    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n+    tx6.vin[0].scriptSig = CScript() << OP_4;\n+    tx6.vin[1].prevout.SetNull();\n+    tx6.vin[1].scriptSig = CScript() << OP_6;\n+    tx6.vout.resize(2);\n+    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[0].nValue = 10 * COIN;\n+    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx7 = CMutableTransaction();\n+    tx7.vin.resize(2);\n+    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n+    tx7.vin[0].scriptSig = CScript() << OP_5;\n+    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n+    tx7.vin[1].scriptSig = CScript() << OP_6;\n+    tx7.vout.resize(2);\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[1].nValue = 10 * COIN;\n+\n+    CTxMemPool pool(CFeeRate(1000));\n+\n+    while (state.KeepRunning()) {\n+        AddTx(tx1, 10000LL, pool);\n+        AddTx(tx2, 5000LL, pool);\n+        AddTx(tx3, 20000LL, pool);\n+        AddTx(tx4, 7000LL, pool);\n+        AddTx(tx5, 1000LL, pool);\n+        AddTx(tx6, 1100LL, pool);\n+        AddTx(tx7, 9000LL, pool);\n+        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n+        pool.TrimToSize(GetVirtualTransactionSize(tx1));\n+    }\n+}\n+\n+BENCHMARK(MempoolEviction);"
      },
      {
        "sha": "dc3940cdbdd992052ab07fe7ef3f50ccee7262f9",
        "filename": "src/bench/verify_script.cpp",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18dacf9bd25154e184b097ee4e8f786d9be25637/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=18dacf9bd25154e184b097ee4e8f786d9be25637",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"key.h\"\n+#if defined(HAVE_CONSENSUS_LIB)\n+#include \"script/bitcoinconsensus.h\"\n+#endif\n+#include \"script/script.h\"\n+#include \"script/sign.h\"\n+#include \"streams.h\"\n+\n+// FIXME: Dedup with BuildCreditingTransaction in test/script_tests.cpp.\n+static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = 1;\n+\n+    return txCredit;\n+}\n+\n+// FIXME: Dedup with BuildSpendingTransaction in test/script_tests.cpp.\n+static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n+{\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vout.resize(1);\n+    txSpend.wit.vtxinwit.resize(1);\n+    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n+\n+    return txSpend;\n+}\n+\n+// Microbenchmark for verification of a basic P2WPKH script. Can be easily\n+// modified to measure performance of other types of scripts.\n+static void VerifyScriptBench(benchmark::State& state)\n+{\n+    const int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;\n+    const int witnessversion = 0;\n+\n+    // Keypair.\n+    CKey key;\n+    const unsigned char vchKey[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n+    key.Set(vchKey, vchKey + 32, false);\n+    CPubKey pubkey = key.GetPubKey();\n+    uint160 pubkeyHash;\n+    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());\n+\n+    // Script.\n+    CScript scriptPubKey = CScript() << witnessversion << ToByteVector(pubkeyHash);\n+    CScript scriptSig;\n+    CScript witScriptPubkey = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkeyHash) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    CTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n+    CScriptWitness& witness = txSpend.wit.vtxinwit[0].scriptWitness;\n+    witness.stack.emplace_back();\n+    key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SIGVERSION_WITNESS_V0), witness.stack.back(), 0);\n+    witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n+    witness.stack.push_back(ToByteVector(pubkey));\n+\n+    // Benchmark.\n+    while (state.KeepRunning()) {\n+        ScriptError err;\n+        bool success = VerifyScript(\n+            txSpend.vin[0].scriptSig,\n+            txCredit.vout[0].scriptPubKey,\n+            &txSpend.wit.vtxinwit[0].scriptWitness,\n+            flags,\n+            MutableTransactionSignatureChecker(&txSpend, 0, txCredit.vout[0].nValue),\n+            &err);\n+        assert(err == SCRIPT_ERR_OK);\n+        assert(success);\n+\n+#if defined(HAVE_CONSENSUS_LIB)\n+        CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+        stream << txSpend;\n+        int csuccess = bitcoinconsensus_verify_script_with_amount(\n+            begin_ptr(txCredit.vout[0].scriptPubKey),\n+            txCredit.vout[0].scriptPubKey.size(),\n+            txCredit.vout[0].nValue,\n+            (const unsigned char*)&stream[0], stream.size(), 0, flags, nullptr);\n+        assert(csuccess == 1);\n+#endif\n+    }\n+}\n+\n+BENCHMARK(VerifyScriptBench);"
      }
    ]
  },
  {
    "sha": "74dc388ab599304494a082dc99e2d57f962cb0b7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGRjMzg4YWI1OTkzMDQ0OTRhMDgyZGM5OWUyZDU3Zjk2MmNiMGI3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T20:03:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T20:03:52Z"
      },
      "message": "Merge #8873: Add microbenchmarks to profile more code paths.\n\n18dacf9 Add microbenchmarks to profile more code paths. (Russell Yanofsky)",
      "tree": {
        "sha": "d193e836fa963694302d50b57bce011a64a88120",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d193e836fa963694302d50b57bce011a64a88120"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74dc388ab599304494a082dc99e2d57f962cb0b7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBoAoAAoJEHSBCwEjRsmmQPcIAIKwDIC6Ptha7pNDS9S13P0e\n6bWOSHaUDa9A4sVoU6Xqrp3K1nXTZ7jqRMbSELzn3cCHfpZS6gtQLE9qf2qG7+vD\nLlK8Uj2OWBhvWEaFn0eJVrZBmxwcf+uZSmLeL6ZgpN/SwY+JarXiiL9nopcLT7BA\nilFs9zhOcG317YbNfBSzwH5NBwO7vnefrn2RviuzTgl/LcynL0EzIOIE/w8quxaL\nG6+BVulxH3xWJhaoolRUS277f2ptjzt1bAdK1qGNzttaRi8A0zSIXvKi9lSEWpu6\nX0DJwF+Kz6umnHfeaLdRwmAqYqAWydf6VxWJeEAMtpOdghIIBZxSiurNd5Y7ylM=\n=sNhW\n-----END PGP SIGNATURE-----",
        "payload": "tree d193e836fa963694302d50b57bce011a64a88120\nparent 7f71a3c591945769ad33e5734105219062311d1e\nparent 18dacf9bd25154e184b097ee4e8f786d9be25637\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476821008 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476821032 +0200\n\nMerge #8873: Add microbenchmarks to profile more code paths.\n\n18dacf9 Add microbenchmarks to profile more code paths. (Russell Yanofsky)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74dc388ab599304494a082dc99e2d57f962cb0b7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74dc388ab599304494a082dc99e2d57f962cb0b7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74dc388ab599304494a082dc99e2d57f962cb0b7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f71a3c591945769ad33e5734105219062311d1e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f71a3c591945769ad33e5734105219062311d1e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f71a3c591945769ad33e5734105219062311d1e"
      },
      {
        "sha": "18dacf9bd25154e184b097ee4e8f786d9be25637",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18dacf9bd25154e184b097ee4e8f786d9be25637",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18dacf9bd25154e184b097ee4e8f786d9be25637"
      }
    ],
    "stats": {
      "total": 373,
      "additions": 372,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c83432e91a600cd8ec53c3d657e0e979b1c34492",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74dc388ab599304494a082dc99e2d57f962cb0b7/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74dc388ab599304494a082dc99e2d57f962cb0b7/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=74dc388ab599304494a082dc99e2d57f962cb0b7",
        "patch": "@@ -14,6 +14,9 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/Examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/crypto_hash.cpp \\\n+  bench/ccoins_caching.cpp \\\n+  bench/mempool_eviction.cpp \\\n+  bench/verify_script.cpp \\\n   bench/base58.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n@@ -34,7 +37,8 @@ bench_bench_bitcoin_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n \n if ENABLE_WALLET\n-bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n+bench_bench_bitcoin_SOURCES += bench/coin_selection.cpp\n+bench_bench_bitcoin_LDADD += $(LIBBITCOIN_WALLET) $(LIBBITCOIN_CRYPTO)\n endif\n \n bench_bench_bitcoin_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "1e8e3d462fc157a33d4b3644d326dedbd83473eb",
        "filename": "src/bench/ccoins_caching.cpp",
        "status": "added",
        "additions": 87,
        "deletions": 0,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/ccoins_caching.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/ccoins_caching.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/ccoins_caching.cpp?ref=74dc388ab599304494a082dc99e2d57f962cb0b7",
        "patch": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"coins.h\"\n+#include \"policy/policy.h\"\n+#include \"wallet/crypter.h\"\n+\n+#include <vector>\n+\n+// FIXME: Dedup with SetupDummyInputs in test/transaction_tests.cpp.\n+//\n+// Helper: create two dummy transactions, each with\n+// two outputs.  The first has 11 and 50 CENT outputs\n+// paid to a TX_PUBKEY, the second 21 and 22 CENT outputs\n+// paid to a TX_PUBKEYHASH.\n+//\n+static std::vector<CMutableTransaction>\n+SetupDummyInputs(CBasicKeyStore& keystoreRet, CCoinsViewCache& coinsRet)\n+{\n+    std::vector<CMutableTransaction> dummyTransactions;\n+    dummyTransactions.resize(2);\n+\n+    // Add some keys to the keystore:\n+    CKey key[4];\n+    for (int i = 0; i < 4; i++) {\n+        key[i].MakeNewKey(i % 2);\n+        keystoreRet.AddKey(key[i]);\n+    }\n+\n+    // Create some dummy input transactions\n+    dummyTransactions[0].vout.resize(2);\n+    dummyTransactions[0].vout[0].nValue = 11 * CENT;\n+    dummyTransactions[0].vout[0].scriptPubKey << ToByteVector(key[0].GetPubKey()) << OP_CHECKSIG;\n+    dummyTransactions[0].vout[1].nValue = 50 * CENT;\n+    dummyTransactions[0].vout[1].scriptPubKey << ToByteVector(key[1].GetPubKey()) << OP_CHECKSIG;\n+    coinsRet.ModifyCoins(dummyTransactions[0].GetHash())->FromTx(dummyTransactions[0], 0);\n+\n+    dummyTransactions[1].vout.resize(2);\n+    dummyTransactions[1].vout[0].nValue = 21 * CENT;\n+    dummyTransactions[1].vout[0].scriptPubKey = GetScriptForDestination(key[2].GetPubKey().GetID());\n+    dummyTransactions[1].vout[1].nValue = 22 * CENT;\n+    dummyTransactions[1].vout[1].scriptPubKey = GetScriptForDestination(key[3].GetPubKey().GetID());\n+    coinsRet.ModifyCoins(dummyTransactions[1].GetHash())->FromTx(dummyTransactions[1], 0);\n+\n+    return dummyTransactions;\n+}\n+\n+// Microbenchmark for simple accesses to a CCoinsViewCache database. Note from\n+// laanwj, \"replicating the actual usage patterns of the client is hard though,\n+// many times micro-benchmarks of the database showed completely different\n+// characteristics than e.g. reindex timings. But that's not a requirement of\n+// every benchmark.\"\n+// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n+static void CCoinsCaching(benchmark::State& state)\n+{\n+    CBasicKeyStore keystore;\n+    CCoinsView coinsDummy;\n+    CCoinsViewCache coins(&coinsDummy);\n+    std::vector<CMutableTransaction> dummyTransactions = SetupDummyInputs(keystore, coins);\n+\n+    CMutableTransaction t1;\n+    t1.vin.resize(3);\n+    t1.vin[0].prevout.hash = dummyTransactions[0].GetHash();\n+    t1.vin[0].prevout.n = 1;\n+    t1.vin[0].scriptSig << std::vector<unsigned char>(65, 0);\n+    t1.vin[1].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[1].prevout.n = 0;\n+    t1.vin[1].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vin[2].prevout.hash = dummyTransactions[1].GetHash();\n+    t1.vin[2].prevout.n = 1;\n+    t1.vin[2].scriptSig << std::vector<unsigned char>(65, 0) << std::vector<unsigned char>(33, 4);\n+    t1.vout.resize(2);\n+    t1.vout[0].nValue = 90 * CENT;\n+    t1.vout[0].scriptPubKey << OP_1;\n+\n+    // Benchmark.\n+    while (state.KeepRunning()) {\n+        bool success = AreInputsStandard(t1, coins);\n+        assert(success);\n+        CAmount value = coins.GetValueIn(t1);\n+        assert(value == (50 + 21 + 22) * CENT);\n+    }\n+}\n+\n+BENCHMARK(CCoinsCaching);"
      },
      {
        "sha": "7091ee3e1143534bc70d9a099079b01fa51cce4d",
        "filename": "src/bench/coin_selection.cpp",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=74dc388ab599304494a082dc99e2d57f962cb0b7",
        "patch": "@@ -0,0 +1,62 @@\n+// Copyright (c) 2012-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"wallet/wallet.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <set>\n+\n+using namespace std;\n+\n+static void addCoin(const CAmount& nValue, const CWallet& wallet, vector<COutput>& vCoins)\n+{\n+    int nInput = 0;\n+\n+    static int nextLockTime = 0;\n+    CMutableTransaction tx;\n+    tx.nLockTime = nextLockTime++; // so all transactions get different hashes\n+    tx.vout.resize(nInput + 1);\n+    tx.vout[nInput].nValue = nValue;\n+    CWalletTx* wtx = new CWalletTx(&wallet, tx);\n+\n+    int nAge = 6 * 24;\n+    COutput output(wtx, nInput, nAge, true, true);\n+    vCoins.push_back(output);\n+}\n+\n+// Simple benchmark for wallet coin selection. Note that it maybe be necessary\n+// to build up more complicated scenarios in order to get meaningful\n+// measurements of performance. From laanwj, \"Wallet coin selection is probably\n+// the hardest, as you need a wider selection of scenarios, just testing the\n+// same one over and over isn't too useful. Generating random isn't useful\n+// either for measurements.\"\n+// (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n+static void CoinSelection(benchmark::State& state)\n+{\n+    const CWallet wallet;\n+    vector<COutput> vCoins;\n+    LOCK(wallet.cs_wallet);\n+\n+    while (state.KeepRunning()) {\n+        // Empty wallet.\n+        BOOST_FOREACH (COutput output, vCoins)\n+            delete output.tx;\n+        vCoins.clear();\n+\n+        // Add coins.\n+        for (int i = 0; i < 1000; i++)\n+            addCoin(1000 * COIN, wallet, vCoins);\n+        addCoin(3 * COIN, wallet, vCoins);\n+\n+        set<pair<const CWalletTx*, unsigned int> > setCoinsRet;\n+        CAmount nValueRet;\n+        bool success = wallet.SelectCoinsMinConf(1003 * COIN, 1, 6, vCoins, setCoinsRet, nValueRet);\n+        assert(success);\n+        assert(nValueRet == 1003 * COIN);\n+        assert(setCoinsRet.size() == 2);\n+    }\n+}\n+\n+BENCHMARK(CoinSelection);"
      },
      {
        "sha": "0ae69c75fcaeb3326d648e7633dbf6209d5c2aa8",
        "filename": "src/bench/mempool_eviction.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/mempool_eviction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/mempool_eviction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/mempool_eviction.cpp?ref=74dc388ab599304494a082dc99e2d57f962cb0b7",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright (c) 2011-2015 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"policy/policy.h\"\n+#include \"txmempool.h\"\n+\n+#include <list>\n+#include <vector>\n+\n+static void AddTx(const CTransaction& tx, const CAmount& nFee, CTxMemPool& pool)\n+{\n+    int64_t nTime = 0;\n+    double dPriority = 10.0;\n+    unsigned int nHeight = 1;\n+    bool spendsCoinbase = false;\n+    unsigned int sigOpCost = 4;\n+    LockPoints lp;\n+    pool.addUnchecked(tx.GetHash(), CTxMemPoolEntry(\n+                                        tx, nFee, nTime, dPriority, nHeight, pool.HasNoInputsOf(tx),\n+                                        tx.GetValueOut(), spendsCoinbase, sigOpCost, lp));\n+}\n+\n+// Right now this is only testing eviction performance in an extremely small\n+// mempool. Code needs to be written to generate a much wider variety of\n+// unique transactions for a more meaningful performance measurement.\n+static void MempoolEviction(benchmark::State& state)\n+{\n+    CMutableTransaction tx1 = CMutableTransaction();\n+    tx1.vin.resize(1);\n+    tx1.vin[0].scriptSig = CScript() << OP_1;\n+    tx1.vout.resize(1);\n+    tx1.vout[0].scriptPubKey = CScript() << OP_1 << OP_EQUAL;\n+    tx1.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx2 = CMutableTransaction();\n+    tx2.vin.resize(1);\n+    tx2.vin[0].scriptSig = CScript() << OP_2;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].scriptPubKey = CScript() << OP_2 << OP_EQUAL;\n+    tx2.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx3 = CMutableTransaction();\n+    tx3.vin.resize(1);\n+    tx3.vin[0].prevout = COutPoint(tx2.GetHash(), 0);\n+    tx3.vin[0].scriptSig = CScript() << OP_2;\n+    tx3.vout.resize(1);\n+    tx3.vout[0].scriptPubKey = CScript() << OP_3 << OP_EQUAL;\n+    tx3.vout[0].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx4 = CMutableTransaction();\n+    tx4.vin.resize(2);\n+    tx4.vin[0].prevout.SetNull();\n+    tx4.vin[0].scriptSig = CScript() << OP_4;\n+    tx4.vin[1].prevout.SetNull();\n+    tx4.vin[1].scriptSig = CScript() << OP_4;\n+    tx4.vout.resize(2);\n+    tx4.vout[0].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[0].nValue = 10 * COIN;\n+    tx4.vout[1].scriptPubKey = CScript() << OP_4 << OP_EQUAL;\n+    tx4.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx5 = CMutableTransaction();\n+    tx5.vin.resize(2);\n+    tx5.vin[0].prevout = COutPoint(tx4.GetHash(), 0);\n+    tx5.vin[0].scriptSig = CScript() << OP_4;\n+    tx5.vin[1].prevout.SetNull();\n+    tx5.vin[1].scriptSig = CScript() << OP_5;\n+    tx5.vout.resize(2);\n+    tx5.vout[0].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[0].nValue = 10 * COIN;\n+    tx5.vout[1].scriptPubKey = CScript() << OP_5 << OP_EQUAL;\n+    tx5.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx6 = CMutableTransaction();\n+    tx6.vin.resize(2);\n+    tx6.vin[0].prevout = COutPoint(tx4.GetHash(), 1);\n+    tx6.vin[0].scriptSig = CScript() << OP_4;\n+    tx6.vin[1].prevout.SetNull();\n+    tx6.vin[1].scriptSig = CScript() << OP_6;\n+    tx6.vout.resize(2);\n+    tx6.vout[0].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[0].nValue = 10 * COIN;\n+    tx6.vout[1].scriptPubKey = CScript() << OP_6 << OP_EQUAL;\n+    tx6.vout[1].nValue = 10 * COIN;\n+\n+    CMutableTransaction tx7 = CMutableTransaction();\n+    tx7.vin.resize(2);\n+    tx7.vin[0].prevout = COutPoint(tx5.GetHash(), 0);\n+    tx7.vin[0].scriptSig = CScript() << OP_5;\n+    tx7.vin[1].prevout = COutPoint(tx6.GetHash(), 0);\n+    tx7.vin[1].scriptSig = CScript() << OP_6;\n+    tx7.vout.resize(2);\n+    tx7.vout[0].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[0].nValue = 10 * COIN;\n+    tx7.vout[1].scriptPubKey = CScript() << OP_7 << OP_EQUAL;\n+    tx7.vout[1].nValue = 10 * COIN;\n+\n+    CTxMemPool pool(CFeeRate(1000));\n+\n+    while (state.KeepRunning()) {\n+        AddTx(tx1, 10000LL, pool);\n+        AddTx(tx2, 5000LL, pool);\n+        AddTx(tx3, 20000LL, pool);\n+        AddTx(tx4, 7000LL, pool);\n+        AddTx(tx5, 1000LL, pool);\n+        AddTx(tx6, 1100LL, pool);\n+        AddTx(tx7, 9000LL, pool);\n+        pool.TrimToSize(pool.DynamicMemoryUsage() * 3 / 4);\n+        pool.TrimToSize(GetVirtualTransactionSize(tx1));\n+    }\n+}\n+\n+BENCHMARK(MempoolEviction);"
      },
      {
        "sha": "dc3940cdbdd992052ab07fe7ef3f50ccee7262f9",
        "filename": "src/bench/verify_script.cpp",
        "status": "added",
        "additions": 103,
        "deletions": 0,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/verify_script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74dc388ab599304494a082dc99e2d57f962cb0b7/src/bench/verify_script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/verify_script.cpp?ref=74dc388ab599304494a082dc99e2d57f962cb0b7",
        "patch": "@@ -0,0 +1,103 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+#include \"key.h\"\n+#if defined(HAVE_CONSENSUS_LIB)\n+#include \"script/bitcoinconsensus.h\"\n+#endif\n+#include \"script/script.h\"\n+#include \"script/sign.h\"\n+#include \"streams.h\"\n+\n+// FIXME: Dedup with BuildCreditingTransaction in test/script_tests.cpp.\n+static CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n+{\n+    CMutableTransaction txCredit;\n+    txCredit.nVersion = 1;\n+    txCredit.nLockTime = 0;\n+    txCredit.vin.resize(1);\n+    txCredit.vout.resize(1);\n+    txCredit.vin[0].prevout.SetNull();\n+    txCredit.vin[0].scriptSig = CScript() << CScriptNum(0) << CScriptNum(0);\n+    txCredit.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txCredit.vout[0].scriptPubKey = scriptPubKey;\n+    txCredit.vout[0].nValue = 1;\n+\n+    return txCredit;\n+}\n+\n+// FIXME: Dedup with BuildSpendingTransaction in test/script_tests.cpp.\n+static CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMutableTransaction& txCredit)\n+{\n+    CMutableTransaction txSpend;\n+    txSpend.nVersion = 1;\n+    txSpend.nLockTime = 0;\n+    txSpend.vin.resize(1);\n+    txSpend.vout.resize(1);\n+    txSpend.wit.vtxinwit.resize(1);\n+    txSpend.vin[0].prevout.hash = txCredit.GetHash();\n+    txSpend.vin[0].prevout.n = 0;\n+    txSpend.vin[0].scriptSig = scriptSig;\n+    txSpend.vin[0].nSequence = CTxIn::SEQUENCE_FINAL;\n+    txSpend.vout[0].scriptPubKey = CScript();\n+    txSpend.vout[0].nValue = txCredit.vout[0].nValue;\n+\n+    return txSpend;\n+}\n+\n+// Microbenchmark for verification of a basic P2WPKH script. Can be easily\n+// modified to measure performance of other types of scripts.\n+static void VerifyScriptBench(benchmark::State& state)\n+{\n+    const int flags = SCRIPT_VERIFY_WITNESS | SCRIPT_VERIFY_P2SH;\n+    const int witnessversion = 0;\n+\n+    // Keypair.\n+    CKey key;\n+    const unsigned char vchKey[32] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1};\n+    key.Set(vchKey, vchKey + 32, false);\n+    CPubKey pubkey = key.GetPubKey();\n+    uint160 pubkeyHash;\n+    CHash160().Write(pubkey.begin(), pubkey.size()).Finalize(pubkeyHash.begin());\n+\n+    // Script.\n+    CScript scriptPubKey = CScript() << witnessversion << ToByteVector(pubkeyHash);\n+    CScript scriptSig;\n+    CScript witScriptPubkey = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkeyHash) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    CTransaction txCredit = BuildCreditingTransaction(scriptPubKey);\n+    CMutableTransaction txSpend = BuildSpendingTransaction(scriptSig, txCredit);\n+    CScriptWitness& witness = txSpend.wit.vtxinwit[0].scriptWitness;\n+    witness.stack.emplace_back();\n+    key.Sign(SignatureHash(witScriptPubkey, txSpend, 0, SIGHASH_ALL, txCredit.vout[0].nValue, SIGVERSION_WITNESS_V0), witness.stack.back(), 0);\n+    witness.stack.back().push_back(static_cast<unsigned char>(SIGHASH_ALL));\n+    witness.stack.push_back(ToByteVector(pubkey));\n+\n+    // Benchmark.\n+    while (state.KeepRunning()) {\n+        ScriptError err;\n+        bool success = VerifyScript(\n+            txSpend.vin[0].scriptSig,\n+            txCredit.vout[0].scriptPubKey,\n+            &txSpend.wit.vtxinwit[0].scriptWitness,\n+            flags,\n+            MutableTransactionSignatureChecker(&txSpend, 0, txCredit.vout[0].nValue),\n+            &err);\n+        assert(err == SCRIPT_ERR_OK);\n+        assert(success);\n+\n+#if defined(HAVE_CONSENSUS_LIB)\n+        CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n+        stream << txSpend;\n+        int csuccess = bitcoinconsensus_verify_script_with_amount(\n+            begin_ptr(txCredit.vout[0].scriptPubKey),\n+            txCredit.vout[0].scriptPubKey.size(),\n+            txCredit.vout[0].nValue,\n+            (const unsigned char*)&stream[0], stream.size(), 0, flags, nullptr);\n+        assert(csuccess == 1);\n+#endif\n+    }\n+}\n+\n+BENCHMARK(VerifyScriptBench);"
      }
    ]
  },
  {
    "sha": "23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2UwM2Y4ZDI2ZDdiZDAzMjczYTVkY2JkY2ZlMzkwNWRmYjQ5ZmZi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-18T20:11:03Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-18T20:11:37Z"
      },
      "message": "Merge #8965: Mention that PPA doesn't support Debian\n\nb55d823 Explicitly state that PPA is for Ubuntu only (anduck)",
      "tree": {
        "sha": "c798bd0fa019eea4d92a3d2c46a659961e6d7c5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c798bd0fa019eea4d92a3d2c46a659961e6d7c5a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYBoH5AAoJEC1/I3LlD+E3Si0H/2pYkw4JAedF3SymCm6QDFEN\nlCx+uME638fVpKinBGAAmSFuWMRMkZXhgQ9j7+37jCmacD9sZk67CRaRJG6G+33L\nYhXcNuzgYEUexLzYmiNAuBa4W1OqyNQB0biKMIGLm8JE7+i9iMlT/JufmM84taiZ\nIbQMYOK+Navirdt5g8QrPWAnIocvI/LIFIDvLdf0HssKa9woIU+bFYF5Vn8+bRrr\nGD9SnZfexckK2Px7VQJexMD6qCofCzxfHHnQ6Vv4FMn3IQCmOTqX22zWt9XDW+V0\nYIkUXam5TX9oa+Ep8j3RrNAVKiWUFcD1WDgcoSbG8mQSi7k0ots2l2ELSBelI90=\n=CvyC\n-----END PGP SIGNATURE-----",
        "payload": "tree c798bd0fa019eea4d92a3d2c46a659961e6d7c5a\nparent 74dc388ab599304494a082dc99e2d57f962cb0b7\nparent b55d823369b163edfe23f92983b2287441b98fa2\nauthor MarcoFalke <falke.marco@gmail.com> 1476821463 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1476821497 +0200\n\nMerge #8965: Mention that PPA doesn't support Debian\n\nb55d823 Explicitly state that PPA is for Ubuntu only (anduck)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "74dc388ab599304494a082dc99e2d57f962cb0b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74dc388ab599304494a082dc99e2d57f962cb0b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/74dc388ab599304494a082dc99e2d57f962cb0b7"
      },
      {
        "sha": "b55d823369b163edfe23f92983b2287441b98fa2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b55d823369b163edfe23f92983b2287441b98fa2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b55d823369b163edfe23f92983b2287441b98fa2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 3,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ba7b9cd18d186b25292535e7d278a9b37448d6cc",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb",
        "patch": "@@ -79,7 +79,9 @@ install necessary parts of boost:\n \n         sudo apt-get install libboost-all-dev\n \n-BerkeleyDB is required for the wallet. db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n+BerkeleyDB is required for the wallet.\n+\n+**For Ubuntu only:** db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin).\n You can add the repository and install using the following commands:\n \n     sudo apt-get install software-properties-common"
      }
    ]
  },
  {
    "sha": "05998da5a7e2be6af0ecb53f4f645464646175ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTk5OGRhNWE3ZTJiZTZhZjBlY2I1M2Y0ZjY0NTQ2NDY0NjE3NWVm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T20:34:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T20:48:51Z"
      },
      "message": "Merge #8865: Decouple peer-processing-logic from block-connection-logic\n\na9aec5c Use BlockChecked signal to send reject messages from mapBlockSource (Matt Corallo)\n7565e03 Remove SyncWithWallets wrapper function (Matt Corallo)\n12ee1fe Always call UpdatedBlockTip, even if blocks were only disconnected (Matt Corallo)\nf5efa28 Remove CConnman parameter from ProcessNewBlock/ActivateBestChain (Matt Corallo)\nfef1010 Use CValidationInterface from chain logic to notify peer logic (Matt Corallo)\naefcb7b Move net-processing logic definitions together in main.h (Matt Corallo)\n0278fb5 Remove duplicate nBlocksEstimate cmp (we already checked IsIBD()) (Matt Corallo)\n87e7d72 Make validationinterface.UpdatedBlockTip more verbose (Matt Corallo)",
      "tree": {
        "sha": "5b8aca3a9bbc7256e0e4909b63e3e77abd58c139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b8aca3a9bbc7256e0e4909b63e3e77abd58c139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05998da5a7e2be6af0ecb53f4f645464646175ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBoqzAAoJEHSBCwEjRsmm3BgIAJPxkMCy8s4Za652i1sBKhR+\n5vdilnZLGVCy6lp0ynWN8jQU9YQeF8K/Va4vswU6msldsJbCZpILFLWYqF9kRRxU\nQKPCFacwhBWyU3ToT0tVwe2LNIjvZ/ocyy0AcYgL8Xrd2gAxCLIFMkRz9v7rnZv4\n5aLUQBmFFCFlEoXMc0woyVLHPP4H6El1cou4a3Dvqja9/5MDnIcuqfSxIoNCA8ZN\nEexWezM5ka7f6pPokzSGEFaqgpDBhtgioC27UXa/jVTWdeTpIQvhtoN6Yjx8UXqW\nhJYoTHNELDRSoGZd28rjkVAh/ELaOwQvnEzTjG3AUn23UkMpQw980S4niw9K6Z4=\n=atwu\n-----END PGP SIGNATURE-----",
        "payload": "tree 5b8aca3a9bbc7256e0e4909b63e3e77abd58c139\nparent 23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb\nparent a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476822853 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476823731 +0200\n\nMerge #8865: Decouple peer-processing-logic from block-connection-logic\n\na9aec5c Use BlockChecked signal to send reject messages from mapBlockSource (Matt Corallo)\n7565e03 Remove SyncWithWallets wrapper function (Matt Corallo)\n12ee1fe Always call UpdatedBlockTip, even if blocks were only disconnected (Matt Corallo)\nf5efa28 Remove CConnman parameter from ProcessNewBlock/ActivateBestChain (Matt Corallo)\nfef1010 Use CValidationInterface from chain logic to notify peer logic (Matt Corallo)\naefcb7b Move net-processing logic definitions together in main.h (Matt Corallo)\n0278fb5 Remove duplicate nBlocksEstimate cmp (we already checked IsIBD()) (Matt Corallo)\n87e7d72 Make validationinterface.UpdatedBlockTip more verbose (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05998da5a7e2be6af0ecb53f4f645464646175ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05998da5a7e2be6af0ecb53f4f645464646175ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05998da5a7e2be6af0ecb53f4f645464646175ef/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23e03f8d26d7bd03273a5dcbdcfe3905dfb49ffb"
      },
      {
        "sha": "a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9aec5c24d8c4efe9e1ede54e8b8039b4b3f0835"
      }
    ],
    "stats": {
      "total": 236,
      "additions": 132,
      "deletions": 104
    },
    "files": [
      {
        "sha": "2b1fbed0729037529cfa47a6735fc6f559870967",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -72,6 +72,7 @@ static const bool DEFAULT_DISABLE_SAFEMODE = false;\n static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n \n std::unique_ptr<CConnman> g_connman;\n+std::unique_ptr<PeerLogicValidation> peerLogic;\n \n #if ENABLE_ZMQ\n static CZMQNotificationInterface* pzmqNotificationInterface = NULL;\n@@ -200,6 +201,8 @@ void Shutdown()\n         pwalletMain->Flush(false);\n #endif\n     MapPort(false);\n+    UnregisterValidationInterface(peerLogic.get());\n+    peerLogic.reset();\n     g_connman.reset();\n \n     StopTorControl();\n@@ -1102,6 +1105,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n     CConnman& connman = *g_connman;\n \n+    peerLogic.reset(new PeerLogicValidation(&connman));\n+    RegisterValidationInterface(peerLogic.get());\n     RegisterNodeSignals(GetNodeSignals());\n \n     // sanitize comments per BIP-0014, format user agent and check total size"
      },
      {
        "sha": "8cf3a32da74936f8a31a23fdc961857278719521",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 57,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -1567,7 +1567,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    SyncWithWallets(tx, NULL);\n+    GetMainSignals().SyncTransaction(tx, NULL, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n \n     return true;\n }\n@@ -1882,17 +1882,6 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n }\n \n void static InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n-    int nDoS = 0;\n-    if (state.IsInvalid(nDoS)) {\n-        std::map<uint256, NodeId>::iterator it = mapBlockSource.find(pindex->GetBlockHash());\n-        if (it != mapBlockSource.end() && State(it->second)) {\n-            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n-            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), pindex->GetBlockHash()};\n-            State(it->second)->rejects.push_back(reject);\n-            if (nDoS > 0)\n-                Misbehaving(it->second, nDoS);\n-        }\n-    }\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         setDirtyBlockIndex.insert(pindex);\n@@ -2800,7 +2789,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, pindexDelete->pprev);\n+        GetMainSignals().SyncTransaction(tx, pindexDelete->pprev, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n     }\n     return true;\n }\n@@ -2839,7 +2828,6 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n                 InvalidBlockFound(pindexNew, state);\n             return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n-        mapBlockSource.erase(pindexNew->GetBlockHash());\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n         LogPrint(\"bench\", \"  - Connect total: %.2fms [%.2fs]\\n\", (nTime3 - nTime2) * 0.001, nTimeConnectTotal * 0.000001);\n         assert(view.Flush());\n@@ -3038,7 +3026,7 @@ static void NotifyHeaderTip() {\n  * or an activated best chain. pblock is either NULL or a pointer to a block\n  * that is already loaded (to avoid loading it again from disk).\n  */\n-bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock, CConnman* connman) {\n+bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams, const CBlock *pblock) {\n     CBlockIndex *pindexMostWork = NULL;\n     CBlockIndex *pindexNewTip = NULL;\n     std::vector<std::tuple<CTransaction,CBlockIndex*,int>> txChanged;\n@@ -3053,7 +3041,6 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         const CBlockIndex *pindexFork;\n         std::list<CTransaction> txConflicted;\n         bool fInitialDownload;\n-        int nNewHeight;\n         {\n             LOCK(cs_main);\n             CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -3076,59 +3063,27 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             pindexNewTip = chainActive.Tip();\n             pindexFork = chainActive.FindFork(pindexOldTip);\n             fInitialDownload = IsInitialBlockDownload();\n-            nNewHeight = chainActive.Height();\n         }\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n-        if(connman)\n-            connman->SetBestHeight(nNewHeight);\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n         BOOST_FOREACH(const CTransaction &tx, txConflicted)\n         {\n-            SyncWithWallets(tx, pindexNewTip);\n+            GetMainSignals().SyncTransaction(tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n         for(unsigned int i = 0; i < txChanged.size(); i++)\n-            SyncWithWallets(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n+            GetMainSignals().SyncTransaction(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n+\n+        // Notify external listeners about the new tip.\n+        GetMainSignals().UpdatedBlockTip(pindexNewTip, pindexFork, fInitialDownload);\n \n         // Always notify the UI if a new block tip was connected\n         if (pindexFork != pindexNewTip) {\n             uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);\n-\n-            if (!fInitialDownload) {\n-                // Find the hashes of all blocks that weren't previously in the best chain.\n-                std::vector<uint256> vHashes;\n-                CBlockIndex *pindexToAnnounce = pindexNewTip;\n-                while (pindexToAnnounce != pindexFork) {\n-                    vHashes.push_back(pindexToAnnounce->GetBlockHash());\n-                    pindexToAnnounce = pindexToAnnounce->pprev;\n-                    if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n-                        // Limit announcements in case of a huge reorganization.\n-                        // Rely on the peer's synchronization mechanism in that case.\n-                        break;\n-                    }\n-                }\n-                // Relay inventory, but don't relay old inventory during initial block download.\n-                int nBlockEstimate = 0;\n-                if (fCheckpointsEnabled)\n-                    nBlockEstimate = Checkpoints::GetTotalBlocksEstimate(chainparams.Checkpoints());\n-                if(connman) {\n-                    connman->ForEachNode([nNewHeight, nBlockEstimate, &vHashes](CNode* pnode) {\n-                        if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : nBlockEstimate)) {\n-                            BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n-                                pnode->PushBlockHash(hash);\n-                            }\n-                        }\n-                    });\n-                }\n-                // Notify external listeners about the new tip.\n-                if (!vHashes.empty()) {\n-                    GetMainSignals().UpdatedBlockTip(pindexNewTip);\n-                }\n-            }\n         }\n     } while (pindexNewTip != pindexMostWork);\n     CheckBlockIndex(chainparams.GetConsensus());\n@@ -3787,7 +3742,7 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     return true;\n }\n \n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman)\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp)\n {\n     {\n         LOCK(cs_main);\n@@ -3809,7 +3764,7 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n \n     NotifyHeaderTip();\n \n-    if (!ActivateBestChain(state, chainparams, pblock, connman))\n+    if (!ActivateBestChain(state, chainparams, pblock))\n         return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n@@ -4742,6 +4697,59 @@ std::string GetWarnings(const std::string& strFor)\n \n \n \n+//////////////////////////////////////////////////////////////////////////////\n+//\n+// blockchain -> download logic notification\n+//\n+\n+void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n+    const int nNewHeight = pindexNew->nHeight;\n+    connman->SetBestHeight(nNewHeight);\n+\n+    if (!fInitialDownload) {\n+        // Find the hashes of all blocks that weren't previously in the best chain.\n+        std::vector<uint256> vHashes;\n+        const CBlockIndex *pindexToAnnounce = pindexNew;\n+        while (pindexToAnnounce != pindexFork) {\n+            vHashes.push_back(pindexToAnnounce->GetBlockHash());\n+            pindexToAnnounce = pindexToAnnounce->pprev;\n+            if (vHashes.size() == MAX_BLOCKS_TO_ANNOUNCE) {\n+                // Limit announcements in case of a huge reorganization.\n+                // Rely on the peer's synchronization mechanism in that case.\n+                break;\n+            }\n+        }\n+        // Relay inventory, but don't relay old inventory during initial block download.\n+        connman->ForEachNode([nNewHeight, &vHashes](CNode* pnode) {\n+            if (nNewHeight > (pnode->nStartingHeight != -1 ? pnode->nStartingHeight - 2000 : 0)) {\n+                BOOST_REVERSE_FOREACH(const uint256& hash, vHashes) {\n+                    pnode->PushBlockHash(hash);\n+                }\n+            }\n+        });\n+    }\n+}\n+\n+void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n+    LOCK(cs_main);\n+\n+    const uint256 hash(block.GetHash());\n+    std::map<uint256, NodeId>::iterator it = mapBlockSource.find(hash);\n+\n+    int nDoS = 0;\n+    if (state.IsInvalid(nDoS)) {\n+        if (it != mapBlockSource.end() && State(it->second)) {\n+            assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n+            CBlockReject reject = {(unsigned char)state.GetRejectCode(), state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), hash};\n+            State(it->second)->rejects.push_back(reject);\n+            if (nDoS > 0)\n+                Misbehaving(it->second, nDoS);\n+        }\n+    }\n+    if (it != mapBlockSource.end())\n+        mapBlockSource.erase(it);\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Messages\n@@ -5845,7 +5853,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushMessage(NetMsgType::GETDATA, invs);\n         } else {\n             CValidationState state;\n-            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL, &connman);\n+            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -6021,7 +6029,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n-        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL, &connman);\n+        ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {\n             assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes"
      },
      {
        "sha": "e91f6e46fed5c3a5159dc2fdd159e43ee0e65073",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 44,
        "deletions": 28,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -16,6 +16,7 @@\n #include \"net.h\"\n #include \"script/script_error.h\"\n #include \"sync.h\"\n+#include \"validationinterface.h\"\n #include \"versionbits.h\"\n \n #include <algorithm>\n@@ -41,7 +42,6 @@ class CValidationInterface;\n class CValidationState;\n \n struct PrecomputedTransactionData;\n-struct CNodeStateStats;\n struct LockPoints;\n \n /** Default for DEFAULT_WHITELISTRELAY. */\n@@ -211,11 +211,6 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-/** Register with a network node to receive its signals */\n-void RegisterNodeSignals(CNodeSignals& nodeSignals);\n-/** Unregister a network node */\n-void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n-\n /** \n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n@@ -228,7 +223,7 @@ void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n  * @param[out]  dbp     The already known disk position of pblock, or NULL if not yet stored.\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp, CConnman* connman);\n+bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, CNode* pfrom, const CBlock* pblock, bool fForceProcessing, const CDiskBlockPos* dbp);\n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n@@ -245,15 +240,6 @@ bool InitBlockIndex(const CChainParams& chainparams);\n bool LoadBlockIndex();\n /** Unload database information */\n void UnloadBlockIndex();\n-/** Process protocol messages received from a given node */\n-bool ProcessMessages(CNode* pfrom, CConnman& connman);\n-/**\n- * Send queued protocol messages to be sent to a give node.\n- *\n- * @param[in]   pto             The node which we are sending messages to.\n- * @param[in]   connman         The connection manager for that node.\n- */\n-bool SendMessages(CNode* pto, CConnman& connman);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n@@ -269,7 +255,7 @@ std::string GetWarnings(const std::string& strFor);\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, const Consensus::Params& params, uint256 &hashBlock, bool fAllowSlow = false);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL, CConnman* connman = NULL);\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, const CBlock* pblock = NULL);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /**\n@@ -296,10 +282,6 @@ void UnlinkPrunedFiles(std::set<int>& setFilesToPrune);\n \n /** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n-/** Get statistics from node state */\n-bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n-/** Increase a node's misbehavior score. */\n-void Misbehaving(NodeId nodeid, int howmuch);\n /** Flush all state, indexes and buffers to disk. */\n void FlushStateToDisk();\n /** Prune block files and flush state to disk. */\n@@ -315,13 +297,6 @@ std::string FormatStateMessage(const CValidationState &state);\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-struct CNodeStateStats {\n-    int nMisbehavior;\n-    int nSyncHeight;\n-    int nCommonHeight;\n-    std::vector<int> vHeightInFlight;\n-};\n-\n \n \n /** \n@@ -553,4 +528,45 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+// The following things handle network-processing logic\n+// (and should be moved to a separate file)\n+\n+/** Register with a network node to receive its signals */\n+void RegisterNodeSignals(CNodeSignals& nodeSignals);\n+/** Unregister a network node */\n+void UnregisterNodeSignals(CNodeSignals& nodeSignals);\n+\n+class PeerLogicValidation : public CValidationInterface {\n+private:\n+    CConnman* connman;\n+\n+public:\n+    PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n+\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n+    virtual void BlockChecked(const CBlock& block, const CValidationState& state);\n+};\n+\n+struct CNodeStateStats {\n+    int nMisbehavior;\n+    int nSyncHeight;\n+    int nCommonHeight;\n+    std::vector<int> vHeightInFlight;\n+};\n+\n+/** Get statistics from node state */\n+bool GetNodeStateStats(NodeId nodeid, CNodeStateStats &stats);\n+/** Increase a node's misbehavior score. */\n+void Misbehaving(NodeId nodeid, int howmuch);\n+\n+/** Process protocol messages received from a given node */\n+bool ProcessMessages(CNode* pfrom, CConnman& connman);\n+/**\n+ * Send queued protocol messages to be sent to a give node.\n+ *\n+ * @param[in]   pto             The node which we are sending messages to.\n+ * @param[in]   connman         The connection manager for that node.\n+ */\n+bool SendMessages(CNode* pto, CConnman& connman);\n+\n #endif // BITCOIN_MAIN_H"
      },
      {
        "sha": "5414ac9ffd449023638737885078e0cfaee9901c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -1317,7 +1317,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     }\n \n     if (state.IsValid()) {\n-        ActivateBestChain(state, Params(), NULL, g_connman.get());\n+        ActivateBestChain(state, Params(), NULL);\n     }\n \n     if (!state.IsValid()) {\n@@ -1355,7 +1355,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n     }\n \n     CValidationState state;\n-    ActivateBestChain(state, Params(), NULL, g_connman.get());\n+    ActivateBestChain(state, Params(), NULL);\n \n     if (!state.IsValid()) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, state.GetRejectReason());"
      },
      {
        "sha": "ca6a314b50a66608a17087bc190425d51af52fae",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -132,7 +132,7 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n             continue;\n         }\n         CValidationState state;\n-        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL, g_connman.get()))\n+        if (!ProcessNewBlock(state, Params(), NULL, pblock, true, NULL))\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"ProcessNewBlock, block not accepted\");\n         ++nHeight;\n         blockHashes.push_back(pblock->GetHash().GetHex());\n@@ -751,7 +751,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     CValidationState state;\n     submitblock_StateCatcher sc(block.GetHash());\n     RegisterValidationInterface(&sc);\n-    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL, g_connman.get());\n+    bool fAccepted = ProcessNewBlock(state, Params(), NULL, &block, true, NULL);\n     UnregisterValidationInterface(&sc);\n     if (fBlockPresent)\n     {"
      },
      {
        "sha": "d6d7b5716ead55747ad44823810756072abd47ba",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -224,7 +224,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n         pblock->hashMerkleRoot = BlockMerkleRoot(*pblock);\n         pblock->nNonce = blockinfo[i].nonce;\n         CValidationState state;\n-        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL, connman));\n+        BOOST_CHECK(ProcessNewBlock(state, chainparams, NULL, pblock, true, NULL));\n         BOOST_CHECK(state.IsValid());\n         pblock->hashPrevBlock = pblock->GetHash();\n     }"
      },
      {
        "sha": "98f4ed939ff1853c6b19c7532a4d0c7c4ba6d3bc",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -127,7 +127,7 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n \n     CValidationState state;\n-    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL, connman);\n+    ProcessNewBlock(state, chainparams, NULL, &block, true, NULL);\n \n     CBlock result = block;\n     return result;"
      },
      {
        "sha": "085c336ccf6a986adf4fb2c3075417363a88ab82",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -13,7 +13,7 @@ CMainSignals& GetMainSignals()\n }\n \n void RegisterValidationInterface(CValidationInterface* pwalletIn) {\n-    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n+    g_signals.UpdatedBlockTip.connect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n     g_signals.SyncTransaction.connect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n     g_signals.UpdatedTransaction.connect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SetBestChain.connect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n@@ -33,7 +33,7 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n     g_signals.SetBestChain.disconnect(boost::bind(&CValidationInterface::SetBestChain, pwalletIn, _1));\n     g_signals.UpdatedTransaction.disconnect(boost::bind(&CValidationInterface::UpdatedTransaction, pwalletIn, _1));\n     g_signals.SyncTransaction.disconnect(boost::bind(&CValidationInterface::SyncTransaction, pwalletIn, _1, _2, _3));\n-    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1));\n+    g_signals.UpdatedBlockTip.disconnect(boost::bind(&CValidationInterface::UpdatedBlockTip, pwalletIn, _1, _2, _3));\n }\n \n void UnregisterAllValidationInterfaces() {\n@@ -47,7 +47,3 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.SyncTransaction.disconnect_all_slots();\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n }\n-\n-void SyncWithWallets(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {\n-    g_signals.SyncTransaction(tx, pindex, posInBlock);\n-}"
      },
      {
        "sha": "a29859999bfabe57a12ae665eba0376386d398dc",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -28,12 +28,10 @@ void RegisterValidationInterface(CValidationInterface* pwalletIn);\n void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n-/** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock = -1);\n \n class CValidationInterface {\n protected:\n-    virtual void UpdatedBlockTip(const CBlockIndex *pindex) {}\n+    virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {}\n     virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n@@ -49,7 +47,9 @@ class CValidationInterface {\n \n struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n-    boost::signals2::signal<void (const CBlockIndex *)> UpdatedBlockTip;\n+    boost::signals2::signal<void (const CBlockIndex *, const CBlockIndex *, bool fInitialDownload)> UpdatedBlockTip;\n+    /** A posInBlock value for SyncTransaction which indicates the transaction was conflicted, disconnected, or not in a block */\n+    static const int SYNC_TRANSACTION_NOT_IN_BLOCK = -1;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n     boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */"
      },
      {
        "sha": "a0196fe18418c66e0ff463d9fa66501325943ea8",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -124,12 +124,15 @@ void CZMQNotificationInterface::Shutdown()\n     }\n }\n \n-void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n+void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload)\n {\n+    if (fInitialDownload || pindexNew == pindexFork) // In IBD or blocks were disconnected without any new ones\n+        return;\n+\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {\n         CZMQAbstractNotifier *notifier = *i;\n-        if (notifier->NotifyBlock(pindex))\n+        if (notifier->NotifyBlock(pindexNew))\n         {\n             i++;\n         }"
      },
      {
        "sha": "037470ec17f9f398b9838471b4995b396869ab5e",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05998da5a7e2be6af0ecb53f4f645464646175ef/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05998da5a7e2be6af0ecb53f4f645464646175ef/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=05998da5a7e2be6af0ecb53f4f645464646175ef",
        "patch": "@@ -25,7 +25,7 @@ class CZMQNotificationInterface : public CValidationInterface\n \n     // CValidationInterface\n     void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n-    void UpdatedBlockTip(const CBlockIndex *pindex);\n+    void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n \n private:\n     CZMQNotificationInterface();"
      }
    ]
  },
  {
    "sha": "46304791353d2bb61004a035869612620c30b4eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjMwNDc5MTM1M2QyYmI2MTAwNGEwMzU4Njk2MTI2MjBjMzBiNGVi",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-10-17T23:11:35Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-10-19T08:07:02Z"
      },
      "message": "Make dnsseed's definition of acute need include relevant services.\n\nWe normally prefer to connect to peers offering the relevant services.\n\nIf we're not connected to enough peers with relevant services, we\n probably don't know about them and could use dnsseed's help.",
      "tree": {
        "sha": "6e3a8a5357a80d877f016ed2f66f35847af67853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e3a8a5357a80d877f016ed2f66f35847af67853"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46304791353d2bb61004a035869612620c30b4eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46304791353d2bb61004a035869612620c30b4eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46304791353d2bb61004a035869612620c30b4eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46304791353d2bb61004a035869612620c30b4eb/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9583477288072e203541b747fcffe8d50cfefb8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9583477288072e203541b747fcffe8d50cfefb8d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9583477288072e203541b747fcffe8d50cfefb8d"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "99f5604ff220e2cf8dd046a4a9a19f841267f5e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46304791353d2bb61004a035869612620c30b4eb/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46304791353d2bb61004a035869612620c30b4eb/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=46304791353d2bb61004a035869612620c30b4eb",
        "patch": "@@ -1462,12 +1462,19 @@ static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredSe\n void CConnman::ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n+    // Avoiding DNS seeds when we don't need them improves user privacy by\n+    //  creating fewer identifying DNS requests, reduces trust by giving seeds\n+    //  less influence on the network topology, and reduces traffic to the seeds.\n     if ((addrman.size() > 0) &&\n         (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         MilliSleep(11 * 1000);\n \n         LOCK(cs_vNodes);\n-        if (vNodes.size() >= 2) {\n+        int nRelevant = 0;\n+        for (auto pnode : vNodes) {\n+            nRelevant += pnode->fSuccessfullyConnected && ((pnode->nServices & nRelevantServices) == nRelevantServices);\n+        }\n+        if (nRelevant >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n             return;\n         }"
      }
    ]
  },
  {
    "sha": "1230890a6d04bd196e0a176de709296e0da2639d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjMwODkwYTZkMDRiZDE5NmUwYTE3NmRlNzA5Mjk2ZTBkYTI2Mzlk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T08:35:37Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T08:35:44Z"
      },
      "message": "Merge #8936: Report NodeId in misbehaving debug\n\na1919ad Report NodeId in misbehaving debug (R E Broadley)",
      "tree": {
        "sha": "975f3a2011a555da8a61d64eccea930798c339ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/975f3a2011a555da8a61d64eccea930798c339ce"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1230890a6d04bd196e0a176de709296e0da2639d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBzBgAAoJEHSBCwEjRsmmLFgH/3CgzwouQA/l6mfIFDwFiPzO\nM20E91dmVVpIWICKdTnka7cde3f3vW6dNsP470YaHGneKR9x+KcUS23RmiBgSQcB\nzaFGBkaVpab1/UoCdGdd56CjMiInlZWTW1OvyjysbJ+7VfpGY5XBhWRjl8xMl2wK\nl1ZI9fNEB12Mdpjt/rg4igxhIvYv2pHreNvR7RkA05yx1WxinQhdsDPlQlJh3OFe\nLc17GA4QAIBlAwIuSt0nDrgCWoZJLKsgP17zKcqA4s6T/jOUR13lxv4gEFkYFyDe\nNfZJm3QfoykkwG94ddaUr1eKrO89RRVbtLDA1rKwJi43aeMnVW3ZrW91pL3GPoQ=\n=HvfL\n-----END PGP SIGNATURE-----",
        "payload": "tree 975f3a2011a555da8a61d64eccea930798c339ce\nparent 05998da5a7e2be6af0ecb53f4f645464646175ef\nparent a1919adab0e72e8b465f723099788d9cc00363da\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476866137 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476866144 +0200\n\nMerge #8936: Report NodeId in misbehaving debug\n\na1919ad Report NodeId in misbehaving debug (R E Broadley)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1230890a6d04bd196e0a176de709296e0da2639d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1230890a6d04bd196e0a176de709296e0da2639d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1230890a6d04bd196e0a176de709296e0da2639d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05998da5a7e2be6af0ecb53f4f645464646175ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05998da5a7e2be6af0ecb53f4f645464646175ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05998da5a7e2be6af0ecb53f4f645464646175ef"
      },
      {
        "sha": "a1919adab0e72e8b465f723099788d9cc00363da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1919adab0e72e8b465f723099788d9cc00363da",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1919adab0e72e8b465f723099788d9cc00363da"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1777717cd9db2c94dd54821563b753744313c6a0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1230890a6d04bd196e0a176de709296e0da2639d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1230890a6d04bd196e0a176de709296e0da2639d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1230890a6d04bd196e0a176de709296e0da2639d",
        "patch": "@@ -1858,10 +1858,10 @@ void Misbehaving(NodeId pnode, int howmuch)\n     int banscore = GetArg(\"-banscore\", DEFAULT_BANSCORE_THRESHOLD);\n     if (state->nMisbehavior >= banscore && state->nMisbehavior - howmuch < banscore)\n     {\n-        LogPrintf(\"%s: %s (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrintf(\"%s: %s peer=%d (%d -> %d) BAN THRESHOLD EXCEEDED\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n         state->fShouldBan = true;\n     } else\n-        LogPrintf(\"%s: %s (%d -> %d)\\n\", __func__, state->name, state->nMisbehavior-howmuch, state->nMisbehavior);\n+        LogPrintf(\"%s: %s peer=%d (%d -> %d)\\n\", __func__, state->name, pnode, state->nMisbehavior-howmuch, state->nMisbehavior);\n }\n \n void static InvalidChainFound(CBlockIndex* pindexNew)"
      }
    ]
  },
  {
    "sha": "e44753c0679497ceabf094ba08df06a8064332cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDQ3NTNjMDY3OTQ5N2NlYWJmMDk0YmEwOGRmMDZhODA2NDMzMmNm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T08:41:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T08:43:54Z"
      },
      "message": "Merge #8949: Be more agressive in getting connections to peers with relevant services.\n\n4630479 Make dnsseed's definition of acute need include relevant services. (Gregory Maxwell)\n9583477 Be more aggressive in connecting to peers with relevant services. (Gregory Maxwell)",
      "tree": {
        "sha": "a41558f99d3070c9ce23ad6849c674ea89248b6c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a41558f99d3070c9ce23ad6849c674ea89248b6c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e44753c0679497ceabf094ba08df06a8064332cf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBzJKAAoJEHSBCwEjRsmmAmEH/jIm65lxAg6ae+5saBdKCyCH\nwrbKQt5Bbjqe7C0xOlXcNS7r396J2vNcIOk+xp4a+4gNeR9jTKgc0wh6+mmpBtxx\n3krhL6ntMJCFqYhLEZOv40V2WpLy2KyohfylTyMipuTRXtatUDOW8MP5H2SY0Pi1\nLS5PCGc+UTgrlveCnCxVZScT9xiQCCACaaoIdeXaAd77vfco/v+d1aBXBgHKjl5P\nr7kXXAo0unq0BjEQqTKOr2eYrECc23fSphZTI6QHdfParBX8X2wirrJ5fQ97sua+\nKuae0MMO4XCFVPNIRwMUg5oJs0cdIEX71VIr9FuuRljy1okTo90mb40RiLqd1YY=\n=bwS2\n-----END PGP SIGNATURE-----",
        "payload": "tree a41558f99d3070c9ce23ad6849c674ea89248b6c\nparent 1230890a6d04bd196e0a176de709296e0da2639d\nparent 46304791353d2bb61004a035869612620c30b4eb\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476866509 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476866634 +0200\n\nMerge #8949: Be more agressive in getting connections to peers with relevant services.\n\n4630479 Make dnsseed's definition of acute need include relevant services. (Gregory Maxwell)\n9583477 Be more aggressive in connecting to peers with relevant services. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e44753c0679497ceabf094ba08df06a8064332cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e44753c0679497ceabf094ba08df06a8064332cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e44753c0679497ceabf094ba08df06a8064332cf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1230890a6d04bd196e0a176de709296e0da2639d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1230890a6d04bd196e0a176de709296e0da2639d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1230890a6d04bd196e0a176de709296e0da2639d"
      },
      {
        "sha": "46304791353d2bb61004a035869612620c30b4eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46304791353d2bb61004a035869612620c30b4eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46304791353d2bb61004a035869612620c30b4eb"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "1bca168d1d15c8d3b72078f40c92f9b2d9697040",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e44753c0679497ceabf094ba08df06a8064332cf/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e44753c0679497ceabf094ba08df06a8064332cf/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e44753c0679497ceabf094ba08df06a8064332cf",
        "patch": "@@ -1463,12 +1463,19 @@ static std::string GetDNSHost(const CDNSSeedData& data, ServiceFlags* requiredSe\n void CConnman::ThreadDNSAddressSeed()\n {\n     // goal: only query DNS seeds if address need is acute\n+    // Avoiding DNS seeds when we don't need them improves user privacy by\n+    //  creating fewer identifying DNS requests, reduces trust by giving seeds\n+    //  less influence on the network topology, and reduces traffic to the seeds.\n     if ((addrman.size() > 0) &&\n         (!GetBoolArg(\"-forcednsseed\", DEFAULT_FORCEDNSSEED))) {\n         MilliSleep(11 * 1000);\n \n         LOCK(cs_vNodes);\n-        if (vNodes.size() >= 2) {\n+        int nRelevant = 0;\n+        for (auto pnode : vNodes) {\n+            nRelevant += pnode->fSuccessfullyConnected && ((pnode->nServices & nRelevantServices) == nRelevantServices);\n+        }\n+        if (nRelevant >= 2) {\n             LogPrintf(\"P2P peers available. Skipped DNS seeding.\\n\");\n             return;\n         }\n@@ -1675,8 +1682,8 @@ void CConnman::ThreadOpenConnections()\n             if (nANow - addr.nLastTry < 600 && nTries < 30)\n                 continue;\n \n-            // only consider nodes missing relevant services after 40 failed attempts\n-            if ((addr.nServices & nRelevantServices) != nRelevantServices && nTries < 40)\n+            // only consider nodes missing relevant services after 40 failed attempts and only if less than half the outbound are up.\n+            if ((addr.nServices & nRelevantServices) != nRelevantServices && (nTries < 40 || nOutbound >= (nMaxOutbound >> 1)))\n                 continue;\n \n             // do not allow non-default ports, unless after 50 invalid addresses selected already"
      }
    ]
  },
  {
    "sha": "59daa58d6a17bb1170c724f2d01d43c2ec21a9b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWRhYTU4ZDZhMTdiYjExNzBjNzI0ZjJkMDFkNDNjMmVjMjFhOWI0",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-18T07:17:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T08:47:32Z"
      },
      "message": "RPC/Mining: getblocktemplate: Update and fix formatting of help",
      "tree": {
        "sha": "54ce73403aa78ad4a6db3d22e26480c9884ac620",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/54ce73403aa78ad4a6db3d22e26480c9884ac620"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c06bae39edfaa9c0855d83377ad8fda09e4fa08"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 36,
      "deletions": 30
    },
    "files": [
      {
        "sha": "33c1893ff6944c6a2bc84d6337cbb45d6ccfff5d",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 30,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=59daa58d6a17bb1170c724f2d01d43c2ec21a9b4",
        "patch": "@@ -319,67 +319,73 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getblocktemplate ( \\\"jsonrequestobject\\\" )\\n\"\n+            \"getblocktemplate ( TemplateRequest )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n             \"It returns data needed to construct a block to work on.\\n\"\n-            \"For full specification, see BIPs 22 and 9:\\n\"\n+            \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n             \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n             \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\"\n \n             \"\\nArguments:\\n\"\n-            \"1. \\\"jsonrequestobject\\\"       (string, optional) A json object in the following spec\\n\"\n+            \"1. TemplateRequest          (json object, optional) A json object in the following spec\\n\"\n             \"     {\\n\"\n-            \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\" or omitted\\n\"\n-            \"       \\\"capabilities\\\":[       (array, optional) A list of strings\\n\"\n-            \"           \\\"support\\\"           (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\\n\"\n+            \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\\n\"\n+            \"       \\\"capabilities\\\":[     (array, optional) A list of strings\\n\"\n+            \"           \\\"support\\\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\\n\"\n             \"           ,...\\n\"\n-            \"         ]\\n\"\n+            \"       ],\\n\"\n+            \"       \\\"rules\\\":[            (array, optional) A list of strings\\n\"\n+            \"           \\\"support\\\"          (string) client side supported softfork deployment\\n\"\n+            \"           ,...\\n\"\n+            \"       ]\\n\"\n             \"     }\\n\"\n             \"\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"version\\\" : n,                    (numeric) The block version\\n\"\n+            \"  \\\"version\\\" : n,                    (numeric) The preferred block version\\n\"\n             \"  \\\"rules\\\" : [ \\\"rulename\\\", ... ],    (array of strings) specific block rules that are to be enforced\\n\"\n             \"  \\\"vbavailable\\\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\\n\"\n-            \"      \\\"rulename\\\" : bitnumber        (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\\n\"\n+            \"      \\\"rulename\\\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\\n\"\n             \"      ,...\\n\"\n             \"  },\\n\"\n             \"  \\\"vbrequired\\\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",    (string) The hash of current highest block\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",     (string) The hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n-            \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"txid\\\" : \\\"xxxx\\\",          (string) transaction id encoded in little-endian hexadecimal\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n-            \"         \\\"depends\\\" : [              (array) array of numbers \\n\"\n-            \"             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n+            \"         \\\"data\\\" : \\\"xxxx\\\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n+            \"         \\\"txid\\\" : \\\"xxxx\\\",             (string) transaction id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",             (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n+            \"         \\\"depends\\\" : [                (array) array of numbers \\n\"\n+            \"             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\"\n             \"         ],\\n\"\n-            \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n-            \"         \\\"sigops\\\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n-            \"         \\\"weight\\\" : n,               (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n-            \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n+            \"         \\\"fee\\\": n,                    (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n+            \"         \\\"sigops\\\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n+            \"         \\\"weight\\\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n+            \"         \\\"required\\\" : true|false      (boolean) if provided and true, this transaction must be in the final block\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"coinbaseaux\\\" : {                  (json object) data that should be included in the coinbase's scriptSig content\\n\"\n-            \"      \\\"flags\\\" : \\\"flags\\\"            (string) \\n\"\n+            \"  \\\"coinbaseaux\\\" : {                 (json object) data that should be included in the coinbase's scriptSig content\\n\"\n+            \"      \\\"flags\\\" : \\\"xx\\\"                  (string) key name is to be ignored, and value included in scriptSig\\n\"\n             \"  },\\n\"\n-            \"  \\\"coinbasevalue\\\" : n,               (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)\\n\"\n-            \"  \\\"coinbasetxn\\\" : { ... },           (json object) information for coinbase transaction\\n\"\n-            \"  \\\"target\\\" : \\\"xxxx\\\",               (string) The hash target\\n\"\n-            \"  \\\"mintime\\\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mutable\\\" : [                      (array of string) list of ways the block template may be changed \\n\"\n-            \"     \\\"value\\\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n+            \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)\\n\"\n+            \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n+            \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n+            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mutable\\\" : [                     (array of string) list of ways the block template may be changed \\n\"\n+            \"     \\\"value\\\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n-            \"  \\\"sigoplimit\\\" : n,                 (numeric) cost limit of sigops in blocks\\n\"\n+            \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",(string) A range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n             \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n             \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n+            \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n             \"}\\n\"\n "
      }
    ]
  },
  {
    "sha": "ef0c9ee2960fda58b2fe5b0c3b4c672231b30322",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjBjOWVlMjk2MGZkYTU4YjJmZTViMGMzYjRjNjcyMjMxYjMwMzIy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-11-30T19:57:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-19T08:51:59Z"
      },
      "message": "[Qt] make warnings label selectable",
      "tree": {
        "sha": "28b78b50302917cddcc1f6d2c5298e496b108500",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28b78b50302917cddcc1f6d2c5298e496b108500"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "eb7741605b32c25893f687e19820dab114d04fe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eb7741605b32c25893f687e19820dab114d04fe1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eb7741605b32c25893f687e19820dab114d04fe1"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4a6ee92508d5e6442bd243d77c8bb2bbbe15defc",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=ef0c9ee2960fda58b2fe5b0c3b4c672231b30322",
        "patch": "@@ -20,14 +20,17 @@\n       <bool>false</bool>\n      </property>\n      <property name=\"styleSheet\">\n-      <string notr=\"true\">background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop:0 #F0D0A0, stop:1 #F8D488); color:#000000;</string>\n+      <string notr=\"true\">QLabel { background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop:0 #F0D0A0, stop:1 #F8D488); color:#000000; }</string>\n      </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>\n      </property>\n      <property name=\"margin\">\n       <number>3</number>\n      </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n     </widget>\n    </item>\n    <item>"
      }
    ]
  },
  {
    "sha": "b2df292e341d02068fdf8da36c3fc0019d198c5e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMmRmMjkyZTM0MWQwMjA2OGZkZjhkYTM2YzNmYzAwMTlkMTk4YzVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T08:49:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T08:59:11Z"
      },
      "message": "Merge #8951: RPC/Mining: getblocktemplate: Update and fix formatting of help\n\n59daa58 RPC/Mining: getblocktemplate: Update and fix formatting of help (Luke Dashjr)",
      "tree": {
        "sha": "231ad0cd831adca577a70122402385774eb3a356",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/231ad0cd831adca577a70122402385774eb3a356"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b2df292e341d02068fdf8da36c3fc0019d198c5e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBzXfAAoJEHSBCwEjRsmmDcwH/iFDngR2VNPNRneOAX9jUKDV\noB1nEzmklkewJorqlktnI5aSdjRk03Fk/aWX1ngeBfP9daY83KU4WFNdtrUsqIlK\nGUsO+NHuVasnjFpngIbKpqSS6uvMnRzpH6nkduAaOZjrVQqnjwZ+Dgh3jeMTBVNT\n8p0ME947aPSNN7z7GyG4Coazf7q/pXbUeJXqk9yNMNattt5SfitrhG1OetKYY6ON\nw2SUN2VU51DMBUV/TVyWzEfeL86a6eiNuqScJscWaTTZYsL47Bki41gWp1PeX2Qq\nxutDDfCQTIBkveiceuBRVzsloCCO8SdNu1uR+XoLMDfm5u4ml3arIdoSVSIJ+Ec=\n=YdLP\n-----END PGP SIGNATURE-----",
        "payload": "tree 231ad0cd831adca577a70122402385774eb3a356\nparent e44753c0679497ceabf094ba08df06a8064332cf\nparent 59daa58d6a17bb1170c724f2d01d43c2ec21a9b4\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476866992 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476867551 +0200\n\nMerge #8951: RPC/Mining: getblocktemplate: Update and fix formatting of help\n\n59daa58 RPC/Mining: getblocktemplate: Update and fix formatting of help (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2df292e341d02068fdf8da36c3fc0019d198c5e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b2df292e341d02068fdf8da36c3fc0019d198c5e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2df292e341d02068fdf8da36c3fc0019d198c5e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e44753c0679497ceabf094ba08df06a8064332cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e44753c0679497ceabf094ba08df06a8064332cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e44753c0679497ceabf094ba08df06a8064332cf"
      },
      {
        "sha": "59daa58d6a17bb1170c724f2d01d43c2ec21a9b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59daa58d6a17bb1170c724f2d01d43c2ec21a9b4"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 36,
      "deletions": 30
    },
    "files": [
      {
        "sha": "891b04482c9635534b7659b8cc3bb3d775f5915c",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 30,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b2df292e341d02068fdf8da36c3fc0019d198c5e/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b2df292e341d02068fdf8da36c3fc0019d198c5e/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=b2df292e341d02068fdf8da36c3fc0019d198c5e",
        "patch": "@@ -319,67 +319,73 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n-            \"getblocktemplate ( \\\"jsonrequestobject\\\" )\\n\"\n+            \"getblocktemplate ( TemplateRequest )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n             \"It returns data needed to construct a block to work on.\\n\"\n-            \"For full specification, see BIPs 22 and 9:\\n\"\n+            \"For full specification, see BIPs 22, 23, 9, and 145:\\n\"\n             \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0023.mediawiki\\n\"\n             \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\\n\"\n \n             \"\\nArguments:\\n\"\n-            \"1. \\\"jsonrequestobject\\\"       (string, optional) A json object in the following spec\\n\"\n+            \"1. TemplateRequest          (json object, optional) A json object in the following spec\\n\"\n             \"     {\\n\"\n-            \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\" or omitted\\n\"\n-            \"       \\\"capabilities\\\":[       (array, optional) A list of strings\\n\"\n-            \"           \\\"support\\\"           (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\\n\"\n+            \"       \\\"mode\\\":\\\"template\\\"    (string, optional) This must be set to \\\"template\\\", \\\"proposal\\\" (see BIP 23), or omitted\\n\"\n+            \"       \\\"capabilities\\\":[     (array, optional) A list of strings\\n\"\n+            \"           \\\"support\\\"          (string) client side supported feature, 'longpoll', 'coinbasetxn', 'coinbasevalue', 'proposal', 'serverlist', 'workid'\\n\"\n             \"           ,...\\n\"\n-            \"         ]\\n\"\n+            \"       ],\\n\"\n+            \"       \\\"rules\\\":[            (array, optional) A list of strings\\n\"\n+            \"           \\\"support\\\"          (string) client side supported softfork deployment\\n\"\n+            \"           ,...\\n\"\n+            \"       ]\\n\"\n             \"     }\\n\"\n             \"\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n-            \"  \\\"version\\\" : n,                    (numeric) The block version\\n\"\n+            \"  \\\"version\\\" : n,                    (numeric) The preferred block version\\n\"\n             \"  \\\"rules\\\" : [ \\\"rulename\\\", ... ],    (array of strings) specific block rules that are to be enforced\\n\"\n             \"  \\\"vbavailable\\\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\\n\"\n-            \"      \\\"rulename\\\" : bitnumber        (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\\n\"\n+            \"      \\\"rulename\\\" : bitnumber          (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\\n\"\n             \"      ,...\\n\"\n             \"  },\\n\"\n             \"  \\\"vbrequired\\\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\\n\"\n-            \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",    (string) The hash of current highest block\\n\"\n+            \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",     (string) The hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n-            \"         \\\"data\\\" : \\\"xxxx\\\",          (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n-            \"         \\\"txid\\\" : \\\"xxxx\\\",          (string) transaction id encoded in little-endian hexadecimal\\n\"\n-            \"         \\\"hash\\\" : \\\"xxxx\\\",          (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n-            \"         \\\"depends\\\" : [              (array) array of numbers \\n\"\n-            \"             n                        (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n+            \"         \\\"data\\\" : \\\"xxxx\\\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n+            \"         \\\"txid\\\" : \\\"xxxx\\\",             (string) transaction id encoded in little-endian hexadecimal\\n\"\n+            \"         \\\"hash\\\" : \\\"xxxx\\\",             (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n+            \"         \\\"depends\\\" : [                (array) array of numbers \\n\"\n+            \"             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\"\n             \"         ],\\n\"\n-            \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n-            \"         \\\"sigops\\\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n-            \"         \\\"weight\\\" : n,               (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n-            \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n+            \"         \\\"fee\\\": n,                    (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n+            \"         \\\"sigops\\\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n+            \"         \\\"weight\\\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n+            \"         \\\"required\\\" : true|false      (boolean) if provided and true, this transaction must be in the final block\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"coinbaseaux\\\" : {                  (json object) data that should be included in the coinbase's scriptSig content\\n\"\n-            \"      \\\"flags\\\" : \\\"flags\\\"            (string) \\n\"\n+            \"  \\\"coinbaseaux\\\" : {                 (json object) data that should be included in the coinbase's scriptSig content\\n\"\n+            \"      \\\"flags\\\" : \\\"xx\\\"                  (string) key name is to be ignored, and value included in scriptSig\\n\"\n             \"  },\\n\"\n-            \"  \\\"coinbasevalue\\\" : n,               (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)\\n\"\n-            \"  \\\"coinbasetxn\\\" : { ... },           (json object) information for coinbase transaction\\n\"\n-            \"  \\\"target\\\" : \\\"xxxx\\\",               (string) The hash target\\n\"\n-            \"  \\\"mintime\\\" : xxx,                   (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mutable\\\" : [                      (array of string) list of ways the block template may be changed \\n\"\n-            \"     \\\"value\\\"                         (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n+            \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in Satoshis)\\n\"\n+            \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n+            \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n+            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mutable\\\" : [                     (array of string) list of ways the block template may be changed \\n\"\n+            \"     \\\"value\\\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n-            \"  \\\"sigoplimit\\\" : n,                 (numeric) cost limit of sigops in blocks\\n\"\n+            \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",(string) A range of valid nonces\\n\"\n+            \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n             \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n             \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n+            \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n             \"}\\n\"\n "
      }
    ]
  },
  {
    "sha": "d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNzM2YTZlYjFmOTFiYTg4MDU5ZmY0MTYzNGJkNGVhNzE1ZDlhMWYx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T09:27:13Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T09:27:21Z"
      },
      "message": "Merge #8972: [Qt] make warnings label selectable (jonasschnelli)\n\nef0c9ee [Qt] make warnings label selectable (Jonas Schnelli)",
      "tree": {
        "sha": "c45be0612ca3c8254d4fad8150d0b914aaa2e42e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c45be0612ca3c8254d4fad8150d0b914aaa2e42e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYBzx5AAoJEHSBCwEjRsmm30kIAM0kaiBR3RJy2IwizpMHb4L0\nctiaopAbtN5C9mkgPbu4ohBKfDb69VfKcamUGwGa/S18SeMIa8Ymyxsd2cX2r6zi\nCZdG8C7BOFv3BXNn1AAQWpfm0tWXOb4u+lg3myb7vxJ7b7NDaqmZh7+XCx20vlTn\nWqrxPMy1HmA0N4hyf0V6AQmCz765+YaC6xBFw8yPFniHj68UDCB14zuHcPnl+LeD\nW6+UwlktuqetkPVkIzCTIqNJ4kCrsr1Z4DXD8CdMbJHgc35mYn00L3T8omXzBFjh\nmCHRP8yQFTHBcCasryL55G+mxWjWMkn/Pfggt55yy1wLUOuYnaQI/1fycMYrVFs=\n=h5in\n-----END PGP SIGNATURE-----",
        "payload": "tree c45be0612ca3c8254d4fad8150d0b914aaa2e42e\nparent b2df292e341d02068fdf8da36c3fc0019d198c5e\nparent ef0c9ee2960fda58b2fe5b0c3b4c672231b30322\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476869233 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476869241 +0200\n\nMerge #8972: [Qt] make warnings label selectable (jonasschnelli)\n\nef0c9ee [Qt] make warnings label selectable (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b2df292e341d02068fdf8da36c3fc0019d198c5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b2df292e341d02068fdf8da36c3fc0019d198c5e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b2df292e341d02068fdf8da36c3fc0019d198c5e"
      },
      {
        "sha": "ef0c9ee2960fda58b2fe5b0c3b4c672231b30322",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef0c9ee2960fda58b2fe5b0c3b4c672231b30322"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "710801ee96dfee59dd97b14a0bd4b6d83537119e",
        "filename": "src/qt/forms/overviewpage.ui",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1/src/qt/forms/overviewpage.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1/src/qt/forms/overviewpage.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/overviewpage.ui?ref=d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "patch": "@@ -20,14 +20,17 @@\n       <bool>false</bool>\n      </property>\n      <property name=\"styleSheet\">\n-      <string notr=\"true\">background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop:0 #F0D0A0, stop:1 #F8D488); color:#000000;</string>\n+      <string notr=\"true\">QLabel { background-color: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0, stop:0 #F0D0A0, stop:1 #F8D488); color:#000000; }</string>\n      </property>\n      <property name=\"wordWrap\">\n       <bool>true</bool>\n      </property>\n      <property name=\"margin\">\n       <number>3</number>\n      </property>\n+     <property name=\"textInteractionFlags\">\n+      <set>Qt::TextSelectableByMouse</set>\n+     </property>\n     </widget>\n    </item>\n    <item>"
      }
    ]
  },
  {
    "sha": "23c32a9694e119f957c124f4501294ae7a5fd99a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyM2MzMmE5Njk0ZTExOWY5NTdjMTI0ZjQ1MDEyOTRhZTdhNWZkOTlh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-29T16:48:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T12:30:14Z"
      },
      "message": "rpc: Change JSONRPCRequest to JSONRPCRequestObj\n\nThis is more consistent with `JSONRPCReplyObj`.",
      "tree": {
        "sha": "37d8d20f815136a82d7e97cb3b8e77d14d42aa38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/37d8d20f815136a82d7e97cb3b8e77d14d42aa38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/23c32a9694e119f957c124f4501294ae7a5fd99a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB2dWAAoJECnUvLZBb1PsFMYP/AjaCuk3T9qJZZxEOx8+TaW8\nHgrOmU3y7XEaaGSYGDFLrrWAqa9IqWfWy8eQuzV+8+e6rKJ4FMezj4QrfJyw03Gd\nNtSRICMPfgQG75q5TsPdj1C++L9V5nbkAL+Hr3iyxxyjO2mV4uppJ1ktGiWD8dTa\ntNn++rkSTIislHUH5miB1A1L3NMU9aQUU4uK2vid9Y4gYdve2smf+qjHP4fxdE1B\ntMj8hLKEw5jkPowT+amc21j1bWzVg6ijguzTic3/Mo9F6Dcinmlh2II/xgHkzuGO\n5jQtDcMczzVJajUlVfZiqxkbxYWNtgMO4mU6DVaokOVmopm5CbGgBeBSNBdZ2KMg\n9ljqXv+hVAQNOZjQX4bliNrNqUEjbQIVePr7lUYje/wCKnmQD6m9rNR3T/AQv9xa\niEV9ygfj9nA3XBu9yoCB2sU2cEN+nRvPt5K4ZsnPmydIT/wVu072zz9MlJAwXkJF\nRAV4vfLKVMfIyL5RUZ5+iClD8+Y9R+tO04O312XNDhLrAx90ncDDrZw/tDZWcRd7\nxOczUMvxywotEA5ehTnGY/mojIuTj038hNOloJgGe5fgqISub0gktVMmEJeQtIWc\n4/4wGmL0Tk5CrOUUlET+h6nSE/9gKVJmbS0kbq6orrFoSv/1oBhk2ESPFp3LNeNA\nAWFtNzYbR9mf55sK+aV0\n=nbLP\n-----END PGP SIGNATURE-----",
        "payload": "tree 37d8d20f815136a82d7e97cb3b8e77d14d42aa38\nparent d736a6eb1f91ba88059ff41634bd4ea715d9a1f1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1475167707 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476880214 +0200\n\nrpc: Change JSONRPCRequest to JSONRPCRequestObj\n\nThis is more consistent with `JSONRPCReplyObj`.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c32a9694e119f957c124f4501294ae7a5fd99a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/23c32a9694e119f957c124f4501294ae7a5fd99a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c32a9694e119f957c124f4501294ae7a5fd99a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "2d66448d80ac353f7ebf16f1e150f1fd669ea236",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c32a9694e119f957c124f4501294ae7a5fd99a/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c32a9694e119f957c124f4501294ae7a5fd99a/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=23c32a9694e119f957c124f4501294ae7a5fd99a",
        "patch": "@@ -223,7 +223,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n \n     // Attach request data\n-    std::string strRequest = JSONRPCRequest(strMethod, params, 1);\n+    std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";\n     struct evbuffer * output_buffer = evhttp_request_get_output_buffer(req);\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());"
      },
      {
        "sha": "ec186f4fc58888e8b8938fb1699b08df35f7ca06",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=23c32a9694e119f957c124f4501294ae7a5fd99a",
        "patch": "@@ -26,13 +26,13 @@ using namespace std;\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n  */\n \n-string JSONRPCRequest(const string& strMethod, const UniValue& params, const UniValue& id)\n+UniValue JSONRPCRequestObj(const string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n-    return request.write() + \"\\n\";\n+    return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)"
      },
      {
        "sha": "c74fa0070fc6d62975d9891180f448f71628dfd5",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/23c32a9694e119f957c124f4501294ae7a5fd99a/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=23c32a9694e119f957c124f4501294ae7a5fd99a",
        "patch": "@@ -77,7 +77,7 @@ enum RPCErrorCode\n     RPC_WALLET_ALREADY_UNLOCKED     = -17, //!< Wallet is already unlocked\n };\n \n-std::string JSONRPCRequest(const std::string& strMethod, const UniValue& params, const UniValue& id);\n+UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);"
      }
    ]
  },
  {
    "sha": "69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWQxYzI1NzY4YTg2NDliZmM3ZWI4ZTljMzViOGZlOTg3NGFjOWZj",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-22T07:46:41Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T12:42:08Z"
      },
      "message": "[RPC] Give RPC commands more information about the RPC request",
      "tree": {
        "sha": "88c4ef2720fc4e88d080c6fc480c341bf118a985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88c4ef2720fc4e88d080c6fc480c341bf118a985"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB2ojAAoJECnUvLZBb1PsQccQAIo8loOWQy7+6BhZt1uHwCL9\nTLCWxPfJP9ldDpVt9aWnh/h/Iul0g2SgUP9AV4jYNWVDkjS9P9UGYkQik95JJZbA\nMN/72Ci+xThLxm0Zd5IIugSpwHnLARuCqVdAg8/ekQgLI/puYKiBAiVpj00dkzdD\na/amCfAkTDpfXRYJRPAR6soeE+oOkDt474SAw9G3PfKXieTENSUeLHN51d1GkZnx\nEm0HUYbDE3ccUvLG+hUObmUmif9+WJDK3yyOEIAW7AmGjl02r/5wk0hs1WkSWxKI\nRUhYieKWgfNaLySTPJBUSaklaQEqMyFnOwbi4xMn494OQPC2b8cclfOaeS2Q/1JW\nyy81awsiXIDjM6rTKZl/ftWZS2qmTnAmn0DpyGLhigB4FpAzcc1IgZOpBfCBsb2l\nySR/MvU0S4UMi9ylzzNkYEngziCfobO09wJMVNC/qIleEm4iZ/I2LkiNX5zxCyOL\nlOm7JDwN2ScKDvUMczov6tvIF46mbifVqv4HUOlpDRXcJs/HkUjn/GR2I1sIa/Nw\nF9e9Qy/tktT2wUSN8rj7M9mY8ORBecTMvVFKkwoeaZamZjFvYcS6v+lx/Ndw7vhz\nS6KNlmCdGRYM2Xm3+QlhcTFpD8EdD9Q+ZsY7DPYwY6Dk+E9GjLW5w1mI7EaTmbXK\n0F/pLukELQ8pADHT2O/d\n=RGMT\n-----END PGP SIGNATURE-----",
        "payload": "tree 88c4ef2720fc4e88d080c6fc480c341bf118a985\nparent 23c32a9694e119f957c124f4501294ae7a5fd99a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1474530401 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476880928 +0200\n\n[RPC] Give RPC commands more information about the RPC request\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "23c32a9694e119f957c124f4501294ae7a5fd99a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/23c32a9694e119f957c124f4501294ae7a5fd99a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/23c32a9694e119f957c124f4501294ae7a5fd99a"
      }
    ],
    "stats": {
      "total": 1105,
      "additions": 558,
      "deletions": 547
    },
    "files": [
      {
        "sha": "54651911aa38d3d9c63f68183de7b8bc6cd766a8",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -172,19 +172,22 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRequest jreq;\n+    JSONRPCRequest jreq;\n     try {\n         // Parse request\n         UniValue valRequest;\n         if (!valRequest.read(req->ReadBody()))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n+        // Set the URI\n+        jreq.URI = req->GetURI();\n+\n         std::string strReply;\n         // singleton request\n         if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n \n-            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+            UniValue result = tableRPC.execute(jreq);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);"
      },
      {
        "sha": "f10dddf589e2801a8bae700aa6d4f02826fa2c0c",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -246,7 +246,10 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n                         std::string strPrint;\n                         // Convert argument list to JSON objects in method-dependent way,\n                         // and pass it along with the method name to the dispatcher.\n-                        lastResult = tableRPC.execute(stack.back()[0], RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end())));\n+                        JSONRPCRequest req;\n+                        req.params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n+                        req.strMethod = stack.back()[0];\n+                        lastResult = tableRPC.execute(req);\n \n                         state = STATE_COMMAND_EXECUTED;\n                         curarg.clear();"
      },
      {
        "sha": "707dfe69871f7dd8a2b771d1b8fc1eaeb112ab80",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -274,7 +274,7 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n-UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n+UniValue getblockchaininfo(const JSONRPCRequest& request);\n \n static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n@@ -285,8 +285,8 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RF_JSON: {\n-        UniValue rpcParams(UniValue::VARR);\n-        UniValue chainInfoObject = getblockchaininfo(rpcParams, false);\n+        JSONRPCRequest jsonRequest;\n+        UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);"
      },
      {
        "sha": "0c827a1e3881d6ad3e053fcb1226237eb01ec510",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 79,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -146,9 +146,9 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n-UniValue getblockcount(const UniValue& params, bool fHelp)\n+UniValue getblockcount(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockcount\\n\"\n             \"\\nReturns the number of blocks in the longest block chain.\\n\"\n@@ -163,9 +163,9 @@ UniValue getblockcount(const UniValue& params, bool fHelp)\n     return chainActive.Height();\n }\n \n-UniValue getbestblockhash(const UniValue& params, bool fHelp)\n+UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getbestblockhash\\n\"\n             \"\\nReturns the hash of the best (tip) block in the longest block chain.\\n\"\n@@ -190,9 +190,9 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n \tcond_blockchange.notify_all();\n }\n \n-UniValue waitfornewblock(const UniValue& params, bool fHelp)\n+UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"waitfornewblock\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -209,8 +209,8 @@ UniValue waitfornewblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n         );\n     int timeout = 0;\n-    if (params.size() > 0)\n-        timeout = params[0].get_int();\n+    if (request.params.size() > 0)\n+        timeout = request.params[0].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -228,9 +228,9 @@ UniValue waitfornewblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue waitforblock(const UniValue& params, bool fHelp)\n+UniValue waitforblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"waitforblock\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -249,10 +249,10 @@ UniValue waitforblock(const UniValue& params, bool fHelp)\n         );\n     int timeout = 0;\n \n-    uint256 hash = uint256S(params[0].get_str());\n+    uint256 hash = uint256S(request.params[0].get_str());\n \n-    if (params.size() > 1)\n-        timeout = params[1].get_int();\n+    if (request.params.size() > 1)\n+        timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -270,9 +270,9 @@ UniValue waitforblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue waitforblockheight(const UniValue& params, bool fHelp)\n+UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"waitforblock\\n\"\n             \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n@@ -292,10 +292,10 @@ UniValue waitforblockheight(const UniValue& params, bool fHelp)\n         );\n     int timeout = 0;\n \n-    int height = params[0].get_int();\n+    int height = request.params[0].get_int();\n \n-    if (params.size() > 1)\n-        timeout = params[1].get_int();\n+    if (request.params.size() > 1)\n+        timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -312,9 +312,9 @@ UniValue waitforblockheight(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue getdifficulty(const UniValue& params, bool fHelp)\n+UniValue getdifficulty(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getdifficulty\\n\"\n             \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n@@ -411,9 +411,9 @@ UniValue mempoolToJSON(bool fVerbose = false)\n     }\n }\n \n-UniValue getrawmempool(const UniValue& params, bool fHelp)\n+UniValue getrawmempool(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n@@ -436,15 +436,15 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n         );\n \n     bool fVerbose = false;\n-    if (params.size() > 0)\n-        fVerbose = params[0].get_bool();\n+    if (request.params.size() > 0)\n+        fVerbose = request.params[0].get_bool();\n \n     return mempoolToJSON(fVerbose);\n }\n \n-UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n+UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n             \"getmempoolancestors txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n@@ -469,10 +469,10 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n     }\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -506,9 +506,9 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n     }\n }\n \n-UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n+UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n             \"getmempooldescendants txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n@@ -533,10 +533,10 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n     }\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -570,9 +570,9 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n     }\n }\n \n-UniValue getmempoolentry(const UniValue& params, bool fHelp)\n+UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1) {\n+    if (request.fHelp || request.params.size() != 1) {\n         throw runtime_error(\n             \"getmempoolentry txid\\n\"\n             \"\\nReturns mempool data for given transaction\\n\"\n@@ -588,7 +588,7 @@ UniValue getmempoolentry(const UniValue& params, bool fHelp)\n         );\n     }\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -603,9 +603,9 @@ UniValue getmempoolentry(const UniValue& params, bool fHelp)\n     return info;\n }\n \n-UniValue getblockhash(const UniValue& params, bool fHelp)\n+UniValue getblockhash(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getblockhash index\\n\"\n             \"\\nReturns hash of block in best-block-chain at index provided.\\n\"\n@@ -620,17 +620,17 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    int nHeight = params[0].get_int();\n+    int nHeight = request.params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n \n     CBlockIndex* pblockindex = chainActive[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-UniValue getblockheader(const UniValue& params, bool fHelp)\n+UniValue getblockheader(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n@@ -664,12 +664,12 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -687,9 +687,9 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n     return blockheaderToJSON(pblockindex);\n }\n \n-UniValue getblock(const UniValue& params, bool fHelp)\n+UniValue getblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getblock \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n@@ -730,12 +730,12 @@ UniValue getblock(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -814,9 +814,9 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     return true;\n }\n \n-UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n+UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"gettxoutsetinfo\\n\"\n             \"\\nReturns statistics about the unspent transaction output set.\\n\"\n@@ -854,9 +854,9 @@ UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue gettxout(const UniValue& params, bool fHelp)\n+UniValue gettxout(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"gettxout \\\"txid\\\" n ( includemempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n@@ -896,12 +896,12 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VOBJ);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n-    int n = params[1].get_int();\n+    int n = request.params[1].get_int();\n     bool fMempool = true;\n-    if (params.size() > 2)\n-        fMempool = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fMempool = request.params[2].get_bool();\n \n     CCoins coins;\n     if (fMempool) {\n@@ -934,11 +934,11 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue verifychain(const UniValue& params, bool fHelp)\n+UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n@@ -954,10 +954,10 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    if (params.size() > 0)\n-        nCheckLevel = params[0].get_int();\n-    if (params.size() > 1)\n-        nCheckDepth = params[1].get_int();\n+    if (request.params.size() > 0)\n+        nCheckLevel = request.params[0].get_int();\n+    if (request.params.size() > 1)\n+        nCheckDepth = request.params[1].get_int();\n \n     return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n@@ -1021,9 +1021,9 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name,\n         bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n }\n \n-UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n+UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockchaininfo\\n\"\n             \"Returns an object containing various state info regarding block chain processing.\\n\"\n@@ -1113,9 +1113,9 @@ struct CompareBlocksByHeight\n     }\n };\n \n-UniValue getchaintips(const UniValue& params, bool fHelp)\n+UniValue getchaintips(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getchaintips\\n\"\n             \"Return information about all known tips in the block tree,\"\n@@ -1229,9 +1229,9 @@ UniValue mempoolInfoToJSON()\n     return ret;\n }\n \n-UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n+UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getmempoolinfo\\n\"\n             \"\\nReturns details on the active state of the TX memory pool.\\n\"\n@@ -1251,9 +1251,9 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     return mempoolInfoToJSON();\n }\n \n-UniValue preciousblock(const UniValue& params, bool fHelp)\n+UniValue preciousblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"preciousblock \\\"hash\\\"\\n\"\n             \"\\nTreats a block as if it were received before others with the same work.\\n\"\n@@ -1267,7 +1267,7 @@ UniValue preciousblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     CBlockIndex* pblockindex;\n \n@@ -1289,9 +1289,9 @@ UniValue preciousblock(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue invalidateblock(const UniValue& params, bool fHelp)\n+UniValue invalidateblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"invalidateblock \\\"hash\\\"\\n\"\n             \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n@@ -1303,7 +1303,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     CValidationState state;\n \n@@ -1327,9 +1327,9 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue reconsiderblock(const UniValue& params, bool fHelp)\n+UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"reconsiderblock \\\"hash\\\"\\n\"\n             \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n@@ -1342,7 +1342,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     {"
      },
      {
        "sha": "d509dd691f55d76e43cf6a58bb5e96cc90648ac1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -74,9 +74,9 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     return workDiff.getdouble() / timeDiff;\n }\n \n-UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n+UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"getnetworkhashps ( blocks height )\\n\"\n             \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n@@ -93,7 +93,7 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n        );\n \n     LOCK(cs_main);\n-    return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n+    return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n }\n \n UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n@@ -146,9 +146,9 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n     return blockHashes;\n }\n \n-UniValue generate(const UniValue& params, bool fHelp)\n+UniValue generate(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"generate numblocks ( maxtries )\\n\"\n             \"\\nMine up to numblocks blocks immediately (before the RPC call returns)\\n\"\n@@ -162,10 +162,10 @@ UniValue generate(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n \n-    int nGenerate = params[0].get_int();\n+    int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n-    if (params.size() > 1) {\n-        nMaxTries = params[1].get_int();\n+    if (request.params.size() > 1) {\n+        nMaxTries = request.params[1].get_int();\n     }\n \n     boost::shared_ptr<CReserveScript> coinbaseScript;\n@@ -182,9 +182,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n }\n \n-UniValue generatetoaddress(const UniValue& params, bool fHelp)\n+UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"generatetoaddress numblocks address (maxtries)\\n\"\n             \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n@@ -199,13 +199,13 @@ UniValue generatetoaddress(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n         );\n \n-    int nGenerate = params[0].get_int();\n+    int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n-    if (params.size() > 2) {\n-        nMaxTries = params[2].get_int();\n+    if (request.params.size() > 2) {\n+        nMaxTries = request.params[2].get_int();\n     }\n \n-    CBitcoinAddress address(params[1].get_str());\n+    CBitcoinAddress address(request.params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     \n@@ -215,9 +215,9 @@ UniValue generatetoaddress(const UniValue& params, bool fHelp)\n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);\n }\n \n-UniValue getmininginfo(const UniValue& params, bool fHelp)\n+UniValue getmininginfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getmininginfo\\n\"\n             \"\\nReturns a json object containing mining-related information.\"\n@@ -248,17 +248,17 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n+    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n     return obj;\n }\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-UniValue prioritisetransaction(const UniValue& params, bool fHelp)\n+UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 3)\n+    if (request.fHelp || request.params.size() != 3)\n         throw runtime_error(\n             \"prioritisetransaction <txid> <priority delta> <fee delta>\\n\"\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n@@ -279,10 +279,10 @@ UniValue prioritisetransaction(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n-    CAmount nAmount = params[2].get_int64();\n+    uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n+    CAmount nAmount = request.params[2].get_int64();\n \n-    mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n+    mempool.PrioritiseTransaction(hash, request.params[0].get_str(), request.params[1].get_real(), nAmount);\n     return true;\n }\n \n@@ -315,9 +315,9 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-UniValue getblocktemplate(const UniValue& params, bool fHelp)\n+UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getblocktemplate ( TemplateRequest )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n@@ -400,9 +400,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n     int64_t nMaxVersionPreVB = -1;\n-    if (params.size() > 0)\n+    if (request.params.size() > 0)\n     {\n-        const UniValue& oparam = params[0].get_obj();\n+        const UniValue& oparam = request.params[0].get_obj();\n         const UniValue& modeval = find_value(oparam, \"mode\");\n         if (modeval.isStr())\n             strMode = modeval.get_str();\n@@ -705,9 +705,9 @@ class submitblock_StateCatcher : public CValidationInterface\n     };\n };\n \n-UniValue submitblock(const UniValue& params, bool fHelp)\n+UniValue submitblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"submitblock \\\"hexdata\\\" ( \\\"jsonparametersobject\\\" )\\n\"\n             \"\\nAttempts to submit new block to network.\\n\"\n@@ -727,7 +727,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n         );\n \n     CBlock block;\n-    if (!DecodeHexBlk(block, params[0].get_str()))\n+    if (!DecodeHexBlk(block, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n     uint256 hash = block.GetHash();\n@@ -774,9 +774,9 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     return BIP22ValidationResult(state);\n }\n \n-UniValue estimatefee(const UniValue& params, bool fHelp)\n+UniValue estimatefee(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n@@ -792,9 +792,9 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n@@ -805,9 +805,9 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     return ValueFromAmount(feeRate.GetFeePerK());\n }\n \n-UniValue estimatepriority(const UniValue& params, bool fHelp)\n+UniValue estimatepriority(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n             \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n@@ -823,18 +823,18 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n     return mempool.estimatePriority(nBlocks);\n }\n \n-UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n+UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatesmartfee nblocks\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n@@ -856,9 +856,9 @@ UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n@@ -868,9 +868,9 @@ UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n+UniValue estimatesmartpriority(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatesmartpriority nblocks\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n@@ -892,9 +892,9 @@ UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatesmartpriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;"
      },
      {
        "sha": "eaef4856b3c5e5c34a7333a4930d9516bbbac77e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -39,9 +39,9 @@ using namespace std;\n  *\n  * Or alternatively, create a specific query method for the information.\n  **/\n-UniValue getinfo(const UniValue& params, bool fHelp)\n+UniValue getinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getinfo\\n\"\n             \"\\nDEPRECATED. Returns an object containing various state info.\\n\"\n@@ -148,9 +148,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n };\n #endif\n \n-UniValue validateaddress(const UniValue& params, bool fHelp)\n+UniValue validateaddress(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n@@ -181,7 +181,7 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n     LOCK(cs_main);\n #endif\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     bool isValid = address.IsValid();\n \n     UniValue ret(UniValue::VOBJ);\n@@ -278,9 +278,9 @@ CScript _createmultisig_redeemScript(const UniValue& params)\n     return result;\n }\n \n-UniValue createmultisig(const UniValue& params, bool fHelp)\n+UniValue createmultisig(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n     {\n         string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n@@ -310,7 +310,7 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    CScript inner = _createmultisig_redeemScript(request.params);\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n \n@@ -321,9 +321,9 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue verifymessage(const UniValue& params, bool fHelp)\n+UniValue verifymessage(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 3)\n+    if (request.fHelp || request.params.size() != 3)\n         throw runtime_error(\n             \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n             \"\\nVerify a signed message\\n\"\n@@ -346,9 +346,9 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    string strAddress  = params[0].get_str();\n-    string strSign     = params[1].get_str();\n-    string strMessage  = params[2].get_str();\n+    string strAddress  = request.params[0].get_str();\n+    string strSign     = request.params[1].get_str();\n+    string strMessage  = request.params[2].get_str();\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n@@ -375,9 +375,9 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n     return (pubkey.GetID() == keyID);\n }\n \n-UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n+UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessagewithprivkey \\\"privkey\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\\n\"\n@@ -395,8 +395,8 @@ UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n         );\n \n-    string strPrivkey = params[0].get_str();\n-    string strMessage = params[1].get_str();\n+    string strPrivkey = request.params[0].get_str();\n+    string strMessage = request.params[1].get_str();\n \n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strPrivkey);\n@@ -417,9 +417,9 @@ UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-UniValue setmocktime(const UniValue& params, bool fHelp)\n+UniValue setmocktime(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"setmocktime timestamp\\n\"\n             \"\\nSet the local time to given timestamp (-regtest only)\\n\"\n@@ -437,8 +437,8 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     // in a long time.\n     LOCK(cs_main);\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n-    SetMockTime(params[0].get_int64());\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n+    SetMockTime(request.params[0].get_int64());\n \n     uint64_t t = GetTime();\n     if(g_connman) {"
      },
      {
        "sha": "2b43f08f0be0a34cfc1d030f7228c69e9bde59a4",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -23,9 +23,9 @@\n \n using namespace std;\n \n-UniValue getconnectioncount(const UniValue& params, bool fHelp)\n+UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getconnectioncount\\n\"\n             \"\\nReturns the number of connections to other nodes.\\n\"\n@@ -42,9 +42,9 @@ UniValue getconnectioncount(const UniValue& params, bool fHelp)\n     return (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n-UniValue ping(const UniValue& params, bool fHelp)\n+UniValue ping(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"ping\\n\"\n             \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n@@ -65,9 +65,9 @@ UniValue ping(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue getpeerinfo(const UniValue& params, bool fHelp)\n+UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getpeerinfo\\n\"\n             \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n@@ -184,12 +184,12 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue addnode(const UniValue& params, bool fHelp)\n+UniValue addnode(const JSONRPCRequest& request)\n {\n     string strCommand;\n-    if (params.size() == 2)\n-        strCommand = params[1].get_str();\n-    if (fHelp || params.size() != 2 ||\n+    if (request.params.size() == 2)\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n@@ -206,7 +206,7 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    string strNode = params[0].get_str();\n+    string strNode = request.params[0].get_str();\n \n     if (strCommand == \"onetry\")\n     {\n@@ -229,9 +229,9 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue disconnectnode(const UniValue& params, bool fHelp)\n+UniValue disconnectnode(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"disconnectnode \\\"node\\\" \\n\"\n             \"\\nImmediately disconnects from the specified node.\\n\"\n@@ -245,16 +245,16 @@ UniValue disconnectnode(const UniValue& params, bool fHelp)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    bool ret = g_connman->DisconnectNode(params[0].get_str());\n+    bool ret = g_connman->DisconnectNode(request.params[0].get_str());\n     if (!ret)\n         throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n \n     return NullUniValue;\n }\n \n-UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n+UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getaddednodeinfo ( \\\"node\\\" )\\n\"\n             \"\\nReturns information about the given added node, or all added nodes\\n\"\n@@ -286,10 +286,10 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n \n     std::vector<AddedNodeInfo> vInfo = g_connman->GetAddedNodeInfo();\n \n-    if (params.size() == 1) {\n+    if (request.params.size() == 1) {\n         bool found = false;\n         for (const AddedNodeInfo& info : vInfo) {\n-            if (info.strAddedNode == params[0].get_str()) {\n+            if (info.strAddedNode == request.params[0].get_str()) {\n                 vInfo.assign(1, info);\n                 found = true;\n                 break;\n@@ -320,9 +320,9 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue getnettotals(const UniValue& params, bool fHelp)\n+UniValue getnettotals(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n             \"getnettotals\\n\"\n             \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n@@ -386,9 +386,9 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n+UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getnetworkinfo\\n\"\n             \"Returns an object containing various state info regarding P2P networking.\\n\"\n@@ -456,12 +456,12 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n-UniValue setban(const UniValue& params, bool fHelp)\n+UniValue setban(const JSONRPCRequest& request)\n {\n     string strCommand;\n-    if (params.size() >= 2)\n-        strCommand = params[1].get_str();\n-    if (fHelp || params.size() < 2 ||\n+    if (request.params.size() >= 2)\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n                             \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n@@ -483,16 +483,16 @@ UniValue setban(const UniValue& params, bool fHelp)\n     CNetAddr netAddr;\n     bool isSubnet = false;\n \n-    if (params[0].get_str().find(\"/\") != string::npos)\n+    if (request.params[0].get_str().find(\"/\") != string::npos)\n         isSubnet = true;\n \n     if (!isSubnet) {\n         CNetAddr resolved;\n-        LookupHost(params[0].get_str().c_str(), resolved, false);\n+        LookupHost(request.params[0].get_str().c_str(), resolved, false);\n         netAddr = resolved;\n     }\n     else\n-        LookupSubNet(params[0].get_str().c_str(), subNet);\n+        LookupSubNet(request.params[0].get_str().c_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n         throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n@@ -503,11 +503,11 @@ UniValue setban(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n-        if (params.size() >= 3 && !params[2].isNull())\n-            banTime = params[2].get_int64();\n+        if (request.params.size() >= 3 && !request.params[2].isNull())\n+            banTime = request.params[2].get_int64();\n \n         bool absolute = false;\n-        if (params.size() == 4 && params[3].isTrue())\n+        if (request.params.size() == 4 && request.params[3].isTrue())\n             absolute = true;\n \n         isSubnet ? g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n@@ -520,9 +520,9 @@ UniValue setban(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue listbanned(const UniValue& params, bool fHelp)\n+UniValue listbanned(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n                             \"listbanned\\n\"\n                             \"\\nList all banned IPs/Subnets.\\n\"\n@@ -553,9 +553,9 @@ UniValue listbanned(const UniValue& params, bool fHelp)\n     return bannedAddresses;\n }\n \n-UniValue clearbanned(const UniValue& params, bool fHelp)\n+UniValue clearbanned(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n                             \"clearbanned\\n\"\n                             \"\\nClear all banned IPs.\\n\""
      },
      {
        "sha": "0656a617553828fa64bc543a8eb5604c3da877db",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -126,9 +126,9 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n-UniValue getrawtransaction(const UniValue& params, bool fHelp)\n+UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n             \"\\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\\n\"\n@@ -198,11 +198,11 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = (params[1].get_int() != 0);\n+    if (request.params.size() > 1)\n+        fVerbose = (request.params[1].get_int() != 0);\n \n     CTransaction tx;\n     uint256 hashBlock;\n@@ -220,9 +220,9 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue gettxoutproof(const UniValue& params, bool fHelp)\n+UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n-    if (fHelp || (params.size() != 1 && params.size() != 2))\n+    if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n         throw runtime_error(\n             \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n             \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n@@ -244,7 +244,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n \n     set<uint256> setTxids;\n     uint256 oneTxid;\n-    UniValue txids = params[0].get_array();\n+    UniValue txids = request.params[0].get_array();\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n         const UniValue& txid = txids[idx];\n         if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n@@ -261,9 +261,9 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     CBlockIndex* pblockindex = NULL;\n \n     uint256 hashBlock;\n-    if (params.size() > 1)\n+    if (request.params.size() > 1)\n     {\n-        hashBlock = uint256S(params[1].get_str());\n+        hashBlock = uint256S(request.params[1].get_str());\n         if (!mapBlockIndex.count(hashBlock))\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n@@ -301,9 +301,9 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     return strHex;\n }\n \n-UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n+UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"verifytxoutproof \\\"proof\\\"\\n\"\n             \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n@@ -314,7 +314,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\\n\"\n         );\n \n-    CDataStream ssMB(ParseHexV(params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+    CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n@@ -335,9 +335,9 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n     return res;\n }\n \n-UniValue createrawtransaction(const UniValue& params, bool fHelp)\n+UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n@@ -373,17 +373,17 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n-    if (params[0].isNull() || params[1].isNull())\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n+    if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n-    UniValue inputs = params[0].get_array();\n-    UniValue sendTo = params[1].get_obj();\n+    UniValue inputs = request.params[0].get_array();\n+    UniValue sendTo = request.params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n-    if (params.size() > 2 && !params[2].isNull()) {\n-        int64_t nLockTime = params[2].get_int64();\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        int64_t nLockTime = request.params[2].get_int64();\n         if (nLockTime < 0 || nLockTime > std::numeric_limits<uint32_t>::max())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n         rawTx.nLockTime = nLockTime;\n@@ -448,9 +448,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     return EncodeHexTx(rawTx);\n }\n \n-UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n+UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"decoderawtransaction \\\"hexstring\\\"\\n\"\n             \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n@@ -504,11 +504,11 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     CTransaction tx;\n \n-    if (!DecodeHexTx(tx, params[0].get_str(), true))\n+    if (!DecodeHexTx(tx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     UniValue result(UniValue::VOBJ);\n@@ -517,9 +517,9 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue decodescript(const UniValue& params, bool fHelp)\n+UniValue decodescript(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"decodescript \\\"hex\\\"\\n\"\n             \"\\nDecode a hex-encoded script.\\n\"\n@@ -542,12 +542,12 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     UniValue r(UniValue::VOBJ);\n     CScript script;\n-    if (params[0].get_str().size() > 0){\n-        vector<unsigned char> scriptData(ParseHexV(params[0], \"argument\"));\n+    if (request.params[0].get_str().size() > 0){\n+        vector<unsigned char> scriptData(ParseHexV(request.params[0], \"argument\"));\n         script = CScript(scriptData.begin(), scriptData.end());\n     } else {\n         // Empty scripts are valid\n@@ -578,9 +578,9 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue signrawtransaction(const UniValue& params, bool fHelp)\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n@@ -644,9 +644,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #else\n     LOCK(cs_main);\n #endif\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n-    vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n+    vector<unsigned char> txData(ParseHexV(request.params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     vector<CMutableTransaction> txVariants;\n     while (!ssData.empty()) {\n@@ -687,9 +687,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n     bool fGivenKeys = false;\n     CBasicKeyStore tempKeystore;\n-    if (params.size() > 2 && !params[2].isNull()) {\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n         fGivenKeys = true;\n-        UniValue keys = params[2].get_array();\n+        UniValue keys = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < keys.size(); idx++) {\n             UniValue k = keys[idx];\n             CBitcoinSecret vchSecret;\n@@ -708,8 +708,8 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #endif\n \n     // Add previous txouts given in the RPC call:\n-    if (params.size() > 1 && !params[1].isNull()) {\n-        UniValue prevTxs = params[1].get_array();\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        UniValue prevTxs = request.params[1].get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n             const UniValue& p = prevTxs[idx];\n             if (!p.isObject())\n@@ -777,7 +777,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #endif\n \n     int nHashType = SIGHASH_ALL;\n-    if (params.size() > 3 && !params[3].isNull()) {\n+    if (request.params.size() > 3 && !request.params[3].isNull()) {\n         static map<string, int> mapSigHashValues =\n             boost::assign::map_list_of\n             (string(\"ALL\"), int(SIGHASH_ALL))\n@@ -787,7 +787,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             (string(\"SINGLE\"), int(SIGHASH_SINGLE))\n             (string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n             ;\n-        string strHashType = params[3].get_str();\n+        string strHashType = request.params[3].get_str();\n         if (mapSigHashValues.count(strHashType))\n             nHashType = mapSigHashValues[strHashType];\n         else\n@@ -842,9 +842,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n+UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n             \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n@@ -866,17 +866,17 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction tx;\n-    if (!DecodeHexTx(tx, params[0].get_str()))\n+    if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n \n     bool fLimitFree = false;\n     CAmount nMaxRawTxFee = maxTxFee;\n-    if (params.size() > 1 && params[1].get_bool())\n+    if (request.params.size() > 1 && request.params[1].get_bool())\n         nMaxRawTxFee = 0;\n \n     CCoinsViewCache &view = *pcoinsTip;"
      },
      {
        "sha": "29d0bee1b2789f21c30d343a5fd80d7ab860e802",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -195,10 +195,11 @@ std::string CRPCTable::help(const std::string& strCommand) const\n             continue;\n         try\n         {\n-            UniValue params;\n+            JSONRPCRequest jreq;\n+            jreq.fHelp = true;\n             rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n-                (*pfn)(params, true);\n+                (*pfn)(jreq);\n         }\n         catch (const std::exception& e)\n         {\n@@ -228,9 +229,9 @@ std::string CRPCTable::help(const std::string& strCommand) const\n     return strRet;\n }\n \n-UniValue help(const UniValue& params, bool fHelp)\n+UniValue help(const JSONRPCRequest& jsonRequest)\n {\n-    if (fHelp || params.size() > 1)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw runtime_error(\n             \"help ( \\\"command\\\" )\\n\"\n             \"\\nList all commands, or get help for a specified command.\\n\"\n@@ -241,17 +242,17 @@ UniValue help(const UniValue& params, bool fHelp)\n         );\n \n     string strCommand;\n-    if (params.size() > 0)\n-        strCommand = params[0].get_str();\n+    if (jsonRequest.params.size() > 0)\n+        strCommand = jsonRequest.params[0].get_str();\n \n     return tableRPC.help(strCommand);\n }\n \n \n-UniValue stop(const UniValue& params, bool fHelp)\n+UniValue stop(const JSONRPCRequest& jsonRequest)\n {\n     // Accept the deprecated and ignored 'detach' boolean argument\n-    if (fHelp || params.size() > 1)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw runtime_error(\n             \"stop\\n\"\n             \"\\nStop Bitcoin server.\");\n@@ -354,7 +355,7 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void JSONRequest::parse(const UniValue& valRequest)\n+void JSONRPCRequest::parse(const UniValue& valRequest)\n {\n     // Parse request\n     if (!valRequest.isObject())\n@@ -388,11 +389,11 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n-    JSONRequest jreq;\n+    JSONRPCRequest jreq;\n     try {\n         jreq.parse(req);\n \n-        UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+        UniValue result = tableRPC.execute(jreq);\n         rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n     }\n     catch (const UniValue& objError)\n@@ -417,7 +418,7 @@ std::string JSONRPCExecBatch(const UniValue& vReq)\n     return ret.write() + \"\\n\";\n }\n \n-UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n+UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n {\n     // Return immediately if in warmup\n     {\n@@ -427,7 +428,7 @@ UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params\n     }\n \n     // Find method\n-    const CRPCCommand *pcmd = tableRPC[strMethod];\n+    const CRPCCommand *pcmd = tableRPC[request.strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n \n@@ -436,7 +437,7 @@ UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params\n     try\n     {\n         // Execute\n-        return pcmd->actor(params, false);\n+        return pcmd->actor(request);\n     }\n     catch (const std::exception& e)\n     {"
      },
      {
        "sha": "d8b5097035c91296e10e6fac0df7cea35e470f94",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -41,14 +41,16 @@ struct UniValueType {\n     UniValue::VType type;\n };\n \n-class JSONRequest\n+class JSONRPCRequest\n {\n public:\n     UniValue id;\n     std::string strMethod;\n     UniValue params;\n+    bool fHelp;\n+    std::string URI;\n \n-    JSONRequest() { id = NullUniValue; }\n+    JSONRPCRequest() { id = NullUniValue; }\n     void parse(const UniValue& valRequest);\n };\n \n@@ -122,7 +124,7 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n-typedef UniValue(*rpcfn_type)(const UniValue& params, bool fHelp);\n+typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n \n class CRPCCommand\n {\n@@ -147,12 +149,11 @@ class CRPCTable\n \n     /**\n      * Execute a method.\n-     * @param method   Method to execute\n-     * @param params   UniValue Array of arguments (JSON objects)\n+     * @param request The JSONRPCRequest to execute\n      * @returns Result of the call.\n      * @throws an exception (UniValue) when an error happens.\n      */\n-    UniValue execute(const std::string &method, const UniValue &params) const;\n+    UniValue execute(const JSONRPCRequest &request) const;\n \n     /**\n     * Returns a list of registered commands"
      },
      {
        "sha": "a3d1a2558904d3988e29249dc02ac1d9c4144d7e",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -24,11 +24,14 @@ UniValue CallRPC(string args)\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n     string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n-    UniValue params = RPCConvertValues(strMethod, vArgs);\n+    JSONRPCRequest request;\n+    request.strMethod = strMethod;\n+    request.params = RPCConvertValues(strMethod, vArgs);\n+    request.fHelp = false;\n     BOOST_CHECK(tableRPC[strMethod]);\n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        UniValue result = (*method)(params, false);\n+        UniValue result = (*method)(request);\n         return result;\n     }\n     catch (const UniValue& objError) {"
      },
      {
        "sha": "8a1bbd56845267b9930ffc5fdce7b6c792d418be",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -74,12 +74,12 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-UniValue importprivkey(const UniValue& params, bool fHelp)\n+UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n@@ -104,15 +104,15 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strSecret = params[0].get_str();\n+    string strSecret = request.params[0].get_str();\n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n@@ -184,12 +184,12 @@ void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n         pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n }\n \n-UniValue importaddress(const UniValue& params, bool fHelp)\n+UniValue importaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n@@ -213,31 +213,31 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n \n \n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     // Whether to import a p2sh version, too\n     bool fP2SH = false;\n-    if (params.size() > 3)\n-        fP2SH = params[3].get_bool();\n+    if (request.params.size() > 3)\n+        fP2SH = request.params[3].get_bool();\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (address.IsValid()) {\n         if (fP2SH)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n         ImportAddress(address, strLabel);\n-    } else if (IsHex(params[0].get_str())) {\n-        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    } else if (IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n         ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n@@ -252,12 +252,12 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importprunedfunds(const UniValue& params, bool fHelp)\n+UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"importprunedfunds\\n\"\n             \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n@@ -267,12 +267,12 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n         );\n \n     CTransaction tx;\n-    if (!DecodeHexTx(tx, params[0].get_str()))\n+    if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n     CWalletTx wtx(pwalletMain,tx);\n \n-    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n@@ -311,12 +311,12 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No addresses in wallet correspond to included transaction\");\n }\n \n-UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n+UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"removeprunedfunds \\\"txid\\\"\\n\"\n             \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.\\n\"\n@@ -331,7 +331,7 @@ UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n     vector<uint256> vHash;\n     vHash.push_back(hash);\n     vector<uint256> vHashOut;\n@@ -347,12 +347,12 @@ UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importpubkey(const UniValue& params, bool fHelp)\n+UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n@@ -372,20 +372,20 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n \n \n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n-    if (!IsHex(params[0].get_str()))\n+    if (!IsHex(request.params[0].get_str()))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-    std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n     CPubKey pubKey(data.begin(), data.end());\n     if (!pubKey.IsFullyValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n@@ -405,12 +405,12 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue importwallet(const UniValue& params, bool fHelp)\n+UniValue importwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"importwallet \\\"filename\\\"\\n\"\n             \"\\nImports keys from a wallet dump file (see dumpwallet).\\n\"\n@@ -433,7 +433,7 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n-    file.open(params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n+    file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n@@ -512,12 +512,12 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue dumpprivkey(const UniValue& params, bool fHelp)\n+UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n             \"\\nReveals the private key corresponding to 'bitcoinaddress'.\\n\"\n@@ -536,7 +536,7 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strAddress = params[0].get_str();\n+    string strAddress = request.params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -550,12 +550,12 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue dumpwallet(const UniValue& params, bool fHelp)\n+UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n             \"\\nDumps all wallet keys in a human-readable format.\\n\"\n@@ -571,7 +571,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     ofstream file;\n-    file.open(params[0].get_str().c_str());\n+    file.open(request.params[0].get_str().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n "
      },
      {
        "sha": "33620aa6ff59e6aa26cecdaaf8dca4bdc941b749",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 243,
        "deletions": 243,
        "changes": 486,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "patch": "@@ -101,12 +101,12 @@ string AccountFromValue(const UniValue& value)\n     return strAccount;\n }\n \n-UniValue getnewaddress(const UniValue& params, bool fHelp)\n+UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getnewaddress ( \\\"account\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n@@ -125,8 +125,8 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n-    if (params.size() > 0)\n-        strAccount = AccountFromValue(params[0]);\n+    if (request.params.size() > 0)\n+        strAccount = AccountFromValue(request.params[0]);\n \n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n@@ -153,12 +153,12 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     return CBitcoinAddress(pubKey.GetID());\n }\n \n-UniValue getaccountaddress(const UniValue& params, bool fHelp)\n+UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaccountaddress \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n@@ -176,7 +176,7 @@ UniValue getaccountaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Parse the account first so we don't generate a key if there's an error\n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     UniValue ret(UniValue::VSTR);\n \n@@ -185,12 +185,12 @@ UniValue getaccountaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getrawchangeaddress(const UniValue& params, bool fHelp)\n+UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getrawchangeaddress\\n\"\n             \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n@@ -220,12 +220,12 @@ UniValue getrawchangeaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue setaccount(const UniValue& params, bool fHelp)\n+UniValue setaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n@@ -239,13 +239,13 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    if (params.size() > 1)\n-        strAccount = AccountFromValue(params[1]);\n+    if (request.params.size() > 1)\n+        strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n     if (IsMine(*pwalletMain, address.Get()))\n@@ -266,12 +266,12 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getaccount(const UniValue& params, bool fHelp)\n+UniValue getaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaccount \\\"bitcoinaddress\\\"\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n@@ -286,7 +286,7 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n@@ -298,12 +298,12 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n+UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n@@ -321,7 +321,7 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n@@ -369,12 +369,12 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n }\n \n-UniValue sendtoaddress(const UniValue& params, bool fHelp)\n+UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n@@ -400,25 +400,25 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    CAmount nAmount = AmountFromValue(params[1]);\n+    CAmount nAmount = AmountFromValue(request.params[1]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n \n     // Wallet comments\n     CWalletTx wtx;\n-    if (params.size() > 2 && !params[2].isNull() && !params[2].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[2].get_str();\n-    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[3].get_str();\n+    if (request.params.size() > 2 && !request.params[2].isNull() && !request.params[2].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[2].get_str();\n+    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+        wtx.mapValue[\"to\"]      = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n-    if (params.size() > 4)\n-        fSubtractFeeFromAmount = params[4].get_bool();\n+    if (request.params.size() > 4)\n+        fSubtractFeeFromAmount = request.params[4].get_bool();\n \n     EnsureWalletIsUnlocked();\n \n@@ -427,12 +427,12 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n+UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp)\n+    if (request.fHelp)\n         throw runtime_error(\n             \"listaddressgroupings\\n\"\n             \"\\nLists groups of addresses which have had their common ownership\\n\"\n@@ -478,12 +478,12 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n     return jsonGroupings;\n }\n \n-UniValue signmessage(const UniValue& params, bool fHelp)\n+UniValue signmessage(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessage \\\"bitcoinaddress\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n@@ -508,8 +508,8 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strAddress = params[0].get_str();\n-    string strMessage = params[1].get_str();\n+    string strAddress = request.params[0].get_str();\n+    string strMessage = request.params[1].get_str();\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n@@ -534,12 +534,12 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n+UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaddress \\\"bitcoinaddress\\\" ( minconf )\\n\"\n             \"\\nReturns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.\\n\"\n@@ -562,7 +562,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Bitcoin address\n-    CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n+    CBitcoinAddress address = CBitcoinAddress(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n@@ -571,8 +571,8 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n \n     // Tally\n     CAmount nAmount = 0;\n@@ -592,12 +592,12 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n+UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n             \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n@@ -621,11 +621,11 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n \n     // Get the set of pub keys assigned to account\n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n@@ -649,12 +649,12 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getbalance(const UniValue& params, bool fHelp)\n+UniValue getbalance(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n@@ -678,18 +678,18 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (params.size() == 0)\n+    if (request.params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 2)\n-        if(params[2].get_bool())\n+    if(request.params.size() > 2)\n+        if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n-    if (params[0].get_str() == \"*\") {\n+    if (request.params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and \"getbalance * 1 true\" should return the same number\n@@ -717,19 +717,19 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n         return  ValueFromAmount(nBalance);\n     }\n \n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }\n \n-UniValue getunconfirmedbalance(const UniValue &params, bool fHelp)\n+UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n@@ -740,12 +740,12 @@ UniValue getunconfirmedbalance(const UniValue &params, bool fHelp)\n }\n \n \n-UniValue movecmd(const UniValue& params, bool fHelp)\n+UniValue movecmd(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 3 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n         throw runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n             \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n@@ -768,17 +768,17 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strFrom = AccountFromValue(params[0]);\n-    string strTo = AccountFromValue(params[1]);\n-    CAmount nAmount = AmountFromValue(params[2]);\n+    string strFrom = AccountFromValue(request.params[0]);\n+    string strTo = AccountFromValue(request.params[1]);\n+    CAmount nAmount = AmountFromValue(request.params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-    if (params.size() > 3)\n+    if (request.params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n-        (void)params[3].get_int();\n+        (void)request.params[3].get_int();\n     string strComment;\n-    if (params.size() > 4)\n-        strComment = params[4].get_str();\n+    if (request.params.size() > 4)\n+        strComment = request.params[4].get_str();\n \n     if (!pwalletMain->AccountMove(strFrom, strTo, nAmount, strComment))\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n@@ -787,12 +787,12 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue sendfrom(const UniValue& params, bool fHelp)\n+UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 3 || params.size() > 6)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n@@ -820,23 +820,23 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strAccount = AccountFromValue(params[0]);\n-    CBitcoinAddress address(params[1].get_str());\n+    string strAccount = AccountFromValue(request.params[0]);\n+    CBitcoinAddress address(request.params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    CAmount nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(request.params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n     int nMinDepth = 1;\n-    if (params.size() > 3)\n-        nMinDepth = params[3].get_int();\n+    if (request.params.size() > 3)\n+        nMinDepth = request.params[3].get_int();\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 4 && !params[4].isNull() && !params[4].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[4].get_str();\n-    if (params.size() > 5 && !params[5].isNull() && !params[5].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[5].get_str();\n+    if (request.params.size() > 4 && !request.params[4].isNull() && !request.params[4].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[4].get_str();\n+    if (request.params.size() > 5 && !request.params[5].isNull() && !request.params[5].get_str().empty())\n+        wtx.mapValue[\"to\"]      = request.params[5].get_str();\n \n     EnsureWalletIsUnlocked();\n \n@@ -851,12 +851,12 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue sendmany(const UniValue& params, bool fHelp)\n+UniValue sendmany(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n@@ -897,20 +897,20 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    string strAccount = AccountFromValue(params[0]);\n-    UniValue sendTo = params[1].get_obj();\n+    string strAccount = AccountFromValue(request.params[0]);\n+    UniValue sendTo = request.params[1].get_obj();\n     int nMinDepth = 1;\n-    if (params.size() > 2)\n-        nMinDepth = params[2].get_int();\n+    if (request.params.size() > 2)\n+        nMinDepth = request.params[2].get_int();\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[3].get_str();\n+    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (params.size() > 4)\n-        subtractFeeFromAmount = params[4].get_array();\n+    if (request.params.size() > 4)\n+        subtractFeeFromAmount = request.params[4].get_array();\n \n     set<CBitcoinAddress> setAddress;\n     vector<CRecipient> vecSend;\n@@ -968,12 +968,12 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n // Defined in rpc/misc.cpp\n extern CScript _createmultisig_redeemScript(const UniValue& params);\n \n-UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n+UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n         string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n@@ -1004,11 +1004,11 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount;\n-    if (params.size() > 2)\n-        strAccount = AccountFromValue(params[2]);\n+    if (request.params.size() > 2)\n+        strAccount = AccountFromValue(request.params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    CScript inner = _createmultisig_redeemScript(request.params);\n     CScriptID innerID(inner);\n     pwalletMain->AddCScript(inner);\n \n@@ -1061,12 +1061,12 @@ class Witnessifier : public boost::static_visitor<bool>\n     }\n };\n \n-UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n     {\n         string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n@@ -1089,7 +1089,7 @@ UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n         }\n     }\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n@@ -1239,12 +1239,12 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     return ret;\n }\n \n-UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n+UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaddress ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nList balances by receiving address.\\n\"\n@@ -1274,15 +1274,15 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(params, false);\n+    return ListReceived(request.params, false);\n }\n \n-UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n+UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nDEPRECATED. List balances by account.\\n\"\n@@ -1311,7 +1311,7 @@ UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(params, true);\n+    return ListReceived(request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1413,12 +1413,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Un\n     }\n }\n \n-UniValue listtransactions(const UniValue& params, bool fHelp)\n+UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 4)\n+    if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n             \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n@@ -1480,17 +1480,17 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount = \"*\";\n-    if (params.size() > 0)\n-        strAccount = params[0].get_str();\n+    if (request.params.size() > 0)\n+        strAccount = request.params[0].get_str();\n     int nCount = 10;\n-    if (params.size() > 1)\n-        nCount = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nCount = request.params[1].get_int();\n     int nFrom = 0;\n-    if (params.size() > 2)\n-        nFrom = params[2].get_int();\n+    if (request.params.size() > 2)\n+        nFrom = request.params[2].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 3)\n-        if(params[3].get_bool())\n+    if(request.params.size() > 3)\n+        if(request.params[3].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     if (nCount < 0)\n@@ -1540,12 +1540,12 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue listaccounts(const UniValue& params, bool fHelp)\n+UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"listaccounts ( minconf includeWatchonly)\\n\"\n             \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n@@ -1571,11 +1571,11 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     int nMinDepth = 1;\n-    if (params.size() > 0)\n-        nMinDepth = params[0].get_int();\n+    if (request.params.size() > 0)\n+        nMinDepth = request.params[0].get_int();\n     isminefilter includeWatchonly = ISMINE_SPENDABLE;\n-    if(params.size() > 1)\n-        if(params[1].get_bool())\n+    if(request.params.size() > 1)\n+        if(request.params[1].get_bool())\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, CAmount> mapAccountBalances;\n@@ -1619,12 +1619,12 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue listsinceblock(const UniValue& params, bool fHelp)\n+UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp)\n+    if (request.fHelp)\n         throw runtime_error(\n             \"listsinceblock ( \\\"blockhash\\\" target-confirmations includeWatchonly)\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n@@ -1667,26 +1667,26 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (params.size() > 0)\n+    if (request.params.size() > 0)\n     {\n         uint256 blockId;\n \n-        blockId.SetHex(params[0].get_str());\n+        blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n             pindex = it->second;\n     }\n \n-    if (params.size() > 1)\n+    if (request.params.size() > 1)\n     {\n-        target_confirms = params[1].get_int();\n+        target_confirms = request.params[1].get_int();\n \n         if (target_confirms < 1)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n-    if(params.size() > 2)\n-        if(params[2].get_bool())\n+    if(request.params.size() > 2)\n+        if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n@@ -1711,12 +1711,12 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue gettransaction(const UniValue& params, bool fHelp)\n+UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"gettransaction \\\"txid\\\" ( includeWatchonly )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n@@ -1758,11 +1758,11 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n \n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 1)\n-        if(params[1].get_bool())\n+    if(request.params.size() > 1)\n+        if(request.params[1].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     UniValue entry(UniValue::VOBJ);\n@@ -1791,12 +1791,12 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n     return entry;\n }\n \n-UniValue abandontransaction(const UniValue& params, bool fHelp)\n+UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n@@ -1815,7 +1815,7 @@ UniValue abandontransaction(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n \n     if (!pwalletMain->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n@@ -1826,12 +1826,12 @@ UniValue abandontransaction(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue backupwallet(const UniValue& params, bool fHelp)\n+UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"backupwallet \\\"destination\\\"\\n\"\n             \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\"\n@@ -1844,20 +1844,20 @@ UniValue backupwallet(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strDest = params[0].get_str();\n+    string strDest = request.params[0].get_str();\n     if (!pwalletMain->BackupWallet(strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n     return NullUniValue;\n }\n \n \n-UniValue keypoolrefill(const UniValue& params, bool fHelp)\n+UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"keypoolrefill ( newsize )\\n\"\n             \"\\nFills the keypool.\"\n@@ -1873,10 +1873,10 @@ UniValue keypoolrefill(const UniValue& params, bool fHelp)\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n-    if (params.size() > 0) {\n-        if (params[0].get_int() < 0)\n+    if (request.params.size() > 0) {\n+        if (request.params[0].get_int() < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-        kpSize = (unsigned int)params[0].get_int();\n+        kpSize = (unsigned int)request.params[0].get_int();\n     }\n \n     EnsureWalletIsUnlocked();\n@@ -1896,12 +1896,12 @@ static void LockWallet(CWallet* pWallet)\n     pWallet->Lock();\n }\n \n-UniValue walletpassphrase(const UniValue& params, bool fHelp)\n+UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n@@ -1923,17 +1923,17 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n-    // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n+    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n-    strWalletPass = params[0].get_str().c_str();\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+    strWalletPass = request.params[0].get_str().c_str();\n \n     if (strWalletPass.length() > 0)\n     {\n@@ -1947,7 +1947,7 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n \n     pwalletMain->TopUpKeyPool();\n \n-    int64_t nSleepTime = params[1].get_int64();\n+    int64_t nSleepTime = request.params[1].get_int64();\n     LOCK(cs_nWalletUnlockTime);\n     nWalletUnlockTime = GetTime() + nSleepTime;\n     RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);\n@@ -1956,12 +1956,12 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n+UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n@@ -1975,20 +1975,20 @@ UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n     SecureString strOldWalletPass;\n     strOldWalletPass.reserve(100);\n-    strOldWalletPass = params[0].get_str().c_str();\n+    strOldWalletPass = request.params[0].get_str().c_str();\n \n     SecureString strNewWalletPass;\n     strNewWalletPass.reserve(100);\n-    strNewWalletPass = params[1].get_str().c_str();\n+    strNewWalletPass = request.params[1].get_str().c_str();\n \n     if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n         throw runtime_error(\n@@ -2002,12 +2002,12 @@ UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue walletlock(const UniValue& params, bool fHelp)\n+UniValue walletlock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 0))\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n@@ -2026,7 +2026,7 @@ UniValue walletlock(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n@@ -2041,12 +2041,12 @@ UniValue walletlock(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue encryptwallet(const UniValue& params, bool fHelp)\n+UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n+    if (!pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 1))\n         throw runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n@@ -2072,16 +2072,16 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n-    strWalletPass = params[0].get_str().c_str();\n+    strWalletPass = request.params[0].get_str().c_str();\n \n     if (strWalletPass.length() < 1)\n         throw runtime_error(\n@@ -2098,12 +2098,12 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n-UniValue lockunspent(const UniValue& params, bool fHelp)\n+UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"lockunspent unlock ([{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...])\\n\"\n             \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n@@ -2142,20 +2142,20 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (params.size() == 1)\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL));\n+    if (request.params.size() == 1)\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL));\n     else\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n \n-    bool fUnlock = params[0].get_bool();\n+    bool fUnlock = request.params[0].get_bool();\n \n-    if (params.size() == 1) {\n+    if (request.params.size() == 1) {\n         if (fUnlock)\n             pwalletMain->UnlockAllCoins();\n         return true;\n     }\n \n-    UniValue outputs = params[1].get_array();\n+    UniValue outputs = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n         const UniValue& output = outputs[idx];\n         if (!output.isObject())\n@@ -2187,12 +2187,12 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n     return true;\n }\n \n-UniValue listlockunspent(const UniValue& params, bool fHelp)\n+UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n             \"listlockunspent\\n\"\n             \"\\nReturns list of temporarily unspendable outputs.\\n\"\n@@ -2236,12 +2236,12 @@ UniValue listlockunspent(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue settxfee(const UniValue& params, bool fHelp)\n+UniValue settxfee(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n@@ -2257,18 +2257,18 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Amount\n-    CAmount nAmount = AmountFromValue(params[0]);\n+    CAmount nAmount = AmountFromValue(request.params[0]);\n \n     payTxFee = CFeeRate(nAmount, 1000);\n     return true;\n }\n \n-UniValue getwalletinfo(const UniValue& params, bool fHelp)\n+UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getwalletinfo\\n\"\n             \"Returns an object containing various wallet state info.\\n\"\n@@ -2309,12 +2309,12 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n-UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n+UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"resendwallettransactions\\n\"\n             \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n@@ -2337,12 +2337,12 @@ UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue listunspent(const UniValue& params, bool fHelp)\n+UniValue listunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n@@ -2379,19 +2379,19 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n \n     int nMinDepth = 1;\n-    if (params.size() > 0)\n-        nMinDepth = params[0].get_int();\n+    if (request.params.size() > 0)\n+        nMinDepth = request.params[0].get_int();\n \n     int nMaxDepth = 9999999;\n-    if (params.size() > 1)\n-        nMaxDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMaxDepth = request.params[1].get_int();\n \n     set<CBitcoinAddress> setAddress;\n-    if (params.size() > 2) {\n-        UniValue inputs = params[2].get_array();\n+    if (request.params.size() > 2) {\n+        UniValue inputs = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n             const UniValue& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n@@ -2448,12 +2448,12 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n     return results;\n }\n \n-UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n+UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n@@ -2494,7 +2494,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     CTxDestination changeAddress = CNoDestination();\n     int changePosition = -1;\n@@ -2503,15 +2503,15 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     CFeeRate feeRate = CFeeRate(0);\n     bool overrideEstimatedFeerate = false;\n \n-    if (params.size() > 1) {\n-      if (params[1].type() == UniValue::VBOOL) {\n+    if (request.params.size() > 1) {\n+      if (request.params[1].type() == UniValue::VBOOL) {\n         // backward compatibility bool only fallback\n-        includeWatching = params[1].get_bool();\n+        includeWatching = request.params[1].get_bool();\n       }\n       else {\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n \n-        UniValue options = params[1];\n+        UniValue options = request.params[1];\n \n         RPCTypeCheckObj(options,\n             {\n@@ -2551,7 +2551,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     // parse hex string from parameter\n     CTransaction origTx;\n-    if (!DecodeHexTx(origTx, params[0].get_str(), true))\n+    if (!DecodeHexTx(origTx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     if (origTx.vout.size() == 0)\n@@ -2575,14 +2575,14 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n-extern UniValue importprivkey(const UniValue& params, bool fHelp);\n-extern UniValue importaddress(const UniValue& params, bool fHelp);\n-extern UniValue importpubkey(const UniValue& params, bool fHelp);\n-extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n-extern UniValue importwallet(const UniValue& params, bool fHelp);\n-extern UniValue importprunedfunds(const UniValue& params, bool fHelp);\n-extern UniValue removeprunedfunds(const UniValue& params, bool fHelp);\n+extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n+extern UniValue importprivkey(const JSONRPCRequest& request);\n+extern UniValue importaddress(const JSONRPCRequest& request);\n+extern UniValue importpubkey(const JSONRPCRequest& request);\n+extern UniValue dumpwallet(const JSONRPCRequest& request);\n+extern UniValue importwallet(const JSONRPCRequest& request);\n+extern UniValue importprunedfunds(const JSONRPCRequest& request);\n+extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode"
      }
    ]
  },
  {
    "sha": "e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzE1NmFkNjFiZTJmZTkzNWZkYjY0ZTlkMGU4NzdmYTBlOWY3Zjll",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-09-22T07:58:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T12:47:27Z"
      },
      "message": "[RPC] pass HTTP basic authentication username to the JSONRequest object",
      "tree": {
        "sha": "19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB2tgAAoJECnUvLZBb1PsafcP/2/AD2mPDV0XXO9nkRwFDSKo\nsVQsnuvHBL5cwUAJyMetQTyUfoof7hc4/GQt4XwbRpDNvdLl6mIrvDKeZF6wjHqt\nWTNgltb4wifgBwKszy8r2gnZK/VEU6kejXkk4IalSpvwtKvVYIHctacHIJfLVK94\nWFXwm/JAYnt2+wcNtz8rPRtA5CSLUKKXQg1e8v25Sh+OXfhJLgw3mT5cEnTOQhdy\nU6V9jOQATO6qDpTOhOgv6WGtXWzEgn7a29nmVs8pAe0bZzk7wwge8PQtKk5y5uZP\nZWDceFPRyV59e89d5dP+BTZ0Rq2gVF9aHFHZl9eTBRX0hEs87+PuKuWQkGM2WmWJ\neW1pElofcfS4D59cukqRJs6NxQLXNrkMUSnVEapKmGgC4Qe03g3FhWtVAjZpj9xz\nHYlkRXGAHDHOH0L8k8xuMV2XeJURMF4/135lZPb6xm+cLTc8+phRRblKeEDc+aro\nn6HtZXszsrbi1CdZckHG+7ONCEZ2rroMHWz+tO7x/cFgTkbPrjcpXPJ/i627VcOx\nl2edyYlRckm2Q7LZPpKUorVct5zEHyXwkJ0WjDJNN1LegR5LQ3cYNf+FbtkATCp0\nERjy5FB/zk0lLDg3/aMh0nJJjdGkqp0uqCvjQ5OJji1vp2ixFREt0DKexKuU4PiA\nnilJQKdu9VDZfsWRLy/A\n=aDd/\n-----END PGP SIGNATURE-----",
        "payload": "tree 19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f\nparent 69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1474531093 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476881247 +0200\n\n[RPC] pass HTTP basic authentication username to the JSONRequest object\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69d1c25768a8649bfc7eb8e9c35b8fe9874ac9fc"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 10,
      "deletions": 5
    },
    "files": [
      {
        "sha": "e35acb6cd99ce7b0a6cf9697188ef1ff0c7e165b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "patch": "@@ -127,7 +127,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     return false;\n }\n \n-static bool RPCAuthorized(const std::string& strAuth)\n+static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)\n {\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n         return false;\n@@ -136,7 +136,10 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    \n+\n+    if (strUserPass.find(\":\") != std::string::npos)\n+        strAuthUsernameOut = strUserPass.substr(0, strUserPass.find(\":\"));\n+\n     //Check if authorized under single-user field\n     if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n         return true;\n@@ -159,7 +162,8 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    if (!RPCAuthorized(authHeader.second)) {\n+    JSONRPCRequest jreq;\n+    if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n \n         /* Deter brute-forcing\n@@ -172,7 +176,6 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRPCRequest jreq;\n     try {\n         // Parse request\n         UniValue valRequest;"
      },
      {
        "sha": "b8b5420626d3baa9e616d1733ac574d5f01ee631",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "patch": "@@ -286,6 +286,7 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n     switch (rf) {\n     case RF_JSON: {\n         JSONRPCRequest jsonRequest;\n+        jsonRequest.params = UniValue(UniValue::VARR);\n         UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");"
      },
      {
        "sha": "c59886222c27621af860c3e97039aab0b68e00c8",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "patch": "@@ -49,8 +49,9 @@ class JSONRPCRequest\n     UniValue params;\n     bool fHelp;\n     std::string URI;\n+    std::string authUser;\n \n-    JSONRPCRequest() { id = NullUniValue; }\n+    JSONRPCRequest() { id = NullUniValue; params = NullUniValue; fHelp = false; }\n     void parse(const UniValue& valRequest);\n };\n "
      }
    ]
  },
  {
    "sha": "fc146095d20452686efe1944b143452bec394343",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzE0NjA5NWQyMDQ1MjY4NmVmZTE5NDRiMTQzNDUyYmVjMzk0MzQz",
    "commit": {
      "author": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-05-06T22:08:39Z"
      },
      "committer": {
        "name": "mruddy",
        "email": "mruddy@users.noreply.github.com",
        "date": "2016-10-19T13:08:39Z"
      },
      "message": "RPC: augment getblockchaininfo bip9_softforks data",
      "tree": {
        "sha": "d57fe4980f09dab389f55ddb0658de4d97d8096a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d57fe4980f09dab389f55ddb0658de4d97d8096a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc146095d20452686efe1944b143452bec394343",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc146095d20452686efe1944b143452bec394343",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc146095d20452686efe1944b143452bec394343",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc146095d20452686efe1944b143452bec394343/comments",
    "author": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mruddy",
      "id": 6440430,
      "node_id": "MDQ6VXNlcjY0NDA0MzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6440430?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mruddy",
      "html_url": "https://github.com/mruddy",
      "followers_url": "https://api.github.com/users/mruddy/followers",
      "following_url": "https://api.github.com/users/mruddy/following{/other_user}",
      "gists_url": "https://api.github.com/users/mruddy/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mruddy/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mruddy/subscriptions",
      "organizations_url": "https://api.github.com/users/mruddy/orgs",
      "repos_url": "https://api.github.com/users/mruddy/repos",
      "events_url": "https://api.github.com/users/mruddy/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mruddy/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 121,
      "deletions": 44
    },
    "files": [
      {
        "sha": "c42ed44c259a3c2c123eb86f8e9d75490203df79",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -81,6 +81,9 @@ def get_bip9_status(self, key):\n         return info['bip9_softforks'][key]\n \n     def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature, bitno):\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 0)\n+\n         # generate some coins for later\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         self.height = 3  # height of the next block to build\n@@ -89,6 +92,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.last_block_time = int(time.time())\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 0)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert(bipName not in tmpl['vbavailable'])\n@@ -101,6 +105,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 144)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n@@ -117,6 +122,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 144)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n@@ -133,6 +139,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -142,6 +149,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -167,6 +175,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, True]])\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 576)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName in tmpl['rules'])\n         assert(bipName not in tmpl['vbavailable'])"
      },
      {
        "sha": "50158b468780aa231f1586e192de3acab319c1f5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -6918,6 +6918,12 @@ ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::D\n     return VersionBitsState(chainActive.Tip(), params, pos, versionbitscache);\n }\n \n+int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    LOCK(cs_main);\n+    return VersionBitsStateSinceHeight(chainActive.Tip(), params, pos, versionbitscache);\n+}\n+\n class CMainCleanup\n {\n public:"
      },
      {
        "sha": "3eab9b89daa66ab25a674944458247d790df91f9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -297,7 +297,8 @@ std::string FormatStateMessage(const CValidationState &state);\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-\n+/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way"
      },
      {
        "sha": "141ca87b69bdc66ef2afb26e47fce503eb1a6ae9",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -1009,6 +1009,7 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     }\n     rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n     rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n+    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n     return rv;\n }\n \n@@ -1053,7 +1054,8 @@ UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n             \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n             \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n             \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"since\\\": xx            (numeric) height of the first block to which the status applies\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"}\\n\""
      },
      {
        "sha": "784e7969985248ee73d2c012c431b0ea11be5d27",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 41,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2015 The Bitcoin Core developers\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,6 +30,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n };\n \n #define CHECKERS 6\n@@ -78,6 +79,16 @@ class VersionBitsTester\n         return *this;\n     }\n \n+    VersionBitsTester& TestStateSinceHeight(int height) {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? NULL : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n     VersionBitsTester& TestDefined() {\n         for (int i = 0; i < CHECKERS; i++) {\n             if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n@@ -137,53 +148,64 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n {\n     for (int i = 0; i < 64; i++) {\n         // DEFINED -> FAILED\n-        VersionBitsTester().TestDefined()\n-                           .Mine(1, TestTime(1), 0x100).TestDefined()\n-                           .Mine(11, TestTime(11), 0x100).TestDefined()\n-                           .Mine(989, TestTime(989), 0x100).TestDefined()\n-                           .Mine(999, TestTime(20000), 0x100).TestDefined()\n-                           .Mine(1000, TestTime(20000), 0x100).TestFailed()\n-                           .Mine(1999, TestTime(30001), 0x100).TestFailed()\n-                           .Mine(2000, TestTime(30002), 0x100).TestFailed()\n-                           .Mine(2001, TestTime(30003), 0x100).TestFailed()\n-                           .Mine(2999, TestTime(30004), 0x100).TestFailed()\n-                           .Mine(3000, TestTime(30005), 0x100).TestFailed()\n+        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(11, TestTime(11), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(989, TestTime(989), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(1999, TestTime(30001), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n \n         // DEFINED -> STARTED -> FAILED\n-                           .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x100).TestStarted() // So that's what happens the next period\n-                           .Mine(2051, TestTime(10010), 0).TestStarted() // 51 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 899 new blocks\n-                           .Mine(3000, TestTime(20000), 0).TestFailed() // 50 old blocks (so 899 out of the past 1000)\n-                           .Mine(4000, TestTime(20010), 0x100).TestFailed()\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2051, TestTime(10010), 0).TestStarted().TestStateSinceHeight(2000) // 51 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 899 new blocks\n+                           .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(3000) // 50 old blocks (so 899 out of the past 1000)\n+                           .Mine(4000, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(3000)\n \n         // DEFINED -> STARTED -> FAILED while threshold reached\n-                           .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n-                           .Mine(2999, TestTime(30000), 0x100).TestStarted() // 999 new blocks\n-                           .Mine(3000, TestTime(30000), 0x100).TestFailed() // 1 new block (so 1000 out of the past 1000 are new)\n-                           .Mine(3999, TestTime(30001), 0).TestFailed()\n-                           .Mine(4000, TestTime(30002), 0).TestFailed()\n-                           .Mine(14333, TestTime(30003), 0).TestFailed()\n-                           .Mine(24000, TestTime(40000), 0).TestFailed()\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2999, TestTime(30000), 0x100).TestStarted().TestStateSinceHeight(2000) // 999 new blocks\n+                           .Mine(3000, TestTime(30000), 0x100).TestFailed().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n+                           .Mine(3999, TestTime(30001), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(30002), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(14333, TestTime(30003), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(24000, TestTime(40000), 0).TestFailed().TestStateSinceHeight(3000)\n \n         // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n                            .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n-                           .Mine(2050, TestTime(10010), 0x200).TestStarted() // 50 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 900 new blocks\n-                           .Mine(2999, TestTime(19999), 0x200).TestStarted() // 49 old blocks\n-                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn() // 1 old block (so 900 out of the past 1000)\n-                           .Mine(3999, TestTime(30001), 0).TestLockedIn()\n-                           .Mine(4000, TestTime(30002), 0).TestActive()\n-                           .Mine(14333, TestTime(30003), 0).TestActive()\n-                           .Mine(24000, TestTime(40000), 0).TestActive();\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2050, TestTime(10010), 0x200).TestStarted().TestStateSinceHeight(2000) // 50 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 900 new blocks\n+                           .Mine(2999, TestTime(19999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n+                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n+                           .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(30002), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(14333, TestTime(30003), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000)\n+\n+        // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(999, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(2000, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n+                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n     }\n \n     // Sanity checks of version bit deployments"
      },
      {
        "sha": "d73f3405109d0843a289496d3e7aad1f9df3a812",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -105,6 +105,36 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n+int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+{\n+    const ThresholdState initialState = GetStateFor(pindexPrev, params, cache);\n+\n+    // BIP 9 about state DEFINED: \"The genesis block is by definition in this state for each deployment.\"\n+    if (initialState == THRESHOLD_DEFINED) {\n+        return 0;\n+    }\n+\n+    const int nPeriod = Period(params);\n+\n+    // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n+    // To ease understanding of the following height calculation, it helps to remember that\n+    // right now pindexPrev points to the block prior to the block that we are computing for, thus:\n+    // if we are computing for the last block of a period, then pindexPrev points to the second to last block of the period, and\n+    // if we are computing for the first block of a period, then pindexPrev points to the last block of the previous period.\n+    // The parent of the genesis block is represented by NULL.\n+    pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+\n+    const CBlockIndex* previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+\n+    while (previousPeriodParent != NULL && GetStateFor(previousPeriodParent, params, cache) == initialState) {\n+        pindexPrev = previousPeriodParent;\n+        previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+    }\n+\n+    // Adjust the result because right now we point to the parent block.\n+    return pindexPrev->nHeight + 1;\n+}\n+\n namespace\n {\n /**\n@@ -137,6 +167,11 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n+int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+{\n+    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+}\n+\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).Mask(params);"
      },
      {
        "sha": "7a929266aa24c27f5d5695d61c432e4cdb84f80d",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc146095d20452686efe1944b143452bec394343/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc146095d20452686efe1944b143452bec394343/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=fc146095d20452686efe1944b143452bec394343",
        "patch": "@@ -51,8 +51,9 @@ class AbstractThresholdConditionChecker {\n     virtual int Threshold(const Consensus::Params& params) const =0;\n \n public:\n-    // Note that the function below takes a pindexPrev as input: they compute information for block B based on its parent.\n+    // Note that the functions below take a pindexPrev as input: they compute information for block B based on its parent.\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n struct VersionBitsCache\n@@ -63,6 +64,7 @@ struct VersionBitsCache\n };\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n #endif"
      }
    ]
  },
  {
    "sha": "97c7f7362f9b59247753d6e8fa8022a6205f9c09",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2M3ZjczNjJmOWI1OTI0Nzc1M2Q2ZThmYTgwMjJhNjIwNWY5YzA5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T13:01:33Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T13:15:49Z"
      },
      "message": "Merge #8788: [RPC] Give RPC commands more information about the RPC request\n\ne7156ad [RPC] pass HTTP basic authentication username to the JSONRequest object (Jonas Schnelli)\n69d1c25 [RPC] Give RPC commands more information about the RPC request (Jonas Schnelli)\n23c32a9 rpc: Change JSONRPCRequest to JSONRPCRequestObj (Wladimir J. van der Laan)",
      "tree": {
        "sha": "19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97c7f7362f9b59247753d6e8fa8022a6205f9c09",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYB3IFAAoJEHSBCwEjRsmmSDwH/RKnCZTPOThGwITgHjKN1uSn\nx+MdQtyQQ5lIHFrxGf0gr42DZmHioiOkdZIlK7GX1QCaOawg6A2l/PQ4xq/+H5La\n6NgzfUB4RN1SOxVkJVNBhsO19cLV9tpQxu3G7SCIdJ5BJvC81QZwOB2AAc+dbHv6\nIymZyHecBijCYa18FidpMvZhx7tSQDUkjLrdGu4mEbFzxEDW4tyQdhBnBC9FhOUN\ngXH70TcbhMDnaqCGuod9J81GrCCZH8xtqq7O8QFP9Nm4BqSbJePFgyBeTHlxFurb\nIczyraodB2TJq8QCCb84ECYumoNRyQMDB7qhxZYdLNeHLsddMiP0/+E5MOhUELg=\n=mcWN\n-----END PGP SIGNATURE-----",
        "payload": "tree 19dcb95789fea3e6d168a7b2e1ecb7d66a5e006f\nparent d736a6eb1f91ba88059ff41634bd4ea715d9a1f1\nparent e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476882093 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476882949 +0200\n\nMerge #8788: [RPC] Give RPC commands more information about the RPC request\n\ne7156ad [RPC] pass HTTP basic authentication username to the JSONRequest object (Jonas Schnelli)\n69d1c25 [RPC] Give RPC commands more information about the RPC request (Jonas Schnelli)\n23c32a9 rpc: Change JSONRPCRequest to JSONRPCRequestObj (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c7f7362f9b59247753d6e8fa8022a6205f9c09",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97c7f7362f9b59247753d6e8fa8022a6205f9c09",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c7f7362f9b59247753d6e8fa8022a6205f9c09/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d736a6eb1f91ba88059ff41634bd4ea715d9a1f1"
      },
      {
        "sha": "e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7156ad61be2fe935fdb64e9d0e877fa0e9f7f9e"
      }
    ],
    "stats": {
      "total": 1124,
      "additions": 570,
      "deletions": 554
    },
    "files": [
      {
        "sha": "2d66448d80ac353f7ebf16f1e150f1fd669ea236",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -223,7 +223,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     evhttp_add_header(output_headers, \"Authorization\", (std::string(\"Basic \") + EncodeBase64(strRPCUserColonPass)).c_str());\n \n     // Attach request data\n-    std::string strRequest = JSONRPCRequest(strMethod, params, 1);\n+    std::string strRequest = JSONRPCRequestObj(strMethod, params, 1).write() + \"\\n\";\n     struct evbuffer * output_buffer = evhttp_request_get_output_buffer(req);\n     assert(output_buffer);\n     evbuffer_add(output_buffer, strRequest.data(), strRequest.size());"
      },
      {
        "sha": "e35acb6cd99ce7b0a6cf9697188ef1ff0c7e165b",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -127,7 +127,7 @@ static bool multiUserAuthorized(std::string strUserPass)\n     return false;\n }\n \n-static bool RPCAuthorized(const std::string& strAuth)\n+static bool RPCAuthorized(const std::string& strAuth, std::string& strAuthUsernameOut)\n {\n     if (strRPCUserColonPass.empty()) // Belt-and-suspenders measure if InitRPCAuthentication was not called\n         return false;\n@@ -136,7 +136,10 @@ static bool RPCAuthorized(const std::string& strAuth)\n     std::string strUserPass64 = strAuth.substr(6);\n     boost::trim(strUserPass64);\n     std::string strUserPass = DecodeBase64(strUserPass64);\n-    \n+\n+    if (strUserPass.find(\":\") != std::string::npos)\n+        strAuthUsernameOut = strUserPass.substr(0, strUserPass.find(\":\"));\n+\n     //Check if authorized under single-user field\n     if (TimingResistantEqual(strUserPass, strRPCUserColonPass)) {\n         return true;\n@@ -159,7 +162,8 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    if (!RPCAuthorized(authHeader.second)) {\n+    JSONRPCRequest jreq;\n+    if (!RPCAuthorized(authHeader.second, jreq.authUser)) {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", req->GetPeer().ToString());\n \n         /* Deter brute-forcing\n@@ -172,19 +176,21 @@ static bool HTTPReq_JSONRPC(HTTPRequest* req, const std::string &)\n         return false;\n     }\n \n-    JSONRequest jreq;\n     try {\n         // Parse request\n         UniValue valRequest;\n         if (!valRequest.read(req->ReadBody()))\n             throw JSONRPCError(RPC_PARSE_ERROR, \"Parse error\");\n \n+        // Set the URI\n+        jreq.URI = req->GetURI();\n+\n         std::string strReply;\n         // singleton request\n         if (valRequest.isObject()) {\n             jreq.parse(valRequest);\n \n-            UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+            UniValue result = tableRPC.execute(jreq);\n \n             // Send reply\n             strReply = JSONRPCReply(result, NullUniValue, jreq.id);"
      },
      {
        "sha": "f10dddf589e2801a8bae700aa6d4f02826fa2c0c",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -246,7 +246,10 @@ bool RPCConsole::RPCExecuteCommandLine(std::string &strResult, const std::string\n                         std::string strPrint;\n                         // Convert argument list to JSON objects in method-dependent way,\n                         // and pass it along with the method name to the dispatcher.\n-                        lastResult = tableRPC.execute(stack.back()[0], RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end())));\n+                        JSONRPCRequest req;\n+                        req.params = RPCConvertValues(stack.back()[0], std::vector<std::string>(stack.back().begin() + 1, stack.back().end()));\n+                        req.strMethod = stack.back()[0];\n+                        lastResult = tableRPC.execute(req);\n \n                         state = STATE_COMMAND_EXECUTED;\n                         curarg.clear();"
      },
      {
        "sha": "b8b5420626d3baa9e616d1733ac574d5f01ee631",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -274,7 +274,7 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n }\n \n // A bit of a hack - dependency on a function defined in rpc/blockchain.cpp\n-UniValue getblockchaininfo(const UniValue& params, bool fHelp);\n+UniValue getblockchaininfo(const JSONRPCRequest& request);\n \n static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n {\n@@ -285,8 +285,9 @@ static bool rest_chaininfo(HTTPRequest* req, const std::string& strURIPart)\n \n     switch (rf) {\n     case RF_JSON: {\n-        UniValue rpcParams(UniValue::VARR);\n-        UniValue chainInfoObject = getblockchaininfo(rpcParams, false);\n+        JSONRPCRequest jsonRequest;\n+        jsonRequest.params = UniValue(UniValue::VARR);\n+        UniValue chainInfoObject = getblockchaininfo(jsonRequest);\n         string strJSON = chainInfoObject.write() + \"\\n\";\n         req->WriteHeader(\"Content-Type\", \"application/json\");\n         req->WriteReply(HTTP_OK, strJSON);"
      },
      {
        "sha": "0c827a1e3881d6ad3e053fcb1226237eb01ec510",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 79,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -146,9 +146,9 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     return result;\n }\n \n-UniValue getblockcount(const UniValue& params, bool fHelp)\n+UniValue getblockcount(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockcount\\n\"\n             \"\\nReturns the number of blocks in the longest block chain.\\n\"\n@@ -163,9 +163,9 @@ UniValue getblockcount(const UniValue& params, bool fHelp)\n     return chainActive.Height();\n }\n \n-UniValue getbestblockhash(const UniValue& params, bool fHelp)\n+UniValue getbestblockhash(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getbestblockhash\\n\"\n             \"\\nReturns the hash of the best (tip) block in the longest block chain.\\n\"\n@@ -190,9 +190,9 @@ void RPCNotifyBlockChange(bool ibd, const CBlockIndex * pindex)\n \tcond_blockchange.notify_all();\n }\n \n-UniValue waitfornewblock(const UniValue& params, bool fHelp)\n+UniValue waitfornewblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"waitfornewblock\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -209,8 +209,8 @@ UniValue waitfornewblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n         );\n     int timeout = 0;\n-    if (params.size() > 0)\n-        timeout = params[0].get_int();\n+    if (request.params.size() > 0)\n+        timeout = request.params[0].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -228,9 +228,9 @@ UniValue waitfornewblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue waitforblock(const UniValue& params, bool fHelp)\n+UniValue waitforblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"waitforblock\\n\"\n             \"\\nWaits for a specific new block and returns useful info about it.\\n\"\n@@ -249,10 +249,10 @@ UniValue waitforblock(const UniValue& params, bool fHelp)\n         );\n     int timeout = 0;\n \n-    uint256 hash = uint256S(params[0].get_str());\n+    uint256 hash = uint256S(request.params[0].get_str());\n \n-    if (params.size() > 1)\n-        timeout = params[1].get_int();\n+    if (request.params.size() > 1)\n+        timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -270,9 +270,9 @@ UniValue waitforblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue waitforblockheight(const UniValue& params, bool fHelp)\n+UniValue waitforblockheight(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"waitforblock\\n\"\n             \"\\nWaits for (at least) block height and returns the height and hash\\n\"\n@@ -292,10 +292,10 @@ UniValue waitforblockheight(const UniValue& params, bool fHelp)\n         );\n     int timeout = 0;\n \n-    int height = params[0].get_int();\n+    int height = request.params[0].get_int();\n \n-    if (params.size() > 1)\n-        timeout = params[1].get_int();\n+    if (request.params.size() > 1)\n+        timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n     {\n@@ -312,9 +312,9 @@ UniValue waitforblockheight(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue getdifficulty(const UniValue& params, bool fHelp)\n+UniValue getdifficulty(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getdifficulty\\n\"\n             \"\\nReturns the proof-of-work difficulty as a multiple of the minimum difficulty.\\n\"\n@@ -411,9 +411,9 @@ UniValue mempoolToJSON(bool fVerbose = false)\n     }\n }\n \n-UniValue getrawmempool(const UniValue& params, bool fHelp)\n+UniValue getrawmempool(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getrawmempool ( verbose )\\n\"\n             \"\\nReturns all transaction ids in memory pool as a json array of string transaction ids.\\n\"\n@@ -436,15 +436,15 @@ UniValue getrawmempool(const UniValue& params, bool fHelp)\n         );\n \n     bool fVerbose = false;\n-    if (params.size() > 0)\n-        fVerbose = params[0].get_bool();\n+    if (request.params.size() > 0)\n+        fVerbose = request.params[0].get_bool();\n \n     return mempoolToJSON(fVerbose);\n }\n \n-UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n+UniValue getmempoolancestors(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n             \"getmempoolancestors txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool ancestors.\\n\"\n@@ -469,10 +469,10 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n     }\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -506,9 +506,9 @@ UniValue getmempoolancestors(const UniValue& params, bool fHelp)\n     }\n }\n \n-UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n+UniValue getmempooldescendants(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n         throw runtime_error(\n             \"getmempooldescendants txid (verbose)\\n\"\n             \"\\nIf txid is in the mempool, returns all in-mempool descendants.\\n\"\n@@ -533,10 +533,10 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n     }\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -570,9 +570,9 @@ UniValue getmempooldescendants(const UniValue& params, bool fHelp)\n     }\n }\n \n-UniValue getmempoolentry(const UniValue& params, bool fHelp)\n+UniValue getmempoolentry(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1) {\n+    if (request.fHelp || request.params.size() != 1) {\n         throw runtime_error(\n             \"getmempoolentry txid\\n\"\n             \"\\nReturns mempool data for given transaction\\n\"\n@@ -588,7 +588,7 @@ UniValue getmempoolentry(const UniValue& params, bool fHelp)\n         );\n     }\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     LOCK(mempool.cs);\n \n@@ -603,9 +603,9 @@ UniValue getmempoolentry(const UniValue& params, bool fHelp)\n     return info;\n }\n \n-UniValue getblockhash(const UniValue& params, bool fHelp)\n+UniValue getblockhash(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getblockhash index\\n\"\n             \"\\nReturns hash of block in best-block-chain at index provided.\\n\"\n@@ -620,17 +620,17 @@ UniValue getblockhash(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    int nHeight = params[0].get_int();\n+    int nHeight = request.params[0].get_int();\n     if (nHeight < 0 || nHeight > chainActive.Height())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Block height out of range\");\n \n     CBlockIndex* pblockindex = chainActive[nHeight];\n     return pblockindex->GetBlockHash().GetHex();\n }\n \n-UniValue getblockheader(const UniValue& params, bool fHelp)\n+UniValue getblockheader(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getblockheader \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'.\\n\"\n@@ -664,12 +664,12 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -687,9 +687,9 @@ UniValue getblockheader(const UniValue& params, bool fHelp)\n     return blockheaderToJSON(pblockindex);\n }\n \n-UniValue getblock(const UniValue& params, bool fHelp)\n+UniValue getblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getblock \\\"hash\\\" ( verbose )\\n\"\n             \"\\nIf verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'.\\n\"\n@@ -730,12 +730,12 @@ UniValue getblock(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n-    if (params.size() > 1)\n-        fVerbose = params[1].get_bool();\n+    if (request.params.size() > 1)\n+        fVerbose = request.params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n@@ -814,9 +814,9 @@ static bool GetUTXOStats(CCoinsView *view, CCoinsStats &stats)\n     return true;\n }\n \n-UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n+UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"gettxoutsetinfo\\n\"\n             \"\\nReturns statistics about the unspent transaction output set.\\n\"\n@@ -854,9 +854,9 @@ UniValue gettxoutsetinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue gettxout(const UniValue& params, bool fHelp)\n+UniValue gettxout(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"gettxout \\\"txid\\\" n ( includemempool )\\n\"\n             \"\\nReturns details about an unspent transaction output.\\n\"\n@@ -896,12 +896,12 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n \n     UniValue ret(UniValue::VOBJ);\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n-    int n = params[1].get_int();\n+    int n = request.params[1].get_int();\n     bool fMempool = true;\n-    if (params.size() > 2)\n-        fMempool = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fMempool = request.params[2].get_bool();\n \n     CCoins coins;\n     if (fMempool) {\n@@ -934,11 +934,11 @@ UniValue gettxout(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue verifychain(const UniValue& params, bool fHelp)\n+UniValue verifychain(const JSONRPCRequest& request)\n {\n     int nCheckLevel = GetArg(\"-checklevel\", DEFAULT_CHECKLEVEL);\n     int nCheckDepth = GetArg(\"-checkblocks\", DEFAULT_CHECKBLOCKS);\n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"verifychain ( checklevel numblocks )\\n\"\n             \"\\nVerifies blockchain database.\\n\"\n@@ -954,10 +954,10 @@ UniValue verifychain(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    if (params.size() > 0)\n-        nCheckLevel = params[0].get_int();\n-    if (params.size() > 1)\n-        nCheckDepth = params[1].get_int();\n+    if (request.params.size() > 0)\n+        nCheckLevel = request.params[0].get_int();\n+    if (request.params.size() > 1)\n+        nCheckDepth = request.params[1].get_int();\n \n     return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);\n }\n@@ -1021,9 +1021,9 @@ void BIP9SoftForkDescPushBack(UniValue& bip9_softforks, const std::string &name,\n         bip9_softforks.push_back(Pair(name, BIP9SoftForkDesc(consensusParams, id)));\n }\n \n-UniValue getblockchaininfo(const UniValue& params, bool fHelp)\n+UniValue getblockchaininfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockchaininfo\\n\"\n             \"Returns an object containing various state info regarding block chain processing.\\n\"\n@@ -1113,9 +1113,9 @@ struct CompareBlocksByHeight\n     }\n };\n \n-UniValue getchaintips(const UniValue& params, bool fHelp)\n+UniValue getchaintips(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getchaintips\\n\"\n             \"Return information about all known tips in the block tree,\"\n@@ -1229,9 +1229,9 @@ UniValue mempoolInfoToJSON()\n     return ret;\n }\n \n-UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n+UniValue getmempoolinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getmempoolinfo\\n\"\n             \"\\nReturns details on the active state of the TX memory pool.\\n\"\n@@ -1251,9 +1251,9 @@ UniValue getmempoolinfo(const UniValue& params, bool fHelp)\n     return mempoolInfoToJSON();\n }\n \n-UniValue preciousblock(const UniValue& params, bool fHelp)\n+UniValue preciousblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"preciousblock \\\"hash\\\"\\n\"\n             \"\\nTreats a block as if it were received before others with the same work.\\n\"\n@@ -1267,7 +1267,7 @@ UniValue preciousblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     CBlockIndex* pblockindex;\n \n@@ -1289,9 +1289,9 @@ UniValue preciousblock(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue invalidateblock(const UniValue& params, bool fHelp)\n+UniValue invalidateblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"invalidateblock \\\"hash\\\"\\n\"\n             \"\\nPermanently marks a block as invalid, as if it violated a consensus rule.\\n\"\n@@ -1303,7 +1303,7 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n     CValidationState state;\n \n@@ -1327,9 +1327,9 @@ UniValue invalidateblock(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue reconsiderblock(const UniValue& params, bool fHelp)\n+UniValue reconsiderblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"reconsiderblock \\\"hash\\\"\\n\"\n             \"\\nRemoves invalidity status of a block and its descendants, reconsider them for activation.\\n\"\n@@ -1342,7 +1342,7 @@ UniValue reconsiderblock(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n         );\n \n-    std::string strHash = params[0].get_str();\n+    std::string strHash = request.params[0].get_str();\n     uint256 hash(uint256S(strHash));\n \n     {"
      },
      {
        "sha": "d509dd691f55d76e43cf6a58bb5e96cc90648ac1",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -74,9 +74,9 @@ UniValue GetNetworkHashPS(int lookup, int height) {\n     return workDiff.getdouble() / timeDiff;\n }\n \n-UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n+UniValue getnetworkhashps(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"getnetworkhashps ( blocks height )\\n\"\n             \"\\nReturns the estimated network hashes per second based on the last n blocks.\\n\"\n@@ -93,7 +93,7 @@ UniValue getnetworkhashps(const UniValue& params, bool fHelp)\n        );\n \n     LOCK(cs_main);\n-    return GetNetworkHashPS(params.size() > 0 ? params[0].get_int() : 120, params.size() > 1 ? params[1].get_int() : -1);\n+    return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n }\n \n UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n@@ -146,9 +146,9 @@ UniValue generateBlocks(boost::shared_ptr<CReserveScript> coinbaseScript, int nG\n     return blockHashes;\n }\n \n-UniValue generate(const UniValue& params, bool fHelp)\n+UniValue generate(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"generate numblocks ( maxtries )\\n\"\n             \"\\nMine up to numblocks blocks immediately (before the RPC call returns)\\n\"\n@@ -162,10 +162,10 @@ UniValue generate(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generate\", \"11\")\n         );\n \n-    int nGenerate = params[0].get_int();\n+    int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n-    if (params.size() > 1) {\n-        nMaxTries = params[1].get_int();\n+    if (request.params.size() > 1) {\n+        nMaxTries = request.params[1].get_int();\n     }\n \n     boost::shared_ptr<CReserveScript> coinbaseScript;\n@@ -182,9 +182,9 @@ UniValue generate(const UniValue& params, bool fHelp)\n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, true);\n }\n \n-UniValue generatetoaddress(const UniValue& params, bool fHelp)\n+UniValue generatetoaddress(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"generatetoaddress numblocks address (maxtries)\\n\"\n             \"\\nMine blocks immediately to a specified address (before the RPC call returns)\\n\"\n@@ -199,13 +199,13 @@ UniValue generatetoaddress(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"generatetoaddress\", \"11 \\\"myaddress\\\"\")\n         );\n \n-    int nGenerate = params[0].get_int();\n+    int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n-    if (params.size() > 2) {\n-        nMaxTries = params[2].get_int();\n+    if (request.params.size() > 2) {\n+        nMaxTries = request.params[2].get_int();\n     }\n \n-    CBitcoinAddress address(params[1].get_str());\n+    CBitcoinAddress address(request.params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Error: Invalid address\");\n     \n@@ -215,9 +215,9 @@ UniValue generatetoaddress(const UniValue& params, bool fHelp)\n     return generateBlocks(coinbaseScript, nGenerate, nMaxTries, false);\n }\n \n-UniValue getmininginfo(const UniValue& params, bool fHelp)\n+UniValue getmininginfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getmininginfo\\n\"\n             \"\\nReturns a json object containing mining-related information.\"\n@@ -248,17 +248,17 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n-    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(params, false)));\n+    obj.push_back(Pair(\"networkhashps\",    getnetworkhashps(request)));\n     obj.push_back(Pair(\"pooledtx\",         (uint64_t)mempool.size()));\n     obj.push_back(Pair(\"chain\",            Params().NetworkIDString()));\n     return obj;\n }\n \n \n // NOTE: Unlike wallet RPC (which use BTC values), mining RPCs follow GBT (BIP 22) in using satoshi amounts\n-UniValue prioritisetransaction(const UniValue& params, bool fHelp)\n+UniValue prioritisetransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 3)\n+    if (request.fHelp || request.params.size() != 3)\n         throw runtime_error(\n             \"prioritisetransaction <txid> <priority delta> <fee delta>\\n\"\n             \"Accepts the transaction into mined blocks at a higher (or lower) priority\\n\"\n@@ -279,10 +279,10 @@ UniValue prioritisetransaction(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashStr(params[0].get_str(), \"txid\");\n-    CAmount nAmount = params[2].get_int64();\n+    uint256 hash = ParseHashStr(request.params[0].get_str(), \"txid\");\n+    CAmount nAmount = request.params[2].get_int64();\n \n-    mempool.PrioritiseTransaction(hash, params[0].get_str(), params[1].get_real(), nAmount);\n+    mempool.PrioritiseTransaction(hash, request.params[0].get_str(), request.params[1].get_real(), nAmount);\n     return true;\n }\n \n@@ -315,9 +315,9 @@ std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     return s;\n }\n \n-UniValue getblocktemplate(const UniValue& params, bool fHelp)\n+UniValue getblocktemplate(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getblocktemplate ( TemplateRequest )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n@@ -400,9 +400,9 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n     int64_t nMaxVersionPreVB = -1;\n-    if (params.size() > 0)\n+    if (request.params.size() > 0)\n     {\n-        const UniValue& oparam = params[0].get_obj();\n+        const UniValue& oparam = request.params[0].get_obj();\n         const UniValue& modeval = find_value(oparam, \"mode\");\n         if (modeval.isStr())\n             strMode = modeval.get_str();\n@@ -705,9 +705,9 @@ class submitblock_StateCatcher : public CValidationInterface\n     };\n };\n \n-UniValue submitblock(const UniValue& params, bool fHelp)\n+UniValue submitblock(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"submitblock \\\"hexdata\\\" ( \\\"jsonparametersobject\\\" )\\n\"\n             \"\\nAttempts to submit new block to network.\\n\"\n@@ -727,7 +727,7 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n         );\n \n     CBlock block;\n-    if (!DecodeHexBlk(block, params[0].get_str()))\n+    if (!DecodeHexBlk(block, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"Block decode failed\");\n \n     uint256 hash = block.GetHash();\n@@ -774,9 +774,9 @@ UniValue submitblock(const UniValue& params, bool fHelp)\n     return BIP22ValidationResult(state);\n }\n \n-UniValue estimatefee(const UniValue& params, bool fHelp)\n+UniValue estimatefee(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatefee nblocks\\n\"\n             \"\\nEstimates the approximate fee per kilobyte needed for a transaction to begin\\n\"\n@@ -792,9 +792,9 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatefee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n@@ -805,9 +805,9 @@ UniValue estimatefee(const UniValue& params, bool fHelp)\n     return ValueFromAmount(feeRate.GetFeePerK());\n }\n \n-UniValue estimatepriority(const UniValue& params, bool fHelp)\n+UniValue estimatepriority(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatepriority nblocks\\n\"\n             \"\\nEstimates the approximate priority a zero-fee transaction needs to begin\\n\"\n@@ -823,18 +823,18 @@ UniValue estimatepriority(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatepriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n     if (nBlocks < 1)\n         nBlocks = 1;\n \n     return mempool.estimatePriority(nBlocks);\n }\n \n-UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n+UniValue estimatesmartfee(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatesmartfee nblocks\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n@@ -856,9 +856,9 @@ UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatesmartfee\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;\n@@ -868,9 +868,9 @@ UniValue estimatesmartfee(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n+UniValue estimatesmartpriority(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"estimatesmartpriority nblocks\\n\"\n             \"\\nWARNING: This interface is unstable and may disappear or change!\\n\"\n@@ -892,9 +892,9 @@ UniValue estimatesmartpriority(const UniValue& params, bool fHelp)\n             + HelpExampleCli(\"estimatesmartpriority\", \"6\")\n             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n \n-    int nBlocks = params[0].get_int();\n+    int nBlocks = request.params[0].get_int();\n \n     UniValue result(UniValue::VOBJ);\n     int answerFound;"
      },
      {
        "sha": "eaef4856b3c5e5c34a7333a4930d9516bbbac77e",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -39,9 +39,9 @@ using namespace std;\n  *\n  * Or alternatively, create a specific query method for the information.\n  **/\n-UniValue getinfo(const UniValue& params, bool fHelp)\n+UniValue getinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getinfo\\n\"\n             \"\\nDEPRECATED. Returns an object containing various state info.\\n\"\n@@ -148,9 +148,9 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n };\n #endif\n \n-UniValue validateaddress(const UniValue& params, bool fHelp)\n+UniValue validateaddress(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"validateaddress \\\"bitcoinaddress\\\"\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n@@ -181,7 +181,7 @@ UniValue validateaddress(const UniValue& params, bool fHelp)\n     LOCK(cs_main);\n #endif\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     bool isValid = address.IsValid();\n \n     UniValue ret(UniValue::VOBJ);\n@@ -278,9 +278,9 @@ CScript _createmultisig_redeemScript(const UniValue& params)\n     return result;\n }\n \n-UniValue createmultisig(const UniValue& params, bool fHelp)\n+UniValue createmultisig(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n     {\n         string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n@@ -310,7 +310,7 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     }\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    CScript inner = _createmultisig_redeemScript(request.params);\n     CScriptID innerID(inner);\n     CBitcoinAddress address(innerID);\n \n@@ -321,9 +321,9 @@ UniValue createmultisig(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue verifymessage(const UniValue& params, bool fHelp)\n+UniValue verifymessage(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 3)\n+    if (request.fHelp || request.params.size() != 3)\n         throw runtime_error(\n             \"verifymessage \\\"bitcoinaddress\\\" \\\"signature\\\" \\\"message\\\"\\n\"\n             \"\\nVerify a signed message\\n\"\n@@ -346,9 +346,9 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    string strAddress  = params[0].get_str();\n-    string strSign     = params[1].get_str();\n-    string strMessage  = params[2].get_str();\n+    string strAddress  = request.params[0].get_str();\n+    string strSign     = request.params[1].get_str();\n+    string strMessage  = request.params[2].get_str();\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n@@ -375,9 +375,9 @@ UniValue verifymessage(const UniValue& params, bool fHelp)\n     return (pubkey.GetID() == keyID);\n }\n \n-UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n+UniValue signmessagewithprivkey(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessagewithprivkey \\\"privkey\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\\n\"\n@@ -395,8 +395,8 @@ UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"signmessagewithprivkey\", \"\\\"privkey\\\", \\\"my message\\\"\")\n         );\n \n-    string strPrivkey = params[0].get_str();\n-    string strMessage = params[1].get_str();\n+    string strPrivkey = request.params[0].get_str();\n+    string strMessage = request.params[1].get_str();\n \n     CBitcoinSecret vchSecret;\n     bool fGood = vchSecret.SetString(strPrivkey);\n@@ -417,9 +417,9 @@ UniValue signmessagewithprivkey(const UniValue& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-UniValue setmocktime(const UniValue& params, bool fHelp)\n+UniValue setmocktime(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"setmocktime timestamp\\n\"\n             \"\\nSet the local time to given timestamp (-regtest only)\\n\"\n@@ -437,8 +437,8 @@ UniValue setmocktime(const UniValue& params, bool fHelp)\n     // in a long time.\n     LOCK(cs_main);\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM));\n-    SetMockTime(params[0].get_int64());\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM));\n+    SetMockTime(request.params[0].get_int64());\n \n     uint64_t t = GetTime();\n     if(g_connman) {"
      },
      {
        "sha": "2b43f08f0be0a34cfc1d030f7228c69e9bde59a4",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 36,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -23,9 +23,9 @@\n \n using namespace std;\n \n-UniValue getconnectioncount(const UniValue& params, bool fHelp)\n+UniValue getconnectioncount(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getconnectioncount\\n\"\n             \"\\nReturns the number of connections to other nodes.\\n\"\n@@ -42,9 +42,9 @@ UniValue getconnectioncount(const UniValue& params, bool fHelp)\n     return (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n-UniValue ping(const UniValue& params, bool fHelp)\n+UniValue ping(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"ping\\n\"\n             \"\\nRequests that a ping be sent to all other nodes, to measure ping time.\\n\"\n@@ -65,9 +65,9 @@ UniValue ping(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue getpeerinfo(const UniValue& params, bool fHelp)\n+UniValue getpeerinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getpeerinfo\\n\"\n             \"\\nReturns data about each connected network node as a json array of objects.\\n\"\n@@ -184,12 +184,12 @@ UniValue getpeerinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue addnode(const UniValue& params, bool fHelp)\n+UniValue addnode(const JSONRPCRequest& request)\n {\n     string strCommand;\n-    if (params.size() == 2)\n-        strCommand = params[1].get_str();\n-    if (fHelp || params.size() != 2 ||\n+    if (request.params.size() == 2)\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || request.params.size() != 2 ||\n         (strCommand != \"onetry\" && strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n             \"addnode \\\"node\\\" \\\"add|remove|onetry\\\"\\n\"\n@@ -206,7 +206,7 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    string strNode = params[0].get_str();\n+    string strNode = request.params[0].get_str();\n \n     if (strCommand == \"onetry\")\n     {\n@@ -229,9 +229,9 @@ UniValue addnode(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue disconnectnode(const UniValue& params, bool fHelp)\n+UniValue disconnectnode(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"disconnectnode \\\"node\\\" \\n\"\n             \"\\nImmediately disconnects from the specified node.\\n\"\n@@ -245,16 +245,16 @@ UniValue disconnectnode(const UniValue& params, bool fHelp)\n     if(!g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    bool ret = g_connman->DisconnectNode(params[0].get_str());\n+    bool ret = g_connman->DisconnectNode(request.params[0].get_str());\n     if (!ret)\n         throw JSONRPCError(RPC_CLIENT_NODE_NOT_CONNECTED, \"Node not found in connected nodes\");\n \n     return NullUniValue;\n }\n \n-UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n+UniValue getaddednodeinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getaddednodeinfo ( \\\"node\\\" )\\n\"\n             \"\\nReturns information about the given added node, or all added nodes\\n\"\n@@ -286,10 +286,10 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n \n     std::vector<AddedNodeInfo> vInfo = g_connman->GetAddedNodeInfo();\n \n-    if (params.size() == 1) {\n+    if (request.params.size() == 1) {\n         bool found = false;\n         for (const AddedNodeInfo& info : vInfo) {\n-            if (info.strAddedNode == params[0].get_str()) {\n+            if (info.strAddedNode == request.params[0].get_str()) {\n                 vInfo.assign(1, info);\n                 found = true;\n                 break;\n@@ -320,9 +320,9 @@ UniValue getaddednodeinfo(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue getnettotals(const UniValue& params, bool fHelp)\n+UniValue getnettotals(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n             \"getnettotals\\n\"\n             \"\\nReturns information about network traffic, including bytes in, bytes out,\\n\"\n@@ -386,9 +386,9 @@ static UniValue GetNetworksInfo()\n     return networks;\n }\n \n-UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n+UniValue getnetworkinfo(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getnetworkinfo\\n\"\n             \"Returns an object containing various state info regarding P2P networking.\\n\"\n@@ -456,12 +456,12 @@ UniValue getnetworkinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n-UniValue setban(const UniValue& params, bool fHelp)\n+UniValue setban(const JSONRPCRequest& request)\n {\n     string strCommand;\n-    if (params.size() >= 2)\n-        strCommand = params[1].get_str();\n-    if (fHelp || params.size() < 2 ||\n+    if (request.params.size() >= 2)\n+        strCommand = request.params[1].get_str();\n+    if (request.fHelp || request.params.size() < 2 ||\n         (strCommand != \"add\" && strCommand != \"remove\"))\n         throw runtime_error(\n                             \"setban \\\"ip(/netmask)\\\" \\\"add|remove\\\" (bantime) (absolute)\\n\"\n@@ -483,16 +483,16 @@ UniValue setban(const UniValue& params, bool fHelp)\n     CNetAddr netAddr;\n     bool isSubnet = false;\n \n-    if (params[0].get_str().find(\"/\") != string::npos)\n+    if (request.params[0].get_str().find(\"/\") != string::npos)\n         isSubnet = true;\n \n     if (!isSubnet) {\n         CNetAddr resolved;\n-        LookupHost(params[0].get_str().c_str(), resolved, false);\n+        LookupHost(request.params[0].get_str().c_str(), resolved, false);\n         netAddr = resolved;\n     }\n     else\n-        LookupSubNet(params[0].get_str().c_str(), subNet);\n+        LookupSubNet(request.params[0].get_str().c_str(), subNet);\n \n     if (! (isSubnet ? subNet.IsValid() : netAddr.IsValid()) )\n         throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Invalid IP/Subnet\");\n@@ -503,11 +503,11 @@ UniValue setban(const UniValue& params, bool fHelp)\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n \n         int64_t banTime = 0; //use standard bantime if not specified\n-        if (params.size() >= 3 && !params[2].isNull())\n-            banTime = params[2].get_int64();\n+        if (request.params.size() >= 3 && !request.params[2].isNull())\n+            banTime = request.params[2].get_int64();\n \n         bool absolute = false;\n-        if (params.size() == 4 && params[3].isTrue())\n+        if (request.params.size() == 4 && request.params[3].isTrue())\n             absolute = true;\n \n         isSubnet ? g_connman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute) : g_connman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n@@ -520,9 +520,9 @@ UniValue setban(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue listbanned(const UniValue& params, bool fHelp)\n+UniValue listbanned(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n                             \"listbanned\\n\"\n                             \"\\nList all banned IPs/Subnets.\\n\"\n@@ -553,9 +553,9 @@ UniValue listbanned(const UniValue& params, bool fHelp)\n     return bannedAddresses;\n }\n \n-UniValue clearbanned(const UniValue& params, bool fHelp)\n+UniValue clearbanned(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n                             \"clearbanned\\n\"\n                             \"\\nClear all banned IPs.\\n\""
      },
      {
        "sha": "ec186f4fc58888e8b8938fb1699b08df35f7ca06",
        "filename": "src/rpc/protocol.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -26,13 +26,13 @@ using namespace std;\n  * 1.2 spec: http://jsonrpc.org/historical/json-rpc-over-http.html\n  */\n \n-string JSONRPCRequest(const string& strMethod, const UniValue& params, const UniValue& id)\n+UniValue JSONRPCRequestObj(const string& strMethod, const UniValue& params, const UniValue& id)\n {\n     UniValue request(UniValue::VOBJ);\n     request.push_back(Pair(\"method\", strMethod));\n     request.push_back(Pair(\"params\", params));\n     request.push_back(Pair(\"id\", id));\n-    return request.write() + \"\\n\";\n+    return request;\n }\n \n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id)"
      },
      {
        "sha": "c74fa0070fc6d62975d9891180f448f71628dfd5",
        "filename": "src/rpc/protocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/protocol.h?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -77,7 +77,7 @@ enum RPCErrorCode\n     RPC_WALLET_ALREADY_UNLOCKED     = -17, //!< Wallet is already unlocked\n };\n \n-std::string JSONRPCRequest(const std::string& strMethod, const UniValue& params, const UniValue& id);\n+UniValue JSONRPCRequestObj(const std::string& strMethod, const UniValue& params, const UniValue& id);\n UniValue JSONRPCReplyObj(const UniValue& result, const UniValue& error, const UniValue& id);\n std::string JSONRPCReply(const UniValue& result, const UniValue& error, const UniValue& id);\n UniValue JSONRPCError(int code, const std::string& message);"
      },
      {
        "sha": "0656a617553828fa64bc543a8eb5604c3da877db",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 45,
        "deletions": 45,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -126,9 +126,9 @@ void TxToJSON(const CTransaction& tx, const uint256 hashBlock, UniValue& entry)\n     }\n }\n \n-UniValue getrawtransaction(const UniValue& params, bool fHelp)\n+UniValue getrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getrawtransaction \\\"txid\\\" ( verbose )\\n\"\n             \"\\nNOTE: By default this function only works sometimes. This is when the tx is in the mempool\\n\"\n@@ -198,11 +198,11 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n \n     LOCK(cs_main);\n \n-    uint256 hash = ParseHashV(params[0], \"parameter 1\");\n+    uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n \n     bool fVerbose = false;\n-    if (params.size() > 1)\n-        fVerbose = (params[1].get_int() != 0);\n+    if (request.params.size() > 1)\n+        fVerbose = (request.params[1].get_int() != 0);\n \n     CTransaction tx;\n     uint256 hashBlock;\n@@ -220,9 +220,9 @@ UniValue getrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue gettxoutproof(const UniValue& params, bool fHelp)\n+UniValue gettxoutproof(const JSONRPCRequest& request)\n {\n-    if (fHelp || (params.size() != 1 && params.size() != 2))\n+    if (request.fHelp || (request.params.size() != 1 && request.params.size() != 2))\n         throw runtime_error(\n             \"gettxoutproof [\\\"txid\\\",...] ( blockhash )\\n\"\n             \"\\nReturns a hex-encoded proof that \\\"txid\\\" was included in a block.\\n\"\n@@ -244,7 +244,7 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n \n     set<uint256> setTxids;\n     uint256 oneTxid;\n-    UniValue txids = params[0].get_array();\n+    UniValue txids = request.params[0].get_array();\n     for (unsigned int idx = 0; idx < txids.size(); idx++) {\n         const UniValue& txid = txids[idx];\n         if (txid.get_str().length() != 64 || !IsHex(txid.get_str()))\n@@ -261,9 +261,9 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     CBlockIndex* pblockindex = NULL;\n \n     uint256 hashBlock;\n-    if (params.size() > 1)\n+    if (request.params.size() > 1)\n     {\n-        hashBlock = uint256S(params[1].get_str());\n+        hashBlock = uint256S(request.params[1].get_str());\n         if (!mapBlockIndex.count(hashBlock))\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         pblockindex = mapBlockIndex[hashBlock];\n@@ -301,9 +301,9 @@ UniValue gettxoutproof(const UniValue& params, bool fHelp)\n     return strHex;\n }\n \n-UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n+UniValue verifytxoutproof(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"verifytxoutproof \\\"proof\\\"\\n\"\n             \"\\nVerifies that a proof points to a transaction in a block, returning the transaction it commits to\\n\"\n@@ -314,7 +314,7 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n             \"[\\\"txid\\\"]      (array, strings) The txid(s) which the proof commits to, or empty array if the proof is invalid\\n\"\n         );\n \n-    CDataStream ssMB(ParseHexV(params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n+    CDataStream ssMB(ParseHexV(request.params[0], \"proof\"), SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n@@ -335,9 +335,9 @@ UniValue verifytxoutproof(const UniValue& params, bool fHelp)\n     return res;\n }\n \n-UniValue createrawtransaction(const UniValue& params, bool fHelp)\n+UniValue createrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw runtime_error(\n             \"createrawtransaction [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n},...] {\\\"address\\\":amount,\\\"data\\\":\\\"hex\\\",...} ( locktime )\\n\"\n             \"\\nCreate a transaction spending the given inputs and creating new outputs.\\n\"\n@@ -373,17 +373,17 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"createrawtransaction\", \"\\\"[{\\\\\\\"txid\\\\\\\":\\\\\\\"myid\\\\\\\",\\\\\\\"vout\\\\\\\":0}]\\\", \\\"{\\\\\\\"data\\\\\\\":\\\\\\\"00010203\\\\\\\"}\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n-    if (params[0].isNull() || params[1].isNull())\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ)(UniValue::VNUM), true);\n+    if (request.params[0].isNull() || request.params[1].isNull())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, arguments 1 and 2 must be non-null\");\n \n-    UniValue inputs = params[0].get_array();\n-    UniValue sendTo = params[1].get_obj();\n+    UniValue inputs = request.params[0].get_array();\n+    UniValue sendTo = request.params[1].get_obj();\n \n     CMutableTransaction rawTx;\n \n-    if (params.size() > 2 && !params[2].isNull()) {\n-        int64_t nLockTime = params[2].get_int64();\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n+        int64_t nLockTime = request.params[2].get_int64();\n         if (nLockTime < 0 || nLockTime > std::numeric_limits<uint32_t>::max())\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, locktime out of range\");\n         rawTx.nLockTime = nLockTime;\n@@ -448,9 +448,9 @@ UniValue createrawtransaction(const UniValue& params, bool fHelp)\n     return EncodeHexTx(rawTx);\n }\n \n-UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n+UniValue decoderawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"decoderawtransaction \\\"hexstring\\\"\\n\"\n             \"\\nReturn a JSON object representing the serialized, hex-encoded transaction.\\n\"\n@@ -504,11 +504,11 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     CTransaction tx;\n \n-    if (!DecodeHexTx(tx, params[0].get_str(), true))\n+    if (!DecodeHexTx(tx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     UniValue result(UniValue::VOBJ);\n@@ -517,9 +517,9 @@ UniValue decoderawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue decodescript(const UniValue& params, bool fHelp)\n+UniValue decodescript(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"decodescript \\\"hex\\\"\\n\"\n             \"\\nDecode a hex-encoded script.\\n\"\n@@ -542,12 +542,12 @@ UniValue decodescript(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"decodescript\", \"\\\"hexstring\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     UniValue r(UniValue::VOBJ);\n     CScript script;\n-    if (params[0].get_str().size() > 0){\n-        vector<unsigned char> scriptData(ParseHexV(params[0], \"argument\"));\n+    if (request.params[0].get_str().size() > 0){\n+        vector<unsigned char> scriptData(ParseHexV(request.params[0], \"argument\"));\n         script = CScript(scriptData.begin(), scriptData.end());\n     } else {\n         // Empty scripts are valid\n@@ -578,9 +578,9 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n     vErrorsRet.push_back(entry);\n }\n \n-UniValue signrawtransaction(const UniValue& params, bool fHelp)\n+UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n@@ -644,9 +644,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #else\n     LOCK(cs_main);\n #endif\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VARR)(UniValue::VARR)(UniValue::VSTR), true);\n \n-    vector<unsigned char> txData(ParseHexV(params[0], \"argument 1\"));\n+    vector<unsigned char> txData(ParseHexV(request.params[0], \"argument 1\"));\n     CDataStream ssData(txData, SER_NETWORK, PROTOCOL_VERSION);\n     vector<CMutableTransaction> txVariants;\n     while (!ssData.empty()) {\n@@ -687,9 +687,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n \n     bool fGivenKeys = false;\n     CBasicKeyStore tempKeystore;\n-    if (params.size() > 2 && !params[2].isNull()) {\n+    if (request.params.size() > 2 && !request.params[2].isNull()) {\n         fGivenKeys = true;\n-        UniValue keys = params[2].get_array();\n+        UniValue keys = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < keys.size(); idx++) {\n             UniValue k = keys[idx];\n             CBitcoinSecret vchSecret;\n@@ -708,8 +708,8 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #endif\n \n     // Add previous txouts given in the RPC call:\n-    if (params.size() > 1 && !params[1].isNull()) {\n-        UniValue prevTxs = params[1].get_array();\n+    if (request.params.size() > 1 && !request.params[1].isNull()) {\n+        UniValue prevTxs = request.params[1].get_array();\n         for (unsigned int idx = 0; idx < prevTxs.size(); idx++) {\n             const UniValue& p = prevTxs[idx];\n             if (!p.isObject())\n@@ -777,7 +777,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n #endif\n \n     int nHashType = SIGHASH_ALL;\n-    if (params.size() > 3 && !params[3].isNull()) {\n+    if (request.params.size() > 3 && !request.params[3].isNull()) {\n         static map<string, int> mapSigHashValues =\n             boost::assign::map_list_of\n             (string(\"ALL\"), int(SIGHASH_ALL))\n@@ -787,7 +787,7 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n             (string(\"SINGLE\"), int(SIGHASH_SINGLE))\n             (string(\"SINGLE|ANYONECANPAY\"), int(SIGHASH_SINGLE|SIGHASH_ANYONECANPAY))\n             ;\n-        string strHashType = params[3].get_str();\n+        string strHashType = request.params[3].get_str();\n         if (mapSigHashValues.count(strHashType))\n             nHashType = mapSigHashValues[strHashType];\n         else\n@@ -842,9 +842,9 @@ UniValue signrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n+UniValue sendrawtransaction(const JSONRPCRequest& request)\n {\n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"sendrawtransaction \\\"hexstring\\\" ( allowhighfees )\\n\"\n             \"\\nSubmits raw transaction (serialized, hex-encoded) to local node and network.\\n\"\n@@ -866,17 +866,17 @@ UniValue sendrawtransaction(const UniValue& params, bool fHelp)\n         );\n \n     LOCK(cs_main);\n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VBOOL));\n \n     // parse hex string from parameter\n     CTransaction tx;\n-    if (!DecodeHexTx(tx, params[0].get_str()))\n+    if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n \n     bool fLimitFree = false;\n     CAmount nMaxRawTxFee = maxTxFee;\n-    if (params.size() > 1 && params[1].get_bool())\n+    if (request.params.size() > 1 && request.params[1].get_bool())\n         nMaxRawTxFee = 0;\n \n     CCoinsViewCache &view = *pcoinsTip;"
      },
      {
        "sha": "29d0bee1b2789f21c30d343a5fd80d7ab860e802",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 14,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -195,10 +195,11 @@ std::string CRPCTable::help(const std::string& strCommand) const\n             continue;\n         try\n         {\n-            UniValue params;\n+            JSONRPCRequest jreq;\n+            jreq.fHelp = true;\n             rpcfn_type pfn = pcmd->actor;\n             if (setDone.insert(pfn).second)\n-                (*pfn)(params, true);\n+                (*pfn)(jreq);\n         }\n         catch (const std::exception& e)\n         {\n@@ -228,9 +229,9 @@ std::string CRPCTable::help(const std::string& strCommand) const\n     return strRet;\n }\n \n-UniValue help(const UniValue& params, bool fHelp)\n+UniValue help(const JSONRPCRequest& jsonRequest)\n {\n-    if (fHelp || params.size() > 1)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw runtime_error(\n             \"help ( \\\"command\\\" )\\n\"\n             \"\\nList all commands, or get help for a specified command.\\n\"\n@@ -241,17 +242,17 @@ UniValue help(const UniValue& params, bool fHelp)\n         );\n \n     string strCommand;\n-    if (params.size() > 0)\n-        strCommand = params[0].get_str();\n+    if (jsonRequest.params.size() > 0)\n+        strCommand = jsonRequest.params[0].get_str();\n \n     return tableRPC.help(strCommand);\n }\n \n \n-UniValue stop(const UniValue& params, bool fHelp)\n+UniValue stop(const JSONRPCRequest& jsonRequest)\n {\n     // Accept the deprecated and ignored 'detach' boolean argument\n-    if (fHelp || params.size() > 1)\n+    if (jsonRequest.fHelp || jsonRequest.params.size() > 1)\n         throw runtime_error(\n             \"stop\\n\"\n             \"\\nStop Bitcoin server.\");\n@@ -354,7 +355,7 @@ bool RPCIsInWarmup(std::string *outStatus)\n     return fRPCInWarmup;\n }\n \n-void JSONRequest::parse(const UniValue& valRequest)\n+void JSONRPCRequest::parse(const UniValue& valRequest)\n {\n     // Parse request\n     if (!valRequest.isObject())\n@@ -388,11 +389,11 @@ static UniValue JSONRPCExecOne(const UniValue& req)\n {\n     UniValue rpc_result(UniValue::VOBJ);\n \n-    JSONRequest jreq;\n+    JSONRPCRequest jreq;\n     try {\n         jreq.parse(req);\n \n-        UniValue result = tableRPC.execute(jreq.strMethod, jreq.params);\n+        UniValue result = tableRPC.execute(jreq);\n         rpc_result = JSONRPCReplyObj(result, NullUniValue, jreq.id);\n     }\n     catch (const UniValue& objError)\n@@ -417,7 +418,7 @@ std::string JSONRPCExecBatch(const UniValue& vReq)\n     return ret.write() + \"\\n\";\n }\n \n-UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params) const\n+UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n {\n     // Return immediately if in warmup\n     {\n@@ -427,7 +428,7 @@ UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params\n     }\n \n     // Find method\n-    const CRPCCommand *pcmd = tableRPC[strMethod];\n+    const CRPCCommand *pcmd = tableRPC[request.strMethod];\n     if (!pcmd)\n         throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");\n \n@@ -436,7 +437,7 @@ UniValue CRPCTable::execute(const std::string &strMethod, const UniValue &params\n     try\n     {\n         // Execute\n-        return pcmd->actor(params, false);\n+        return pcmd->actor(request);\n     }\n     catch (const std::exception& e)\n     {"
      },
      {
        "sha": "c59886222c27621af860c3e97039aab0b68e00c8",
        "filename": "src/rpc/server.h",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/server.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/rpc/server.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.h?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -41,14 +41,17 @@ struct UniValueType {\n     UniValue::VType type;\n };\n \n-class JSONRequest\n+class JSONRPCRequest\n {\n public:\n     UniValue id;\n     std::string strMethod;\n     UniValue params;\n+    bool fHelp;\n+    std::string URI;\n+    std::string authUser;\n \n-    JSONRequest() { id = NullUniValue; }\n+    JSONRPCRequest() { id = NullUniValue; params = NullUniValue; fHelp = false; }\n     void parse(const UniValue& valRequest);\n };\n \n@@ -122,7 +125,7 @@ void RPCUnsetTimerInterface(RPCTimerInterface *iface);\n  */\n void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n-typedef UniValue(*rpcfn_type)(const UniValue& params, bool fHelp);\n+typedef UniValue(*rpcfn_type)(const JSONRPCRequest& jsonRequest);\n \n class CRPCCommand\n {\n@@ -147,12 +150,11 @@ class CRPCTable\n \n     /**\n      * Execute a method.\n-     * @param method   Method to execute\n-     * @param params   UniValue Array of arguments (JSON objects)\n+     * @param request The JSONRPCRequest to execute\n      * @returns Result of the call.\n      * @throws an exception (UniValue) when an error happens.\n      */\n-    UniValue execute(const std::string &method, const UniValue &params) const;\n+    UniValue execute(const JSONRPCRequest &request) const;\n \n     /**\n     * Returns a list of registered commands"
      },
      {
        "sha": "a3d1a2558904d3988e29249dc02ac1d9c4144d7e",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -24,11 +24,14 @@ UniValue CallRPC(string args)\n     boost::split(vArgs, args, boost::is_any_of(\" \\t\"));\n     string strMethod = vArgs[0];\n     vArgs.erase(vArgs.begin());\n-    UniValue params = RPCConvertValues(strMethod, vArgs);\n+    JSONRPCRequest request;\n+    request.strMethod = strMethod;\n+    request.params = RPCConvertValues(strMethod, vArgs);\n+    request.fHelp = false;\n     BOOST_CHECK(tableRPC[strMethod]);\n     rpcfn_type method = tableRPC[strMethod]->actor;\n     try {\n-        UniValue result = (*method)(params, false);\n+        UniValue result = (*method)(request);\n         return result;\n     }\n     catch (const UniValue& objError) {"
      },
      {
        "sha": "8a1bbd56845267b9930ffc5fdce7b6c792d418be",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 50,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -74,12 +74,12 @@ std::string DecodeDumpString(const std::string &str) {\n     return ret.str();\n }\n \n-UniValue importprivkey(const UniValue& params, bool fHelp)\n+UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw runtime_error(\n             \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n@@ -104,15 +104,15 @@ UniValue importprivkey(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strSecret = params[0].get_str();\n+    string strSecret = request.params[0].get_str();\n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n@@ -184,12 +184,12 @@ void ImportAddress(const CBitcoinAddress& address, const string& strLabel)\n         pwalletMain->SetAddressBook(address.Get(), strLabel, \"receive\");\n }\n \n-UniValue importaddress(const UniValue& params, bool fHelp)\n+UniValue importaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n@@ -213,31 +213,31 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n \n \n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     // Whether to import a p2sh version, too\n     bool fP2SH = false;\n-    if (params.size() > 3)\n-        fP2SH = params[3].get_bool();\n+    if (request.params.size() > 3)\n+        fP2SH = request.params[3].get_bool();\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (address.IsValid()) {\n         if (fP2SH)\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n         ImportAddress(address, strLabel);\n-    } else if (IsHex(params[0].get_str())) {\n-        std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    } else if (IsHex(request.params[0].get_str())) {\n+        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n         ImportScript(CScript(data.begin(), data.end()), strLabel, fP2SH);\n     } else {\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n@@ -252,12 +252,12 @@ UniValue importaddress(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importprunedfunds(const UniValue& params, bool fHelp)\n+UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"importprunedfunds\\n\"\n             \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n@@ -267,12 +267,12 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n         );\n \n     CTransaction tx;\n-    if (!DecodeHexTx(tx, params[0].get_str()))\n+    if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n     uint256 hashTx = tx.GetHash();\n     CWalletTx wtx(pwalletMain,tx);\n \n-    CDataStream ssMB(ParseHexV(params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n+    CDataStream ssMB(ParseHexV(request.params[1], \"proof\"), SER_NETWORK, PROTOCOL_VERSION);\n     CMerkleBlock merkleBlock;\n     ssMB >> merkleBlock;\n \n@@ -311,12 +311,12 @@ UniValue importprunedfunds(const UniValue& params, bool fHelp)\n     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"No addresses in wallet correspond to included transaction\");\n }\n \n-UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n+UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"removeprunedfunds \\\"txid\\\"\\n\"\n             \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will effect wallet balances.\\n\"\n@@ -331,7 +331,7 @@ UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n     vector<uint256> vHash;\n     vHash.push_back(hash);\n     vector<uint256> vHashOut;\n@@ -347,12 +347,12 @@ UniValue removeprunedfunds(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue importpubkey(const UniValue& params, bool fHelp)\n+UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw runtime_error(\n             \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n@@ -372,20 +372,20 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n \n \n     string strLabel = \"\";\n-    if (params.size() > 1)\n-        strLabel = params[1].get_str();\n+    if (request.params.size() > 1)\n+        strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (params.size() > 2)\n-        fRescan = params[2].get_bool();\n+    if (request.params.size() > 2)\n+        fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n-    if (!IsHex(params[0].get_str()))\n+    if (!IsHex(request.params[0].get_str()))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n-    std::vector<unsigned char> data(ParseHex(params[0].get_str()));\n+    std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n     CPubKey pubKey(data.begin(), data.end());\n     if (!pubKey.IsFullyValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n@@ -405,12 +405,12 @@ UniValue importpubkey(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue importwallet(const UniValue& params, bool fHelp)\n+UniValue importwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"importwallet \\\"filename\\\"\\n\"\n             \"\\nImports keys from a wallet dump file (see dumpwallet).\\n\"\n@@ -433,7 +433,7 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     ifstream file;\n-    file.open(params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n+    file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n@@ -512,12 +512,12 @@ UniValue importwallet(const UniValue& params, bool fHelp)\n     return NullUniValue;\n }\n \n-UniValue dumpprivkey(const UniValue& params, bool fHelp)\n+UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey \\\"bitcoinaddress\\\"\\n\"\n             \"\\nReveals the private key corresponding to 'bitcoinaddress'.\\n\"\n@@ -536,7 +536,7 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strAddress = params[0].get_str();\n+    string strAddress = request.params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n@@ -550,12 +550,12 @@ UniValue dumpprivkey(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue dumpwallet(const UniValue& params, bool fHelp)\n+UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n     \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"dumpwallet \\\"filename\\\"\\n\"\n             \"\\nDumps all wallet keys in a human-readable format.\\n\"\n@@ -571,7 +571,7 @@ UniValue dumpwallet(const UniValue& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     ofstream file;\n-    file.open(params[0].get_str().c_str());\n+    file.open(request.params[0].get_str().c_str());\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n "
      },
      {
        "sha": "33620aa6ff59e6aa26cecdaaf8dca4bdc941b749",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 243,
        "deletions": 243,
        "changes": 486,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/97c7f7362f9b59247753d6e8fa8022a6205f9c09/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "patch": "@@ -101,12 +101,12 @@ string AccountFromValue(const UniValue& value)\n     return strAccount;\n }\n \n-UniValue getnewaddress(const UniValue& params, bool fHelp)\n+UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getnewaddress ( \\\"account\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n@@ -125,8 +125,8 @@ UniValue getnewaddress(const UniValue& params, bool fHelp)\n \n     // Parse the account first so we don't generate a key if there's an error\n     string strAccount;\n-    if (params.size() > 0)\n-        strAccount = AccountFromValue(params[0]);\n+    if (request.params.size() > 0)\n+        strAccount = AccountFromValue(request.params[0]);\n \n     if (!pwalletMain->IsLocked())\n         pwalletMain->TopUpKeyPool();\n@@ -153,12 +153,12 @@ CBitcoinAddress GetAccountAddress(string strAccount, bool bForceNew=false)\n     return CBitcoinAddress(pubKey.GetID());\n }\n \n-UniValue getaccountaddress(const UniValue& params, bool fHelp)\n+UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaccountaddress \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n@@ -176,7 +176,7 @@ UniValue getaccountaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Parse the account first so we don't generate a key if there's an error\n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     UniValue ret(UniValue::VSTR);\n \n@@ -185,12 +185,12 @@ UniValue getaccountaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getrawchangeaddress(const UniValue& params, bool fHelp)\n+UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"getrawchangeaddress\\n\"\n             \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n@@ -220,12 +220,12 @@ UniValue getrawchangeaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue setaccount(const UniValue& params, bool fHelp)\n+UniValue setaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"setaccount \\\"bitcoinaddress\\\" \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n@@ -239,13 +239,13 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     string strAccount;\n-    if (params.size() > 1)\n-        strAccount = AccountFromValue(params[1]);\n+    if (request.params.size() > 1)\n+        strAccount = AccountFromValue(request.params[1]);\n \n     // Only add the account if the address is yours.\n     if (IsMine(*pwalletMain, address.Get()))\n@@ -266,12 +266,12 @@ UniValue setaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getaccount(const UniValue& params, bool fHelp)\n+UniValue getaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaccount \\\"bitcoinaddress\\\"\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n@@ -286,7 +286,7 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n@@ -298,12 +298,12 @@ UniValue getaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n+UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"getaddressesbyaccount \\\"account\\\"\\n\"\n             \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n@@ -321,7 +321,7 @@ UniValue getaddressesbyaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     // Find all addresses that have the given account\n     UniValue ret(UniValue::VARR);\n@@ -369,12 +369,12 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n }\n \n-UniValue sendtoaddress(const UniValue& params, bool fHelp)\n+UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendtoaddress \\\"bitcoinaddress\\\" amount ( \\\"comment\\\" \\\"comment-to\\\" subtractfeefromamount )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n@@ -400,25 +400,25 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    CAmount nAmount = AmountFromValue(params[1]);\n+    CAmount nAmount = AmountFromValue(request.params[1]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n \n     // Wallet comments\n     CWalletTx wtx;\n-    if (params.size() > 2 && !params[2].isNull() && !params[2].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[2].get_str();\n-    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[3].get_str();\n+    if (request.params.size() > 2 && !request.params[2].isNull() && !request.params[2].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[2].get_str();\n+    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+        wtx.mapValue[\"to\"]      = request.params[3].get_str();\n \n     bool fSubtractFeeFromAmount = false;\n-    if (params.size() > 4)\n-        fSubtractFeeFromAmount = params[4].get_bool();\n+    if (request.params.size() > 4)\n+        fSubtractFeeFromAmount = request.params[4].get_bool();\n \n     EnsureWalletIsUnlocked();\n \n@@ -427,12 +427,12 @@ UniValue sendtoaddress(const UniValue& params, bool fHelp)\n     return wtx.GetHash().GetHex();\n }\n \n-UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n+UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp)\n+    if (request.fHelp)\n         throw runtime_error(\n             \"listaddressgroupings\\n\"\n             \"\\nLists groups of addresses which have had their common ownership\\n\"\n@@ -478,12 +478,12 @@ UniValue listaddressgroupings(const UniValue& params, bool fHelp)\n     return jsonGroupings;\n }\n \n-UniValue signmessage(const UniValue& params, bool fHelp)\n+UniValue signmessage(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 2)\n+    if (request.fHelp || request.params.size() != 2)\n         throw runtime_error(\n             \"signmessage \\\"bitcoinaddress\\\" \\\"message\\\"\\n\"\n             \"\\nSign a message with the private key of an address\"\n@@ -508,8 +508,8 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n \n     EnsureWalletIsUnlocked();\n \n-    string strAddress = params[0].get_str();\n-    string strMessage = params[1].get_str();\n+    string strAddress = request.params[0].get_str();\n+    string strMessage = request.params[1].get_str();\n \n     CBitcoinAddress addr(strAddress);\n     if (!addr.IsValid())\n@@ -534,12 +534,12 @@ UniValue signmessage(const UniValue& params, bool fHelp)\n     return EncodeBase64(&vchSig[0], vchSig.size());\n }\n \n-UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n+UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaddress \\\"bitcoinaddress\\\" ( minconf )\\n\"\n             \"\\nReturns the total amount received by the given bitcoinaddress in transactions with at least minconf confirmations.\\n\"\n@@ -562,7 +562,7 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Bitcoin address\n-    CBitcoinAddress address = CBitcoinAddress(params[0].get_str());\n+    CBitcoinAddress address = CBitcoinAddress(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n     CScript scriptPubKey = GetScriptForDestination(address.Get());\n@@ -571,8 +571,8 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n \n     // Tally\n     CAmount nAmount = 0;\n@@ -592,12 +592,12 @@ UniValue getreceivedbyaddress(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n+UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n             \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n@@ -621,11 +621,11 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n \n     // Get the set of pub keys assigned to account\n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n@@ -649,12 +649,12 @@ UniValue getreceivedbyaccount(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue getbalance(const UniValue& params, bool fHelp)\n+UniValue getbalance(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"getbalance ( \\\"account\\\" minconf includeWatchonly )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n@@ -678,18 +678,18 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (params.size() == 0)\n+    if (request.params.size() == 0)\n         return  ValueFromAmount(pwalletMain->GetBalance());\n \n     int nMinDepth = 1;\n-    if (params.size() > 1)\n-        nMinDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMinDepth = request.params[1].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 2)\n-        if(params[2].get_bool())\n+    if(request.params.size() > 2)\n+        if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n-    if (params[0].get_str() == \"*\") {\n+    if (request.params[0].get_str() == \"*\") {\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and \"getbalance * 1 true\" should return the same number\n@@ -717,19 +717,19 @@ UniValue getbalance(const UniValue& params, bool fHelp)\n         return  ValueFromAmount(nBalance);\n     }\n \n-    string strAccount = AccountFromValue(params[0]);\n+    string strAccount = AccountFromValue(request.params[0]);\n \n     CAmount nBalance = pwalletMain->GetAccountBalance(strAccount, nMinDepth, filter);\n \n     return ValueFromAmount(nBalance);\n }\n \n-UniValue getunconfirmedbalance(const UniValue &params, bool fHelp)\n+UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n                 \"getunconfirmedbalance\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n@@ -740,12 +740,12 @@ UniValue getunconfirmedbalance(const UniValue &params, bool fHelp)\n }\n \n \n-UniValue movecmd(const UniValue& params, bool fHelp)\n+UniValue movecmd(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 3 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n         throw runtime_error(\n             \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n             \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n@@ -768,17 +768,17 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strFrom = AccountFromValue(params[0]);\n-    string strTo = AccountFromValue(params[1]);\n-    CAmount nAmount = AmountFromValue(params[2]);\n+    string strFrom = AccountFromValue(request.params[0]);\n+    string strTo = AccountFromValue(request.params[1]);\n+    CAmount nAmount = AmountFromValue(request.params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n-    if (params.size() > 3)\n+    if (request.params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n-        (void)params[3].get_int();\n+        (void)request.params[3].get_int();\n     string strComment;\n-    if (params.size() > 4)\n-        strComment = params[4].get_str();\n+    if (request.params.size() > 4)\n+        strComment = request.params[4].get_str();\n \n     if (!pwalletMain->AccountMove(strFrom, strTo, nAmount, strComment))\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n@@ -787,12 +787,12 @@ UniValue movecmd(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue sendfrom(const UniValue& params, bool fHelp)\n+UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 3 || params.size() > 6)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw runtime_error(\n             \"sendfrom \\\"fromaccount\\\" \\\"tobitcoinaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment-to\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n@@ -820,23 +820,23 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strAccount = AccountFromValue(params[0]);\n-    CBitcoinAddress address(params[1].get_str());\n+    string strAccount = AccountFromValue(request.params[0]);\n+    CBitcoinAddress address(request.params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    CAmount nAmount = AmountFromValue(params[2]);\n+    CAmount nAmount = AmountFromValue(request.params[2]);\n     if (nAmount <= 0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount for send\");\n     int nMinDepth = 1;\n-    if (params.size() > 3)\n-        nMinDepth = params[3].get_int();\n+    if (request.params.size() > 3)\n+        nMinDepth = request.params[3].get_int();\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 4 && !params[4].isNull() && !params[4].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[4].get_str();\n-    if (params.size() > 5 && !params[5].isNull() && !params[5].get_str().empty())\n-        wtx.mapValue[\"to\"]      = params[5].get_str();\n+    if (request.params.size() > 4 && !request.params[4].isNull() && !request.params[4].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[4].get_str();\n+    if (request.params.size() > 5 && !request.params[5].isNull() && !request.params[5].get_str().empty())\n+        wtx.mapValue[\"to\"]      = request.params[5].get_str();\n \n     EnsureWalletIsUnlocked();\n \n@@ -851,12 +851,12 @@ UniValue sendfrom(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue sendmany(const UniValue& params, bool fHelp)\n+UniValue sendmany(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n         throw runtime_error(\n             \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n@@ -897,20 +897,20 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n     if (pwalletMain->GetBroadcastTransactions() && !g_connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    string strAccount = AccountFromValue(params[0]);\n-    UniValue sendTo = params[1].get_obj();\n+    string strAccount = AccountFromValue(request.params[0]);\n+    UniValue sendTo = request.params[1].get_obj();\n     int nMinDepth = 1;\n-    if (params.size() > 2)\n-        nMinDepth = params[2].get_int();\n+    if (request.params.size() > 2)\n+        nMinDepth = request.params[2].get_int();\n \n     CWalletTx wtx;\n     wtx.strFromAccount = strAccount;\n-    if (params.size() > 3 && !params[3].isNull() && !params[3].get_str().empty())\n-        wtx.mapValue[\"comment\"] = params[3].get_str();\n+    if (request.params.size() > 3 && !request.params[3].isNull() && !request.params[3].get_str().empty())\n+        wtx.mapValue[\"comment\"] = request.params[3].get_str();\n \n     UniValue subtractFeeFromAmount(UniValue::VARR);\n-    if (params.size() > 4)\n-        subtractFeeFromAmount = params[4].get_array();\n+    if (request.params.size() > 4)\n+        subtractFeeFromAmount = request.params[4].get_array();\n \n     set<CBitcoinAddress> setAddress;\n     vector<CRecipient> vecSend;\n@@ -968,12 +968,12 @@ UniValue sendmany(const UniValue& params, bool fHelp)\n // Defined in rpc/misc.cpp\n extern CScript _createmultisig_redeemScript(const UniValue& params);\n \n-UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n+UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 2 || params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n         string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n@@ -1004,11 +1004,11 @@ UniValue addmultisigaddress(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount;\n-    if (params.size() > 2)\n-        strAccount = AccountFromValue(params[2]);\n+    if (request.params.size() > 2)\n+        strAccount = AccountFromValue(request.params[2]);\n \n     // Construct using pay-to-script-hash:\n-    CScript inner = _createmultisig_redeemScript(params);\n+    CScript inner = _createmultisig_redeemScript(request.params);\n     CScriptID innerID(inner);\n     pwalletMain->AddCScript(inner);\n \n@@ -1061,12 +1061,12 @@ class Witnessifier : public boost::static_visitor<bool>\n     }\n };\n \n-UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n+UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n     {\n         string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n@@ -1089,7 +1089,7 @@ UniValue addwitnessaddress(const UniValue& params, bool fHelp)\n         }\n     }\n \n-    CBitcoinAddress address(params[0].get_str());\n+    CBitcoinAddress address(request.params[0].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n@@ -1239,12 +1239,12 @@ UniValue ListReceived(const UniValue& params, bool fByAccounts)\n     return ret;\n }\n \n-UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n+UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaddress ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nList balances by receiving address.\\n\"\n@@ -1274,15 +1274,15 @@ UniValue listreceivedbyaddress(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(params, false);\n+    return ListReceived(request.params, false);\n }\n \n-UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n+UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listreceivedbyaccount ( minconf includeempty includeWatchonly)\\n\"\n             \"\\nDEPRECATED. List balances by account.\\n\"\n@@ -1311,7 +1311,7 @@ UniValue listreceivedbyaccount(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    return ListReceived(params, true);\n+    return ListReceived(request.params, true);\n }\n \n static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n@@ -1413,12 +1413,12 @@ void AcentryToJSON(const CAccountingEntry& acentry, const string& strAccount, Un\n     }\n }\n \n-UniValue listtransactions(const UniValue& params, bool fHelp)\n+UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 4)\n+    if (request.fHelp || request.params.size() > 4)\n         throw runtime_error(\n             \"listtransactions ( \\\"account\\\" count from includeWatchonly)\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n@@ -1480,17 +1480,17 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     string strAccount = \"*\";\n-    if (params.size() > 0)\n-        strAccount = params[0].get_str();\n+    if (request.params.size() > 0)\n+        strAccount = request.params[0].get_str();\n     int nCount = 10;\n-    if (params.size() > 1)\n-        nCount = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nCount = request.params[1].get_int();\n     int nFrom = 0;\n-    if (params.size() > 2)\n-        nFrom = params[2].get_int();\n+    if (request.params.size() > 2)\n+        nFrom = request.params[2].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 3)\n-        if(params[3].get_bool())\n+    if(request.params.size() > 3)\n+        if(request.params[3].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     if (nCount < 0)\n@@ -1540,12 +1540,12 @@ UniValue listtransactions(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue listaccounts(const UniValue& params, bool fHelp)\n+UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 2)\n+    if (request.fHelp || request.params.size() > 2)\n         throw runtime_error(\n             \"listaccounts ( minconf includeWatchonly)\\n\"\n             \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n@@ -1571,11 +1571,11 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     int nMinDepth = 1;\n-    if (params.size() > 0)\n-        nMinDepth = params[0].get_int();\n+    if (request.params.size() > 0)\n+        nMinDepth = request.params[0].get_int();\n     isminefilter includeWatchonly = ISMINE_SPENDABLE;\n-    if(params.size() > 1)\n-        if(params[1].get_bool())\n+    if(request.params.size() > 1)\n+        if(request.params[1].get_bool())\n             includeWatchonly = includeWatchonly | ISMINE_WATCH_ONLY;\n \n     map<string, CAmount> mapAccountBalances;\n@@ -1619,12 +1619,12 @@ UniValue listaccounts(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue listsinceblock(const UniValue& params, bool fHelp)\n+UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp)\n+    if (request.fHelp)\n         throw runtime_error(\n             \"listsinceblock ( \\\"blockhash\\\" target-confirmations includeWatchonly)\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n@@ -1667,26 +1667,26 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (params.size() > 0)\n+    if (request.params.size() > 0)\n     {\n         uint256 blockId;\n \n-        blockId.SetHex(params[0].get_str());\n+        blockId.SetHex(request.params[0].get_str());\n         BlockMap::iterator it = mapBlockIndex.find(blockId);\n         if (it != mapBlockIndex.end())\n             pindex = it->second;\n     }\n \n-    if (params.size() > 1)\n+    if (request.params.size() > 1)\n     {\n-        target_confirms = params[1].get_int();\n+        target_confirms = request.params[1].get_int();\n \n         if (target_confirms < 1)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter\");\n     }\n \n-    if(params.size() > 2)\n-        if(params[2].get_bool())\n+    if(request.params.size() > 2)\n+        if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     int depth = pindex ? (1 + chainActive.Height() - pindex->nHeight) : -1;\n@@ -1711,12 +1711,12 @@ UniValue listsinceblock(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue gettransaction(const UniValue& params, bool fHelp)\n+UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"gettransaction \\\"txid\\\" ( includeWatchonly )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n@@ -1758,11 +1758,11 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n \n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 1)\n-        if(params[1].get_bool())\n+    if(request.params.size() > 1)\n+        if(request.params[1].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n     UniValue entry(UniValue::VOBJ);\n@@ -1791,12 +1791,12 @@ UniValue gettransaction(const UniValue& params, bool fHelp)\n     return entry;\n }\n \n-UniValue abandontransaction(const UniValue& params, bool fHelp)\n+UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"abandontransaction \\\"txid\\\"\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n@@ -1815,7 +1815,7 @@ UniValue abandontransaction(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     uint256 hash;\n-    hash.SetHex(params[0].get_str());\n+    hash.SetHex(request.params[0].get_str());\n \n     if (!pwalletMain->mapWallet.count(hash))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n@@ -1826,12 +1826,12 @@ UniValue abandontransaction(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue backupwallet(const UniValue& params, bool fHelp)\n+UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 1)\n+    if (request.fHelp || request.params.size() != 1)\n         throw runtime_error(\n             \"backupwallet \\\"destination\\\"\\n\"\n             \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\"\n@@ -1844,20 +1844,20 @@ UniValue backupwallet(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    string strDest = params[0].get_str();\n+    string strDest = request.params[0].get_str();\n     if (!pwalletMain->BackupWallet(strDest))\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Wallet backup failed!\");\n \n     return NullUniValue;\n }\n \n \n-UniValue keypoolrefill(const UniValue& params, bool fHelp)\n+UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 1)\n+    if (request.fHelp || request.params.size() > 1)\n         throw runtime_error(\n             \"keypoolrefill ( newsize )\\n\"\n             \"\\nFills the keypool.\"\n@@ -1873,10 +1873,10 @@ UniValue keypoolrefill(const UniValue& params, bool fHelp)\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n-    if (params.size() > 0) {\n-        if (params[0].get_int() < 0)\n+    if (request.params.size() > 0) {\n+        if (request.params[0].get_int() < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n-        kpSize = (unsigned int)params[0].get_int();\n+        kpSize = (unsigned int)request.params[0].get_int();\n     }\n \n     EnsureWalletIsUnlocked();\n@@ -1896,12 +1896,12 @@ static void LockWallet(CWallet* pWallet)\n     pWallet->Lock();\n }\n \n-UniValue walletpassphrase(const UniValue& params, bool fHelp)\n+UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n@@ -1923,17 +1923,17 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrase was called.\");\n \n-    // Note that the walletpassphrase is stored in params[0] which is not mlock()ed\n+    // Note that the walletpassphrase is stored in request.params[0] which is not mlock()ed\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n-    strWalletPass = params[0].get_str().c_str();\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n+    strWalletPass = request.params[0].get_str().c_str();\n \n     if (strWalletPass.length() > 0)\n     {\n@@ -1947,7 +1947,7 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n \n     pwalletMain->TopUpKeyPool();\n \n-    int64_t nSleepTime = params[1].get_int64();\n+    int64_t nSleepTime = request.params[1].get_int64();\n     LOCK(cs_nWalletUnlockTime);\n     nWalletUnlockTime = GetTime() + nSleepTime;\n     RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);\n@@ -1956,12 +1956,12 @@ UniValue walletpassphrase(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n+UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 2))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 2))\n         throw runtime_error(\n             \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n@@ -1975,20 +1975,20 @@ UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\");\n \n     // TODO: get rid of these .c_str() calls by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n     SecureString strOldWalletPass;\n     strOldWalletPass.reserve(100);\n-    strOldWalletPass = params[0].get_str().c_str();\n+    strOldWalletPass = request.params[0].get_str().c_str();\n \n     SecureString strNewWalletPass;\n     strNewWalletPass.reserve(100);\n-    strNewWalletPass = params[1].get_str().c_str();\n+    strNewWalletPass = request.params[1].get_str().c_str();\n \n     if (strOldWalletPass.length() < 1 || strNewWalletPass.length() < 1)\n         throw runtime_error(\n@@ -2002,12 +2002,12 @@ UniValue walletpassphrasechange(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue walletlock(const UniValue& params, bool fHelp)\n+UniValue walletlock(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (pwalletMain->IsCrypted() && (fHelp || params.size() != 0))\n+    if (pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 0))\n         throw runtime_error(\n             \"walletlock\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n@@ -2026,7 +2026,7 @@ UniValue walletlock(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (!pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an unencrypted wallet, but walletlock was called.\");\n@@ -2041,12 +2041,12 @@ UniValue walletlock(const UniValue& params, bool fHelp)\n }\n \n \n-UniValue encryptwallet(const UniValue& params, bool fHelp)\n+UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (!pwalletMain->IsCrypted() && (fHelp || params.size() != 1))\n+    if (!pwalletMain->IsCrypted() && (request.fHelp || request.params.size() != 1))\n         throw runtime_error(\n             \"encryptwallet \\\"passphrase\\\"\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n@@ -2072,16 +2072,16 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (fHelp)\n+    if (request.fHelp)\n         return true;\n     if (pwalletMain->IsCrypted())\n         throw JSONRPCError(RPC_WALLET_WRONG_ENC_STATE, \"Error: running with an encrypted wallet, but encryptwallet was called.\");\n \n     // TODO: get rid of this .c_str() by implementing SecureString::operator=(std::string)\n-    // Alternately, find a way to make params[0] mlock()'d to begin with.\n+    // Alternately, find a way to make request.params[0] mlock()'d to begin with.\n     SecureString strWalletPass;\n     strWalletPass.reserve(100);\n-    strWalletPass = params[0].get_str().c_str();\n+    strWalletPass = request.params[0].get_str().c_str();\n \n     if (strWalletPass.length() < 1)\n         throw runtime_error(\n@@ -2098,12 +2098,12 @@ UniValue encryptwallet(const UniValue& params, bool fHelp)\n     return \"wallet encrypted; Bitcoin server stopping, restart to run with encrypted wallet. The keypool has been flushed and a new HD seed was generated (if you are using HD). You need to make a new backup.\";\n }\n \n-UniValue lockunspent(const UniValue& params, bool fHelp)\n+UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n             \"lockunspent unlock ([{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...])\\n\"\n             \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n@@ -2142,20 +2142,20 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n \n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n-    if (params.size() == 1)\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL));\n+    if (request.params.size() == 1)\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL));\n     else\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VBOOL)(UniValue::VARR));\n \n-    bool fUnlock = params[0].get_bool();\n+    bool fUnlock = request.params[0].get_bool();\n \n-    if (params.size() == 1) {\n+    if (request.params.size() == 1) {\n         if (fUnlock)\n             pwalletMain->UnlockAllCoins();\n         return true;\n     }\n \n-    UniValue outputs = params[1].get_array();\n+    UniValue outputs = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n         const UniValue& output = outputs[idx];\n         if (!output.isObject())\n@@ -2187,12 +2187,12 @@ UniValue lockunspent(const UniValue& params, bool fHelp)\n     return true;\n }\n \n-UniValue listlockunspent(const UniValue& params, bool fHelp)\n+UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 0)\n+    if (request.fHelp || request.params.size() > 0)\n         throw runtime_error(\n             \"listlockunspent\\n\"\n             \"\\nReturns list of temporarily unspendable outputs.\\n\"\n@@ -2236,12 +2236,12 @@ UniValue listlockunspent(const UniValue& params, bool fHelp)\n     return ret;\n }\n \n-UniValue settxfee(const UniValue& params, bool fHelp)\n+UniValue settxfee(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n         throw runtime_error(\n             \"settxfee amount\\n\"\n             \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n@@ -2257,18 +2257,18 @@ UniValue settxfee(const UniValue& params, bool fHelp)\n     LOCK2(cs_main, pwalletMain->cs_wallet);\n \n     // Amount\n-    CAmount nAmount = AmountFromValue(params[0]);\n+    CAmount nAmount = AmountFromValue(request.params[0]);\n \n     payTxFee = CFeeRate(nAmount, 1000);\n     return true;\n }\n \n-UniValue getwalletinfo(const UniValue& params, bool fHelp)\n+UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getwalletinfo\\n\"\n             \"Returns an object containing various wallet state info.\\n\"\n@@ -2309,12 +2309,12 @@ UniValue getwalletinfo(const UniValue& params, bool fHelp)\n     return obj;\n }\n \n-UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n+UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() != 0)\n+    if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"resendwallettransactions\\n\"\n             \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n@@ -2337,12 +2337,12 @@ UniValue resendwallettransactions(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-UniValue listunspent(const UniValue& params, bool fHelp)\n+UniValue listunspent(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() > 3)\n+    if (request.fHelp || request.params.size() > 3)\n         throw runtime_error(\n             \"listunspent ( minconf maxconf  [\\\"address\\\",...] )\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n@@ -2379,19 +2379,19 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n             + HelpExampleRpc(\"listunspent\", \"6, 9999999 \\\"[\\\\\\\"1PGFqEzfmQch1gKD3ra4k18PNj3tTUUSqg\\\\\\\",\\\\\\\"1LtvqCaApEdUGFkpKMM4MstjcaL4dKg8SP\\\\\\\"]\\\"\")\n         );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VNUM)(UniValue::VNUM)(UniValue::VARR));\n \n     int nMinDepth = 1;\n-    if (params.size() > 0)\n-        nMinDepth = params[0].get_int();\n+    if (request.params.size() > 0)\n+        nMinDepth = request.params[0].get_int();\n \n     int nMaxDepth = 9999999;\n-    if (params.size() > 1)\n-        nMaxDepth = params[1].get_int();\n+    if (request.params.size() > 1)\n+        nMaxDepth = request.params[1].get_int();\n \n     set<CBitcoinAddress> setAddress;\n-    if (params.size() > 2) {\n-        UniValue inputs = params[2].get_array();\n+    if (request.params.size() > 2) {\n+        UniValue inputs = request.params[2].get_array();\n         for (unsigned int idx = 0; idx < inputs.size(); idx++) {\n             const UniValue& input = inputs[idx];\n             CBitcoinAddress address(input.get_str());\n@@ -2448,12 +2448,12 @@ UniValue listunspent(const UniValue& params, bool fHelp)\n     return results;\n }\n \n-UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n+UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    if (!EnsureWalletIsAvailable(fHelp))\n+    if (!EnsureWalletIsAvailable(request.fHelp))\n         return NullUniValue;\n \n-    if (fHelp || params.size() < 1 || params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n@@ -2494,7 +2494,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n                             + HelpExampleCli(\"sendrawtransaction\", \"\\\"signedtransactionhex\\\"\")\n                             );\n \n-    RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR));\n+    RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR));\n \n     CTxDestination changeAddress = CNoDestination();\n     int changePosition = -1;\n@@ -2503,15 +2503,15 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     CFeeRate feeRate = CFeeRate(0);\n     bool overrideEstimatedFeerate = false;\n \n-    if (params.size() > 1) {\n-      if (params[1].type() == UniValue::VBOOL) {\n+    if (request.params.size() > 1) {\n+      if (request.params[1].type() == UniValue::VBOOL) {\n         // backward compatibility bool only fallback\n-        includeWatching = params[1].get_bool();\n+        includeWatching = request.params[1].get_bool();\n       }\n       else {\n-        RPCTypeCheck(params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n+        RPCTypeCheck(request.params, boost::assign::list_of(UniValue::VSTR)(UniValue::VOBJ));\n \n-        UniValue options = params[1];\n+        UniValue options = request.params[1];\n \n         RPCTypeCheckObj(options,\n             {\n@@ -2551,7 +2551,7 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n \n     // parse hex string from parameter\n     CTransaction origTx;\n-    if (!DecodeHexTx(origTx, params[0].get_str(), true))\n+    if (!DecodeHexTx(origTx, request.params[0].get_str(), true))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n \n     if (origTx.vout.size() == 0)\n@@ -2575,14 +2575,14 @@ UniValue fundrawtransaction(const UniValue& params, bool fHelp)\n     return result;\n }\n \n-extern UniValue dumpprivkey(const UniValue& params, bool fHelp); // in rpcdump.cpp\n-extern UniValue importprivkey(const UniValue& params, bool fHelp);\n-extern UniValue importaddress(const UniValue& params, bool fHelp);\n-extern UniValue importpubkey(const UniValue& params, bool fHelp);\n-extern UniValue dumpwallet(const UniValue& params, bool fHelp);\n-extern UniValue importwallet(const UniValue& params, bool fHelp);\n-extern UniValue importprunedfunds(const UniValue& params, bool fHelp);\n-extern UniValue removeprunedfunds(const UniValue& params, bool fHelp);\n+extern UniValue dumpprivkey(const JSONRPCRequest& request); // in rpcdump.cpp\n+extern UniValue importprivkey(const JSONRPCRequest& request);\n+extern UniValue importaddress(const JSONRPCRequest& request);\n+extern UniValue importpubkey(const JSONRPCRequest& request);\n+extern UniValue dumpwallet(const JSONRPCRequest& request);\n+extern UniValue importwallet(const JSONRPCRequest& request);\n+extern UniValue importprunedfunds(const JSONRPCRequest& request);\n+extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode"
      }
    ]
  },
  {
    "sha": "cb08fdbf78685b55029768524ca867772711c32b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjA4ZmRiZjc4Njg1YjU1MDI5NzY4NTI0Y2E4Njc3NzI3MTFjMzJi",
    "commit": {
      "author": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2016-06-16T14:57:48Z"
      },
      "committer": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2016-10-19T14:17:13Z"
      },
      "message": "Add importmulti rpc call",
      "tree": {
        "sha": "c41c0169a7a428f93527eb715ec2ae9de2df7e70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c41c0169a7a428f93527eb715ec2ae9de2df7e70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb08fdbf78685b55029768524ca867772711c32b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb08fdbf78685b55029768524ca867772711c32b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb08fdbf78685b55029768524ca867772711c32b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb08fdbf78685b55029768524ca867772711c32b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97c7f7362f9b59247753d6e8fa8022a6205f9c09"
      }
    ],
    "stats": {
      "total": 698,
      "additions": 698,
      "deletions": 0
    },
    "files": [
      {
        "sha": "778f8d8a77818e9a60cc2df8026458861d16359d",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb08fdbf78685b55029768524ca867772711c32b/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb08fdbf78685b55029768524ca867772711c32b/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=cb08fdbf78685b55029768524ca867772711c32b",
        "patch": "@@ -145,6 +145,7 @@\n     'signmessages.py',\n     'p2p-compactblocks.py',\n     'nulldummy.py',\n+    'importmulti.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "960cb63d768c5a8a8b1c2c87c4f0c0069610247c",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "added",
        "additions": 293,
        "deletions": 0,
        "changes": 293,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb08fdbf78685b55029768524ca867772711c32b/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb08fdbf78685b55029768524ca867772711c32b/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=cb08fdbf78685b55029768524ca867772711c32b",
        "patch": "@@ -0,0 +1,293 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.is_network_split=False\n+\n+    def run_test (self):\n+        print (\"Mining blocks...\")\n+        self.nodes[0].generate(1)\n+        self.nodes[1].generate(1)\n+\n+        # keyword definition\n+        PRIV_KEY = 'privkey'\n+        PUB_KEY = 'pubkey'\n+        ADDRESS_KEY = 'address'\n+        SCRIPT_KEY = 'script'\n+\n+\n+        node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+\n+        #Check only one address\n+        assert_equal(node0_address1['ismine'], True)\n+\n+        #Node 1 sync test\n+        assert_equal(self.nodes[1].getblockcount(),1)\n+\n+        #Address Test - before import\n+        address_info = self.nodes[1].validateaddress(node0_address1['address'])\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+\n+        # RPC importmulti -----------------------------------------------\n+\n+        # Bitcoin Address\n+        print(\"Should import an address\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            }\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + internal\n+        print(\"Should import a scriptPubKey with internal flag\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"internal\": True\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # ScriptPubKey + !internal\n+        print(\"Should not import a scriptPubKey without internal flag\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey']\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # Address + Public key + !Internal\n+        print(\"Should import an address with public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + Public key + internal\n+        print(\"Should import a scriptPubKey with internal and with public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        request = [{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"pubkeys\": [ address['pubkey'] ],\n+            \"internal\": True\n+        }];\n+        result = self.nodes[1].importmulti(request)\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # ScriptPubKey + Public key + !internal\n+        print(\"Should not import a scriptPubKey without internal and with public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        request = [{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }];\n+        result = self.nodes[1].importmulti(request)\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # Address + Private key + !watchonly\n+        print(\"Should import an address with private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # Address + Private key + watchonly\n+        print(\"Should not import an address with private key and with watchonly\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n+            \"watchonly\": True\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # ScriptPubKey + Private key + internal\n+        print(\"Should import a scriptPubKey with internal and with private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n+            \"internal\": True\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # ScriptPubKey + Private key + !internal\n+        print(\"Should not import a scriptPubKey without internal and with private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # P2SH address\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            }\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['isscript'], True)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n+        assert_equal(p2shunspent['spendable'], False)\n+        assert_equal(p2shunspent['solvable'], False)\n+\n+\n+        # P2SH + Redeem script\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh with respective redeem script\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"redeemscript\": multi_sig_script['redeemScript']\n+        }])\n+        assert_equal(result[0]['success'], True)\n+\n+        p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n+        assert_equal(p2shunspent['spendable'], False)\n+        assert_equal(p2shunspent['solvable'], True)\n+\n+\n+        # P2SH + Redeem script + Private Keys + !Watchonly\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"redeemscript\": multi_sig_script['redeemScript'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+\n+        p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n+        assert_equal(p2shunspent['spendable'], False)\n+        assert_equal(p2shunspent['solvable'], True)\n+\n+        # P2SH + Redeem script + Private Keys + Watchonly\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"redeemscript\": multi_sig_script['redeemScript'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n+            \"watchonly\": True\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n+\n+        # TODO Consistency tests?\n+\n+\n+\n+if __name__ == '__main__':\n+    ImportMultiTest ().main ()"
      },
      {
        "sha": "1e611906d146fb4fdb375275996d442bdac07c0b",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb08fdbf78685b55029768524ca867772711c32b/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb08fdbf78685b55029768524ca867772711c32b/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=cb08fdbf78685b55029768524ca867772711c32b",
        "patch": "@@ -61,6 +61,13 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n+CBlockIndex* CChain::FindLatestBefore(int64_t nTime) const\n+{\n+    std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n+        [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTime() < time; });\n+    return (lower == vChain.end() ? NULL : *lower);\n+}\n+\n /** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n int static inline InvertLowestOne(int n) { return n & (n - 1); }\n "
      },
      {
        "sha": "46a16a30617f411eb70e9c1cd707ba5ee116feec",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb08fdbf78685b55029768524ca867772711c32b/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb08fdbf78685b55029768524ca867772711c32b/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=cb08fdbf78685b55029768524ca867772711c32b",
        "patch": "@@ -459,6 +459,9 @@ class CChain {\n \n     /** Find the last common block between this chain and a block index entry. */\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n+\n+    /** Find the most recent block with timestamp lower than the given. */\n+    CBlockIndex* FindLatestBefore(int64_t nTime) const;\n };\n \n #endif // BITCOIN_CHAIN_H"
      },
      {
        "sha": "8370a0f43effbc37763c5593a3f2d52fde6933e6",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb08fdbf78685b55029768524ca867772711c32b/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb08fdbf78685b55029768524ca867772711c32b/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=cb08fdbf78685b55029768524ca867772711c32b",
        "patch": "@@ -95,6 +95,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importaddress\", 2 },\n     { \"importaddress\", 3 },\n     { \"importpubkey\", 2 },\n+    { \"importmulti\", 0 },\n+    { \"importmulti\", 1 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "0297337c2a3997e96b598025ddf5654b6b9f03a6",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 390,
        "deletions": 0,
        "changes": 390,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb08fdbf78685b55029768524ca867772711c32b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb08fdbf78685b55029768524ca867772711c32b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=cb08fdbf78685b55029768524ca867772711c32b",
        "patch": "@@ -24,6 +24,7 @@\n \n #include <univalue.h>\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n using namespace std;\n@@ -637,3 +638,392 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue processImport(const UniValue& data) {\n+    // TODO List:\n+    // - Check consistency between pubkeys/privkeys and scriptPubKey/redeemScript.\n+\n+    try {\n+        bool success = false;\n+\n+        // Required fields.\n+        const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+\n+        // Should have script or JSON with \"address\".\n+        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n+        }\n+\n+        // Optional fields.\n+        const string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+        const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n+        const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+        const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+        const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n+        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n+\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        bool isP2SH = strRedeemScript.length() > 0;\n+        const string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+        // Parse the output.\n+        CScript script;\n+        CBitcoinAddress address;\n+\n+        if (!isScript) {\n+            address = CBitcoinAddress(output);\n+            script = GetScriptForDestination(address.Get());\n+        } else {\n+            if (!IsHex(output)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n+            }\n+\n+            std::vector<unsigned char> vData(ParseHex(output));\n+            script = CScript(vData.begin(), vData.end());\n+        }\n+\n+        // Watchonly and private keys\n+        if (watchOnly && keys.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n+        }\n+\n+        // Internal + Label\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n+        }\n+\n+        // Not having Internal + Script\n+        if (!internal && isScript) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set for hex scriptPubKey\");\n+        }\n+\n+        // Keys / PubKeys size check.\n+        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+        }\n+\n+        // Invalid P2SH redeemScript\n+        if (isP2SH && !IsHex(strRedeemScript)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        }\n+\n+        // Process. //\n+\n+        // P2SH\n+        if (isP2SH) {\n+            // TODO: check consistency between private keys and p2sh redeemscript + p2sh address\n+\n+            // Import redeem script.\n+            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n+            CScript redeemScript = CScript(vData.begin(), vData.end());\n+\n+            // Invalid P2SH address\n+            if (!script.IsPayToScriptHash()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid P2SH address / script\");\n+            }\n+\n+            pwalletMain->MarkDirty();\n+\n+            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n+\n+            if (!pwalletMain->HaveCScript(redeemScript) && !pwalletMain->AddCScript(redeemScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+            }\n+\n+            CBitcoinAddress redeemAddress = CBitcoinAddress(CScriptID(redeemScript));\n+            CScript redeemDestination = GetScriptForDestination(redeemAddress.Get());\n+\n+            if (::IsMine(*pwalletMain, redeemDestination) == ISMINE_SPENDABLE) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+            }\n+\n+            pwalletMain->MarkDirty();\n+\n+            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n+\n+            // add to address book or update label\n+            if (address.IsValid()) {\n+                pwalletMain->SetAddressBook(address.Get(), label, \"receive\");\n+            }\n+\n+            // Import private keys.\n+            if (keys.size()) {\n+                for (size_t i = 0; i < keys.size(); i++) {\n+                    const string& privkey = keys[i].get_str();\n+\n+                    CBitcoinSecret vchSecret;\n+                    bool fGood = vchSecret.SetString(privkey);\n+\n+                    if (!fGood) {\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+                    }\n+\n+                    CKey key = vchSecret.GetKey();\n+\n+                    if (!key.IsValid()) {\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                    }\n+\n+                    CPubKey pubkey = key.GetPubKey();\n+                    assert(key.VerifyPubKey(pubkey));\n+\n+                    CKeyID vchAddress = pubkey.GetID();\n+                    pwalletMain->MarkDirty();\n+                    pwalletMain->SetAddressBook(vchAddress, label, \"receive\");\n+\n+                    if (pwalletMain->HaveKey(vchAddress)) {\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n+                    }\n+\n+                    pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+\n+                    if (!pwalletMain->AddKeyPubKey(key, pubkey)) {\n+                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+                    }\n+\n+                    if (timestamp < pwalletMain->nTimeFirstKey) {\n+                        pwalletMain->nTimeFirstKey = timestamp;\n+                    }\n+                }\n+            }\n+\n+            success = true;\n+        } else {\n+            // TODO: check consistency between private/public keys and scriptPubKey / address\n+\n+            // Import public keys.\n+            if (pubKeys.size() && keys.size() == 0) {\n+                const string& strPubKey = pubKeys[0].get_str();\n+\n+                if (!IsHex(strPubKey)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                }\n+\n+                std::vector<unsigned char> data(ParseHex(strPubKey));\n+                CPubKey pubKey(data.begin(), data.end());\n+\n+                if (!pubKey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                }\n+\n+                CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n+                CScript pubKeyScript = GetScriptForDestination(pubKeyAddress.Get());\n+\n+                if (::IsMine(*pwalletMain, pubKeyScript) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwalletMain->MarkDirty();\n+\n+                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+\n+                // add to address book or update label\n+                if (pubKeyAddress.IsValid()) {\n+                    pwalletMain->SetAddressBook(pubKeyAddress.Get(), label, \"receive\");\n+                }\n+\n+                // TODO Is this necessary?\n+                CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n+\n+                if (::IsMine(*pwalletMain, scriptRawPubKey) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwalletMain->MarkDirty();\n+\n+                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+\n+                success = true;\n+            }\n+\n+            // Import private keys.\n+            if (keys.size()) {\n+                const string& strPrivkey = keys[0].get_str();\n+\n+                // Checks.\n+                CBitcoinSecret vchSecret;\n+                bool fGood = vchSecret.SetString(strPrivkey);\n+\n+                if (!fGood) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+                }\n+\n+                CKey key = vchSecret.GetKey();\n+                if (!key.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                }\n+\n+                CPubKey pubKey = key.GetPubKey();\n+                assert(key.VerifyPubKey(pubKey));\n+\n+                CKeyID vchAddress = pubkey.GetID();\n+                pwalletMain->MarkDirty();\n+                pwalletMain->SetAddressBook(vchAddress, label, \"receive\");\n+\n+                if (pwalletMain->HaveKey(vchAddress)) {\n+                    return false;\n+                }\n+\n+                pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+\n+                if (!pwalletMain->AddKeyPubKey(key, pubKey)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+                }\n+\n+                if (timestamp < pwalletMain->nTimeFirstKey) {\n+                    pwalletMain->nTimeFirstKey = timestamp;\n+                }\n+\n+                success = true;\n+            }\n+\n+            // Import scriptPubKey only.\n+            if (pubKeys.size() == 0 && keys.size() == 0) {\n+                if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwalletMain->MarkDirty();\n+\n+                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+\n+                if (scriptPubKey.getType() == UniValue::VOBJ) {\n+                    // add to address book or update label\n+                    if (address.IsValid()) {\n+                        pwalletMain->SetAddressBook(address.Get(), label, \"receive\");\n+                    }\n+                }\n+\n+                success = true;\n+            }\n+        }\n+\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        result.pushKV(\"success\", UniValue(success));\n+        return result;\n+    } catch (const UniValue& e) {\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+        return result;\n+    } catch (...) {\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+        return result;\n+    }\n+}\n+\n+UniValue importmulti(const JSONRPCRequest& mainRequest)\n+{\n+    // clang-format off\n+    if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[<json import requests>]' '<json options>' \\n\\n\"\n+            \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).\\n\\n\"\n+            \"Arguments:\\n\"\n+            \"1. request array     (array, required) Data to be imported\\n\"\n+            \"  [     (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n+            \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n+            \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n+            \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n+            \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. json options                 (json, optional)\\n\"\n+            \"  {\\n\"\n+            \"     \\\"rescan\\\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\\n\"\n+            \"  }\\n\"\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n+                                          \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]\\n\");\n+\n+    // clang-format on\n+    if (!EnsureWalletIsAvailable(mainRequest.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCTypeCheck(mainRequest.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n+\n+    const UniValue& requests = mainRequest.params[0];\n+\n+    //Default options\n+    bool fRescan = true;\n+\n+    if (mainRequest.params.size() > 1) {\n+        const UniValue& options = mainRequest.params[1];\n+\n+        if (options.exists(\"rescan\")) {\n+            fRescan = options[\"rescan\"].get_bool();\n+        }\n+    }\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+\n+    bool fRunScan = false;\n+    const int64_t minimumTimestamp = 1;\n+    int64_t nLowestTimestamp;\n+\n+    if (fRescan && chainActive.Tip()) {\n+        nLowestTimestamp = chainActive.Tip()->GetBlockTime();\n+    } else {\n+        fRescan = false;\n+    }\n+\n+    UniValue response(UniValue::VARR);\n+\n+    BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n+        const UniValue result = processImport(data);\n+        response.push_back(result);\n+\n+        if (!fRescan) {\n+            continue;\n+        }\n+\n+        // If at least one request was successful then allow rescan.\n+        if (result[\"success\"].get_bool()) {\n+            fRunScan = true;\n+        }\n+\n+        // Get the lowest timestamp.\n+        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n+\n+        if (timestamp < nLowestTimestamp) {\n+            nLowestTimestamp = timestamp;\n+        }\n+    }\n+\n+    if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTime()) {\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindLatestBefore(nLowestTimestamp) : chainActive.Genesis();\n+\n+        if (pindex) {\n+            pwalletMain->ScanForWalletTransactions(pindex, true);\n+            pwalletMain->ReacceptWalletTransactions();\n+        }\n+    }\n+\n+    return response;\n+}"
      },
      {
        "sha": "ab7e74988a00fd1b0fb36c2e3ec4dc065f27261a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb08fdbf78685b55029768524ca867772711c32b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb08fdbf78685b55029768524ca867772711c32b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=cb08fdbf78685b55029768524ca867772711c32b",
        "patch": "@@ -2583,6 +2583,7 @@ extern UniValue dumpwallet(const JSONRPCRequest& request);\n extern UniValue importwallet(const JSONRPCRequest& request);\n extern UniValue importprunedfunds(const JSONRPCRequest& request);\n extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n+extern UniValue importmulti(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n@@ -2607,6 +2608,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"gettransaction\",           &gettransaction,           false },\n     { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false },\n     { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false },\n+    { \"wallet\",             \"importmulti\",              &importmulti,              true  },\n     { \"wallet\",             \"importprivkey\",            &importprivkey,            true  },\n     { \"wallet\",             \"importwallet\",             &importwallet,             true  },\n     { \"wallet\",             \"importaddress\",            &importaddress,            true  },"
      }
    ]
  },
  {
    "sha": "999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTllNGM5MWMyY2Q5M2Y0Y2Q4NzYwYjM1NzI3ODBjOWQ1NjhmMmYw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-18T06:23:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T14:17:33Z"
      },
      "message": "wallet: Change CCrypter to use vectors with secure allocator\n\nChange CCrypter to use vectors with secure allocator instead of buffers\non in the object itself which will end up on the stack. This avoids\nhaving to call LockedPageManager to lock stack memory pages to prevent the\nmemory from being swapped to disk. This is wasteful.",
      "tree": {
        "sha": "6a7abfb39a4a697f84fa63ed600a60c1e5079618",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a7abfb39a4a697f84fa63ed600a60c1e5079618"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999e4c91c2cd93f4cd8760b3572780c9d568f2f0/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97c7f7362f9b59247753d6e8fa8022a6205f9c09"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 19,
      "deletions": 26
    },
    "files": [
      {
        "sha": "31ee060677104bbc231018354a82277ae5c834ea",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e4c91c2cd93f4cd8760b3572780c9d568f2f0/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e4c91c2cd93f4cd8760b3572780c9d568f2f0/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
        "patch": "@@ -48,12 +48,12 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     int i = 0;\n     if (nDerivationMethod == 0)\n-        i = BytesToKeySHA512AES(chSalt, strKeyData, nRounds, chKey, chIV);\n+        i = BytesToKeySHA512AES(chSalt, strKeyData, nRounds, vchKey.data(), vchIV.data());\n \n     if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {\n-        memory_cleanse(chKey, sizeof(chKey));\n-        memory_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(vchKey.data(), vchKey.size());\n+        memory_cleanse(vchIV.data(), vchIV.size());\n         return false;\n     }\n \n@@ -66,8 +66,8 @@ bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigne\n     if (chNewKey.size() != WALLET_CRYPTO_KEY_SIZE || chNewIV.size() != WALLET_CRYPTO_IV_SIZE)\n         return false;\n \n-    memcpy(&chKey[0], &chNewKey[0], sizeof chKey);\n-    memcpy(&chIV[0], &chNewIV[0], sizeof chIV);\n+    memcpy(vchKey.data(), chNewKey.data(), chNewKey.size());\n+    memcpy(vchIV.data(), chNewIV.data(), chNewIV.size());\n \n     fKeySet = true;\n     return true;\n@@ -82,7 +82,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     // n + AES_BLOCKSIZE bytes\n     vchCiphertext.resize(vchPlaintext.size() + AES_BLOCKSIZE);\n \n-    AES256CBCEncrypt enc(chKey, chIV, true);\n+    AES256CBCEncrypt enc(vchKey.data(), vchIV.data(), true);\n     size_t nLen = enc.Encrypt(&vchPlaintext[0], vchPlaintext.size(), &vchCiphertext[0]);\n     if(nLen < vchPlaintext.size())\n         return false;\n@@ -101,7 +101,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n \n     vchPlaintext.resize(nLen);\n \n-    AES256CBCDecrypt dec(chKey, chIV, true);\n+    AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n     nLen = dec.Decrypt(&vchCiphertext[0], vchCiphertext.size(), &vchPlaintext[0]);\n     if(nLen == 0)\n         return false;"
      },
      {
        "sha": "f00f7fa7315b1c4808619bc6c5a54aa77021d9bf",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e4c91c2cd93f4cd8760b3572780c9d568f2f0/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e4c91c2cd93f4cd8760b3572780c9d568f2f0/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
        "patch": "@@ -77,8 +77,8 @@ class CCrypter\n {\n friend class wallet_crypto::TestCrypter; // for test access to chKey/chIV\n private:\n-    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];\n-    unsigned char chIV[WALLET_CRYPTO_IV_SIZE];\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vchKey;\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vchIV;\n     bool fKeySet;\n \n     int BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const;\n@@ -91,28 +91,21 @@ friend class wallet_crypto::TestCrypter; // for test access to chKey/chIV\n \n     void CleanKey()\n     {\n-        memory_cleanse(chKey, sizeof(chKey));\n-        memory_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(vchKey.data(), vchKey.size());\n+        memory_cleanse(vchIV.data(), vchIV.size());\n         fKeySet = false;\n     }\n \n     CCrypter()\n     {\n         fKeySet = false;\n-\n-        // Try to keep the key data out of swap (and be a bit over-careful to keep the IV that we don't even use out of swap)\n-        // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n-        // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.\n-        LockedPageManager::Instance().LockRange(&chKey[0], sizeof chKey);\n-        LockedPageManager::Instance().LockRange(&chIV[0], sizeof chIV);\n+        vchKey.resize(WALLET_CRYPTO_KEY_SIZE);\n+        vchIV.resize(WALLET_CRYPTO_IV_SIZE);\n     }\n \n     ~CCrypter()\n     {\n         CleanKey();\n-\n-        LockedPageManager::Instance().UnlockRange(&chKey[0], sizeof chKey);\n-        LockedPageManager::Instance().UnlockRange(&chIV[0], sizeof chIV);\n     }\n };\n "
      },
      {
        "sha": "ce35c53c48737b7461fceab32144dbccf4540b82",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999e4c91c2cd93f4cd8760b3572780c9d568f2f0/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999e4c91c2cd93f4cd8760b3572780c9d568f2f0/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
        "patch": "@@ -97,10 +97,10 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n \n     OldSetKeyFromPassphrase(passphrase, vchSalt, rounds, 0, chKey, chIV);\n \n-    BOOST_CHECK_MESSAGE(memcmp(chKey, crypt.chKey, sizeof(chKey)) == 0, \\\n-        HexStr(chKey, chKey+sizeof(chKey)) + std::string(\" != \") + HexStr(crypt.chKey, crypt.chKey + (sizeof crypt.chKey)));\n-    BOOST_CHECK_MESSAGE(memcmp(chIV, crypt.chIV, sizeof(chIV)) == 0, \\\n-        HexStr(chIV, chIV+sizeof(chIV)) + std::string(\" != \") + HexStr(crypt.chIV, crypt.chIV + (sizeof crypt.chIV)));\n+    BOOST_CHECK_MESSAGE(memcmp(chKey, crypt.vchKey.data(), crypt.vchKey.size()) == 0, \\\n+        HexStr(chKey, chKey+sizeof(chKey)) + std::string(\" != \") + HexStr(crypt.vchKey));\n+    BOOST_CHECK_MESSAGE(memcmp(chIV, crypt.vchIV.data(), crypt.vchIV.size()) == 0, \\\n+        HexStr(chIV, chIV+sizeof(chIV)) + std::string(\" != \") + HexStr(crypt.vchIV));\n \n     if(!correctKey.empty())\n         BOOST_CHECK_MESSAGE(memcmp(chKey, &correctKey[0], sizeof(chKey)) == 0, \\\n@@ -127,7 +127,7 @@ static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>&\n     CKeyingMaterial vchDecrypted2;\n     int result1, result2;\n     result1 = crypt.Decrypt(vchCiphertext, vchDecrypted1);\n-    result2 = OldDecrypt(vchCiphertext, vchDecrypted2, crypt.chKey, crypt.chIV);\n+    result2 = OldDecrypt(vchCiphertext, vchDecrypted2, crypt.vchKey.data(), crypt.vchIV.data());\n     BOOST_CHECK(result1 == result2);\n \n     // These two should be equal. However, OpenSSL 1.0.1j introduced a change\n@@ -152,7 +152,7 @@ static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchP\n     std::vector<unsigned char> vchCiphertext2;\n     int result1 = crypt.Encrypt(vchPlaintext, vchCiphertext1);\n \n-    int result2 = OldEncrypt(vchPlaintext, vchCiphertext2, crypt.chKey, crypt.chIV);\n+    int result2 = OldEncrypt(vchPlaintext, vchCiphertext2, crypt.vchKey.data(), crypt.vchIV.data());\n     BOOST_CHECK(result1 == result2);\n     BOOST_CHECK(vchCiphertext1 == vchCiphertext2);\n "
      }
    ]
  },
  {
    "sha": "f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNGQxZmMyNTliNWE2MjU4MGQ5NTJjMTgwYjExODljY2FhNmFmMWJj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-18T06:40:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T14:17:33Z"
      },
      "message": "wallet: Get rid of LockObject and UnlockObject calls in key.h\n\nReplace these with vectors allocated from the secure allocator.\n\nThis avoids mlock syscall churn on stack pages, as well as makes\nit possible to get rid of these functions.\n\nPlease review this commit and the previous one carefully that\nno `sizeof(vectortype)` remains in the memcpys and memcmps usage\n(ick!), and `.data()` or `&vec[x]` is used as appropriate instead of\n&vec.",
      "tree": {
        "sha": "38a7786c54effd74d44d04e0394eccc987fca24a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38a7786c54effd74d44d04e0394eccc987fca24a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999e4c91c2cd93f4cd8760b3572780c9d568f2f0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999e4c91c2cd93f4cd8760b3572780c9d568f2f0"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 23,
      "deletions": 55
    },
    "files": [
      {
        "sha": "b3ea98fb92e6dfad91f148a5c5ec5095713d26ca",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
        "patch": "@@ -125,8 +125,8 @@ bool CKey::Check(const unsigned char *vch) {\n \n void CKey::MakeNewKey(bool fCompressedIn) {\n     do {\n-        GetStrongRandBytes(vch, sizeof(vch));\n-    } while (!Check(vch));\n+        GetStrongRandBytes(keydata.data(), keydata.size());\n+    } while (!Check(keydata.data()));\n     fValid = true;\n     fCompressed = fCompressedIn;\n }\n@@ -224,20 +224,18 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert(IsCompressed());\n-    unsigned char out[64];\n-    LockObject(out);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n         assert(pubkey.begin() + 33 == pubkey.end());\n-        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, out);\n+        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n         assert(begin() + 32 == end());\n-        BIP32Hash(cc, nChild, 0, begin(), out);\n+        BIP32Hash(cc, nChild, 0, begin(), vout.data());\n     }\n-    memcpy(ccChild.begin(), out+32, 32);\n+    memcpy(ccChild.begin(), vout.data()+32, 32);\n     memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n-    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), out);\n-    UnlockObject(out);\n+    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), vout.data());\n     keyChild.fCompressed = true;\n     keyChild.fValid = ret;\n     return ret;\n@@ -253,12 +251,10 @@ bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n \n void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n-    unsigned char out[64];\n-    LockObject(out);\n-    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(out);\n-    key.Set(&out[0], &out[32], true);\n-    memcpy(chaincode.begin(), &out[32], 32);\n-    UnlockObject(out);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n+    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());\n+    key.Set(&vout[0], &vout[32], true);\n+    memcpy(chaincode.begin(), &vout[32], 32);\n     nDepth = 0;\n     nChild = 0;\n     memset(vchFingerprint, 0, sizeof(vchFingerprint));\n@@ -308,12 +304,10 @@ void ECC_Start() {\n \n     {\n         // Pass in a random blinding seed to the secp256k1 context.\n-        unsigned char seed[32];\n-        LockObject(seed);\n-        GetRandBytes(seed, 32);\n-        bool ret = secp256k1_context_randomize(ctx, seed);\n+        std::vector<unsigned char, secure_allocator<unsigned char>> vseed(32);\n+        GetRandBytes(vseed.data(), 32);\n+        bool ret = secp256k1_context_randomize(ctx, vseed.data());\n         assert(ret);\n-        UnlockObject(seed);\n     }\n \n     secp256k1_context_sign = ctx;"
      },
      {
        "sha": "48a07d62c9ccd170f1d0be81fd1c8bf4cd320a28",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 9,
        "deletions": 18,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
        "patch": "@@ -43,9 +43,7 @@ class CKey\n     bool fCompressed;\n \n     //! The actual byte data\n-    unsigned char vch[32];\n-\n-    static_assert(sizeof(vch) == 32, \"vch must be 32 bytes in length to not break serialization\");\n+    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n \n     //! Check whether the 32-byte array pointed to be vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n@@ -54,37 +52,30 @@ class CKey\n     //! Construct an invalid private key.\n     CKey() : fValid(false), fCompressed(false)\n     {\n-        LockObject(vch);\n-    }\n-\n-    //! Copy constructor. This is necessary because of memlocking.\n-    CKey(const CKey& secret) : fValid(secret.fValid), fCompressed(secret.fCompressed)\n-    {\n-        LockObject(vch);\n-        memcpy(vch, secret.vch, sizeof(vch));\n+        // Important: vch must be 32 bytes in length to not break serialization\n+        keydata.resize(32);\n     }\n \n     //! Destructor (again necessary because of memlocking).\n     ~CKey()\n     {\n-        UnlockObject(vch);\n     }\n \n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&\n             a.size() == b.size() &&\n-            memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n+            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (pend - pbegin != sizeof(vch)) {\n+        if (size_t(pend - pbegin) != keydata.size()) {\n             fValid = false;\n         } else if (Check(&pbegin[0])) {\n-            memcpy(vch, (unsigned char*)&pbegin[0], sizeof(vch));\n+            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n             fValid = true;\n             fCompressed = fCompressedIn;\n         } else {\n@@ -93,9 +84,9 @@ class CKey\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? sizeof(vch) : 0); }\n-    const unsigned char* begin() const { return vch; }\n-    const unsigned char* end() const { return vch + size(); }\n+    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n+    const unsigned char* begin() const { return keydata.data(); }\n+    const unsigned char* end() const { return keydata.data() + size(); }\n \n     //! Check whether this private key is valid.\n     bool IsValid() const { return fValid; }"
      },
      {
        "sha": "042144fad5614e976e06d93a10950be5eb10e13e",
        "filename": "src/support/pagelocker.h",
        "status": "modified",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
        "patch": "@@ -157,21 +157,4 @@ class LockedPageManager : public LockedPageManagerBase<MemoryPageLocker>\n     static boost::once_flag init_flag;\n };\n \n-//\n-// Functions for directly locking/unlocking memory objects.\n-// Intended for non-dynamically allocated structures.\n-//\n-template <typename T>\n-void LockObject(const T& t)\n-{\n-    LockedPageManager::Instance().LockRange((void*)(&t), sizeof(T));\n-}\n-\n-template <typename T>\n-void UnlockObject(const T& t)\n-{\n-    memory_cleanse((void*)(&t), sizeof(T));\n-    LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n-}\n-\n #endif // BITCOIN_SUPPORT_PAGELOCKER_H"
      }
    ]
  },
  {
    "sha": "215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTVjYWJhNGVkNDU0N2Q2ZjJhMDk1NGZhOWZlMWFlNzhmNGE3YzQw",
    "commit": {
      "author": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2016-10-19T14:17:42Z"
      },
      "committer": {
        "name": "Pedro Branco",
        "email": "branco@uphold.com",
        "date": "2016-10-19T14:17:42Z"
      },
      "message": "Add consistency check to RPC call importmulti",
      "tree": {
        "sha": "da88271ec1e64d3307c04522c87632791f14a5fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da88271ec1e64d3307c04522c87632791f14a5fb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "cb08fdbf78685b55029768524ca867772711c32b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb08fdbf78685b55029768524ca867772711c32b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb08fdbf78685b55029768524ca867772711c32b"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 108,
      "deletions": 9
    },
    "files": [
      {
        "sha": "5c536f2f4952860259ea72642dd6a3870ad32eb4",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "modified",
        "additions": 68,
        "deletions": 1,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
        "patch": "@@ -285,9 +285,76 @@ def run_test (self):\n         assert_equal(result[0]['error']['code'], -8)\n         assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n \n-        # TODO Consistency tests?\n \n+        # Address + Public key + !Internal + Wrong pubkey\n+        print(\"Should not import an address with a wrong public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"pubkeys\": [ address2['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + Public key + internal + Wrong pubkey\n+        print(\"Should not import a scriptPubKey with internal and with a wrong public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        request = [{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"pubkeys\": [ address2['pubkey'] ],\n+            \"internal\": True\n+        }];\n+        result = self.nodes[1].importmulti(request)\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n \n \n+        # Address + Private key + !watchonly + Wrong private key\n+        print(\"Should not import an address with a wrong private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + Private key + internal + Wrong private key\n+        print(\"Should not import a scriptPubKey with internal and with a wrong private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n+            \"internal\": True\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n if __name__ == '__main__':\n     ImportMultiTest ().main ()"
      },
      {
        "sha": "7b16b4adfb32481d438757acf870b27cd9ec3cfa",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 8,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
        "patch": "@@ -641,9 +641,6 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n \n \n UniValue processImport(const UniValue& data) {\n-    // TODO List:\n-    // - Check consistency between pubkeys/privkeys and scriptPubKey/redeemScript.\n-\n     try {\n         bool success = false;\n \n@@ -713,8 +710,6 @@ UniValue processImport(const UniValue& data) {\n \n         // P2SH\n         if (isP2SH) {\n-            // TODO: check consistency between private keys and p2sh redeemscript + p2sh address\n-\n             // Import redeem script.\n             std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n             CScript redeemScript = CScript(vData.begin(), vData.end());\n@@ -795,8 +790,6 @@ UniValue processImport(const UniValue& data) {\n \n             success = true;\n         } else {\n-            // TODO: check consistency between private/public keys and scriptPubKey / address\n-\n             // Import public keys.\n             if (pubKeys.size() && keys.size() == 0) {\n                 const string& strPubKey = pubKeys[0].get_str();\n@@ -813,6 +806,25 @@ UniValue processImport(const UniValue& data) {\n                 }\n \n                 CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n+\n+                // Consistency check.\n+                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                }\n+\n+                // Consistency check.\n+                if (isScript) {\n+                    CBitcoinAddress scriptAddress;\n+                    CTxDestination destination;\n+\n+                    if (ExtractDestination(script, destination)) {\n+                        scriptAddress = CBitcoinAddress(destination);\n+                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                        }\n+                    }\n+                }\n+\n                 CScript pubKeyScript = GetScriptForDestination(pubKeyAddress.Get());\n \n                 if (::IsMine(*pwalletMain, pubKeyScript) == ISMINE_SPENDABLE) {\n@@ -866,7 +878,27 @@ UniValue processImport(const UniValue& data) {\n                 CPubKey pubKey = key.GetPubKey();\n                 assert(key.VerifyPubKey(pubKey));\n \n-                CKeyID vchAddress = pubkey.GetID();\n+                CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n+\n+                // Consistency check.\n+                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                }\n+\n+                // Consistency check.\n+                if (isScript) {\n+                    CBitcoinAddress scriptAddress;\n+                    CTxDestination destination;\n+\n+                    if (ExtractDestination(script, destination)) {\n+                        scriptAddress = CBitcoinAddress(destination);\n+                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                        }\n+                    }\n+                }\n+\n+                CKeyID vchAddress = pubKey.GetID();\n                 pwalletMain->MarkDirty();\n                 pwalletMain->SetAddressBook(vchAddress, label, \"receive\");\n "
      }
    ]
  },
  {
    "sha": "5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZDJjOGU1MjRlMTAyNGZmNTYyYzBmNDgyODBmMjZkOGU0ZTg5N2Y3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T14:36:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T14:41:59Z"
      },
      "message": "Merge #7948: RPC: augment getblockchaininfo bip9_softforks data\n\nfc14609 RPC: augment getblockchaininfo bip9_softforks data (mruddy)",
      "tree": {
        "sha": "97554eb23b3839006a8eee8b7fcc9193129a2b21",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97554eb23b3839006a8eee8b7fcc9193129a2b21"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYB4Y3AAoJEHSBCwEjRsmmZYEIAJRGanmQ71EyikwvfUaMY+ra\nNEBsJFUEZSzgbf1sFCYqBI0ZhfasNdSkzQqEceIgtGblVS9NEFOFS7M5j0hfLLMv\n5Qew5TCZt8oCb0ZKHvTCkCWb1NklBSgJy3CUBPGMqeNZNgre6tynz7Hb2GzXZMKq\nD1soMVNnOmOuikBwB+m2BKF8B0YpJiyaAXjmMmRETccVS2FpY0SHBYrZYq1w4ucN\nqa76TRqTHwsfMm0/lb6A0+UY2GMXUIx6g5A0IDoKE9fH6ba9lBEruZGkRIfJJO4Y\n8s5ImsAlbGsaXIcWkz/qrrrvSitG1EHzAtaurbynORigw0CIAypTuWCU095e2Jc=\n=C5zz\n-----END PGP SIGNATURE-----",
        "payload": "tree 97554eb23b3839006a8eee8b7fcc9193129a2b21\nparent 97c7f7362f9b59247753d6e8fa8022a6205f9c09\nparent fc146095d20452686efe1944b143452bec394343\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476887781 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476888119 +0200\n\nMerge #7948: RPC: augment getblockchaininfo bip9_softforks data\n\nfc14609 RPC: augment getblockchaininfo bip9_softforks data (mruddy)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97c7f7362f9b59247753d6e8fa8022a6205f9c09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97c7f7362f9b59247753d6e8fa8022a6205f9c09"
      },
      {
        "sha": "fc146095d20452686efe1944b143452bec394343",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc146095d20452686efe1944b143452bec394343",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc146095d20452686efe1944b143452bec394343"
      }
    ],
    "stats": {
      "total": 165,
      "additions": 121,
      "deletions": 44
    },
    "files": [
      {
        "sha": "c42ed44c259a3c2c123eb86f8e9d75490203df79",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "patch": "@@ -81,6 +81,9 @@ def get_bip9_status(self, key):\n         return info['bip9_softforks'][key]\n \n     def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature, bitno):\n+        assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 0)\n+\n         # generate some coins for later\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         self.height = 3  # height of the next block to build\n@@ -89,6 +92,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.last_block_time = int(time.time())\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 0)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert(bipName not in tmpl['vbavailable'])\n@@ -101,6 +105,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 144)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n@@ -117,6 +122,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 144)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n         assert_equal(tmpl['vbavailable'][bipName], bitno)\n@@ -133,6 +139,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -142,6 +149,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 432)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName not in tmpl['rules'])\n \n@@ -167,6 +175,7 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, True]])\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+        assert_equal(self.get_bip9_status(bipName)['since'], 576)\n         tmpl = self.nodes[0].getblocktemplate({})\n         assert(bipName in tmpl['rules'])\n         assert(bipName not in tmpl['vbavailable'])"
      },
      {
        "sha": "50158b468780aa231f1586e192de3acab319c1f5",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "patch": "@@ -6918,6 +6918,12 @@ ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::D\n     return VersionBitsState(chainActive.Tip(), params, pos, versionbitscache);\n }\n \n+int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos)\n+{\n+    LOCK(cs_main);\n+    return VersionBitsStateSinceHeight(chainActive.Tip(), params, pos, versionbitscache);\n+}\n+\n class CMainCleanup\n {\n public:"
      },
      {
        "sha": "3eab9b89daa66ab25a674944458247d790df91f9",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "patch": "@@ -297,7 +297,8 @@ std::string FormatStateMessage(const CValidationState &state);\n /** Get the BIP9 state for a given deployment at the current tip. */\n ThresholdState VersionBitsTipState(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n-\n+/** Get the block height at which the BIP9 deployment switched into the state for the block building on the current tip. */\n+int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n /** \n  * Count ECDSA signature operations the old-fashioned (pre-0.6) way"
      },
      {
        "sha": "f538ddcc04822e3033cab7c82ee50a8320f0c3da",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "patch": "@@ -1009,6 +1009,7 @@ static UniValue BIP9SoftForkDesc(const Consensus::Params& consensusParams, Conse\n     }\n     rv.push_back(Pair(\"startTime\", consensusParams.vDeployments[id].nStartTime));\n     rv.push_back(Pair(\"timeout\", consensusParams.vDeployments[id].nTimeout));\n+    rv.push_back(Pair(\"since\", VersionBitsTipStateSinceHeight(consensusParams, id)));\n     return rv;\n }\n \n@@ -1053,7 +1054,8 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n             \"        \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n             \"        \\\"bit\\\": xx,             (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n             \"        \\\"startTime\\\": xx,       (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"        \\\"timeout\\\": xx          (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"timeout\\\": xx,         (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"        \\\"since\\\": xx            (numeric) height of the first block to which the status applies\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"}\\n\""
      },
      {
        "sha": "784e7969985248ee73d2c012c431b0ea11be5d27",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 41,
        "changes": 104,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2014-2015 The Bitcoin Core developers\n+// Copyright (c) 2014-2016 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -30,6 +30,7 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }\n };\n \n #define CHECKERS 6\n@@ -78,6 +79,16 @@ class VersionBitsTester\n         return *this;\n     }\n \n+    VersionBitsTester& TestStateSinceHeight(int height) {\n+        for (int i = 0; i < CHECKERS; i++) {\n+            if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n+                BOOST_CHECK_MESSAGE(checker[i].GetStateSinceHeightFor(vpblock.empty() ? NULL : vpblock.back()) == height, strprintf(\"Test %i for StateSinceHeight\", num));\n+            }\n+        }\n+        num++;\n+        return *this;\n+    }\n+\n     VersionBitsTester& TestDefined() {\n         for (int i = 0; i < CHECKERS; i++) {\n             if ((insecure_rand() & ((1 << i) - 1)) == 0) {\n@@ -137,53 +148,64 @@ BOOST_AUTO_TEST_CASE(versionbits_test)\n {\n     for (int i = 0; i < 64; i++) {\n         // DEFINED -> FAILED\n-        VersionBitsTester().TestDefined()\n-                           .Mine(1, TestTime(1), 0x100).TestDefined()\n-                           .Mine(11, TestTime(11), 0x100).TestDefined()\n-                           .Mine(989, TestTime(989), 0x100).TestDefined()\n-                           .Mine(999, TestTime(20000), 0x100).TestDefined()\n-                           .Mine(1000, TestTime(20000), 0x100).TestFailed()\n-                           .Mine(1999, TestTime(30001), 0x100).TestFailed()\n-                           .Mine(2000, TestTime(30002), 0x100).TestFailed()\n-                           .Mine(2001, TestTime(30003), 0x100).TestFailed()\n-                           .Mine(2999, TestTime(30004), 0x100).TestFailed()\n-                           .Mine(3000, TestTime(30005), 0x100).TestFailed()\n+        VersionBitsTester().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(11, TestTime(11), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(989, TestTime(989), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(999, TestTime(20000), 0x100).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(1999, TestTime(30001), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2000, TestTime(30002), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2001, TestTime(30003), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(2999, TestTime(30004), 0x100).TestFailed().TestStateSinceHeight(1000)\n+                           .Mine(3000, TestTime(30005), 0x100).TestFailed().TestStateSinceHeight(1000)\n \n         // DEFINED -> STARTED -> FAILED\n-                           .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x100).TestStarted() // So that's what happens the next period\n-                           .Mine(2051, TestTime(10010), 0).TestStarted() // 51 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 899 new blocks\n-                           .Mine(3000, TestTime(20000), 0).TestFailed() // 50 old blocks (so 899 out of the past 1000)\n-                           .Mine(4000, TestTime(20010), 0x100).TestFailed()\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x100).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x100).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2051, TestTime(10010), 0).TestStarted().TestStateSinceHeight(2000) // 51 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 899 new blocks\n+                           .Mine(3000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(3000) // 50 old blocks (so 899 out of the past 1000)\n+                           .Mine(4000, TestTime(20010), 0x100).TestFailed().TestStateSinceHeight(3000)\n \n         // DEFINED -> STARTED -> FAILED while threshold reached\n-                           .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n-                           .Mine(2999, TestTime(30000), 0x100).TestStarted() // 999 new blocks\n-                           .Mine(3000, TestTime(30000), 0x100).TestFailed() // 1 new block (so 1000 out of the past 1000 are new)\n-                           .Mine(3999, TestTime(30001), 0).TestFailed()\n-                           .Mine(4000, TestTime(30002), 0).TestFailed()\n-                           .Mine(14333, TestTime(30003), 0).TestFailed()\n-                           .Mine(24000, TestTime(40000), 0).TestFailed()\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2999, TestTime(30000), 0x100).TestStarted().TestStateSinceHeight(2000) // 999 new blocks\n+                           .Mine(3000, TestTime(30000), 0x100).TestFailed().TestStateSinceHeight(3000) // 1 new block (so 1000 out of the past 1000 are new)\n+                           .Mine(3999, TestTime(30001), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(30002), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(14333, TestTime(30003), 0).TestFailed().TestStateSinceHeight(3000)\n+                           .Mine(24000, TestTime(40000), 0).TestFailed().TestStateSinceHeight(3000)\n \n         // DEFINED -> STARTED -> LOCKEDIN at the last minute -> ACTIVE\n                            .Reset().TestDefined()\n-                           .Mine(1, TestTime(1), 0).TestDefined()\n-                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined() // One second more and it would be defined\n-                           .Mine(2000, TestTime(10000), 0x101).TestStarted() // So that's what happens the next period\n-                           .Mine(2050, TestTime(10010), 0x200).TestStarted() // 50 old blocks\n-                           .Mine(2950, TestTime(10020), 0x100).TestStarted() // 900 new blocks\n-                           .Mine(2999, TestTime(19999), 0x200).TestStarted() // 49 old blocks\n-                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn() // 1 old block (so 900 out of the past 1000)\n-                           .Mine(3999, TestTime(30001), 0).TestLockedIn()\n-                           .Mine(4000, TestTime(30002), 0).TestActive()\n-                           .Mine(14333, TestTime(30003), 0).TestActive()\n-                           .Mine(24000, TestTime(40000), 0).TestActive();\n+                           .Mine(1, TestTime(1), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(10000) - 1, 0x101).TestDefined().TestStateSinceHeight(0) // One second more and it would be defined\n+                           .Mine(2000, TestTime(10000), 0x101).TestStarted().TestStateSinceHeight(2000) // So that's what happens the next period\n+                           .Mine(2050, TestTime(10010), 0x200).TestStarted().TestStateSinceHeight(2000) // 50 old blocks\n+                           .Mine(2950, TestTime(10020), 0x100).TestStarted().TestStateSinceHeight(2000) // 900 new blocks\n+                           .Mine(2999, TestTime(19999), 0x200).TestStarted().TestStateSinceHeight(2000) // 49 old blocks\n+                           .Mine(3000, TestTime(29999), 0x200).TestLockedIn().TestStateSinceHeight(3000) // 1 old block (so 900 out of the past 1000)\n+                           .Mine(3999, TestTime(30001), 0).TestLockedIn().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(30002), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(14333, TestTime(30003), 0).TestActive().TestStateSinceHeight(4000)\n+                           .Mine(24000, TestTime(40000), 0).TestActive().TestStateSinceHeight(4000)\n+\n+        // DEFINED multiple periods -> STARTED multiple periods -> FAILED\n+                           .Reset().TestDefined().TestStateSinceHeight(0)\n+                           .Mine(999, TestTime(999), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(1000, TestTime(1000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(2000, TestTime(2000), 0).TestDefined().TestStateSinceHeight(0)\n+                           .Mine(3000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(4000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(5000, TestTime(10000), 0).TestStarted().TestStateSinceHeight(3000)\n+                           .Mine(6000, TestTime(20000), 0).TestFailed().TestStateSinceHeight(6000)\n+                           .Mine(7000, TestTime(20000), 0x100).TestFailed().TestStateSinceHeight(6000);\n     }\n \n     // Sanity checks of version bit deployments"
      },
      {
        "sha": "d73f3405109d0843a289496d3e7aad1f9df3a812",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "patch": "@@ -105,6 +105,36 @@ ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex*\n     return state;\n }\n \n+int AbstractThresholdConditionChecker::GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n+{\n+    const ThresholdState initialState = GetStateFor(pindexPrev, params, cache);\n+\n+    // BIP 9 about state DEFINED: \"The genesis block is by definition in this state for each deployment.\"\n+    if (initialState == THRESHOLD_DEFINED) {\n+        return 0;\n+    }\n+\n+    const int nPeriod = Period(params);\n+\n+    // A block's state is always the same as that of the first of its period, so it is computed based on a pindexPrev whose height equals a multiple of nPeriod - 1.\n+    // To ease understanding of the following height calculation, it helps to remember that\n+    // right now pindexPrev points to the block prior to the block that we are computing for, thus:\n+    // if we are computing for the last block of a period, then pindexPrev points to the second to last block of the period, and\n+    // if we are computing for the first block of a period, then pindexPrev points to the last block of the previous period.\n+    // The parent of the genesis block is represented by NULL.\n+    pindexPrev = pindexPrev->GetAncestor(pindexPrev->nHeight - ((pindexPrev->nHeight + 1) % nPeriod));\n+\n+    const CBlockIndex* previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+\n+    while (previousPeriodParent != NULL && GetStateFor(previousPeriodParent, params, cache) == initialState) {\n+        pindexPrev = previousPeriodParent;\n+        previousPeriodParent = pindexPrev->GetAncestor(pindexPrev->nHeight - nPeriod);\n+    }\n+\n+    // Adjust the result because right now we point to the parent block.\n+    return pindexPrev->nHeight + 1;\n+}\n+\n namespace\n {\n /**\n@@ -137,6 +167,11 @@ ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::\n     return VersionBitsConditionChecker(pos).GetStateFor(pindexPrev, params, cache.caches[pos]);\n }\n \n+int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache)\n+{\n+    return VersionBitsConditionChecker(pos).GetStateSinceHeightFor(pindexPrev, params, cache.caches[pos]);\n+}\n+\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos)\n {\n     return VersionBitsConditionChecker(pos).Mask(params);"
      },
      {
        "sha": "7a929266aa24c27f5d5695d61c432e4cdb84f80d",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5d2c8e524e1024ff562c0f48280f26d8e4e897f7/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "patch": "@@ -51,8 +51,9 @@ class AbstractThresholdConditionChecker {\n     virtual int Threshold(const Consensus::Params& params) const =0;\n \n public:\n-    // Note that the function below takes a pindexPrev as input: they compute information for block B based on its parent.\n+    // Note that the functions below take a pindexPrev as input: they compute information for block B based on its parent.\n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n+    int GetStateSinceHeightFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const;\n };\n \n struct VersionBitsCache\n@@ -63,6 +64,7 @@ struct VersionBitsCache\n };\n \n ThresholdState VersionBitsState(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n+int VersionBitsStateSinceHeight(const CBlockIndex* pindexPrev, const Consensus::Params& params, Consensus::DeploymentPos pos, VersionBitsCache& cache);\n uint32_t VersionBitsMask(const Consensus::Params& params, Consensus::DeploymentPos pos);\n \n #endif"
      }
    ]
  },
  {
    "sha": "3e942a7060fed368f82add85177337361f6e8edd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZTk0MmE3MDYwZmVkMzY4ZjgyYWRkODUxNzczMzczNjFmNmU4ZWRk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T15:07:42Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-19T15:08:17Z"
      },
      "message": "Merge #8774: Qt refactors to better abstract wallet access\n\n178cd88 Qt/splash: Specifically keep track of which wallet(s) we are connected to for later disconnecting (Luke Dashjr)\n1880aeb Qt: Get the private key for signing messages via WalletModel (Luke Dashjr)",
      "tree": {
        "sha": "af2630502fe8a876346307c65398b55d33098085",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/af2630502fe8a876346307c65398b55d33098085"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3e942a7060fed368f82add85177337361f6e8edd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB4xhAAoJECnUvLZBb1PsbmEQAKq64J9II72y3IXm+tmjm95e\nnh+F9cUxb5f0jizviqB5qiMBb01OFJv8KDn/4E7iQcA+89rlWdYXQX6M3I8Eb+/T\nKEDrqjmdzxJ3rbsoyI4I2apyknkiJsxpLfPZQpzPuqmRY1vjRK3DdCNh17un2ioP\nTItIA4XnAPAJBKQTDaRLSqbApPNmaq5nR4fS87u5huA7L8484mB/HZ/w8MAGCHTj\n+Stk0h1pxIjKlGLM3YgGolalkP07L24P3Yra6/CEBQ09szR8K+oXImbLBNK8wP3I\n1NS74v5xxjtKryNfBiEbWvX0fHmk4+BCRZKL7dXEeGr65i0DW4ElZJpynTrNGwxP\nOMQ2bE+7wh6mTAng61UStgbzmj/ScZpq/YdCS7XPO7NL7jx/d7NIzXdGZQVwk/TL\nKu//MDI2LpP4alBAw2a3TLg0+36qwnGk58vXWnQGYMZ/v7UDnAemyOsSHtJoCajg\n4WCYsdGRtvgLKh1v5k7dNyYvwRaXDFhjHj263mIhVC1Ft0qzCZfDdxxWckDCFeaF\nm6XG8QwGMwHlHS0FnD8RqGM/2FrSmfiRRpyjcgHasx850ec08rULkN0ybR39sABY\nZtTFjQ1Wyuw0DPxZ1+e8FVISEtDaWAiwSxVN9TsLRrZXI3s+OxKBk5tk6pKw8jIw\nat863m6DXo4Uh8vEHE0n\n=JYup\n-----END PGP SIGNATURE-----",
        "payload": "tree af2630502fe8a876346307c65398b55d33098085\nparent 5d2c8e524e1024ff562c0f48280f26d8e4e897f7\nparent 178cd887eca1123fde39f530ee2b198db48363fe\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1476889662 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476889697 +0200\n\nMerge #8774: Qt refactors to better abstract wallet access\n\n178cd88 Qt/splash: Specifically keep track of which wallet(s) we are connected to for later disconnecting (Luke Dashjr)\n1880aeb Qt: Get the private key for signing messages via WalletModel (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e942a7060fed368f82add85177337361f6e8edd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3e942a7060fed368f82add85177337361f6e8edd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e942a7060fed368f82add85177337361f6e8edd/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5d2c8e524e1024ff562c0f48280f26d8e4e897f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5d2c8e524e1024ff562c0f48280f26d8e4e897f7"
      },
      {
        "sha": "178cd887eca1123fde39f530ee2b198db48363fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/178cd887eca1123fde39f530ee2b198db48363fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/178cd887eca1123fde39f530ee2b198db48363fe"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 19,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3e42f3a7b0a870157576282fe6c849ed8a1cde5d",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e942a7060fed368f82add85177337361f6e8edd/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e942a7060fed368f82add85177337361f6e8edd/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=3e942a7060fed368f82add85177337361f6e8edd",
        "patch": "@@ -142,7 +142,7 @@ void SignVerifyMessageDialog::on_signMessageButton_SM_clicked()\n     }\n \n     CKey key;\n-    if (!pwalletMain->GetKey(keyID, key))\n+    if (!model->getPrivKey(keyID, key))\n     {\n         ui->statusLabel_SM->setStyleSheet(\"QLabel { color: red; }\");\n         ui->statusLabel_SM->setText(tr(\"Private key for the entered address is not available.\"));"
      },
      {
        "sha": "cd273856531a74a38df04381a5e59991ed1d1a06",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e942a7060fed368f82add85177337361f6e8edd/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e942a7060fed368f82add85177337361f6e8edd/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=3e942a7060fed368f82add85177337361f6e8edd",
        "patch": "@@ -164,9 +164,10 @@ static void ShowProgress(SplashScreen *splash, const std::string &title, int nPr\n }\n \n #ifdef ENABLE_WALLET\n-static void ConnectWallet(SplashScreen *splash, CWallet* wallet)\n+void SplashScreen::ConnectWallet(CWallet* wallet)\n {\n-    wallet->ShowProgress.connect(boost::bind(ShowProgress, splash, _1, _2));\n+    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n+    connectedWallets.push_back(wallet);\n }\n #endif\n \n@@ -176,7 +177,7 @@ void SplashScreen::subscribeToCoreSignals()\n     uiInterface.InitMessage.connect(boost::bind(InitMessage, this, _1));\n     uiInterface.ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n #ifdef ENABLE_WALLET\n-    uiInterface.LoadWallet.connect(boost::bind(ConnectWallet, this, _1));\n+    uiInterface.LoadWallet.connect(boost::bind(&SplashScreen::ConnectWallet, this, _1));\n #endif\n }\n \n@@ -186,8 +187,9 @@ void SplashScreen::unsubscribeFromCoreSignals()\n     uiInterface.InitMessage.disconnect(boost::bind(InitMessage, this, _1));\n     uiInterface.ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n #ifdef ENABLE_WALLET\n-    if(pwalletMain)\n-        pwalletMain->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+    Q_FOREACH(CWallet* const & pwallet, connectedWallets) {\n+        pwallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+    }\n #endif\n }\n "
      },
      {
        "sha": "d1727b66c9276aa04d582d20a46d31410687e9bd",
        "filename": "src/qt/splashscreen.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e942a7060fed368f82add85177337361f6e8edd/src/qt/splashscreen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e942a7060fed368f82add85177337361f6e8edd/src/qt/splashscreen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.h?ref=3e942a7060fed368f82add85177337361f6e8edd",
        "patch": "@@ -7,6 +7,7 @@\n \n #include <QSplashScreen>\n \n+class CWallet;\n class NetworkStyle;\n \n /** Class for the splashscreen with information of the running client.\n@@ -39,11 +40,15 @@ public Q_SLOTS:\n     void subscribeToCoreSignals();\n     /** Disconnect core signals to splash screen */\n     void unsubscribeFromCoreSignals();\n+    /** Connect wallet signals to splash screen */\n+    void ConnectWallet(CWallet*);\n \n     QPixmap pixmap;\n     QString curMessage;\n     QColor curColor;\n     int curAlignment;\n+\n+    QList<CWallet*> connectedWallets;\n };\n \n #endif // BITCOIN_QT_SPLASHSCREEN_H"
      },
      {
        "sha": "305cb4fefa4f4bb40515ea949b3317de3b42b372",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e942a7060fed368f82add85177337361f6e8edd/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e942a7060fed368f82add85177337361f6e8edd/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3e942a7060fed368f82add85177337361f6e8edd",
        "patch": "@@ -563,6 +563,11 @@ bool WalletModel::havePrivKey(const CKeyID &address) const\n     return wallet->HaveKey(address);\n }\n \n+bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const\n+{\n+    return wallet->GetKey(address, vchPrivKeyOut);\n+}\n+\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {"
      },
      {
        "sha": "cdac60da36672e437a0bb4bed161d2fa1a3098c1",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3e942a7060fed368f82add85177337361f6e8edd/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3e942a7060fed368f82add85177337361f6e8edd/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3e942a7060fed368f82add85177337361f6e8edd",
        "patch": "@@ -187,6 +187,7 @@ class WalletModel : public QObject\n \n     bool getPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n     bool havePrivKey(const CKeyID &address) const;\n+    bool getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const;\n     void getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs);\n     bool isSpent(const COutPoint& outpoint) const;\n     void listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const;"
      }
    ]
  },
  {
    "sha": "475d68252e9c469393da92e4cd0e6caa428b4364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NzVkNjgyNTJlOWM0NjkzOTNkYTkyZTRjZDBlNmNhYTQyOGI0MzY0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T15:15:36Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T15:41:34Z"
      },
      "message": "Merge #8927: Add script tests for FindAndDelete in pre-segwit and segwit scripts\n\nacf853d Add script tests for FindAndDelete in pre-segwit and segwit scripts (Johnson Lau)",
      "tree": {
        "sha": "28e6e3af169688cc0cbe79e6fe63fd6b8b41917a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/28e6e3af169688cc0cbe79e6fe63fd6b8b41917a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/475d68252e9c469393da92e4cd0e6caa428b4364",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYB5QuAAoJEHSBCwEjRsmm8ywH/j6sAetfvbfU/g2OKibSwg+7\ng9/soHj0Pa5MYffJXoNPtJ5+/iTnUTlVOs2Cu2krcSBLkWbpDOJhLWbC+BTUKcZV\naUuqyg5jQ4VwDVM1BvEB3ITSy3ufyFbz4/FG3OajpV94gf7tl+l8eYpkXQHkkUk6\nLWRnhO0qa6Z4wXt3vYNHVScR0JA1p3LnPreLp35Eye55MHACDp/1tPKP3uCl8tkR\nPqZhaQ6zVDSvxmGxxndoMGssbh0Uc+yIl2A//7euywQGPQ04p5hj2k0xmkFAfmTl\nu1jSd6mPuTwF/p/2UT4YB+68AWDA/uXy+Jo6/ej8BqS42pA5HkAm+sjDR9fJzkU=\n=7xi/\n-----END PGP SIGNATURE-----",
        "payload": "tree 28e6e3af169688cc0cbe79e6fe63fd6b8b41917a\nparent 3e942a7060fed368f82add85177337361f6e8edd\nparent acf853df910339412bafb1743f42af1774f5b910\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476890136 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476891694 +0200\n\nMerge #8927: Add script tests for FindAndDelete in pre-segwit and segwit scripts\n\nacf853d Add script tests for FindAndDelete in pre-segwit and segwit scripts (Johnson Lau)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/475d68252e9c469393da92e4cd0e6caa428b4364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/475d68252e9c469393da92e4cd0e6caa428b4364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/475d68252e9c469393da92e4cd0e6caa428b4364/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3e942a7060fed368f82add85177337361f6e8edd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3e942a7060fed368f82add85177337361f6e8edd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3e942a7060fed368f82add85177337361f6e8edd"
      },
      {
        "sha": "acf853df910339412bafb1743f42af1774f5b910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acf853df910339412bafb1743f42af1774f5b910",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acf853df910339412bafb1743f42af1774f5b910"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 51,
      "deletions": 2
    },
    "files": [
      {
        "sha": "0e17ddc130b8cfb597744d4f18393e714f0e9a33",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/475d68252e9c469393da92e4cd0e6caa428b4364/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/475d68252e9c469393da92e4cd0e6caa428b4364/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=475d68252e9c469393da92e4cd0e6caa428b4364",
        "patch": "@@ -890,7 +890,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     // Subset of script starting at the most recent codeseparator\n                     CScript scriptCode(pbegincodehash, pend);\n \n-                    // Drop the signature, since there's no way for a signature to sign itself\n+                    // Drop the signature in pre-segwit scripts but not segwit scripts\n                     if (sigversion == SIGVERSION_BASE) {\n                         scriptCode.FindAndDelete(CScript(vchSig));\n                     }\n@@ -951,7 +951,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, un\n                     // Subset of script starting at the most recent codeseparator\n                     CScript scriptCode(pbegincodehash, pend);\n \n-                    // Drop the signatures, since there's no way for a signature to sign itself\n+                    // Drop the signature in pre-segwit scripts but not segwit scripts\n                     for (int k = 0; k < nSigsCount; k++)\n                     {\n                         valtype& vchSig = stacktop(-isig-k);"
      },
      {
        "sha": "f7d9e1847ffa0a69392b39a0ff58fe8f5a862814",
        "filename": "src/test/data/tx_invalid.json",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/475d68252e9c469393da92e4cd0e6caa428b4364/src/test/data/tx_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/475d68252e9c469393da92e4cd0e6caa428b4364/src/test/data/tx_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_invalid.json?ref=475d68252e9c469393da92e4cd0e6caa428b4364",
        "patch": "@@ -314,5 +314,31 @@\n [[[\"0000000000000000000000000000000000000000000000000000000000000100\", 0, \"0x60 0x21 0xff25429251b5a84f452230a3c75fd886b7fc5a7865ce4a7bb7a9d7c5be6da3dbff\", 1000]],\n \"010000000100010000000000000000000000000000000000000000000000000000000000000000000000ffffffff01e803000000000000015100000000\", \"P2SH,WITNESS,DISCOURAGE_UPGRADABLE_WITNESS_PROGRAM\"],\n \n+[\"FindAndDelete tests\"],\n+[\"This is a test of FindAndDelete. The first tx is a spend of normal scriptPubKey and the second tx is a spend of bare P2WSH.\"],\n+[\"The redeemScript/witnessScript is CHECKSIGVERIFY <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01>.\"],\n+[\"The signature is <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01> <pubkey>,\"],\n+[\"where the pubkey is obtained through key recovery with sig and the wrong sighash.\"],\n+[\"This is to show that FindAndDelete is applied only to non-segwit scripts\"],\n+[\"To show that the tests are 'correctly wrong', they should pass by modifying OP_CHECKSIG under interpreter.cpp\"],\n+[\"by replacing (sigversion == SIGVERSION_BASE) with (sigversion != SIGVERSION_BASE)\"],\n+[\"Non-segwit: wrong sighash (without FindAndDelete) = 1ba1fe3bc90c5d1265460e684ce6774e324f0fabdf67619eda729e64e8b6bc08\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7000, \"HASH160 0x14 0x0c746489e2d83cdbb5b90b432773342ba809c134 EQUAL\", 200000]],\n+\"010000000169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f1581b0000b64830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012103b12a1ec8428fc74166926318c15e17408fea82dbb157575e16a8c365f546248f4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: wrong sighash (with FindAndDelete) = 71c9cd9b2869b9c70b01b1f0360c148f42dee72297db312638df136f43311f23\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7500, \"0x00 0x20 0x9e1be07558ea5cc8e02ed1d80c0911048afad949affa36d5c3951e3159dbea19\", 200000]],\n+\"0100000000010169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f14c1d000000ffffffff01010000000000000000034830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012102a9d7ed6e161f0e255c10bbfcca0128a9e2035c2c8da58899c54d22d3a31afdef4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0100000000\", \"P2SH,WITNESS\"],\n+[\"This is multisig version of the FindAndDelete tests\"],\n+[\"Script is 2 CHECKMULTISIGVERIFY <sig1> <sig2> DROP\"],\n+[\"52af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175\"],\n+[\"Signature is 0 <sig1> <sig2> 2 <key1> <key2>\"],\n+[\"Should pass by replacing (sigversion == SIGVERSION_BASE) with (sigversion != SIGVERSION_BASE) under OP_CHECKMULTISIG\"],\n+[\"Non-segwit: wrong sighash (without FindAndDelete) = 4bc6a53e8e16ef508c19e38bba08831daba85228b0211f323d4cb0999cf2a5e8\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7000, \"HASH160 0x14 0x5748407f5ca5cdca53ba30b79040260770c9ee1b EQUAL\", 200000]],\n+\"01000000019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a662896581b0000fd6f01004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596015221023fd5dd42b44769c5653cbc5947ff30ab8871f240ad0c0e7432aefe84b5b4ff3421039d52178dbde360b83f19cf348deb04fa8360e1bf5634577be8e50fafc2b0e4ef4c9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: wrong sighash (with FindAndDelete) = 17c50ec2181ecdfdc85ca081174b248199ba81fff730794d4f69b8ec031f2dce\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n+\"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c03959601010221023cb6055f4b57a1580c5a753e19610cafaedf7e0ff377731c77837fd666eae1712102c1b1db303ac232ffa8e5e7cc2cf5f96c6e40d3e6914061204c0541cb2043a0969552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      },
      {
        "sha": "2f299aa5fea37a038ffe0678f3372254173ea199",
        "filename": "src/test/data/tx_valid.json",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/475d68252e9c469393da92e4cd0e6caa428b4364/src/test/data/tx_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/475d68252e9c469393da92e4cd0e6caa428b4364/src/test/data/tx_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/tx_valid.json?ref=475d68252e9c469393da92e4cd0e6caa428b4364",
        "patch": "@@ -487,5 +487,28 @@\n [[[\"6eb98797a21c6c10aa74edf29d618be109f48a8e94c694f3701e08ca69186436\", 1, \"HASH160 0x14 0x9993a429037b5d912407a71c252019287b8d27a5 EQUAL\", 987654321]],\n \"0100000000010136641869ca081e70f394c6948e8af409e18b619df2ed74aa106c1ca29787b96e0100000023220020a16b5755f7f6f96dbd65f5f0d6ab9418b89af4b1f14a1bb8a09062c35f0dcb54ffffffff0200e9a435000000001976a914389ffce9cd9ae88dcc0631e88a821ffdbe9bfe2688acc0832f05000000001976a9147480a33f950689af511e6e84c138dbbd3c3ee41588ac080047304402206ac44d672dac41f9b00e28f4df20c52eeb087207e8d758d76d92c6fab3b73e2b0220367750dbbe19290069cba53d096f44530e4f98acaa594810388cf7409a1870ce01473044022068c7946a43232757cbdf9176f009a928e1cd9a1a8c212f15c1e11ac9f2925d9002205b75f937ff2f9f3c1246e547e54f62e027f64eefa2695578cc6432cdabce271502473044022059ebf56d98010a932cf8ecfec54c48e6139ed6adb0728c09cbe1e4fa0915302e022007cd986c8fa870ff5d2b3a89139c9fe7e499259875357e20fcbb15571c76795403483045022100fbefd94bd0a488d50b79102b5dad4ab6ced30c4069f1eaa69a4b5a763414067e02203156c6a5c9cf88f91265f5a942e96213afae16d83321c8b31bb342142a14d16381483045022100a5263ea0553ba89221984bd7f0b13613db16e7a70c549a86de0cc0444141a407022005c360ef0ae5a5d4f9f2f87a56c1546cc8268cab08c73501d6b3be2e1e1a8a08824730440220525406a1482936d5a21888260dc165497a90a15669636d8edca6b9fe490d309c022032af0c646a34a44d1f4576bf6a4a74b67940f8faa84c7df9abe12a01a11e2b4783cf56210307b8ae49ac90a048e9b53357a2354b3334e9c8bee813ecb98e99a7e07e8c3ba32103b28f0c28bfab54554ae8c658ac5c3e0ce6e79ad336331f78c428dd43eea8449b21034b8113d703413d57761b8b9781957b8c0ac1dfe69f492580ca4195f50376ba4a21033400f6afecb833092a9a21cfdf1ed1376e58c5d1f47de74683123987e967a8f42103a6d48b1131e94ba04d9737d61acdaa1322008af9602b3b14862c07a1789aac162102d8b661b0b3302ee2f162b09e07a55ad5dfbe673a9f01d9f0c19617681024306b56ae00000000\", \"P2SH,WITNESS\"],\n \n+[\"FindAndDelete tests\"],\n+[\"This is a test of FindAndDelete. The first tx is a spend of normal P2SH and the second tx is a spend of bare P2WSH.\"],\n+[\"The redeemScript/witnessScript is CHECKSIGVERIFY <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01>.\"],\n+[\"The signature is <0x30450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01> <pubkey>,\"],\n+[\"where the pubkey is obtained through key recovery with sig and correct sighash.\"],\n+[\"This is to show that FindAndDelete is applied only to non-segwit scripts\"],\n+[\"Non-segwit: correct sighash (with FindAndDelete) = 1ba1fe3bc90c5d1265460e684ce6774e324f0fabdf67619eda729e64e8b6bc08\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7000, \"HASH160 0x14 0x0c746489e2d83cdbb5b90b432773342ba809c134 EQUAL\", 200000]],\n+\"010000000169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f1581b0000b64830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0121037a3fb04bcdb09eba90f69961ba1692a3528e45e67c85b200df820212d7594d334aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e01ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: correct sighash (without FindAndDelete) = 71c9cd9b2869b9c70b01b1f0360c148f42dee72297db312638df136f43311f23\"],\n+[[[\"f18783ace138abac5d3a7a5cf08e88fe6912f267ef936452e0c27d090621c169\", 7500, \"0x00 0x20 0x9e1be07558ea5cc8e02ed1d80c0911048afad949affa36d5c3951e3159dbea19\", 200000]],\n+\"0100000000010169c12106097dc2e0526493ef67f21269fe888ef05c7a3a5dacab38e1ac8387f14c1d000000ffffffff01010000000000000000034830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e012102a9781d66b61fb5a7ef00ac5ad5bc6ffc78be7b44a566e3c87870e1079368df4c4aad4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0100000000\", \"P2SH,WITNESS\"],\n+[\"This is multisig version of the FindAndDelete tests\"],\n+[\"Script is 2 CHECKMULTISIGVERIFY <sig1> <sig2> DROP\"],\n+[\"52af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175\"],\n+[\"Signature is 0 <sig1> <sig2> 2 <key1> <key2>\"],\n+[\"Non-segwit: correct sighash (with FindAndDelete) = 1d50f00ba4db2917b903b0ec5002e017343bb38876398c9510570f5dce099295\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7000, \"HASH160 0x14 0x5748407f5ca5cdca53ba30b79040260770c9ee1b EQUAL\", 200000]],\n+\"01000000019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a662896581b0000fd6f01004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c03959601522102cd74a2809ffeeed0092bc124fd79836706e41f048db3f6ae9df8708cefb83a1c2102e615999372426e46fd107b76eaf007156a507584aa2cc21de9eee3bdbd26d36c4c9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960175ffffffff0101000000000000000000000000\", \"P2SH,WITNESS\"],\n+[\"BIP143: correct sighash (without FindAndDelete) = c1628a1e7c67f14ca0c27c06e4fdeec2e6d1a73c7a91d7c046ff83e835aebb72\"],\n+[[[\"9628667ad48219a169b41b020800162287d2c0f713c04157e95c484a8dcb7592\", 7500, \"0x00 0x20 0x9b66c15b4e0b4eb49fa877982cafded24859fe5b0e2dbfbe4f0df1de7743fd52\", 200000]],\n+\"010000000001019275cb8d4a485ce95741c013f7c0d28722160008021bb469a11982d47a6628964c1d000000ffffffff0101000000000000000007004830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c0395960101022102966f109c54e85d3aee8321301136cedeb9fc710fdef58a9de8a73942f8e567c021034ffc99dd9a79dd3cb31e2ab3e0b09e0e67db41ac068c625cd1f491576016c84e9552af4830450220487fb382c4974de3f7d834c1b617fe15860828c7f96454490edd6d891556dcc9022100baf95feb48f845d5bfc9882eb6aeefa1bc3790e39f59eaa46ff7f15ae626c53e0148304502205286f726690b2e9b0207f0345711e63fa7012045b9eb0f19c2458ce1db90cf43022100e89f17f86abc5b149eba4115d4f128bcf45d77fb3ecdd34f594091340c039596017500000000\", \"P2SH,WITNESS\"],\n+\n [\"Make diffs cleaner by leaving a comment here without comma at the end\"]\n ]"
      }
    ]
  },
  {
    "sha": "c5875773561c249a079714f3b091a2577707eadf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNTg3NTc3MzU2MWMyNDlhMDc5NzE0ZjNiMDkxYTI1Nzc3MDdlYWRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T16:10:52Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-19T16:11:15Z"
      },
      "message": "Merge #8928: Fix init segfault where InitLoadWallet() calls ATMP before genesis\n\n37aefff Fix init segfault where InitLoadWallet() calls ATMP before genesis (Matt Corallo)",
      "tree": {
        "sha": "9aa1f86d86767beeea12bf1ab5b1136e9f6f60f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9aa1f86d86767beeea12bf1ab5b1136e9f6f60f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5875773561c249a079714f3b091a2577707eadf",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYB5sjAAoJEHSBCwEjRsmmFC4IAK67f4ay2MIhDCZV/+cBLNNr\nYrOqBROnq+geZ7io77WG1xpsRAXJRktiGz00sIzAURx1/UFFsmRHiRRoNShMqIVA\nu581ZBhttieKmH5FtqSEaO1Z7CVMFFfREElK+xz0Uy953WxnzENU65+MYwjOcCSN\nQDruDyI7BShw2kVs7DAZDYUWf7nFi5fldg920m9mtTCRDTFC5JFSxiOSZVeD0GfX\nPNw92nd5bGIuzGnoNIB9forf8gfZkPwHefHQfgOV1yanVMGQfSfJVEpC9rWgRRNp\niFECb1dq9tEw2XhMcxFxvO8DCPwjqqQ5vJvX/HDyxS3frccYtox5Ut9xvrRqmlY=\n=9NxW\n-----END PGP SIGNATURE-----",
        "payload": "tree 9aa1f86d86767beeea12bf1ab5b1136e9f6f60f1\nparent 475d68252e9c469393da92e4cd0e6caa428b4364\nparent 37aefff5fcf7169a1b07ff8939850f630640f7e7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476893452 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476893475 +0200\n\nMerge #8928: Fix init segfault where InitLoadWallet() calls ATMP before genesis\n\n37aefff Fix init segfault where InitLoadWallet() calls ATMP before genesis (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5875773561c249a079714f3b091a2577707eadf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5875773561c249a079714f3b091a2577707eadf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5875773561c249a079714f3b091a2577707eadf/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "475d68252e9c469393da92e4cd0e6caa428b4364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/475d68252e9c469393da92e4cd0e6caa428b4364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/475d68252e9c469393da92e4cd0e6caa428b4364"
      },
      {
        "sha": "37aefff5fcf7169a1b07ff8939850f630640f7e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/37aefff5fcf7169a1b07ff8939850f630640f7e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/37aefff5fcf7169a1b07ff8939850f630640f7e7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "d3efc9f9787f1f0ae2f8db2ba5774a24520db499",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5875773561c249a079714f3b091a2577707eadf/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5875773561c249a079714f3b091a2577707eadf/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c5875773561c249a079714f3b091a2577707eadf",
        "patch": "@@ -1493,6 +1493,13 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n+#ifdef ENABLE_WALLET\n+    // Add wallet transactions that aren't already in a block to mempool\n+    // Do this here as mempool requires genesis block to be loaded\n+    if (pwalletMain)\n+        pwalletMain->ReacceptWalletTransactions();\n+#endif\n+\n     // ********************************************************* Step 11: start node\n \n     //// debug print"
      },
      {
        "sha": "c7f98b238e771d48de6735d1c3190f1a5d8f9583",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5875773561c249a079714f3b091a2577707eadf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5875773561c249a079714f3b091a2577707eadf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=c5875773561c249a079714f3b091a2577707eadf",
        "patch": "@@ -3466,8 +3466,6 @@ bool CWallet::InitLoadWallet()\n         LogPrintf(\"mapWallet.size() = %u\\n\",       walletInstance->mapWallet.size());\n         LogPrintf(\"mapAddressBook.size() = %u\\n\",  walletInstance->mapAddressBook.size());\n     }\n-    // Add wallet transactions that aren't already in a block to mapTransactions\n-    walletInstance->ReacceptWalletTransactions();\n \n     pwalletMain = walletInstance;\n "
      }
    ]
  },
  {
    "sha": "6f2f639cdf12ee337dbb75ec5517bec841d4f348",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjJmNjM5Y2RmMTJlZTMzN2RiYjc1ZWM1NTE3YmVjODQxZDRmMzQ4",
    "commit": {
      "author": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-19T02:33:53Z"
      },
      "committer": {
        "name": "Jorge Tim\u00f3n",
        "email": "jtimon@jtimon.cc",
        "date": "2016-10-19T17:01:10Z"
      },
      "message": "Chainparams: Trivial: In AppInit2(), s/Params()/chainparams/",
      "tree": {
        "sha": "ae83c302ef83954310032e2c597032041d5ff8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae83c302ef83954310032e2c597032041d5ff8d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f2f639cdf12ee337dbb75ec5517bec841d4f348",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYB6bcAAoJEIhmwY6hyUSi4PQP/AlZuFpPXcm+u0mmaLO1adCg\n4qR2p1qZUfwFMZ5Yu0LJDWto0rsGMo0F6maLTVrJ4zEtpwZv8rH8bIXdmMlV7al8\nLqi28FMCPEnSRBy0MznrnHTDwx4wSpOSJb47PXtHtZu4U7ON2grIBDyQTrKIPdUh\nFoTzo9ARJXbJFCKRG2pVg4InASPmn1mx/KgOsnWoy1Ikk6FYpr6lVcNCOt+A6/Jc\nhS6SxQRJhUQO/G570O5e3aVXSUp/BOSEkrTVVSCYAuwdM+WsjrZ6q44NowEcwmAv\nDlmesED4DtNly/A43Q92PP54WOwyvj1DWWbzLP2nbUfKIGvaKXsctAbOOVS0eSOo\n7snKtCRGA/UbrteEkCr1kmRdx6u41l7FIm+ug5MEl0NmrC/qPXK8h9vBNWyP0Dgb\nromeVzp1I5LOgUsAgPoyTFDf1YWo2eLa8oF2NFL5D3TmpszdOJO3fZFnFSXAu/bI\nDebS/+TP8667nI9OgtLgsFlcqiEY/rFBh1iubokhh3zkdqByJYJs98jnHr0lHIyj\nHsgT3G4HLU3Ia8ur6uu33UhG7HIqUu7yBq9ch5NCi8QdoXN4K9MQy/4XBpm8fPJZ\nsghXc8Pm+F9N3rOPGqXGPCimYXVKWc4H/ls+b8LW/xeKJIXkIcWtF5T49d3UgLUX\n+MSjRPA8IC/fKBu+RRe+\n=1Kjz\n-----END PGP SIGNATURE-----",
        "payload": "tree ae83c302ef83954310032e2c597032041d5ff8d2\nparent c5875773561c249a079714f3b091a2577707eadf\nauthor Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476844433 +0200\ncommitter Jorge Tim\u00f3n <jtimon@jtimon.cc> 1476896470 +0200\n\nChainparams: Trivial: In AppInit2(), s/Params()/chainparams/\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2f639cdf12ee337dbb75ec5517bec841d4f348",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f2f639cdf12ee337dbb75ec5517bec841d4f348",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2f639cdf12ee337dbb75ec5517bec841d4f348/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5875773561c249a079714f3b091a2577707eadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5875773561c249a079714f3b091a2577707eadf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5875773561c249a079714f3b091a2577707eadf"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e2f25eda744e386a9645992b15c2127d059a2bdb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f2f639cdf12ee337dbb75ec5517bec841d4f348/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f2f639cdf12ee337dbb75ec5517bec841d4f348/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6f2f639cdf12ee337dbb75ec5517bec841d4f348",
        "patch": "@@ -960,8 +960,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         ::minRelayTxFee = CFeeRate(n);\n     }\n \n-    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n-    if (Params().RequireStandard() && !fRequireStandard)\n+    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n+    if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n     nBytesPerSigOp = GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n@@ -996,7 +996,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (!mapMultiArgs[\"-bip9params\"].empty()) {\n         // Allow overriding BIP9 parameters for testing\n-        if (!Params().MineBlocksOnDemand()) {\n+        if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n         const vector<string>& deployments = mapMultiArgs[\"-bip9params\"];\n@@ -1447,7 +1447,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (Params().GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n+    if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n         // Only advertize witness capabilities if they have a reasonable start time.\n         // This allows us to have the code merged without a defined softfork, by setting its\n         // end time to 0."
      }
    ]
  },
  {
    "sha": "f2d705629b510e2a5b25c8ecac1898fed13a16a2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmQ3MDU2MjliNTEwZTJhNWIyNWM4ZWNhYzE4OThmZWQxM2ExNmEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-20T07:04:18Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-20T07:04:32Z"
      },
      "message": "Merge #7551: Add importmulti RPC call\n\n215caba Add consistency check to RPC call importmulti (Pedro Branco)\ncb08fdb Add importmulti rpc call (Pedro Branco)",
      "tree": {
        "sha": "b743f1c759b0b46922f5a7ae7bce8f80d4a54ba0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b743f1c759b0b46922f5a7ae7bce8f80d4a54ba0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2d705629b510e2a5b25c8ecac1898fed13a16a2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYCGyAAAoJEHSBCwEjRsmmxOQIALhVNby3Jz4Epz7Iy5JHIxfc\nqLeRhTGawwVn/TCRvND/vLz25sBGeIUuSw1laekF2hj7J8g+2dKjnTZ1cWp0vY06\nGSmEBXJq8ziNyC0dchl6NbIpqwDVDdI98PNUAOZ+zK0gxnCULfJmCmEvVc1FQUqC\nbJ346Bz9xfVTCS9HJy3nprlcg79MWEoZ+4cAO+G/Xe4dcTAyZw9GPr6qnilOBXwc\nHNBVHXi1LVrZWkHbuhii48Xcil+z0uzrAHwxCjkkmZV9XYsMtpG28mc1T97exWuJ\nE+kQ25Wuetn3A7dybeJDFcuQvPfTf2UmxTpTxsndyHOEHOrqJDYpzYq1bGjiuV8=\n=D/JQ\n-----END PGP SIGNATURE-----",
        "payload": "tree b743f1c759b0b46922f5a7ae7bce8f80d4a54ba0\nparent c5875773561c249a079714f3b091a2577707eadf\nparent 215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476947058 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476947072 +0200\n\nMerge #7551: Add importmulti RPC call\n\n215caba Add consistency check to RPC call importmulti (Pedro Branco)\ncb08fdb Add importmulti rpc call (Pedro Branco)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d705629b510e2a5b25c8ecac1898fed13a16a2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d705629b510e2a5b25c8ecac1898fed13a16a2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d705629b510e2a5b25c8ecac1898fed13a16a2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5875773561c249a079714f3b091a2577707eadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5875773561c249a079714f3b091a2577707eadf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5875773561c249a079714f3b091a2577707eadf"
      },
      {
        "sha": "215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/215caba4ed4547d6f2a0954fa9fe1ae78f4a7c40"
      }
    ],
    "stats": {
      "total": 797,
      "additions": 797,
      "deletions": 0
    },
    "files": [
      {
        "sha": "778f8d8a77818e9a60cc2df8026458861d16359d",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d705629b510e2a5b25c8ecac1898fed13a16a2/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d705629b510e2a5b25c8ecac1898fed13a16a2/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "patch": "@@ -145,6 +145,7 @@\n     'signmessages.py',\n     'p2p-compactblocks.py',\n     'nulldummy.py',\n+    'importmulti.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "5c536f2f4952860259ea72642dd6a3870ad32eb4",
        "filename": "qa/rpc-tests/importmulti.py",
        "status": "added",
        "additions": 360,
        "deletions": 0,
        "changes": 360,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d705629b510e2a5b25c8ecac1898fed13a16a2/qa/rpc-tests/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d705629b510e2a5b25c8ecac1898fed13a16a2/qa/rpc-tests/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/importmulti.py?ref=f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "patch": "@@ -0,0 +1,360 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+\n+class ImportMultiTest (BitcoinTestFramework):\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 2\n+        self.setup_clean_chain = True\n+\n+    def setup_network(self, split=False):\n+        self.nodes = start_nodes(2, self.options.tmpdir)\n+        self.is_network_split=False\n+\n+    def run_test (self):\n+        print (\"Mining blocks...\")\n+        self.nodes[0].generate(1)\n+        self.nodes[1].generate(1)\n+\n+        # keyword definition\n+        PRIV_KEY = 'privkey'\n+        PUB_KEY = 'pubkey'\n+        ADDRESS_KEY = 'address'\n+        SCRIPT_KEY = 'script'\n+\n+\n+        node0_address1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        node0_address3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+\n+        #Check only one address\n+        assert_equal(node0_address1['ismine'], True)\n+\n+        #Node 1 sync test\n+        assert_equal(self.nodes[1].getblockcount(),1)\n+\n+        #Address Test - before import\n+        address_info = self.nodes[1].validateaddress(node0_address1['address'])\n+        assert_equal(address_info['iswatchonly'], False)\n+        assert_equal(address_info['ismine'], False)\n+\n+\n+        # RPC importmulti -----------------------------------------------\n+\n+        # Bitcoin Address\n+        print(\"Should import an address\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            }\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + internal\n+        print(\"Should import a scriptPubKey with internal flag\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"internal\": True\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # ScriptPubKey + !internal\n+        print(\"Should not import a scriptPubKey without internal flag\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey']\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # Address + Public key + !Internal\n+        print(\"Should import an address with public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + Public key + internal\n+        print(\"Should import a scriptPubKey with internal and with public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        request = [{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"pubkeys\": [ address['pubkey'] ],\n+            \"internal\": True\n+        }];\n+        result = self.nodes[1].importmulti(request)\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], True)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # ScriptPubKey + Public key + !internal\n+        print(\"Should not import a scriptPubKey without internal and with public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        request = [{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"pubkeys\": [ address['pubkey'] ]\n+        }];\n+        result = self.nodes[1].importmulti(request)\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # Address + Private key + !watchonly\n+        print(\"Should import an address with private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # Address + Private key + watchonly\n+        print(\"Should not import an address with private key and with watchonly\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n+            \"watchonly\": True\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+        # ScriptPubKey + Private key + internal\n+        print(\"Should import a scriptPubKey with internal and with private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ],\n+            \"internal\": True\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], True)\n+\n+        # ScriptPubKey + Private key + !internal\n+        print(\"Should not import a scriptPubKey without internal and with private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(address['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Internal must be set for hex scriptPubKey')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # P2SH address\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            }\n+        }])\n+        assert_equal(result[0]['success'], True)\n+        address_assert = self.nodes[1].validateaddress(multi_sig_script['address'])\n+        assert_equal(address_assert['isscript'], True)\n+        assert_equal(address_assert['iswatchonly'], True)\n+        p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n+        assert_equal(p2shunspent['spendable'], False)\n+        assert_equal(p2shunspent['solvable'], False)\n+\n+\n+        # P2SH + Redeem script\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh with respective redeem script\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"redeemscript\": multi_sig_script['redeemScript']\n+        }])\n+        assert_equal(result[0]['success'], True)\n+\n+        p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n+        assert_equal(p2shunspent['spendable'], False)\n+        assert_equal(p2shunspent['solvable'], True)\n+\n+\n+        # P2SH + Redeem script + Private Keys + !Watchonly\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"redeemscript\": multi_sig_script['redeemScript'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])]\n+        }])\n+        assert_equal(result[0]['success'], True)\n+\n+        p2shunspent = self.nodes[1].listunspent(0,999999, [multi_sig_script['address']])[0]\n+        assert_equal(p2shunspent['spendable'], False)\n+        assert_equal(p2shunspent['solvable'], True)\n+\n+        # P2SH + Redeem script + Private Keys + Watchonly\n+        sig_address_1 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        sig_address_3 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        multi_sig_script = self.nodes[0].createmultisig(2, [sig_address_1['address'], sig_address_2['address'], sig_address_3['pubkey']])\n+        self.nodes[1].generate(100)\n+        transactionid = self.nodes[1].sendtoaddress(multi_sig_script['address'], 10.00)\n+        self.nodes[1].generate(1)\n+        transaction = self.nodes[1].gettransaction(transactionid);\n+\n+        print(\"Should import a p2sh with respective redeem script and private keys\")\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": multi_sig_script['address']\n+            },\n+            \"redeemscript\": multi_sig_script['redeemScript'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(sig_address_1['address']), self.nodes[0].dumpprivkey(sig_address_2['address'])],\n+            \"watchonly\": True\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -8)\n+        assert_equal(result[0]['error']['message'], 'Incompatibility found between watchonly and keys')\n+\n+\n+        # Address + Public key + !Internal + Wrong pubkey\n+        print(\"Should not import an address with a wrong public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"pubkeys\": [ address2['pubkey'] ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + Public key + internal + Wrong pubkey\n+        print(\"Should not import a scriptPubKey with internal and with a wrong public key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        request = [{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"pubkeys\": [ address2['pubkey'] ],\n+            \"internal\": True\n+        }];\n+        result = self.nodes[1].importmulti(request)\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # Address + Private key + !watchonly + Wrong private key\n+        print(\"Should not import an address with a wrong private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": {\n+                \"address\": address['address']\n+            },\n+            \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ]\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+\n+        # ScriptPubKey + Private key + internal + Wrong private key\n+        print(\"Should not import a scriptPubKey with internal and with a wrong private key\")\n+        address = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        address2 = self.nodes[0].validateaddress(self.nodes[0].getnewaddress())\n+        result = self.nodes[1].importmulti([{\n+            \"scriptPubKey\": address['scriptPubKey'],\n+            \"keys\": [ self.nodes[0].dumpprivkey(address2['address']) ],\n+            \"internal\": True\n+        }])\n+        assert_equal(result[0]['success'], False)\n+        assert_equal(result[0]['error']['code'], -5)\n+        assert_equal(result[0]['error']['message'], 'Consistency check failed')\n+        address_assert = self.nodes[1].validateaddress(address['address'])\n+        assert_equal(address_assert['iswatchonly'], False)\n+        assert_equal(address_assert['ismine'], False)\n+\n+if __name__ == '__main__':\n+    ImportMultiTest ().main ()"
      },
      {
        "sha": "1e611906d146fb4fdb375275996d442bdac07c0b",
        "filename": "src/chain.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.cpp?ref=f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "patch": "@@ -61,6 +61,13 @@ const CBlockIndex *CChain::FindFork(const CBlockIndex *pindex) const {\n     return pindex;\n }\n \n+CBlockIndex* CChain::FindLatestBefore(int64_t nTime) const\n+{\n+    std::vector<CBlockIndex*>::const_iterator lower = std::lower_bound(vChain.begin(), vChain.end(), nTime,\n+        [](CBlockIndex* pBlock, const int64_t& time) -> bool { return pBlock->GetBlockTime() < time; });\n+    return (lower == vChain.end() ? NULL : *lower);\n+}\n+\n /** Turn the lowest '1' bit in the binary representation of a number into a '0'. */\n int static inline InvertLowestOne(int n) { return n & (n - 1); }\n "
      },
      {
        "sha": "46a16a30617f411eb70e9c1cd707ba5ee116feec",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "patch": "@@ -459,6 +459,9 @@ class CChain {\n \n     /** Find the last common block between this chain and a block index entry. */\n     const CBlockIndex *FindFork(const CBlockIndex *pindex) const;\n+\n+    /** Find the most recent block with timestamp lower than the given. */\n+    CBlockIndex* FindLatestBefore(int64_t nTime) const;\n };\n \n #endif // BITCOIN_CHAIN_H"
      },
      {
        "sha": "8370a0f43effbc37763c5593a3f2d52fde6933e6",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "patch": "@@ -95,6 +95,8 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importaddress\", 2 },\n     { \"importaddress\", 3 },\n     { \"importpubkey\", 2 },\n+    { \"importmulti\", 0 },\n+    { \"importmulti\", 1 },\n     { \"verifychain\", 0 },\n     { \"verifychain\", 1 },\n     { \"keypoolrefill\", 0 },"
      },
      {
        "sha": "7b16b4adfb32481d438757acf870b27cd9ec3cfa",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 422,
        "deletions": 0,
        "changes": 422,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "patch": "@@ -24,6 +24,7 @@\n \n #include <univalue.h>\n \n+#include <boost/assign/list_of.hpp>\n #include <boost/foreach.hpp>\n \n using namespace std;\n@@ -637,3 +638,424 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file.close();\n     return NullUniValue;\n }\n+\n+\n+UniValue processImport(const UniValue& data) {\n+    try {\n+        bool success = false;\n+\n+        // Required fields.\n+        const UniValue& scriptPubKey = data[\"scriptPubKey\"];\n+\n+        // Should have script or JSON with \"address\".\n+        if (!(scriptPubKey.getType() == UniValue::VOBJ && scriptPubKey.exists(\"address\")) && !(scriptPubKey.getType() == UniValue::VSTR)) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid scriptPubKey\");\n+        }\n+\n+        // Optional fields.\n+        const string& strRedeemScript = data.exists(\"redeemscript\") ? data[\"redeemscript\"].get_str() : \"\";\n+        const UniValue& pubKeys = data.exists(\"pubkeys\") ? data[\"pubkeys\"].get_array() : UniValue();\n+        const UniValue& keys = data.exists(\"keys\") ? data[\"keys\"].get_array() : UniValue();\n+        const bool& internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const bool& watchOnly = data.exists(\"watchonly\") ? data[\"watchonly\"].get_bool() : false;\n+        const string& label = data.exists(\"label\") && !internal ? data[\"label\"].get_str() : \"\";\n+        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > 1 ? data[\"timestamp\"].get_int64() : 1;\n+\n+        bool isScript = scriptPubKey.getType() == UniValue::VSTR;\n+        bool isP2SH = strRedeemScript.length() > 0;\n+        const string& output = isScript ? scriptPubKey.get_str() : scriptPubKey[\"address\"].get_str();\n+\n+        // Parse the output.\n+        CScript script;\n+        CBitcoinAddress address;\n+\n+        if (!isScript) {\n+            address = CBitcoinAddress(output);\n+            script = GetScriptForDestination(address.Get());\n+        } else {\n+            if (!IsHex(output)) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid scriptPubKey\");\n+            }\n+\n+            std::vector<unsigned char> vData(ParseHex(output));\n+            script = CScript(vData.begin(), vData.end());\n+        }\n+\n+        // Watchonly and private keys\n+        if (watchOnly && keys.size()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between watchonly and keys\");\n+        }\n+\n+        // Internal + Label\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Incompatibility found between internal and label\");\n+        }\n+\n+        // Not having Internal + Script\n+        if (!internal && isScript) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal must be set for hex scriptPubKey\");\n+        }\n+\n+        // Keys / PubKeys size check.\n+        if (!isP2SH && (keys.size() > 1 || pubKeys.size() > 1)) { // Address / scriptPubKey\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"More than private key given for one address\");\n+        }\n+\n+        // Invalid P2SH redeemScript\n+        if (isP2SH && !IsHex(strRedeemScript)) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid redeem script\");\n+        }\n+\n+        // Process. //\n+\n+        // P2SH\n+        if (isP2SH) {\n+            // Import redeem script.\n+            std::vector<unsigned char> vData(ParseHex(strRedeemScript));\n+            CScript redeemScript = CScript(vData.begin(), vData.end());\n+\n+            // Invalid P2SH address\n+            if (!script.IsPayToScriptHash()) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid P2SH address / script\");\n+            }\n+\n+            pwalletMain->MarkDirty();\n+\n+            if (!pwalletMain->HaveWatchOnly(redeemScript) && !pwalletMain->AddWatchOnly(redeemScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n+\n+            if (!pwalletMain->HaveCScript(redeemScript) && !pwalletMain->AddCScript(redeemScript)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding p2sh redeemScript to wallet\");\n+            }\n+\n+            CBitcoinAddress redeemAddress = CBitcoinAddress(CScriptID(redeemScript));\n+            CScript redeemDestination = GetScriptForDestination(redeemAddress.Get());\n+\n+            if (::IsMine(*pwalletMain, redeemDestination) == ISMINE_SPENDABLE) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+            }\n+\n+            pwalletMain->MarkDirty();\n+\n+            if (!pwalletMain->HaveWatchOnly(redeemDestination) && !pwalletMain->AddWatchOnly(redeemDestination)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+            }\n+\n+            // add to address book or update label\n+            if (address.IsValid()) {\n+                pwalletMain->SetAddressBook(address.Get(), label, \"receive\");\n+            }\n+\n+            // Import private keys.\n+            if (keys.size()) {\n+                for (size_t i = 0; i < keys.size(); i++) {\n+                    const string& privkey = keys[i].get_str();\n+\n+                    CBitcoinSecret vchSecret;\n+                    bool fGood = vchSecret.SetString(privkey);\n+\n+                    if (!fGood) {\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+                    }\n+\n+                    CKey key = vchSecret.GetKey();\n+\n+                    if (!key.IsValid()) {\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                    }\n+\n+                    CPubKey pubkey = key.GetPubKey();\n+                    assert(key.VerifyPubKey(pubkey));\n+\n+                    CKeyID vchAddress = pubkey.GetID();\n+                    pwalletMain->MarkDirty();\n+                    pwalletMain->SetAddressBook(vchAddress, label, \"receive\");\n+\n+                    if (pwalletMain->HaveKey(vchAddress)) {\n+                        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Already have this key\");\n+                    }\n+\n+                    pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+\n+                    if (!pwalletMain->AddKeyPubKey(key, pubkey)) {\n+                        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+                    }\n+\n+                    if (timestamp < pwalletMain->nTimeFirstKey) {\n+                        pwalletMain->nTimeFirstKey = timestamp;\n+                    }\n+                }\n+            }\n+\n+            success = true;\n+        } else {\n+            // Import public keys.\n+            if (pubKeys.size() && keys.size() == 0) {\n+                const string& strPubKey = pubKeys[0].get_str();\n+\n+                if (!IsHex(strPubKey)) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n+                }\n+\n+                std::vector<unsigned char> data(ParseHex(strPubKey));\n+                CPubKey pubKey(data.begin(), data.end());\n+\n+                if (!pubKey.IsFullyValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n+                }\n+\n+                CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n+\n+                // Consistency check.\n+                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                }\n+\n+                // Consistency check.\n+                if (isScript) {\n+                    CBitcoinAddress scriptAddress;\n+                    CTxDestination destination;\n+\n+                    if (ExtractDestination(script, destination)) {\n+                        scriptAddress = CBitcoinAddress(destination);\n+                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                        }\n+                    }\n+                }\n+\n+                CScript pubKeyScript = GetScriptForDestination(pubKeyAddress.Get());\n+\n+                if (::IsMine(*pwalletMain, pubKeyScript) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwalletMain->MarkDirty();\n+\n+                if (!pwalletMain->HaveWatchOnly(pubKeyScript) && !pwalletMain->AddWatchOnly(pubKeyScript)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+\n+                // add to address book or update label\n+                if (pubKeyAddress.IsValid()) {\n+                    pwalletMain->SetAddressBook(pubKeyAddress.Get(), label, \"receive\");\n+                }\n+\n+                // TODO Is this necessary?\n+                CScript scriptRawPubKey = GetScriptForRawPubKey(pubKey);\n+\n+                if (::IsMine(*pwalletMain, scriptRawPubKey) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwalletMain->MarkDirty();\n+\n+                if (!pwalletMain->HaveWatchOnly(scriptRawPubKey) && !pwalletMain->AddWatchOnly(scriptRawPubKey)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+\n+                success = true;\n+            }\n+\n+            // Import private keys.\n+            if (keys.size()) {\n+                const string& strPrivkey = keys[0].get_str();\n+\n+                // Checks.\n+                CBitcoinSecret vchSecret;\n+                bool fGood = vchSecret.SetString(strPrivkey);\n+\n+                if (!fGood) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+                }\n+\n+                CKey key = vchSecret.GetKey();\n+                if (!key.IsValid()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+                }\n+\n+                CPubKey pubKey = key.GetPubKey();\n+                assert(key.VerifyPubKey(pubKey));\n+\n+                CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n+\n+                // Consistency check.\n+                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                    throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                }\n+\n+                // Consistency check.\n+                if (isScript) {\n+                    CBitcoinAddress scriptAddress;\n+                    CTxDestination destination;\n+\n+                    if (ExtractDestination(script, destination)) {\n+                        scriptAddress = CBitcoinAddress(destination);\n+                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n+                        }\n+                    }\n+                }\n+\n+                CKeyID vchAddress = pubKey.GetID();\n+                pwalletMain->MarkDirty();\n+                pwalletMain->SetAddressBook(vchAddress, label, \"receive\");\n+\n+                if (pwalletMain->HaveKey(vchAddress)) {\n+                    return false;\n+                }\n+\n+                pwalletMain->mapKeyMetadata[vchAddress].nCreateTime = timestamp;\n+\n+                if (!pwalletMain->AddKeyPubKey(key, pubKey)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+                }\n+\n+                if (timestamp < pwalletMain->nTimeFirstKey) {\n+                    pwalletMain->nTimeFirstKey = timestamp;\n+                }\n+\n+                success = true;\n+            }\n+\n+            // Import scriptPubKey only.\n+            if (pubKeys.size() == 0 && keys.size() == 0) {\n+                if (::IsMine(*pwalletMain, script) == ISMINE_SPENDABLE) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n+                }\n+\n+                pwalletMain->MarkDirty();\n+\n+                if (!pwalletMain->HaveWatchOnly(script) && !pwalletMain->AddWatchOnly(script)) {\n+                    throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding address to wallet\");\n+                }\n+\n+                if (scriptPubKey.getType() == UniValue::VOBJ) {\n+                    // add to address book or update label\n+                    if (address.IsValid()) {\n+                        pwalletMain->SetAddressBook(address.Get(), label, \"receive\");\n+                    }\n+                }\n+\n+                success = true;\n+            }\n+        }\n+\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        result.pushKV(\"success\", UniValue(success));\n+        return result;\n+    } catch (const UniValue& e) {\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+        return result;\n+    } catch (...) {\n+        UniValue result = UniValue(UniValue::VOBJ);\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+        return result;\n+    }\n+}\n+\n+UniValue importmulti(const JSONRPCRequest& mainRequest)\n+{\n+    // clang-format off\n+    if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n+        throw runtime_error(\n+            \"importmulti '[<json import requests>]' '<json options>' \\n\\n\"\n+            \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).\\n\\n\"\n+            \"Arguments:\\n\"\n+            \"1. request array     (array, required) Data to be imported\\n\"\n+            \"  [     (array of json objects)\\n\"\n+            \"    {\\n\"\n+            \"      \\\"scriptPubKey\\\": \\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }, (string / json, required) Type of scriptPubKey (string for script, json for address)\\n\"\n+            \"      \\\"redeemscript\\\": \\\"<script>\\\"                            , (string, optional) Allowed only if the scriptPubKey is a P2SH address or a P2SH scriptPubKey\\n\"\n+            \"      \\\"pubkeys\\\": [\\\"<pubKey>\\\", ... ]                         , (array, optional) Array of strings giving pubkeys that must occur in the output or redeemscript\\n\"\n+            \"      \\\"keys\\\": [\\\"<key>\\\", ... ]                               , (array, optional) Array of strings giving private keys whose corresponding public keys must occur in the output or redeemscript\\n\"\n+            \"      \\\"internal\\\": <true>                                    , (boolean, optional, default: false) Stating whether matching outputs should be be treated as not incoming payments\\n\"\n+            \"      \\\"watchonly\\\": <true>                                   , (boolean, optional, default: false) Stating whether matching outputs should be considered watched even when they're not spendable, only allowed if keys are empty\\n\"\n+            \"      \\\"label\\\": <label>                                      , (string, optional, default: '') Label to assign to the address (aka account name, for now), only allowed with internal=false\\n\"\n+            \"      \\\"timestamp\\\": 1454686740,                                (integer, optional, default now) Timestamp\\n\"\n+            \"    }\\n\"\n+            \"  ,...\\n\"\n+            \"  ]\\n\"\n+            \"2. json options                 (json, optional)\\n\"\n+            \"  {\\n\"\n+            \"     \\\"rescan\\\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\\n\"\n+            \"  }\\n\"\n+            \"\\nExamples:\\n\" +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n+                                          \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+            HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }]' '{ \\\"rescan\\\": false}'\") +\n+\n+            \"\\nResponse is an array with the same size as the input that has the execution result :\\n\"\n+            \"  [{ \\\"success\\\": true } , { \\\"success\\\": false, \\\"error\\\": { \\\"code\\\": -1, \\\"message\\\": \\\"Internal Server Error\\\"} }, ... ]\\n\");\n+\n+    // clang-format on\n+    if (!EnsureWalletIsAvailable(mainRequest.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+    RPCTypeCheck(mainRequest.params, boost::assign::list_of(UniValue::VARR)(UniValue::VOBJ));\n+\n+    const UniValue& requests = mainRequest.params[0];\n+\n+    //Default options\n+    bool fRescan = true;\n+\n+    if (mainRequest.params.size() > 1) {\n+        const UniValue& options = mainRequest.params[1];\n+\n+        if (options.exists(\"rescan\")) {\n+            fRescan = options[\"rescan\"].get_bool();\n+        }\n+    }\n+\n+    LOCK2(cs_main, pwalletMain->cs_wallet);\n+    EnsureWalletIsUnlocked();\n+\n+    bool fRunScan = false;\n+    const int64_t minimumTimestamp = 1;\n+    int64_t nLowestTimestamp;\n+\n+    if (fRescan && chainActive.Tip()) {\n+        nLowestTimestamp = chainActive.Tip()->GetBlockTime();\n+    } else {\n+        fRescan = false;\n+    }\n+\n+    UniValue response(UniValue::VARR);\n+\n+    BOOST_FOREACH (const UniValue& data, requests.getValues()) {\n+        const UniValue result = processImport(data);\n+        response.push_back(result);\n+\n+        if (!fRescan) {\n+            continue;\n+        }\n+\n+        // If at least one request was successful then allow rescan.\n+        if (result[\"success\"].get_bool()) {\n+            fRunScan = true;\n+        }\n+\n+        // Get the lowest timestamp.\n+        const int64_t& timestamp = data.exists(\"timestamp\") && data[\"timestamp\"].get_int64() > minimumTimestamp ? data[\"timestamp\"].get_int64() : minimumTimestamp;\n+\n+        if (timestamp < nLowestTimestamp) {\n+            nLowestTimestamp = timestamp;\n+        }\n+    }\n+\n+    if (fRescan && fRunScan && requests.size() && nLowestTimestamp <= chainActive.Tip()->GetBlockTime()) {\n+        CBlockIndex* pindex = nLowestTimestamp > minimumTimestamp ? chainActive.FindLatestBefore(nLowestTimestamp) : chainActive.Genesis();\n+\n+        if (pindex) {\n+            pwalletMain->ScanForWalletTransactions(pindex, true);\n+            pwalletMain->ReacceptWalletTransactions();\n+        }\n+    }\n+\n+    return response;\n+}"
      },
      {
        "sha": "ab7e74988a00fd1b0fb36c2e3ec4dc065f27261a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2d705629b510e2a5b25c8ecac1898fed13a16a2/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "patch": "@@ -2583,6 +2583,7 @@ extern UniValue dumpwallet(const JSONRPCRequest& request);\n extern UniValue importwallet(const JSONRPCRequest& request);\n extern UniValue importprunedfunds(const JSONRPCRequest& request);\n extern UniValue removeprunedfunds(const JSONRPCRequest& request);\n+extern UniValue importmulti(const JSONRPCRequest& request);\n \n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n@@ -2607,6 +2608,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"gettransaction\",           &gettransaction,           false },\n     { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false },\n     { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false },\n+    { \"wallet\",             \"importmulti\",              &importmulti,              true  },\n     { \"wallet\",             \"importprivkey\",            &importprivkey,            true  },\n     { \"wallet\",             \"importwallet\",             &importwallet,             true  },\n     { \"wallet\",             \"importaddress\",            &importaddress,            true  },"
      }
    ]
  },
  {
    "sha": "cab1da745b2a36407bb9493343cc74213854419d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYWIxZGE3NDViMmEzNjQwN2JiOTQ5MzM0M2NjNzQyMTM4NTQ0MTlk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-20T07:22:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-20T07:22:13Z"
      },
      "message": "[Wallet] Refactor wallet/init interaction (Reaccept wtx, flush thread)",
      "tree": {
        "sha": "5f250b614ebfc21e8ede93c8eb80aed658945424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5f250b614ebfc21e8ede93c8eb80aed658945424"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cab1da745b2a36407bb9493343cc74213854419d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYCHDcAAoJECnUvLZBb1PsgSYP/AnWmzwp8iEtL9OQ/mkwkA9G\nbl4lQ8Oh6fM7jEsfdHuEiY3rHU9CxTiy44VhliGZXZIYBQQxOz59oHaqSVcYDbHD\n8RGe7tGoFuzZsLMIQ+rQxdaFnZUORpfHW0EQWwliMpDN+EZQWAx5oBm+KOTGZmVC\nlOXUeuezvk2IAInAhJ8jaHC/3CHp2RwNFAPe0GFJgONiCzm3a6s4P245W6KenGG4\nHXM8hARH0PsS9k8nQfRJ0cwx0co3eYYe94Wn3mI1BPxfxhiVmzNLmpe8VI9q1I6r\njSqOHokoTHkcqNSar2LQIgNbENGFjAfoeaiPjlZnAts7NlnWFIaqQqyCppCzuC53\nSflEpl4gTDtYpD/txvpDDk+cbEF0yyAEDbrBEx51KC02rPzDO5ztW3j6xpB9ZM5l\n0ALNfDu3XYTCy4fgzqUi3TaQIgb4Dg7bNb57YwYBCOJpBrZilTo7h8R9IIoFxbSD\n3EkdoaYd+J2w4gYlto/H2T0A3wQJ+en8+lhToXumeAcAQHmU0JCY7uDn/q+7ZHh6\n/85wIJwXZWbdC2ie0P4qKO7sLCECcdEMyWZhhTbssWrtbJxWRaufJXoUyAoOEsTn\nNbf0cpNjSAM2lI+ModkWe6DWX9zxkYf5YOCXLCb4r2p8GWG4/ZwAd9A0GucqG91V\nPiL0EZpIIhQ3AUq5PtQB\n=iz0B\n-----END PGP SIGNATURE-----",
        "payload": "tree 5f250b614ebfc21e8ede93c8eb80aed658945424\nparent c5875773561c249a079714f3b091a2577707eadf\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1476948133 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476948133 +0200\n\n[Wallet] Refactor wallet/init interaction (Reaccept wtx, flush thread)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab1da745b2a36407bb9493343cc74213854419d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cab1da745b2a36407bb9493343cc74213854419d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab1da745b2a36407bb9493343cc74213854419d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5875773561c249a079714f3b091a2577707eadf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5875773561c249a079714f3b091a2577707eadf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5875773561c249a079714f3b091a2577707eadf"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 19,
      "deletions": 11
    },
    "files": [
      {
        "sha": "9665d0e06dc5827148f9d655a1bea70a1994d92e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cab1da745b2a36407bb9493343cc74213854419d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cab1da745b2a36407bb9493343cc74213854419d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=cab1da745b2a36407bb9493343cc74213854419d",
        "patch": "@@ -1493,13 +1493,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n-#ifdef ENABLE_WALLET\n-    // Add wallet transactions that aren't already in a block to mempool\n-    // Do this here as mempool requires genesis block to be loaded\n-    if (pwalletMain)\n-        pwalletMain->ReacceptWalletTransactions();\n-#endif\n-\n     // ********************************************************* Step 11: start node\n \n     //// debug print\n@@ -1537,10 +1530,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n #ifdef ENABLE_WALLET\n-    if (pwalletMain) {\n-        // Run a thread to flush wallet periodically\n-        threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));\n-    }\n+    if (pwalletMain)\n+        pwalletMain->postInitProcess(threadGroup);\n #endif\n \n     return !fRequestShutdown;"
      },
      {
        "sha": "66f92d887b78d2a0495cb710a218ca71e596c268",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cab1da745b2a36407bb9493343cc74213854419d/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cab1da745b2a36407bb9493343cc74213854419d/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=cab1da745b2a36407bb9493343cc74213854419d",
        "patch": "@@ -3472,6 +3472,16 @@ bool CWallet::InitLoadWallet()\n     return true;\n }\n \n+void CWallet::postInitProcess(boost::thread_group& threadGroup)\n+{\n+    // Add wallet transactions that aren't already in a block to mempool\n+    // Do this here as mempool requires genesis block to be loaded\n+    ReacceptWalletTransactions();\n+\n+    // Run a thread to flush wallet periodically\n+    threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(this->strWalletFile)));\n+}\n+\n bool CWallet::ParameterInteraction()\n {\n     if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))"
      },
      {
        "sha": "5e50eaedc3a3d8f9320dc73597df66832cf9f158",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cab1da745b2a36407bb9493343cc74213854419d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cab1da745b2a36407bb9493343cc74213854419d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=cab1da745b2a36407bb9493343cc74213854419d",
        "patch": "@@ -27,6 +27,7 @@\n #include <vector>\n \n #include <boost/shared_ptr.hpp>\n+#include <boost/thread.hpp>\n \n extern CWallet* pwalletMain;\n \n@@ -912,6 +913,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static bool InitLoadWallet();\n \n+    /**\n+     * Wallet post-init setup\n+     * Gives the wallet a chance to register repetitive tasks and complete post-init tasks\n+     */\n+    void postInitProcess(boost::thread_group& threadGroup);\n+\n     /* Wallets parameter interaction */\n     static bool ParameterInteraction();\n "
      }
    ]
  },
  {
    "sha": "7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTQyZDMxZDVmYTBjNzgxMzZmYzUxZDQ3NDZkNmQ2MWVlYjU4N2E3",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-20T10:18:02Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-10-20T10:18:05Z"
      },
      "message": "RPC: importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions",
      "tree": {
        "sha": "7dc4be0f525346fccb7d9cfb0fae1b94ed6a2aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dc4be0f525346fccb7d9cfb0fae1b94ed6a2aa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7942d31d5fa0c78136fc51d4746d6d61eeb587a7/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d705629b510e2a5b25c8ecac1898fed13a16a2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b638810e9dd4cd1cd207a47e7131b3625dac8ba4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7942d31d5fa0c78136fc51d4746d6d61eeb587a7/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7942d31d5fa0c78136fc51d4746d6d61eeb587a7/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
        "patch": "@@ -808,7 +808,7 @@ UniValue processImport(const UniValue& data) {\n                 CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n \n                 // Consistency check.\n-                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                if (!isScript && !(pubKeyAddress.Get() == address.Get())) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                 }\n \n@@ -819,7 +819,7 @@ UniValue processImport(const UniValue& data) {\n \n                     if (ExtractDestination(script, destination)) {\n                         scriptAddress = CBitcoinAddress(destination);\n-                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                        if (!(scriptAddress.Get() == pubKeyAddress.Get())) {\n                             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                         }\n                     }\n@@ -881,7 +881,7 @@ UniValue processImport(const UniValue& data) {\n                 CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n \n                 // Consistency check.\n-                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                if (!isScript && !(pubKeyAddress.Get() == address.Get())) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                 }\n \n@@ -892,7 +892,7 @@ UniValue processImport(const UniValue& data) {\n \n                     if (ExtractDestination(script, destination)) {\n                         scriptAddress = CBitcoinAddress(destination);\n-                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                        if (!(scriptAddress.Get() == pubKeyAddress.Get())) {\n                             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                         }\n                     }"
      }
    ]
  },
  {
    "sha": "3a286abf8fe1ab1f4234c45de819fb1014141364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYTI4NmFiZjhmZTFhYjFmNDIzNGM0NWRlODE5ZmIxMDE0MTQxMzY0",
    "commit": {
      "author": {
        "name": "S. Matthew English",
        "email": "s-matthew-english@users.noreply.github.com",
        "date": "2016-10-20T10:39:48Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-20T10:39:48Z"
      },
      "message": "Eliminating Inconsistencies in Textual Output\n\nThere were discrepancies between usage of \"block chain\" and \"blockchain\", I've changed them to the latter. The reason for this was that Wikipedia when describing this data structure writes \"A blockchain \u2014 *originally block chain*\", so it seemed the more appropriate term.",
      "tree": {
        "sha": "12d9371a9a4cb11a562b708e29e26ee7d208c07b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12d9371a9a4cb11a562b708e29e26ee7d208c07b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3a286abf8fe1ab1f4234c45de819fb1014141364",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a286abf8fe1ab1f4234c45de819fb1014141364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3a286abf8fe1ab1f4234c45de819fb1014141364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a286abf8fe1ab1f4234c45de819fb1014141364/comments",
    "author": null,
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d705629b510e2a5b25c8ecac1898fed13a16a2"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c128885daf3632d4f2cf8c048da597731177eee",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3a286abf8fe1ab1f4234c45de819fb1014141364/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3a286abf8fe1ab1f4234c45de819fb1014141364/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=3a286abf8fe1ab1f4234c45de819fb1014141364",
        "patch": "@@ -151,7 +151,7 @@ UniValue getblockcount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockcount\\n\"\n-            \"\\nReturns the number of blocks in the longest block chain.\\n\"\n+            \"\\nReturns the number of blocks in the longest blockchain.\\n\"\n             \"\\nResult:\\n\"\n             \"n    (numeric) The current block count\\n\"\n             \"\\nExamples:\\n\"\n@@ -168,7 +168,7 @@ UniValue getbestblockhash(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getbestblockhash\\n\"\n-            \"\\nReturns the hash of the best (tip) block in the longest block chain.\\n\"\n+            \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\"\n             \"\\nResult\\n\"\n             \"\\\"hex\\\"      (string) the block hash hex encoded\\n\"\n             \"\\nExamples\\n\"\n@@ -1027,7 +1027,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockchaininfo\\n\"\n-            \"Returns an object containing various state info regarding block chain processing.\\n\"\n+            \"Returns an object containing various state info regarding blockchain processing.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",        (string) current network name as defined in BIP70 (main, test, regtest)\\n\""
      }
    ]
  },
  {
    "sha": "0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowYTI2MWI2M2ZkNGYxYjA3NDMxZjhhNjU3NjJlZjlmMWVmMWMxMWM4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-20T16:53:05Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-20T17:02:48Z"
      },
      "message": "Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip()",
      "tree": {
        "sha": "01b3883c657923616d1d80a6d2d8a68cc16954e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01b3883c657923616d1d80a6d2d8a68cc16954e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYCPi4AAoJECnUvLZBb1PsoKIQAJNS84/EK+acRP3svriAV9PG\ncmIQipkMVyJxqrKN76mExMC3d8kL211OkWJnM/qcFPcVYoNaFSKtA7kdDrAQVlp+\nLHaOLlGUoLVCaBpZlHdrsxAJN1iw562NZN5uY+6XsASVKdUFacLC4j51C3CCM7EI\n29u4zDVdiAiDBRVv5lWbjrzzwIxUHjm14rJb6bN5QBx3KfMDMH8c0xg8zmdXz2P3\nyaeKtVxRgySz/fESQEoGVzuHXwlJuGpQ+nkm6CCvKyrcP4is/KfMCbxWJhF2oaNd\nfSn4v2Fd+EuodirUY8utvdAwso7PJeFqxMqkvvywfWqoCYGx8UsB/+JVeC0c/dti\nZeqDMD03nDwOnMOS1YS+bwE811p/d89vH89C8QQnyR09NYfI6DFl60MLJ409y4it\nvr3pIAWwn46P7p9PEpyqeijilUCk1zZz+0/pkzEP5KEY6d3NAM+1GMKfZwG6mGsk\nL64JGuorAV5ocWzinZYQwWuZxZZD1ln3C8Ibc5iK8qB4gUWe3QxF9BEIoVVsVCEn\nS1jlYpAul9dK+5bsPTymLBlZQuWof0BTLjmydedXv9F4vrAz+09glAc/S/0ngnqJ\nI1ccIs3W5nphCn9iPHYUOr1Vz9jgmqbPAYDq1n+ZfI8K8bq9oBGeCDQ0EJENHPJf\nCB5lDK9YCSy5jtT+LTEN\n=cpJP\n-----END PGP SIGNATURE-----",
        "payload": "tree 01b3883c657923616d1d80a6d2d8a68cc16954e7\nparent f2d705629b510e2a5b25c8ecac1898fed13a16a2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1476982385 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476982968 +0200\n\nUse pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d705629b510e2a5b25c8ecac1898fed13a16a2"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "8c95f36db2f63fe3708d4ea9fff46c681135cf0c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8",
        "patch": "@@ -3006,9 +3006,8 @@ static void NotifyHeaderTip() {\n     CBlockIndex* pindexHeader = NULL;\n     {\n         LOCK(cs_main);\n-        if (!setBlockIndexCandidates.empty()) {\n-            pindexHeader = *setBlockIndexCandidates.rbegin();\n-        }\n+        pindexHeader = pindexBestHeader;\n+\n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n             fInitialBlockDownload = IsInitialBlockDownload();"
      }
    ]
  },
  {
    "sha": "3154d6e3a207812578cb37a505f140b46b17c945",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTU0ZDZlM2EyMDc4MTI1NzhjYjM3YTUwNWYxNDBiNDZiMTdjOTQ1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-20T16:56:03Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-20T17:02:59Z"
      },
      "message": "[Qt] use NotifyHeaderTip's height and date for the progress update",
      "tree": {
        "sha": "97f551eeb3e5621d3b403632c7ca231b357546a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/97f551eeb3e5621d3b403632c7ca231b357546a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3154d6e3a207812578cb37a505f140b46b17c945",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYCPjDAAoJECnUvLZBb1Ps57UP/2+2kS6fDGqI6OsTXkvDNKwe\n6elhVHHoK6ilA7pdcqwQUjUCSkidYHIdH8MtrELGpl9LJCwq39WZjVwOjeqWbgCQ\ngSyyCcDYJITU0DE6PLVwaueqTdKU1abLTFSze7cjWYPBuuXNpkwWHFv1/akZT5kx\nAEuNjlX6o3jDuND42/gNxIOy+Ui+4973raE4/aL6XuOmBJgg+Lo6w0yGG/brKtRE\nyNpfGV1rA/NCsWzb1rmwlFrQenV4fwZOHrf5OW50euIgQw0l+gsQ3Z0jyGGKLIcu\n6FX3PkefDWjnu0xvNQP0nrJBSe8KMXY6+xuDA4DZvPtQPCw9HHkso0ZpFSEN+hIu\nQ9tsN1BLcNTN3eiOOCjgV8tfZPc85uztXO8nFePEcCb/SnTFMJBoyoFTduADp3a6\nXj4atDM7Hd0kt1bVenqlYRrVCf31BDSABY/QFSLDWEdKPZT/yzoCVy98DSWAx0CB\n0xDioB2Tw5Js7J2MiAWDN3KqMeVGkuEZj7VKrFchsFtANRAqnsyJhc7pvownb4We\nefVV4Pa8+SfFf68WAC01wwIRmIdYyVLziZnxF0bRuTKPq3No9H0Kru6XPSLuse9z\nx7lDzIprTmfPnAE/stRQdZA36bgmVN1nTGclNIfcu7qRIafZzUsLDIBk2ocLuV61\nffvR8GOad7g3VX7WWQse\n=7kAj\n-----END PGP SIGNATURE-----",
        "payload": "tree 97f551eeb3e5621d3b403632c7ca231b357546a0\nparent 0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1476982563 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1476982979 +0200\n\n[Qt] use NotifyHeaderTip's height and date for the progress update\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3154d6e3a207812578cb37a505f140b46b17c945",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3154d6e3a207812578cb37a505f140b46b17c945",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3154d6e3a207812578cb37a505f140b46b17c945/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a261b63fd4f1b07431f8a65762ef9f1ef1c11c8"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 7,
      "deletions": 9
    },
    "files": [
      {
        "sha": "ee5102c4f99cfdc54106bcbc3018554d1f87fcea",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3154d6e3a207812578cb37a505f140b46b17c945/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3154d6e3a207812578cb37a505f140b46b17c945/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=3154d6e3a207812578cb37a505f140b46b17c945",
        "patch": "@@ -717,13 +717,10 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n {\n     if (modalOverlay)\n     {\n-        if (header) {\n-            /* use clientmodels getHeaderTipHeight and getHeaderTipTime because the NotifyHeaderTip signal does not fire when updating the best header */\n-            modalOverlay->setKnownBestHeight(clientModel->getHeaderTipHeight(), QDateTime::fromTime_t(clientModel->getHeaderTipTime()));\n-        }\n-        else {\n+        if (header)\n+            modalOverlay->setKnownBestHeight(count, blockDate);\n+        else\n             modalOverlay->tipUpdate(count, blockDate, nVerificationProgress);\n-        }\n     }\n     if (!clientModel)\n         return;"
      },
      {
        "sha": "27998f90c55975dedd7fcee15a023685548ba61f",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3154d6e3a207812578cb37a505f140b46b17c945/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3154d6e3a207812578cb37a505f140b46b17c945/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=3154d6e3a207812578cb37a505f140b46b17c945",
        "patch": "@@ -219,7 +219,7 @@ QLabel { color: rgb(40,40,40);  }</string>\n            <item row=\"0\" column=\"1\">\n             <widget class=\"QLabel\" name=\"numberOfBlocksLeft\">\n              <property name=\"text\">\n-              <string>unknown...</string>\n+              <string>Unknown...</string>\n              </property>\n             </widget>\n            </item>\n@@ -245,7 +245,7 @@ QLabel { color: rgb(40,40,40);  }</string>\n               </sizepolicy>\n              </property>\n              <property name=\"text\">\n-              <string>unknown...</string>\n+              <string>Unknown...</string>\n              </property>\n             </widget>\n            </item>"
      },
      {
        "sha": "1a843a07ace8117ac32c55c2f99e62113e912426",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3154d6e3a207812578cb37a505f140b46b17c945/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3154d6e3a207812578cb37a505f140b46b17c945/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=3154d6e3a207812578cb37a505f140b46b17c945",
        "patch": "@@ -132,7 +132,8 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     if (estimateNumHeadersLeft < 24 && hasBestHeader) {\n         ui->numberOfBlocksLeft->setText(QString::number(bestHeaderHeight - count));\n     } else {\n-        ui->expectedTimeLeft->setText(tr(\"Unknown. Syncing Headers...\"));\n+        ui->numberOfBlocksLeft->setText(tr(\"Unknown. Syncing Headers (%1)...\").arg(bestHeaderHeight));\n+        ui->expectedTimeLeft->setText(tr(\"Unknown...\"));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "0e228557f239d8e43bf94b19b3a96240e7a75359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZTIyODU1N2YyMzlkOGU0M2JmOTRiMTliM2E5NjI0MGU3YTc1MzU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-20T18:21:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-20T18:27:37Z"
      },
      "message": "Merge #8980: RPC: importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions\n\n7942d31 RPC: importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions (Luke Dashjr)",
      "tree": {
        "sha": "7dc4be0f525346fccb7d9cfb0fae1b94ed6a2aa3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dc4be0f525346fccb7d9cfb0fae1b94ed6a2aa3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0e228557f239d8e43bf94b19b3a96240e7a75359",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYCQyaAAoJEHSBCwEjRsmmuo8IAIB6+SJZMmtZnXrGhaoLRsD7\nacjGNEer934vI03/v6NwyxBUNWZjJiEL+sY4WGIcrl5RPXfxVA2kQCJaMU6iG41T\nsamwHzOw71hr9U3/WOlbAnfzhwX0K9gkjBQEexSNaLl9zE3Dli2ChB+SqCBIWflc\nLU+2DcyojErI9b/a6R2MYRdgVMYAjk0IKVc0PliUp/qrMxtCBEIvrjtvjlSY40Vi\nXQjjqAgpWOYJYTAOkKRFP8nESrEaAVU66sGtz1SYZgba5wneZkhSqIzZJS3q1RMH\nO1J81/8f/ti4G7wBmuc+uMoaeV6r+3vtLyKl44qhdct6lwXAlnWmE8HgD0ElRjI=\n=3z35\n-----END PGP SIGNATURE-----",
        "payload": "tree 7dc4be0f525346fccb7d9cfb0fae1b94ed6a2aa3\nparent f2d705629b510e2a5b25c8ecac1898fed13a16a2\nparent 7942d31d5fa0c78136fc51d4746d6d61eeb587a7\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1476987671 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1476988057 +0200\n\nMerge #8980: RPC: importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions\n\n7942d31 RPC: importmulti: Avoid using boost::variant::operator!=, which is only in newer boost versions (Luke Dashjr)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e228557f239d8e43bf94b19b3a96240e7a75359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0e228557f239d8e43bf94b19b3a96240e7a75359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e228557f239d8e43bf94b19b3a96240e7a75359/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2d705629b510e2a5b25c8ecac1898fed13a16a2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2d705629b510e2a5b25c8ecac1898fed13a16a2"
      },
      {
        "sha": "7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7942d31d5fa0c78136fc51d4746d6d61eeb587a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7942d31d5fa0c78136fc51d4746d6d61eeb587a7"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b638810e9dd4cd1cd207a47e7131b3625dac8ba4",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0e228557f239d8e43bf94b19b3a96240e7a75359/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0e228557f239d8e43bf94b19b3a96240e7a75359/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0e228557f239d8e43bf94b19b3a96240e7a75359",
        "patch": "@@ -808,7 +808,7 @@ UniValue processImport(const UniValue& data) {\n                 CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n \n                 // Consistency check.\n-                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                if (!isScript && !(pubKeyAddress.Get() == address.Get())) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                 }\n \n@@ -819,7 +819,7 @@ UniValue processImport(const UniValue& data) {\n \n                     if (ExtractDestination(script, destination)) {\n                         scriptAddress = CBitcoinAddress(destination);\n-                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                        if (!(scriptAddress.Get() == pubKeyAddress.Get())) {\n                             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                         }\n                     }\n@@ -881,7 +881,7 @@ UniValue processImport(const UniValue& data) {\n                 CBitcoinAddress pubKeyAddress = CBitcoinAddress(pubKey.GetID());\n \n                 // Consistency check.\n-                if (!isScript && pubKeyAddress.Get() != address.Get()) {\n+                if (!isScript && !(pubKeyAddress.Get() == address.Get())) {\n                     throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                 }\n \n@@ -892,7 +892,7 @@ UniValue processImport(const UniValue& data) {\n \n                     if (ExtractDestination(script, destination)) {\n                         scriptAddress = CBitcoinAddress(destination);\n-                        if (scriptAddress.Get() != pubKeyAddress.Get()) {\n+                        if (!(scriptAddress.Get() == pubKeyAddress.Get())) {\n                             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Consistency check failed\");\n                         }\n                     }"
      }
    ]
  },
  {
    "sha": "1ae5839ff024096c65e1590084f2720fa08d3e23",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWU1ODM5ZmYwMjQwOTZjNjVlMTU5MDA4NGYyNzIwZmEwOGQzZTIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T09:47:10Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T09:48:18Z"
      },
      "message": "moveonly: move `coincontrol` to `src/wallet`",
      "tree": {
        "sha": "cf001d4dff838416239b579d75cd6f4bc08e468f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf001d4dff838416239b579d75cd6f4bc08e468f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1ae5839ff024096c65e1590084f2720fa08d3e23",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ae5839ff024096c65e1590084f2720fa08d3e23",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1ae5839ff024096c65e1590084f2720fa08d3e23",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ae5839ff024096c65e1590084f2720fa08d3e23/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e228557f239d8e43bf94b19b3a96240e7a75359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e228557f239d8e43bf94b19b3a96240e7a75359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e228557f239d8e43bf94b19b3a96240e7a75359"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ab3104ec632d772214036423a46b258afbd5bbc3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ae5839ff024096c65e1590084f2720fa08d3e23/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ae5839ff024096c65e1590084f2720fa08d3e23/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=1ae5839ff024096c65e1590084f2720fa08d3e23",
        "patch": "@@ -87,7 +87,6 @@ BITCOIN_CORE_H = \\\n   checkpoints.h \\\n   checkqueue.h \\\n   clientversion.h \\\n-  coincontrol.h \\\n   coins.h \\\n   compat.h \\\n   compat/byteswap.h \\\n@@ -147,6 +146,7 @@ BITCOIN_CORE_H = \\\n   utiltime.h \\\n   validationinterface.h \\\n   versionbits.h \\\n+  wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/rpcwallet.h \\"
      },
      {
        "sha": "1a1671f0ee830560f9fa9a63d05c631492cd4382",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ae5839ff024096c65e1590084f2720fa08d3e23/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ae5839ff024096c65e1590084f2720fa08d3e23/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=1ae5839ff024096c65e1590084f2720fa08d3e23",
        "patch": "@@ -13,7 +13,7 @@\n #include \"txmempool.h\"\n #include \"walletmodel.h\"\n \n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"init.h\"\n #include \"main.h\" // For minRelayTxFee\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "f1c867e6f8ac3aad441cd9a52b949ddf461dfc34",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ae5839ff024096c65e1590084f2720fa08d3e23/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ae5839ff024096c65e1590084f2720fa08d3e23/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=1ae5839ff024096c65e1590084f2720fa08d3e23",
        "patch": "@@ -16,7 +16,7 @@\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"main.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n #include \"txmempool.h\""
      },
      {
        "sha": "78516770e602c55b9cc2e2ec7b23f645e6bcd726",
        "filename": "src/wallet/coincontrol.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ae5839ff024096c65e1590084f2720fa08d3e23/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ae5839ff024096c65e1590084f2720fa08d3e23/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=1ae5839ff024096c65e1590084f2720fa08d3e23",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_COINCONTROL_H\n-#define BITCOIN_COINCONTROL_H\n+#ifndef BITCOIN_WALLET_COINCONTROL_H\n+#define BITCOIN_WALLET_COINCONTROL_H\n \n #include \"primitives/transaction.h\"\n \n@@ -73,4 +73,4 @@ class CCoinControl\n     std::set<COutPoint> setSelected;\n };\n \n-#endif // BITCOIN_COINCONTROL_H\n+#endif // BITCOIN_WALLET_COINCONTROL_H",
        "previous_filename": "src/coincontrol.h"
      },
      {
        "sha": "60a769704b655e838be68369db9fa8b568c586b0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1ae5839ff024096c65e1590084f2720fa08d3e23/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1ae5839ff024096c65e1590084f2720fa08d3e23/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1ae5839ff024096c65e1590084f2720fa08d3e23",
        "patch": "@@ -8,7 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"chain.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\""
      }
    ]
  },
  {
    "sha": "7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YjFiZmEzYTg3ODZmMGMxNTRkOWRlZjAwM2FiMWI0MmYwOWZlNzE3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-21T12:29:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-21T12:30:02Z"
      },
      "message": "Merge #8985: Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip()\n\n3154d6e [Qt] use NotifyHeaderTip's height and date for the progress update (Jonas Schnelli)\n0a261b6 Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip() (Jonas Schnelli)",
      "tree": {
        "sha": "4cd7b54b5bc44124382fc8fbc0ac72e6bcc2e073",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4cd7b54b5bc44124382fc8fbc0ac72e6bcc2e073"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYCgpKAAoJECnUvLZBb1PsDB4P+wayylfLOOHy6o2q/zmAfBe5\nhHUQzNzyaplvWfYSq7/OhZhaftB7EaH16vkF+w7LdQWKn+owIxPLrxwJX854A4mf\nNUhK+IKcqj50oWTGu5DkELWTanMJUZHeWU1aDe4E58i+tRT/+H7/pZ70V6Q0jige\n1Hh2UH9/JYyUbcsyW9G6X6P+iPqRqfaRQAgC4h6y6v2boPMDmPpkyH2OEeQUSYoC\nU0XBMeIXy0qauiGVOEPAudQ9AoosQXJNkvZoaUaGgMKENv4in1jOx8HUinHMWYKi\nAvr0NNm04wXtgH0h5F8hhdZiqfleDBBC9yaHRN5RsO+lG0tgg2KNjFPGC0DTDj8j\nxCxwA/e+ky+34zOjeVtRZbyjvZc/YTS7ZyrLwHgagrAZ/xVG6+oLoM4k1qg4htmw\n+OiawQyGbI8hNVB1XzwvEiRsm2Fh/gPomzCCA56lbIwli5TtG4gyUYdNKEqVP/G8\neRmntOAF9BMiGn0H2ct/YKyEB3ZisVJYaVjCjnJEHiYAajBU6L4GXbOAPJAQaQva\n+IMP+32jY8IWGORixAL5h3aksLoCEM4WW7R8uWA0YVEj1Yi1Bv58OBDo0V8uTwnC\nLhCYLM+Vt9xM2PnbpCwpEXqbf+XDtUgAq9QwKwEypgiMxpAmYcVgSc7+WiP4S5q5\n1OtKMCXYVoS/JXUxgkYa\n=KGAD\n-----END PGP SIGNATURE-----",
        "payload": "tree 4cd7b54b5bc44124382fc8fbc0ac72e6bcc2e073\nparent 0e228557f239d8e43bf94b19b3a96240e7a75359\nparent 3154d6e3a207812578cb37a505f140b46b17c945\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1477052994 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1477053002 +0200\n\nMerge #8985: Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip()\n\n3154d6e [Qt] use NotifyHeaderTip's height and date for the progress update (Jonas Schnelli)\n0a261b6 Use pindexBestHeader instead of setBlockIndexCandidates for NotifyHeaderTip() (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e228557f239d8e43bf94b19b3a96240e7a75359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e228557f239d8e43bf94b19b3a96240e7a75359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e228557f239d8e43bf94b19b3a96240e7a75359"
      },
      {
        "sha": "3154d6e3a207812578cb37a505f140b46b17c945",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3154d6e3a207812578cb37a505f140b46b17c945",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3154d6e3a207812578cb37a505f140b46b17c945"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 9,
      "deletions": 12
    },
    "files": [
      {
        "sha": "8c95f36db2f63fe3708d4ea9fff46c681135cf0c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
        "patch": "@@ -3006,9 +3006,8 @@ static void NotifyHeaderTip() {\n     CBlockIndex* pindexHeader = NULL;\n     {\n         LOCK(cs_main);\n-        if (!setBlockIndexCandidates.empty()) {\n-            pindexHeader = *setBlockIndexCandidates.rbegin();\n-        }\n+        pindexHeader = pindexBestHeader;\n+\n         if (pindexHeader != pindexHeaderOld) {\n             fNotify = true;\n             fInitialBlockDownload = IsInitialBlockDownload();"
      },
      {
        "sha": "ee5102c4f99cfdc54106bcbc3018554d1f87fcea",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
        "patch": "@@ -717,13 +717,10 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n {\n     if (modalOverlay)\n     {\n-        if (header) {\n-            /* use clientmodels getHeaderTipHeight and getHeaderTipTime because the NotifyHeaderTip signal does not fire when updating the best header */\n-            modalOverlay->setKnownBestHeight(clientModel->getHeaderTipHeight(), QDateTime::fromTime_t(clientModel->getHeaderTipTime()));\n-        }\n-        else {\n+        if (header)\n+            modalOverlay->setKnownBestHeight(count, blockDate);\n+        else\n             modalOverlay->tipUpdate(count, blockDate, nVerificationProgress);\n-        }\n     }\n     if (!clientModel)\n         return;"
      },
      {
        "sha": "27998f90c55975dedd7fcee15a023685548ba61f",
        "filename": "src/qt/forms/modaloverlay.ui",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/qt/forms/modaloverlay.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/qt/forms/modaloverlay.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/modaloverlay.ui?ref=7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
        "patch": "@@ -219,7 +219,7 @@ QLabel { color: rgb(40,40,40);  }</string>\n            <item row=\"0\" column=\"1\">\n             <widget class=\"QLabel\" name=\"numberOfBlocksLeft\">\n              <property name=\"text\">\n-              <string>unknown...</string>\n+              <string>Unknown...</string>\n              </property>\n             </widget>\n            </item>\n@@ -245,7 +245,7 @@ QLabel { color: rgb(40,40,40);  }</string>\n               </sizepolicy>\n              </property>\n              <property name=\"text\">\n-              <string>unknown...</string>\n+              <string>Unknown...</string>\n              </property>\n             </widget>\n            </item>"
      },
      {
        "sha": "1a843a07ace8117ac32c55c2f99e62113e912426",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7b1bfa3a8786f0c154d9def003ab1b42f09fe717/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
        "patch": "@@ -132,7 +132,8 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n     if (estimateNumHeadersLeft < 24 && hasBestHeader) {\n         ui->numberOfBlocksLeft->setText(QString::number(bestHeaderHeight - count));\n     } else {\n-        ui->expectedTimeLeft->setText(tr(\"Unknown. Syncing Headers...\"));\n+        ui->numberOfBlocksLeft->setText(tr(\"Unknown. Syncing Headers (%1)...\").arg(bestHeaderHeight));\n+        ui->expectedTimeLeft->setText(tr(\"Unknown...\"));\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmIzZmFkZTNjMDIxYmZmYmZlYWE4OWUxNWIwMGNmY2JhNzNlMzcx",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T13:30:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T13:30:28Z"
      },
      "message": "Merge #8990: moveonly: move `coincontrol` to `src/wallet`\n\n1ae5839 moveonly: move `coincontrol` to `src/wallet` (Wladimir J. van der Laan)",
      "tree": {
        "sha": "b7a564a59ffff3cec381ee81eed34b834800932e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b7a564a59ffff3cec381ee81eed34b834800932e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYChh0AAoJEHSBCwEjRsmmX+0IAMA5YgFxSgY7kDCfCYqVvbEL\n4ok/mORZwdFw1IOSZpjq0oTjU80ZJb3TfZKphOtD4KkZxMPnXbxHulYOV5GDgzx0\nKHlmWhpuGjW+/4giuKPcgMlNyompzeOjOFLHdl33APcpyFXwaO/8oi17azepwX7t\nO/iQLk5XZqmIoUji221dP5HS/TyNRpaaGDGrFAzlWUYdRbktKUm8ybEyqqGBCWWB\nuAZFu/4+5HxEOPsVp5+nWzt7gBbrIZz1y9LDhy+VHRbR9ukbyWs7YFwo860tNrGy\nmYNzepSVQ5zt0qKXBG80Q0Q527Ixry3RkqGOLDh63YQVS8dNLA3VA8yjqm8xgII=\n=rfBd\n-----END PGP SIGNATURE-----",
        "payload": "tree b7a564a59ffff3cec381ee81eed34b834800932e\nparent 7b1bfa3a8786f0c154d9def003ab1b42f09fe717\nparent 1ae5839ff024096c65e1590084f2720fa08d3e23\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477056614 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477056628 +0200\n\nMerge #8990: moveonly: move `coincontrol` to `src/wallet`\n\n1ae5839 moveonly: move `coincontrol` to `src/wallet` (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7b1bfa3a8786f0c154d9def003ab1b42f09fe717",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7b1bfa3a8786f0c154d9def003ab1b42f09fe717"
      },
      {
        "sha": "1ae5839ff024096c65e1590084f2720fa08d3e23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ae5839ff024096c65e1590084f2720fa08d3e23",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ae5839ff024096c65e1590084f2720fa08d3e23"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "ab3104ec632d772214036423a46b258afbd5bbc3",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
        "patch": "@@ -87,7 +87,6 @@ BITCOIN_CORE_H = \\\n   checkpoints.h \\\n   checkqueue.h \\\n   clientversion.h \\\n-  coincontrol.h \\\n   coins.h \\\n   compat.h \\\n   compat/byteswap.h \\\n@@ -147,6 +146,7 @@ BITCOIN_CORE_H = \\\n   utiltime.h \\\n   validationinterface.h \\\n   versionbits.h \\\n+  wallet/coincontrol.h \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/rpcwallet.h \\"
      },
      {
        "sha": "1a1671f0ee830560f9fa9a63d05c631492cd4382",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
        "patch": "@@ -13,7 +13,7 @@\n #include \"txmempool.h\"\n #include \"walletmodel.h\"\n \n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"init.h\"\n #include \"main.h\" // For minRelayTxFee\n #include \"wallet/wallet.h\""
      },
      {
        "sha": "f1c867e6f8ac3aad441cd9a52b949ddf461dfc34",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
        "patch": "@@ -16,7 +16,7 @@\n #include \"walletmodel.h\"\n \n #include \"base58.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"main.h\" // mempool and minRelayTxFee\n #include \"ui_interface.h\"\n #include \"txmempool.h\""
      },
      {
        "sha": "78516770e602c55b9cc2e2ec7b23f645e6bcd726",
        "filename": "src/wallet/coincontrol.h",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
        "patch": "@@ -2,8 +2,8 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#ifndef BITCOIN_COINCONTROL_H\n-#define BITCOIN_COINCONTROL_H\n+#ifndef BITCOIN_WALLET_COINCONTROL_H\n+#define BITCOIN_WALLET_COINCONTROL_H\n \n #include \"primitives/transaction.h\"\n \n@@ -73,4 +73,4 @@ class CCoinControl\n     std::set<COutPoint> setSelected;\n };\n \n-#endif // BITCOIN_COINCONTROL_H\n+#endif // BITCOIN_WALLET_COINCONTROL_H",
        "previous_filename": "src/coincontrol.h"
      },
      {
        "sha": "60a769704b655e838be68369db9fa8b568c586b0",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fb3fade3c021bffbfeaa89e15b00cfcba73e371/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
        "patch": "@@ -8,7 +8,7 @@\n #include \"base58.h\"\n #include \"checkpoints.h\"\n #include \"chain.h\"\n-#include \"coincontrol.h\"\n+#include \"wallet/coincontrol.h\"\n #include \"consensus/consensus.h\"\n #include \"consensus/validation.h\"\n #include \"key.h\""
      }
    ]
  },
  {
    "sha": "5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWY5YTcxMTdjZmZiM2M3YjU3ZWYyZmMzZWQyYTg1MzRiMWRhM2Rm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T14:57:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T14:57:50Z"
      },
      "message": "Merge #8975: Chainparams: Trivial: In AppInit2(), s/Params()/chainparams/\n\n6f2f639 Chainparams: Trivial: In AppInit2(), s/Params()/chainparams/ (Jorge Tim\u00f3n)",
      "tree": {
        "sha": "26e82037ab3f628ff9ea166be80ddb1881086cd6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/26e82037ab3f628ff9ea166be80ddb1881086cd6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYCizuAAoJEHSBCwEjRsmmrNIH+gIHkzvB973d3DxaV907emlC\nPJEvznsTxyomHufA+yI3LwsqN7gEv+9FSxgoT4ytazKOAJRbFu4DaMFyoCNgozdJ\nEGu7lC7Lfw9wHq5USZqvRQBGTP4/OLFVJq6CyaJuO4GPt+RabW/diXfLjgdPDKvC\nE9AGB0HRklF8qKvfsNUglvUXnpSH+QNHxnKvvivehFwUe4cwXEpuKBQMCWSNEyUb\nwUN87u/La8LpxXRPGqveZf9+uBJNZrhktes/8lJhQWAkCXxgQlI5tZBKVB8Iv9XR\nMbJTkGU4Apy5Y9cwZsuWGWIIBnHuL6YaAMFZPwVDSoca91gLa2q1bRNhzTp3ebE=\n=M9KB\n-----END PGP SIGNATURE-----",
        "payload": "tree 26e82037ab3f628ff9ea166be80ddb1881086cd6\nparent 3fb3fade3c021bffbfeaa89e15b00cfcba73e371\nparent 6f2f639cdf12ee337dbb75ec5517bec841d4f348\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477061852 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477061870 +0200\n\nMerge #8975: Chainparams: Trivial: In AppInit2(), s/Params()/chainparams/\n\n6f2f639 Chainparams: Trivial: In AppInit2(), s/Params()/chainparams/ (Jorge Tim\u00f3n)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fb3fade3c021bffbfeaa89e15b00cfcba73e371",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3fb3fade3c021bffbfeaa89e15b00cfcba73e371"
      },
      {
        "sha": "6f2f639cdf12ee337dbb75ec5517bec841d4f348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f2f639cdf12ee337dbb75ec5517bec841d4f348",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f2f639cdf12ee337dbb75ec5517bec841d4f348"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e2f25eda744e386a9645992b15c2127d059a2bdb",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df",
        "patch": "@@ -960,8 +960,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         ::minRelayTxFee = CFeeRate(n);\n     }\n \n-    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !Params().RequireStandard());\n-    if (Params().RequireStandard() && !fRequireStandard)\n+    fRequireStandard = !GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());\n+    if (chainparams.RequireStandard() && !fRequireStandard)\n         return InitError(strprintf(\"acceptnonstdtxn is not currently supported for %s chain\", chainparams.NetworkIDString()));\n     nBytesPerSigOp = GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n@@ -996,7 +996,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     if (!mapMultiArgs[\"-bip9params\"].empty()) {\n         // Allow overriding BIP9 parameters for testing\n-        if (!Params().MineBlocksOnDemand()) {\n+        if (!chainparams.MineBlocksOnDemand()) {\n             return InitError(\"BIP9 parameters may only be overridden on regtest.\");\n         }\n         const vector<string>& deployments = mapMultiArgs[\"-bip9params\"];\n@@ -1447,7 +1447,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         }\n     }\n \n-    if (Params().GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n+    if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n         // Only advertize witness capabilities if they have a reasonable start time.\n         // This allows us to have the code merged without a defined softfork, by setting its\n         // end time to 0."
      }
    ]
  },
  {
    "sha": "3cf496d102d2cc4a5ff7da653f65917b2d5db029",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozY2Y0OTZkMTAyZDJjYzRhNWZmN2RhNjUzZjY1OTE3YjJkNWRiMDI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T14:58:20Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-21T14:58:44Z"
      },
      "message": "Merge #8968: Don't hold cs_main when calling ProcessNewBlock from a cmpctblock\n\n72ca7d9 Don't hold cs_main when calling ProcessNewBlock from a cmpctblock (Matt Corallo)",
      "tree": {
        "sha": "ab76bbe3603cde50443d621b638d69e4150db9cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab76bbe3603cde50443d621b638d69e4150db9cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3cf496d102d2cc4a5ff7da653f65917b2d5db029",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYCi0kAAoJEHSBCwEjRsmmA9YIAMC/C9dXcOzMz/iivQWZrcwB\nLpsHiPQCZoUH2yekAZz4PcWCJ3JhCN0g4mvSzqngW938RPvJSgIHc8iXtKKIb77w\npzwhPuU1TjSfQGKcTU6Z5Url2RUXfcYwh6A1vpAdSLFVXRM8yn/oRVYKDKLZX1CW\npGZhFm8vzGEXjs0ZxgNliIvWjdG7iPOclT+7jF3ra58A1BI4Xrh8R3Cpe00HaSjQ\nK+kz/kXyCrLFgv2mXu3IRYxMLADQPFDSaEBLry2qKnMslbzrk9458IsEAaldxYoc\ndGqKzEnBhZNiZ6om4MIc/wJKaZoPxtrEyvuz2EKDxC9VfTp2C7St2XNGtU0+BJ8=\n=zK+8\n-----END PGP SIGNATURE-----",
        "payload": "tree ab76bbe3603cde50443d621b638d69e4150db9cd\nparent 5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df\nparent 72ca7d924e3896838d2709d95f4c8cca670af8cf\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477061900 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477061924 +0200\n\nMerge #8968: Don't hold cs_main when calling ProcessNewBlock from a cmpctblock\n\n72ca7d9 Don't hold cs_main when calling ProcessNewBlock from a cmpctblock (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf496d102d2cc4a5ff7da653f65917b2d5db029",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf496d102d2cc4a5ff7da653f65917b2d5db029",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf496d102d2cc4a5ff7da653f65917b2d5db029/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5af9a7117cffb3c7b57ef2fc3ed2a8534b1da3df"
      },
      {
        "sha": "72ca7d924e3896838d2709d95f4c8cca670af8cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72ca7d924e3896838d2709d95f4c8cca670af8cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72ca7d924e3896838d2709d95f4c8cca670af8cf"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 26,
      "deletions": 21
    },
    "files": [
      {
        "sha": "df4f5e3959e0ea6afe96e52aaae8ff00eb2f7a17",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 21,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3cf496d102d2cc4a5ff7da653f65917b2d5db029/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3cf496d102d2cc4a5ff7da653f65917b2d5db029/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3cf496d102d2cc4a5ff7da653f65917b2d5db029",
        "patch": "@@ -5828,29 +5828,34 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         BlockTransactions resp;\n         vRecv >> resp;\n \n-        LOCK(cs_main);\n+        CBlock block;\n+        bool fBlockRead = false;\n+        {\n+            LOCK(cs_main);\n \n-        map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n-        if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n-                it->second.first != pfrom->GetId()) {\n-            LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n-            return true;\n-        }\n+            map<uint256, pair<NodeId, list<QueuedBlock>::iterator> >::iterator it = mapBlocksInFlight.find(resp.blockhash);\n+            if (it == mapBlocksInFlight.end() || !it->second.second->partialBlock ||\n+                    it->second.first != pfrom->GetId()) {\n+                LogPrint(\"net\", \"Peer %d sent us block transactions for block we weren't expecting\\n\", pfrom->id);\n+                return true;\n+            }\n \n-        PartiallyDownloadedBlock& partialBlock = *it->second.second->partialBlock;\n-        CBlock block;\n-        ReadStatus status = partialBlock.FillBlock(block, resp.txn);\n-        if (status == READ_STATUS_INVALID) {\n-            MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n-            Misbehaving(pfrom->GetId(), 100);\n-            LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->id);\n-            return true;\n-        } else if (status == READ_STATUS_FAILED) {\n-            // Might have collided, fall back to getdata now :(\n-            std::vector<CInv> invs;\n-            invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n-            pfrom->PushMessage(NetMsgType::GETDATA, invs);\n-        } else {\n+            PartiallyDownloadedBlock& partialBlock = *it->second.second->partialBlock;\n+            ReadStatus status = partialBlock.FillBlock(block, resp.txn);\n+            if (status == READ_STATUS_INVALID) {\n+                MarkBlockAsReceived(resp.blockhash); // Reset in-flight state in case of whitelist\n+                Misbehaving(pfrom->GetId(), 100);\n+                LogPrintf(\"Peer %d sent us invalid compact block/non-matching block transactions\\n\", pfrom->id);\n+                return true;\n+            } else if (status == READ_STATUS_FAILED) {\n+                // Might have collided, fall back to getdata now :(\n+                std::vector<CInv> invs;\n+                invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n+                pfrom->PushMessage(NetMsgType::GETDATA, invs);\n+            } else\n+                fBlockRead = true;\n+        } // Don't hold cs_main when we call into ProcessNewBlock\n+        if (fBlockRead) {\n             CValidationState state;\n             ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n             int nDoS;"
      }
    ]
  },
  {
    "sha": "dfe79060a62c8de098e75d527d97b99c3b10de50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZmU3OTA2MGE2MmM4ZGUwOThlNzVkNTI3ZDk3Yjk5YzNiMTBkZTUw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-21T16:15:19Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-21T16:15:19Z"
      },
      "message": "Add missing cs_main lock to ::GETBLOCKTXN processing\n\nNote that this is not a major issue as, in order for the missing\nlock to cause issues, you have to receive a GETBLOCKTXN message\nwhile reindexing, adding a block header via RPC, etc, which results\nin either a table rehash or an insert into the bucket which you are\ncurrently looking at.",
      "tree": {
        "sha": "e9532bb597d69a9607d981edeb22ae702a7a0d1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9532bb597d69a9607d981edeb22ae702a7a0d1b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dfe79060a62c8de098e75d527d97b99c3b10de50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe79060a62c8de098e75d527d97b99c3b10de50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dfe79060a62c8de098e75d527d97b99c3b10de50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe79060a62c8de098e75d527d97b99c3b10de50/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf496d102d2cc4a5ff7da653f65917b2d5db029",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf496d102d2cc4a5ff7da653f65917b2d5db029",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf496d102d2cc4a5ff7da653f65917b2d5db029"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "37daa08da9a260992012cd2b0523fc354c193d75",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dfe79060a62c8de098e75d527d97b99c3b10de50/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dfe79060a62c8de098e75d527d97b99c3b10de50/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=dfe79060a62c8de098e75d527d97b99c3b10de50",
        "patch": "@@ -5442,6 +5442,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         BlockTransactionsRequest req;\n         vRecv >> req;\n \n+        LOCK(cs_main);\n+\n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n         if (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)) {\n             LogPrintf(\"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->id);"
      }
    ]
  },
  {
    "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDgyMjJlODgyYjE4YzFmMjc5MzA4NjM2ZTAzYmVjZWVjZTJkYmYx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-21T17:39:23Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-21T17:39:46Z"
      },
      "message": "Merge #8982: Eliminating Inconsistencies in Textual Output\n\n3a286ab Eliminating Inconsistencies in Textual Output (S. Matthew English)",
      "tree": {
        "sha": "b4fbaf87d30889deb0bcd76c81419783f7099b93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b4fbaf87d30889deb0bcd76c81419783f7099b93"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f08222e882b18c1f279308636e03beceece2dbf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYClLiAAoJEC1/I3LlD+E3TeoIAJPbwJuUFSfhtD5Eqm4HZRci\n52BhHj4J2TmHgZxJrVuthADMdy/rFbUWOVqm2z3ejm3gr13C+0FdkjKgulSDvOvv\n4OXrwBym68locsPX7hJ+qOz0vA1knH/4Q1WCfqOW2cykYMQZjKzGufs9mVTxdQmV\nG+sIwZbid+yMBexWoSWuuvh5/Xd2cwt+CWKVX102Vu0EKzyQ+zpAqea2Eyu6kRBg\noH+BLK8Suc8TfVXOO6W8nUTZie5Js39+D5SbTIMBBx9X8gcRrK2FX5cfn3bwc2yK\nWKaHYBzCC0M6IH9DuHP1ERrrt2cXcU2kSOSuBpLbdzh6DKPenLeqgA4yQhZgcVo=\n=RxDy\n-----END PGP SIGNATURE-----",
        "payload": "tree b4fbaf87d30889deb0bcd76c81419783f7099b93\nparent 3cf496d102d2cc4a5ff7da653f65917b2d5db029\nparent 3a286abf8fe1ab1f4234c45de819fb1014141364\nauthor MarcoFalke <falke.marco@gmail.com> 1477071563 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1477071586 +0200\n\nMerge #8982: Eliminating Inconsistencies in Textual Output\n\n3a286ab Eliminating Inconsistencies in Textual Output (S. Matthew English)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3cf496d102d2cc4a5ff7da653f65917b2d5db029",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3cf496d102d2cc4a5ff7da653f65917b2d5db029",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3cf496d102d2cc4a5ff7da653f65917b2d5db029"
      },
      {
        "sha": "3a286abf8fe1ab1f4234c45de819fb1014141364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3a286abf8fe1ab1f4234c45de819fb1014141364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3a286abf8fe1ab1f4234c45de819fb1014141364"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "7c128885daf3632d4f2cf8c048da597731177eee",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f08222e882b18c1f279308636e03beceece2dbf1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f08222e882b18c1f279308636e03beceece2dbf1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=f08222e882b18c1f279308636e03beceece2dbf1",
        "patch": "@@ -151,7 +151,7 @@ UniValue getblockcount(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockcount\\n\"\n-            \"\\nReturns the number of blocks in the longest block chain.\\n\"\n+            \"\\nReturns the number of blocks in the longest blockchain.\\n\"\n             \"\\nResult:\\n\"\n             \"n    (numeric) The current block count\\n\"\n             \"\\nExamples:\\n\"\n@@ -168,7 +168,7 @@ UniValue getbestblockhash(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getbestblockhash\\n\"\n-            \"\\nReturns the hash of the best (tip) block in the longest block chain.\\n\"\n+            \"\\nReturns the hash of the best (tip) block in the longest blockchain.\\n\"\n             \"\\nResult\\n\"\n             \"\\\"hex\\\"      (string) the block hash hex encoded\\n\"\n             \"\\nExamples\\n\"\n@@ -1027,7 +1027,7 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n     if (request.fHelp || request.params.size() != 0)\n         throw runtime_error(\n             \"getblockchaininfo\\n\"\n-            \"Returns an object containing various state info regarding block chain processing.\\n\"\n+            \"Returns an object containing various state info regarding blockchain processing.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",        (string) current network name as defined in BIP70 (main, test, regtest)\\n\""
      }
    ]
  },
  {
    "sha": "1d8e12ba48154b2c59213e92efb50958d430a007",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDhlMTJiYTQ4MTU0YjJjNTkyMTNlOTJlZmI1MDk1OGQ0MzBhMDA3",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-10-21T21:42:37Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-10-21T21:42:37Z"
      },
      "message": "Fix doxygen comment: the transaction is returned in txOut",
      "tree": {
        "sha": "bc6e1a6324127be31bd198cb006f9d004e4c19b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc6e1a6324127be31bd198cb006f9d004e4c19b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d8e12ba48154b2c59213e92efb50958d430a007",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8e12ba48154b2c59213e92efb50958d430a007",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d8e12ba48154b2c59213e92efb50958d430a007",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8e12ba48154b2c59213e92efb50958d430a007/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4e1c20de2a91a16ace9ed15d34a25abce941d45b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d8e12ba48154b2c59213e92efb50958d430a007/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d8e12ba48154b2c59213e92efb50958d430a007/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1d8e12ba48154b2c59213e92efb50958d430a007",
        "patch": "@@ -1584,7 +1584,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return res;\n }\n \n-/** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n+/** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n     CBlockIndex *pindexSlow = NULL;"
      }
    ]
  },
  {
    "sha": "f48211b700d171f7bcee7d3088269fdaaf1b5c13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNDgyMTFiNzAwZDE3MWY3YmNlZTdkMzA4ODI2OWZkYWFmMWI1YzEz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-15T10:20:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Bypass removeRecursive in removeForReorg",
      "tree": {
        "sha": "9063fad1acb61c2cd89df5682ea4763f374c6db9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9063fad1acb61c2cd89df5682ea4763f374c6db9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "9816c9dcbbf7c493a9dcc22eaeb965b398aa0789",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f48211b700d171f7bcee7d3088269fdaaf1b5c13/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f48211b700d171f7bcee7d3088269fdaaf1b5c13/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=f48211b700d171f7bcee7d3088269fdaaf1b5c13",
        "patch": "@@ -541,24 +541,24 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n-    list<CTransaction> transactionsToRemove;\n+    setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n         if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n-            transactionsToRemove.push_back(tx);\n+            txToRemove.insert(it);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n                 const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-\t\tif (nCheckFrequency != 0) assert(coins);\n+                if (nCheckFrequency != 0) assert(coins);\n                 if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n-                    transactionsToRemove.push_back(tx);\n+                    txToRemove.insert(it);\n                     break;\n                 }\n             }\n@@ -567,10 +567,11 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             mapTx.modify(it, update_lock_points(lp));\n         }\n     }\n-    BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n-        list<CTransaction> removed;\n-        removeRecursive(tx, removed);\n+    setEntries setAllRemoves;\n+    for (txiter it : txToRemove) {\n+        CalculateDescendants(it, setAllRemoves);\n     }\n+    RemoveStaged(setAllRemoves, false);\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)"
      }
    ]
  },
  {
    "sha": "51f278329d43398428d60f5986f8d29a2041d28d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWYyNzgzMjlkNDMzOTg0MjhkNjBmNTk4NmY4ZDI5YTIwNDFkMjhk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-15T11:10:57Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Make removed and conflicted arguments optional to remove",
      "tree": {
        "sha": "bed01adf0a9ef92f90711dc08ca05934c582da6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bed01adf0a9ef92f90711dc08ca05934c582da6f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51f278329d43398428d60f5986f8d29a2041d28d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51f278329d43398428d60f5986f8d29a2041d28d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51f278329d43398428d60f5986f8d29a2041d28d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51f278329d43398428d60f5986f8d29a2041d28d/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f48211b700d171f7bcee7d3088269fdaaf1b5c13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f48211b700d171f7bcee7d3088269fdaaf1b5c13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f48211b700d171f7bcee7d3088269fdaaf1b5c13"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 31,
      "deletions": 35
    },
    "files": [
      {
        "sha": "a60e47504ff21cf86dcaa01963dfbc1ac4415fdc",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -2768,10 +2768,9 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n         std::vector<uint256> vHashUpdate;\n         BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n             // ignore validation errors in resurrected transactions\n-            list<CTransaction> removed;\n             CValidationState stateDummy;\n             if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n-                mempool.removeRecursive(tx, removed);\n+                mempool.removeRecursive(tx);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());\n             }\n@@ -2840,7 +2839,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n     // Remove conflicting transactions from the mempool.;\n-    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n+    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, &txConflicted, !IsInitialBlockDownload());\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n "
      },
      {
        "sha": "f3f1befbc0912cd502a4a47c6fcd690f17ad075a",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -81,7 +81,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2].GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n         std::list<CTransaction> removed;\n-        pool.removeRecursive(block.vtx[2], removed);\n+        pool.removeRecursive(block.vtx[2], &removed);\n         BOOST_CHECK_EQUAL(removed.size(), 1);\n \n         CBlock block2;"
      },
      {
        "sha": "003daa203f2ed304632ba847615ee0ab42904007",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 15,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -58,12 +58,12 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     std::list<CTransaction> removed;\n \n     // Nothing in pool, remove should do nothing:\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n \n     // Just the parent:\n     testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 1);\n     removed.clear();\n     \n@@ -75,16 +75,16 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n-    testPool.removeRecursive(txChild[0], removed);\n+    testPool.removeRecursive(txChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 2);\n     removed.clear();\n     // ... make sure grandchild and child are gone:\n-    testPool.removeRecursive(txGrandChild[0], removed);\n+    testPool.removeRecursive(txGrandChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n-    testPool.removeRecursive(txChild[0], removed);\n+    testPool.removeRecursive(txChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n     // Remove parent, all children/grandchildren should go:\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 5);\n     BOOST_CHECK_EQUAL(testPool.size(), 0);\n     removed.clear();\n@@ -97,7 +97,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     }\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 6);\n     BOOST_CHECK_EQUAL(testPool.size(), 0);\n     removed.clear();\n@@ -281,12 +281,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 10);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n-    std::list<CTransaction> removed;\n-    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx(), removed);\n+    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx());\n     CheckSort<descendant_score>(pool, snapshotOrder);\n \n-    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx(), removed);\n-    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx(), removed);\n+    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx());\n+    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx());\n     /* Now check the sort on the mining score index.\n      * Final order should be:\n      *\n@@ -413,8 +412,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     /* after tx6 is mined, tx7 should move up in the sort */\n     std::vector<CTransaction> vtx;\n     vtx.push_back(tx6);\n-    std::list<CTransaction> dummy;\n-    pool.removeForBlock(vtx, 1, dummy, false);\n+    pool.removeForBlock(vtx, 1, NULL, false);\n \n     sortedOrder.erase(sortedOrder.begin()+1);\n     sortedOrder.pop_back();\n@@ -549,12 +547,11 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n-    std::list<CTransaction> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n     // ... we should keep the same min fee until we get a block\n-    pool.removeForBlock(vtx, 1, conflicts);\n+    pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n     // ... then feerate should drop 1/2 each halflife"
      },
      {
        "sha": "a94979fd77d0734d633b02a0c6b91046b3cc62de",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -137,8 +137,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     // Test that packages above the min relay fee do get included, even if one\n     // of the transactions is below the min relay fee\n     // Remove the low fee transaction and replace with a higher fee transaction\n-    std::list<CTransaction> dummy;\n-    mempool.removeRecursive(tx, dummy);\n+    mempool.removeRecursive(tx);\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse+2).FromTx(tx));"
      },
      {
        "sha": "f57c24270c112f2589c16e47cfb03a4d0d493375",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -46,7 +46,6 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     for (unsigned int i = 0; i < 128; i++)\n         garbage.push_back('X');\n     CMutableTransaction tx;\n-    std::list<CTransaction> dummyConflicted;\n     tx.vin.resize(1);\n     tx.vin[0].scriptSig = garbage;\n     tx.vout.resize(1);\n@@ -81,7 +80,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 txHashes[9-h].pop_back();\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n         if (blocknum == 30) {\n             // At this point we should need to combine 5 buckets to get enough data points\n@@ -125,7 +124,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n     // We haven't decayed the moving average enough so we still have enough data points in every bucket\n     while (blocknum < 250)\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n \n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n@@ -146,7 +145,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 txHashes[j].push_back(hash);\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n     }\n \n     int answerFound;\n@@ -167,7 +166,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             txHashes[j].pop_back();\n         }\n     }\n-    mpool.removeForBlock(block, 265, dummyConflicted);\n+    mpool.removeForBlock(block, 265);\n     block.clear();\n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n@@ -187,7 +186,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                     block.push_back(*ptx);\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n     }\n     for (int i = 1; i < 10; i++) {"
      },
      {
        "sha": "193542ee5e619cee2da07a9e39ff5b335fe04833",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -503,7 +503,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransaction>& removed)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransaction>* removed)\n {\n     // Remove transaction from memory pool\n     {\n@@ -530,8 +530,10 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n         BOOST_FOREACH(txiter it, txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n-        BOOST_FOREACH(txiter it, setAllRemoves) {\n-            removed.push_back(it->GetTx());\n+        if (removed) {\n+            BOOST_FOREACH(txiter it, setAllRemoves) {\n+                removed->push_back(it->GetTx());\n+            }\n         }\n         RemoveStaged(setAllRemoves, false);\n     }\n@@ -574,7 +576,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     RemoveStaged(setAllRemoves, false);\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n@@ -595,7 +597,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                                std::list<CTransaction>& conflicts, bool fCurrentEstimate)\n+                                std::list<CTransaction>* conflicts, bool fCurrentEstimate)\n {\n     LOCK(cs);\n     std::vector<CTxMemPoolEntry> entries;"
      },
      {
        "sha": "297f5b8e5a261889a6ae5280f794a05a8f8e281a",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51f278329d43398428d60f5986f8d29a2041d28d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=51f278329d43398428d60f5986f8d29a2041d28d",
        "patch": "@@ -521,11 +521,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void removeRecursive(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n-    void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                        std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n+                        std::list<CTransaction>* conflicts = NULL, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);"
      }
    ]
  },
  {
    "sha": "4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MTAwNDk5ZGI0ZTg4NmQ3YTlhZDJkY2Y0MDA3Y2U0NGZiMmMxYTYy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-15T10:57:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Return shared_ptr<CTransaction> from mempool removes",
      "tree": {
        "sha": "0d0ee0c1cf38fa43e84f5689ff5905e580f0e02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d0ee0c1cf38fa43e84f5689ff5905e580f0e02a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51f278329d43398428d60f5986f8d29a2041d28d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51f278329d43398428d60f5986f8d29a2041d28d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51f278329d43398428d60f5986f8d29a2041d28d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "0e97b1ea1470b7cda7c0c99211c79cb680650104",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -2803,7 +2803,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::list<CTransaction> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>> &txChanged)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::vector<std::shared_ptr<const CTransaction>> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>> &txChanged)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2926,7 +2926,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::list<CTransaction>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>>& txChanged)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::vector<std::shared_ptr<const CTransaction>>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>>& txChanged)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -3037,7 +3037,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             break;\n \n         const CBlockIndex *pindexFork;\n-        std::list<CTransaction> txConflicted;\n+        std::vector<std::shared_ptr<const CTransaction>> txConflicted;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n@@ -3068,9 +3068,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n-        BOOST_FOREACH(const CTransaction &tx, txConflicted)\n+        for(std::shared_ptr<const CTransaction> tx : txConflicted)\n         {\n-            GetMainSignals().SyncTransaction(tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+            GetMainSignals().SyncTransaction(*tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n         for(unsigned int i = 0; i < txChanged.size(); i++)"
      },
      {
        "sha": "b0d9184816ee9770465f1b9e561e37b42dd933fd",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -80,7 +80,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n \n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2].GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n-        std::list<CTransaction> removed;\n+        std::vector<std::shared_ptr<const CTransaction>> removed;\n         pool.removeRecursive(block.vtx[2], &removed);\n         BOOST_CHECK_EQUAL(removed.size(), 1);\n "
      },
      {
        "sha": "555d36faacc87211433a42de0629ecc515f50099",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -55,7 +55,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n \n     CTxMemPool testPool(CFeeRate(0));\n-    std::list<CTransaction> removed;\n+    std::vector<std::shared_ptr<const CTransaction>> removed;\n \n     // Nothing in pool, remove should do nothing:\n     testPool.removeRecursive(txParent, &removed);\n@@ -547,6 +547,7 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n+    std::vector<std::shared_ptr<const CTransaction>> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);"
      },
      {
        "sha": "e5d28ac2eaa8b74f71e24fc7609de90622a19346",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -503,7 +503,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransaction>* removed)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, std::vector<std::shared_ptr<const CTransaction>>* removed)\n {\n     // Remove transaction from memory pool\n     {\n@@ -532,7 +532,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n         }\n         if (removed) {\n             BOOST_FOREACH(txiter it, setAllRemoves) {\n-                removed->push_back(it->GetTx());\n+                removed->emplace_back(it->GetSharedTx());\n             }\n         }\n         RemoveStaged(setAllRemoves, false);\n@@ -576,7 +576,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     RemoveStaged(setAllRemoves, false);\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed)\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n@@ -597,7 +597,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                                std::list<CTransaction>* conflicts, bool fCurrentEstimate)\n+                                std::vector<std::shared_ptr<const CTransaction>>* conflicts, bool fCurrentEstimate)\n {\n     LOCK(cs);\n     std::vector<CTxMemPoolEntry> entries;"
      },
      {
        "sha": "1a7e054e376a97ef842fc387768b50a9d4baa373",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef BITCOIN_TXMEMPOOL_H\n #define BITCOIN_TXMEMPOOL_H\n \n-#include <list>\n #include <memory>\n #include <set>\n \n@@ -521,11 +520,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n+    void removeRecursive(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed = NULL);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n-    void removeConflicts(const CTransaction &tx, std::list<CTransaction>* removed = NULL);\n+    void removeConflicts(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed = NULL);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                        std::list<CTransaction>* conflicts = NULL, bool fCurrentEstimate = true);\n+                        std::vector<std::shared_ptr<const CTransaction>>* conflicts = NULL, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);"
      }
    ]
  },
  {
    "sha": "0334430b396acd1b1c248ad98c6fdbd50c4c4309",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMzM0NDMwYjM5NmFjZDFiMWMyNDhhZDk4YzZmZGJkNTBjNGM0MzA5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-27T23:26:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-22T02:22:43Z"
      },
      "message": "Add some missing includes",
      "tree": {
        "sha": "49b905340fd7b3be52ab8deae49d1fe98a64be2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49b905340fd7b3be52ab8deae49d1fe98a64be2b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0334430b396acd1b1c248ad98c6fdbd50c4c4309",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0334430b396acd1b1c248ad98c6fdbd50c4c4309",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0334430b396acd1b1c248ad98c6fdbd50c4c4309",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0334430b396acd1b1c248ad98c6fdbd50c4c4309/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4100499db4e886d7a9ad2dcf4007ce44fb2c1a62"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 4,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bb2638c3b7808e43972c0fd6a7fed1b7aa43d6a4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0334430b396acd1b1c248ad98c6fdbd50c4c4309/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0334430b396acd1b1c248ad98c6fdbd50c4c4309/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0334430b396acd1b1c248ad98c6fdbd50c4c4309",
        "patch": "@@ -8,6 +8,10 @@\n \n #include <memory>\n #include <set>\n+#include <map>\n+#include <vector>\n+#include <utility>\n+#include <string>\n \n #include \"amount.h\"\n #include \"coins.h\""
      }
    ]
  },
  {
    "sha": "fd29348dbe82abb3a315d6226332c7470c2c88f2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDI5MzQ4ZGJlODJhYmIzYTMxNWQ2MjI2MzMyYzc0NzBjMmM4OGYy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-24T07:18:16Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-24T07:18:27Z"
      },
      "message": "Merge #8993: Trivial: Fix doxygen comment: the transaction is returned in txOut\n\n1d8e12b Fix doxygen comment: the transaction is returned in txOut (Pavel Jan\u00edk)",
      "tree": {
        "sha": "bc6e1a6324127be31bd198cb006f9d004e4c19b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc6e1a6324127be31bd198cb006f9d004e4c19b8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd29348dbe82abb3a315d6226332c7470c2c88f2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYDbXDAAoJEHSBCwEjRsmm3d8H/0oZfB0p5wCIL3rAI4ZGa/rB\nN59OS8X09B05bAV4nvOg+d0Bw4ef6HIcPLhlO1nyEmxGWf/NaWwX3Zvxh/G8a4wj\ng89n1PMYZIKbtATHC/54+5qgSOavJLzDDe8ojnMnP9C7HV/MXic5j6CMcK/+w6qn\n9w7ZVn4kZGg9T0eDPm1/YYhlgNhbLA/lJ62rSSb1pwUqQQLMAvNpZHytPs5Clvjc\n78xLwqGJFAf6GAdYTwPFB0dJpANc0a7D8oL30/YIHLKa3JmoHc16Q36zi0H2k2h8\nLLWytST0/jtorgr/DW3xIHDk3VicyxtZ505dwjcNgOj6rGh8pFUPw+jEIf55jgg=\n=xtj8\n-----END PGP SIGNATURE-----",
        "payload": "tree bc6e1a6324127be31bd198cb006f9d004e4c19b8\nparent f08222e882b18c1f279308636e03beceece2dbf1\nparent 1d8e12ba48154b2c59213e92efb50958d430a007\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477293496 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477293507 +0200\n\nMerge #8993: Trivial: Fix doxygen comment: the transaction is returned in txOut\n\n1d8e12b Fix doxygen comment: the transaction is returned in txOut (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29348dbe82abb3a315d6226332c7470c2c88f2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd29348dbe82abb3a315d6226332c7470c2c88f2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29348dbe82abb3a315d6226332c7470c2c88f2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1"
      },
      {
        "sha": "1d8e12ba48154b2c59213e92efb50958d430a007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d8e12ba48154b2c59213e92efb50958d430a007",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d8e12ba48154b2c59213e92efb50958d430a007"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4e1c20de2a91a16ace9ed15d34a25abce941d45b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd29348dbe82abb3a315d6226332c7470c2c88f2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd29348dbe82abb3a315d6226332c7470c2c88f2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fd29348dbe82abb3a315d6226332c7470c2c88f2",
        "patch": "@@ -1584,7 +1584,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return res;\n }\n \n-/** Return transaction in tx, and if it was found inside a block, its hash is placed in hashBlock */\n+/** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n     CBlockIndex *pindexSlow = NULL;"
      }
    ]
  },
  {
    "sha": "3421e746017079b119a661108334d58e4bfde34b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDIxZTc0NjAxNzA3OWIxMTlhNjYxMTA4MzM0ZDU4ZTRiZmRlMzRi",
    "commit": {
      "author": {
        "name": "unsystemizer",
        "email": "unsystemizer@users.noreply.github.com",
        "date": "2016-10-24T07:49:46Z"
      },
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2016-10-24T07:49:46Z"
      },
      "message": "Clarify `listenonion`\n\n> This new feature is enabled by default if Bitcoin Core is listening, and a connection to Tor can be made. It can be configured with the -listenonion, -torcontrol and -torpassword settings. To show verbose debugging information, pass -debug=tor.\r\n\r\nBut it is correct to say that the feature is enabled *regardless* of whether a connection to Tor can be made.\r\n\r\nI propose to clarify that so that users can eliminate these in their logs (when `listen=1` and no Tor).\r\nAnd I think it's okay to clarify about the `listen` option, because on several occasions when I read this before I always assumed `listening` meant `server=1` which cost me a lot of time in troubleshooting.\r\n\r\n```\r\n2016-10-24 06:19:22.551029 tor: Error connecting to Tor control socket\r\n2016-10-24 06:19:22.551700 tor: Not connected to Tor control port 127.0.0.1:9051, trying to reconnect\r\n```\r\n\r\n### What version of bitcoin-core are you using?\r\n0.12.1",
      "tree": {
        "sha": "7bdcc9ae176ec83d7eb5ab0c54cc7f3e1ce5575d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7bdcc9ae176ec83d7eb5ab0c54cc7f3e1ce5575d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3421e746017079b119a661108334d58e4bfde34b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3421e746017079b119a661108334d58e4bfde34b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3421e746017079b119a661108334d58e4bfde34b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3421e746017079b119a661108334d58e4bfde34b/comments",
    "author": {
      "login": "unsystemizer",
      "id": 13134193,
      "node_id": "MDQ6VXNlcjEzMTM0MTkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/13134193?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/unsystemizer",
      "html_url": "https://github.com/unsystemizer",
      "followers_url": "https://api.github.com/users/unsystemizer/followers",
      "following_url": "https://api.github.com/users/unsystemizer/following{/other_user}",
      "gists_url": "https://api.github.com/users/unsystemizer/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/unsystemizer/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/unsystemizer/subscriptions",
      "organizations_url": "https://api.github.com/users/unsystemizer/orgs",
      "repos_url": "https://api.github.com/users/unsystemizer/repos",
      "events_url": "https://api.github.com/users/unsystemizer/events{/privacy}",
      "received_events_url": "https://api.github.com/users/unsystemizer/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "web-flow",
      "id": 19864447,
      "node_id": "MDQ6VXNlcjE5ODY0NDQ3",
      "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/web-flow",
      "html_url": "https://github.com/web-flow",
      "followers_url": "https://api.github.com/users/web-flow/followers",
      "following_url": "https://api.github.com/users/web-flow/following{/other_user}",
      "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions",
      "organizations_url": "https://api.github.com/users/web-flow/orgs",
      "repos_url": "https://api.github.com/users/web-flow/repos",
      "events_url": "https://api.github.com/users/web-flow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/web-flow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd29348dbe82abb3a315d6226332c7470c2c88f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29348dbe82abb3a315d6226332c7470c2c88f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd29348dbe82abb3a315d6226332c7470c2c88f2"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a05979fca84e3758c1ff0f82c560468fe0a3ec10",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3421e746017079b119a661108334d58e4bfde34b/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3421e746017079b119a661108334d58e4bfde34b/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=3421e746017079b119a661108334d58e4bfde34b",
        "patch": "@@ -99,10 +99,10 @@ This means that if Tor is running (and proper authentication has been configured\n Bitcoin Core automatically creates a hidden service to listen on. This will positively \n affect the number of available .onion nodes.\n \n-This new feature is enabled by default if Bitcoin Core is listening, and\n-a connection to Tor can be made. It can be configured with the `-listenonion`,\n-`-torcontrol` and `-torpassword` settings. To show verbose debugging\n-information, pass `-debug=tor`.\n+This new feature is enabled by default if Bitcoin Core is listening (`-listen`), and\n+requires a Tor connection to work. It can be explicitly disabled with `-listenonion=0`\n+and, if not disabled, configured using the `-torcontrol` and `-torpassword` settings.\n+To show verbose debugging information, pass `-debug=tor`.\n \n Connecting to Tor's control socket API requires one of two authentication methods to be \n configured. For cookie authentication the user running bitcoind must have write access "
      }
    ]
  },
  {
    "sha": "ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWQyMmQwMzVhYzBmNzY5YzljN2NjMjFhZDI0ZDJjYWFmYjRiNGU5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-24T09:17:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-24T09:17:07Z"
      },
      "message": "Merge #8995: Add missing cs_main lock to ::GETBLOCKTXN processing\n\ndfe7906 Add missing cs_main lock to ::GETBLOCKTXN processing (Matt Corallo)",
      "tree": {
        "sha": "8eca057f96c143b1dfdd86a8807b7ccba427c1fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8eca057f96c143b1dfdd86a8807b7ccba427c1fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYDdGTAAoJEHSBCwEjRsmmuNUIAL2qhYSZmsLmDLgJMDiP+0km\nGa5qiFLYaV83cXgfwRlDXuth0VoFCed+1dQCy2B/p3xy/A2tHWosce6C2HTYFkMb\nWlwZ1UJb6eqK7uH/LiaoI0vgcLSdWZkh7DZ5oAid8R6t0QQBDjydeEGgbdqpCCa2\nhKT1Vq9h5EzBCBZlA6DFSRmRIdgcTen6Yx7OifO53YnOraXv3AvUAmYK5BfVh0vv\nQ5RXU8c5Dp7anEi7Z8/9tMLgaLZY/Mckh1poZ14L/VtZbk9pkp2azkhpJHKREUXE\nplrQBIvxd1IolWvShae2UeLmJwnE4U/oHrlHq2ZJtfnwBGmQCZi84IaNjdTXYu8=\n=iW8a\n-----END PGP SIGNATURE-----",
        "payload": "tree 8eca057f96c143b1dfdd86a8807b7ccba427c1fc\nparent fd29348dbe82abb3a315d6226332c7470c2c88f2\nparent dfe79060a62c8de098e75d527d97b99c3b10de50\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477300624 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477300627 +0200\n\nMerge #8995: Add missing cs_main lock to ::GETBLOCKTXN processing\n\ndfe7906 Add missing cs_main lock to ::GETBLOCKTXN processing (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd29348dbe82abb3a315d6226332c7470c2c88f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd29348dbe82abb3a315d6226332c7470c2c88f2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd29348dbe82abb3a315d6226332c7470c2c88f2"
      },
      {
        "sha": "dfe79060a62c8de098e75d527d97b99c3b10de50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dfe79060a62c8de098e75d527d97b99c3b10de50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dfe79060a62c8de098e75d527d97b99c3b10de50"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9c0f25950a212105f175adc8969277db83a05d71",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
        "patch": "@@ -5442,6 +5442,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         BlockTransactionsRequest req;\n         vRecv >> req;\n \n+        LOCK(cs_main);\n+\n         BlockMap::iterator it = mapBlockIndex.find(req.blockhash);\n         if (it == mapBlockIndex.end() || !(it->second->nStatus & BLOCK_HAVE_DATA)) {\n             LogPrintf(\"Peer %d sent us a getblocktxn for a block we don't have\", pfrom->id);"
      }
    ]
  },
  {
    "sha": "fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTFjM2MyZWIwYTE4NTNlZDBlMDY2MmZjMmJkYmNhNTFlMDVjY2Y1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-24T19:38:20Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-24T20:12:48Z"
      },
      "message": "[net] Remove assert(nMaxInbound > 0)\n\nnMaxInbound might very well be 0 or -1, if the user prefers to keep\na small number of maxconnections.\n\nNote: nMaxInbound of -1 means that the user set maxconnections\nto 8 or less, but we still want to keep an additional slot for\nthe feeler connection.",
      "tree": {
        "sha": "1a56a6f182806486569700cd935904f9004365dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a56a6f182806486569700cd935904f9004365dd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "83a85dfbdd64b98e06fbe7b4a150a6d22c5f68dd",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5",
        "patch": "@@ -970,7 +970,6 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CAddress addr;\n     int nInbound = 0;\n     int nMaxInbound = nMaxConnections - (nMaxOutbound + nMaxFeeler);\n-    assert(nMaxInbound > 0);\n \n     if (hSocket != INVALID_SOCKET)\n         if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))"
      }
    ]
  },
  {
    "sha": "67728a389ccf128fc25262668b2a23f8ef73e1d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NzcyOGEzODljY2YxMjhmYzI1MjYyNjY4YjJhMjNmOGVmNzNlMWQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T05:36:07Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T05:37:30Z"
      },
      "message": "Merge #9004: Clarify `listenonion`\n\n3421e74 Clarify `listenonion` (unsystemizer)",
      "tree": {
        "sha": "f4f4bb7fda28ee9677b91c6c79e9ba5a636fe4c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4f4bb7fda28ee9677b91c6c79e9ba5a636fe4c3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/67728a389ccf128fc25262668b2a23f8ef73e1d6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYDu+aAAoJEHSBCwEjRsmmKzcH+wRWWlSMnkye1p0WSbZBDRSQ\nDDU8onzFlzzKwNxYvHs6mQzWRs3GGg4FuPHWdX7d2jZYoN5Z740elRSygXHS5wzn\ntMJsaaBWO3ij6HJochcqIG5u61hgYc3ZxVaubsljRXZGDlBfy+bFjUay6zlcXpdk\nup13r4xBlhWiw+A+dAHLpYGI6UwF5JJtZdJYNCHxJ4NeI9IzySTvkO3abhvsqBwP\n/xilMb2DqAqGEbC1c32HAWY9y2/opyV56WC3O8AQbmxL/X1ADOUg6AHetNkCcmol\niaFa43QZKwJzsP2Y4vd0+QIN5IIjSLUlC9EilV+Nq/c56v30ATJQUiHiY5qQ/cU=\n=6rio\n-----END PGP SIGNATURE-----",
        "payload": "tree f4f4bb7fda28ee9677b91c6c79e9ba5a636fe4c3\nparent ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9\nparent 3421e746017079b119a661108334d58e4bfde34b\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477373767 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477373850 +0200\n\nMerge #9004: Clarify `listenonion`\n\n3421e74 Clarify `listenonion` (unsystemizer)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67728a389ccf128fc25262668b2a23f8ef73e1d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/67728a389ccf128fc25262668b2a23f8ef73e1d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67728a389ccf128fc25262668b2a23f8ef73e1d6/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ced22d035ac0f769c9c7cc21ad24d2caafb4b4e9"
      },
      {
        "sha": "3421e746017079b119a661108334d58e4bfde34b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3421e746017079b119a661108334d58e4bfde34b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3421e746017079b119a661108334d58e4bfde34b"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "a05979fca84e3758c1ff0f82c560468fe0a3ec10",
        "filename": "doc/tor.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/67728a389ccf128fc25262668b2a23f8ef73e1d6/doc/tor.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/67728a389ccf128fc25262668b2a23f8ef73e1d6/doc/tor.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/tor.md?ref=67728a389ccf128fc25262668b2a23f8ef73e1d6",
        "patch": "@@ -99,10 +99,10 @@ This means that if Tor is running (and proper authentication has been configured\n Bitcoin Core automatically creates a hidden service to listen on. This will positively \n affect the number of available .onion nodes.\n \n-This new feature is enabled by default if Bitcoin Core is listening, and\n-a connection to Tor can be made. It can be configured with the `-listenonion`,\n-`-torcontrol` and `-torpassword` settings. To show verbose debugging\n-information, pass `-debug=tor`.\n+This new feature is enabled by default if Bitcoin Core is listening (`-listen`), and\n+requires a Tor connection to work. It can be explicitly disabled with `-listenonion=0`\n+and, if not disabled, configured using the `-torcontrol` and `-torpassword` settings.\n+To show verbose debugging information, pass `-debug=tor`.\n \n Connecting to Tor's control socket API requires one of two authentication methods to be \n configured. For cookie authentication the user running bitcoind must have write access "
      }
    ]
  },
  {
    "sha": "515e2642eb45bda56156b1213b25fb4886d3fdbe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MTVlMjY0MmViNDViZGE1NjE1NmIxMjEzYjI1ZmI0ODg2ZDNmZGJl",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-10-24T01:21:04Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-10-25T06:17:43Z"
      },
      "message": "Make connect=0 disable automatic outbound connections.\n\nOtherwise it just responds to this obvious bit of configuration by\n trying to connect to \"0\" in a loop.",
      "tree": {
        "sha": "bf617d9ee69354546bff5f947ef4bf673caaff94",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf617d9ee69354546bff5f947ef4bf673caaff94"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/515e2642eb45bda56156b1213b25fb4886d3fdbe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/515e2642eb45bda56156b1213b25fb4886d3fdbe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/515e2642eb45bda56156b1213b25fb4886d3fdbe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/515e2642eb45bda56156b1213b25fb4886d3fdbe/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "84b0108ea8770342409de66a21aa8c2f951b0094",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/515e2642eb45bda56156b1213b25fb4886d3fdbe/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/515e2642eb45bda56156b1213b25fb4886d3fdbe/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=515e2642eb45bda56156b1213b25fb4886d3fdbe",
        "patch": "@@ -359,13 +359,13 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n     strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -noconnect or -connect=0 alone to disable automatic connections\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n     strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n-    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n+    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect/-noconnect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n-    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n+    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect/-noconnect)\"));\n     strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n     strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));"
      },
      {
        "sha": "953377a9f0c239e155eaeb32795c52684821951d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/515e2642eb45bda56156b1213b25fb4886d3fdbe/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/515e2642eb45bda56156b1213b25fb4886d3fdbe/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=515e2642eb45bda56156b1213b25fb4886d3fdbe",
        "patch": "@@ -2138,8 +2138,9 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     // Initiate outbound connections from -addnode\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"addcon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenAddedConnections, this))));\n \n-    // Initiate outbound connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"opencon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenConnections, this))));\n+    // Initiate outbound connections unless connect=0\n+    if (!mapArgs.count(\"-connect\") || mapMultiArgs[\"-connect\"].size() != 1 || mapMultiArgs[\"-connect\"][0] != \"0\")\n+        threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"opencon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenConnections, this))));\n \n     // Process messages\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"msghand\", boost::function<void()>(boost::bind(&CConnman::ThreadMessageHandler, this))));"
      }
    ]
  },
  {
    "sha": "e1d1f57b56b28b1dd211433fb877f4969af15e52",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMWQxZjU3YjU2YjI4YjFkZDIxMTQzM2ZiODc3ZjQ5NjlhZjE1ZTUy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T10:26:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T10:27:24Z"
      },
      "message": "Merge #9002: Make connect=0 disable automatic outbound connections.\n\n515e264 Make connect=0 disable automatic outbound connections. (Gregory Maxwell)",
      "tree": {
        "sha": "22c5fc35f182706ea00a0ab301720dd9f3b8d4c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22c5fc35f182706ea00a0ab301720dd9f3b8d4c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e1d1f57b56b28b1dd211433fb877f4969af15e52",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYDzOMAAoJEHSBCwEjRsmm8BkIAKssnUJqVsEq0te7PUKGDoM2\nfLgV70YkowoXNQnwifK/++tmIS7I7MdMvEKXWwe2LDrkovKExeT45teQrmp4wx5X\np8VoZhNeoCOsRWO5a/4xf8C5W4EU0nAczd+gE1CaLNGQtRs1kCXn3NvCgYP3224H\n3QQP9dVYcow+hpTmEAgO28PxxbG6kVKVnbFC7rMN2g0dTTaE5SDObL/CbEg47oP6\nNXM3vhCGu5gpCDnDyD4MiY+fSLksAWOyJu76VPPup/Tyne9LCw6st1Uuf9/bnJyK\nbXOorxsBJOEVKOmfGSEnndR5/w8zqp/yDKuAy3E2AK6Obg+LY/wSbLmGC6sv8hc=\n=SLja\n-----END PGP SIGNATURE-----",
        "payload": "tree 22c5fc35f182706ea00a0ab301720dd9f3b8d4c2\nparent 67728a389ccf128fc25262668b2a23f8ef73e1d6\nparent 515e2642eb45bda56156b1213b25fb4886d3fdbe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477391208 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477391244 +0200\n\nMerge #9002: Make connect=0 disable automatic outbound connections.\n\n515e264 Make connect=0 disable automatic outbound connections. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d1f57b56b28b1dd211433fb877f4969af15e52",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d1f57b56b28b1dd211433fb877f4969af15e52",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d1f57b56b28b1dd211433fb877f4969af15e52/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "67728a389ccf128fc25262668b2a23f8ef73e1d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/67728a389ccf128fc25262668b2a23f8ef73e1d6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/67728a389ccf128fc25262668b2a23f8ef73e1d6"
      },
      {
        "sha": "515e2642eb45bda56156b1213b25fb4886d3fdbe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/515e2642eb45bda56156b1213b25fb4886d3fdbe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/515e2642eb45bda56156b1213b25fb4886d3fdbe"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 6,
      "deletions": 5
    },
    "files": [
      {
        "sha": "84b0108ea8770342409de66a21aa8c2f951b0094",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1d1f57b56b28b1dd211433fb877f4969af15e52/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1d1f57b56b28b1dd211433fb877f4969af15e52/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e1d1f57b56b28b1dd211433fb877f4969af15e52",
        "patch": "@@ -359,13 +359,13 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), DEFAULT_BANSCORE_THRESHOLD));\n     strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), DEFAULT_MISBEHAVING_BANTIME));\n     strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n-    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s); -noconnect or -connect=0 alone to disable automatic connections\"));\n     strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n     strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP));\n-    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n+    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect/-noconnect)\"));\n     strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n     strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED));\n-    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n+    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect/-noconnect)\"));\n     strUsage += HelpMessageOpt(\"-listenonion\", strprintf(_(\"Automatically create Tor hidden service (default: %d)\"), DEFAULT_LISTEN_ONION));\n     strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), DEFAULT_MAX_PEER_CONNECTIONS));\n     strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), DEFAULT_MAXRECEIVEBUFFER));"
      },
      {
        "sha": "953377a9f0c239e155eaeb32795c52684821951d",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e1d1f57b56b28b1dd211433fb877f4969af15e52/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e1d1f57b56b28b1dd211433fb877f4969af15e52/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=e1d1f57b56b28b1dd211433fb877f4969af15e52",
        "patch": "@@ -2138,8 +2138,9 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     // Initiate outbound connections from -addnode\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"addcon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenAddedConnections, this))));\n \n-    // Initiate outbound connections\n-    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"opencon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenConnections, this))));\n+    // Initiate outbound connections unless connect=0\n+    if (!mapArgs.count(\"-connect\") || mapMultiArgs[\"-connect\"].size() != 1 || mapMultiArgs[\"-connect\"][0] != \"0\")\n+        threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"opencon\", boost::function<void()>(boost::bind(&CConnman::ThreadOpenConnections, this))));\n \n     // Process messages\n     threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"msghand\", boost::function<void()>(boost::bind(&CConnman::ThreadMessageHandler, this))));"
      }
    ]
  },
  {
    "sha": "f14f07cb94eba37900ce6780f34d0438ad6322ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTRmMDdjYjk0ZWJhMzc5MDBjZTY3ODBmMzRkMDQzOGFkNjMyMmFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T10:36:38Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T10:37:05Z"
      },
      "message": "Merge #9008: [net] Remove assert(nMaxInbound > 0)\n\nfa1c3c2 [net] Remove assert(nMaxInbound > 0) (MarcoFalke)",
      "tree": {
        "sha": "75af769875f398ec4b8c315370ee812bcaad3c42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75af769875f398ec4b8c315370ee812bcaad3c42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f14f07cb94eba37900ce6780f34d0438ad6322ab",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYDzXRAAoJEHSBCwEjRsmmdlAH/3Kfugo85ThfMhJK/nCzwd1N\nxbalDpm/HAMa5+rMKdCSHer9eENXnH7w4R5OAd2644xJYyBID39Eo9gNiigaJoS6\niRjQ1qkgqhPQTQcytlsDgjnTNsy3S8yZ+5hx9cFrNF2UMMczMeSbSwZ8ciQmlEhj\nvo/WnL0bt/JIqZH8i9U5kDTBo9VdnZmFprcN0w+KJQbv06de+ZQACxUobwU4MYSF\nYsYvkBdw7XGK66W89/fBvhp4nzaGliVKlCyoouibOyy3IcMB3dZ/GxEtH0irf6RW\n1cD44mFN/CXBVhCXHLaQzFCovye18JMTAYMZ3lPQjhFo+es7RuBouAhR2fUUHMA=\n=W+mA\n-----END PGP SIGNATURE-----",
        "payload": "tree 75af769875f398ec4b8c315370ee812bcaad3c42\nparent e1d1f57b56b28b1dd211433fb877f4969af15e52\nparent fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477391798 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477391825 +0200\n\nMerge #9008: [net] Remove assert(nMaxInbound > 0)\n\nfa1c3c2 [net] Remove assert(nMaxInbound > 0) (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f14f07cb94eba37900ce6780f34d0438ad6322ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f14f07cb94eba37900ce6780f34d0438ad6322ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f14f07cb94eba37900ce6780f34d0438ad6322ab/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e1d1f57b56b28b1dd211433fb877f4969af15e52",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e1d1f57b56b28b1dd211433fb877f4969af15e52",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e1d1f57b56b28b1dd211433fb877f4969af15e52"
      },
      {
        "sha": "fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa1c3c2eb0a1853ed0e0662fc2bdbca51e05ccf5"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48ba9588d9dc33ba4724c68515950980ef88f2b8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f14f07cb94eba37900ce6780f34d0438ad6322ab/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f14f07cb94eba37900ce6780f34d0438ad6322ab/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f14f07cb94eba37900ce6780f34d0438ad6322ab",
        "patch": "@@ -970,7 +970,6 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n     CAddress addr;\n     int nInbound = 0;\n     int nMaxInbound = nMaxConnections - (nMaxOutbound + nMaxFeeler);\n-    assert(nMaxInbound > 0);\n \n     if (hSocket != INVALID_SOCKET)\n         if (!addr.SetSockAddr((const struct sockaddr*)&sockaddr))"
      }
    ]
  },
  {
    "sha": "e077e00303841ab93f4b59ecba69eea6bf707475",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDc3ZTAwMzAzODQxYWI5M2Y0YjU5ZWNiYTY5ZWVhNmJmNzA3NDc1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T11:24:29Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T11:24:43Z"
      },
      "message": "Merge #8948: [TRIVIAL] reorder Windows gitian build order to match Linux\n\n3f7581d [TRIVIAL] reorder Windows gitian build order to match Linux (Micha)",
      "tree": {
        "sha": "cad92e409e084039afdfc6652fc627db3ddf2308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cad92e409e084039afdfc6652fc627db3ddf2308"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e077e00303841ab93f4b59ecba69eea6bf707475",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEbBAABCgAGBQJYD0D7AAoJEHSBCwEjRsmmTdkH+KnZaZ0TVMVSURQLVm+zuQiG\nmjp3nQyfPupTzoXSdDG7PxU6yMQqxFX8olzfP/AUVoXcOkoBb1CDEGo8x92uQnG7\nzM8Dz+UfEHrcDaKQaUITq2Xg4W+PGIEGrXLOPioQQOucJLfL2ariPiLgeWZxkea1\nibkBp7aTn8h0x096wR1WpxnIWEXxAtJY/QhOj98usOjYLrgz8qsV0Dcj0elJhVX0\nPu8StpAR80VFwgmwFLXtQ28rvYXVXxDJxlrS0HJVVIY5aBEoXMZnZpJTWwa96M3m\nu3njEGgkoyRlLPptjuSbyzxsebP9GrzeXzIsgIk+Tbtee38NIXefxrDoj0ZXBQ==\n=wE5H\n-----END PGP SIGNATURE-----",
        "payload": "tree cad92e409e084039afdfc6652fc627db3ddf2308\nparent f14f07cb94eba37900ce6780f34d0438ad6322ab\nparent 3f7581d9a4f9cb7dc5499fc85528e959da6b0efc\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477394669 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477394683 +0200\n\nMerge #8948: [TRIVIAL] reorder Windows gitian build order to match Linux\n\n3f7581d [TRIVIAL] reorder Windows gitian build order to match Linux (Micha)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e077e00303841ab93f4b59ecba69eea6bf707475",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e077e00303841ab93f4b59ecba69eea6bf707475",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e077e00303841ab93f4b59ecba69eea6bf707475/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f14f07cb94eba37900ce6780f34d0438ad6322ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f14f07cb94eba37900ce6780f34d0438ad6322ab",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f14f07cb94eba37900ce6780f34d0438ad6322ab"
      },
      {
        "sha": "3f7581d9a4f9cb7dc5499fc85528e959da6b0efc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f7581d9a4f9cb7dc5499fc85528e959da6b0efc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fe01b5b95726a04e0277af7fc8d15c6c93d89110",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e077e00303841ab93f4b59ecba69eea6bf707475/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e077e00303841ab93f4b59ecba69eea6bf707475/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=e077e00303841ab93f4b59ecba69eea6bf707475",
        "patch": "@@ -27,7 +27,7 @@ remotes:\n files: []\n script: |\n   WRAP_DIR=$HOME/wrapped\n-  HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n+  HOSTS=\"i686-w64-mingw32 x86_64-w64-mingw32\"\n   CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n   FAKETIME_HOST_PROGS=\"g++ ar ranlib nm windres strip objcopy\"\n   FAKETIME_PROGS=\"date makensis zip\""
      }
    ]
  },
  {
    "sha": "9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmRmNTI2OWY4ODYwYjQxNDU1ZGYxYzZkODJkYWMwZDljODU4ZThm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T12:00:27Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-25T12:21:57Z"
      },
      "message": "Merge #8515: A few mempool removal optimizations\n\n0334430 Add some missing includes (Pieter Wuille)\n4100499 Return shared_ptr<CTransaction> from mempool removes (Pieter Wuille)\n51f2783 Make removed and conflicted arguments optional to remove (Pieter Wuille)\nf48211b Bypass removeRecursive in removeForReorg (Pieter Wuille)",
      "tree": {
        "sha": "bb3a0d029a53eed9825d2851fa2403db1c690b11",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb3a0d029a53eed9825d2851fa2403db1c690b11"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYD05lAAoJEHSBCwEjRsmmDUAIAJlwyVis8FnO8VNh6DO+AJLG\nE2m8akpa12TvxppoWvaiEnh+0syqDhs3hZld4XfETevsSVIGJDaTLuSonuswEqp9\n7KAJNKEM1wkNsKqtO8zK77EGVRzjyXbXA8q05QEZhjux1SBHSFsvdfCvBF4I56Bx\nIk1LePJablE9kFnYRVoCUjj43YWTE4amq7mJDf4W27DLXpmQDTZsr3syFSOcJWnk\nMEtXjLTowXX/8V2Cbq36xFvG0WiOz5r6qFd1DJWn6vi4nb4+JkvFZ5CwsQ269dtx\n2QfPOwd6m0oGizOzk5mbKihePF2e1J7JnGnQQfR9lV6O0Xf9nJRBJDM9lOIIsT4=\n=mEAT\n-----END PGP SIGNATURE-----",
        "payload": "tree bb3a0d029a53eed9825d2851fa2403db1c690b11\nparent e077e00303841ab93f4b59ecba69eea6bf707475\nparent 0334430b396acd1b1c248ad98c6fdbd50c4c4309\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477396827 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477398117 +0200\n\nMerge #8515: A few mempool removal optimizations\n\n0334430 Add some missing includes (Pieter Wuille)\n4100499 Return shared_ptr<CTransaction> from mempool removes (Pieter Wuille)\n51f2783 Make removed and conflicted arguments optional to remove (Pieter Wuille)\nf48211b Bypass removeRecursive in removeForReorg (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e077e00303841ab93f4b59ecba69eea6bf707475",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e077e00303841ab93f4b59ecba69eea6bf707475",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e077e00303841ab93f4b59ecba69eea6bf707475"
      },
      {
        "sha": "0334430b396acd1b1c248ad98c6fdbd50c4c4309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0334430b396acd1b1c248ad98c6fdbd50c4c4309",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0334430b396acd1b1c248ad98c6fdbd50c4c4309"
      }
    ],
    "stats": {
      "total": 101,
      "additions": 51,
      "deletions": 50
    },
    "files": [
      {
        "sha": "5e17ec6251ece4e46faaacaa688706cb8f724dbf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "patch": "@@ -2768,10 +2768,9 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n         std::vector<uint256> vHashUpdate;\n         BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n             // ignore validation errors in resurrected transactions\n-            list<CTransaction> removed;\n             CValidationState stateDummy;\n             if (tx.IsCoinBase() || !AcceptToMemoryPool(mempool, stateDummy, tx, false, NULL, true)) {\n-                mempool.removeRecursive(tx, removed);\n+                mempool.removeRecursive(tx);\n             } else if (mempool.exists(tx.GetHash())) {\n                 vHashUpdate.push_back(tx.GetHash());\n             }\n@@ -2804,7 +2803,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::list<CTransaction> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>> &txChanged)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::vector<std::shared_ptr<const CTransaction>> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>> &txChanged)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2840,7 +2839,7 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n     // Remove conflicting transactions from the mempool.;\n-    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n+    mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, &txConflicted, !IsInitialBlockDownload());\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n@@ -2927,7 +2926,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::list<CTransaction>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>>& txChanged)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::vector<std::shared_ptr<const CTransaction>>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int>>& txChanged)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -3038,7 +3037,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             break;\n \n         const CBlockIndex *pindexFork;\n-        std::list<CTransaction> txConflicted;\n+        std::vector<std::shared_ptr<const CTransaction>> txConflicted;\n         bool fInitialDownload;\n         {\n             LOCK(cs_main);\n@@ -3069,9 +3068,9 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n \n         // throw all transactions though the signal-interface\n         // while _not_ holding the cs_main lock\n-        BOOST_FOREACH(const CTransaction &tx, txConflicted)\n+        for(std::shared_ptr<const CTransaction> tx : txConflicted)\n         {\n-            GetMainSignals().SyncTransaction(tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n+            GetMainSignals().SyncTransaction(*tx, pindexNewTip, CMainSignals::SYNC_TRANSACTION_NOT_IN_BLOCK);\n         }\n         // ... and about transactions that got confirmed:\n         for(unsigned int i = 0; i < txChanged.size(); i++)"
      },
      {
        "sha": "b0d9184816ee9770465f1b9e561e37b42dd933fd",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "patch": "@@ -80,8 +80,8 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n \n         BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2].GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 1);\n \n-        std::list<CTransaction> removed;\n-        pool.removeRecursive(block.vtx[2], removed);\n+        std::vector<std::shared_ptr<const CTransaction>> removed;\n+        pool.removeRecursive(block.vtx[2], &removed);\n         BOOST_CHECK_EQUAL(removed.size(), 1);\n \n         CBlock block2;"
      },
      {
        "sha": "555d36faacc87211433a42de0629ecc515f50099",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 16,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "patch": "@@ -55,15 +55,15 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n \n \n     CTxMemPool testPool(CFeeRate(0));\n-    std::list<CTransaction> removed;\n+    std::vector<std::shared_ptr<const CTransaction>> removed;\n \n     // Nothing in pool, remove should do nothing:\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n \n     // Just the parent:\n     testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 1);\n     removed.clear();\n     \n@@ -75,16 +75,16 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n         testPool.addUnchecked(txGrandChild[i].GetHash(), entry.FromTx(txGrandChild[i]));\n     }\n     // Remove Child[0], GrandChild[0] should be removed:\n-    testPool.removeRecursive(txChild[0], removed);\n+    testPool.removeRecursive(txChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 2);\n     removed.clear();\n     // ... make sure grandchild and child are gone:\n-    testPool.removeRecursive(txGrandChild[0], removed);\n+    testPool.removeRecursive(txGrandChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n-    testPool.removeRecursive(txChild[0], removed);\n+    testPool.removeRecursive(txChild[0], &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 0);\n     // Remove parent, all children/grandchildren should go:\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 5);\n     BOOST_CHECK_EQUAL(testPool.size(), 0);\n     removed.clear();\n@@ -97,7 +97,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     }\n     // Now remove the parent, as might happen if a block-re-org occurs but the parent cannot be\n     // put into the mempool (maybe because it is non-standard):\n-    testPool.removeRecursive(txParent, removed);\n+    testPool.removeRecursive(txParent, &removed);\n     BOOST_CHECK_EQUAL(removed.size(), 6);\n     BOOST_CHECK_EQUAL(testPool.size(), 0);\n     removed.clear();\n@@ -281,12 +281,11 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     BOOST_CHECK_EQUAL(pool.size(), 10);\n \n     // Now try removing tx10 and verify the sort order returns to normal\n-    std::list<CTransaction> removed;\n-    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx(), removed);\n+    pool.removeRecursive(pool.mapTx.find(tx10.GetHash())->GetTx());\n     CheckSort<descendant_score>(pool, snapshotOrder);\n \n-    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx(), removed);\n-    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx(), removed);\n+    pool.removeRecursive(pool.mapTx.find(tx9.GetHash())->GetTx());\n+    pool.removeRecursive(pool.mapTx.find(tx8.GetHash())->GetTx());\n     /* Now check the sort on the mining score index.\n      * Final order should be:\n      *\n@@ -413,8 +412,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     /* after tx6 is mined, tx7 should move up in the sort */\n     std::vector<CTransaction> vtx;\n     vtx.push_back(tx6);\n-    std::list<CTransaction> dummy;\n-    pool.removeForBlock(vtx, 1, dummy, false);\n+    pool.removeForBlock(vtx, 1, NULL, false);\n \n     sortedOrder.erase(sortedOrder.begin()+1);\n     sortedOrder.pop_back();\n@@ -549,12 +547,12 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n-    std::list<CTransaction> conflicts;\n+    std::vector<std::shared_ptr<const CTransaction>> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);\n     // ... we should keep the same min fee until we get a block\n-    pool.removeForBlock(vtx, 1, conflicts);\n+    pool.removeForBlock(vtx, 1);\n     SetMockTime(42 + 2*CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), (maxFeeRateRemoved.GetFeePerK() + 1000)/2);\n     // ... then feerate should drop 1/2 each halflife"
      },
      {
        "sha": "a94979fd77d0734d633b02a0c6b91046b3cc62de",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "patch": "@@ -137,8 +137,7 @@ void TestPackageSelection(const CChainParams& chainparams, CScript scriptPubKey,\n     // Test that packages above the min relay fee do get included, even if one\n     // of the transactions is below the min relay fee\n     // Remove the low fee transaction and replace with a higher fee transaction\n-    std::list<CTransaction> dummy;\n-    mempool.removeRecursive(tx, dummy);\n+    mempool.removeRecursive(tx);\n     tx.vout[0].nValue -= 2; // Now we should be just over the min relay fee\n     hashLowFeeTx = tx.GetHash();\n     mempool.addUnchecked(hashLowFeeTx, entry.Fee(feeToUse+2).FromTx(tx));"
      },
      {
        "sha": "f57c24270c112f2589c16e47cfb03a4d0d493375",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "patch": "@@ -46,7 +46,6 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     for (unsigned int i = 0; i < 128; i++)\n         garbage.push_back('X');\n     CMutableTransaction tx;\n-    std::list<CTransaction> dummyConflicted;\n     tx.vin.resize(1);\n     tx.vin[0].scriptSig = garbage;\n     tx.vout.resize(1);\n@@ -81,7 +80,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 txHashes[9-h].pop_back();\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n         if (blocknum == 30) {\n             // At this point we should need to combine 5 buckets to get enough data points\n@@ -125,7 +124,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     // Mine 50 more blocks with no transactions happening, estimates shouldn't change\n     // We haven't decayed the moving average enough so we still have enough data points in every bucket\n     while (blocknum < 250)\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n \n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() < origFeeEst[i-1] + deltaFee);\n@@ -146,7 +145,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                 txHashes[j].push_back(hash);\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n     }\n \n     int answerFound;\n@@ -167,7 +166,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n             txHashes[j].pop_back();\n         }\n     }\n-    mpool.removeForBlock(block, 265, dummyConflicted);\n+    mpool.removeForBlock(block, 265);\n     block.clear();\n     for (int i = 1; i < 10;i++) {\n         BOOST_CHECK(mpool.estimateFee(i).GetFeePerK() > origFeeEst[i-1] - deltaFee);\n@@ -187,7 +186,7 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n                     block.push_back(*ptx);\n             }\n         }\n-        mpool.removeForBlock(block, ++blocknum, dummyConflicted);\n+        mpool.removeForBlock(block, ++blocknum);\n         block.clear();\n     }\n     for (int i = 1; i < 10; i++) {"
      },
      {
        "sha": "e5d28ac2eaa8b74f71e24fc7609de90622a19346",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "patch": "@@ -503,7 +503,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries &setDescendants\n     }\n }\n \n-void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransaction>& removed)\n+void CTxMemPool::removeRecursive(const CTransaction &origTx, std::vector<std::shared_ptr<const CTransaction>>* removed)\n {\n     // Remove transaction from memory pool\n     {\n@@ -530,8 +530,10 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n         BOOST_FOREACH(txiter it, txToRemove) {\n             CalculateDescendants(it, setAllRemoves);\n         }\n-        BOOST_FOREACH(txiter it, setAllRemoves) {\n-            removed.push_back(it->GetTx());\n+        if (removed) {\n+            BOOST_FOREACH(txiter it, setAllRemoves) {\n+                removed->emplace_back(it->GetSharedTx());\n+            }\n         }\n         RemoveStaged(setAllRemoves, false);\n     }\n@@ -541,24 +543,24 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);\n-    list<CTransaction> transactionsToRemove;\n+    setEntries txToRemove;\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n         if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n-            transactionsToRemove.push_back(tx);\n+            txToRemove.insert(it);\n         } else if (it->GetSpendsCoinbase()) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n                 if (it2 != mapTx.end())\n                     continue;\n                 const CCoins *coins = pcoins->AccessCoins(txin.prevout.hash);\n-\t\tif (nCheckFrequency != 0) assert(coins);\n+                if (nCheckFrequency != 0) assert(coins);\n                 if (!coins || (coins->IsCoinBase() && ((signed long)nMemPoolHeight) - coins->nHeight < COINBASE_MATURITY)) {\n-                    transactionsToRemove.push_back(tx);\n+                    txToRemove.insert(it);\n                     break;\n                 }\n             }\n@@ -567,13 +569,14 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             mapTx.modify(it, update_lock_points(lp));\n         }\n     }\n-    BOOST_FOREACH(const CTransaction& tx, transactionsToRemove) {\n-        list<CTransaction> removed;\n-        removeRecursive(tx, removed);\n+    setEntries setAllRemoves;\n+    for (txiter it : txToRemove) {\n+        CalculateDescendants(it, setAllRemoves);\n     }\n+    RemoveStaged(setAllRemoves, false);\n }\n \n-void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n+void CTxMemPool::removeConflicts(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n     LOCK(cs);\n@@ -594,7 +597,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n  * Called when a block is connected. Removes from mempool and updates the miner fee estimator.\n  */\n void CTxMemPool::removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                                std::list<CTransaction>& conflicts, bool fCurrentEstimate)\n+                                std::vector<std::shared_ptr<const CTransaction>>* conflicts, bool fCurrentEstimate)\n {\n     LOCK(cs);\n     std::vector<CTxMemPoolEntry> entries;"
      },
      {
        "sha": "bb2638c3b7808e43972c0fd6a7fed1b7aa43d6a4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bdf5269f8860b41455df1c6d82dac0d9c858e8f/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "patch": "@@ -6,9 +6,12 @@\n #ifndef BITCOIN_TXMEMPOOL_H\n #define BITCOIN_TXMEMPOOL_H\n \n-#include <list>\n #include <memory>\n #include <set>\n+#include <map>\n+#include <vector>\n+#include <utility>\n+#include <string>\n \n #include \"amount.h\"\n #include \"coins.h\"\n@@ -521,11 +524,11 @@ class CTxMemPool\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, bool fCurrentEstimate = true);\n     bool addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry, setEntries &setAncestors, bool fCurrentEstimate = true);\n \n-    void removeRecursive(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void removeRecursive(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed = NULL);\n     void removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags);\n-    void removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed);\n+    void removeConflicts(const CTransaction &tx, std::vector<std::shared_ptr<const CTransaction>>* removed = NULL);\n     void removeForBlock(const std::vector<CTransaction>& vtx, unsigned int nBlockHeight,\n-                        std::list<CTransaction>& conflicts, bool fCurrentEstimate = true);\n+                        std::vector<std::shared_ptr<const CTransaction>>* conflicts = NULL, bool fCurrentEstimate = true);\n     void clear();\n     void _clear(); //lock free\n     bool CompareDepthAndScore(const uint256& hasha, const uint256& hashb);"
      }
    ]
  },
  {
    "sha": "d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMGIwMWYzYTg1OWVhY2M1MWEyOGZjMThkMmVkN2UzNjFlYzkwODMz",
    "commit": {
      "author": {
        "name": "Geoffrey Tsui",
        "email": "tsui.geoffrey@gmail.com",
        "date": "2016-10-25T14:35:26Z"
      },
      "committer": {
        "name": "Geoffrey Tsui",
        "email": "tsui.geoffrey@gmail.com",
        "date": "2016-10-25T14:35:26Z"
      },
      "message": "Explicitly pass const CChainParams& to LoadBlockIndexDB()",
      "tree": {
        "sha": "52f988b2d7f53d2624a40ba76839bfe031635908",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52f988b2d7f53d2624a40ba76839bfe031635908"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0b01f3a859eacc51a28fc18d2ed7e361ec90833/comments",
    "author": {
      "login": "gtsui",
      "id": 4584091,
      "node_id": "MDQ6VXNlcjQ1ODQwOTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4584091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtsui",
      "html_url": "https://github.com/gtsui",
      "followers_url": "https://api.github.com/users/gtsui/followers",
      "following_url": "https://api.github.com/users/gtsui/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtsui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtsui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtsui/subscriptions",
      "organizations_url": "https://api.github.com/users/gtsui/orgs",
      "repos_url": "https://api.github.com/users/gtsui/repos",
      "events_url": "https://api.github.com/users/gtsui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtsui/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gtsui",
      "id": 4584091,
      "node_id": "MDQ6VXNlcjQ1ODQwOTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4584091?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gtsui",
      "html_url": "https://github.com/gtsui",
      "followers_url": "https://api.github.com/users/gtsui/followers",
      "following_url": "https://api.github.com/users/gtsui/following{/other_user}",
      "gists_url": "https://api.github.com/users/gtsui/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gtsui/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gtsui/subscriptions",
      "organizations_url": "https://api.github.com/users/gtsui/orgs",
      "repos_url": "https://api.github.com/users/gtsui/repos",
      "events_url": "https://api.github.com/users/gtsui/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gtsui/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bdf5269f8860b41455df1c6d82dac0d9c858e8f"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "b03b5096345f35010f66ecf87c9490d1aac90278",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0b01f3a859eacc51a28fc18d2ed7e361ec90833/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0b01f3a859eacc51a28fc18d2ed7e361ec90833/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
        "patch": "@@ -1320,7 +1320,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         CleanupBlockRevFiles();\n                 }\n \n-                if (!LoadBlockIndex()) {\n+                if (!LoadBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error loading block database\");\n                     break;\n                 }"
      },
      {
        "sha": "0ee54a27d5d9bef239e06bbdcf8e6138912575cf",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0b01f3a859eacc51a28fc18d2ed7e361ec90833/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0b01f3a859eacc51a28fc18d2ed7e361ec90833/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
        "patch": "@@ -3966,9 +3966,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB()\n+bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n-    const CChainParams& chainparams = Params();\n     if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n         return false;\n \n@@ -4297,10 +4296,10 @@ void UnloadBlockIndex()\n     fHavePruned = false;\n }\n \n-bool LoadBlockIndex()\n+bool LoadBlockIndex(const CChainParams& chainparams)\n {\n     // Load block index from databases\n-    if (!fReindex && !LoadBlockIndexDB())\n+    if (!fReindex && !LoadBlockIndexDB(chainparams))\n         return false;\n     return true;\n }"
      },
      {
        "sha": "6bd6479dcc413de9f9d8c911fafdbacb3feaa31a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d0b01f3a859eacc51a28fc18d2ed7e361ec90833/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d0b01f3a859eacc51a28fc18d2ed7e361ec90833/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
        "patch": "@@ -237,7 +237,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n /** Initialize a new block tree database + block data on disk */\n bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n-bool LoadBlockIndex();\n+bool LoadBlockIndex(const CChainParams& chainparams);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */"
      }
    ]
  },
  {
    "sha": "339c4b6c3a8e68e4bba1969d144e413a462b68f1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzljNGI2YzNhOGU2OGU0YmJhMTk2OWQxNDRlNDEzYTQ2MmI2OGYx",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-25T18:04:33Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-25T18:29:03Z"
      },
      "message": "release: bump required osx version to 10.8. Credit jonasschnelli.\n\nlibc++ on 10.7 causes too many issues.\n\nSee #8577 for discussion/details.",
      "tree": {
        "sha": "31c2287e46f66b0062ca155cefc76797bfd512de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31c2287e46f66b0062ca155cefc76797bfd512de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/339c4b6c3a8e68e4bba1969d144e413a462b68f1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/339c4b6c3a8e68e4bba1969d144e413a462b68f1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/339c4b6c3a8e68e4bba1969d144e413a462b68f1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/339c4b6c3a8e68e4bba1969d144e413a462b68f1/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bdf5269f8860b41455df1c6d82dac0d9c858e8f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5ca6d9d015b45237a4a619b57cdbe41e6de19484",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/339c4b6c3a8e68e4bba1969d144e413a462b68f1/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/339c4b6c3a8e68e4bba1969d144e413a462b68f1/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=339c4b6c3a8e68e4bba1969d144e413a462b68f1",
        "patch": "@@ -3,7 +3,7 @@\n <plist version=\"0.9\">\n <dict>\n   <key>LSMinimumSystemVersion</key>\n-  <string>10.7.0</string>\n+  <string>10.8.0</string>\n \n   <key>LSArchitecturePriority</key>\n   <array>"
      }
    ]
  },
  {
    "sha": "54259370ae93adfcd58502c851bbbcab1c8d5c33",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NDI1OTM3MGFlOTNhZGZjZDU4NTAyYzg1MWJiYmNhYjFjOGQ1YzMz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-26T08:06:26Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-26T08:06:29Z"
      },
      "message": "Merge #9015: release: bump required osx version to 10.8. (jonasschnelli)\n\n339c4b6 release: bump required osx version to 10.8. Credit jonasschnelli. (Cory Fields)",
      "tree": {
        "sha": "31c2287e46f66b0062ca155cefc76797bfd512de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31c2287e46f66b0062ca155cefc76797bfd512de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54259370ae93adfcd58502c851bbbcab1c8d5c33",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYEGQFAAoJEHSBCwEjRsmmSYsH/R3fnzjoppQ4pH7ngjS7Z7rW\n+A+vd6JPf5InM9QNriITBYZgwUU8/k+NLQmdEI0NuU+aqNoT0/ZJBEXR9JSA0Cco\nm+TgaVBZcqVBN+0wsUwzmzDSeS+3Wwfsnagr4XhHAAW3D2Ae0hhkVZt4yD9ewgfw\nZp714VPMfAzDRmtDiCyQiNOzn5df7mxDa7R9/1JcEJnTbhnxj7wus59lHxKnbfdI\nVy8zoLFrqDVlzZ8HjKELpWoduD/E9yotLxy0hO2uUX90JAPdPfGaFMicxrqTSOjP\nV/ezuGCiGaU8hIV1IFDtNdBnBll92MbXZmWfBEhsnH+ohUD3/BUxodniKv3o+g8=\n=6Csr\n-----END PGP SIGNATURE-----",
        "payload": "tree 31c2287e46f66b0062ca155cefc76797bfd512de\nparent 9bdf5269f8860b41455df1c6d82dac0d9c858e8f\nparent 339c4b6c3a8e68e4bba1969d144e413a462b68f1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477469186 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477469189 +0200\n\nMerge #9015: release: bump required osx version to 10.8. (jonasschnelli)\n\n339c4b6 release: bump required osx version to 10.8. Credit jonasschnelli. (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54259370ae93adfcd58502c851bbbcab1c8d5c33",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54259370ae93adfcd58502c851bbbcab1c8d5c33",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54259370ae93adfcd58502c851bbbcab1c8d5c33/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bdf5269f8860b41455df1c6d82dac0d9c858e8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bdf5269f8860b41455df1c6d82dac0d9c858e8f"
      },
      {
        "sha": "339c4b6c3a8e68e4bba1969d144e413a462b68f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/339c4b6c3a8e68e4bba1969d144e413a462b68f1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/339c4b6c3a8e68e4bba1969d144e413a462b68f1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5ca6d9d015b45237a4a619b57cdbe41e6de19484",
        "filename": "share/qt/Info.plist.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54259370ae93adfcd58502c851bbbcab1c8d5c33/share/qt/Info.plist.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54259370ae93adfcd58502c851bbbcab1c8d5c33/share/qt/Info.plist.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/Info.plist.in?ref=54259370ae93adfcd58502c851bbbcab1c8d5c33",
        "patch": "@@ -3,7 +3,7 @@\n <plist version=\"0.9\">\n <dict>\n   <key>LSMinimumSystemVersion</key>\n-  <string>10.7.0</string>\n+  <string>10.8.0</string>\n \n   <key>LSArchitecturePriority</key>\n   <array>"
      }
    ]
  },
  {
    "sha": "04c1c155440405aa47586962e038696b9a2bc046",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNGMxYzE1NTQ0MDQwNWFhNDc1ODY5NjJlMDM4Njk2YjlhMmJjMDQ2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-26T09:57:05Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-26T09:57:27Z"
      },
      "message": "rpc: Remove invalid explanation from wallet fee message",
      "tree": {
        "sha": "c4ebd1bfcc649b49a95b9f7b07ca3f0aaa94c549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4ebd1bfcc649b49a95b9f7b07ca3f0aaa94c549"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04c1c155440405aa47586962e038696b9a2bc046",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c1c155440405aa47586962e038696b9a2bc046",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04c1c155440405aa47586962e038696b9a2bc046",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c1c155440405aa47586962e038696b9a2bc046/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54259370ae93adfcd58502c851bbbcab1c8d5c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54259370ae93adfcd58502c851bbbcab1c8d5c33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54259370ae93adfcd58502c851bbbcab1c8d5c33"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d8b7e05148e89d6efbb315311d40b0c467335696",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04c1c155440405aa47586962e038696b9a2bc046/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04c1c155440405aa47586962e038696b9a2bc046/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=04c1c155440405aa47586962e038696b9a2bc046",
        "patch": "@@ -362,7 +362,7 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n     vecSend.push_back(recipient);\n     if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get()))"
      }
    ]
  },
  {
    "sha": "86f9e3dbba416a142df47dbd646c8e8ba772c955",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NmY5ZTNkYmJhNDE2YTE0MmRmNDdkYmQ2NDZjOGU4YmE3NzJjOTU1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-26T11:19:44Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-26T11:20:20Z"
      },
      "message": "Merge #9020: rpc: Remove invalid explanation from wallet fee message\n\n04c1c15 rpc: Remove invalid explanation from wallet fee message (Wladimir J. van der Laan)",
      "tree": {
        "sha": "c4ebd1bfcc649b49a95b9f7b07ca3f0aaa94c549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c4ebd1bfcc649b49a95b9f7b07ca3f0aaa94c549"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYEJF0AAoJEHSBCwEjRsmm+B0H/i9pzdgl6pnc3i+vKjc5y7yS\nGFZjhrdRrCZX/pzvFmys8bQ0l4KFsp0Nyfnar+rhOCRf8fA1LCkYq4XpyLghPzv/\nXQW8HqdWxZKk+cBLau1UWH6pS12WDVMAR7qqDZg+d4ybQ8sjBpPPuILDZz9+wsE3\ni5lPG4CiW7gTGXjqG+MSqkjbVZFb1lEgUhLAKchIBAJMrC7H+hHfiRqOIhQYb3iE\nMc22jEDEI7nd56ItZwYwfcMIMRkqfUWzYUBsPfynqq9YfSb/G9J+P0rk5X1d+69M\nfLhZEPBHLoRODafkGcfXFT4nUXYb0TeGiitEi0xv58A//JzXhzV8uDKyHlzsEh0=\n=5m8U\n-----END PGP SIGNATURE-----",
        "payload": "tree c4ebd1bfcc649b49a95b9f7b07ca3f0aaa94c549\nparent 54259370ae93adfcd58502c851bbbcab1c8d5c33\nparent 04c1c155440405aa47586962e038696b9a2bc046\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477480784 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477480820 +0200\n\nMerge #9020: rpc: Remove invalid explanation from wallet fee message\n\n04c1c15 rpc: Remove invalid explanation from wallet fee message (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86f9e3dbba416a142df47dbd646c8e8ba772c955",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54259370ae93adfcd58502c851bbbcab1c8d5c33",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54259370ae93adfcd58502c851bbbcab1c8d5c33",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54259370ae93adfcd58502c851bbbcab1c8d5c33"
      },
      {
        "sha": "04c1c155440405aa47586962e038696b9a2bc046",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04c1c155440405aa47586962e038696b9a2bc046",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04c1c155440405aa47586962e038696b9a2bc046"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d8b7e05148e89d6efbb315311d40b0c467335696",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86f9e3dbba416a142df47dbd646c8e8ba772c955/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86f9e3dbba416a142df47dbd646c8e8ba772c955/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "patch": "@@ -362,7 +362,7 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n     vecSend.push_back(recipient);\n     if (!pwalletMain->CreateTransaction(vecSend, wtxNew, reservekey, nFeeRequired, nChangePosRet, strError)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > pwalletMain->GetBalance())\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n+            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get()))"
      }
    ]
  },
  {
    "sha": "169bdabe14ef5988ff92a7370114edc85b070b27",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjliZGFiZTE0ZWY1OTg4ZmY5MmE3MzcwMTE0ZWRjODViMDcwYjI3",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-10-25T18:27:04Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-10-26T19:59:33Z"
      },
      "message": "Return useful error message on ATMP failure",
      "tree": {
        "sha": "1a077ce1f422e2bad2006d282f0ea32f1f918f3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1a077ce1f422e2bad2006d282f0ea32f1f918f3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/169bdabe14ef5988ff92a7370114edc85b070b27",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169bdabe14ef5988ff92a7370114edc85b070b27",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/169bdabe14ef5988ff92a7370114edc85b070b27",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169bdabe14ef5988ff92a7370114edc85b070b27/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f08222e882b18c1f279308636e03beceece2dbf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f08222e882b18c1f279308636e03beceece2dbf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f08222e882b18c1f279308636e03beceece2dbf1"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d3dc865684bf1d5044a9a3d2d773234583281a3e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -5,6 +5,7 @@\n #include \"walletmodel.h\"\n \n #include \"addresstablemodel.h\"\n+#include \"consensus/validation.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"paymentserver.h\"\n@@ -328,7 +329,8 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         }\n \n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get()))\n+        CValidationState state;\n+        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get(), state))\n             return TransactionCommitFailed;\n \n         CTransaction* t = (CTransaction*)newTx;"
      },
      {
        "sha": "c6a4dcc006afea758bec7bfe58d5ba651918c5e2",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"chain.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -365,8 +366,11 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n-    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get()))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n }\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n@@ -959,8 +963,11 @@ UniValue sendmany(const JSONRPCRequest& request)\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get()))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n+        strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n+    }\n \n     return wtx.GetHash().GetHex();\n }"
      },
      {
        "sha": "3fc05c1c1d189bd1f03014d1c297c730295cfbb6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -1463,7 +1463,8 @@ void CWallet::ReacceptWalletTransactions()\n         CWalletTx& wtx = *(item.second);\n \n         LOCK(mempool.cs);\n-        wtx.AcceptToMemoryPool(maxTxFee);\n+        CValidationState state;\n+        wtx.AcceptToMemoryPool(maxTxFee, state);\n     }\n }\n \n@@ -2474,7 +2475,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman)\n+bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n@@ -2502,9 +2503,9 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee)) {\n+            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n                 // This must not fail. The transaction has already been signed and recorded.\n-                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n+                LogPrintf(\"CommitTransaction(): Error: Transaction not valid, %s\\n\", state.GetRejectReason());\n                 return false;\n             }\n             wtxNew.RelayWalletTransaction(connman);\n@@ -3649,8 +3650,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee)\n+bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    CValidationState state;\n     return ::AcceptToMemoryPool(mempool, state, *this, true, NULL, false, nAbsurdFee);\n }"
      },
      {
        "sha": "c33a6ca91f670b1453888ffd0c48c08fb8200abc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/169bdabe14ef5988ff92a7370114edc85b070b27/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=169bdabe14ef5988ff92a7370114edc85b070b27",
        "patch": "@@ -215,7 +215,7 @@ class CMerkleTx : public CTransaction\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee);\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -774,7 +774,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman);\n+    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);"
      }
    ]
  },
  {
    "sha": "4536148b15595229d0563fb60913b23cb78788ed",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NTM2MTQ4YjE1NTk1MjI5ZDA1NjNmYjYwOTEzYjIzY2I3ODc4OGVk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-18T07:55:14Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T11:17:25Z"
      },
      "message": "support: Add LockedPool\n\nAdd a pool for locked memory chunks, replacing LockedPageManager.\n\nThis is something I've been wanting to do for a long time. The current\napproach of locking objects where they happen to be on the stack or heap\nin-place causes a lot of mlock/munlock system call overhead, slowing\ndown any handling of keys.\n\nAlso locked memory is a limited resource on many operating systems (and\nusing a lot of it bogs down the system), so the previous approach of\nlocking every page that may contain any key information (but also other\ninformation) is wasteful.",
      "tree": {
        "sha": "a59197c39e82d2d16e78ed85940e18227c4105b5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a59197c39e82d2d16e78ed85940e18227c4105b5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4536148b15595229d0563fb60913b23cb78788ed",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4536148b15595229d0563fb60913b23cb78788ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4536148b15595229d0563fb60913b23cb78788ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4536148b15595229d0563fb60913b23cb78788ed/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f4d1fc259b5a62580d952c180b1189ccaa6af1bc"
      }
    ],
    "stats": {
      "total": 1160,
      "additions": 832,
      "deletions": 328
    },
    "files": [
      {
        "sha": "54abd2ce46936862e5934b832ff5e4914a50fca2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4536148b15595229d0563fb60913b23cb78788ed/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4536148b15595229d0563fb60913b23cb78788ed/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4536148b15595229d0563fb60913b23cb78788ed",
        "patch": "@@ -133,7 +133,7 @@ BITCOIN_CORE_H = \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\\n-  support/pagelocker.h \\\n+  support/lockedpool.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -310,7 +310,7 @@ libbitcoin_common_a_SOURCES = \\\n libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_util_a_SOURCES = \\\n-  support/pagelocker.cpp \\\n+  support/lockedpool.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\"
      },
      {
        "sha": "67064314ef1fb42e62b5f439cdfa453178d318d1",
        "filename": "src/support/allocators/secure.h",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4536148b15595229d0563fb60913b23cb78788ed/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4536148b15595229d0563fb60913b23cb78788ed/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=4536148b15595229d0563fb60913b23cb78788ed",
        "patch": "@@ -6,7 +6,8 @@\n #ifndef BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n #define BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n \n-#include \"support/pagelocker.h\"\n+#include \"support/lockedpool.h\"\n+#include \"support/cleanse.h\"\n \n #include <string>\n \n@@ -39,20 +40,15 @@ struct secure_allocator : public std::allocator<T> {\n \n     T* allocate(std::size_t n, const void* hint = 0)\n     {\n-        T* p;\n-        p = std::allocator<T>::allocate(n, hint);\n-        if (p != NULL)\n-            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n-        return p;\n+        return static_cast<T*>(LockedPoolManager::Instance().alloc(sizeof(T) * n));\n     }\n \n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL) {\n             memory_cleanse(p, sizeof(T) * n);\n-            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n-        std::allocator<T>::deallocate(p, n);\n+        LockedPoolManager::Instance().free(p);\n     }\n };\n "
      },
      {
        "sha": "63050f006b0536f640159f2d09f28fe1e1565483",
        "filename": "src/support/lockedpool.cpp",
        "status": "added",
        "additions": 383,
        "deletions": 0,
        "changes": 383,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4536148b15595229d0563fb60913b23cb78788ed/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4536148b15595229d0563fb60913b23cb78788ed/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=4536148b15595229d0563fb60913b23cb78788ed",
        "patch": "@@ -0,0 +1,383 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"support/lockedpool.h\"\n+#include \"support/cleanse.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#ifdef WIN32\n+#ifdef _WIN32_WINNT\n+#undef _WIN32_WINNT\n+#endif\n+#define _WIN32_WINNT 0x0501\n+#define WIN32_LEAN_AND_MEAN 1\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n+#include <windows.h>\n+#else\n+#include <sys/mman.h> // for mmap\n+#include <sys/resource.h> // for getrlimit\n+#include <limits.h> // for PAGESIZE\n+#include <unistd.h> // for sysconf\n+#endif\n+\n+LockedPoolManager* LockedPoolManager::_instance = NULL;\n+std::once_flag LockedPoolManager::init_flag;\n+\n+/*******************************************************************************/\n+// Utilities\n+//\n+/** Align up to power of 2 */\n+static inline size_t align_up(size_t x, size_t align)\n+{\n+    return (x + align - 1) & ~(align - 1);\n+}\n+\n+/*******************************************************************************/\n+// Implementation: Arena\n+\n+Arena::Arena(void *base_in, size_t size_in, size_t alignment_in):\n+    base(static_cast<char*>(base_in)), end(static_cast<char*>(base_in) + size_in), alignment(alignment_in)\n+{\n+    // Start with one free chunk that covers the entire arena\n+    chunks.emplace(base, Chunk(size_in, false));\n+}\n+\n+Arena::~Arena()\n+{\n+}\n+\n+void* Arena::alloc(size_t size)\n+{\n+    // Round to next multiple of alignment\n+    size = align_up(size, alignment);\n+\n+    // Don't handle zero-sized chunks, or those bigger than MAX_SIZE\n+    if (size == 0 || size >= Chunk::MAX_SIZE) {\n+        return nullptr;\n+    }\n+\n+    for (auto& chunk: chunks) {\n+        if (!chunk.second.isInUse() && size <= chunk.second.getSize()) {\n+            char* base = chunk.first;\n+            size_t leftover = chunk.second.getSize() - size;\n+            if (leftover > 0) { // Split chunk\n+                chunks.emplace(base + size, Chunk(leftover, false));\n+                chunk.second.setSize(size);\n+            }\n+            chunk.second.setInUse(true);\n+            return reinterpret_cast<void*>(base);\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+void Arena::free(void *ptr)\n+{\n+    // Freeing the NULL pointer is OK.\n+    if (ptr == nullptr) {\n+        return;\n+    }\n+    auto i = chunks.find(static_cast<char*>(ptr));\n+    if (i == chunks.end() || !i->second.isInUse()) {\n+        throw std::runtime_error(\"Arena: invalid or double free\");\n+    }\n+\n+    i->second.setInUse(false);\n+\n+    if (i != chunks.begin()) { // Absorb into previous chunk if exists and free\n+        auto prev = i;\n+        --prev;\n+        if (!prev->second.isInUse()) {\n+            // Absorb current chunk size into previous chunk.\n+            prev->second.setSize(prev->second.getSize() + i->second.getSize());\n+            // Erase current chunk. Erasing does not invalidate current\n+            // iterators for a map, except for that pointing to the object\n+            // itself, which will be overwritten in the next statement.\n+            chunks.erase(i);\n+            // From here on, the previous chunk is our current chunk.\n+            i = prev;\n+        }\n+    }\n+    auto next = i;\n+    ++next;\n+    if (next != chunks.end()) { // Absorb next chunk if exists and free\n+        if (!next->second.isInUse()) {\n+            // Absurb next chunk size into current chunk\n+            i->second.setSize(i->second.getSize() + next->second.getSize());\n+            // Erase next chunk.\n+            chunks.erase(next);\n+        }\n+    }\n+}\n+\n+Arena::Stats Arena::stats() const\n+{\n+    Arena::Stats r;\n+    r.used = r.free = r.total = r.chunks_used = r.chunks_free = 0;\n+    for (const auto& chunk: chunks) {\n+        if (chunk.second.isInUse()) {\n+            r.used += chunk.second.getSize();\n+            r.chunks_used += 1;\n+        } else {\n+            r.free += chunk.second.getSize();\n+            r.chunks_free += 1;\n+        }\n+        r.total += chunk.second.getSize();\n+    }\n+    return r;\n+}\n+\n+#ifdef ARENA_DEBUG\n+void Arena::walk() const\n+{\n+    for (const auto& chunk: chunks) {\n+        std::cout <<\n+            \"0x\" << std::hex << std::setw(16) << std::setfill('0') << chunk.first <<\n+            \" 0x\" << std::hex << std::setw(16) << std::setfill('0') << chunk.second.getSize() <<\n+            \" 0x\" << chunk.second.isInUse() << std::endl;\n+    }\n+    std::cout << std::endl;\n+}\n+#endif\n+\n+/*******************************************************************************/\n+// Implementation: Win32LockedPageAllocator\n+\n+#ifdef WIN32\n+/** LockedPageAllocator specialized for Windows.\n+ */\n+class Win32LockedPageAllocator: public LockedPageAllocator\n+{\n+public:\n+    Win32LockedPageAllocator();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess);\n+    void FreeLocked(void* addr, size_t len);\n+    size_t GetLimit();\n+private:\n+    size_t page_size;\n+};\n+\n+Win32LockedPageAllocator::Win32LockedPageAllocator()\n+{\n+    // Determine system page size in bytes\n+    SYSTEM_INFO sSysInfo;\n+    GetSystemInfo(&sSysInfo);\n+    page_size = sSysInfo.dwPageSize;\n+}\n+void *Win32LockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)\n+{\n+    len = align_up(len, page_size);\n+    void *addr = VirtualAlloc(nullptr, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);\n+    if (addr) {\n+        // VirtualLock is used to attempt to keep keying material out of swap. Note\n+        // that it does not provide this as a guarantee, but, in practice, memory\n+        // that has been VirtualLock'd almost never gets written to the pagefile\n+        // except in rare circumstances where memory is extremely low.\n+        *lockingSuccess = VirtualLock(const_cast<void*>(addr), len) != 0;\n+    }\n+    return addr;\n+}\n+void Win32LockedPageAllocator::FreeLocked(void* addr, size_t len)\n+{\n+    len = align_up(len, page_size);\n+    memory_cleanse(addr, len);\n+    VirtualUnlock(const_cast<void*>(addr), len);\n+}\n+\n+size_t Win32LockedPageAllocator::GetLimit()\n+{\n+    // TODO is there a limit on windows, how to get it?\n+    return std::numeric_limits<size_t>::max();\n+}\n+#endif\n+\n+/*******************************************************************************/\n+// Implementation: PosixLockedPageAllocator\n+\n+#ifndef WIN32\n+/** LockedPageAllocator specialized for OSes that don't try to be\n+ * special snowflakes.\n+ */\n+class PosixLockedPageAllocator: public LockedPageAllocator\n+{\n+public:\n+    PosixLockedPageAllocator();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess);\n+    void FreeLocked(void* addr, size_t len);\n+    size_t GetLimit();\n+private:\n+    size_t page_size;\n+};\n+\n+PosixLockedPageAllocator::PosixLockedPageAllocator()\n+{\n+    // Determine system page size in bytes\n+#if defined(PAGESIZE) // defined in limits.h\n+    page_size = PAGESIZE;\n+#else                   // assume some POSIX OS\n+    page_size = sysconf(_SC_PAGESIZE);\n+#endif\n+}\n+void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)\n+{\n+    void *addr;\n+    len = align_up(len, page_size);\n+    addr = mmap(nullptr, len, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);\n+    if (addr) {\n+        *lockingSuccess = mlock(addr, len) == 0;\n+    }\n+    return addr;\n+}\n+void PosixLockedPageAllocator::FreeLocked(void* addr, size_t len)\n+{\n+    len = align_up(len, page_size);\n+    memory_cleanse(addr, len);\n+    munlock(addr, len);\n+    munmap(addr, len);\n+}\n+size_t PosixLockedPageAllocator::GetLimit()\n+{\n+#ifdef RLIMIT_MEMLOCK\n+    struct rlimit rlim;\n+    if (getrlimit(RLIMIT_MEMLOCK, &rlim) == 0) {\n+        if (rlim.rlim_cur != RLIM_INFINITY) {\n+            return rlim.rlim_cur;\n+        }\n+    }\n+#endif\n+    return std::numeric_limits<size_t>::max();\n+}\n+#endif\n+\n+/*******************************************************************************/\n+// Implementation: LockedPool\n+\n+LockedPool::LockedPool(std::unique_ptr<LockedPageAllocator> allocator_in, LockingFailed_Callback lf_cb_in):\n+    allocator(std::move(allocator_in)), lf_cb(lf_cb_in), cumulative_bytes_locked(0)\n+{\n+}\n+\n+LockedPool::~LockedPool()\n+{\n+}\n+void* LockedPool::alloc(size_t size)\n+{\n+    std::lock_guard<std::mutex> lock(mutex);\n+    // Try allocating from each current arena\n+    for (auto &arena: arenas) {\n+        void *addr = arena.alloc(size);\n+        if (addr) {\n+            return addr;\n+        }\n+    }\n+    // If that fails, create a new one\n+    if (new_arena(ARENA_SIZE, ARENA_ALIGN)) {\n+        return arenas.back().alloc(size);\n+    }\n+    return nullptr;\n+}\n+\n+void LockedPool::free(void *ptr)\n+{\n+    std::lock_guard<std::mutex> lock(mutex);\n+    // TODO we can do better than this linear search by keeping a map of arena\n+    // extents to arena, and looking up the address.\n+    for (auto &arena: arenas) {\n+        if (arena.addressInArena(ptr)) {\n+            arena.free(ptr);\n+            return;\n+        }\n+    }\n+    throw std::runtime_error(\"LockedPool: invalid address not pointing to any arena\");\n+}\n+\n+LockedPool::Stats LockedPool::stats() const\n+{\n+    std::lock_guard<std::mutex> lock(mutex);\n+    LockedPool::Stats r;\n+    r.used = r.free = r.total = r.chunks_used = r.chunks_free = 0;\n+    r.locked = cumulative_bytes_locked;\n+    for (const auto &arena: arenas) {\n+        Arena::Stats i = arena.stats();\n+        r.used += i.used;\n+        r.free += i.free;\n+        r.total += i.total;\n+        r.chunks_used += i.chunks_used;\n+        r.chunks_free += i.chunks_free;\n+    }\n+    return r;\n+}\n+\n+bool LockedPool::new_arena(size_t size, size_t align)\n+{\n+    bool locked;\n+    // If this is the first arena, handle this specially: Cap the upper size\n+    // by the process limit. This makes sure that the first arena will at least\n+    // be locked. An exception to this is if the process limit is 0:\n+    // in this case no memory can be locked at all so we'll skip past this logic.\n+    if (arenas.empty()) {\n+        size_t limit = allocator->GetLimit();\n+        if (limit > 0) {\n+            size = std::min(size, limit);\n+        }\n+    }\n+    void *addr = allocator->AllocateLocked(size, &locked);\n+    if (!addr) {\n+        return false;\n+    }\n+    if (locked) {\n+        cumulative_bytes_locked += size;\n+    } else if (lf_cb) { // Call the locking-failed callback if locking failed\n+        if (!lf_cb()) { // If the callback returns false, free the memory and fail, otherwise consider the user warned and proceed.\n+            allocator->FreeLocked(addr, size);\n+            return false;\n+        }\n+    }\n+    arenas.emplace_back(allocator.get(), addr, size, align);\n+    return true;\n+}\n+\n+LockedPool::LockedPageArena::LockedPageArena(LockedPageAllocator *allocator_in, void *base_in, size_t size_in, size_t align_in):\n+    Arena(base_in, size_in, align_in), base(base_in), size(size_in), allocator(allocator_in)\n+{\n+}\n+LockedPool::LockedPageArena::~LockedPageArena()\n+{\n+    allocator->FreeLocked(base, size);\n+}\n+\n+/*******************************************************************************/\n+// Implementation: LockedPoolManager\n+//\n+LockedPoolManager::LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator):\n+    LockedPool(std::move(allocator), &LockedPoolManager::LockingFailed)\n+{\n+}\n+\n+bool LockedPoolManager::LockingFailed()\n+{\n+    // TODO: log something but how? without including util.h\n+    return true;\n+}\n+\n+void LockedPoolManager::CreateInstance()\n+{\n+    // Using a local static instance guarantees that the object is initialized\n+    // when it's first needed and also deinitialized after all objects that use\n+    // it are done with it.  I can think of one unlikely scenario where we may\n+    // have a static deinitialization order/problem, but the check in\n+    // LockedPoolManagerBase's destructor helps us detect if that ever happens.\n+#ifdef WIN32\n+    std::unique_ptr<LockedPageAllocator> allocator(new Win32LockedPageAllocator());\n+#else\n+    std::unique_ptr<LockedPageAllocator> allocator(new PosixLockedPageAllocator());\n+#endif\n+    static LockedPoolManager instance(std::move(allocator));\n+    LockedPoolManager::_instance = &instance;\n+}"
      },
      {
        "sha": "526c17a73fe764d72fec3e52f71b123efab47bd7",
        "filename": "src/support/lockedpool.h",
        "status": "added",
        "additions": 251,
        "deletions": 0,
        "changes": 251,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4536148b15595229d0563fb60913b23cb78788ed/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4536148b15595229d0563fb60913b23cb78788ed/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=4536148b15595229d0563fb60913b23cb78788ed",
        "patch": "@@ -0,0 +1,251 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_LOCKEDPOOL_H\n+#define BITCOIN_SUPPORT_LOCKEDPOOL_H\n+\n+#include <stdint.h>\n+#include <list>\n+#include <map>\n+#include <mutex>\n+#include <memory>\n+\n+/**\n+ * OS-dependent allocation and deallocation of locked/pinned memory pages.\n+ * Abstract base class.\n+ */\n+class LockedPageAllocator\n+{\n+public:\n+    virtual ~LockedPageAllocator() {}\n+    /** Allocate and lock memory pages.\n+     * If len is not a multiple of the system page size, it is rounded up.\n+     * Returns 0 in case of allocation failure.\n+     *\n+     * If locking the memory pages could not be accomplished it will still\n+     * return the memory, however the lockingSuccess flag will be false.\n+     * lockingSuccess is undefined if the allocation fails.\n+     */\n+    virtual void* AllocateLocked(size_t len, bool *lockingSuccess) = 0;\n+\n+    /** Unlock and free memory pages.\n+     * Clear the memory before unlocking.\n+     */\n+    virtual void FreeLocked(void* addr, size_t len) = 0;\n+\n+    /** Get the total limit on the amount of memory that may be locked by this\n+     * process, in bytes. Return size_t max if there is no limit or the limit\n+     * is unknown. Return 0 if no memory can be locked at all.\n+     */\n+    virtual size_t GetLimit() = 0;\n+};\n+\n+/* An arena manages a contiguous region of memory by dividing it into\n+ * chunks.\n+ */\n+class Arena\n+{\n+public:\n+    Arena(void *base, size_t size, size_t alignment);\n+    virtual ~Arena();\n+\n+    /** A chunk of memory.\n+     */\n+    struct Chunk\n+    {\n+        /** Most significant bit of size_t. This is used to mark\n+         * in-usedness of chunk.\n+         */\n+        const static size_t SIZE_MSB = 1LLU << ((sizeof(size_t)*8)-1);\n+        /** Maximum size of a chunk */\n+        const static size_t MAX_SIZE = SIZE_MSB - 1;\n+\n+        Chunk(size_t size_in, bool used_in):\n+            size(size_in | (used_in ? SIZE_MSB : 0)) {}\n+\n+        bool isInUse() const { return size & SIZE_MSB; }\n+        void setInUse(bool used_in) { size = (size & ~SIZE_MSB) | (used_in ? SIZE_MSB : 0); }\n+        size_t getSize() const { return size & ~SIZE_MSB; }\n+        void setSize(size_t size_in) { size = (size & SIZE_MSB) | size_in; }\n+    private:\n+        size_t size;\n+    };\n+    /** Memory statistics. */\n+    struct Stats\n+    {\n+        size_t used;\n+        size_t free;\n+        size_t total;\n+        size_t chunks_used;\n+        size_t chunks_free;\n+    };\n+\n+    /** Allocate size bytes from this arena.\n+     * Returns pointer on success, or 0 if memory is full or\n+     * the application tried to allocate 0 bytes.\n+     */\n+    void* alloc(size_t size);\n+\n+    /** Free a previously allocated chunk of memory.\n+     * Freeing the zero pointer has no effect.\n+     * Raises std::runtime_error in case of error.\n+     */\n+    void free(void *ptr);\n+\n+    /** Get arena usage statistics */\n+    Stats stats() const;\n+\n+#ifdef ARENA_DEBUG\n+    void walk() const;\n+#endif\n+\n+    /** Return whether a pointer points inside this arena.\n+     * This returns base <= ptr < (base+size) so only use it for (inclusive)\n+     * chunk starting addresses.\n+     */\n+    bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }\n+private:\n+    Arena(const Arena& other) = delete; // non construction-copyable\n+    Arena& operator=(const Arena&) = delete; // non copyable\n+\n+    /** Map of chunk address to chunk information. This class makes use of the\n+     * sorted order to merge previous and next chunks during deallocation.\n+     */\n+    std::map<char*, Chunk> chunks;\n+    /** Base address of arena */\n+    char* base;\n+    /** End address of arena */\n+    char* end;\n+    /** Minimum chunk alignment */\n+    size_t alignment;\n+};\n+\n+/** Pool for locked memory chunks.\n+ *\n+ * To avoid sensitive key data from being swapped to disk, the memory in this pool\n+ * is locked/pinned.\n+ *\n+ * An arena manages a contiguous region of memory. The pool starts out with one arena\n+ * but can grow to multiple arenas if the need arises.\n+ *\n+ * Unlike a normal C heap, the administrative structures are seperate from the managed\n+ * memory. This has been done as the sizes and bases of objects are not in themselves sensitive\n+ * information, as to conserve precious locked memory. In some operating systems\n+ * the amount of memory that can be locked is small.\n+ */\n+class LockedPool\n+{\n+public:\n+    /** Size of one arena of locked memory. This is a compromise.\n+     * Do not set this too low, as managing many arenas will increase\n+     * allocation and deallocation overhead. Setting it too high allocates\n+     * more locked memory from the OS than strictly necessary.\n+     */\n+    static const size_t ARENA_SIZE = 256*1024;\n+    /** Chunk alignment. Another compromise. Setting this too high will waste\n+     * memory, setting it too low will facilitate fragmentation.\n+     */\n+    static const size_t ARENA_ALIGN = 16;\n+\n+    /** Callback when allocation succeeds but locking fails.\n+     */\n+    typedef bool (*LockingFailed_Callback)();\n+\n+    /** Memory statistics. */\n+    struct Stats\n+    {\n+        size_t used;\n+        size_t free;\n+        size_t total;\n+        size_t locked;\n+        size_t chunks_used;\n+        size_t chunks_free;\n+    };\n+\n+    /** Create a new LockedPool. This takes ownership of the MemoryPageLocker,\n+     * you can only instantiate this with LockedPool(std::move(...)).\n+     *\n+     * The second argument is an optional callback when locking a newly allocated arena failed.\n+     * If this callback is provided and returns false, the allocation fails (hard fail), if\n+     * it returns true the allocation proceeds, but it could warn.\n+     */\n+    LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = 0);\n+    ~LockedPool();\n+\n+    /** Allocate size bytes from this arena.\n+     * Returns pointer on success, or 0 if memory is full or\n+     * the application tried to allocate 0 bytes.\n+     */\n+    void* alloc(size_t size);\n+\n+    /** Free a previously allocated chunk of memory.\n+     * Freeing the zero pointer has no effect.\n+     * Raises std::runtime_error in case of error.\n+     */\n+    void free(void *ptr);\n+\n+    /** Get pool usage statistics */\n+    Stats stats() const;\n+private:\n+    LockedPool(const LockedPool& other) = delete; // non construction-copyable\n+    LockedPool& operator=(const LockedPool&) = delete; // non copyable\n+\n+    std::unique_ptr<LockedPageAllocator> allocator;\n+\n+    /** Create an arena from locked pages */\n+    class LockedPageArena: public Arena\n+    {\n+    public:\n+        LockedPageArena(LockedPageAllocator *alloc_in, void *base_in, size_t size, size_t align);\n+        ~LockedPageArena();\n+    private:\n+        void *base;\n+        size_t size;\n+        LockedPageAllocator *allocator;\n+    };\n+\n+    bool new_arena(size_t size, size_t align);\n+\n+    std::list<LockedPageArena> arenas;\n+    LockingFailed_Callback lf_cb;\n+    size_t cumulative_bytes_locked;\n+    /** Mutex protects access to this pool's data structures, including arenas.\n+     */\n+    mutable std::mutex mutex;\n+};\n+\n+/**\n+ * Singleton class to keep track of locked (ie, non-swappable) memory, for use in\n+ * std::allocator templates.\n+ *\n+ * Some implementations of the STL allocate memory in some constructors (i.e., see\n+ * MSVC's vector<T> implementation where it allocates 1 byte of memory in the allocator.)\n+ * Due to the unpredictable order of static initializers, we have to make sure the\n+ * LockedPoolManager instance exists before any other STL-based objects that use\n+ * secure_allocator are created. So instead of having LockedPoolManager also be\n+ * static-initialized, it is created on demand.\n+ */\n+class LockedPoolManager : public LockedPool\n+{\n+public:\n+    /** Return the current instance, or create it once */\n+    static LockedPoolManager& Instance()\n+    {\n+        std::call_once(LockedPoolManager::init_flag, LockedPoolManager::CreateInstance);\n+        return *LockedPoolManager::_instance;\n+    }\n+\n+private:\n+    LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator);\n+\n+    /** Create a new LockedPoolManager specialized to the OS */\n+    static void CreateInstance();\n+    /** Called when locking fails, warn the user here */\n+    static bool LockingFailed();\n+\n+    static LockedPoolManager* _instance;\n+    static std::once_flag init_flag;\n+};\n+\n+#endif // BITCOIN_SUPPORT_LOCKEDPOOL_H"
      },
      {
        "sha": "7cea2d88c55c61947b33080bd32e4ab7b126ccbe",
        "filename": "src/support/pagelocker.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 70,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/support/pagelocker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/support/pagelocker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.cpp?ref=f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
        "patch": "@@ -1,70 +0,0 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"support/pagelocker.h\"\n-\n-#if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n-#endif\n-\n-#ifdef WIN32\n-#ifdef _WIN32_WINNT\n-#undef _WIN32_WINNT\n-#endif\n-#define _WIN32_WINNT 0x0501\n-#define WIN32_LEAN_AND_MEAN 1\n-#ifndef NOMINMAX\n-#define NOMINMAX\n-#endif\n-#include <windows.h>\n-// This is used to attempt to keep keying material out of swap\n-// Note that VirtualLock does not provide this as a guarantee on Windows,\n-// but, in practice, memory that has been VirtualLock'd almost never gets written to\n-// the pagefile except in rare circumstances where memory is extremely low.\n-#else\n-#include <sys/mman.h>\n-#include <limits.h> // for PAGESIZE\n-#include <unistd.h> // for sysconf\n-#endif\n-\n-LockedPageManager* LockedPageManager::_instance = NULL;\n-boost::once_flag LockedPageManager::init_flag = BOOST_ONCE_INIT;\n-\n-/** Determine system page size in bytes */\n-static inline size_t GetSystemPageSize()\n-{\n-    size_t page_size;\n-#if defined(WIN32)\n-    SYSTEM_INFO sSysInfo;\n-    GetSystemInfo(&sSysInfo);\n-    page_size = sSysInfo.dwPageSize;\n-#elif defined(PAGESIZE) // defined in limits.h\n-    page_size = PAGESIZE;\n-#else                   // assume some POSIX OS\n-    page_size = sysconf(_SC_PAGESIZE);\n-#endif\n-    return page_size;\n-}\n-\n-bool MemoryPageLocker::Lock(const void* addr, size_t len)\n-{\n-#ifdef WIN32\n-    return VirtualLock(const_cast<void*>(addr), len) != 0;\n-#else\n-    return mlock(addr, len) == 0;\n-#endif\n-}\n-\n-bool MemoryPageLocker::Unlock(const void* addr, size_t len)\n-{\n-#ifdef WIN32\n-    return VirtualUnlock(const_cast<void*>(addr), len) != 0;\n-#else\n-    return munlock(addr, len) == 0;\n-#endif\n-}\n-\n-LockedPageManager::LockedPageManager() : LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n-{\n-}"
      },
      {
        "sha": "042144fad5614e976e06d93a10950be5eb10e13e",
        "filename": "src/support/pagelocker.h",
        "status": "removed",
        "additions": 0,
        "deletions": 160,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f4d1fc259b5a62580d952c180b1189ccaa6af1bc/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=f4d1fc259b5a62580d952c180b1189ccaa6af1bc",
        "patch": "@@ -1,160 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_SUPPORT_PAGELOCKER_H\n-#define BITCOIN_SUPPORT_PAGELOCKER_H\n-\n-#include \"support/cleanse.h\"\n-\n-#include <map>\n-\n-#include <boost/thread/mutex.hpp>\n-#include <boost/thread/once.hpp>\n-\n-/**\n- * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n- *\n- * Memory locks do not stack, that is, pages which have been locked several times by calls to mlock()\n- * will be unlocked by a single call to munlock(). This can result in keying material ending up in swap when\n- * those functions are used naively. This class simulates stacking memory locks by keeping a counter per page.\n- *\n- * @note By using a map from each page base address to lock count, this class is optimized for\n- * small objects that span up to a few pages, mostly smaller than a page. To support large allocations,\n- * something like an interval tree would be the preferred data structure.\n- */\n-template <class Locker>\n-class LockedPageManagerBase\n-{\n-public:\n-    LockedPageManagerBase(size_t _page_size) : page_size(_page_size)\n-    {\n-        // Determine bitmask for extracting page from address\n-        assert(!(_page_size & (_page_size - 1))); // size must be power of two\n-        page_mask = ~(_page_size - 1);\n-    }\n-\n-    ~LockedPageManagerBase()\n-    {\n-    }\n-\n-\n-    // For all pages in affected range, increase lock count\n-    void LockRange(void* p, size_t size)\n-    {\n-        boost::mutex::scoped_lock lock(mutex);\n-        if (!size)\n-            return;\n-        const size_t base_addr = reinterpret_cast<size_t>(p);\n-        const size_t start_page = base_addr & page_mask;\n-        const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for (size_t page = start_page; page <= end_page; page += page_size) {\n-            Histogram::iterator it = histogram.find(page);\n-            if (it == histogram.end()) // Newly locked page\n-            {\n-                locker.Lock(reinterpret_cast<void*>(page), page_size);\n-                histogram.insert(std::make_pair(page, 1));\n-            } else // Page was already locked; increase counter\n-            {\n-                it->second += 1;\n-            }\n-        }\n-    }\n-\n-    // For all pages in affected range, decrease lock count\n-    void UnlockRange(void* p, size_t size)\n-    {\n-        boost::mutex::scoped_lock lock(mutex);\n-        if (!size)\n-            return;\n-        const size_t base_addr = reinterpret_cast<size_t>(p);\n-        const size_t start_page = base_addr & page_mask;\n-        const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for (size_t page = start_page; page <= end_page; page += page_size) {\n-            Histogram::iterator it = histogram.find(page);\n-            assert(it != histogram.end()); // Cannot unlock an area that was not locked\n-            // Decrease counter for page, when it is zero, the page will be unlocked\n-            it->second -= 1;\n-            if (it->second == 0) // Nothing on the page anymore that keeps it locked\n-            {\n-                // Unlock page and remove the count from histogram\n-                locker.Unlock(reinterpret_cast<void*>(page), page_size);\n-                histogram.erase(it);\n-            }\n-        }\n-    }\n-\n-    // Get number of locked pages for diagnostics\n-    int GetLockedPageCount()\n-    {\n-        boost::mutex::scoped_lock lock(mutex);\n-        return histogram.size();\n-    }\n-\n-private:\n-    Locker locker;\n-    boost::mutex mutex;\n-    size_t page_size, page_mask;\n-    // map of page base address to lock count\n-    typedef std::map<size_t, int> Histogram;\n-    Histogram histogram;\n-};\n-\n-\n-/**\n- * OS-dependent memory page locking/unlocking.\n- * Defined as policy class to make stubbing for test possible.\n- */\n-class MemoryPageLocker\n-{\n-public:\n-    /** Lock memory pages.\n-     * addr and len must be a multiple of the system page size\n-     */\n-    bool Lock(const void* addr, size_t len);\n-    /** Unlock memory pages.\n-     * addr and len must be a multiple of the system page size\n-     */\n-    bool Unlock(const void* addr, size_t len);\n-};\n-\n-/**\n- * Singleton class to keep track of locked (ie, non-swappable) memory pages, for use in\n- * std::allocator templates.\n- *\n- * Some implementations of the STL allocate memory in some constructors (i.e., see\n- * MSVC's vector<T> implementation where it allocates 1 byte of memory in the allocator.)\n- * Due to the unpredictable order of static initializers, we have to make sure the\n- * LockedPageManager instance exists before any other STL-based objects that use\n- * secure_allocator are created. So instead of having LockedPageManager also be\n- * static-initialized, it is created on demand.\n- */\n-class LockedPageManager : public LockedPageManagerBase<MemoryPageLocker>\n-{\n-public:\n-    static LockedPageManager& Instance()\n-    {\n-        boost::call_once(LockedPageManager::CreateInstance, LockedPageManager::init_flag);\n-        return *LockedPageManager::_instance;\n-    }\n-\n-private:\n-    LockedPageManager();\n-\n-    static void CreateInstance()\n-    {\n-        // Using a local static instance guarantees that the object is initialized\n-        // when it's first needed and also deinitialized after all objects that use\n-        // it are done with it.  I can think of one unlikely scenario where we may\n-        // have a static deinitialization order/problem, but the check in\n-        // LockedPageManagerBase's destructor helps us detect if that ever happens.\n-        static LockedPageManager instance;\n-        LockedPageManager::_instance = &instance;\n-    }\n-\n-    static LockedPageManager* _instance;\n-    static boost::once_flag init_flag;\n-};\n-\n-#endif // BITCOIN_SUPPORT_PAGELOCKER_H"
      },
      {
        "sha": "f0e848655f2056ad25b4d274fd42dbc055bb05f4",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 192,
        "deletions": 88,
        "changes": 280,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4536148b15595229d0563fb60913b23cb78788ed/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4536148b15595229d0563fb60913b23cb78788ed/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=4536148b15595229d0563fb60913b23cb78788ed",
        "patch": "@@ -11,110 +11,214 @@\n \n BOOST_FIXTURE_TEST_SUITE(allocator_tests, BasicTestingSetup)\n \n-// Dummy memory page locker for platform independent tests\n-static const void *last_lock_addr, *last_unlock_addr;\n-static size_t last_lock_len, last_unlock_len;\n-class TestLocker\n+BOOST_AUTO_TEST_CASE(arena_tests)\n {\n-public:\n-    bool Lock(const void *addr, size_t len)\n+    // Fake memory base address for testing\n+    // without actually using memory.\n+    void *synth_base = reinterpret_cast<void*>(0x08000000);\n+    const size_t synth_size = 1024*1024;\n+    Arena b(synth_base, synth_size, 16);\n+    void *chunk = b.alloc(1000);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(chunk != nullptr);\n+    BOOST_CHECK(b.stats().used == 1008); // Aligned to 16\n+    BOOST_CHECK(b.stats().total == synth_size); // Nothing has disappeared?\n+    b.free(chunk);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(b.stats().used == 0);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+    try { // Test exception on double-free\n+        b.free(chunk);\n+        BOOST_CHECK(0);\n+    } catch(std::runtime_error &)\n     {\n-        last_lock_addr = addr;\n-        last_lock_len = len;\n-        return true;\n     }\n-    bool Unlock(const void *addr, size_t len)\n-    {\n-        last_unlock_addr = addr;\n-        last_unlock_len = len;\n-        return true;\n+\n+    void *a0 = b.alloc(128);\n+    BOOST_CHECK(a0 == synth_base); // first allocation must start at beginning\n+    void *a1 = b.alloc(256);\n+    void *a2 = b.alloc(512);\n+    BOOST_CHECK(b.stats().used == 896);\n+    BOOST_CHECK(b.stats().total == synth_size);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    b.free(a0);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(b.stats().used == 768);\n+    b.free(a1);\n+    BOOST_CHECK(b.stats().used == 512);\n+    void *a3 = b.alloc(128);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(b.stats().used == 640);\n+    b.free(a2);\n+    BOOST_CHECK(b.stats().used == 128);\n+    b.free(a3);\n+    BOOST_CHECK(b.stats().used == 0);\n+    BOOST_CHECK(b.stats().total == synth_size);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+\n+    std::vector<void*> addr;\n+    BOOST_CHECK(b.alloc(0) == nullptr); // allocating 0 always returns nullptr\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    // Sweeping allocate all memory\n+    for (int x=0; x<1024; ++x)\n+        addr.push_back(b.alloc(1024));\n+    BOOST_CHECK(addr[0] == synth_base); // first allocation must start at beginning\n+    BOOST_CHECK(b.stats().free == 0);\n+    BOOST_CHECK(b.alloc(1024) == nullptr); // memory is full, this must return nullptr\n+    BOOST_CHECK(b.alloc(0) == nullptr);\n+    for (int x=0; x<1024; ++x)\n+        b.free(addr[x]);\n+    addr.clear();\n+    BOOST_CHECK(b.stats().total == synth_size);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+\n+    // Now in the other direction...\n+    for (int x=0; x<1024; ++x)\n+        addr.push_back(b.alloc(1024));\n+    for (int x=0; x<1024; ++x)\n+        b.free(addr[1023-x]);\n+    addr.clear();\n+\n+    // Now allocate in smaller unequal chunks, then deallocate haphazardly\n+    // Not all the chunks will succeed allocating, but freeing nullptr is\n+    // allowed so that is no problem.\n+    for (int x=0; x<2048; ++x)\n+        addr.push_back(b.alloc(x+1));\n+    for (int x=0; x<2048; ++x)\n+        b.free(addr[((x*23)%2048)^242]);\n+    addr.clear();\n+\n+    // Go entirely wild: free and alloc interleaved,\n+    // generate targets and sizes using pseudo-randomness.\n+    for (int x=0; x<2048; ++x)\n+        addr.push_back(0);\n+    uint32_t s = 0x12345678;\n+    for (int x=0; x<5000; ++x) {\n+        int idx = s & (addr.size()-1);\n+        if (s & 0x80000000) {\n+            b.free(addr[idx]);\n+            addr[idx] = 0;\n+        } else if(!addr[idx]) {\n+            addr[idx] = b.alloc((s >> 16) & 2047);\n+        }\n+        bool lsb = s & 1;\n+        s >>= 1;\n+        if (lsb)\n+            s ^= 0xf00f00f0; // LFSR period 0xf7ffffe0\n     }\n-};\n+    for (void *ptr: addr)\n+        b.free(ptr);\n+    addr.clear();\n \n-BOOST_AUTO_TEST_CASE(test_LockedPageManagerBase)\n+    BOOST_CHECK(b.stats().total == synth_size);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+}\n+\n+/** Mock LockedPageAllocator for testing */\n+class TestLockedPageAllocator: public LockedPageAllocator\n {\n-    const size_t test_page_size = 4096;\n-    LockedPageManagerBase<TestLocker> lpm(test_page_size);\n-    size_t addr;\n-    last_lock_addr = last_unlock_addr = 0;\n-    last_lock_len = last_unlock_len = 0;\n-\n-    /* Try large number of small objects */\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), 33);\n-        addr += 33;\n-    }\n-    /* Try small number of page-sized objects, straddling two pages */\n-    addr = test_page_size*100 + 53;\n-    for(int i=0; i<100; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n-    }\n-    /* Try small number of page-sized objects aligned to exactly one page */\n-    addr = test_page_size*300;\n-    for(int i=0; i<100; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n-    }\n-    /* one very large object, straddling pages */\n-    lpm.LockRange(reinterpret_cast<void*>(test_page_size*600+1), test_page_size*500);\n-    BOOST_CHECK(last_lock_addr == reinterpret_cast<void*>(test_page_size*(600+500)));\n-    /* one very large object, page aligned */\n-    lpm.LockRange(reinterpret_cast<void*>(test_page_size*1200), test_page_size*500-1);\n-    BOOST_CHECK(last_lock_addr == reinterpret_cast<void*>(test_page_size*(1200+500-1)));\n-\n-    BOOST_CHECK(lpm.GetLockedPageCount() == (\n-        (1000*33+test_page_size-1)/test_page_size + // small objects\n-        101 + 100 +  // page-sized objects\n-        501 + 500)); // large objects\n-    BOOST_CHECK((last_lock_len & (test_page_size-1)) == 0); // always lock entire pages\n-    BOOST_CHECK(last_unlock_len == 0); // nothing unlocked yet\n-\n-    /* And unlock again */\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n+public:\n+    TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}\n+    void* AllocateLocked(size_t len, bool *lockingSuccess)\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), 33);\n-        addr += 33;\n+        *lockingSuccess = false;\n+        if (count > 0) {\n+            --count;\n+\n+            if (lockedcount > 0) {\n+                --lockedcount;\n+                *lockingSuccess = true;\n+            }\n+\n+            return reinterpret_cast<void*>(0x08000000 + (count<<24)); // Fake address, do not actually use this memory\n+        }\n+        return 0;\n     }\n-    addr = test_page_size*100 + 53;\n-    for(int i=0; i<100; ++i)\n+    void FreeLocked(void* addr, size_t len)\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n     }\n-    addr = test_page_size*300;\n-    for(int i=0; i<100; ++i)\n+    size_t GetLimit()\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n+        return std::numeric_limits<size_t>::max();\n     }\n-    lpm.UnlockRange(reinterpret_cast<void*>(test_page_size*600+1), test_page_size*500);\n-    lpm.UnlockRange(reinterpret_cast<void*>(test_page_size*1200), test_page_size*500-1);\n+private:\n+    int count;\n+    int lockedcount;\n+};\n \n-    /* Check that everything is released */\n-    BOOST_CHECK(lpm.GetLockedPageCount() == 0);\n+BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)\n+{\n+    // Test over three virtual arenas, of which one will succeed being locked\n+    std::unique_ptr<LockedPageAllocator> x(new TestLockedPageAllocator(3, 1));\n+    LockedPool pool(std::move(x));\n+    BOOST_CHECK(pool.stats().total == 0);\n+    BOOST_CHECK(pool.stats().locked == 0);\n \n-    /* A few and unlocks of size zero (should have no effect) */\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), 0);\n-        addr += 1;\n-    }\n-    BOOST_CHECK(lpm.GetLockedPageCount() == 0);\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n+    void *a0 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a0);\n+    BOOST_CHECK(pool.stats().locked == LockedPool::ARENA_SIZE);\n+    void *a1 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a1);\n+    void *a2 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a2);\n+    void *a3 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a3);\n+    void *a4 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a4);\n+    void *a5 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a5);\n+    // We've passed a count of three arenas, so this allocation should fail\n+    void *a6 = pool.alloc(16);\n+    BOOST_CHECK(!a6);\n+\n+    pool.free(a0);\n+    pool.free(a2);\n+    pool.free(a4);\n+    pool.free(a1);\n+    pool.free(a3);\n+    pool.free(a5);\n+    BOOST_CHECK(pool.stats().total == 3*LockedPool::ARENA_SIZE);\n+    BOOST_CHECK(pool.stats().locked == LockedPool::ARENA_SIZE);\n+    BOOST_CHECK(pool.stats().used == 0);\n+}\n+\n+// These tests used the live LockedPoolManager object, this is also used\n+// by other tests so the conditions are somewhat less controllable and thus the\n+// tests are somewhat more error-prone.\n+BOOST_AUTO_TEST_CASE(lockedpool_tests_live)\n+{\n+    LockedPoolManager &pool = LockedPoolManager::Instance();\n+    LockedPool::Stats initial = pool.stats();\n+\n+    void *a0 = pool.alloc(16);\n+    BOOST_CHECK(a0);\n+    // Test reading and writing the allocated memory\n+    *((uint32_t*)a0) = 0x1234;\n+    BOOST_CHECK(*((uint32_t*)a0) == 0x1234);\n+\n+    pool.free(a0);\n+    try { // Test exception on double-free\n+        pool.free(a0);\n+        BOOST_CHECK(0);\n+    } catch(std::runtime_error &)\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), 0);\n-        addr += 1;\n     }\n-    BOOST_CHECK(lpm.GetLockedPageCount() == 0);\n-    BOOST_CHECK((last_unlock_len & (test_page_size-1)) == 0); // always unlock entire pages\n+    // If more than one new arena was allocated for the above tests, something is wrong\n+    BOOST_CHECK(pool.stats().total <= (initial.total + LockedPool::ARENA_SIZE));\n+    // Usage must be back to where it started\n+    BOOST_CHECK(pool.stats().used == initial.used);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "65679990967c0fa4fc0320907d9cd33c801faf5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NTY3OTk5MDk2N2MwZmE0ZmMwMzIwOTA3ZDljZDMzYzgwMWZhZjVh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-09-18T08:22:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T11:17:26Z"
      },
      "message": "rpc: Add `getmemoryinfo` call\n\n```\ngetmemoryinfo\nReturns an object containing information about memory usage.\n\nResult:\n{\n  \"locked\": {               (json object) Information about locked memory manager\n    \"used\": xxxxx,          (numeric) Number of bytes used\n    \"free\": xxxxx,          (numeric) Number of bytes available in current arenas\n    \"total\": xxxxxxx,       (numeric) Total number of bytes managed\n    \"locked\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\n  }\n}\n\nExamples:\n> bitcoin-cli getmemoryinfo\n> curl --user myusername --data-binary '{\"jsonrpc\": \"1.0\", \"id\":\"curltest\", \"method\": \"getmemoryinfo\", \"params\": [] }' -H 'content-type: text/plain;' http://127.0.0.1:8332/\n```",
      "tree": {
        "sha": "79d56f6c8ac32fffda84e49c16a87216b15f618c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/79d56f6c8ac32fffda84e49c16a87216b15f618c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65679990967c0fa4fc0320907d9cd33c801faf5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65679990967c0fa4fc0320907d9cd33c801faf5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65679990967c0fa4fc0320907d9cd33c801faf5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65679990967c0fa4fc0320907d9cd33c801faf5a/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4536148b15595229d0563fb60913b23cb78788ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4536148b15595229d0563fb60913b23cb78788ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4536148b15595229d0563fb60913b23cb78788ed"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 43,
      "deletions": 0
    },
    "files": [
      {
        "sha": "30db06dd321b53126f6bc9164dffb40652ad44b2",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65679990967c0fa4fc0320907d9cd33c801faf5a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65679990967c0fa4fc0320907d9cd33c801faf5a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=65679990967c0fa4fc0320907d9cd33c801faf5a",
        "patch": "@@ -450,10 +450,53 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue RPCLockedMemoryInfo()\n+{\n+    LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n+    UniValue obj(UniValue::VOBJ);\n+    obj.push_back(Pair(\"used\", uint64_t(stats.used)));\n+    obj.push_back(Pair(\"free\", uint64_t(stats.free)));\n+    obj.push_back(Pair(\"total\", uint64_t(stats.total)));\n+    obj.push_back(Pair(\"locked\", uint64_t(stats.locked)));\n+    obj.push_back(Pair(\"chunks_used\", uint64_t(stats.chunks_used)));\n+    obj.push_back(Pair(\"chunks_free\", uint64_t(stats.chunks_free)));\n+    return obj;\n+}\n+\n+UniValue getmemoryinfo(const JSONRPCRequest& request)\n+{\n+    /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n+     * as users will undoubtedly confuse it with the other \"memory pool\"\n+     */\n+    if (request.fHelp || request.params.size() != 0)\n+        throw runtime_error(\n+            \"getmemoryinfo\\n\"\n+            \"Returns an object containing information about memory usage.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"locked\\\": {               (json object) Information about locked memory manager\\n\"\n+            \"    \\\"used\\\": xxxxx,          (numeric) Number of bytes used\\n\"\n+            \"    \\\"free\\\": xxxxx,          (numeric) Number of bytes available in current arenas\\n\"\n+            \"    \\\"total\\\": xxxxxxx,       (numeric) Total number of bytes managed\\n\"\n+            \"    \\\"locked\\\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\\n\"\n+            \"    \\\"chunks_used\\\": xxxxx,   (numeric) Number allocated chunks\\n\"\n+            \"    \\\"chunks_free\\\": xxxxx,   (numeric) Number unused chunks\\n\"\n+            \"  }\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getmemoryinfo\", \"\")\n+            + HelpExampleRpc(\"getmemoryinfo\", \"\")\n+        );\n+    UniValue obj(UniValue::VOBJ);\n+    obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+    return obj;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n+    { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true  },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },"
      }
    ]
  },
  {
    "sha": "444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDRjNjczZDg1YmEwNzg3YjJjMmZmMWFiMGYzODE0Y2UwMjYyMmE1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-18T15:49:02Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T11:17:26Z"
      },
      "message": "bench: Add benchmark for lockedpool allocation/deallocation",
      "tree": {
        "sha": "b735ab146b3703e10ed4ed4b697667bcb05f197d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b735ab146b3703e10ed4ed4b697667bcb05f197d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444c673d85ba0787b2c2ff1ab0f3814ce02622a5/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65679990967c0fa4fc0320907d9cd33c801faf5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65679990967c0fa4fc0320907d9cd33c801faf5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65679990967c0fa4fc0320907d9cd33c801faf5a"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 49,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9760ad089c93cb433926a1e53e7d7f8abbcd723a",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/444c673d85ba0787b2c2ff1ab0f3814ce02622a5/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/444c673d85ba0787b2c2ff1ab0f3814ce02622a5/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
        "patch": "@@ -17,7 +17,8 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/ccoins_caching.cpp \\\n   bench/mempool_eviction.cpp \\\n   bench/verify_script.cpp \\\n-  bench/base58.cpp\n+  bench/base58.cpp \\\n+  bench/lockedpool.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "5df5b1ac6e640a795306101cdd7df0097b51186e",
        "filename": "src/bench/lockedpool.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/444c673d85ba0787b2c2ff1ab0f3814ce02622a5/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/444c673d85ba0787b2c2ff1ab0f3814ce02622a5/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"support/lockedpool.h\"\n+\n+#include <iostream>\n+#include <vector>\n+\n+#define ASIZE 2048\n+#define BITER 5000\n+#define MSIZE 2048\n+\n+static void LockedPool(benchmark::State& state)\n+{\n+    void *synth_base = reinterpret_cast<void*>(0x08000000);\n+    const size_t synth_size = 1024*1024;\n+    Arena b(synth_base, synth_size, 16);\n+\n+    std::vector<void*> addr;\n+    for (int x=0; x<ASIZE; ++x)\n+        addr.push_back(0);\n+    uint32_t s = 0x12345678;\n+    while (state.KeepRunning()) {\n+        for (int x=0; x<BITER; ++x) {\n+            int idx = s & (addr.size()-1);\n+            if (s & 0x80000000) {\n+                b.free(addr[idx]);\n+                addr[idx] = 0;\n+            } else if(!addr[idx]) {\n+                addr[idx] = b.alloc((s >> 16) & (MSIZE-1));\n+            }\n+            bool lsb = s & 1;\n+            s >>= 1;\n+            if (lsb)\n+                s ^= 0xf00f00f0; // LFSR period 0xf7ffffe0\n+        }\n+    }\n+    for (void *ptr: addr)\n+        b.free(ptr);\n+    addr.clear();\n+}\n+\n+BENCHMARK(LockedPool);\n+"
      }
    ]
  },
  {
    "sha": "ba26d415c0d557d59e920547a54b17928e71522a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYTI2ZDQxNWMwZDU1N2Q1OWU5MjA1NDdhNTRiMTc5MjhlNzE1MjJh",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2016-10-26T10:04:27Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-27T12:29:06Z"
      },
      "message": "Update build notes for dropping osx 10.7 support\n\nGithub-Pull: #9022\nRebased-From: 1d1246314f761b3f84c869cb7b0af49cc25b55b3",
      "tree": {
        "sha": "149304215c5a661c787981195cfdc3c86f926ffd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/149304215c5a661c787981195cfdc3c86f926ffd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ba26d415c0d557d59e920547a54b17928e71522a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba26d415c0d557d59e920547a54b17928e71522a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ba26d415c0d557d59e920547a54b17928e71522a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba26d415c0d557d59e920547a54b17928e71522a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86f9e3dbba416a142df47dbd646c8e8ba772c955"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63a7ee28ca9317fedee2d0ac07e8cc8e9444ac65",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ba26d415c0d557d59e920547a54b17928e71522a/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ba26d415c0d557d59e920547a54b17928e71522a/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=ba26d415c0d557d59e920547a54b17928e71522a",
        "patch": "@@ -90,6 +90,6 @@ Uncheck everything except Qt Creator during the installation process.\n Notes\n -----\n \n-* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n+* Tested on OS X 10.8 through 10.12 on 64-bit Intel processors only.\n \n * Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)"
      }
    ]
  },
  {
    "sha": "a49b4a75a1b671492e65eed17d6894d85ea5ebfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDliNGE3NWExYjY3MTQ5MmU2NWVlZDE3ZDY4OTRkODVlYTVlYmZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T12:57:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T12:57:41Z"
      },
      "message": "doc: Add release notes for 0.13.1 release",
      "tree": {
        "sha": "ab57b6601e09db8a064da3c58dc060c83dfce1c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab57b6601e09db8a064da3c58dc060c83dfce1c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a49b4a75a1b671492e65eed17d6894d85ea5ebfd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYEfnGAAoJEHSBCwEjRsmmse0H/RJepuTpLIiuzpkRpuP9Cokd\nBMpEf/PpuaWWviUDjwsRJIsdFbTvzBAfPp71c1i8CVg+FxAYHkkTMSrIk/tI8KUt\nrWFSqvjbCzJtX37V/9JMXu9zvY+U7Ep8SZSgaNqIpqCR29nrDGziSq5ICg3rEc7S\nhQUizSXFpy4g3Di/OVcbBG5e4V1MMHiOnLDtmVx5jqLh4i/Suretui2GKWGP2IC7\n7KnYYUzJZApp82HaqS13iXaNh96+l1DLHoz99oM/zwUnEiJq/KfBtNuLtA0uShyZ\ndaUi8qAqrc3Caa1xuVgEUPze6o22i6QTiGoJjGmoLwSZaHN3vwIM855e7DDuwX0=\n=7raK\n-----END PGP SIGNATURE-----",
        "payload": "tree ab57b6601e09db8a064da3c58dc060c83dfce1c7\nparent 86f9e3dbba416a142df47dbd646c8e8ba772c955\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477573048 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477573061 +0200\n\ndoc: Add release notes for 0.13.1 release\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49b4a75a1b671492e65eed17d6894d85ea5ebfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a49b4a75a1b671492e65eed17d6894d85ea5ebfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49b4a75a1b671492e65eed17d6894d85ea5ebfd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86f9e3dbba416a142df47dbd646c8e8ba772c955"
      }
    ],
    "stats": {
      "total": 410,
      "additions": 410,
      "deletions": 0
    },
    "files": [
      {
        "sha": "75c2d61be8d3c1b3c85bf9a89df1821b39d42e56",
        "filename": "doc/release-notes/release-notes-0.13.1.md",
        "status": "added",
        "additions": 410,
        "deletions": 0,
        "changes": 410,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a49b4a75a1b671492e65eed17d6894d85ea5ebfd/doc/release-notes/release-notes-0.13.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a49b4a75a1b671492e65eed17d6894d85ea5ebfd/doc/release-notes/release-notes-0.13.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.1.md?ref=a49b4a75a1b671492e65eed17d6894d85ea5ebfd",
        "patch": "@@ -0,0 +1,410 @@\n+Bitcoin Core version 0.13.1 is now available from:\n+\n+  <https://bitcoin.org/bin/bitcoin-core-0.13.1/>\n+\n+This is a new minor version release, including activation parameters for the\n+segwit softfork, various bugfixes and performance improvements, as well as\n+updated translations.\n+\n+Please report bugs using the issue tracker at github:\n+\n+  <https://github.com/bitcoin/bitcoin/issues>\n+\n+To receive security and update notifications, please subscribe to:\n+\n+  <https://bitcoincore.org/en/list/announcements/join/>\n+\n+Compatibility\n+==============\n+\n+Microsoft ended support for Windows XP on [April 8th, 2014](https://www.microsoft.com/en-us/WindowsForBusiness/end-of-xp-support),\n+an OS initially released in 2001. This means that not even critical security\n+updates will be released anymore. Without security updates, using a bitcoin\n+wallet on a XP machine is irresponsible at least.\n+\n+In addition to that, with 0.12.x there have been varied reports of Bitcoin Core\n+randomly crashing on Windows XP. It is [not clear](https://github.com/bitcoin/bitcoin/issues/7681#issuecomment-217439891)\n+what the source of these crashes is, but it is likely that upstream\n+libraries such as Qt are no longer being tested on XP.\n+\n+We do not have time nor resources to provide support for an OS that is\n+end-of-life. From 0.13.0 on, Windows XP is no longer supported. Users are\n+suggested to upgrade to a newer version of Windows, or install an alternative OS\n+that is supported.\n+\n+No attempt is made to prevent installing or running the software on Windows XP,\n+you can still do so at your own risk, but do not expect it to work: do not\n+report issues about Windows XP to the issue tracker.\n+\n+From 0.13.1 onwards OS X 10.7 is no longer supported. 0.13.0 was intended to work on 10.7+, \n+but severe issues with the libc++ version on 10.7.x keep it from running reliably. \n+0.13.1 now requires 10.8+, and will communicate that to 10.7 users, rather than crashing unexpectedly.\n+\n+Notable changes\n+===============\n+\n+Segregated witness soft fork\n+----------------------------\n+\n+Segregated witness (segwit) is a soft fork that, if activated, will\n+allow transaction-producing software to separate (segregate) transaction\n+signatures (witnesses) from the part of the data in a transaction that is\n+covered by the txid. This provides several immediate benefits:\n+\n+- **Elimination of unwanted transaction malleability:** Segregating the witness\n+  allows both existing and upgraded software to calculate the transaction\n+  identifier (txid) of transactions without referencing the witness, which can\n+  sometimes be changed by third-parties (such as miners) or by co-signers in a\n+  multisig spend. This solves all known cases of unwanted transaction\n+  malleability, which is a problem that makes programming Bitcoin wallet\n+  software more difficult and which seriously complicates the design of smart\n+  contracts for Bitcoin.\n+\n+- **Capacity increase:** Segwit transactions contain new fields that are not\n+  part of the data currently used to calculate the size of a block, which\n+  allows a block containing segwit transactions to hold more data than allowed\n+  by the current maximum block size. Estimates based on the transactions\n+  currently found in blocks indicate that if all wallets switch to using\n+  segwit, the network will be able to support about 70% more transactions. The\n+  network will also be able to support more of the advanced-style payments\n+  (such as multisig) than it can support now because of the different weighting\n+  given to different parts of a transaction after segwit activates (see the\n+  following section for details).\n+\n+- **Weighting data based on how it affects node performance:** Some parts of\n+  each Bitcoin block need to be stored by nodes in order to validate future\n+  blocks; other parts of a block can be immediately forgotten (pruned) or used\n+  only for helping other nodes sync their copy of the block chain.  One large\n+  part of the immediately prunable data are transaction signatures (witnesses),\n+  and segwit makes it possible to give a different \"weight\" to segregated\n+  witnesses to correspond with the lower demands they place on node resources.\n+  Specifically, each byte of a segregated witness is given a weight of 1, each\n+  other byte in a block is given a weight of 4, and the maximum allowed weight\n+  of a block is 4 million.  Weighting the data this way better aligns the most\n+  profitable strategy for creating blocks with the long-term costs of block\n+  validation.\n+\n+- **Signature covers value:** A simple improvement in the way signatures are\n+  generated in segwit simplifies the design of secure signature generators\n+  (such as hardware wallets), reduces the amount of data the signature\n+  generator needs to download, and allows the signature generator to operate\n+  more quickly.  This is made possible by having the generator sign the amount\n+  of bitcoins they think they are spending, and by having full nodes refuse to\n+  accept those signatures unless the amount of bitcoins being spent is exactly\n+  the same as was signed.  For non-segwit transactions, wallets instead had to\n+  download the complete previous transactions being spent for every payment\n+  they made, which could be a slow operation on hardware wallets and in other\n+  situations where bandwidth or computation speed was constrained.\n+\n+- **Linear scaling of sighash operations:** In 2015 a block was produced that\n+  required about 25 seconds to validate on modern hardware because of the way\n+  transaction signature hashes are performed.  Other similar blocks, or blocks\n+  that could take even longer to validate, can still be produced today.  The\n+  problem that caused this can't be fixed in a soft fork without unwanted\n+  side-effects, but transactions that opt-in to using segwit will now use a\n+  different signature method that doesn't suffer from this problem and doesn't\n+  have any unwanted side-effects.\n+\n+- **Increased security for multisig:** Bitcoin addresses (both P2PKH addresses\n+  that start with a '1' and P2SH addresses that start with a '3') use a hash\n+  function known as RIPEMD-160.  For P2PKH addresses, this provides about 160\n+  bits of security---which is beyond what cryptographers believe can be broken\n+  today.  But because P2SH is more flexible, only about 80 bits of security is\n+  provided per address. Although 80 bits is very strong security, it is within\n+  the realm of possibility that it can be broken by a powerful adversary.\n+  Segwit allows advanced transactions to use the SHA256 hash function instead,\n+  which provides about 128 bits of security  (that is 281 trillion times as\n+  much security as 80 bits and is equivalent to the maximum bits of security\n+  believed to be provided by Bitcoin's choice of parameters for its Elliptic\n+  Curve Digital Security Algorithm [ECDSA].)\n+\n+- **More efficient almost-full-node security** Satoshi Nakamoto's original\n+  Bitcoin paper describes a method for allowing newly-started full nodes to\n+  skip downloading and validating some data from historic blocks that are\n+  protected by large amounts of proof of work.  Unfortunately, Nakamoto's\n+  method can't guarantee that a newly-started node using this method will\n+  produce an accurate copy of Bitcoin's current ledger (called the UTXO set),\n+  making the node vulnerable to falling out of consensus with other nodes.\n+  Although the problems with Nakamoto's method can't be fixed in a soft fork,\n+  Segwit accomplishes something similar to his original proposal: it makes it\n+  possible for a node to optionally skip downloading some blockchain data\n+  (specifically, the segregated witnesses) while still ensuring that the node\n+  can build an accurate copy of the UTXO set for the block chain with the most\n+  proof of work.  Segwit enables this capability at the consensus layer, but\n+  note that Bitcoin Core does not provide an option to use this capability as\n+  of this 0.13.1 release.\n+\n+- **Script versioning:** Segwit makes it easy for future soft forks to allow\n+  Bitcoin users to individually opt-in to almost any change in the Bitcoin\n+  Script language when those users receive new transactions.  Features\n+  currently being researched by Bitcoin Core contributors that may use this\n+  capability include support for Schnorr signatures, which can improve the\n+  privacy and efficiency of multisig transactions (or transactions with\n+  multiple inputs), and Merklized Abstract Syntax Trees (MAST), which can\n+  improve the privacy and efficiency of scripts with two or more conditions.\n+  Other Bitcoin community members are studying several other improvements\n+  that can be made using script versioning.\n+\n+Activation for the segwit soft fork is being managed using BIP9\n+versionbits.  Segwit's version bit is bit 1, and nodes will begin\n+tracking which blocks signal support for segwit at the beginning of the\n+first retarget period after segwit's start date of 15 November 2016.  If\n+95% of blocks within a 2,016-block retarget period (about two weeks)\n+signal support for segwit, the soft fork will be locked in.  After\n+another 2,016 blocks, segwit will activate.\n+\n+For more information about segwit, please see the [segwit FAQ][], the\n+[segwit wallet developers guide][] or BIPs [141][BIP141], [143][BIP143],\n+[144][BIP144], and [145][BIP145].  If you're a miner or mining pool\n+operator, please see the [versionbits FAQ][] for information about\n+signaling support for a soft fork.\n+\n+[Segwit FAQ]: https://bitcoincore.org/en/2016/01/26/segwit-benefits/\n+[segwit wallet developers guide]: https://bitcoincore.org/en/segwit_wallet_dev/\n+[BIP141]: https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki\n+[BIP143]: https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki\n+[BIP144]: https://github.com/bitcoin/bips/blob/master/bip-0144.mediawiki\n+[BIP145]: https://github.com/bitcoin/bips/blob/master/bip-0145.mediawiki\n+[versionbits FAQ]: https://bitcoincore.org/en/2016/06/08/version-bits-miners-faq/\n+\n+\n+Null dummy soft fork\n+-------------------\n+\n+Combined with the segwit soft fork is an additional change that turns a\n+long-existing network relay policy into a consensus rule. The\n+`OP_CHECKMULTISIG` and `OP_CHECKMULTISIGVERIFY` opcodes consume an extra\n+stack element (\"dummy element\") after signature validation. The dummy\n+element is not inspected in any manner, and could be replaced by any\n+value without invalidating the script.\n+\n+Because any value can be used for this dummy element, it's possible for\n+a third-party to insert data into other people's transactions, changing\n+the transaction's txid (called transaction malleability) and possibly\n+causing other problems.\n+\n+Since Bitcoin Core 0.10.0, nodes have defaulted to only relaying and\n+mining transactions whose dummy element was a null value (0x00, also\n+called OP_0).  The null dummy soft fork turns this relay rule into a\n+consensus rule both for non-segwit transactions and segwit transactions,\n+so that this method of mutating transactions is permanently eliminated\n+from the network.\n+\n+Signaling for the null dummy soft fork is done by signaling support\n+for segwit, and the null dummy soft fork will activate at the same time\n+as segwit.\n+\n+For more information, please see [BIP147][].\n+\n+[BIP147]: https://github.com/bitcoin/bips/blob/master/bip-0147.mediawiki\n+\n+Low-level RPC changes\n+---------------------\n+\n+- `importprunedfunds` only accepts two required arguments. Some versions accept\n+  an optional third arg, which was always ignored. Make sure to never pass more\n+  than two arguments.\n+\n+\n+Linux ARM builds\n+----------------\n+\n+With the 0.13.0 release, pre-built Linux ARM binaries were added to the set of\n+uploaded executables. Additional detail on the ARM architecture targeted by each\n+is provided below.\n+\n+The following extra files can be found in the download directory or torrent:\n+\n+- `bitcoin-${VERSION}-arm-linux-gnueabihf.tar.gz`: Linux binaries targeting\n+  the 32-bit ARMv7-A architecture.\n+- `bitcoin-${VERSION}-aarch64-linux-gnu.tar.gz`: Linux binaries targeting\n+  the 64-bit ARMv8-A architecture.\n+\n+ARM builds are still experimental. If you have problems on a certain device or\n+Linux distribution combination please report them on the bug tracker, it may be\n+possible to resolve them. Note that the device you use must be (backward)\n+compatible with the architecture targeted by the binary that you use.\n+For example, a Raspberry Pi 2 Model B or Raspberry Pi 3 Model B (in its 32-bit\n+execution state) device, can run the 32-bit ARMv7-A targeted binary. However,\n+no model of Raspberry Pi 1 device can run either binary because they are all\n+ARMv6 architecture devices that are not compatible with ARMv7-A or ARMv8-A.\n+\n+Note that Android is not considered ARM Linux in this context. The executables\n+are not expected to work out of the box on Android.\n+\n+\n+0.13.1 Change log\n+=================\n+\n+Detailed release notes follow. This overview includes changes that affect\n+behavior, not code moves, refactors and string updates. For convenience in locating\n+the code changes and accompanying discussion, both the pull request and\n+git merge commit are mentioned.\n+\n+### Consensus\n+- #8636 `9dfa0c8` Implement NULLDUMMY softfork (BIP147) (jl2012)\n+- #8848 `7a34a46` Add NULLDUMMY verify flag in bitcoinconsensus.h (jl2012)\n+- #8937 `8b66659` Define start and end time for segwit deployment (sipa)\n+\n+### RPC and other APIs\n+- #8581 `526d2b0` Drop misleading option in importprunedfunds (MarcoFalke)\n+- #8699 `a5ec248` Remove createwitnessaddress RPC command (jl2012)\n+- #8780 `794b007` Deprecate getinfo (MarcoFalke)\n+- #8832 `83ad563` Throw JSONRPCError when utxo set can not be read (MarcoFalke)\n+- #8884 `b987348` getblockchaininfo help: pruneheight is the lowest, not highest, block (luke-jr)\n+- #8858 `3f508ed` rpc: Generate auth cookie in hex instead of base64 (laanwj)\n+- #8951 `7c2bf4b` RPC/Mining: getblocktemplate: Update and fix formatting of help (luke-jr)\n+\n+### Block and transaction handling\n+- #8611 `a9429ca` Reduce default number of blocks to check at startup (sipa)\n+- #8634 `3e80ab7` Add policy: null signature for failed CHECK(MULTI)SIG (jl2012)\n+- #8525 `1672225` Do not store witness txn in rejection cache (sipa)\n+- #8499 `9777fe1` Add several policy limits and disable uncompressed keys for segwit scripts (jl2012)\n+- #8526 `0027672` Make non-minimal OP_IF/NOTIF argument non-standard for P2WSH (jl2012)\n+- #8524 `b8c79a0` Precompute sighashes (sipa)\n+- #8651 `b8c79a0` Predeclare PrecomputedTransactionData as struct (sipa)\n+\n+### P2P protocol and network code\n+- #8740 `42ea51a` No longer send local address in addrMe (laanwj)\n+- #8427 `69d1cd2` Ignore `notfound` P2P messages (laanwj)\n+- #8573 `4f84082` Set jonasschnellis dns-seeder filter flag (jonasschnelli)\n+- #8712 `23feab1` Remove maxuploadtargets recommended minimum (jonasschnelli)\n+- #8862 `7ae6242` Fix a few cases where messages were sent after requested disconnect (theuni)\n+- #8393 `fe1975a` Support for compact blocks together with segwit (sipa)\n+- #8282 `2611ad7` Feeler connections to increase online addrs in the tried table (EthanHeilman)\n+- #8612 `2215c22` Check for compatibility with download in FindNextBlocksToDownload (sipa)\n+- #8606 `bbf379b` Fix some locks (sipa)\n+- #8594 `ab295bb` Do not add random inbound peers to addrman (gmaxwell)\n+- #8940 `5b4192b` Add x9 service bit support to dnsseed.bluematt.me, seed.bitcoinstats.com (TheBlueMatt, cdecker)\n+- #8944 `685e4c7` Remove bogus assert on number of oubound connections. (TheBlueMatt)\n+- #8949 `0dbc48a` Be more agressive in getting connections to peers with relevant services (gmaxwell)\n+\n+### Build system\n+- #8293 `fa5b249` Allow building libbitcoinconsensus without any univalue (luke-jr)\n+- #8492 `8b0bdd3` Allow building bench_bitcoin by itself (luke-jr)\n+- #8563 `147003c` Add configure check for -latomic (ajtowns)\n+- #8626 `ea51b0f` Berkeley DB v6 compatibility fix (netsafe)\n+- #8520 `75f2065` Remove check for `openssl/ec.h` (laanwj)\n+\n+### GUI\n+- #8481 `d9f0d4e` Fix minimize and close bugs (adlawren)\n+- #8487 `a37cec5` Persist the datadir after option reset (achow101)\n+- #8697 `41fd852` Fix op order to append first alert (rodasmith)\n+- #8678 `8e03382` Fix UI bug that could result in paying unexpected fee (jonasschnelli)\n+- #8911 `7634d8e` Translate all files, even if wallet disabled (laanwj)\n+- #8540 `1db3352` Fix random segfault when closing \"Choose data directory\" dialog (laanwj)\n+- #7579 `f1c0d78` Show network/chain errors in the GUI (jonasschnelli)\n+\n+### Wallet\n+- #8443 `464dedd` Trivial cleanup of HD wallet changes (jonasschnelli)\n+- #8539 `cb07f19` CDB: fix debug output (crowning-)\n+- #8664 `091cdeb` Fix segwit-related wallet bug (sdaftuar)\n+- #8693 `c6a6291` Add witness address to address book (instagibbs)\n+- #8765 `6288659` Remove \"unused\" ThreadFlushWalletDB from removeprunedfunds (jonasschnelli)\n+\n+### Tests and QA\n+- #8713 `ae8c7df` create_cache: Delete temp dir when done (MarcoFalke)\n+- #8716 `e34374e` Check legacy wallet as well (MarcoFalke)\n+- #8750 `d6ebe13` Refactor RPCTestHandler to prevent TimeoutExpired (MarcoFalke)\n+- #8652 `63462c2` remove root test directory for RPC tests (yurizhykin)\n+- #8724 `da94272` walletbackup: Sync blocks inside the loop (MarcoFalke)\n+- #8400 `bea02dc` enable rpcbind_test (yurizhykin)\n+- #8417 `f70be14` Add walletdump RPC test (including HD- & encryption-tests) (jonasschnelli)\n+- #8419 `a7aa3cc` Enable size accounting in mining unit tests (sdaftuar)\n+- #8442 `8bb1efd` Rework hd wallet dump test (MarcoFalke)\n+- #8528 `3606b6b` Update p2p-segwit.py to reflect correct behavior (instagibbs)\n+- #8531 `a27cdd8` abandonconflict: Use assert_equal (MarcoFalke)\n+- #8667 `6b07362` Fix SIGHASH_SINGLE bug in test_framework SignatureHash (jl2012)\n+- #8673 `03b0196` Fix obvious assignment/equality error in test (JeremyRubin)\n+- #8739 `cef633c` Fix broken sendcmpct test in p2p-compactblocks.py (sdaftuar)\n+- #8418 `ff893aa` Add tests for compact blocks (sdaftuar)\n+- #8803 `375437c` Ping regularly in p2p-segwit.py to keep connection alive (jl2012)\n+- #8827 `9bbe66e` Split up slow RPC calls to avoid pruning test timeouts (sdaftuar)\n+- #8829 `2a8bca4` Add bitcoin-tx JSON tests (jnewbery)\n+- #8834 `1dd1783` blockstore: Switch to dumb dbm (MarcoFalke)\n+- #8835 `d87227d` nulldummy.py: Don't run unused code (MarcoFalke)\n+- #8836 `eb18cc1` bitcoin-util-test.py should fail if the output file is empty (jnewbery)\n+- #8839 `31ab2f8` Avoid ConnectionResetErrors during RPC tests (laanwj)\n+- #8840 `cbc3fe5` Explicitly set encoding to utf8 when opening text files (laanwj)\n+- #8841 `3e4abb5` Fix nulldummy test (jl2012)\n+- #8854 `624a007` Fix race condition in p2p-compactblocks test (sdaftuar)\n+- #8857 `1f60d45` mininode: Only allow named args in wait_until (MarcoFalke)\n+- #8860 `0bee740` util: Move wait_bitcoinds() into stop_nodes() (MarcoFalke)\n+- #8882 `b73f065` Fix race conditions in p2p-compactblocks.py and sendheaders.py (sdaftuar)\n+- #8904 `cc6f551` Fix compact block shortids for a test case (dagurval)\n+\n+### Documentation\n+- #8754 `0e2c6bd` Target protobuf 2.6 in OS X build notes. (fanquake)\n+- #8461 `b17a3f9` Document return value of networkhashps for getmininginfo RPC endpoint (jlopp)\n+- #8512 `156e305` Corrected JSON typo on setban of net.cpp (sevastos)\n+- #8683 `8a7d7ff` Fix incorrect file name bitcoin.qrc  (bitcoinsSG)\n+- #8891 `5e0dd9e` Update bips.md for Segregated Witness (fanquake)\n+- #8545 `863ae74` Update git-subtree-check.sh README (MarcoFalke)\n+- #8607 `486650a` Fix doxygen off-by-one comments, fix typos (MarcoFalke)\n+- #8560 `c493f43` Fix two VarInt examples in serialize.h (cbarcenas)\n+- #8737 `084cae9` UndoReadFromDisk works on undo files (rev), not on block files (paveljanik)\n+- #8625 `0a35573` Clarify statement about parallel jobs in rpc-tests.py (isle2983)\n+- #8624 `0e6d753` build: Mention curl (MarcoFalke)\n+- #8604 `b09e13c` build,doc: Update for 0.13.0+ and OpenBSD 5.9 (laanwj)\n+- #8939 `06d15fb` Update implemented bips for 0.13.1 (sipa)\n+\n+### Miscellaneous\n+- #8742 `d31ac72` Specify Protobuf version 2 in paymentrequest.proto (fanquake)\n+- #8414,#8558,#8676,#8700,#8701,#8702 Add missing copyright headers (isle2983, kazcw)\n+- #8899 `4ed2627` Fix wake from sleep issue with Boost 1.59.0 (fanquake)\n+- #8817 `bcf3806` update bitcoin-tx to output witness data (jnewbery)\n+- #8513 `4e5fc31` Fix a type error that would not compile on OSX. (JeremyRubin)\n+- #8392 `30eac2d` Fix several node initialization issues (sipa)\n+- #8548 `305d8ac` Use `__func__` to get function name for output printing (MarcoFalke)\n+- #8291 `a987431` [util] CopyrightHolders: Check for untranslated substitution (MarcoFalke)\n+\n+Credits\n+=======\n+\n+Thanks to everyone who directly contributed to this release:\n+\n+- adlawren\n+- Alexey Vesnin\n+- Anders \u00d8yvind Urke-S\u00e6tre\n+- Andrew Chow\n+- Anthony Towns\n+- BtcDrak\n+- Chris Stewart\n+- Christian Barcenas\n+- Christian Decker\n+- Cory Fields\n+- crowning-\n+- Dagur Valberg Johannsson\n+- David A. Harding\n+- Eric Lombrozo\n+- Ethan Heilman\n+- fanquake\n+- Gaurav Rana\n+- Gregory Maxwell\n+- instagibbs\n+- isle2983\n+- Jameson Lopp\n+- Jeremy Rubin\n+- jnewbery\n+- Johnson Lau\n+- Jonas Schnelli\n+- jonnynewbs\n+- Justin Camarena\n+- Kaz Wesley\n+- leijurv\n+- Luke Dashjr\n+- MarcoFalke\n+- Marty Jones\n+- Matt Corallo\n+- Micha\n+- Michael Ford\n+- mruddy\n+- Pavel Jan\u00edk\n+- Pieter Wuille\n+- rodasmith\n+- Sev\n+- Suhas Daftuar\n+- whythat\n+- Wladimir J. van der Laan\n+\n+As well as everyone that helped translating on [Transifex](https://www.transifex.com/projects/p/bitcoin/)."
      }
    ]
  },
  {
    "sha": "83234d4d1723e4f207a20f1abbe9432566a7d5ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzIzNGQ0ZDE3MjNlNGYyMDdhMjBmMWFiYmU5NDMyNTY2YTdkNWVl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T12:59:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T12:59:19Z"
      },
      "message": "Merge #9033: Update build notes for dropping osx 10.7 support (fanquake)\n\nba26d41 Update build notes for dropping osx 10.7 support (Michael Ford)",
      "tree": {
        "sha": "a5f7b2669a51d697d44b7b930ff3785ed222cf09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5f7b2669a51d697d44b7b930ff3785ed222cf09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/83234d4d1723e4f207a20f1abbe9432566a7d5ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYEfonAAoJEHSBCwEjRsmmk8EIALPEsh/XUXPIJY/kpDnoiF3n\nv0wAPzqkewaKhMelFqmlvuDR0DY/aSzvBE7xPGJRd6ZYTzyp/VHKmynnm4dpgTqN\nL6BmNiq1wgQUaY8etZkNAo3W2ypRajp7b2Ok3jLeSoCNMKPOEySc/mpuA9vfS3nY\nbNriasss0zgtCPgJ7AgUSqHkP/oJEL4sMtBmkSCscWQbWFsp/B3wPtDJoBJD4lR/\nm16+7b88duD1lBD9QW+ixbpahb1jlPr6Zk7H7FshhkwYLYbu6dGrJuEfc1R01tas\nUWMZxtyMJ+xvMw5SYxYLbvpbrSIUFN9j3oIqO4M6qYRYxFQXIGFcWjygEpicCws=\n=yqrx\n-----END PGP SIGNATURE-----",
        "payload": "tree a5f7b2669a51d697d44b7b930ff3785ed222cf09\nparent a49b4a75a1b671492e65eed17d6894d85ea5ebfd\nparent ba26d415c0d557d59e920547a54b17928e71522a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477573151 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477573159 +0200\n\nMerge #9033: Update build notes for dropping osx 10.7 support (fanquake)\n\nba26d41 Update build notes for dropping osx 10.7 support (Michael Ford)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83234d4d1723e4f207a20f1abbe9432566a7d5ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/83234d4d1723e4f207a20f1abbe9432566a7d5ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83234d4d1723e4f207a20f1abbe9432566a7d5ee/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a49b4a75a1b671492e65eed17d6894d85ea5ebfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a49b4a75a1b671492e65eed17d6894d85ea5ebfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a49b4a75a1b671492e65eed17d6894d85ea5ebfd"
      },
      {
        "sha": "ba26d415c0d557d59e920547a54b17928e71522a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ba26d415c0d557d59e920547a54b17928e71522a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ba26d415c0d557d59e920547a54b17928e71522a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "63a7ee28ca9317fedee2d0ac07e8cc8e9444ac65",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/83234d4d1723e4f207a20f1abbe9432566a7d5ee/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/83234d4d1723e4f207a20f1abbe9432566a7d5ee/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=83234d4d1723e4f207a20f1abbe9432566a7d5ee",
        "patch": "@@ -90,6 +90,6 @@ Uncheck everything except Qt Creator during the installation process.\n Notes\n -----\n \n-* Tested on OS X 10.7 through 10.11 on 64-bit Intel processors only.\n+* Tested on OS X 10.8 through 10.12 on 64-bit Intel processors only.\n \n * Building with downloaded Qt binaries is not officially supported. See the notes in [#7714](https://github.com/bitcoin/bitcoin/issues/7714)"
      }
    ]
  },
  {
    "sha": "1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzNlY2M3MGM4Y2Q2YzMzY2YzZmY0ZTIwOTljOGU3ZDhhOGNhOWQy",
    "commit": {
      "author": {
        "name": "S. Matthew English",
        "email": "s-matthew-english@users.noreply.github.com",
        "date": "2016-10-27T10:13:03Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T14:45:09Z"
      },
      "message": "instance of 'mem pool' to 'mempool'\n\nthere was only one instance of  'mem pool' and not 'mempool', so I changed it to conform to the others",
      "tree": {
        "sha": "7231267d450ca7bd36fa8b42a90a68b6315a88c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7231267d450ca7bd36fa8b42a90a68b6315a88c2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2/comments",
    "author": null,
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86f9e3dbba416a142df47dbd646c8e8ba772c955"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8caea14adbcac70614e360a5471690117196dceb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
        "patch": "@@ -863,7 +863,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n             \"2. n              (numeric, required) vout number\\n\"\n-            \"3. includemempool  (boolean, optional) Whether to include the mem pool\\n\"\n+            \"3. includemempool  (boolean, optional) Whether to include the mempool\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\""
      },
      {
        "sha": "be0776ea22b7654c84f239acc57688fd53141b3f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
        "patch": "@@ -230,7 +230,7 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"            (string) Current errors\\n\"\n             \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-            \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n+            \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "fea5e05a638080d54a1962c058f13798c16af150",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZWE1ZTA1YTYzODA4MGQ1NGExOTYyYzA1OGYxMzc5OGMxNmFmMTUw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T14:46:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T14:46:44Z"
      },
      "message": "Merge #9029: instance of 'mem pool' to 'mempool'\n\n1c3ecc7 instance of 'mem pool' to 'mempool' (S. Matthew English)",
      "tree": {
        "sha": "fce4644d81c9051cbe63f75fb3098e5f439ec646",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fce4644d81c9051cbe63f75fb3098e5f439ec646"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fea5e05a638080d54a1962c058f13798c16af150",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYEhNUAAoJEHSBCwEjRsmm0mQH/1HC4TbYJJMFTOSKrC3slo1P\nJVKEdLqBLgZ5/FddE3psM7kPBTKy0+DIcXh1/gcEqsGZN9kxG8Q/ZWhoMy5THl/N\nUh8mxIYfz9sac1D6mKqz19J5bYhuZ9LVXXVL4IKCjJF4fz6LUY/CeY+MpETpxw8s\nfqudOwzIsEK+DxWd8yC3milmX5MATL7ZUws01bInZ3BFAbZXLu05d/eRolC3yWoS\n+wWsI1TexsLQj12aUGd6UlceTMi0C7JGfcAS9iSuVi9XVM9RQJPIGM9R40mJXL3c\nhrg3ZYExnNShCIhWsYTih76PX6eDKx4SWRJUL4nm0LUbq2nzON33+4TIY4MuuZs=\n=BQvr\n-----END PGP SIGNATURE-----",
        "payload": "tree fce4644d81c9051cbe63f75fb3098e5f439ec646\nparent 83234d4d1723e4f207a20f1abbe9432566a7d5ee\nparent 1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477579582 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477579604 +0200\n\nMerge #9029: instance of 'mem pool' to 'mempool'\n\n1c3ecc7 instance of 'mem pool' to 'mempool' (S. Matthew English)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea5e05a638080d54a1962c058f13798c16af150",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fea5e05a638080d54a1962c058f13798c16af150",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea5e05a638080d54a1962c058f13798c16af150/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83234d4d1723e4f207a20f1abbe9432566a7d5ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83234d4d1723e4f207a20f1abbe9432566a7d5ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83234d4d1723e4f207a20f1abbe9432566a7d5ee"
      },
      {
        "sha": "1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c3ecc70c8cd6c33cf3ff4e2099c8e7d8a8ca9d2"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8caea14adbcac70614e360a5471690117196dceb",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fea5e05a638080d54a1962c058f13798c16af150/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fea5e05a638080d54a1962c058f13798c16af150/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fea5e05a638080d54a1962c058f13798c16af150",
        "patch": "@@ -863,7 +863,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"       (string, required) The transaction id\\n\"\n             \"2. n              (numeric, required) vout number\\n\"\n-            \"3. includemempool  (boolean, optional) Whether to include the mem pool\\n\"\n+            \"3. includemempool  (boolean, optional) Whether to include the mempool\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"bestblock\\\" : \\\"hash\\\",    (string) the block hash\\n\""
      },
      {
        "sha": "be0776ea22b7654c84f239acc57688fd53141b3f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fea5e05a638080d54a1962c058f13798c16af150/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fea5e05a638080d54a1962c058f13798c16af150/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fea5e05a638080d54a1962c058f13798c16af150",
        "patch": "@@ -230,7 +230,7 @@ UniValue getmininginfo(const JSONRPCRequest& request)\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"            (string) Current errors\\n\"\n             \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-            \"  \\\"pooledtx\\\": n              (numeric) The size of the mem pool\\n\"\n+            \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n             \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name as defined in BIP70 (main, test, regtest)\\n\"\n             \"}\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "004168dcb75750ea3f30e1349e4802c20bf4b860",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDQxNjhkY2I3NTc1MGVhM2YzMGUxMzQ5ZTQ4MDJjMjBiZjRiODYw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-21T08:09:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-28T08:44:30Z"
      },
      "message": "CoinControl: add option for custom confirmation target",
      "tree": {
        "sha": "4111b68b1d200d52ee99a602152716e82f51d6b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4111b68b1d200d52ee99a602152716e82f51d6b7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/004168dcb75750ea3f30e1349e4802c20bf4b860",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYEw/uAAoJECnUvLZBb1Ps2hwQAKJ8Vn/kp421pfcc9YIlg9MW\nNPFzr0aMJxpvyas0YSjS8ZejxWIcjycNOPJewrelqMsu4uUxLp5dU/HTYNzWGbpR\nU/FKmJUZgXkC5xZ0JAn92W3oCvvl0In3pGPDv0MWllsjqjeDPzUA2wK8EKQMEfTT\nRn1ReE5EvAwUeuIgYcAnAdX88ZcGKzF80jsTymOnrgdCYXVHiYUev5aLuZRMQixm\nZIwjUxuuaL8DnsHeegOsq2riR3iKw27DmRIUjZKM0/gseEgIEF+joqLGGiJCFkYK\nbSC82IufSNSxOuJuzi0avUiLvP3p9XBmgUpROkwxYoPPtz/LI3E9pCzm0U75ejyL\nQAEwHIHfl+CYhStAGun/sb2rtXoXVNKEqsnn6OJRWEmQYJgM+4ezwSJXeNaHjloN\nZmznXykPBDll1jNCfscqU30aFxicmQfkv9BE6ewGXnUc73ccQAyIbNJLPYEgma2z\nhyU9KLq3fIwGx/XSNLVzxRZdIltsHcYZuHkoXVR/Za7tFEHVC/e3ByB8jE5pBGcl\n9QNwhTD2WcWJ23T/mA684GnBdLy/7iCBSy7J7U1tyipJrhaGl2Ms/F1sgCLn0MyB\nkquH4rykYhz17yqpKHlEOeeh4IePn9ZiM7e2ZREbQ84ho7ji1YYnl/h2C6oaQcee\ne7+DROw1y5UvqIoqj6cp\n=7uK8\n-----END PGP SIGNATURE-----",
        "payload": "tree 4111b68b1d200d52ee99a602152716e82f51d6b7\nparent fea5e05a638080d54a1962c058f13798c16af150\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1477037342 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1477644270 +0200\n\nCoinControl: add option for custom confirmation target\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004168dcb75750ea3f30e1349e4802c20bf4b860",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/004168dcb75750ea3f30e1349e4802c20bf4b860",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004168dcb75750ea3f30e1349e4802c20bf4b860/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fea5e05a638080d54a1962c058f13798c16af150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea5e05a638080d54a1962c058f13798c16af150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fea5e05a638080d54a1962c058f13798c16af150"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "08d23688ff0790d5fa4edd185f40fc8ed125f6f7",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004168dcb75750ea3f30e1349e4802c20bf4b860/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004168dcb75750ea3f30e1349e4802c20bf4b860/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=004168dcb75750ea3f30e1349e4802c20bf4b860",
        "patch": "@@ -22,6 +22,8 @@ class CCoinControl\n     bool fOverrideFeeRate;\n     //! Feerate to use if overrideFeeRate is true\n     CFeeRate nFeeRate;\n+    //! Override the default confirmation target, 0 = use default\n+    int nConfirmTarget;\n \n     CCoinControl()\n     {\n@@ -37,6 +39,7 @@ class CCoinControl\n         nMinimumTotalFee = 0;\n         nFeeRate = CFeeRate(0);\n         fOverrideFeeRate = false;\n+        nConfirmTarget = 0;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "894da23cd0c023c5aec76ae5aeeac6f0dd787e04",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/004168dcb75750ea3f30e1349e4802c20bf4b860/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/004168dcb75750ea3f30e1349e4802c20bf4b860/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=004168dcb75750ea3f30e1349e4802c20bf4b860",
        "patch": "@@ -2433,17 +2433,22 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n+                // Allow to override the default confirmation target over the CoinControl instance\n+                int currentConfirmationTarget = nTxConfirmTarget;\n+                if (coinControl && coinControl->nConfirmTarget > 0)\n+                    currentConfirmationTarget = coinControl->nConfirmTarget;\n+\n                 // Can we complete this as a free transaction?\n                 if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n                 {\n                     // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n+                    double dPriorityNeeded = mempool.estimateSmartPriority(currentConfirmationTarget);\n                     // Require at least hard-coded AllowFree.\n                     if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n                         break;\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, mempool);\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }"
      }
    ]
  },
  {
    "sha": "6f0289967fa12afa4bc3299f433bb496a8e7c229",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjAyODk5NjdmYTEyYWZhNGJjMzI5OWY0MzNiYjQ5NmE4ZTdjMjI5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-21T08:24:03Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-28T08:44:30Z"
      },
      "message": "[Qt] Hide nTxConfirmTarget behind WalletModel",
      "tree": {
        "sha": "d99736043cb00c0d17f139d867929b95f40bb9a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d99736043cb00c0d17f139d867929b95f40bb9a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f0289967fa12afa4bc3299f433bb496a8e7c229",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYEw/vAAoJECnUvLZBb1PsjkgQAJsptG/grpOWnkEJCQv3M7kq\noj8M9gtizjfqswO1XXMC5O8txD3M9Kl41XvKNHsalmCA2FliejpZMDgt4L4A7u8X\n44cykGYuZMwlq7SJ2g6xNWasfirf/9l7MBxD/To+bTGjbooNmuiHzJi+Q3U1+Asq\nq3fT5mzBLrtBH+cO7afUtjCysAtT+QbqdKBpkhsWRLiW7lUmLM4UzfbMR8v1aC66\nEoTB6zxW/FFYMgQS9cVKlgRbCLjOpcPtm/Nr2d3diIMA8/YGbmDTA+oPDlkClxTI\n2fg1jZzBmsAGkuL7AIXNRZMl8yWJ4eg8Yoy+oNlnmkdPsAANrSPEPQpKDmEnUPIx\nEoJTM6pHK5WbJYvBfULXNMuuhY+QIaA4OWWkfnSxfK5Losc4ui+K+u0sse3NQaiD\nlYbM8bBgJhG8B7UsEOSB/e7a8cIh6/KCq/nZvXkJQrVTlpq4cCb/I3VxEHWunOvm\neP2WJ9IqloeYDFyb7Yrc+b/GVaKWladxSs2VwvFVXo0YWAa8fvI+PvqdpwQAnxcb\n7Hi+uwW0JReQLv4rWDlWFZaHYQ3sb/8DTGUrKttEmnLr5w5VyYWQKiCzcigV91Yb\n9hummsE0xEfm0CxsMExPCugykpo6norWIHE5jPybevDXJ2Wt/PHlsv8J/5CvECYy\nGDoGAUiAeVSoG8z7kqbP\n=lO8o\n-----END PGP SIGNATURE-----",
        "payload": "tree d99736043cb00c0d17f139d867929b95f40bb9a0\nparent 004168dcb75750ea3f30e1349e4802c20bf4b860\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1477038243 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1477644270 +0200\n\n[Qt] Hide nTxConfirmTarget behind WalletModel\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f0289967fa12afa4bc3299f433bb496a8e7c229",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f0289967fa12afa4bc3299f433bb496a8e7c229",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f0289967fa12afa4bc3299f433bb496a8e7c229/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "004168dcb75750ea3f30e1349e4802c20bf4b860",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/004168dcb75750ea3f30e1349e4802c20bf4b860",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/004168dcb75750ea3f30e1349e4802c20bf4b860"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "079b8d3a7b86adb418c672d353b40db67c66e88f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f0289967fa12afa4bc3299f433bb496a8e7c229/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f0289967fa12afa4bc3299f433bb496a8e7c229/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=6f0289967fa12afa4bc3299f433bb496a8e7c229",
        "patch": "@@ -698,3 +698,8 @@ bool WalletModel::hdEnabled() const\n {\n     return wallet->IsHDEnabled();\n }\n+\n+int WalletModel::getDefaultConfirmTarget() const\n+{\n+    return nTxConfirmTarget;\n+}"
      },
      {
        "sha": "521d8459976c71de5e1cd994898fa884207d93f7",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f0289967fa12afa4bc3299f433bb496a8e7c229/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f0289967fa12afa4bc3299f433bb496a8e7c229/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=6f0289967fa12afa4bc3299f433bb496a8e7c229",
        "patch": "@@ -207,6 +207,8 @@ class WalletModel : public QObject\n \n     bool hdEnabled() const;\n \n+    int getDefaultConfirmTarget() const;\n+\n private:\n     CWallet *wallet;\n     bool fHaveWatchOnly;"
      }
    ]
  },
  {
    "sha": "cfe77ef412776390ec4575f2d5f7230391a4d198",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZmU3N2VmNDEyNzc2MzkwZWM0NTc1ZjJkNWY3MjMwMzkxYTRkMTk4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-21T08:53:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-10-28T08:44:30Z"
      },
      "message": "[Qt] overhaul smart-fee slider, adjust default confirmation target",
      "tree": {
        "sha": "b803028de14e14e817e9e83b7db0a68c3cf03011",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b803028de14e14e817e9e83b7db0a68c3cf03011"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cfe77ef412776390ec4575f2d5f7230391a4d198",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYEw/vAAoJECnUvLZBb1PsfmcP/0lpkLx+B3IERR3cOpOW24sU\nIvnsHCiqrUNjY62Vc3HnC5HpN8dHNOyZOvoE3z87KfBHX+M+JwiljIGJ1FFoBFJz\neE8b+Jegln67ISPmkHZl9HhEf1utx16GzzQf0SsshehMgZHQ/EpYD3uZZa0zzjxn\nJQz57rjMsUjWF/E489L+Bo2/Z7D6Ndyz0098OvLXBkcwssAjlL6yRqBxmCQYcl/d\nRhVKTclJ/M6Wr8Ie4911RGBga5yrd0cuzHnxlQKZrosZVbJ8DZpwoAA8QNqQvXeF\nrUNNu/Q9TW5EeMDNyMzqjy1Rqg4c02kobm7iodAHhBdFxx1GOBozkYhtN5nMWKVM\nC88/i96DiVWM54Vk+qmkS8EfgDyXHzox7Br8JDyEn2c2AZ9XXksPDkR9251F0SI4\n1jErp0+3kNFyAAMMzQ2dSRNur7pMerh/89OfKoqqOiL7Jp6w2fomcFUkxTFSMpav\nzrytfQhaAy9l2ufj4VcE4jfK80ZpawMW92LjxYD6UYpsytT1oeVHvuiC0ObobDNW\n8WQlOghTP5Xc1nSnB/FvvR4+3IZB+3bgj04i89pp7B9CP80zyuEL6Tl6y6o856M8\nDi097G+t/3JsDz8ecsxlHCYdZR//nUMXKM4NyWCDWntELJhDn2jhDTap19PMNsnG\n/jfkyopho1CCmBDg6oED\n=sZaq\n-----END PGP SIGNATURE-----",
        "payload": "tree b803028de14e14e817e9e83b7db0a68c3cf03011\nparent 6f0289967fa12afa4bc3299f433bb496a8e7c229\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1477040017 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1477644270 +0200\n\n[Qt] overhaul smart-fee slider, adjust default confirmation target\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe77ef412776390ec4575f2d5f7230391a4d198",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe77ef412776390ec4575f2d5f7230391a4d198",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe77ef412776390ec4575f2d5f7230391a4d198/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f0289967fa12afa4bc3299f433bb496a8e7c229",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f0289967fa12afa4bc3299f433bb496a8e7c229",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f0289967fa12afa4bc3299f433bb496a8e7c229"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 47,
      "deletions": 11
    },
    "files": [
      {
        "sha": "33db9f8938247ed2b1ef775bb5c92d32b108ac6e",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe77ef412776390ec4575f2d5f7230391a4d198/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe77ef412776390ec4575f2d5f7230391a4d198/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=cfe77ef412776390ec4575f2d5f7230391a4d198",
        "patch": "@@ -411,7 +411,7 @@\n                  </property>\n                 </widget>\n                </item>\n-             </layout>\n+              </layout>\n              </item>\n              <item>\n               <layout class=\"QFormLayout\" name=\"formLayoutCoinControl4\">\n@@ -1031,7 +1031,7 @@\n                    <item>\n                     <widget class=\"QLabel\" name=\"labelSmartFee3\">\n                      <property name=\"text\">\n-                      <string>Confirmation time:</string>\n+                      <string>Confirmation time target:</string>\n                      </property>\n                      <property name=\"margin\">\n                       <number>2</number>\n@@ -1095,6 +1095,26 @@\n                        </property>\n                       </widget>\n                      </item>\n+                     <item>\n+                      <spacer name=\"horizontalSpacer_7\">\n+                       <property name=\"orientation\">\n+                        <enum>Qt::Horizontal</enum>\n+                       </property>\n+                       <property name=\"sizeHint\" stdset=\"0\">\n+                        <size>\n+                         <width>40</width>\n+                         <height>20</height>\n+                        </size>\n+                       </property>\n+                      </spacer>\n+                     </item>\n+                     <item>\n+                      <widget class=\"QLabel\" name=\"confirmationTargetLabel\">\n+                       <property name=\"text\">\n+                        <string>(count)</string>\n+                       </property>\n+                      </widget>\n+                     </item>\n                      <item>\n                       <spacer name=\"horizontalSpacer_3\">\n                        <property name=\"orientation\">"
      },
      {
        "sha": "d338bbf68839b416a9a02d149af11d9c80d488e0",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 7,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe77ef412776390ec4575f2d5f7230391a4d198/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe77ef412776390ec4575f2d5f7230391a4d198/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=cfe77ef412776390ec4575f2d5f7230391a4d198",
        "patch": "@@ -110,7 +110,6 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     ui->groupCustomFee->setId(ui->radioCustomPerKilobyte, 0);\n     ui->groupCustomFee->setId(ui->radioCustomAtLeast, 1);\n     ui->groupCustomFee->button((int)std::max(0, std::min(1, settings.value(\"nCustomFeeRadio\").toInt())))->setChecked(true);\n-    ui->sliderSmartFee->setValue(settings.value(\"nSmartFeeSliderPosition\").toInt());\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n     ui->checkBoxMinimumFee->setChecked(settings.value(\"fPayOnlyMinFee\").toBool());\n     minimizeFeeSection(settings.value(\"fFeeSectionMinimized\").toBool());\n@@ -172,6 +171,13 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n         updateGlobalFeeVariables();\n+\n+        // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n+        QSettings settings;\n+        if (settings.value(\"nSmartFeeSliderPosition\").toInt() == 0)\n+            ui->sliderSmartFee->setValue(ui->sliderSmartFee->maximum() - model->getDefaultConfirmTarget() + 1);\n+        else\n+            ui->sliderSmartFee->setValue(settings.value(\"nSmartFeeSliderPosition\").toInt());\n     }\n }\n \n@@ -229,10 +235,17 @@ void SendCoinsDialog::on_sendButton_clicked()\n     // prepare transaction for getting txFee earlier\n     WalletModelTransaction currentTransaction(recipients);\n     WalletModel::SendCoinsReturn prepareStatus;\n-    if (model->getOptionsModel()->getCoinControlFeatures()) // coin control enabled\n-        prepareStatus = model->prepareTransaction(currentTransaction, CoinControlDialog::coinControl);\n+\n+    // Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled\n+    CCoinControl ctrl;\n+    if (model->getOptionsModel()->getCoinControlFeatures())\n+        ctrl = *CoinControlDialog::coinControl;\n+    if (ui->radioSmartFee->isChecked())\n+        ctrl.nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 1;\n     else\n-        prepareStatus = model->prepareTransaction(currentTransaction);\n+        ctrl.nConfirmTarget = 0;\n+\n+    prepareStatus = model->prepareTransaction(currentTransaction, &ctrl);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n@@ -576,6 +589,7 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->labelFeeEstimation      ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFeeNormal     ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFeeFast       ->setEnabled(ui->radioSmartFee->isChecked());\n+    ui->confirmationTargetLabel ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n@@ -587,15 +601,17 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n {\n     if (ui->radioSmartFee->isChecked())\n     {\n-        nTxConfirmTarget = defaultConfirmTarget - ui->sliderSmartFee->value();\n+        int nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 1;\n         payTxFee = CFeeRate(0);\n \n         // set nMinimumTotalFee to 0 to not accidentally pay a custom fee\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n+\n+        // show the estimated reuquired time for confirmation\n+        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget*600)+\" / \"+tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else\n     {\n-        nTxConfirmTarget = defaultConfirmTarget;\n         payTxFee = CFeeRate(ui->customFee->value());\n \n         // if user has selected to set a minimum absolute fee, pass the value to coincontrol\n@@ -630,7 +646,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     if(!model || !model->getOptionsModel())\n         return;\n \n-    int nBlocksToConfirm = defaultConfirmTarget - ui->sliderSmartFee->value();\n+    int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 1;\n     int estimateFoundAtBlocks = nBlocksToConfirm;\n     CFeeRate feeRate = mempool.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n@@ -701,6 +717,8 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     if (!checked && model) // coin control features disabled\n         CoinControlDialog::coinControl->SetNull();\n \n+    // make sure we set back the confirmation target\n+    updateGlobalFeeVariables();\n     coinControlUpdateLabels();\n }\n "
      },
      {
        "sha": "b0df495a9869957b760acfcb061ccda4a90f7a3e",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cfe77ef412776390ec4575f2d5f7230391a4d198/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cfe77ef412776390ec4575f2d5f7230391a4d198/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=cfe77ef412776390ec4575f2d5f7230391a4d198",
        "patch": "@@ -26,8 +26,6 @@ QT_BEGIN_NAMESPACE\n class QUrl;\n QT_END_NAMESPACE\n \n-const int defaultConfirmTarget = 25;\n-\n /** Dialog for sending bitcoins */\n class SendCoinsDialog : public QDialog\n {"
      }
    ]
  },
  {
    "sha": "0dcb888266ea9e0f091713da456462790fb8b3aa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZGNiODg4MjY2ZWE5ZTBmMDkxNzEzZGE0NTY0NjI3OTBmYjhiM2Fh",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T11:49:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T11:49:15Z"
      },
      "message": "Merge #9016: Return useful error message on ATMP failure\n\n169bdab Return useful error message on ATMP failure (instagibbs)",
      "tree": {
        "sha": "f8d6c444e5f0b9a47a46d35c066cdfd959904f03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8d6c444e5f0b9a47a46d35c066cdfd959904f03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0dcb888266ea9e0f091713da456462790fb8b3aa",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYEzs7AAoJEHSBCwEjRsmmoDoIALDqSL6iJTpw9jBXg8aNloqQ\nhEUlyCNcWM+ZaIYscI7fF8gSGoYILiDmcDKm4tvX6j8BRQzPzdZQBKP/P0Jto6Kv\nZqlQ8ER/4uRcSPfentFTtbqGW23Whvr/arXgUzV0hwT4ICJlO/8ZJWtJSSZojuPk\nmOSBlnbDTzFKpZWFuzf7DA3/hNb8OyrySKiqhb77zuvxWduru5yB7oRFywJ7+eRI\nT6QBs2VhHzK5nvEzbsqZ1X0BS7w4JVVf1OwjOIoi9AUZCdIC4FLsvX8pbzI0sYMa\n4yPm2Ky3ZUdtZ8YIaHKsBCwTwNAi83KklPTnKUdOHpDShHM2BXftdBAq6cCeDVk=\n=cJXd\n-----END PGP SIGNATURE-----",
        "payload": "tree f8d6c444e5f0b9a47a46d35c066cdfd959904f03\nparent fea5e05a638080d54a1962c058f13798c16af150\nparent 169bdabe14ef5988ff92a7370114edc85b070b27\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477655344 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477655355 +0200\n\nMerge #9016: Return useful error message on ATMP failure\n\n169bdab Return useful error message on ATMP failure (instagibbs)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcb888266ea9e0f091713da456462790fb8b3aa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcb888266ea9e0f091713da456462790fb8b3aa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcb888266ea9e0f091713da456462790fb8b3aa/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fea5e05a638080d54a1962c058f13798c16af150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fea5e05a638080d54a1962c058f13798c16af150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fea5e05a638080d54a1962c058f13798c16af150"
      },
      {
        "sha": "169bdabe14ef5988ff92a7370114edc85b070b27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/169bdabe14ef5988ff92a7370114edc85b070b27",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/169bdabe14ef5988ff92a7370114edc85b070b27"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 22,
      "deletions": 13
    },
    "files": [
      {
        "sha": "d3dc865684bf1d5044a9a3d2d773234583281a3e",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcb888266ea9e0f091713da456462790fb8b3aa/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcb888266ea9e0f091713da456462790fb8b3aa/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=0dcb888266ea9e0f091713da456462790fb8b3aa",
        "patch": "@@ -5,6 +5,7 @@\n #include \"walletmodel.h\"\n \n #include \"addresstablemodel.h\"\n+#include \"consensus/validation.h\"\n #include \"guiconstants.h\"\n #include \"guiutil.h\"\n #include \"paymentserver.h\"\n@@ -328,7 +329,8 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         }\n \n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n-        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get()))\n+        CValidationState state;\n+        if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get(), state))\n             return TransactionCommitFailed;\n \n         CTransaction* t = (CTransaction*)newTx;"
      },
      {
        "sha": "5a8212fd01f2b2529814d3400cee17eed8f1eef3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 4,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcb888266ea9e0f091713da456462790fb8b3aa/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcb888266ea9e0f091713da456462790fb8b3aa/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0dcb888266ea9e0f091713da456462790fb8b3aa",
        "patch": "@@ -6,6 +6,7 @@\n #include \"amount.h\"\n #include \"base58.h\"\n #include \"chain.h\"\n+#include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n #include \"main.h\"\n@@ -365,8 +366,11 @@ static void SendMoney(const CTxDestination &address, CAmount nValue, bool fSubtr\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n-    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get()))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Error: The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of the wallet and coins were spent in the copy but not marked as spent here.\");\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtxNew, reservekey, g_connman.get(), state)) {\n+        strError = strprintf(\"Error: The transaction was rejected! Reason given: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+    }\n }\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n@@ -959,8 +963,11 @@ UniValue sendmany(const JSONRPCRequest& request)\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, nChangePosRet, strFailReason);\n     if (!fCreated)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n-    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get()))\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Transaction commit failed\");\n+    CValidationState state;\n+    if (!pwalletMain->CommitTransaction(wtx, keyChange, g_connman.get(), state)) {\n+        strFailReason = strprintf(\"Transaction commit failed:: %s\", state.GetRejectReason());\n+        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n+    }\n \n     return wtx.GetHash().GetHex();\n }"
      },
      {
        "sha": "3fc05c1c1d189bd1f03014d1c297c730295cfbb6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcb888266ea9e0f091713da456462790fb8b3aa/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcb888266ea9e0f091713da456462790fb8b3aa/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0dcb888266ea9e0f091713da456462790fb8b3aa",
        "patch": "@@ -1463,7 +1463,8 @@ void CWallet::ReacceptWalletTransactions()\n         CWalletTx& wtx = *(item.second);\n \n         LOCK(mempool.cs);\n-        wtx.AcceptToMemoryPool(maxTxFee);\n+        CValidationState state;\n+        wtx.AcceptToMemoryPool(maxTxFee, state);\n     }\n }\n \n@@ -2474,7 +2475,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n /**\n  * Call after CreateTransaction unless you want to abort\n  */\n-bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman)\n+bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state)\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n@@ -2502,9 +2503,9 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CCon\n         if (fBroadcastTransactions)\n         {\n             // Broadcast\n-            if (!wtxNew.AcceptToMemoryPool(maxTxFee)) {\n+            if (!wtxNew.AcceptToMemoryPool(maxTxFee, state)) {\n                 // This must not fail. The transaction has already been signed and recorded.\n-                LogPrintf(\"CommitTransaction(): Error: Transaction not valid\\n\");\n+                LogPrintf(\"CommitTransaction(): Error: Transaction not valid, %s\\n\", state.GetRejectReason());\n                 return false;\n             }\n             wtxNew.RelayWalletTransaction(connman);\n@@ -3649,8 +3650,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee)\n+bool CMerkleTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n {\n-    CValidationState state;\n     return ::AcceptToMemoryPool(mempool, state, *this, true, NULL, false, nAbsurdFee);\n }"
      },
      {
        "sha": "c33a6ca91f670b1453888ffd0c48c08fb8200abc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0dcb888266ea9e0f091713da456462790fb8b3aa/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0dcb888266ea9e0f091713da456462790fb8b3aa/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0dcb888266ea9e0f091713da456462790fb8b3aa",
        "patch": "@@ -215,7 +215,7 @@ class CMerkleTx : public CTransaction\n     bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n     int GetBlocksToMaturity() const;\n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee);\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -774,7 +774,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosInOut,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n-    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman);\n+    bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey, CConnman* connman, CValidationState& state);\n \n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& entries);\n     bool AddAccountingEntry(const CAccountingEntry&);"
      }
    ]
  },
  {
    "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMjE0M2RjOTM3ZTNmYzkzZmQzNWRlZjI1YTljMDQ2MWYyNmNjZDRm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T12:08:39Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T12:14:55Z"
      },
      "message": "Merge #8989: [Qt] overhaul smart-fee slider, adjust default confirmation target\n\ncfe77ef [Qt] overhaul smart-fee slider, adjust default confirmation target (Jonas Schnelli)\n6f02899 [Qt] Hide nTxConfirmTarget behind WalletModel (Jonas Schnelli)\n004168d CoinControl: add option for custom confirmation target (Jonas Schnelli)",
      "tree": {
        "sha": "7d145d1cfaf496b489bcda4491cd93d02fd51c6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d145d1cfaf496b489bcda4491cd93d02fd51c6d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYE0E/AAoJEHSBCwEjRsmmDt4H/3eYiGh/gpPKBtDD9j8FaA4w\nmnJkfER0nDLndp5wRNPqcJ1BuByvEfSt/vWz9bdPbJq5xWqPMgBYBWDmQ02r4sY0\np3uZ8csRkB1uWGUo2S/yi641bFpbTBV3vkEFcvyql54VzznC5Ns78HISych8WVb4\n0+xW4KZ3d8q6Tj8t2yzbDUwLyMeFIP6PjWNqbJHi7/N2HmkXEknZK/EuBwvF9SYl\nFWrBfYDyMEgmEClS7D7Rk2UVsq2LTmdkOVGc7tultlXbKPFFRbxY2Df+dsno8sdf\n8994ZSDdZu5vVoGtUlmdPx/06DbY1K+ymzGP1FzijW6Ana6p4c1YHLo/WdYGjl4=\n=R+sp\n-----END PGP SIGNATURE-----",
        "payload": "tree 7d145d1cfaf496b489bcda4491cd93d02fd51c6d\nparent 0dcb888266ea9e0f091713da456462790fb8b3aa\nparent cfe77ef412776390ec4575f2d5f7230391a4d198\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1477656519 +0200\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1477656895 +0200\n\nMerge #8989: [Qt] overhaul smart-fee slider, adjust default confirmation target\n\ncfe77ef [Qt] overhaul smart-fee slider, adjust default confirmation target (Jonas Schnelli)\n6f02899 [Qt] Hide nTxConfirmTarget behind WalletModel (Jonas Schnelli)\n004168d CoinControl: add option for custom confirmation target (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0dcb888266ea9e0f091713da456462790fb8b3aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0dcb888266ea9e0f091713da456462790fb8b3aa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0dcb888266ea9e0f091713da456462790fb8b3aa"
      },
      {
        "sha": "cfe77ef412776390ec4575f2d5f7230391a4d198",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfe77ef412776390ec4575f2d5f7230391a4d198",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfe77ef412776390ec4575f2d5f7230391a4d198"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 64,
      "deletions": 13
    },
    "files": [
      {
        "sha": "33db9f8938247ed2b1ef775bb5c92d32b108ac6e",
        "filename": "src/qt/forms/sendcoinsdialog.ui",
        "status": "modified",
        "additions": 22,
        "deletions": 2,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/forms/sendcoinsdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/forms/sendcoinsdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/sendcoinsdialog.ui?ref=d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "patch": "@@ -411,7 +411,7 @@\n                  </property>\n                 </widget>\n                </item>\n-             </layout>\n+              </layout>\n              </item>\n              <item>\n               <layout class=\"QFormLayout\" name=\"formLayoutCoinControl4\">\n@@ -1031,7 +1031,7 @@\n                    <item>\n                     <widget class=\"QLabel\" name=\"labelSmartFee3\">\n                      <property name=\"text\">\n-                      <string>Confirmation time:</string>\n+                      <string>Confirmation time target:</string>\n                      </property>\n                      <property name=\"margin\">\n                       <number>2</number>\n@@ -1095,6 +1095,26 @@\n                        </property>\n                       </widget>\n                      </item>\n+                     <item>\n+                      <spacer name=\"horizontalSpacer_7\">\n+                       <property name=\"orientation\">\n+                        <enum>Qt::Horizontal</enum>\n+                       </property>\n+                       <property name=\"sizeHint\" stdset=\"0\">\n+                        <size>\n+                         <width>40</width>\n+                         <height>20</height>\n+                        </size>\n+                       </property>\n+                      </spacer>\n+                     </item>\n+                     <item>\n+                      <widget class=\"QLabel\" name=\"confirmationTargetLabel\">\n+                       <property name=\"text\">\n+                        <string>(count)</string>\n+                       </property>\n+                      </widget>\n+                     </item>\n                      <item>\n                       <spacer name=\"horizontalSpacer_3\">\n                        <property name=\"orientation\">"
      },
      {
        "sha": "d338bbf68839b416a9a02d149af11d9c80d488e0",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 7,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "patch": "@@ -110,7 +110,6 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     ui->groupCustomFee->setId(ui->radioCustomPerKilobyte, 0);\n     ui->groupCustomFee->setId(ui->radioCustomAtLeast, 1);\n     ui->groupCustomFee->button((int)std::max(0, std::min(1, settings.value(\"nCustomFeeRadio\").toInt())))->setChecked(true);\n-    ui->sliderSmartFee->setValue(settings.value(\"nSmartFeeSliderPosition\").toInt());\n     ui->customFee->setValue(settings.value(\"nTransactionFee\").toLongLong());\n     ui->checkBoxMinimumFee->setChecked(settings.value(\"fPayOnlyMinFee\").toBool());\n     minimizeFeeSection(settings.value(\"fFeeSectionMinimized\").toBool());\n@@ -172,6 +171,13 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n         updateGlobalFeeVariables();\n+\n+        // set the smartfee-sliders default value (wallets default conf.target or last stored value)\n+        QSettings settings;\n+        if (settings.value(\"nSmartFeeSliderPosition\").toInt() == 0)\n+            ui->sliderSmartFee->setValue(ui->sliderSmartFee->maximum() - model->getDefaultConfirmTarget() + 1);\n+        else\n+            ui->sliderSmartFee->setValue(settings.value(\"nSmartFeeSliderPosition\").toInt());\n     }\n }\n \n@@ -229,10 +235,17 @@ void SendCoinsDialog::on_sendButton_clicked()\n     // prepare transaction for getting txFee earlier\n     WalletModelTransaction currentTransaction(recipients);\n     WalletModel::SendCoinsReturn prepareStatus;\n-    if (model->getOptionsModel()->getCoinControlFeatures()) // coin control enabled\n-        prepareStatus = model->prepareTransaction(currentTransaction, CoinControlDialog::coinControl);\n+\n+    // Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled\n+    CCoinControl ctrl;\n+    if (model->getOptionsModel()->getCoinControlFeatures())\n+        ctrl = *CoinControlDialog::coinControl;\n+    if (ui->radioSmartFee->isChecked())\n+        ctrl.nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 1;\n     else\n-        prepareStatus = model->prepareTransaction(currentTransaction);\n+        ctrl.nConfirmTarget = 0;\n+\n+    prepareStatus = model->prepareTransaction(currentTransaction, &ctrl);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n@@ -576,6 +589,7 @@ void SendCoinsDialog::updateFeeSectionControls()\n     ui->labelFeeEstimation      ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFeeNormal     ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->labelSmartFeeFast       ->setEnabled(ui->radioSmartFee->isChecked());\n+    ui->confirmationTargetLabel ->setEnabled(ui->radioSmartFee->isChecked());\n     ui->checkBoxMinimumFee      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->labelMinFeeWarning      ->setEnabled(ui->radioCustomFee->isChecked());\n     ui->radioCustomPerKilobyte  ->setEnabled(ui->radioCustomFee->isChecked() && !ui->checkBoxMinimumFee->isChecked());\n@@ -587,15 +601,17 @@ void SendCoinsDialog::updateGlobalFeeVariables()\n {\n     if (ui->radioSmartFee->isChecked())\n     {\n-        nTxConfirmTarget = defaultConfirmTarget - ui->sliderSmartFee->value();\n+        int nConfirmTarget = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 1;\n         payTxFee = CFeeRate(0);\n \n         // set nMinimumTotalFee to 0 to not accidentally pay a custom fee\n         CoinControlDialog::coinControl->nMinimumTotalFee = 0;\n+\n+        // show the estimated reuquired time for confirmation\n+        ui->confirmationTargetLabel->setText(GUIUtil::formatDurationStr(nConfirmTarget*600)+\" / \"+tr(\"%n block(s)\", \"\", nConfirmTarget));\n     }\n     else\n     {\n-        nTxConfirmTarget = defaultConfirmTarget;\n         payTxFee = CFeeRate(ui->customFee->value());\n \n         // if user has selected to set a minimum absolute fee, pass the value to coincontrol\n@@ -630,7 +646,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     if(!model || !model->getOptionsModel())\n         return;\n \n-    int nBlocksToConfirm = defaultConfirmTarget - ui->sliderSmartFee->value();\n+    int nBlocksToConfirm = ui->sliderSmartFee->maximum() - ui->sliderSmartFee->value() + 1;\n     int estimateFoundAtBlocks = nBlocksToConfirm;\n     CFeeRate feeRate = mempool.estimateSmartFee(nBlocksToConfirm, &estimateFoundAtBlocks);\n     if (feeRate <= CFeeRate(0)) // not enough data => minfee\n@@ -701,6 +717,8 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     if (!checked && model) // coin control features disabled\n         CoinControlDialog::coinControl->SetNull();\n \n+    // make sure we set back the confirmation target\n+    updateGlobalFeeVariables();\n     coinControlUpdateLabels();\n }\n "
      },
      {
        "sha": "b0df495a9869957b760acfcb061ccda4a90f7a3e",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "patch": "@@ -26,8 +26,6 @@ QT_BEGIN_NAMESPACE\n class QUrl;\n QT_END_NAMESPACE\n \n-const int defaultConfirmTarget = 25;\n-\n /** Dialog for sending bitcoins */\n class SendCoinsDialog : public QDialog\n {"
      },
      {
        "sha": "4bf03f78d025b4cf5645374ee1dfa90c7197984a",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "patch": "@@ -700,3 +700,8 @@ bool WalletModel::hdEnabled() const\n {\n     return wallet->IsHDEnabled();\n }\n+\n+int WalletModel::getDefaultConfirmTarget() const\n+{\n+    return nTxConfirmTarget;\n+}"
      },
      {
        "sha": "521d8459976c71de5e1cd994898fa884207d93f7",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "patch": "@@ -207,6 +207,8 @@ class WalletModel : public QObject\n \n     bool hdEnabled() const;\n \n+    int getDefaultConfirmTarget() const;\n+\n private:\n     CWallet *wallet;\n     bool fHaveWatchOnly;"
      },
      {
        "sha": "08d23688ff0790d5fa4edd185f40fc8ed125f6f7",
        "filename": "src/wallet/coincontrol.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/wallet/coincontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/wallet/coincontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/coincontrol.h?ref=d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "patch": "@@ -22,6 +22,8 @@ class CCoinControl\n     bool fOverrideFeeRate;\n     //! Feerate to use if overrideFeeRate is true\n     CFeeRate nFeeRate;\n+    //! Override the default confirmation target, 0 = use default\n+    int nConfirmTarget;\n \n     CCoinControl()\n     {\n@@ -37,6 +39,7 @@ class CCoinControl\n         nMinimumTotalFee = 0;\n         nFeeRate = CFeeRate(0);\n         fOverrideFeeRate = false;\n+        nConfirmTarget = 0;\n     }\n \n     bool HasSelected() const"
      },
      {
        "sha": "c9e926266cab74a687dfdce5b5458adf51ca58b7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d2143dc937e3fc93fd35def25a9c0461f26ccd4f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "patch": "@@ -2434,17 +2434,22 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n \n                 dPriority = wtxNew.ComputePriority(dPriority, nBytes);\n \n+                // Allow to override the default confirmation target over the CoinControl instance\n+                int currentConfirmationTarget = nTxConfirmTarget;\n+                if (coinControl && coinControl->nConfirmTarget > 0)\n+                    currentConfirmationTarget = coinControl->nConfirmTarget;\n+\n                 // Can we complete this as a free transaction?\n                 if (fSendFreeTransactions && nBytes <= MAX_FREE_TRANSACTION_CREATE_SIZE)\n                 {\n                     // Not enough fee: enough priority?\n-                    double dPriorityNeeded = mempool.estimateSmartPriority(nTxConfirmTarget);\n+                    double dPriorityNeeded = mempool.estimateSmartPriority(currentConfirmationTarget);\n                     // Require at least hard-coded AllowFree.\n                     if (dPriority >= dPriorityNeeded && AllowFree(dPriority))\n                         break;\n                 }\n \n-                CAmount nFeeNeeded = GetMinimumFee(nBytes, nTxConfirmTarget, mempool);\n+                CAmount nFeeNeeded = GetMinimumFee(nBytes, currentConfirmationTarget, mempool);\n                 if (coinControl && nFeeNeeded > 0 && coinControl->nMinimumTotalFee > nFeeNeeded) {\n                     nFeeNeeded = coinControl->nMinimumTotalFee;\n                 }"
      }
    ]
  },
  {
    "sha": "0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmRmODEwZDI2NzkyOGI0YzI2YTJlMmNiYjhjMDJiNzllN2IwY2Ni",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T12:15:46Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T12:15:46Z"
      },
      "message": "wallet: Change default confirm target from 2 to 6\n\nRecent discussion (in IRC meetings, and e.g. #8989) has shown a\npreference for the default confirm target for smartfees to be 6 instead\nof 2, to avoid overpaying fees for questionable gain.\n\n6 is also a compromise between the GUI's pre-#8989 value of 25 and the\nbitcoind `-txconfirmtarget` default of 2. These were unified in #8989,\nbut this has made the (overly expensive) default of 2 as GUI default.",
      "tree": {
        "sha": "d1c3a826843381f1eddf3486fd541e05c26d0ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1c3a826843381f1eddf3486fd541e05c26d0ae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9de996224d18d74853081d0c519340f43857423e",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb",
        "patch": "@@ -53,7 +53,7 @@ static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -sendfreetransactions\n static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! -txconfirmtarget default\n-static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n+static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default\n static const bool DEFAULT_WALLET_RBF = false;\n //! Largest (in bytes) free transaction we're willing to create"
      }
    ]
  },
  {
    "sha": "6c5cd9d022347abed8b61ca4ae4dc101461582fe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YzVjZDlkMDIyMzQ3YWJlZDhiNjFjYTRhZTRkYzEwMTQ2MTU4MmZl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-27T12:05:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-10-28T12:20:59Z"
      },
      "message": "test: Add format-dependent comparison to bctest\n\nThis splits the output comparison for `bitcoin-tx` into two steps:\n\n- First, check for data mismatch, parsing the data as json or hex\n  depending on the extension of the output file\n\n- Then, check if the literal string matches\n\nFor either of these cases give a different error.\n\nThis prevents wild goose chases when e.g. a trailing space doesn't match\nexactly, and makes sure that both test output and examples are valid\ndata of the purported format.",
      "tree": {
        "sha": "ccee0f9fbc278d7e0e9522b381f9f1ab456cce05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccee0f9fbc278d7e0e9522b381f9f1ab456cce05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6c5cd9d022347abed8b61ca4ae4dc101461582fe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5cd9d022347abed8b61ca4ae4dc101461582fe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5cd9d022347abed8b61ca4ae4dc101461582fe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5cd9d022347abed8b61ca4ae4dc101461582fe/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86f9e3dbba416a142df47dbd646c8e8ba772c955",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86f9e3dbba416a142df47dbd646c8e8ba772c955"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 27,
      "deletions": 3
    },
    "files": [
      {
        "sha": "eab4fb734a2d4913fa88af8f0185a011de2b0bf1",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6c5cd9d022347abed8b61ca4ae4dc101461582fe/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6c5cd9d022347abed8b61ca4ae4dc101461582fe/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=6c5cd9d022347abed8b61ca4ae4dc101461582fe",
        "patch": "@@ -6,6 +6,15 @@\n import os\n import json\n import sys\n+import binascii\n+\n+def parse_output(a, fmt):\n+\tif fmt == 'json': # json: compare parsed data\n+\t\treturn json.loads(a)\n+\telif fmt == 'hex': # hex: parse and compare binary data\n+\t\treturn binascii.a2b_hex(a.strip())\n+\telse:\n+\t\traise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n \n def bctest(testDir, testObj, exeext):\n \n@@ -23,6 +32,7 @@ def bctest(testDir, testObj, exeext):\n \toutputData = None\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n+\t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n \t\toutputData = open(testDir + \"/\" + outputFn).read()\n \t\tif not outputData:\n \t\t\tprint(\"Output data missing for \" + outputFn)\n@@ -34,9 +44,23 @@ def bctest(testDir, testObj, exeext):\n \t\tprint(\"OSError, Failed to execute \" + execprog)\n \t\tsys.exit(1)\n \n-\tif outputData and (outs[0] != outputData):\n-\t\tprint(\"Output data mismatch for \" + outputFn)\n-\t\tsys.exit(1)\n+\tif outputData:\n+\t\ttry:\n+\t\t\ta_parsed = parse_output(outs[0], outputType)\n+\t\texcept Exception as e:\n+\t\t\tprint('Error parsing command output as %s: %s' % (outputType,e))\n+\t\t\tsys.exit(1)\n+\t\ttry:\n+\t\t\tb_parsed = parse_output(outputData, outputType)\n+\t\texcept Exception as e:\n+\t\t\tprint('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+\t\t\tsys.exit(1)\n+\t\tif a_parsed != b_parsed:\n+\t\t\tprint(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\tsys.exit(1)\n+\t\tif outs[0] != outputData:\n+\t\t\tprint(\"Output formatting mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\tsys.exit(1)\n \n \twantRC = 0\n \tif \"return_code\" in testObj:"
      }
    ]
  },
  {
    "sha": "86029e72c96436605f47153c1f09e151e1847c28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjAyOWU3MmM5NjQzNjYwNWY0NzE1M2MxZjA5ZTE1MWUxODQ3YzI4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-09-28T15:57:25Z"
      },
      "committer": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-10-30T09:15:49Z"
      },
      "message": "Move CWalletDB::ReorderTransactions to CWallet",
      "tree": {
        "sha": "8e0df2b519a2d1d19936690f9dcbf1c53e053783",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e0df2b519a2d1d19936690f9dcbf1c53e053783"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86029e72c96436605f47153c1f09e151e1847c28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86029e72c96436605f47153c1f09e151e1847c28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86029e72c96436605f47153c1f09e151e1847c28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86029e72c96436605f47153c1f09e151e1847c28/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 74,
      "deletions": 80
    },
    "files": [
      {
        "sha": "9e19138099eb6d6de79f0fa15730377f54c18873",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 1,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86029e72c96436605f47153c1f09e151e1847c28/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86029e72c96436605f47153c1f09e151e1847c28/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=86029e72c96436605f47153c1f09e151e1847c28",
        "patch": "@@ -658,8 +658,79 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n DBErrors CWallet::ReorderTransactions()\n {\n+    LOCK(cs_wallet);\n     CWalletDB walletdb(strWalletFile);\n-    return walletdb.ReorderTransactions(this);\n+\n+    // Old wallets didn't have any defined order for transactions\n+    // Probably a bad idea to change the output of this\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef multimap<int64_t, TxPair > TxItems;\n+    TxItems txByTime;\n+\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    walletdb.ListAccountCreditDebit(\"\", acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    nOrderPosNext = 0;\n+    std::vector<int64_t> nOrderPosOffsets;\n+    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n+    {\n+        CWalletTx *const pwtx = (*it).second.first;\n+        CAccountingEntry *const pacentry = (*it).second.second;\n+        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+\n+        if (nOrderPos == -1)\n+        {\n+            nOrderPos = nOrderPosNext++;\n+            nOrderPosOffsets.push_back(nOrderPos);\n+\n+            if (pwtx)\n+            {\n+                if (!walletdb.WriteTx(*pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+        else\n+        {\n+            int64_t nOrderPosOff = 0;\n+            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+            {\n+                if (nOrderPos >= nOffsetStart)\n+                    ++nOrderPosOff;\n+            }\n+            nOrderPos += nOrderPosOff;\n+            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n+\n+            if (!nOrderPosOff)\n+                continue;\n+\n+            // Since we're changing the order, write it back\n+            if (pwtx)\n+            {\n+                if (!walletdb.WriteTx(*pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+    }\n+    walletdb.WriteOrderPosNext(nOrderPosNext);\n+\n+    return DB_LOAD_OK;\n }\n \n int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)"
      },
      {
        "sha": "43fd6a20adc819b639a9a08a8487908c28d1adae",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 77,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86029e72c96436605f47153c1f09e151e1847c28/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86029e72c96436605f47153c1f09e151e1847c28/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=86029e72c96436605f47153c1f09e151e1847c28",
        "patch": "@@ -251,82 +251,6 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n     pcursor->close();\n }\n \n-DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n-{\n-    LOCK(pwallet->cs_wallet);\n-    // Old wallets didn't have any defined order for transactions\n-    // Probably a bad idea to change the output of this\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n-    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef multimap<int64_t, TxPair > TxItems;\n-    TxItems txByTime;\n-\n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    list<CAccountingEntry> acentries;\n-    ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    int64_t& nOrderPosNext = pwallet->nOrderPosNext;\n-    nOrderPosNext = 0;\n-    std::vector<int64_t> nOrderPosOffsets;\n-    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n-    {\n-        CWalletTx *const pwtx = (*it).second.first;\n-        CAccountingEntry *const pacentry = (*it).second.second;\n-        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n-\n-        if (nOrderPos == -1)\n-        {\n-            nOrderPos = nOrderPosNext++;\n-            nOrderPosOffsets.push_back(nOrderPos);\n-\n-            if (pwtx)\n-            {\n-                if (!WriteTx(*pwtx))\n-                    return DB_LOAD_FAIL;\n-            }\n-            else\n-                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-                    return DB_LOAD_FAIL;\n-        }\n-        else\n-        {\n-            int64_t nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n-            {\n-                if (nOrderPos >= nOffsetStart)\n-                    ++nOrderPosOff;\n-            }\n-            nOrderPos += nOrderPosOff;\n-            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n-\n-            if (!nOrderPosOff)\n-                continue;\n-\n-            // Since we're changing the order, write it back\n-            if (pwtx)\n-            {\n-                if (!WriteTx(*pwtx))\n-                    return DB_LOAD_FAIL;\n-            }\n-            else\n-                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-                    return DB_LOAD_FAIL;\n-        }\n-    }\n-    WriteOrderPosNext(nOrderPosNext);\n-\n-    return DB_LOAD_OK;\n-}\n-\n class CWalletScanState {\n public:\n     unsigned int nKeys;\n@@ -711,7 +635,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         WriteVersion(CLIENT_VERSION);\n \n     if (wss.fAnyUnordered)\n-        result = ReorderTransactions(pwallet);\n+        result = pwallet->ReorderTransactions();\n \n     pwallet->laccentries.clear();\n     ListAccountCreditDebit(\"*\", pwallet->laccentries);"
      },
      {
        "sha": "a0525bd9a7ce8d99b29ff7b18950815e3ff89f6c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86029e72c96436605f47153c1f09e151e1847c28/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86029e72c96436605f47153c1f09e151e1847c28/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=86029e72c96436605f47153c1f09e151e1847c28",
        "patch": "@@ -153,6 +153,7 @@ class CWalletDB : public CDB\n \n     /// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n     /// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n+    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n     bool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n@@ -165,7 +166,6 @@ class CWalletDB : public CDB\n     CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-    DBErrors ReorderTransactions(CWallet* pwallet);\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n@@ -180,7 +180,6 @@ class CWalletDB : public CDB\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);\n \n-    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n };\n \n void ThreadFlushWalletDB(const std::string& strFile);"
      }
    ]
  },
  {
    "sha": "3333e5a1e582225907b201cca64322d7620fbeec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMzMzZTVhMWU1ODIyMjU5MDdiMjAxY2NhNjQzMjJkNzYyMGZiZWVj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-30T17:22:22Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-30T17:23:37Z"
      },
      "message": "[qt] Return useful error message on ATMP failure",
      "tree": {
        "sha": "38815c7743959ac357be455833ecb2de8ae30d16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38815c7743959ac357be455833ecb2de8ae30d16"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3333e5a1e582225907b201cca64322d7620fbeec",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333e5a1e582225907b201cca64322d7620fbeec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3333e5a1e582225907b201cca64322d7620fbeec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333e5a1e582225907b201cca64322d7620fbeec/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "57b21794356ea18baec94f185cd3cd95b5c14546",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3333e5a1e582225907b201cca64322d7620fbeec/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3333e5a1e582225907b201cca64322d7620fbeec/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=3333e5a1e582225907b201cca64322d7620fbeec",
        "patch": "@@ -534,7 +534,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n     case WalletModel::TransactionCommitFailed:\n-        msgParams.first = tr(\"The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+        msgParams.first = tr(\"The transaction was rejected with the following reason: %1\").arg(sendCoinsReturn.reasonCommitFailed);\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n     case WalletModel::AbsurdFee:"
      },
      {
        "sha": "3490d1c1ccd1aecb6ea123e276bfd5dd90cf5405",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3333e5a1e582225907b201cca64322d7620fbeec/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3333e5a1e582225907b201cca64322d7620fbeec/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=3333e5a1e582225907b201cca64322d7620fbeec",
        "patch": "@@ -331,7 +331,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n         CValidationState state;\n         if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get(), state))\n-            return TransactionCommitFailed;\n+            return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(state.GetRejectReason()));\n \n         CTransaction* t = (CTransaction*)newTx;\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "6a5670e3782d4db5fede74c00d9888c842acfadf",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3333e5a1e582225907b201cca64322d7620fbeec/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3333e5a1e582225907b201cca64322d7620fbeec/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=3333e5a1e582225907b201cca64322d7620fbeec",
        "patch": "@@ -144,9 +144,13 @@ class WalletModel : public QObject\n     // Return status record for SendCoins, contains error id + information\n     struct SendCoinsReturn\n     {\n-        SendCoinsReturn(StatusCode _status = OK):\n-            status(_status) {}\n+        SendCoinsReturn(StatusCode _status = OK, QString _reasonCommitFailed = \"\")\n+            : status(_status),\n+              reasonCommitFailed(_reasonCommitFailed)\n+        {\n+        }\n         StatusCode status;\n+        QString reasonCommitFailed;\n     };\n \n     // prepare transaction for getting txfee before sending coins"
      }
    ]
  },
  {
    "sha": "7f61b49de82989dc692e7750860eb1ec4044db7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjYxYjQ5ZGU4Mjk4OWRjNjkyZTc3NTA4NjBlYjFlYzQwNDRkYjdh",
    "commit": {
      "author": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-31T00:11:46Z"
      },
      "committer": {
        "name": "matthias",
        "email": "s.matthew.english@gmail.com",
        "date": "2016-10-31T00:11:46Z"
      },
      "message": "Change all instance of 'GMT epoch' to 'Unix epoch'",
      "tree": {
        "sha": "e5ab5d49343a11a04db249aa36eb52a996788f6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5ab5d49343a11a04db249aa36eb52a996788f6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f61b49de82989dc692e7750860eb1ec4044db7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61b49de82989dc692e7750860eb1ec4044db7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f61b49de82989dc692e7750860eb1ec4044db7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61b49de82989dc692e7750860eb1ec4044db7a/comments",
    "author": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "smatthewenglish",
      "id": 9053984,
      "node_id": "MDQ6VXNlcjkwNTM5ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9053984?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/smatthewenglish",
      "html_url": "https://github.com/smatthewenglish",
      "followers_url": "https://api.github.com/users/smatthewenglish/followers",
      "following_url": "https://api.github.com/users/smatthewenglish/following{/other_user}",
      "gists_url": "https://api.github.com/users/smatthewenglish/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/smatthewenglish/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/smatthewenglish/subscriptions",
      "organizations_url": "https://api.github.com/users/smatthewenglish/orgs",
      "repos_url": "https://api.github.com/users/smatthewenglish/repos",
      "events_url": "https://api.github.com/users/smatthewenglish/events{/privacy}",
      "received_events_url": "https://api.github.com/users/smatthewenglish/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "850ecffb0ec6b2ac9b556bae4db9673369a840b1",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f61b49de82989dc692e7750860eb1ec4044db7a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f61b49de82989dc692e7750860eb1ec4044db7a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=7f61b49de82989dc692e7750860eb1ec4044db7a",
        "patch": "@@ -57,7 +57,7 @@ UniValue getinfo(const JSONRPCRequest& request)\n             \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n             \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n             \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\""
      },
      {
        "sha": "5a22e0278da5aea8993ef67081ac0c64226e681d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f61b49de82989dc692e7750860eb1ec4044db7a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f61b49de82989dc692e7750860eb1ec4044db7a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=7f61b49de82989dc692e7750860eb1ec4044db7a",
        "patch": "@@ -2286,7 +2286,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unconfirmed_balance\\\": xxx,   (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"immature_balance\\\": xxxxxx,   (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,           (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,          (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,           (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\""
      }
    ]
  },
  {
    "sha": "c3efb586223c0459cdb47913375c2df805be925e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjM2VmYjU4NjIyM2MwNDU5Y2RiNDc5MTMzNzVjMmRmODA1YmU5MjVl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-07-31T18:53:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-31T06:12:09Z"
      },
      "message": "Add feedelta to TxMempoolInfo",
      "tree": {
        "sha": "7da677b8eafc769cde40cae86ac71474c82d5adc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7da677b8eafc769cde40cae86ac71474c82d5adc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c3efb586223c0459cdb47913375c2df805be925e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3efb586223c0459cdb47913375c2df805be925e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c3efb586223c0459cdb47913375c2df805be925e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3efb586223c0459cdb47913375c2df805be925e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 9,
      "deletions": 2
    },
    "files": [
      {
        "sha": "313d33507f32914bbfa2e89866b97414e6f7c9ec",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3efb586223c0459cdb47913375c2df805be925e/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3efb586223c0459cdb47913375c2df805be925e/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c3efb586223c0459cdb47913375c2df805be925e",
        "patch": "@@ -833,6 +833,10 @@ void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n     }\n }\n \n+static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator it) {\n+    return TxMempoolInfo{it->GetSharedTx(), it->GetTime(), CFeeRate(it->GetFee(), it->GetTxSize()), it->GetModifiedFee() - it->GetFee()};\n+}\n+\n std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n {\n     LOCK(cs);\n@@ -841,7 +845,7 @@ std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n     std::vector<TxMempoolInfo> ret;\n     ret.reserve(mapTx.size());\n     for (auto it : iters) {\n-        ret.push_back(TxMempoolInfo{it->GetSharedTx(), it->GetTime(), CFeeRate(it->GetFee(), it->GetTxSize())});\n+        ret.push_back(GetInfo(it));\n     }\n \n     return ret;\n@@ -862,7 +866,7 @@ TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n-    return TxMempoolInfo{i->GetSharedTx(), i->GetTime(), CFeeRate(i->GetFee(), i->GetTxSize())};\n+    return GetInfo(i);\n }\n \n CFeeRate CTxMemPool::estimateFee(int nBlocks) const"
      },
      {
        "sha": "9b0ca4655ec3fa557540abdbe2fdb9414892ee33",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c3efb586223c0459cdb47913375c2df805be925e/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c3efb586223c0459cdb47913375c2df805be925e/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c3efb586223c0459cdb47913375c2df805be925e",
        "patch": "@@ -329,6 +329,9 @@ struct TxMempoolInfo\n \n     /** Feerate of the transaction. */\n     CFeeRate feeRate;\n+\n+    /** The fee delta. */\n+    int64_t nFeeDelta;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "ced7c949e8648b727c05adccdc2a977f129ca2cd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWQ3Yzk0OWU4NjQ4YjcyN2MwNWFkY2NkYzJhOTc3ZjEyOWNhMmNk",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-31T06:24:41Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-31T06:24:41Z"
      },
      "message": "Add AcceptToMemoryPoolWithTime function",
      "tree": {
        "sha": "d6c2131d358cdbc678015c5e9fce70ef944dfa1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6c2131d358cdbc678015c5e9fce70ef944dfa1a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ced7c949e8648b727c05adccdc2a977f129ca2cd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced7c949e8648b727c05adccdc2a977f129ca2cd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ced7c949e8648b727c05adccdc2a977f129ca2cd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced7c949e8648b727c05adccdc2a977f129ca2cd/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c3efb586223c0459cdb47913375c2df805be925e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c3efb586223c0459cdb47913375c2df805be925e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c3efb586223c0459cdb47913375c2df805be925e"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 15,
      "deletions": 5
    },
    "files": [
      {
        "sha": "ccf7efcf0da5dcf37eb061b95e69ae642362b7f8",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced7c949e8648b727c05adccdc2a977f129ca2cd/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced7c949e8648b727c05adccdc2a977f129ca2cd/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ced7c949e8648b727c05adccdc2a977f129ca2cd",
        "patch": "@@ -1135,7 +1135,7 @@ std::string FormatStateMessage(const CValidationState &state)\n }\n \n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, bool fLimitFree,\n-                              bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n+                              bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n     const uint256 hash = tx.GetHash();\n@@ -1308,7 +1308,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n+        CTxMemPoolEntry entry(tx, nFees, nAcceptTime, dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Check that the transaction doesn't have an excessive number of\n@@ -1572,18 +1572,24 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     return true;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n     return res;\n }\n \n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+{\n+    return AcceptToMemoryPoolWithTime(pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), fOverrideMempoolLimit, nAbsurdFee);\n+}\n+\n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {"
      },
      {
        "sha": "5a3af52fed02d716c2b1db256e0e1ccf76b88388",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced7c949e8648b727c05adccdc2a977f129ca2cd/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced7c949e8648b727c05adccdc2a977f129ca2cd/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ced7c949e8648b727c05adccdc2a977f129ca2cd",
        "patch": "@@ -291,6 +291,10 @@ void PruneAndFlush();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n+/** (try to) add transaction to memory pool with a specified acceptance time **/\n+bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n "
      }
    ]
  },
  {
    "sha": "3f78562df5e86a2a0a21812047fc3a7db8cee988",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjc4NTYyZGY1ZTg2YTJhMGEyMTgxMjA0N2ZjM2E3ZGI4Y2VlOTg4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-31T06:53:38Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-31T07:10:36Z"
      },
      "message": "Add DumpMempool and LoadMempool",
      "tree": {
        "sha": "44ef06335547c3314542061669a18ebe7bef29c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44ef06335547c3314542061669a18ebe7bef29c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f78562df5e86a2a0a21812047fc3a7db8cee988",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78562df5e86a2a0a21812047fc3a7db8cee988",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f78562df5e86a2a0a21812047fc3a7db8cee988",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78562df5e86a2a0a21812047fc3a7db8cee988/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ced7c949e8648b727c05adccdc2a977f129ca2cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced7c949e8648b727c05adccdc2a977f129ca2cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ced7c949e8648b727c05adccdc2a977f129ca2cd"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 122,
      "deletions": 0
    },
    "files": [
      {
        "sha": "efaf821f4feb5df164626186120d021aed673d41",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f78562df5e86a2a0a21812047fc3a7db8cee988/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f78562df5e86a2a0a21812047fc3a7db8cee988/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3f78562df5e86a2a0a21812047fc3a7db8cee988",
        "patch": "@@ -207,6 +207,7 @@ void Shutdown()\n \n     StopTorControl();\n     UnregisterNodeSignals(GetNodeSignals());\n+    DumpMempool();\n \n     if (fFeeEstimatesInitialized)\n     {\n@@ -659,6 +660,8 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n     }\n+\n+    LoadMempool();\n }\n \n /** Sanity checks"
      },
      {
        "sha": "11abc0d175879d528cc03ab484318461ad0cf81f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 113,
        "deletions": 0,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f78562df5e86a2a0a21812047fc3a7db8cee988/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f78562df5e86a2a0a21812047fc3a7db8cee988/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3f78562df5e86a2a0a21812047fc3a7db8cee988",
        "patch": "@@ -6935,6 +6935,119 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n     return VersionBitsStateSinceHeight(chainActive.Tip(), params, pos, versionbitscache);\n }\n \n+static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n+\n+bool LoadMempool(void)\n+{\n+    int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"r\");\n+    CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n+        return false;\n+    }\n+\n+    int64_t count = 0;\n+    int64_t skipped = 0;\n+    int64_t failed = 0;\n+    int64_t nNow = GetTime();\n+\n+    try {\n+        uint64_t version;\n+        file >> version;\n+        if (version != MEMPOOL_DUMP_VERSION) {\n+            return false;\n+        }\n+        uint64_t num;\n+        file >> num;\n+        double prioritydummy = 0;\n+        while (num--) {\n+            CTransaction tx;\n+            int64_t nTime;\n+            int64_t nFeeDelta;\n+            file >> tx;\n+            file >> nTime;\n+            file >> nFeeDelta;\n+\n+            CAmount amountdelta = nFeeDelta;\n+            if (amountdelta) {\n+                mempool.PrioritiseTransaction(tx.GetHash(), tx.GetHash().ToString(), prioritydummy, amountdelta);\n+            }\n+            CValidationState state;\n+            if (nTime + nExpiryTimeout > nNow) {\n+                LOCK(cs_main);\n+                AcceptToMemoryPoolWithTime(mempool, state, tx, true, NULL, nTime);\n+                if (state.IsValid()) {\n+                    ++count;\n+                } else {\n+                    ++failed;\n+                }\n+            } else {\n+                ++skipped;\n+            }\n+        }\n+        std::map<uint256, CAmount> mapDeltas;\n+        file >> mapDeltas;\n+\n+        for (const auto& i : mapDeltas) {\n+            mempool.PrioritiseTransaction(i.first, i.first.ToString(), prioritydummy, i.second);\n+        }\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n+        return false;\n+    }\n+\n+    LogPrintf(\"Imported mempool transactions from disk: %i successes, %i failed, %i expired\\n\", count, failed, skipped);\n+    return true;\n+}\n+\n+void DumpMempool(void)\n+{\n+    int64_t start = GetTimeMicros();\n+\n+    std::map<uint256, CAmount> mapDeltas;\n+    std::vector<TxMempoolInfo> vinfo;\n+\n+    {\n+        LOCK(mempool.cs);\n+        for (const auto &i : mempool.mapDeltas) {\n+            mapDeltas[i.first] = i.second.first;\n+        }\n+        vinfo = mempool.infoAll();\n+    }\n+\n+    int64_t mid = GetTimeMicros();\n+\n+    try {\n+        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"w\");\n+        if (!filestr) {\n+            return;\n+        }\n+\n+        CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+\n+        uint64_t version = MEMPOOL_DUMP_VERSION;\n+        file << version;\n+\n+        file << (uint64_t)vinfo.size();\n+        for (const auto& i : vinfo) {\n+            file << *(i.tx);\n+            file << (int64_t)i.nTime;\n+            file << (int64_t)i.nFeeDelta;\n+            mapDeltas.erase(i.tx->GetHash());\n+        }\n+\n+        file << mapDeltas;\n+        FileCommit(file.Get());\n+        file.fclose();\n+        RenameOver(GetDataDir() / \"mempool.dat.new\", GetDataDir() / \"mempool.dat\");\n+        int64_t last = GetTimeMicros();\n+        LogPrintf(\"Dumped mempool: %gs to copy, %gs to dump\\n\", (mid-start)*0.000001, (last-mid)*0.000001);\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"Failed to dump mempool: %s. Continuing anyway.\\n\", e.what());\n+    }\n+}\n+\n class CMainCleanup\n {\n public:"
      },
      {
        "sha": "4c6af9514206c89af50d19bb590afa2ba21f6009",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f78562df5e86a2a0a21812047fc3a7db8cee988/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f78562df5e86a2a0a21812047fc3a7db8cee988/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3f78562df5e86a2a0a21812047fc3a7db8cee988",
        "patch": "@@ -533,6 +533,12 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+/** Dump the mempool to disk. */\n+void DumpMempool();\n+\n+/** Load the mempool from disk. */\n+bool LoadMempool();\n+\n // The following things handle network-processing logic\n // (and should be moved to a separate file)\n "
      }
    ]
  },
  {
    "sha": "582068aa907127c12db53fbd65667dc7810d42b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODIwNjhhYTkwNzEyN2MxMmRiNTNmYmQ2NTY2N2RjNzgxMGQ0MmIw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-31T07:07:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-10-31T07:10:36Z"
      },
      "message": "Add mempool.dat to doc/files.md",
      "tree": {
        "sha": "32676261289e4de25d21b83f63ae75c57be79786",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32676261289e4de25d21b83f63ae75c57be79786"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/582068aa907127c12db53fbd65667dc7810d42b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/582068aa907127c12db53fbd65667dc7810d42b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/582068aa907127c12db53fbd65667dc7810d42b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/582068aa907127c12db53fbd65667dc7810d42b0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f78562df5e86a2a0a21812047fc3a7db8cee988",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f78562df5e86a2a0a21812047fc3a7db8cee988",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f78562df5e86a2a0a21812047fc3a7db8cee988"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "928977143be3b3e470593884b63d4e086bcb315d",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/582068aa907127c12db53fbd65667dc7810d42b0/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/582068aa907127c12db53fbd65667dc7810d42b0/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=582068aa907127c12db53fbd65667dc7810d42b0",
        "patch": "@@ -10,6 +10,7 @@\n * db.log: wallet database log file\n * debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n * fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+* mempool.dat: dump of the mempool's transactions; since 0.14.0.\n * peers.dat: peer IP address database (custom format); since 0.7.0\n * wallet.dat: personal wallet (BDB) with keys and transactions\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0"
      }
    ]
  },
  {
    "sha": "fa326193ad739d1f93da456b3fa73af0bbf9fdd1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTMyNjE5M2FkNzM5ZDFmOTNkYTQ1NmIzZmE3M2FmMGJiZjlmZGQx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-30T15:58:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-31T09:46:52Z"
      },
      "message": "[rpc] ParseHash: Fail when length is not 64",
      "tree": {
        "sha": "67be00066a7d06c25ffa5b67e2ca530137af60d4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67be00066a7d06c25ffa5b67e2ca530137af60d4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa326193ad739d1f93da456b3fa73af0bbf9fdd1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa326193ad739d1f93da456b3fa73af0bbf9fdd1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa326193ad739d1f93da456b3fa73af0bbf9fdd1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa326193ad739d1f93da456b3fa73af0bbf9fdd1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "164e0f00e2edbe213dc2d9daa5e4877d4893a175",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa326193ad739d1f93da456b3fa73af0bbf9fdd1/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa326193ad739d1f93da456b3fa73af0bbf9fdd1/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fa326193ad739d1f93da456b3fa73af0bbf9fdd1",
        "patch": "@@ -147,6 +147,8 @@ uint256 ParseHashV(const UniValue& v, string strName)\n         strHex = v.get_str();\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+    if (64 != strHex.length())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d)\", strName, 64, strHex.length()));\n     uint256 result;\n     result.SetHex(strHex);\n     return result;"
      }
    ]
  },
  {
    "sha": "65f35eb91b4ad11c96703150b202c1e9b9d12266",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWYzNWViOTFiNGFkMTFjOTY3MDMxNTBiMjAyYzFlOWI5ZDEyMjY2",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-03T14:06:10Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move FlushStateToDisk call out of ProcessMessages::TX into ATMP",
      "tree": {
        "sha": "821aa64a87939a5148af46e0e4944ff2e47f77ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/821aa64a87939a5148af46e0e4944ff2e47f77ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65f35eb91b4ad11c96703150b202c1e9b9d12266",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "83234d4d1723e4f207a20f1abbe9432566a7d5ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/83234d4d1723e4f207a20f1abbe9432566a7d5ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/83234d4d1723e4f207a20f1abbe9432566a7d5ee"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "83e85f3d244bb4dadd964e13e6c1b4580f96f7f6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65f35eb91b4ad11c96703150b202c1e9b9d12266/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65f35eb91b4ad11c96703150b202c1e9b9d12266/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=65f35eb91b4ad11c96703150b202c1e9b9d12266",
        "patch": "@@ -691,6 +691,16 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n CCoinsViewCache *pcoinsTip = NULL;\n CBlockTreeDB *pblocktree = NULL;\n \n+enum FlushStateMode {\n+    FLUSH_STATE_NONE,\n+    FLUSH_STATE_IF_NEEDED,\n+    FLUSH_STATE_PERIODIC,\n+    FLUSH_STATE_ALWAYS\n+};\n+\n+// See definition for documentation\n+bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode);\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapOrphanTransactions\n@@ -1581,6 +1591,9 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n+    // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n+    CValidationState stateDummy;\n+    FlushStateToDisk(stateDummy, FLUSH_STATE_PERIODIC);\n     return res;\n }\n \n@@ -2558,13 +2571,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     return true;\n }\n \n-enum FlushStateMode {\n-    FLUSH_STATE_NONE,\n-    FLUSH_STATE_IF_NEEDED,\n-    FLUSH_STATE_PERIODIC,\n-    FLUSH_STATE_ALWAYS\n-};\n-\n /**\n  * Update the on-disk chain state.\n  * The caches and indexes are flushed depending on the mode we're called with\n@@ -5684,7 +5690,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n         }\n-        FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }\n \n "
      }
    ]
  },
  {
    "sha": "fc0c24f67b4323f215f908767b644bf022c7fe9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYzBjMjRmNjdiNDMyM2YyMTVmOTA4NzY3YjY0NGJmMDIyYzdmZTlh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-02T03:44:40Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move MarkBlockAsReceived out of ProcessNewMessage",
      "tree": {
        "sha": "bb7b01de28fb19765ed8db0f66a601fcf4333d55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb7b01de28fb19765ed8db0f66a601fcf4333d55"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0c24f67b4323f215f908767b644bf022c7fe9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65f35eb91b4ad11c96703150b202c1e9b9d12266",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65f35eb91b4ad11c96703150b202c1e9b9d12266",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65f35eb91b4ad11c96703150b202c1e9b9d12266"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 18,
      "deletions": 5
    },
    "files": [
      {
        "sha": "c6b82bf82512d4c4aaa8f9a2acab883f8ff982ca",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 5,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fc0c24f67b4323f215f908767b644bf022c7fe9a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fc0c24f67b4323f215f908767b644bf022c7fe9a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fc0c24f67b4323f215f908767b644bf022c7fe9a",
        "patch": "@@ -3702,6 +3702,11 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     // not process unrequested blocks.\n     bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n+    // TODO: Decouple this function from the block download logic by removing fRequested\n+    // This requires some new chain datastructure to efficiently look up if a\n+    // block is in a chain leading to a candidate for best tip, despite not\n+    // being such a candidate itself.\n+\n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n@@ -3750,13 +3755,11 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     {\n         LOCK(cs_main);\n-        bool fRequested = MarkBlockAsReceived(pblock->GetHash());\n-        fRequested |= fForceProcessing;\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n         bool fNewBlock = false;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp, &fNewBlock);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, &fNewBlock);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n             if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n@@ -5858,12 +5861,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 std::vector<CInv> invs;\n                 invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n                 pfrom->PushMessage(NetMsgType::GETDATA, invs);\n-            } else\n+            } else {\n+                MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n+            }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n             CValidationState state;\n-            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n+            // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n+            // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n+            ProcessNewBlock(state, chainparams, pfrom, &block, true, NULL);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -6039,6 +6046,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        {\n+            LOCK(cs_main);\n+            // Also always process if we requested the block explicitly, as we may\n+            // need it even though it is not a candidate for a new best tip.\n+            forceProcessing |= MarkBlockAsReceived(block.GetHash());\n+        }\n         ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {"
      }
    ]
  },
  {
    "sha": "d6ea737be19a0001e69e4e854eb1cef21523ea7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmVhNzM3YmUxOWEwMDAxZTY5ZTRlODU0ZWIxY2VmMjE1MjNlYTdh",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-02T15:29:35Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Remove network state wipe from UnloadBlockIndex.\n\nUnloadBlockIndex is only used during init if we end up reindexing\nto clear our block state so that we can start over. However, at\nthat time no connections have been brought up as CConnman hasn't\nbeen started yet, so all of the network processing state logic is\nempty when its called.\n\nAdditionally, the initialization of the recentRejects set is moved\nto InitPeerLogic.",
      "tree": {
        "sha": "ef4b8d18a8c604db15a33314aead7f4c5e4ab583",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef4b8d18a8c604db15a33314aead7f4c5e4ab583"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fc0c24f67b4323f215f908767b644bf022c7fe9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fc0c24f67b4323f215f908767b644bf022c7fe9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fc0c24f67b4323f215f908767b644bf022c7fe9a"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "0f42d907b9b4a4062c2a45024f4011750df83173",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "patch": "@@ -1100,6 +1100,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return false;\n #endif\n     // ********************************************************* Step 6: network initialization\n+    // Note that we absolutely cannot open any actual connections\n+    // until the very end (\"start node\") as the UTXO/block state\n+    // is not yet setup and may end up being set up twice if we\n+    // need to reindex later.\n \n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));"
      },
      {
        "sha": "5be97d586749f811a8fc4065acf2022767498a5e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "patch": "@@ -4272,6 +4272,9 @@ bool RewindBlockIndex(const CChainParams& params)\n     return true;\n }\n \n+// May NOT be used after any connections are up as much\n+// of the peer-processing logic assumes a consistent\n+// block index state\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n@@ -4282,18 +4285,12 @@ void UnloadBlockIndex()\n     mempool.clear();\n     mapOrphanTransactions.clear();\n     mapOrphanTransactionsByPrev.clear();\n-    nSyncStarted = 0;\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n     nLastBlockFile = 0;\n     nBlockSequenceId = 1;\n-    mapBlockSource.clear();\n-    mapBlocksInFlight.clear();\n-    nPreferredDownload = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n-    mapNodeState.clear();\n-    recentRejects.reset(NULL);\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n         warningcache[b].clear();\n@@ -4318,9 +4315,6 @@ bool InitBlockIndex(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n \n-    // Initialize global variables that cannot be constructed at startup.\n-    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n-\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n         return true;\n@@ -4709,6 +4703,11 @@ std::string GetWarnings(const std::string& strFor)\n // blockchain -> download logic notification\n //\n \n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+}\n+\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);"
      },
      {
        "sha": "3cab1e6afae0ee1aba8b8ff6961f79c598b9955a",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6ea737be19a0001e69e4e854eb1cef21523ea7a/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "patch": "@@ -542,7 +542,7 @@ class PeerLogicValidation : public CValidationInterface {\n     CConnman* connman;\n \n public:\n-    PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n+    PeerLogicValidation(CConnman* connmanIn);\n \n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);"
      }
    ]
  },
  {
    "sha": "d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODY3MGZiMTAzZjk1ZTZkYzZmNDY5ZDcxYzllZTRmNmZmMjQwN2Uw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-02T16:45:24Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move all calls to CheckBlockIndex out of net-processing logic\n\nThis will result in many more calls to CheckBlockIndex when\nconnecting a list of headers (eg in ::HEADERS messages processing)\nbut its only enabled in debug mode, and that should mostly just be\nduring IBD, so it should be OK.",
      "tree": {
        "sha": "41a155b5e470350114936ca609f2d61e09bfc36d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41a155b5e470350114936ca609f2d61e09bfc36d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6ea737be19a0001e69e4e854eb1cef21523ea7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6ea737be19a0001e69e4e854eb1cef21523ea7a"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 2,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b99515a656352c1f27fb156c9aee157c591e174c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
        "patch": "@@ -3675,6 +3675,8 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n     if (ppindex)\n         *ppindex = pindex;\n \n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n     return true;\n }\n \n@@ -5827,8 +5829,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman);\n             }\n         }\n-\n-        CheckBlockIndex(chainparams.GetConsensus());\n     }\n \n     else if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n@@ -6025,8 +6025,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n             }\n         }\n-\n-        CheckBlockIndex(chainparams.GetConsensus());\n         }\n \n         NotifyHeaderTip();"
      }
    ]
  },
  {
    "sha": "f5b960be4e9a9ab669e1436194fa904ccba58900",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNWI5NjBiZTRlOWE5YWI2NjllMTQzNjE5NGZhOTA0Y2NiYTU4OTAw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-06T18:11:45Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-10-31T14:08:11Z"
      },
      "message": "Move nTimeBestReceived updating into net processing code",
      "tree": {
        "sha": "e5e1a7a0a87f56ec26ed8c24a3f325efce259a42",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5e1a7a0a87f56ec26ed8c24a3f325efce259a42"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f5b960be4e9a9ab669e1436194fa904ccba58900",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b960be4e9a9ab669e1436194fa904ccba58900",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f5b960be4e9a9ab669e1436194fa904ccba58900",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b960be4e9a9ab669e1436194fa904ccba58900/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8670fb103f95e6dc6f469d71c9ee4f6ff2407e0"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8232b0f74b3b4e61cce51ebd4561ad9ef2f0d113",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f5b960be4e9a9ab669e1436194fa904ccba58900/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f5b960be4e9a9ab669e1436194fa904ccba58900/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f5b960be4e9a9ab669e1436194fa904ccba58900",
        "patch": "@@ -63,7 +63,7 @@ CCriticalSection cs_main;\n BlockMap mapBlockIndex;\n CChain chainActive;\n CBlockIndex *pindexBestHeader = NULL;\n-int64_t nTimeBestReceived = 0;\n+int64_t nTimeBestReceived = 0; // Used only to inform the wallet of when we last received a block\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;\n@@ -2690,7 +2690,6 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     chainActive.SetTip(pindexNew);\n \n     // New best block\n-    nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n     cvBlockChange.notify_all();\n@@ -4736,6 +4735,8 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n             }\n         });\n     }\n+\n+    nTimeBestReceived = GetTime();\n }\n \n void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {"
      }
    ]
  },
  {
    "sha": "3d69ecb4edeb80003a1a41442e320898a30dbd9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZDY5ZWNiNGVkZWI4MDAwM2ExYTQxNDQyZTMyMDg5OGEzMGRiZDlj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-31T18:48:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-10-31T18:49:12Z"
      },
      "message": "Merge #9041: keypoololdest denote Unix epoch, not GMT\n\n7f61b49 Change all instance of 'GMT epoch' to 'Unix epoch' (matthias)",
      "tree": {
        "sha": "e5ab5d49343a11a04db249aa36eb52a996788f6b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e5ab5d49343a11a04db249aa36eb52a996788f6b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3d69ecb4edeb80003a1a41442e320898a30dbd9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYF5IoAAoJEC1/I3LlD+E3O60H/3BS4o/uGiKcFpNG5EfAKFSz\nTjNrxMssdeN6o/Q2NNpa0awA7Boi5nJxWoVtZKrKmWxMTavNy3ru6HunhL3WLSgP\n6HHIlzdcr3NnDQ+0BCyhSEC7vDTUzjHMxQRMl0DlKntOU5HtKP4jrVRfEP6/mI94\njUJqFyUxd+NRi7X6zbB6qLtfuoJ6cE/ErBBB4tuDqIRr4QJQmNCJdskgNrHmHKBz\n+7uHwFxwxAcPlGW/bRFUpeGVnZgcaJss4S3FlX9PgpDKzVmXzZPwBivpdyfdfHRH\nR+dUKGbIlbJFEmG4woId48S/akobKZcc6ZuO/W3IZ0ehpBjHVrTgov8M1OW9fsQ=\n=QYGg\n-----END PGP SIGNATURE-----",
        "payload": "tree e5ab5d49343a11a04db249aa36eb52a996788f6b\nparent d2143dc937e3fc93fd35def25a9c0461f26ccd4f\nparent 7f61b49de82989dc692e7750860eb1ec4044db7a\nauthor MarcoFalke <falke.marco@gmail.com> 1477939736 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1477939752 +0100\n\nMerge #9041: keypoololdest denote Unix epoch, not GMT\n\n7f61b49 Change all instance of 'GMT epoch' to 'Unix epoch' (matthias)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d69ecb4edeb80003a1a41442e320898a30dbd9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3d69ecb4edeb80003a1a41442e320898a30dbd9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d69ecb4edeb80003a1a41442e320898a30dbd9c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d2143dc937e3fc93fd35def25a9c0461f26ccd4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d2143dc937e3fc93fd35def25a9c0461f26ccd4f"
      },
      {
        "sha": "7f61b49de82989dc692e7750860eb1ec4044db7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f61b49de82989dc692e7750860eb1ec4044db7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f61b49de82989dc692e7750860eb1ec4044db7a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "850ecffb0ec6b2ac9b556bae4db9673369a840b1",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d69ecb4edeb80003a1a41442e320898a30dbd9c/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d69ecb4edeb80003a1a41442e320898a30dbd9c/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "patch": "@@ -57,7 +57,7 @@ UniValue getinfo(const JSONRPCRequest& request)\n             \"  \\\"proxy\\\": \\\"host:port\\\",     (string, optional) the proxy used by the server\\n\"\n             \"  \\\"difficulty\\\": xxxxxx,       (numeric) the current difficulty\\n\"\n             \"  \\\"testnet\\\": true|false,      (boolean) if the server is using testnet or not\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,    (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,        (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,      (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,         (numeric) the transaction fee set in \" + CURRENCY_UNIT + \"/kB\\n\""
      },
      {
        "sha": "5a22e0278da5aea8993ef67081ac0c64226e681d",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3d69ecb4edeb80003a1a41442e320898a30dbd9c/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3d69ecb4edeb80003a1a41442e320898a30dbd9c/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "patch": "@@ -2286,7 +2286,7 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unconfirmed_balance\\\": xxx,   (numeric) the total unconfirmed balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"immature_balance\\\": xxxxxx,   (numeric) the total immature balance of the wallet in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,           (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since GMT epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,      (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,          (numeric) how many new keys are pre-generated\\n\"\n             \"  \\\"unlocked_until\\\": ttt,        (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,           (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\""
      }
    ]
  },
  {
    "sha": "aff6584e09938768838a768b67722db553cf8ef4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZmY2NTg0ZTA5OTM4NzY4ODM4YTc2OGI2NzcyMmRiNTUzY2Y4ZWY0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-31T21:06:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-31T21:17:18Z"
      },
      "message": "net: constify a few CNode vars to indicate that they're threadsafe",
      "tree": {
        "sha": "3d4053d1eb40ab7452a5fe6603d5805f196e8941",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d4053d1eb40ab7452a5fe6603d5805f196e8941"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aff6584e09938768838a768b67722db553cf8ef4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff6584e09938768838a768b67722db553cf8ef4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aff6584e09938768838a768b67722db553cf8ef4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff6584e09938768838a768b67722db553cf8ef4/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d69ecb4edeb80003a1a41442e320898a30dbd9c"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 9,
      "deletions": 10
    },
    "files": [
      {
        "sha": "f27516aae64776958fa6cecc5501851bff1f9b8c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aff6584e09938768838a768b67722db553cf8ef4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aff6584e09938768838a768b67722db553cf8ef4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=aff6584e09938768838a768b67722db553cf8ef4",
        "patch": "@@ -2512,9 +2512,13 @@ unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n+    fInbound(fInboundIn),\n+    id(idIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n-    filterInventoryKnown(50000, 0.000001)\n+    filterInventoryKnown(50000, 0.000001),\n+    nLocalServices(nLocalServicesIn),\n+    nMyStartingHeight(nMyStartingHeightIn)\n {\n     nServices = NODE_NONE;\n     nServicesExpected = NODE_NONE;\n@@ -2533,7 +2537,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fOneShot = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n-    fInbound = fInboundIn;\n     fNetworkNode = false;\n     fSuccessfullyConnected = false;\n     fDisconnect = false;\n@@ -2562,12 +2565,8 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     minFeeFilter = 0;\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n-    id = idIn;\n     nOptimisticBytesWritten = 0;\n-    nLocalServices = nLocalServicesIn;\n-\n     GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n-    nMyStartingHeight = nMyStartingHeightIn;\n \n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "a065a990b9e37948c9b57b969c95becd94989809",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aff6584e09938768838a768b67722db553cf8ef4/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aff6584e09938768838a768b67722db553cf8ef4/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=aff6584e09938768838a768b67722db553cf8ef4",
        "patch": "@@ -589,7 +589,7 @@ class CNode\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n     bool fClient;\n-    bool fInbound;\n+    const bool fInbound;\n     bool fNetworkNode;\n     bool fSuccessfullyConnected;\n     bool fDisconnect;\n@@ -603,7 +603,7 @@ class CNode\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n     int nRefCount;\n-    NodeId id;\n+    const NodeId id;\n \n     const uint64_t nKeyedNetGroup;\n protected:\n@@ -679,8 +679,8 @@ class CNode\n \n     uint64_t nLocalHostNonce;\n     // Services offered to this peer\n-    ServiceFlags nLocalServices;\n-    int nMyStartingHeight;\n+    const ServiceFlags nLocalServices;\n+    const int nMyStartingHeight;\n public:\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "59ac5c5b72fef6a70fe621537faf27df1076b524",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWFjNWM1YjcyZmVmNmE3MGZlNjIxNTM3ZmFmMjdkZjEwNzZiNTI0",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-26T19:10:15Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2016-10-31T21:17:18Z"
      },
      "message": "net: Use deterministic randomness for CNode's nonce, and make it const",
      "tree": {
        "sha": "daac8b731be3882fd8805779a3d97ecbcef55028",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/daac8b731be3882fd8805779a3d97ecbcef55028"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59ac5c5b72fef6a70fe621537faf27df1076b524",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ac5c5b72fef6a70fe621537faf27df1076b524",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59ac5c5b72fef6a70fe621537faf27df1076b524",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ac5c5b72fef6a70fe621537faf27df1076b524/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aff6584e09938768838a768b67722db553cf8ef4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aff6584e09938768838a768b67722db553cf8ef4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aff6584e09938768838a768b67722db553cf8ef4"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 24,
      "deletions": 13
    },
    "files": [
      {
        "sha": "18d25cbcd1128bb12aacf85f647c4849c90e1c64",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -64,6 +64,7 @@\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; // SHA256(\"netgroup\")[0:8]\n+static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; // SHA256(\"localhostnonce\")[0:8]\n //\n // Global state variables\n //\n@@ -389,7 +390,10 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), pszDest ? pszDest : \"\", false);\n+        NodeId id = GetNewNodeId();\n+        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n+\n         GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n@@ -1024,7 +1028,10 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), \"\", true);\n+    NodeId id = GetNewNodeId();\n+    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, \"\", true);\n     GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n@@ -2118,7 +2125,11 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices), 0);\n+\n+        NodeId id = GetNewNodeId();\n+        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+\n+        pnodeLocalHost = new CNode(id, nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices), 0, nonce);\n         GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n@@ -2509,14 +2520,15 @@ void CNode::Fuzz(int nChance)\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n     fInbound(fInboundIn),\n     id(idIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n     filterInventoryKnown(50000, 0.000001),\n+    nLocalHostNonce(nLocalHostNonceIn),\n     nLocalServices(nLocalServicesIn),\n     nMyStartingHeight(nMyStartingHeightIn)\n {\n@@ -2566,7 +2578,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n     nOptimisticBytesWritten = 0;\n-    GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n \n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "bfce516237df86bb12ecc02b37d7afc2a101932f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -669,15 +669,15 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n \n-    uint64_t nLocalHostNonce;\n+    const uint64_t nLocalHostNonce;\n     // Services offered to this peer\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;"
      },
      {
        "sha": "4aa716681579018e66c3a01e3f2e636082bec690",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n "
      },
      {
        "sha": "e0460109d5c23d6059358bc3b36f79362e9c3307",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59ac5c5b72fef6a70fe621537faf27df1076b524/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=59ac5c5b72fef6a70fe621537faf27df1076b524",
        "patch": "@@ -164,12 +164,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, pszDest, fInboundIn);\n+    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, pszDest, fInboundIn);\n+    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      }
    ]
  },
  {
    "sha": "273bde37d867d1f6ab67e22a65097b7adfc4831a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzNiZGUzN2Q4NjdkMWY2YWI2N2UyMmE2NTA5N2I3YWRmYzQ4MzFh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-01T07:33:14Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-11-01T07:33:17Z"
      },
      "message": "Merge #9043: [qt] Return useful error message on ATMP failure\n\n3333e5a [qt] Return useful error message on ATMP failure (MarcoFalke)",
      "tree": {
        "sha": "9af34949d97596263c72a2215fb2f36b2aee1e82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9af34949d97596263c72a2215fb2f36b2aee1e82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/273bde37d867d1f6ab67e22a65097b7adfc4831a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJYGEU9AAoJECnUvLZBb1PszSoQAKI6GolOM5SZ2L6tzAXvr4XS\n0I7NYvj7t3FzGmFx9T7LGXWDKoBl1oF69KLC5Bak9ck9DbZ8H6qPtaqW54qOdi+v\n4JldQPZkjdnsWjPQw5EV6USo7ZACfPsOaZKB8Q5anjCvC8/NZLdlYUk6LNowRJ2w\nEPz3zdEbfdVMG06Ho7qVtp8G0uhFSRTSX5lXbPFNdB0oP738V8oLSwWh1BtFy5da\n5TSdLdUfTfOW/kvWUnUPBMtX5wCpRO+NY4Y8/Zy0hiQij3dc6lzY2b/2KZPpIR3Q\n3XUsU+g3l9TLHLRAGBb7oHmBG+X3CV287dorOt4pa+9w0Wx48ANDF81G5JfLRkhO\nbegqDLeCfBTiWavKNDqGcAGHYuMZWW4DCmPVFLX71rmfCTUqpfJ8uQcMsBBoTtyr\nlbgnD54QVXB0q9NUGJjWIcga/kwbOp0FNA3eySxfQRpZzLPIlaCA/8H61sv+otxs\nUaBUnXU0uhe09BKeEoe4PoLsCeGNGxN0WGYCNejg9pZxS9B09obB0lQ8UsyNnnzP\nd9kofDMyM6M+2LTdsaozBu/T7+KR7dEBv9iSPVme+Pz16GTVvdzMjXXRF4G61pUI\nJ+9q9WD1mOvnxUbwxfvI4b30IumNOObtpr+ZFUQ+DXgkZ93QbZmDMuDr0RiyN6jv\nN3tytCi4ZsJ1ZM4Pl/a5\n=ZlQf\n-----END PGP SIGNATURE-----",
        "payload": "tree 9af34949d97596263c72a2215fb2f36b2aee1e82\nparent 3d69ecb4edeb80003a1a41442e320898a30dbd9c\nparent 3333e5a1e582225907b201cca64322d7620fbeec\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1477985594 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1477985597 +0100\n\nMerge #9043: [qt] Return useful error message on ATMP failure\n\n3333e5a [qt] Return useful error message on ATMP failure (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/273bde37d867d1f6ab67e22a65097b7adfc4831a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/273bde37d867d1f6ab67e22a65097b7adfc4831a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/273bde37d867d1f6ab67e22a65097b7adfc4831a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d69ecb4edeb80003a1a41442e320898a30dbd9c"
      },
      {
        "sha": "3333e5a1e582225907b201cca64322d7620fbeec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3333e5a1e582225907b201cca64322d7620fbeec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3333e5a1e582225907b201cca64322d7620fbeec"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 8,
      "deletions": 4
    },
    "files": [
      {
        "sha": "57b21794356ea18baec94f185cd3cd95b5c14546",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/273bde37d867d1f6ab67e22a65097b7adfc4831a/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/273bde37d867d1f6ab67e22a65097b7adfc4831a/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=273bde37d867d1f6ab67e22a65097b7adfc4831a",
        "patch": "@@ -534,7 +534,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n     case WalletModel::TransactionCommitFailed:\n-        msgParams.first = tr(\"The transaction was rejected! This might happen if some of the coins in your wallet were already spent, such as if you used a copy of wallet.dat and coins were spent in the copy but not marked as spent here.\");\n+        msgParams.first = tr(\"The transaction was rejected with the following reason: %1\").arg(sendCoinsReturn.reasonCommitFailed);\n         msgParams.second = CClientUIInterface::MSG_ERROR;\n         break;\n     case WalletModel::AbsurdFee:"
      },
      {
        "sha": "3490d1c1ccd1aecb6ea123e276bfd5dd90cf5405",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/273bde37d867d1f6ab67e22a65097b7adfc4831a/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/273bde37d867d1f6ab67e22a65097b7adfc4831a/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=273bde37d867d1f6ab67e22a65097b7adfc4831a",
        "patch": "@@ -331,7 +331,7 @@ WalletModel::SendCoinsReturn WalletModel::sendCoins(WalletModelTransaction &tran\n         CReserveKey *keyChange = transaction.getPossibleKeyChange();\n         CValidationState state;\n         if(!wallet->CommitTransaction(*newTx, *keyChange, g_connman.get(), state))\n-            return TransactionCommitFailed;\n+            return SendCoinsReturn(TransactionCommitFailed, QString::fromStdString(state.GetRejectReason()));\n \n         CTransaction* t = (CTransaction*)newTx;\n         CDataStream ssTx(SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "6a5670e3782d4db5fede74c00d9888c842acfadf",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/273bde37d867d1f6ab67e22a65097b7adfc4831a/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/273bde37d867d1f6ab67e22a65097b7adfc4831a/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=273bde37d867d1f6ab67e22a65097b7adfc4831a",
        "patch": "@@ -144,9 +144,13 @@ class WalletModel : public QObject\n     // Return status record for SendCoins, contains error id + information\n     struct SendCoinsReturn\n     {\n-        SendCoinsReturn(StatusCode _status = OK):\n-            status(_status) {}\n+        SendCoinsReturn(StatusCode _status = OK, QString _reasonCommitFailed = \"\")\n+            : status(_status),\n+              reasonCommitFailed(_reasonCommitFailed)\n+        {\n+        }\n         StatusCode status;\n+        QString reasonCommitFailed;\n     };\n \n     // prepare transaction for getting txfee before sending coins"
      }
    ]
  },
  {
    "sha": "cccf73db0483cc3945bf8389ce197df35e931e16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2NmNzNkYjA0ODNjYzM5NDViZjgzODljZTE5N2RmMzVlOTMxZTE2",
    "commit": {
      "author": {
        "name": "Robert McLaughlin",
        "email": "robert@sparkk.us",
        "date": "2016-11-02T01:04:26Z"
      },
      "committer": {
        "name": "Robert McLaughlin",
        "email": "robert@sparkk.us",
        "date": "2016-11-02T01:04:26Z"
      },
      "message": "trivial: fix bloom filter init to isEmpty = true\n\nFixes newly initialized bloom filters being\nconstructed with isEmpty(false), which still\nworks but loses the possible speedup when\nchecking for key membership in an empty filter.",
      "tree": {
        "sha": "ea9a5ac879568d2d8969b75ed9618f6b59a0aa08",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ea9a5ac879568d2d8969b75ed9618f6b59a0aa08"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cccf73db0483cc3945bf8389ce197df35e931e16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cccf73db0483cc3945bf8389ce197df35e931e16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cccf73db0483cc3945bf8389ce197df35e931e16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cccf73db0483cc3945bf8389ce197df35e931e16/comments",
    "author": {
      "login": "robmcl4",
      "id": 884115,
      "node_id": "MDQ6VXNlcjg4NDExNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/884115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robmcl4",
      "html_url": "https://github.com/robmcl4",
      "followers_url": "https://api.github.com/users/robmcl4/followers",
      "following_url": "https://api.github.com/users/robmcl4/following{/other_user}",
      "gists_url": "https://api.github.com/users/robmcl4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robmcl4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robmcl4/subscriptions",
      "organizations_url": "https://api.github.com/users/robmcl4/orgs",
      "repos_url": "https://api.github.com/users/robmcl4/repos",
      "events_url": "https://api.github.com/users/robmcl4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robmcl4/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "robmcl4",
      "id": 884115,
      "node_id": "MDQ6VXNlcjg4NDExNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/884115?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robmcl4",
      "html_url": "https://github.com/robmcl4",
      "followers_url": "https://api.github.com/users/robmcl4/followers",
      "following_url": "https://api.github.com/users/robmcl4/following{/other_user}",
      "gists_url": "https://api.github.com/users/robmcl4/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robmcl4/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robmcl4/subscriptions",
      "organizations_url": "https://api.github.com/users/robmcl4/orgs",
      "repos_url": "https://api.github.com/users/robmcl4/repos",
      "events_url": "https://api.github.com/users/robmcl4/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robmcl4/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "273bde37d867d1f6ab67e22a65097b7adfc4831a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/273bde37d867d1f6ab67e22a65097b7adfc4831a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/273bde37d867d1f6ab67e22a65097b7adfc4831a"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d00befc61ca686528cfbba282f2bceb25773887b",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cccf73db0483cc3945bf8389ce197df35e931e16/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cccf73db0483cc3945bf8389ce197df35e931e16/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=cccf73db0483cc3945bf8389ce197df35e931e16",
        "patch": "@@ -34,7 +34,7 @@ CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n     isFull(false),\n-    isEmpty(false),\n+    isEmpty(true),\n     nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)"
      }
    ]
  },
  {
    "sha": "fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDQ2MTM2ZGZhZjY4YTcwNDZjZjdiODY5MzgyNGQ3M2FjNmIxY2Fm",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-10-22T05:33:25Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-11-02T01:47:02Z"
      },
      "message": "IBD check uses minimumchain work instead of checkpoints.\n\nThis introduces a 'minimum chain work' chainparam which is intended\n to be the known amount of work in the chain for the network at the\n time of software release.  If you don't have this much work, you're\n not yet caught up.\n\nThis is used instead of the count of blocks test from checkpoints.\n\nThis criteria is trivial to keep updated as there is no element of\nsubjectivity, trust, or position dependence to it. It is also a more\nreliable metric of sync status than a block count.",
      "tree": {
        "sha": "033a84a28fd516325144cb0cd9b31545f81fddf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/033a84a28fd516325144cb0cd9b31545f81fddf8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d69ecb4edeb80003a1a41442e320898a30dbd9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d69ecb4edeb80003a1a41442e320898a30dbd9c"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 16,
      "deletions": 2
    },
    "files": [
      {
        "sha": "85cf160f47a278fb3800ecba1314a7798e671941",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
        "patch": "@@ -12,6 +12,7 @@ Before every minor and major release:\n * Update [bips.md](bips.md) to account for changes since the last release.\n * Update version in sources (see below)\n * Write release notes (see below)\n+* Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n \n Before every major release:\n "
      },
      {
        "sha": "a57ab632e4cfe4075c18e7404e8463b8937ccdd0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
        "patch": "@@ -96,6 +96,9 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n+\n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -191,6 +194,9 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -224,6 +230,7 @@ class CTestNetParams : public CChainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n \n+\n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n             ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n@@ -265,6 +272,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n \n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x00\");\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "20efc68ade8ec96c3d2e329b84a118e2d57bf457",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
        "patch": "@@ -61,6 +61,7 @@ struct Params {\n     int64_t nPowTargetSpacing;\n     int64_t nPowTargetTimespan;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n+    uint256 nMinimumChainWork;\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "6b33539a2efb2d7e2215eb951f83d1d72f0a3f26",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
        "patch": "@@ -1740,7 +1740,9 @@ bool IsInitialBlockDownload()\n         return false;\n     if (fImporting || fReindex)\n         return true;\n-    if (fCheckpointsEnabled && chainActive.Height() < Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints()))\n+    if (chainActive.Tip() == NULL)\n+        return true;\n+    if (chainActive.Tip()->nChainWork < UintToArith256(chainParams.GetConsensus().nMinimumChainWork))\n         return true;\n     bool state = (chainActive.Height() < pindexBestHeader->nHeight - 24 * 6 ||\n             std::max(chainActive.Tip()->GetBlockTime(), pindexBestHeader->GetBlockTime()) < GetTime() - nMaxTipAge);\n@@ -1774,7 +1776,7 @@ void CheckForkWarningConditions()\n {\n     AssertLockHeld(cs_main);\n     // Before we get past initial download, we cannot reliably alert about forks\n-    // (we assume we don't get stuck on a fork before the last checkpoint)\n+    // (we assume we don't get stuck on a fork before finishing our initial sync)\n     if (IsInitialBlockDownload())\n         return;\n "
      }
    ]
  },
  {
    "sha": "2082b5574cec783f4ff99941492d92e05680b293",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMDgyYjU1NzRjZWM3ODNmNGZmOTk5NDE0OTJkOTJlMDU2ODBiMjkz",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-11-02T01:49:45Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-11-02T01:49:45Z"
      },
      "message": "Remove GetTotalBlocksEstimate and checkpoint tests that test nothing.\n\nGetTotalBlocksEstimate is no longer used and it was the only thing\n the checkpoint tests were testing.\n\nSince checkpoints are on their way out it makes more sense to remove\n the test file than to cook up a new pointless test.",
      "tree": {
        "sha": "3b7d3bfdf341914649ab7a5a3fbe00749805fe41",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b7d3bfdf341914649ab7a5a3fbe00749805fe41"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2082b5574cec783f4ff99941492d92e05680b293",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2082b5574cec783f4ff99941492d92e05680b293",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2082b5574cec783f4ff99941492d92e05680b293",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2082b5574cec783f4ff99941492d92e05680b293/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fd46136dfaf68a7046cf7b8693824d73ac6b1caf"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 0,
      "deletions": 41
    },
    "files": [
      {
        "sha": "4e4cca14caf034fee4ed24b1a5e68b67e6ad308b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2082b5574cec783f4ff99941492d92e05680b293/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2082b5574cec783f4ff99941492d92e05680b293/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=2082b5574cec783f4ff99941492d92e05680b293",
        "patch": "@@ -50,7 +50,6 @@ BITCOIN_TESTS =\\\n   test/bip32_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\\n-  test/Checkpoints_tests.cpp \\\n   test/coins_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\"
      },
      {
        "sha": "d22c188c16e00bd5579301b4a1807bf3a74502b5",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2082b5574cec783f4ff99941492d92e05680b293/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2082b5574cec783f4ff99941492d92e05680b293/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=2082b5574cec783f4ff99941492d92e05680b293",
        "patch": "@@ -55,16 +55,6 @@ namespace Checkpoints {\n         return fWorkBefore / (fWorkBefore + fWorkAfter);\n     }\n \n-    int GetTotalBlocksEstimate(const CCheckpointData& data)\n-    {\n-        const MapCheckpoints& checkpoints = data.mapCheckpoints;\n-\n-        if (checkpoints.empty())\n-            return 0;\n-\n-        return checkpoints.rbegin()->first;\n-    }\n-\n     CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;"
      },
      {
        "sha": "04346f35ffa7c4c261cba174300e3f594d303a27",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2082b5574cec783f4ff99941492d92e05680b293/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2082b5574cec783f4ff99941492d92e05680b293/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=2082b5574cec783f4ff99941492d92e05680b293",
        "patch": "@@ -19,9 +19,6 @@ struct CCheckpointData;\n namespace Checkpoints\n {\n \n-//! Return conservative estimate of total number of blocks, 0 if unknown\n-int GetTotalBlocksEstimate(const CCheckpointData& data);\n-\n //! Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n "
      },
      {
        "sha": "1b7d368e13ec0d02dd98621ca7206dc774534c8e",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd46136dfaf68a7046cf7b8693824d73ac6b1caf/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=fd46136dfaf68a7046cf7b8693824d73ac6b1caf",
        "patch": "@@ -1,27 +0,0 @@\n-// Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Unit tests for block-chain checkpoints\n-//\n-\n-#include \"checkpoints.h\"\n-\n-#include \"uint256.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"chainparams.h\"\n-\n-#include <boost/test/unit_test.hpp>\n-\n-using namespace std;\n-\n-BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n-\n-BOOST_AUTO_TEST_CASE(sanity)\n-{\n-    const CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n-    BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "e141beb6a9816b7e1e680fb0a8bae16d42a3e557",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTQxYmViNmE5ODE2YjdlMWU2ODBmYjBhOGJhZTE2ZDQyYTNlNTU3",
    "commit": {
      "author": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-11-01T00:37:54Z"
      },
      "committer": {
        "name": "Gregory Maxwell",
        "email": "greg@xiph.org",
        "date": "2016-11-02T01:51:53Z"
      },
      "message": "IsInitialBlockDownload no longer uses header-only timestamps.\n\nThis avoids a corner case (mostly visible on testnet) where bogus\n headers can keep nodes in IsInitialBlockDownload.",
      "tree": {
        "sha": "f6ebeb16354d6c73114b6705d37363d3002c37e9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6ebeb16354d6c73114b6705d37363d3002c37e9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e141beb6a9816b7e1e680fb0a8bae16d42a3e557",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141beb6a9816b7e1e680fb0a8bae16d42a3e557",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e141beb6a9816b7e1e680fb0a8bae16d42a3e557",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141beb6a9816b7e1e680fb0a8bae16d42a3e557/comments",
    "author": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gmaxwell",
      "id": 858454,
      "node_id": "MDQ6VXNlcjg1ODQ1NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/858454?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gmaxwell",
      "html_url": "https://github.com/gmaxwell",
      "followers_url": "https://api.github.com/users/gmaxwell/followers",
      "following_url": "https://api.github.com/users/gmaxwell/following{/other_user}",
      "gists_url": "https://api.github.com/users/gmaxwell/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gmaxwell/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gmaxwell/subscriptions",
      "organizations_url": "https://api.github.com/users/gmaxwell/orgs",
      "repos_url": "https://api.github.com/users/gmaxwell/repos",
      "events_url": "https://api.github.com/users/gmaxwell/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gmaxwell/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2082b5574cec783f4ff99941492d92e05680b293",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2082b5574cec783f4ff99941492d92e05680b293",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2082b5574cec783f4ff99941492d92e05680b293"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "46320604effb0e28caed1a7c72e1e6fc9e738f17",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e141beb6a9816b7e1e680fb0a8bae16d42a3e557/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e141beb6a9816b7e1e680fb0a8bae16d42a3e557/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e141beb6a9816b7e1e680fb0a8bae16d42a3e557",
        "patch": "@@ -1744,11 +1744,10 @@ bool IsInitialBlockDownload()\n         return true;\n     if (chainActive.Tip()->nChainWork < UintToArith256(chainParams.GetConsensus().nMinimumChainWork))\n         return true;\n-    bool state = (chainActive.Height() < pindexBestHeader->nHeight - 24 * 6 ||\n-            std::max(chainActive.Tip()->GetBlockTime(), pindexBestHeader->GetBlockTime()) < GetTime() - nMaxTipAge);\n-    if (!state)\n-        latchToFalse.store(true, std::memory_order_relaxed);\n-    return state;\n+    if (chainActive.Tip()->GetBlockTime() < (GetTime() - nMaxTipAge))\n+        return true;\n+    latchToFalse.store(true, std::memory_order_relaxed);\n+    return false;\n }\n \n bool fLargeWorkForkFound = false;"
      }
    ]
  },
  {
    "sha": "101c642bef7f590726efae3fb837711bdacacf1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDFjNjQyYmVmN2Y1OTA3MjZlZmFlM2ZiODM3NzExYmRhY2FjZjFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T10:12:48Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T10:12:58Z"
      },
      "message": "Merge #8448: Store mempool and prioritization data to disk\n\n582068a Add mempool.dat to doc/files.md (Pieter Wuille)\n3f78562 Add DumpMempool and LoadMempool (Pieter Wuille)\nced7c94 Add AcceptToMemoryPoolWithTime function (Pieter Wuille)\nc3efb58 Add feedelta to TxMempoolInfo (Pieter Wuille)",
      "tree": {
        "sha": "35306561e267c685f36f4f3a826d4cd8ffd32653",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/35306561e267c685f36f4f3a826d4cd8ffd32653"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/101c642bef7f590726efae3fb837711bdacacf1d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGbwqAAoJEHSBCwEjRsmm6mEIAI7Hy5fVzKqpLsl9UvJ71VZd\nMdV091ofLur72WR07w6497V90XMWZlFoGA8wRaYnQvyYXLRSHcKNvYy3cWDJe3mu\no8iNgnM6Mb9lBS6JhQiT2KbNH2Dwe8JAzVbx3coJ6OtIO4rFiecwOgNOHI/pG3Uo\n/5RG24rMCp/wUFRRdVtKj3q8UmsKtMyHKjiYYe5eFqs9YsCpl089pi6Zoj/Jm0c4\nV2M+0MV4ISEgeDHz9A5Hnm7E+eSo+5CGf60dw9FEXMLBXlRLmp3II3+aijVCgSVC\nZaskKYT5sLWbI7+ynn2sPzPXLj5ayTKnNQ7gwyBcfMam4eGUmRdGMyMpq06HLVQ=\n=iMMf\n-----END PGP SIGNATURE-----",
        "payload": "tree 35306561e267c685f36f4f3a826d4cd8ffd32653\nparent 273bde37d867d1f6ab67e22a65097b7adfc4831a\nparent 582068aa907127c12db53fbd65667dc7810d42b0\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478081568 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478081578 +0100\n\nMerge #8448: Store mempool and prioritization data to disk\n\n582068a Add mempool.dat to doc/files.md (Pieter Wuille)\n3f78562 Add DumpMempool and LoadMempool (Pieter Wuille)\nced7c94 Add AcceptToMemoryPoolWithTime function (Pieter Wuille)\nc3efb58 Add feedelta to TxMempoolInfo (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/101c642bef7f590726efae3fb837711bdacacf1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/101c642bef7f590726efae3fb837711bdacacf1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/101c642bef7f590726efae3fb837711bdacacf1d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "273bde37d867d1f6ab67e22a65097b7adfc4831a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/273bde37d867d1f6ab67e22a65097b7adfc4831a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/273bde37d867d1f6ab67e22a65097b7adfc4831a"
      },
      {
        "sha": "582068aa907127c12db53fbd65667dc7810d42b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/582068aa907127c12db53fbd65667dc7810d42b0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/582068aa907127c12db53fbd65667dc7810d42b0"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 147,
      "deletions": 7
    },
    "files": [
      {
        "sha": "928977143be3b3e470593884b63d4e086bcb315d",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/101c642bef7f590726efae3fb837711bdacacf1d/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/101c642bef7f590726efae3fb837711bdacacf1d/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=101c642bef7f590726efae3fb837711bdacacf1d",
        "patch": "@@ -10,6 +10,7 @@\n * db.log: wallet database log file\n * debug.log: contains debug information and general logging generated by bitcoind or bitcoin-qt\n * fee_estimates.dat: stores statistics used to estimate minimum transaction fees and priorities required for confirmation; since 0.10.0\n+* mempool.dat: dump of the mempool's transactions; since 0.14.0.\n * peers.dat: peer IP address database (custom format); since 0.7.0\n * wallet.dat: personal wallet (BDB) with keys and transactions\n * .cookie: session RPC authentication cookie (written at start when cookie authentication is used, deleted on shutdown): since 0.12.0"
      },
      {
        "sha": "efaf821f4feb5df164626186120d021aed673d41",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/101c642bef7f590726efae3fb837711bdacacf1d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/101c642bef7f590726efae3fb837711bdacacf1d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=101c642bef7f590726efae3fb837711bdacacf1d",
        "patch": "@@ -207,6 +207,7 @@ void Shutdown()\n \n     StopTorControl();\n     UnregisterNodeSignals(GetNodeSignals());\n+    DumpMempool();\n \n     if (fFeeEstimatesInitialized)\n     {\n@@ -659,6 +660,8 @@ void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n         LogPrintf(\"Stopping after block import\\n\");\n         StartShutdown();\n     }\n+\n+    LoadMempool();\n }\n \n /** Sanity checks"
      },
      {
        "sha": "11abc0d175879d528cc03ab484318461ad0cf81f",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 124,
        "deletions": 5,
        "changes": 129,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/101c642bef7f590726efae3fb837711bdacacf1d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/101c642bef7f590726efae3fb837711bdacacf1d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=101c642bef7f590726efae3fb837711bdacacf1d",
        "patch": "@@ -1135,7 +1135,7 @@ std::string FormatStateMessage(const CValidationState &state)\n }\n \n bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const CTransaction& tx, bool fLimitFree,\n-                              bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n+                              bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount& nAbsurdFee,\n                               std::vector<uint256>& vHashTxnToUncache)\n {\n     const uint256 hash = tx.GetHash();\n@@ -1308,7 +1308,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n             }\n         }\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n+        CTxMemPoolEntry entry(tx, nFees, nAcceptTime, dPriority, chainActive.Height(), pool.HasNoInputsOf(tx), inChainInputValue, fSpendsCoinbase, nSigOpsCost, lp);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Check that the transaction doesn't have an excessive number of\n@@ -1572,18 +1572,24 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     return true;\n }\n \n-bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n-                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n {\n     std::vector<uint256> vHashTxToUncache;\n-    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n+    bool res = AcceptToMemoryPoolWorker(pool, state, tx, fLimitFree, pfMissingInputs, nAcceptTime, fOverrideMempoolLimit, nAbsurdFee, vHashTxToUncache);\n     if (!res) {\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n     return res;\n }\n \n+bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, bool fOverrideMempoolLimit, const CAmount nAbsurdFee)\n+{\n+    return AcceptToMemoryPoolWithTime(pool, state, tx, fLimitFree, pfMissingInputs, GetTime(), fOverrideMempoolLimit, nAbsurdFee);\n+}\n+\n /** Return transaction in txOut, and if it was found inside a block, its hash is placed in hashBlock */\n bool GetTransaction(const uint256 &hash, CTransaction &txOut, const Consensus::Params& consensusParams, uint256 &hashBlock, bool fAllowSlow)\n {\n@@ -6929,6 +6935,119 @@ int VersionBitsTipStateSinceHeight(const Consensus::Params& params, Consensus::D\n     return VersionBitsStateSinceHeight(chainActive.Tip(), params, pos, versionbitscache);\n }\n \n+static const uint64_t MEMPOOL_DUMP_VERSION = 1;\n+\n+bool LoadMempool(void)\n+{\n+    int64_t nExpiryTimeout = GetArg(\"-mempoolexpiry\", DEFAULT_MEMPOOL_EXPIRY) * 60 * 60;\n+    FILE* filestr = fopen((GetDataDir() / \"mempool.dat\").string().c_str(), \"r\");\n+    CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+    if (file.IsNull()) {\n+        LogPrintf(\"Failed to open mempool file from disk. Continuing anyway.\\n\");\n+        return false;\n+    }\n+\n+    int64_t count = 0;\n+    int64_t skipped = 0;\n+    int64_t failed = 0;\n+    int64_t nNow = GetTime();\n+\n+    try {\n+        uint64_t version;\n+        file >> version;\n+        if (version != MEMPOOL_DUMP_VERSION) {\n+            return false;\n+        }\n+        uint64_t num;\n+        file >> num;\n+        double prioritydummy = 0;\n+        while (num--) {\n+            CTransaction tx;\n+            int64_t nTime;\n+            int64_t nFeeDelta;\n+            file >> tx;\n+            file >> nTime;\n+            file >> nFeeDelta;\n+\n+            CAmount amountdelta = nFeeDelta;\n+            if (amountdelta) {\n+                mempool.PrioritiseTransaction(tx.GetHash(), tx.GetHash().ToString(), prioritydummy, amountdelta);\n+            }\n+            CValidationState state;\n+            if (nTime + nExpiryTimeout > nNow) {\n+                LOCK(cs_main);\n+                AcceptToMemoryPoolWithTime(mempool, state, tx, true, NULL, nTime);\n+                if (state.IsValid()) {\n+                    ++count;\n+                } else {\n+                    ++failed;\n+                }\n+            } else {\n+                ++skipped;\n+            }\n+        }\n+        std::map<uint256, CAmount> mapDeltas;\n+        file >> mapDeltas;\n+\n+        for (const auto& i : mapDeltas) {\n+            mempool.PrioritiseTransaction(i.first, i.first.ToString(), prioritydummy, i.second);\n+        }\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"Failed to deserialize mempool data on disk: %s. Continuing anyway.\\n\", e.what());\n+        return false;\n+    }\n+\n+    LogPrintf(\"Imported mempool transactions from disk: %i successes, %i failed, %i expired\\n\", count, failed, skipped);\n+    return true;\n+}\n+\n+void DumpMempool(void)\n+{\n+    int64_t start = GetTimeMicros();\n+\n+    std::map<uint256, CAmount> mapDeltas;\n+    std::vector<TxMempoolInfo> vinfo;\n+\n+    {\n+        LOCK(mempool.cs);\n+        for (const auto &i : mempool.mapDeltas) {\n+            mapDeltas[i.first] = i.second.first;\n+        }\n+        vinfo = mempool.infoAll();\n+    }\n+\n+    int64_t mid = GetTimeMicros();\n+\n+    try {\n+        FILE* filestr = fopen((GetDataDir() / \"mempool.dat.new\").string().c_str(), \"w\");\n+        if (!filestr) {\n+            return;\n+        }\n+\n+        CAutoFile file(filestr, SER_DISK, CLIENT_VERSION);\n+\n+        uint64_t version = MEMPOOL_DUMP_VERSION;\n+        file << version;\n+\n+        file << (uint64_t)vinfo.size();\n+        for (const auto& i : vinfo) {\n+            file << *(i.tx);\n+            file << (int64_t)i.nTime;\n+            file << (int64_t)i.nFeeDelta;\n+            mapDeltas.erase(i.tx->GetHash());\n+        }\n+\n+        file << mapDeltas;\n+        FileCommit(file.Get());\n+        file.fclose();\n+        RenameOver(GetDataDir() / \"mempool.dat.new\", GetDataDir() / \"mempool.dat\");\n+        int64_t last = GetTimeMicros();\n+        LogPrintf(\"Dumped mempool: %gs to copy, %gs to dump\\n\", (mid-start)*0.000001, (last-mid)*0.000001);\n+    } catch (const std::exception& e) {\n+        LogPrintf(\"Failed to dump mempool: %s. Continuing anyway.\\n\", e.what());\n+    }\n+}\n+\n class CMainCleanup\n {\n public:"
      },
      {
        "sha": "4c6af9514206c89af50d19bb590afa2ba21f6009",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/101c642bef7f590726efae3fb837711bdacacf1d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/101c642bef7f590726efae3fb837711bdacacf1d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=101c642bef7f590726efae3fb837711bdacacf1d",
        "patch": "@@ -291,6 +291,10 @@ void PruneAndFlush();\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n \n+/** (try to) add transaction to memory pool with a specified acceptance time **/\n+bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n+                        bool* pfMissingInputs, int64_t nAcceptTime, bool fOverrideMempoolLimit=false, const CAmount nAbsurdFee=0);\n+\n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n \n@@ -529,6 +533,12 @@ static const unsigned int REJECT_ALREADY_KNOWN = 0x101;\n /** Transaction conflicts with a transaction already known */\n static const unsigned int REJECT_CONFLICT = 0x102;\n \n+/** Dump the mempool to disk. */\n+void DumpMempool();\n+\n+/** Load the mempool from disk. */\n+bool LoadMempool();\n+\n // The following things handle network-processing logic\n // (and should be moved to a separate file)\n "
      },
      {
        "sha": "313d33507f32914bbfa2e89866b97414e6f7c9ec",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/101c642bef7f590726efae3fb837711bdacacf1d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/101c642bef7f590726efae3fb837711bdacacf1d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=101c642bef7f590726efae3fb837711bdacacf1d",
        "patch": "@@ -833,6 +833,10 @@ void CTxMemPool::queryHashes(vector<uint256>& vtxid)\n     }\n }\n \n+static TxMempoolInfo GetInfo(CTxMemPool::indexed_transaction_set::const_iterator it) {\n+    return TxMempoolInfo{it->GetSharedTx(), it->GetTime(), CFeeRate(it->GetFee(), it->GetTxSize()), it->GetModifiedFee() - it->GetFee()};\n+}\n+\n std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n {\n     LOCK(cs);\n@@ -841,7 +845,7 @@ std::vector<TxMempoolInfo> CTxMemPool::infoAll() const\n     std::vector<TxMempoolInfo> ret;\n     ret.reserve(mapTx.size());\n     for (auto it : iters) {\n-        ret.push_back(TxMempoolInfo{it->GetSharedTx(), it->GetTime(), CFeeRate(it->GetFee(), it->GetTxSize())});\n+        ret.push_back(GetInfo(it));\n     }\n \n     return ret;\n@@ -862,7 +866,7 @@ TxMempoolInfo CTxMemPool::info(const uint256& hash) const\n     indexed_transaction_set::const_iterator i = mapTx.find(hash);\n     if (i == mapTx.end())\n         return TxMempoolInfo();\n-    return TxMempoolInfo{i->GetSharedTx(), i->GetTime(), CFeeRate(i->GetFee(), i->GetTxSize())};\n+    return GetInfo(i);\n }\n \n CFeeRate CTxMemPool::estimateFee(int nBlocks) const"
      },
      {
        "sha": "9b0ca4655ec3fa557540abdbe2fdb9414892ee33",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/101c642bef7f590726efae3fb837711bdacacf1d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/101c642bef7f590726efae3fb837711bdacacf1d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=101c642bef7f590726efae3fb837711bdacacf1d",
        "patch": "@@ -329,6 +329,9 @@ struct TxMempoolInfo\n \n     /** Feerate of the transaction. */\n     CFeeRate feeRate;\n+\n+    /** The fee delta. */\n+    int64_t nFeeDelta;\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YThiZTdiYTk5OWFkNmE5NDhiOWE3YzVkMmY2MTRiOTE5ZmI2Yjhl",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T10:15:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T10:15:36Z"
      },
      "message": "Merge #9032: test: Add format-dependent comparison to bctest\n\n6c5cd9d test: Add format-dependent comparison to bctest (Wladimir J. van der Laan)",
      "tree": {
        "sha": "36f86e6b7ec07369ebd7de3fbdd597de7ae439b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/36f86e6b7ec07369ebd7de3fbdd597de7ae439b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGbzIAAoJEHSBCwEjRsmmJl4H/3HntLLTdtuHKImWlnoZwWvE\nBZtmRNmkg600w62HIYkdlRfCOmxm+1M4MOhFvpYGM+SlUHNTnBqiNJrZ6Vlsoi0o\nVj5Igvsy6pSI30SwhaDpNnNwfUOShyY4e7jENqQ1DTTKm9XQgI8C+7L0YYWej6Pb\n/cbF2w7Qc11yyvnSyUE+SA5pU3l+fJAZUpiIPaI4t18kLa8w0IHfy/8pgr7I9bss\nz0UXyLjf73mgHei058yBh2mjKDqubg/VPjrAk7+7OZHF171fliAgY9BZ9hJxkh2b\nPSvT/Qmhr7mt4WAbKOcOqvGVV55H/RVOxarARUQawzX8Y3/c1ZUQxbg63gN0Uck=\n=7zPy\n-----END PGP SIGNATURE-----",
        "payload": "tree 36f86e6b7ec07369ebd7de3fbdd597de7ae439b9\nparent 101c642bef7f590726efae3fb837711bdacacf1d\nparent 6c5cd9d022347abed8b61ca4ae4dc101461582fe\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478081732 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478081736 +0100\n\nMerge #9032: test: Add format-dependent comparison to bctest\n\n6c5cd9d test: Add format-dependent comparison to bctest (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "101c642bef7f590726efae3fb837711bdacacf1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/101c642bef7f590726efae3fb837711bdacacf1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/101c642bef7f590726efae3fb837711bdacacf1d"
      },
      {
        "sha": "6c5cd9d022347abed8b61ca4ae4dc101461582fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6c5cd9d022347abed8b61ca4ae4dc101461582fe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6c5cd9d022347abed8b61ca4ae4dc101461582fe"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 27,
      "deletions": 3
    },
    "files": [
      {
        "sha": "eab4fb734a2d4913fa88af8f0185a011de2b0bf1",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 27,
        "deletions": 3,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
        "patch": "@@ -6,6 +6,15 @@\n import os\n import json\n import sys\n+import binascii\n+\n+def parse_output(a, fmt):\n+\tif fmt == 'json': # json: compare parsed data\n+\t\treturn json.loads(a)\n+\telif fmt == 'hex': # hex: parse and compare binary data\n+\t\treturn binascii.a2b_hex(a.strip())\n+\telse:\n+\t\traise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n \n def bctest(testDir, testObj, exeext):\n \n@@ -23,6 +32,7 @@ def bctest(testDir, testObj, exeext):\n \toutputData = None\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n+\t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n \t\toutputData = open(testDir + \"/\" + outputFn).read()\n \t\tif not outputData:\n \t\t\tprint(\"Output data missing for \" + outputFn)\n@@ -34,9 +44,23 @@ def bctest(testDir, testObj, exeext):\n \t\tprint(\"OSError, Failed to execute \" + execprog)\n \t\tsys.exit(1)\n \n-\tif outputData and (outs[0] != outputData):\n-\t\tprint(\"Output data mismatch for \" + outputFn)\n-\t\tsys.exit(1)\n+\tif outputData:\n+\t\ttry:\n+\t\t\ta_parsed = parse_output(outs[0], outputType)\n+\t\texcept Exception as e:\n+\t\t\tprint('Error parsing command output as %s: %s' % (outputType,e))\n+\t\t\tsys.exit(1)\n+\t\ttry:\n+\t\t\tb_parsed = parse_output(outputData, outputType)\n+\t\texcept Exception as e:\n+\t\t\tprint('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+\t\t\tsys.exit(1)\n+\t\tif a_parsed != b_parsed:\n+\t\t\tprint(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\tsys.exit(1)\n+\t\tif outs[0] != outputData:\n+\t\t\tprint(\"Output formatting mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\tsys.exit(1)\n \n \twantRC = 0\n \tif \"return_code\" in testObj:"
      }
    ]
  },
  {
    "sha": "f8723d231812045b8ccd205eac71deeab43a168b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODcyM2QyMzE4MTIwNDViOGNjZDIwNWVhYzcxZGVlYWI0M2ExNjhi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T10:16:19Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T10:16:29Z"
      },
      "message": "Merge #8753: Locked memory manager\n\n444c673 bench: Add benchmark for lockedpool allocation/deallocation (Wladimir J. van der Laan)\n6567999 rpc: Add `getmemoryinfo` call (Wladimir J. van der Laan)\n4536148 support: Add LockedPool (Wladimir J. van der Laan)\nf4d1fc2 wallet: Get rid of LockObject and UnlockObject calls in key.h (Wladimir J. van der Laan)\n999e4c9 wallet: Change CCrypter to use vectors with secure allocator (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e69d7e4a7b9c3da52bffdce1b9ba9879e4038468",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e69d7e4a7b9c3da52bffdce1b9ba9879e4038468"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8723d231812045b8ccd205eac71deeab43a168b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGbz9AAoJEHSBCwEjRsmm2R4H/RMDxinkC7U84YkcpKmG4kNt\nPPWsyNDm5eaGiZmwzaVHijv6efFsC4NaSehM6iEwW33IU0PqOViFHGSXwJtZzZM7\nJ8BItYAy0o/bL53+us9X39UYgRo49/lJzAHfhk3grO4YOAF9LxFxZbayxi5t81i5\nERfiPSRNVKw8B+eFqqDa1TrzUmWbiMHSP+eMO9N1/8nyzedbVnZUgZH2NpGY3JH3\nXKIuZEIdBPnfNsPM3O3W827ZDpamh4c4/8ARQLXl7zqkQBFeB4aMv0gnwmjF+5Ob\nv8SNzjpLYztaijj+zcZnUfwuOb2LRmjkbF6eIzGZ3fRsykNGjjanTJZjX1NuBIE=\n=tOfG\n-----END PGP SIGNATURE-----",
        "payload": "tree e69d7e4a7b9c3da52bffdce1b9ba9879e4038468\nparent 6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e\nparent 444c673d85ba0787b2c2ff1ab0f3814ce02622a5\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478081779 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478081789 +0100\n\nMerge #8753: Locked memory manager\n\n444c673 bench: Add benchmark for lockedpool allocation/deallocation (Wladimir J. van der Laan)\n6567999 rpc: Add `getmemoryinfo` call (Wladimir J. van der Laan)\n4536148 support: Add LockedPool (Wladimir J. van der Laan)\nf4d1fc2 wallet: Get rid of LockObject and UnlockObject calls in key.h (Wladimir J. van der Laan)\n999e4c9 wallet: Change CCrypter to use vectors with secure allocator (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8723d231812045b8ccd205eac71deeab43a168b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8723d231812045b8ccd205eac71deeab43a168b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8723d231812045b8ccd205eac71deeab43a168b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e"
      },
      {
        "sha": "444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/444c673d85ba0787b2c2ff1ab0f3814ce02622a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/444c673d85ba0787b2c2ff1ab0f3814ce02622a5"
      }
    ],
    "stats": {
      "total": 1376,
      "additions": 966,
      "deletions": 410
    },
    "files": [
      {
        "sha": "5a5e3abcfa646915942f5d75091da3783f0821de",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -132,7 +132,7 @@ BITCOIN_CORE_H = \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n   support/cleanse.h \\\n-  support/pagelocker.h \\\n+  support/lockedpool.h \\\n   sync.h \\\n   threadsafety.h \\\n   timedata.h \\\n@@ -310,7 +310,7 @@ libbitcoin_common_a_SOURCES = \\\n libbitcoin_util_a_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n libbitcoin_util_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_util_a_SOURCES = \\\n-  support/pagelocker.cpp \\\n+  support/lockedpool.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n   compat/glibc_sanity.cpp \\"
      },
      {
        "sha": "9760ad089c93cb433926a1e53e7d7f8abbcd723a",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -17,7 +17,8 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/ccoins_caching.cpp \\\n   bench/mempool_eviction.cpp \\\n   bench/verify_script.cpp \\\n-  bench/base58.cpp\n+  bench/base58.cpp \\\n+  bench/lockedpool.cpp\n \n bench_bench_bitcoin_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(EVENT_CLFAGS) $(EVENT_PTHREADS_CFLAGS) -I$(builddir)/bench/\n bench_bench_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)"
      },
      {
        "sha": "5df5b1ac6e640a795306101cdd7df0097b51186e",
        "filename": "src/bench/lockedpool.cpp",
        "status": "added",
        "additions": 47,
        "deletions": 0,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/bench/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/bench/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/lockedpool.cpp?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -0,0 +1,47 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bench.h\"\n+\n+#include \"support/lockedpool.h\"\n+\n+#include <iostream>\n+#include <vector>\n+\n+#define ASIZE 2048\n+#define BITER 5000\n+#define MSIZE 2048\n+\n+static void LockedPool(benchmark::State& state)\n+{\n+    void *synth_base = reinterpret_cast<void*>(0x08000000);\n+    const size_t synth_size = 1024*1024;\n+    Arena b(synth_base, synth_size, 16);\n+\n+    std::vector<void*> addr;\n+    for (int x=0; x<ASIZE; ++x)\n+        addr.push_back(0);\n+    uint32_t s = 0x12345678;\n+    while (state.KeepRunning()) {\n+        for (int x=0; x<BITER; ++x) {\n+            int idx = s & (addr.size()-1);\n+            if (s & 0x80000000) {\n+                b.free(addr[idx]);\n+                addr[idx] = 0;\n+            } else if(!addr[idx]) {\n+                addr[idx] = b.alloc((s >> 16) & (MSIZE-1));\n+            }\n+            bool lsb = s & 1;\n+            s >>= 1;\n+            if (lsb)\n+                s ^= 0xf00f00f0; // LFSR period 0xf7ffffe0\n+        }\n+    }\n+    for (void *ptr: addr)\n+        b.free(ptr);\n+    addr.clear();\n+}\n+\n+BENCHMARK(LockedPool);\n+"
      },
      {
        "sha": "b3ea98fb92e6dfad91f148a5c5ec5095713d26ca",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 20,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -125,8 +125,8 @@ bool CKey::Check(const unsigned char *vch) {\n \n void CKey::MakeNewKey(bool fCompressedIn) {\n     do {\n-        GetStrongRandBytes(vch, sizeof(vch));\n-    } while (!Check(vch));\n+        GetStrongRandBytes(keydata.data(), keydata.size());\n+    } while (!Check(keydata.data()));\n     fValid = true;\n     fCompressed = fCompressedIn;\n }\n@@ -224,20 +224,18 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert(IsCompressed());\n-    unsigned char out[64];\n-    LockObject(out);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n     if ((nChild >> 31) == 0) {\n         CPubKey pubkey = GetPubKey();\n         assert(pubkey.begin() + 33 == pubkey.end());\n-        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, out);\n+        BIP32Hash(cc, nChild, *pubkey.begin(), pubkey.begin()+1, vout.data());\n     } else {\n         assert(begin() + 32 == end());\n-        BIP32Hash(cc, nChild, 0, begin(), out);\n+        BIP32Hash(cc, nChild, 0, begin(), vout.data());\n     }\n-    memcpy(ccChild.begin(), out+32, 32);\n+    memcpy(ccChild.begin(), vout.data()+32, 32);\n     memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n-    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), out);\n-    UnlockObject(out);\n+    bool ret = secp256k1_ec_privkey_tweak_add(secp256k1_context_sign, (unsigned char*)keyChild.begin(), vout.data());\n     keyChild.fCompressed = true;\n     keyChild.fValid = ret;\n     return ret;\n@@ -253,12 +251,10 @@ bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n \n void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n     static const unsigned char hashkey[] = {'B','i','t','c','o','i','n',' ','s','e','e','d'};\n-    unsigned char out[64];\n-    LockObject(out);\n-    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(out);\n-    key.Set(&out[0], &out[32], true);\n-    memcpy(chaincode.begin(), &out[32], 32);\n-    UnlockObject(out);\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vout(64);\n+    CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(vout.data());\n+    key.Set(&vout[0], &vout[32], true);\n+    memcpy(chaincode.begin(), &vout[32], 32);\n     nDepth = 0;\n     nChild = 0;\n     memset(vchFingerprint, 0, sizeof(vchFingerprint));\n@@ -308,12 +304,10 @@ void ECC_Start() {\n \n     {\n         // Pass in a random blinding seed to the secp256k1 context.\n-        unsigned char seed[32];\n-        LockObject(seed);\n-        GetRandBytes(seed, 32);\n-        bool ret = secp256k1_context_randomize(ctx, seed);\n+        std::vector<unsigned char, secure_allocator<unsigned char>> vseed(32);\n+        GetRandBytes(vseed.data(), 32);\n+        bool ret = secp256k1_context_randomize(ctx, vseed.data());\n         assert(ret);\n-        UnlockObject(seed);\n     }\n \n     secp256k1_context_sign = ctx;"
      },
      {
        "sha": "48a07d62c9ccd170f1d0be81fd1c8bf4cd320a28",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 9,
        "deletions": 18,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -43,9 +43,7 @@ class CKey\n     bool fCompressed;\n \n     //! The actual byte data\n-    unsigned char vch[32];\n-\n-    static_assert(sizeof(vch) == 32, \"vch must be 32 bytes in length to not break serialization\");\n+    std::vector<unsigned char, secure_allocator<unsigned char> > keydata;\n \n     //! Check whether the 32-byte array pointed to be vch is valid keydata.\n     bool static Check(const unsigned char* vch);\n@@ -54,37 +52,30 @@ class CKey\n     //! Construct an invalid private key.\n     CKey() : fValid(false), fCompressed(false)\n     {\n-        LockObject(vch);\n-    }\n-\n-    //! Copy constructor. This is necessary because of memlocking.\n-    CKey(const CKey& secret) : fValid(secret.fValid), fCompressed(secret.fCompressed)\n-    {\n-        LockObject(vch);\n-        memcpy(vch, secret.vch, sizeof(vch));\n+        // Important: vch must be 32 bytes in length to not break serialization\n+        keydata.resize(32);\n     }\n \n     //! Destructor (again necessary because of memlocking).\n     ~CKey()\n     {\n-        UnlockObject(vch);\n     }\n \n     friend bool operator==(const CKey& a, const CKey& b)\n     {\n         return a.fCompressed == b.fCompressed &&\n             a.size() == b.size() &&\n-            memcmp(&a.vch[0], &b.vch[0], a.size()) == 0;\n+            memcmp(a.keydata.data(), b.keydata.data(), a.size()) == 0;\n     }\n \n     //! Initialize using begin and end iterators to byte data.\n     template <typename T>\n     void Set(const T pbegin, const T pend, bool fCompressedIn)\n     {\n-        if (pend - pbegin != sizeof(vch)) {\n+        if (size_t(pend - pbegin) != keydata.size()) {\n             fValid = false;\n         } else if (Check(&pbegin[0])) {\n-            memcpy(vch, (unsigned char*)&pbegin[0], sizeof(vch));\n+            memcpy(keydata.data(), (unsigned char*)&pbegin[0], keydata.size());\n             fValid = true;\n             fCompressed = fCompressedIn;\n         } else {\n@@ -93,9 +84,9 @@ class CKey\n     }\n \n     //! Simple read-only vector-like interface.\n-    unsigned int size() const { return (fValid ? sizeof(vch) : 0); }\n-    const unsigned char* begin() const { return vch; }\n-    const unsigned char* end() const { return vch + size(); }\n+    unsigned int size() const { return (fValid ? keydata.size() : 0); }\n+    const unsigned char* begin() const { return keydata.data(); }\n+    const unsigned char* end() const { return keydata.data() + size(); }\n \n     //! Check whether this private key is valid.\n     bool IsValid() const { return fValid; }"
      },
      {
        "sha": "31939858038fc77570dfd1d1dc41171a6356e502",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -450,10 +450,53 @@ UniValue setmocktime(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n+static UniValue RPCLockedMemoryInfo()\n+{\n+    LockedPool::Stats stats = LockedPoolManager::Instance().stats();\n+    UniValue obj(UniValue::VOBJ);\n+    obj.push_back(Pair(\"used\", uint64_t(stats.used)));\n+    obj.push_back(Pair(\"free\", uint64_t(stats.free)));\n+    obj.push_back(Pair(\"total\", uint64_t(stats.total)));\n+    obj.push_back(Pair(\"locked\", uint64_t(stats.locked)));\n+    obj.push_back(Pair(\"chunks_used\", uint64_t(stats.chunks_used)));\n+    obj.push_back(Pair(\"chunks_free\", uint64_t(stats.chunks_free)));\n+    return obj;\n+}\n+\n+UniValue getmemoryinfo(const JSONRPCRequest& request)\n+{\n+    /* Please, avoid using the word \"pool\" here in the RPC interface or help,\n+     * as users will undoubtedly confuse it with the other \"memory pool\"\n+     */\n+    if (request.fHelp || request.params.size() != 0)\n+        throw runtime_error(\n+            \"getmemoryinfo\\n\"\n+            \"Returns an object containing information about memory usage.\\n\"\n+            \"\\nResult:\\n\"\n+            \"{\\n\"\n+            \"  \\\"locked\\\": {               (json object) Information about locked memory manager\\n\"\n+            \"    \\\"used\\\": xxxxx,          (numeric) Number of bytes used\\n\"\n+            \"    \\\"free\\\": xxxxx,          (numeric) Number of bytes available in current arenas\\n\"\n+            \"    \\\"total\\\": xxxxxxx,       (numeric) Total number of bytes managed\\n\"\n+            \"    \\\"locked\\\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\\n\"\n+            \"    \\\"chunks_used\\\": xxxxx,   (numeric) Number allocated chunks\\n\"\n+            \"    \\\"chunks_free\\\": xxxxx,   (numeric) Number unused chunks\\n\"\n+            \"  }\\n\"\n+            \"}\\n\"\n+            \"\\nExamples:\\n\"\n+            + HelpExampleCli(\"getmemoryinfo\", \"\")\n+            + HelpExampleRpc(\"getmemoryinfo\", \"\")\n+        );\n+    UniValue obj(UniValue::VOBJ);\n+    obj.push_back(Pair(\"locked\", RPCLockedMemoryInfo()));\n+    return obj;\n+}\n+\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n     { \"control\",            \"getinfo\",                &getinfo,                true  }, /* uses wallet if enabled */\n+    { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true  },\n     { \"util\",               \"validateaddress\",        &validateaddress,        true  }, /* uses wallet if enabled */\n     { \"util\",               \"createmultisig\",         &createmultisig,         true  },\n     { \"util\",               \"verifymessage\",          &verifymessage,          true  },"
      },
      {
        "sha": "67064314ef1fb42e62b5f439cdfa453178d318d1",
        "filename": "src/support/allocators/secure.h",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/support/allocators/secure.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/support/allocators/secure.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/allocators/secure.h?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -6,7 +6,8 @@\n #ifndef BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n #define BITCOIN_SUPPORT_ALLOCATORS_SECURE_H\n \n-#include \"support/pagelocker.h\"\n+#include \"support/lockedpool.h\"\n+#include \"support/cleanse.h\"\n \n #include <string>\n \n@@ -39,20 +40,15 @@ struct secure_allocator : public std::allocator<T> {\n \n     T* allocate(std::size_t n, const void* hint = 0)\n     {\n-        T* p;\n-        p = std::allocator<T>::allocate(n, hint);\n-        if (p != NULL)\n-            LockedPageManager::Instance().LockRange(p, sizeof(T) * n);\n-        return p;\n+        return static_cast<T*>(LockedPoolManager::Instance().alloc(sizeof(T) * n));\n     }\n \n     void deallocate(T* p, std::size_t n)\n     {\n         if (p != NULL) {\n             memory_cleanse(p, sizeof(T) * n);\n-            LockedPageManager::Instance().UnlockRange(p, sizeof(T) * n);\n         }\n-        std::allocator<T>::deallocate(p, n);\n+        LockedPoolManager::Instance().free(p);\n     }\n };\n "
      },
      {
        "sha": "63050f006b0536f640159f2d09f28fe1e1565483",
        "filename": "src/support/lockedpool.cpp",
        "status": "added",
        "additions": 383,
        "deletions": 0,
        "changes": 383,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -0,0 +1,383 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"support/lockedpool.h\"\n+#include \"support/cleanse.h\"\n+\n+#if defined(HAVE_CONFIG_H)\n+#include \"config/bitcoin-config.h\"\n+#endif\n+\n+#ifdef WIN32\n+#ifdef _WIN32_WINNT\n+#undef _WIN32_WINNT\n+#endif\n+#define _WIN32_WINNT 0x0501\n+#define WIN32_LEAN_AND_MEAN 1\n+#ifndef NOMINMAX\n+#define NOMINMAX\n+#endif\n+#include <windows.h>\n+#else\n+#include <sys/mman.h> // for mmap\n+#include <sys/resource.h> // for getrlimit\n+#include <limits.h> // for PAGESIZE\n+#include <unistd.h> // for sysconf\n+#endif\n+\n+LockedPoolManager* LockedPoolManager::_instance = NULL;\n+std::once_flag LockedPoolManager::init_flag;\n+\n+/*******************************************************************************/\n+// Utilities\n+//\n+/** Align up to power of 2 */\n+static inline size_t align_up(size_t x, size_t align)\n+{\n+    return (x + align - 1) & ~(align - 1);\n+}\n+\n+/*******************************************************************************/\n+// Implementation: Arena\n+\n+Arena::Arena(void *base_in, size_t size_in, size_t alignment_in):\n+    base(static_cast<char*>(base_in)), end(static_cast<char*>(base_in) + size_in), alignment(alignment_in)\n+{\n+    // Start with one free chunk that covers the entire arena\n+    chunks.emplace(base, Chunk(size_in, false));\n+}\n+\n+Arena::~Arena()\n+{\n+}\n+\n+void* Arena::alloc(size_t size)\n+{\n+    // Round to next multiple of alignment\n+    size = align_up(size, alignment);\n+\n+    // Don't handle zero-sized chunks, or those bigger than MAX_SIZE\n+    if (size == 0 || size >= Chunk::MAX_SIZE) {\n+        return nullptr;\n+    }\n+\n+    for (auto& chunk: chunks) {\n+        if (!chunk.second.isInUse() && size <= chunk.second.getSize()) {\n+            char* base = chunk.first;\n+            size_t leftover = chunk.second.getSize() - size;\n+            if (leftover > 0) { // Split chunk\n+                chunks.emplace(base + size, Chunk(leftover, false));\n+                chunk.second.setSize(size);\n+            }\n+            chunk.second.setInUse(true);\n+            return reinterpret_cast<void*>(base);\n+        }\n+    }\n+    return nullptr;\n+}\n+\n+void Arena::free(void *ptr)\n+{\n+    // Freeing the NULL pointer is OK.\n+    if (ptr == nullptr) {\n+        return;\n+    }\n+    auto i = chunks.find(static_cast<char*>(ptr));\n+    if (i == chunks.end() || !i->second.isInUse()) {\n+        throw std::runtime_error(\"Arena: invalid or double free\");\n+    }\n+\n+    i->second.setInUse(false);\n+\n+    if (i != chunks.begin()) { // Absorb into previous chunk if exists and free\n+        auto prev = i;\n+        --prev;\n+        if (!prev->second.isInUse()) {\n+            // Absorb current chunk size into previous chunk.\n+            prev->second.setSize(prev->second.getSize() + i->second.getSize());\n+            // Erase current chunk. Erasing does not invalidate current\n+            // iterators for a map, except for that pointing to the object\n+            // itself, which will be overwritten in the next statement.\n+            chunks.erase(i);\n+            // From here on, the previous chunk is our current chunk.\n+            i = prev;\n+        }\n+    }\n+    auto next = i;\n+    ++next;\n+    if (next != chunks.end()) { // Absorb next chunk if exists and free\n+        if (!next->second.isInUse()) {\n+            // Absurb next chunk size into current chunk\n+            i->second.setSize(i->second.getSize() + next->second.getSize());\n+            // Erase next chunk.\n+            chunks.erase(next);\n+        }\n+    }\n+}\n+\n+Arena::Stats Arena::stats() const\n+{\n+    Arena::Stats r;\n+    r.used = r.free = r.total = r.chunks_used = r.chunks_free = 0;\n+    for (const auto& chunk: chunks) {\n+        if (chunk.second.isInUse()) {\n+            r.used += chunk.second.getSize();\n+            r.chunks_used += 1;\n+        } else {\n+            r.free += chunk.second.getSize();\n+            r.chunks_free += 1;\n+        }\n+        r.total += chunk.second.getSize();\n+    }\n+    return r;\n+}\n+\n+#ifdef ARENA_DEBUG\n+void Arena::walk() const\n+{\n+    for (const auto& chunk: chunks) {\n+        std::cout <<\n+            \"0x\" << std::hex << std::setw(16) << std::setfill('0') << chunk.first <<\n+            \" 0x\" << std::hex << std::setw(16) << std::setfill('0') << chunk.second.getSize() <<\n+            \" 0x\" << chunk.second.isInUse() << std::endl;\n+    }\n+    std::cout << std::endl;\n+}\n+#endif\n+\n+/*******************************************************************************/\n+// Implementation: Win32LockedPageAllocator\n+\n+#ifdef WIN32\n+/** LockedPageAllocator specialized for Windows.\n+ */\n+class Win32LockedPageAllocator: public LockedPageAllocator\n+{\n+public:\n+    Win32LockedPageAllocator();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess);\n+    void FreeLocked(void* addr, size_t len);\n+    size_t GetLimit();\n+private:\n+    size_t page_size;\n+};\n+\n+Win32LockedPageAllocator::Win32LockedPageAllocator()\n+{\n+    // Determine system page size in bytes\n+    SYSTEM_INFO sSysInfo;\n+    GetSystemInfo(&sSysInfo);\n+    page_size = sSysInfo.dwPageSize;\n+}\n+void *Win32LockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)\n+{\n+    len = align_up(len, page_size);\n+    void *addr = VirtualAlloc(nullptr, len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);\n+    if (addr) {\n+        // VirtualLock is used to attempt to keep keying material out of swap. Note\n+        // that it does not provide this as a guarantee, but, in practice, memory\n+        // that has been VirtualLock'd almost never gets written to the pagefile\n+        // except in rare circumstances where memory is extremely low.\n+        *lockingSuccess = VirtualLock(const_cast<void*>(addr), len) != 0;\n+    }\n+    return addr;\n+}\n+void Win32LockedPageAllocator::FreeLocked(void* addr, size_t len)\n+{\n+    len = align_up(len, page_size);\n+    memory_cleanse(addr, len);\n+    VirtualUnlock(const_cast<void*>(addr), len);\n+}\n+\n+size_t Win32LockedPageAllocator::GetLimit()\n+{\n+    // TODO is there a limit on windows, how to get it?\n+    return std::numeric_limits<size_t>::max();\n+}\n+#endif\n+\n+/*******************************************************************************/\n+// Implementation: PosixLockedPageAllocator\n+\n+#ifndef WIN32\n+/** LockedPageAllocator specialized for OSes that don't try to be\n+ * special snowflakes.\n+ */\n+class PosixLockedPageAllocator: public LockedPageAllocator\n+{\n+public:\n+    PosixLockedPageAllocator();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess);\n+    void FreeLocked(void* addr, size_t len);\n+    size_t GetLimit();\n+private:\n+    size_t page_size;\n+};\n+\n+PosixLockedPageAllocator::PosixLockedPageAllocator()\n+{\n+    // Determine system page size in bytes\n+#if defined(PAGESIZE) // defined in limits.h\n+    page_size = PAGESIZE;\n+#else                   // assume some POSIX OS\n+    page_size = sysconf(_SC_PAGESIZE);\n+#endif\n+}\n+void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)\n+{\n+    void *addr;\n+    len = align_up(len, page_size);\n+    addr = mmap(nullptr, len, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);\n+    if (addr) {\n+        *lockingSuccess = mlock(addr, len) == 0;\n+    }\n+    return addr;\n+}\n+void PosixLockedPageAllocator::FreeLocked(void* addr, size_t len)\n+{\n+    len = align_up(len, page_size);\n+    memory_cleanse(addr, len);\n+    munlock(addr, len);\n+    munmap(addr, len);\n+}\n+size_t PosixLockedPageAllocator::GetLimit()\n+{\n+#ifdef RLIMIT_MEMLOCK\n+    struct rlimit rlim;\n+    if (getrlimit(RLIMIT_MEMLOCK, &rlim) == 0) {\n+        if (rlim.rlim_cur != RLIM_INFINITY) {\n+            return rlim.rlim_cur;\n+        }\n+    }\n+#endif\n+    return std::numeric_limits<size_t>::max();\n+}\n+#endif\n+\n+/*******************************************************************************/\n+// Implementation: LockedPool\n+\n+LockedPool::LockedPool(std::unique_ptr<LockedPageAllocator> allocator_in, LockingFailed_Callback lf_cb_in):\n+    allocator(std::move(allocator_in)), lf_cb(lf_cb_in), cumulative_bytes_locked(0)\n+{\n+}\n+\n+LockedPool::~LockedPool()\n+{\n+}\n+void* LockedPool::alloc(size_t size)\n+{\n+    std::lock_guard<std::mutex> lock(mutex);\n+    // Try allocating from each current arena\n+    for (auto &arena: arenas) {\n+        void *addr = arena.alloc(size);\n+        if (addr) {\n+            return addr;\n+        }\n+    }\n+    // If that fails, create a new one\n+    if (new_arena(ARENA_SIZE, ARENA_ALIGN)) {\n+        return arenas.back().alloc(size);\n+    }\n+    return nullptr;\n+}\n+\n+void LockedPool::free(void *ptr)\n+{\n+    std::lock_guard<std::mutex> lock(mutex);\n+    // TODO we can do better than this linear search by keeping a map of arena\n+    // extents to arena, and looking up the address.\n+    for (auto &arena: arenas) {\n+        if (arena.addressInArena(ptr)) {\n+            arena.free(ptr);\n+            return;\n+        }\n+    }\n+    throw std::runtime_error(\"LockedPool: invalid address not pointing to any arena\");\n+}\n+\n+LockedPool::Stats LockedPool::stats() const\n+{\n+    std::lock_guard<std::mutex> lock(mutex);\n+    LockedPool::Stats r;\n+    r.used = r.free = r.total = r.chunks_used = r.chunks_free = 0;\n+    r.locked = cumulative_bytes_locked;\n+    for (const auto &arena: arenas) {\n+        Arena::Stats i = arena.stats();\n+        r.used += i.used;\n+        r.free += i.free;\n+        r.total += i.total;\n+        r.chunks_used += i.chunks_used;\n+        r.chunks_free += i.chunks_free;\n+    }\n+    return r;\n+}\n+\n+bool LockedPool::new_arena(size_t size, size_t align)\n+{\n+    bool locked;\n+    // If this is the first arena, handle this specially: Cap the upper size\n+    // by the process limit. This makes sure that the first arena will at least\n+    // be locked. An exception to this is if the process limit is 0:\n+    // in this case no memory can be locked at all so we'll skip past this logic.\n+    if (arenas.empty()) {\n+        size_t limit = allocator->GetLimit();\n+        if (limit > 0) {\n+            size = std::min(size, limit);\n+        }\n+    }\n+    void *addr = allocator->AllocateLocked(size, &locked);\n+    if (!addr) {\n+        return false;\n+    }\n+    if (locked) {\n+        cumulative_bytes_locked += size;\n+    } else if (lf_cb) { // Call the locking-failed callback if locking failed\n+        if (!lf_cb()) { // If the callback returns false, free the memory and fail, otherwise consider the user warned and proceed.\n+            allocator->FreeLocked(addr, size);\n+            return false;\n+        }\n+    }\n+    arenas.emplace_back(allocator.get(), addr, size, align);\n+    return true;\n+}\n+\n+LockedPool::LockedPageArena::LockedPageArena(LockedPageAllocator *allocator_in, void *base_in, size_t size_in, size_t align_in):\n+    Arena(base_in, size_in, align_in), base(base_in), size(size_in), allocator(allocator_in)\n+{\n+}\n+LockedPool::LockedPageArena::~LockedPageArena()\n+{\n+    allocator->FreeLocked(base, size);\n+}\n+\n+/*******************************************************************************/\n+// Implementation: LockedPoolManager\n+//\n+LockedPoolManager::LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator):\n+    LockedPool(std::move(allocator), &LockedPoolManager::LockingFailed)\n+{\n+}\n+\n+bool LockedPoolManager::LockingFailed()\n+{\n+    // TODO: log something but how? without including util.h\n+    return true;\n+}\n+\n+void LockedPoolManager::CreateInstance()\n+{\n+    // Using a local static instance guarantees that the object is initialized\n+    // when it's first needed and also deinitialized after all objects that use\n+    // it are done with it.  I can think of one unlikely scenario where we may\n+    // have a static deinitialization order/problem, but the check in\n+    // LockedPoolManagerBase's destructor helps us detect if that ever happens.\n+#ifdef WIN32\n+    std::unique_ptr<LockedPageAllocator> allocator(new Win32LockedPageAllocator());\n+#else\n+    std::unique_ptr<LockedPageAllocator> allocator(new PosixLockedPageAllocator());\n+#endif\n+    static LockedPoolManager instance(std::move(allocator));\n+    LockedPoolManager::_instance = &instance;\n+}"
      },
      {
        "sha": "526c17a73fe764d72fec3e52f71b123efab47bd7",
        "filename": "src/support/lockedpool.h",
        "status": "added",
        "additions": 251,
        "deletions": 0,
        "changes": 251,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/support/lockedpool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/support/lockedpool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.h?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -0,0 +1,251 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_SUPPORT_LOCKEDPOOL_H\n+#define BITCOIN_SUPPORT_LOCKEDPOOL_H\n+\n+#include <stdint.h>\n+#include <list>\n+#include <map>\n+#include <mutex>\n+#include <memory>\n+\n+/**\n+ * OS-dependent allocation and deallocation of locked/pinned memory pages.\n+ * Abstract base class.\n+ */\n+class LockedPageAllocator\n+{\n+public:\n+    virtual ~LockedPageAllocator() {}\n+    /** Allocate and lock memory pages.\n+     * If len is not a multiple of the system page size, it is rounded up.\n+     * Returns 0 in case of allocation failure.\n+     *\n+     * If locking the memory pages could not be accomplished it will still\n+     * return the memory, however the lockingSuccess flag will be false.\n+     * lockingSuccess is undefined if the allocation fails.\n+     */\n+    virtual void* AllocateLocked(size_t len, bool *lockingSuccess) = 0;\n+\n+    /** Unlock and free memory pages.\n+     * Clear the memory before unlocking.\n+     */\n+    virtual void FreeLocked(void* addr, size_t len) = 0;\n+\n+    /** Get the total limit on the amount of memory that may be locked by this\n+     * process, in bytes. Return size_t max if there is no limit or the limit\n+     * is unknown. Return 0 if no memory can be locked at all.\n+     */\n+    virtual size_t GetLimit() = 0;\n+};\n+\n+/* An arena manages a contiguous region of memory by dividing it into\n+ * chunks.\n+ */\n+class Arena\n+{\n+public:\n+    Arena(void *base, size_t size, size_t alignment);\n+    virtual ~Arena();\n+\n+    /** A chunk of memory.\n+     */\n+    struct Chunk\n+    {\n+        /** Most significant bit of size_t. This is used to mark\n+         * in-usedness of chunk.\n+         */\n+        const static size_t SIZE_MSB = 1LLU << ((sizeof(size_t)*8)-1);\n+        /** Maximum size of a chunk */\n+        const static size_t MAX_SIZE = SIZE_MSB - 1;\n+\n+        Chunk(size_t size_in, bool used_in):\n+            size(size_in | (used_in ? SIZE_MSB : 0)) {}\n+\n+        bool isInUse() const { return size & SIZE_MSB; }\n+        void setInUse(bool used_in) { size = (size & ~SIZE_MSB) | (used_in ? SIZE_MSB : 0); }\n+        size_t getSize() const { return size & ~SIZE_MSB; }\n+        void setSize(size_t size_in) { size = (size & SIZE_MSB) | size_in; }\n+    private:\n+        size_t size;\n+    };\n+    /** Memory statistics. */\n+    struct Stats\n+    {\n+        size_t used;\n+        size_t free;\n+        size_t total;\n+        size_t chunks_used;\n+        size_t chunks_free;\n+    };\n+\n+    /** Allocate size bytes from this arena.\n+     * Returns pointer on success, or 0 if memory is full or\n+     * the application tried to allocate 0 bytes.\n+     */\n+    void* alloc(size_t size);\n+\n+    /** Free a previously allocated chunk of memory.\n+     * Freeing the zero pointer has no effect.\n+     * Raises std::runtime_error in case of error.\n+     */\n+    void free(void *ptr);\n+\n+    /** Get arena usage statistics */\n+    Stats stats() const;\n+\n+#ifdef ARENA_DEBUG\n+    void walk() const;\n+#endif\n+\n+    /** Return whether a pointer points inside this arena.\n+     * This returns base <= ptr < (base+size) so only use it for (inclusive)\n+     * chunk starting addresses.\n+     */\n+    bool addressInArena(void *ptr) const { return ptr >= base && ptr < end; }\n+private:\n+    Arena(const Arena& other) = delete; // non construction-copyable\n+    Arena& operator=(const Arena&) = delete; // non copyable\n+\n+    /** Map of chunk address to chunk information. This class makes use of the\n+     * sorted order to merge previous and next chunks during deallocation.\n+     */\n+    std::map<char*, Chunk> chunks;\n+    /** Base address of arena */\n+    char* base;\n+    /** End address of arena */\n+    char* end;\n+    /** Minimum chunk alignment */\n+    size_t alignment;\n+};\n+\n+/** Pool for locked memory chunks.\n+ *\n+ * To avoid sensitive key data from being swapped to disk, the memory in this pool\n+ * is locked/pinned.\n+ *\n+ * An arena manages a contiguous region of memory. The pool starts out with one arena\n+ * but can grow to multiple arenas if the need arises.\n+ *\n+ * Unlike a normal C heap, the administrative structures are seperate from the managed\n+ * memory. This has been done as the sizes and bases of objects are not in themselves sensitive\n+ * information, as to conserve precious locked memory. In some operating systems\n+ * the amount of memory that can be locked is small.\n+ */\n+class LockedPool\n+{\n+public:\n+    /** Size of one arena of locked memory. This is a compromise.\n+     * Do not set this too low, as managing many arenas will increase\n+     * allocation and deallocation overhead. Setting it too high allocates\n+     * more locked memory from the OS than strictly necessary.\n+     */\n+    static const size_t ARENA_SIZE = 256*1024;\n+    /** Chunk alignment. Another compromise. Setting this too high will waste\n+     * memory, setting it too low will facilitate fragmentation.\n+     */\n+    static const size_t ARENA_ALIGN = 16;\n+\n+    /** Callback when allocation succeeds but locking fails.\n+     */\n+    typedef bool (*LockingFailed_Callback)();\n+\n+    /** Memory statistics. */\n+    struct Stats\n+    {\n+        size_t used;\n+        size_t free;\n+        size_t total;\n+        size_t locked;\n+        size_t chunks_used;\n+        size_t chunks_free;\n+    };\n+\n+    /** Create a new LockedPool. This takes ownership of the MemoryPageLocker,\n+     * you can only instantiate this with LockedPool(std::move(...)).\n+     *\n+     * The second argument is an optional callback when locking a newly allocated arena failed.\n+     * If this callback is provided and returns false, the allocation fails (hard fail), if\n+     * it returns true the allocation proceeds, but it could warn.\n+     */\n+    LockedPool(std::unique_ptr<LockedPageAllocator> allocator, LockingFailed_Callback lf_cb_in = 0);\n+    ~LockedPool();\n+\n+    /** Allocate size bytes from this arena.\n+     * Returns pointer on success, or 0 if memory is full or\n+     * the application tried to allocate 0 bytes.\n+     */\n+    void* alloc(size_t size);\n+\n+    /** Free a previously allocated chunk of memory.\n+     * Freeing the zero pointer has no effect.\n+     * Raises std::runtime_error in case of error.\n+     */\n+    void free(void *ptr);\n+\n+    /** Get pool usage statistics */\n+    Stats stats() const;\n+private:\n+    LockedPool(const LockedPool& other) = delete; // non construction-copyable\n+    LockedPool& operator=(const LockedPool&) = delete; // non copyable\n+\n+    std::unique_ptr<LockedPageAllocator> allocator;\n+\n+    /** Create an arena from locked pages */\n+    class LockedPageArena: public Arena\n+    {\n+    public:\n+        LockedPageArena(LockedPageAllocator *alloc_in, void *base_in, size_t size, size_t align);\n+        ~LockedPageArena();\n+    private:\n+        void *base;\n+        size_t size;\n+        LockedPageAllocator *allocator;\n+    };\n+\n+    bool new_arena(size_t size, size_t align);\n+\n+    std::list<LockedPageArena> arenas;\n+    LockingFailed_Callback lf_cb;\n+    size_t cumulative_bytes_locked;\n+    /** Mutex protects access to this pool's data structures, including arenas.\n+     */\n+    mutable std::mutex mutex;\n+};\n+\n+/**\n+ * Singleton class to keep track of locked (ie, non-swappable) memory, for use in\n+ * std::allocator templates.\n+ *\n+ * Some implementations of the STL allocate memory in some constructors (i.e., see\n+ * MSVC's vector<T> implementation where it allocates 1 byte of memory in the allocator.)\n+ * Due to the unpredictable order of static initializers, we have to make sure the\n+ * LockedPoolManager instance exists before any other STL-based objects that use\n+ * secure_allocator are created. So instead of having LockedPoolManager also be\n+ * static-initialized, it is created on demand.\n+ */\n+class LockedPoolManager : public LockedPool\n+{\n+public:\n+    /** Return the current instance, or create it once */\n+    static LockedPoolManager& Instance()\n+    {\n+        std::call_once(LockedPoolManager::init_flag, LockedPoolManager::CreateInstance);\n+        return *LockedPoolManager::_instance;\n+    }\n+\n+private:\n+    LockedPoolManager(std::unique_ptr<LockedPageAllocator> allocator);\n+\n+    /** Create a new LockedPoolManager specialized to the OS */\n+    static void CreateInstance();\n+    /** Called when locking fails, warn the user here */\n+    static bool LockingFailed();\n+\n+    static LockedPoolManager* _instance;\n+    static std::once_flag init_flag;\n+};\n+\n+#endif // BITCOIN_SUPPORT_LOCKEDPOOL_H"
      },
      {
        "sha": "7cea2d88c55c61947b33080bd32e4ab7b126ccbe",
        "filename": "src/support/pagelocker.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 70,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e/src/support/pagelocker.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e/src/support/pagelocker.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.cpp?ref=6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
        "patch": "@@ -1,70 +0,0 @@\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include \"support/pagelocker.h\"\n-\n-#if defined(HAVE_CONFIG_H)\n-#include \"config/bitcoin-config.h\"\n-#endif\n-\n-#ifdef WIN32\n-#ifdef _WIN32_WINNT\n-#undef _WIN32_WINNT\n-#endif\n-#define _WIN32_WINNT 0x0501\n-#define WIN32_LEAN_AND_MEAN 1\n-#ifndef NOMINMAX\n-#define NOMINMAX\n-#endif\n-#include <windows.h>\n-// This is used to attempt to keep keying material out of swap\n-// Note that VirtualLock does not provide this as a guarantee on Windows,\n-// but, in practice, memory that has been VirtualLock'd almost never gets written to\n-// the pagefile except in rare circumstances where memory is extremely low.\n-#else\n-#include <sys/mman.h>\n-#include <limits.h> // for PAGESIZE\n-#include <unistd.h> // for sysconf\n-#endif\n-\n-LockedPageManager* LockedPageManager::_instance = NULL;\n-boost::once_flag LockedPageManager::init_flag = BOOST_ONCE_INIT;\n-\n-/** Determine system page size in bytes */\n-static inline size_t GetSystemPageSize()\n-{\n-    size_t page_size;\n-#if defined(WIN32)\n-    SYSTEM_INFO sSysInfo;\n-    GetSystemInfo(&sSysInfo);\n-    page_size = sSysInfo.dwPageSize;\n-#elif defined(PAGESIZE) // defined in limits.h\n-    page_size = PAGESIZE;\n-#else                   // assume some POSIX OS\n-    page_size = sysconf(_SC_PAGESIZE);\n-#endif\n-    return page_size;\n-}\n-\n-bool MemoryPageLocker::Lock(const void* addr, size_t len)\n-{\n-#ifdef WIN32\n-    return VirtualLock(const_cast<void*>(addr), len) != 0;\n-#else\n-    return mlock(addr, len) == 0;\n-#endif\n-}\n-\n-bool MemoryPageLocker::Unlock(const void* addr, size_t len)\n-{\n-#ifdef WIN32\n-    return VirtualUnlock(const_cast<void*>(addr), len) != 0;\n-#else\n-    return munlock(addr, len) == 0;\n-#endif\n-}\n-\n-LockedPageManager::LockedPageManager() : LockedPageManagerBase<MemoryPageLocker>(GetSystemPageSize())\n-{\n-}"
      },
      {
        "sha": "538bf39453e39b2c2be787cac724baa74379369b",
        "filename": "src/support/pagelocker.h",
        "status": "removed",
        "additions": 0,
        "deletions": 177,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e/src/support/pagelocker.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e/src/support/pagelocker.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/pagelocker.h?ref=6a8be7ba999ad6a948b9a7c5d2f614b919fb6b8e",
        "patch": "@@ -1,177 +0,0 @@\n-// Copyright (c) 2009-2010 Satoshi Nakamoto\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_SUPPORT_PAGELOCKER_H\n-#define BITCOIN_SUPPORT_PAGELOCKER_H\n-\n-#include \"support/cleanse.h\"\n-\n-#include <map>\n-\n-#include <boost/thread/mutex.hpp>\n-#include <boost/thread/once.hpp>\n-\n-/**\n- * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n- *\n- * Memory locks do not stack, that is, pages which have been locked several times by calls to mlock()\n- * will be unlocked by a single call to munlock(). This can result in keying material ending up in swap when\n- * those functions are used naively. This class simulates stacking memory locks by keeping a counter per page.\n- *\n- * @note By using a map from each page base address to lock count, this class is optimized for\n- * small objects that span up to a few pages, mostly smaller than a page. To support large allocations,\n- * something like an interval tree would be the preferred data structure.\n- */\n-template <class Locker>\n-class LockedPageManagerBase\n-{\n-public:\n-    LockedPageManagerBase(size_t _page_size) : page_size(_page_size)\n-    {\n-        // Determine bitmask for extracting page from address\n-        assert(!(_page_size & (_page_size - 1))); // size must be power of two\n-        page_mask = ~(_page_size - 1);\n-    }\n-\n-    ~LockedPageManagerBase()\n-    {\n-    }\n-\n-\n-    // For all pages in affected range, increase lock count\n-    void LockRange(void* p, size_t size)\n-    {\n-        boost::mutex::scoped_lock lock(mutex);\n-        if (!size)\n-            return;\n-        const size_t base_addr = reinterpret_cast<size_t>(p);\n-        const size_t start_page = base_addr & page_mask;\n-        const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for (size_t page = start_page; page <= end_page; page += page_size) {\n-            Histogram::iterator it = histogram.find(page);\n-            if (it == histogram.end()) // Newly locked page\n-            {\n-                locker.Lock(reinterpret_cast<void*>(page), page_size);\n-                histogram.insert(std::make_pair(page, 1));\n-            } else // Page was already locked; increase counter\n-            {\n-                it->second += 1;\n-            }\n-        }\n-    }\n-\n-    // For all pages in affected range, decrease lock count\n-    void UnlockRange(void* p, size_t size)\n-    {\n-        boost::mutex::scoped_lock lock(mutex);\n-        if (!size)\n-            return;\n-        const size_t base_addr = reinterpret_cast<size_t>(p);\n-        const size_t start_page = base_addr & page_mask;\n-        const size_t end_page = (base_addr + size - 1) & page_mask;\n-        for (size_t page = start_page; page <= end_page; page += page_size) {\n-            Histogram::iterator it = histogram.find(page);\n-            assert(it != histogram.end()); // Cannot unlock an area that was not locked\n-            // Decrease counter for page, when it is zero, the page will be unlocked\n-            it->second -= 1;\n-            if (it->second == 0) // Nothing on the page anymore that keeps it locked\n-            {\n-                // Unlock page and remove the count from histogram\n-                locker.Unlock(reinterpret_cast<void*>(page), page_size);\n-                histogram.erase(it);\n-            }\n-        }\n-    }\n-\n-    // Get number of locked pages for diagnostics\n-    int GetLockedPageCount()\n-    {\n-        boost::mutex::scoped_lock lock(mutex);\n-        return histogram.size();\n-    }\n-\n-private:\n-    Locker locker;\n-    boost::mutex mutex;\n-    size_t page_size, page_mask;\n-    // map of page base address to lock count\n-    typedef std::map<size_t, int> Histogram;\n-    Histogram histogram;\n-};\n-\n-\n-/**\n- * OS-dependent memory page locking/unlocking.\n- * Defined as policy class to make stubbing for test possible.\n- */\n-class MemoryPageLocker\n-{\n-public:\n-    /** Lock memory pages.\n-     * addr and len must be a multiple of the system page size\n-     */\n-    bool Lock(const void* addr, size_t len);\n-    /** Unlock memory pages.\n-     * addr and len must be a multiple of the system page size\n-     */\n-    bool Unlock(const void* addr, size_t len);\n-};\n-\n-/**\n- * Singleton class to keep track of locked (ie, non-swappable) memory pages, for use in\n- * std::allocator templates.\n- *\n- * Some implementations of the STL allocate memory in some constructors (i.e., see\n- * MSVC's vector<T> implementation where it allocates 1 byte of memory in the allocator.)\n- * Due to the unpredictable order of static initializers, we have to make sure the\n- * LockedPageManager instance exists before any other STL-based objects that use\n- * secure_allocator are created. So instead of having LockedPageManager also be\n- * static-initialized, it is created on demand.\n- */\n-class LockedPageManager : public LockedPageManagerBase<MemoryPageLocker>\n-{\n-public:\n-    static LockedPageManager& Instance()\n-    {\n-        boost::call_once(LockedPageManager::CreateInstance, LockedPageManager::init_flag);\n-        return *LockedPageManager::_instance;\n-    }\n-\n-private:\n-    LockedPageManager();\n-\n-    static void CreateInstance()\n-    {\n-        // Using a local static instance guarantees that the object is initialized\n-        // when it's first needed and also deinitialized after all objects that use\n-        // it are done with it.  I can think of one unlikely scenario where we may\n-        // have a static deinitialization order/problem, but the check in\n-        // LockedPageManagerBase's destructor helps us detect if that ever happens.\n-        static LockedPageManager instance;\n-        LockedPageManager::_instance = &instance;\n-    }\n-\n-    static LockedPageManager* _instance;\n-    static boost::once_flag init_flag;\n-};\n-\n-//\n-// Functions for directly locking/unlocking memory objects.\n-// Intended for non-dynamically allocated structures.\n-//\n-template <typename T>\n-void LockObject(const T& t)\n-{\n-    LockedPageManager::Instance().LockRange((void*)(&t), sizeof(T));\n-}\n-\n-template <typename T>\n-void UnlockObject(const T& t)\n-{\n-    memory_cleanse((void*)(&t), sizeof(T));\n-    LockedPageManager::Instance().UnlockRange((void*)(&t), sizeof(T));\n-}\n-\n-#endif // BITCOIN_SUPPORT_PAGELOCKER_H"
      },
      {
        "sha": "f0e848655f2056ad25b4d274fd42dbc055bb05f4",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 192,
        "deletions": 88,
        "changes": 280,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -11,110 +11,214 @@\n \n BOOST_FIXTURE_TEST_SUITE(allocator_tests, BasicTestingSetup)\n \n-// Dummy memory page locker for platform independent tests\n-static const void *last_lock_addr, *last_unlock_addr;\n-static size_t last_lock_len, last_unlock_len;\n-class TestLocker\n+BOOST_AUTO_TEST_CASE(arena_tests)\n {\n-public:\n-    bool Lock(const void *addr, size_t len)\n+    // Fake memory base address for testing\n+    // without actually using memory.\n+    void *synth_base = reinterpret_cast<void*>(0x08000000);\n+    const size_t synth_size = 1024*1024;\n+    Arena b(synth_base, synth_size, 16);\n+    void *chunk = b.alloc(1000);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(chunk != nullptr);\n+    BOOST_CHECK(b.stats().used == 1008); // Aligned to 16\n+    BOOST_CHECK(b.stats().total == synth_size); // Nothing has disappeared?\n+    b.free(chunk);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(b.stats().used == 0);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+    try { // Test exception on double-free\n+        b.free(chunk);\n+        BOOST_CHECK(0);\n+    } catch(std::runtime_error &)\n     {\n-        last_lock_addr = addr;\n-        last_lock_len = len;\n-        return true;\n     }\n-    bool Unlock(const void *addr, size_t len)\n-    {\n-        last_unlock_addr = addr;\n-        last_unlock_len = len;\n-        return true;\n+\n+    void *a0 = b.alloc(128);\n+    BOOST_CHECK(a0 == synth_base); // first allocation must start at beginning\n+    void *a1 = b.alloc(256);\n+    void *a2 = b.alloc(512);\n+    BOOST_CHECK(b.stats().used == 896);\n+    BOOST_CHECK(b.stats().total == synth_size);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    b.free(a0);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(b.stats().used == 768);\n+    b.free(a1);\n+    BOOST_CHECK(b.stats().used == 512);\n+    void *a3 = b.alloc(128);\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    BOOST_CHECK(b.stats().used == 640);\n+    b.free(a2);\n+    BOOST_CHECK(b.stats().used == 128);\n+    b.free(a3);\n+    BOOST_CHECK(b.stats().used == 0);\n+    BOOST_CHECK(b.stats().total == synth_size);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+\n+    std::vector<void*> addr;\n+    BOOST_CHECK(b.alloc(0) == nullptr); // allocating 0 always returns nullptr\n+#ifdef ARENA_DEBUG\n+    b.walk();\n+#endif\n+    // Sweeping allocate all memory\n+    for (int x=0; x<1024; ++x)\n+        addr.push_back(b.alloc(1024));\n+    BOOST_CHECK(addr[0] == synth_base); // first allocation must start at beginning\n+    BOOST_CHECK(b.stats().free == 0);\n+    BOOST_CHECK(b.alloc(1024) == nullptr); // memory is full, this must return nullptr\n+    BOOST_CHECK(b.alloc(0) == nullptr);\n+    for (int x=0; x<1024; ++x)\n+        b.free(addr[x]);\n+    addr.clear();\n+    BOOST_CHECK(b.stats().total == synth_size);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+\n+    // Now in the other direction...\n+    for (int x=0; x<1024; ++x)\n+        addr.push_back(b.alloc(1024));\n+    for (int x=0; x<1024; ++x)\n+        b.free(addr[1023-x]);\n+    addr.clear();\n+\n+    // Now allocate in smaller unequal chunks, then deallocate haphazardly\n+    // Not all the chunks will succeed allocating, but freeing nullptr is\n+    // allowed so that is no problem.\n+    for (int x=0; x<2048; ++x)\n+        addr.push_back(b.alloc(x+1));\n+    for (int x=0; x<2048; ++x)\n+        b.free(addr[((x*23)%2048)^242]);\n+    addr.clear();\n+\n+    // Go entirely wild: free and alloc interleaved,\n+    // generate targets and sizes using pseudo-randomness.\n+    for (int x=0; x<2048; ++x)\n+        addr.push_back(0);\n+    uint32_t s = 0x12345678;\n+    for (int x=0; x<5000; ++x) {\n+        int idx = s & (addr.size()-1);\n+        if (s & 0x80000000) {\n+            b.free(addr[idx]);\n+            addr[idx] = 0;\n+        } else if(!addr[idx]) {\n+            addr[idx] = b.alloc((s >> 16) & 2047);\n+        }\n+        bool lsb = s & 1;\n+        s >>= 1;\n+        if (lsb)\n+            s ^= 0xf00f00f0; // LFSR period 0xf7ffffe0\n     }\n-};\n+    for (void *ptr: addr)\n+        b.free(ptr);\n+    addr.clear();\n \n-BOOST_AUTO_TEST_CASE(test_LockedPageManagerBase)\n+    BOOST_CHECK(b.stats().total == synth_size);\n+    BOOST_CHECK(b.stats().free == synth_size);\n+}\n+\n+/** Mock LockedPageAllocator for testing */\n+class TestLockedPageAllocator: public LockedPageAllocator\n {\n-    const size_t test_page_size = 4096;\n-    LockedPageManagerBase<TestLocker> lpm(test_page_size);\n-    size_t addr;\n-    last_lock_addr = last_unlock_addr = 0;\n-    last_lock_len = last_unlock_len = 0;\n-\n-    /* Try large number of small objects */\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), 33);\n-        addr += 33;\n-    }\n-    /* Try small number of page-sized objects, straddling two pages */\n-    addr = test_page_size*100 + 53;\n-    for(int i=0; i<100; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n-    }\n-    /* Try small number of page-sized objects aligned to exactly one page */\n-    addr = test_page_size*300;\n-    for(int i=0; i<100; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n-    }\n-    /* one very large object, straddling pages */\n-    lpm.LockRange(reinterpret_cast<void*>(test_page_size*600+1), test_page_size*500);\n-    BOOST_CHECK(last_lock_addr == reinterpret_cast<void*>(test_page_size*(600+500)));\n-    /* one very large object, page aligned */\n-    lpm.LockRange(reinterpret_cast<void*>(test_page_size*1200), test_page_size*500-1);\n-    BOOST_CHECK(last_lock_addr == reinterpret_cast<void*>(test_page_size*(1200+500-1)));\n-\n-    BOOST_CHECK(lpm.GetLockedPageCount() == (\n-        (1000*33+test_page_size-1)/test_page_size + // small objects\n-        101 + 100 +  // page-sized objects\n-        501 + 500)); // large objects\n-    BOOST_CHECK((last_lock_len & (test_page_size-1)) == 0); // always lock entire pages\n-    BOOST_CHECK(last_unlock_len == 0); // nothing unlocked yet\n-\n-    /* And unlock again */\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n+public:\n+    TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}\n+    void* AllocateLocked(size_t len, bool *lockingSuccess)\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), 33);\n-        addr += 33;\n+        *lockingSuccess = false;\n+        if (count > 0) {\n+            --count;\n+\n+            if (lockedcount > 0) {\n+                --lockedcount;\n+                *lockingSuccess = true;\n+            }\n+\n+            return reinterpret_cast<void*>(0x08000000 + (count<<24)); // Fake address, do not actually use this memory\n+        }\n+        return 0;\n     }\n-    addr = test_page_size*100 + 53;\n-    for(int i=0; i<100; ++i)\n+    void FreeLocked(void* addr, size_t len)\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n     }\n-    addr = test_page_size*300;\n-    for(int i=0; i<100; ++i)\n+    size_t GetLimit()\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), test_page_size);\n-        addr += test_page_size;\n+        return std::numeric_limits<size_t>::max();\n     }\n-    lpm.UnlockRange(reinterpret_cast<void*>(test_page_size*600+1), test_page_size*500);\n-    lpm.UnlockRange(reinterpret_cast<void*>(test_page_size*1200), test_page_size*500-1);\n+private:\n+    int count;\n+    int lockedcount;\n+};\n \n-    /* Check that everything is released */\n-    BOOST_CHECK(lpm.GetLockedPageCount() == 0);\n+BOOST_AUTO_TEST_CASE(lockedpool_tests_mock)\n+{\n+    // Test over three virtual arenas, of which one will succeed being locked\n+    std::unique_ptr<LockedPageAllocator> x(new TestLockedPageAllocator(3, 1));\n+    LockedPool pool(std::move(x));\n+    BOOST_CHECK(pool.stats().total == 0);\n+    BOOST_CHECK(pool.stats().locked == 0);\n \n-    /* A few and unlocks of size zero (should have no effect) */\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n-    {\n-        lpm.LockRange(reinterpret_cast<void*>(addr), 0);\n-        addr += 1;\n-    }\n-    BOOST_CHECK(lpm.GetLockedPageCount() == 0);\n-    addr = 0;\n-    for(int i=0; i<1000; ++i)\n+    void *a0 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a0);\n+    BOOST_CHECK(pool.stats().locked == LockedPool::ARENA_SIZE);\n+    void *a1 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a1);\n+    void *a2 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a2);\n+    void *a3 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a3);\n+    void *a4 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a4);\n+    void *a5 = pool.alloc(LockedPool::ARENA_SIZE / 2);\n+    BOOST_CHECK(a5);\n+    // We've passed a count of three arenas, so this allocation should fail\n+    void *a6 = pool.alloc(16);\n+    BOOST_CHECK(!a6);\n+\n+    pool.free(a0);\n+    pool.free(a2);\n+    pool.free(a4);\n+    pool.free(a1);\n+    pool.free(a3);\n+    pool.free(a5);\n+    BOOST_CHECK(pool.stats().total == 3*LockedPool::ARENA_SIZE);\n+    BOOST_CHECK(pool.stats().locked == LockedPool::ARENA_SIZE);\n+    BOOST_CHECK(pool.stats().used == 0);\n+}\n+\n+// These tests used the live LockedPoolManager object, this is also used\n+// by other tests so the conditions are somewhat less controllable and thus the\n+// tests are somewhat more error-prone.\n+BOOST_AUTO_TEST_CASE(lockedpool_tests_live)\n+{\n+    LockedPoolManager &pool = LockedPoolManager::Instance();\n+    LockedPool::Stats initial = pool.stats();\n+\n+    void *a0 = pool.alloc(16);\n+    BOOST_CHECK(a0);\n+    // Test reading and writing the allocated memory\n+    *((uint32_t*)a0) = 0x1234;\n+    BOOST_CHECK(*((uint32_t*)a0) == 0x1234);\n+\n+    pool.free(a0);\n+    try { // Test exception on double-free\n+        pool.free(a0);\n+        BOOST_CHECK(0);\n+    } catch(std::runtime_error &)\n     {\n-        lpm.UnlockRange(reinterpret_cast<void*>(addr), 0);\n-        addr += 1;\n     }\n-    BOOST_CHECK(lpm.GetLockedPageCount() == 0);\n-    BOOST_CHECK((last_unlock_len & (test_page_size-1)) == 0); // always unlock entire pages\n+    // If more than one new arena was allocated for the above tests, something is wrong\n+    BOOST_CHECK(pool.stats().total <= (initial.total + LockedPool::ARENA_SIZE));\n+    // Usage must be back to where it started\n+    BOOST_CHECK(pool.stats().used == initial.used);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "31ee060677104bbc231018354a82277ae5c834ea",
        "filename": "src/wallet/crypter.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/wallet/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/wallet/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.cpp?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -48,12 +48,12 @@ bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::v\n \n     int i = 0;\n     if (nDerivationMethod == 0)\n-        i = BytesToKeySHA512AES(chSalt, strKeyData, nRounds, chKey, chIV);\n+        i = BytesToKeySHA512AES(chSalt, strKeyData, nRounds, vchKey.data(), vchIV.data());\n \n     if (i != (int)WALLET_CRYPTO_KEY_SIZE)\n     {\n-        memory_cleanse(chKey, sizeof(chKey));\n-        memory_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(vchKey.data(), vchKey.size());\n+        memory_cleanse(vchIV.data(), vchIV.size());\n         return false;\n     }\n \n@@ -66,8 +66,8 @@ bool CCrypter::SetKey(const CKeyingMaterial& chNewKey, const std::vector<unsigne\n     if (chNewKey.size() != WALLET_CRYPTO_KEY_SIZE || chNewIV.size() != WALLET_CRYPTO_IV_SIZE)\n         return false;\n \n-    memcpy(&chKey[0], &chNewKey[0], sizeof chKey);\n-    memcpy(&chIV[0], &chNewIV[0], sizeof chIV);\n+    memcpy(vchKey.data(), chNewKey.data(), chNewKey.size());\n+    memcpy(vchIV.data(), chNewIV.data(), chNewIV.size());\n \n     fKeySet = true;\n     return true;\n@@ -82,7 +82,7 @@ bool CCrypter::Encrypt(const CKeyingMaterial& vchPlaintext, std::vector<unsigned\n     // n + AES_BLOCKSIZE bytes\n     vchCiphertext.resize(vchPlaintext.size() + AES_BLOCKSIZE);\n \n-    AES256CBCEncrypt enc(chKey, chIV, true);\n+    AES256CBCEncrypt enc(vchKey.data(), vchIV.data(), true);\n     size_t nLen = enc.Encrypt(&vchPlaintext[0], vchPlaintext.size(), &vchCiphertext[0]);\n     if(nLen < vchPlaintext.size())\n         return false;\n@@ -101,7 +101,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n \n     vchPlaintext.resize(nLen);\n \n-    AES256CBCDecrypt dec(chKey, chIV, true);\n+    AES256CBCDecrypt dec(vchKey.data(), vchIV.data(), true);\n     nLen = dec.Decrypt(&vchCiphertext[0], vchCiphertext.size(), &vchPlaintext[0]);\n     if(nLen == 0)\n         return false;"
      },
      {
        "sha": "f00f7fa7315b1c4808619bc6c5a54aa77021d9bf",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -77,8 +77,8 @@ class CCrypter\n {\n friend class wallet_crypto::TestCrypter; // for test access to chKey/chIV\n private:\n-    unsigned char chKey[WALLET_CRYPTO_KEY_SIZE];\n-    unsigned char chIV[WALLET_CRYPTO_IV_SIZE];\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vchKey;\n+    std::vector<unsigned char, secure_allocator<unsigned char>> vchIV;\n     bool fKeySet;\n \n     int BytesToKeySHA512AES(const std::vector<unsigned char>& chSalt, const SecureString& strKeyData, int count, unsigned char *key,unsigned char *iv) const;\n@@ -91,28 +91,21 @@ friend class wallet_crypto::TestCrypter; // for test access to chKey/chIV\n \n     void CleanKey()\n     {\n-        memory_cleanse(chKey, sizeof(chKey));\n-        memory_cleanse(chIV, sizeof(chIV));\n+        memory_cleanse(vchKey.data(), vchKey.size());\n+        memory_cleanse(vchIV.data(), vchIV.size());\n         fKeySet = false;\n     }\n \n     CCrypter()\n     {\n         fKeySet = false;\n-\n-        // Try to keep the key data out of swap (and be a bit over-careful to keep the IV that we don't even use out of swap)\n-        // Note that this does nothing about suspend-to-disk (which will put all our key data on disk)\n-        // Note as well that at no point in this program is any attempt made to prevent stealing of keys by reading the memory of the running process.\n-        LockedPageManager::Instance().LockRange(&chKey[0], sizeof chKey);\n-        LockedPageManager::Instance().LockRange(&chIV[0], sizeof chIV);\n+        vchKey.resize(WALLET_CRYPTO_KEY_SIZE);\n+        vchIV.resize(WALLET_CRYPTO_IV_SIZE);\n     }\n \n     ~CCrypter()\n     {\n         CleanKey();\n-\n-        LockedPageManager::Instance().UnlockRange(&chKey[0], sizeof chKey);\n-        LockedPageManager::Instance().UnlockRange(&chIV[0], sizeof chIV);\n     }\n };\n "
      },
      {
        "sha": "ce35c53c48737b7461fceab32144dbccf4540b82",
        "filename": "src/wallet/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8723d231812045b8ccd205eac71deeab43a168b/src/wallet/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8723d231812045b8ccd205eac71deeab43a168b/src/wallet/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/crypto_tests.cpp?ref=f8723d231812045b8ccd205eac71deeab43a168b",
        "patch": "@@ -97,10 +97,10 @@ static void TestPassphraseSingle(const std::vector<unsigned char>& vchSalt, cons\n \n     OldSetKeyFromPassphrase(passphrase, vchSalt, rounds, 0, chKey, chIV);\n \n-    BOOST_CHECK_MESSAGE(memcmp(chKey, crypt.chKey, sizeof(chKey)) == 0, \\\n-        HexStr(chKey, chKey+sizeof(chKey)) + std::string(\" != \") + HexStr(crypt.chKey, crypt.chKey + (sizeof crypt.chKey)));\n-    BOOST_CHECK_MESSAGE(memcmp(chIV, crypt.chIV, sizeof(chIV)) == 0, \\\n-        HexStr(chIV, chIV+sizeof(chIV)) + std::string(\" != \") + HexStr(crypt.chIV, crypt.chIV + (sizeof crypt.chIV)));\n+    BOOST_CHECK_MESSAGE(memcmp(chKey, crypt.vchKey.data(), crypt.vchKey.size()) == 0, \\\n+        HexStr(chKey, chKey+sizeof(chKey)) + std::string(\" != \") + HexStr(crypt.vchKey));\n+    BOOST_CHECK_MESSAGE(memcmp(chIV, crypt.vchIV.data(), crypt.vchIV.size()) == 0, \\\n+        HexStr(chIV, chIV+sizeof(chIV)) + std::string(\" != \") + HexStr(crypt.vchIV));\n \n     if(!correctKey.empty())\n         BOOST_CHECK_MESSAGE(memcmp(chKey, &correctKey[0], sizeof(chKey)) == 0, \\\n@@ -127,7 +127,7 @@ static void TestDecrypt(const CCrypter& crypt, const std::vector<unsigned char>&\n     CKeyingMaterial vchDecrypted2;\n     int result1, result2;\n     result1 = crypt.Decrypt(vchCiphertext, vchDecrypted1);\n-    result2 = OldDecrypt(vchCiphertext, vchDecrypted2, crypt.chKey, crypt.chIV);\n+    result2 = OldDecrypt(vchCiphertext, vchDecrypted2, crypt.vchKey.data(), crypt.vchIV.data());\n     BOOST_CHECK(result1 == result2);\n \n     // These two should be equal. However, OpenSSL 1.0.1j introduced a change\n@@ -152,7 +152,7 @@ static void TestEncryptSingle(const CCrypter& crypt, const CKeyingMaterial& vchP\n     std::vector<unsigned char> vchCiphertext2;\n     int result1 = crypt.Encrypt(vchPlaintext, vchCiphertext1);\n \n-    int result2 = OldEncrypt(vchPlaintext, vchCiphertext2, crypt.chKey, crypt.chIV);\n+    int result2 = OldEncrypt(vchPlaintext, vchCiphertext2, crypt.vchKey.data(), crypt.vchIV.data());\n     BOOST_CHECK(result1 == result2);\n     BOOST_CHECK(vchCiphertext1 == vchCiphertext2);\n "
      }
    ]
  },
  {
    "sha": "4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YTlmM2M1MGNjYzhhNDY3ZmRhODRiZmQ4ZmY3Y2ZkODMxZWRiN2Mz",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-11-02T13:18:19Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-11-02T13:18:19Z"
      },
      "message": "Do not shadow variable, use deprecated MAP_ANON if MAP_ANONYMOUS is not defined.",
      "tree": {
        "sha": "44de72f207d11a75311a147a25d7b4e514d30534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44de72f207d11a75311a147a25d7b4e514d30534"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8723d231812045b8ccd205eac71deeab43a168b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8723d231812045b8ccd205eac71deeab43a168b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8723d231812045b8ccd205eac71deeab43a168b"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "813869a131cfb8d0ac77a27e56a60ef870726443",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3",
        "patch": "@@ -64,14 +64,14 @@ void* Arena::alloc(size_t size)\n \n     for (auto& chunk: chunks) {\n         if (!chunk.second.isInUse() && size <= chunk.second.getSize()) {\n-            char* base = chunk.first;\n+            char* _base = chunk.first;\n             size_t leftover = chunk.second.getSize() - size;\n             if (leftover > 0) { // Split chunk\n-                chunks.emplace(base + size, Chunk(leftover, false));\n+                chunks.emplace(_base + size, Chunk(leftover, false));\n                 chunk.second.setSize(size);\n             }\n             chunk.second.setInUse(true);\n-            return reinterpret_cast<void*>(base);\n+            return reinterpret_cast<void*>(_base);\n         }\n     }\n     return nullptr;\n@@ -224,6 +224,13 @@ PosixLockedPageAllocator::PosixLockedPageAllocator()\n     page_size = sysconf(_SC_PAGESIZE);\n #endif\n }\n+\n+// Some systems (at least OS X) do not define MAP_ANONYMOUS yet and define\n+// MAP_ANON which is deprecated\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)\n {\n     void *addr;"
      }
    ]
  },
  {
    "sha": "f2a6e8243f2a9405f775d285cb9661929211f829",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmE2ZTgyNDNmMmE5NDA1Zjc3NWQyODVjYjk2NjE5MjkyMTFmODI5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T13:40:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T13:41:36Z"
      },
      "message": "Merge #9063: Do not shadow variable, use deprecated MAP_ANON if MAP_ANONYMOUS is not defined\n\n4a9f3c5 Do not shadow variable, use deprecated MAP_ANON if MAP_ANONYMOUS is not defined. (Pavel Jan\u00edk)",
      "tree": {
        "sha": "44de72f207d11a75311a147a25d7b4e514d30534",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/44de72f207d11a75311a147a25d7b4e514d30534"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2a6e8243f2a9405f775d285cb9661929211f829",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGe0QAAoJEHSBCwEjRsmmHt4H/0W1S+a4C4ZpA9gXLWC9M+3I\n9btdaWRu4DRXtUhsUpW16ZRMu2KZOoHKQkNs1zjFMMoaIMiU0Cvxluvp+6E+SMxp\ndVR07oiQAmSI+mKRzbekP4I/d8CVm6Qv04zA3GAMXw5GxTEDsS+TeKS9PdRMxOSX\ndbeVU8dooogchi6MC5yJjP0TveUqVHWfc4fvU6+0TwSvRG0/vY1Nc037Hnpj41cR\nQ5vfuiA2hR4O5CPQ+u4rHqeSXw9xGrKWAwCGxg5hCRx6HsThidSRXBJBn59gs6m8\ntRolYXugzwkW/5xKDGsU3vV1KO7nijjY9CDyC3Mkkn+htx3h6BKLpyjuw9aKBw8=\n=L/vs\n-----END PGP SIGNATURE-----",
        "payload": "tree 44de72f207d11a75311a147a25d7b4e514d30534\nparent f8723d231812045b8ccd205eac71deeab43a168b\nparent 4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478094051 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478094096 +0100\n\nMerge #9063: Do not shadow variable, use deprecated MAP_ANON if MAP_ANONYMOUS is not defined\n\n4a9f3c5 Do not shadow variable, use deprecated MAP_ANON if MAP_ANONYMOUS is not defined. (Pavel Jan\u00edk)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a6e8243f2a9405f775d285cb9661929211f829",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a6e8243f2a9405f775d285cb9661929211f829",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a6e8243f2a9405f775d285cb9661929211f829/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f8723d231812045b8ccd205eac71deeab43a168b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8723d231812045b8ccd205eac71deeab43a168b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f8723d231812045b8ccd205eac71deeab43a168b"
      },
      {
        "sha": "4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a9f3c50ccc8a467fda84bfd8ff7cfd831edb7c3"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 10,
      "deletions": 3
    },
    "files": [
      {
        "sha": "813869a131cfb8d0ac77a27e56a60ef870726443",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2a6e8243f2a9405f775d285cb9661929211f829/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2a6e8243f2a9405f775d285cb9661929211f829/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=f2a6e8243f2a9405f775d285cb9661929211f829",
        "patch": "@@ -64,14 +64,14 @@ void* Arena::alloc(size_t size)\n \n     for (auto& chunk: chunks) {\n         if (!chunk.second.isInUse() && size <= chunk.second.getSize()) {\n-            char* base = chunk.first;\n+            char* _base = chunk.first;\n             size_t leftover = chunk.second.getSize() - size;\n             if (leftover > 0) { // Split chunk\n-                chunks.emplace(base + size, Chunk(leftover, false));\n+                chunks.emplace(_base + size, Chunk(leftover, false));\n                 chunk.second.setSize(size);\n             }\n             chunk.second.setInUse(true);\n-            return reinterpret_cast<void*>(base);\n+            return reinterpret_cast<void*>(_base);\n         }\n     }\n     return nullptr;\n@@ -224,6 +224,13 @@ PosixLockedPageAllocator::PosixLockedPageAllocator()\n     page_size = sysconf(_SC_PAGESIZE);\n #endif\n }\n+\n+// Some systems (at least OS X) do not define MAP_ANONYMOUS yet and define\n+// MAP_ANON which is deprecated\n+#ifndef MAP_ANONYMOUS\n+#define MAP_ANONYMOUS MAP_ANON\n+#endif\n+\n void *PosixLockedPageAllocator::AllocateLocked(size_t len, bool *lockingSuccess)\n {\n     void *addr;"
      }
    ]
  },
  {
    "sha": "1107653d05a4992cd97bb9e12fd1e8200555f0ec",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTA3NjUzZDA1YTQ5OTJjZDk3YmI5ZTEyZmQxZTgyMDA1NTVmMGVj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T14:30:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T14:30:47Z"
      },
      "message": "Merge #9060: trivial: fix bloom filter init to isEmpty = true\n\ncccf73d trivial: fix bloom filter init to isEmpty = true (Robert McLaughlin)",
      "tree": {
        "sha": "8d83e93520114f1cae86a2903557e3f66040bf44",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d83e93520114f1cae86a2903557e3f66040bf44"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1107653d05a4992cd97bb9e12fd1e8200555f0ec",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGfiXAAoJEHSBCwEjRsmmedwIAIJVdJfcgIxTdmaFmqg7biUK\nta+Hd80XO292PfhU6eVo75TWbpTx4vAR0OBUaCHX8G1bPmNVVH/nrhLZH+2U3Mul\nudsMwRUW9sPH7I+e3g74eeCGH5SBdSuB5iUR6kBOWkDL8Q8oiu4naYFBX5tq8j1T\nnrnR5EAEzGW1lugUB1fHtjNa3jyuL7rq2ilv0FqbLVZULE6vRxPcTuRN8ERPIQle\njEcKRyjLlJedYIRSumiurKEN6oL+7lCNhxN4iw/HT1BcSYyAFcb6DJpU4+eMl82Y\nDp5/9NPgegOCrJtloybncXwr/E/wMPmwQ5GkAVs0CTBw4uM9CvhF+wywqSO1HWY=\n=9JLb\n-----END PGP SIGNATURE-----",
        "payload": "tree 8d83e93520114f1cae86a2903557e3f66040bf44\nparent f2a6e8243f2a9405f775d285cb9661929211f829\nparent cccf73db0483cc3945bf8389ce197df35e931e16\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478097041 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478097047 +0100\n\nMerge #9060: trivial: fix bloom filter init to isEmpty = true\n\ncccf73d trivial: fix bloom filter init to isEmpty = true (Robert McLaughlin)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1107653d05a4992cd97bb9e12fd1e8200555f0ec",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1107653d05a4992cd97bb9e12fd1e8200555f0ec",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1107653d05a4992cd97bb9e12fd1e8200555f0ec/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2a6e8243f2a9405f775d285cb9661929211f829",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2a6e8243f2a9405f775d285cb9661929211f829",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2a6e8243f2a9405f775d285cb9661929211f829"
      },
      {
        "sha": "cccf73db0483cc3945bf8389ce197df35e931e16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cccf73db0483cc3945bf8389ce197df35e931e16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cccf73db0483cc3945bf8389ce197df35e931e16"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "d00befc61ca686528cfbba282f2bceb25773887b",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1107653d05a4992cd97bb9e12fd1e8200555f0ec/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1107653d05a4992cd97bb9e12fd1e8200555f0ec/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=1107653d05a4992cd97bb9e12fd1e8200555f0ec",
        "patch": "@@ -34,7 +34,7 @@ CBloomFilter::CBloomFilter(unsigned int nElements, double nFPRate, unsigned int\n      * See https://en.wikipedia.org/wiki/Bloom_filter for an explanation of these formulas\n      */\n     isFull(false),\n-    isEmpty(false),\n+    isEmpty(true),\n     nHashFuncs(min((unsigned int)(vData.size() * 8 / nElements * LN2), MAX_HASH_FUNCS)),\n     nTweak(nTweakIn),\n     nFlags(nFlagsIn)"
      }
    ]
  },
  {
    "sha": "bae81b83d63f9e4b6c564a3e4c3960778fb90458",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWU4MWI4M2Q2M2Y5ZTRiNmM1NjRhM2U0YzM5NjA3NzhmYjkwNDU4",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T14:35:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T14:35:27Z"
      },
      "message": "Merge #8674: tools for analyzing, updating and adding copyright headers in source files\n\n159597a [devtools] script support for managing source file copyright headers (isle2983)",
      "tree": {
        "sha": "ca68911834801b977b85cb86034f25feccf0ff40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca68911834801b977b85cb86034f25feccf0ff40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bae81b83d63f9e4b6c564a3e4c3960778fb90458",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGfmvAAoJEHSBCwEjRsmmJYgH/2QNffmft+m0YLkgRa1rR6PG\nOjcI5iCy746E4/x2mgMi3mv2bpuKF2iwpIubwCJXv7dCbDKDVZGTa7jSinjUcf11\ns/CG4PTi4Vkhp4hV9+2pZBO+wxkbb46R5eLc8ws3C5Q++pyhxTSDHHF/mxecrEIZ\nEqGXEM+weTTf/qp4L0WFrIysdOh+1QLo0RBFZ3N7LqpQCCQknfXS6eWD4ErGACYl\nCC7UoCxS+H+K83j5mBcl+4rIhOcMiE47L/wyVcigW+Jk6/H5vY1EGAb+BPP2fPk9\nhLMI0T/IpvafxHaYYhJ1re/pa1eNTluqU+6hLfx0bPCpX4NhrdzBTIqVT3fJtMU=\n=ve8w\n-----END PGP SIGNATURE-----",
        "payload": "tree ca68911834801b977b85cb86034f25feccf0ff40\nparent 1107653d05a4992cd97bb9e12fd1e8200555f0ec\nparent 159597a2b8967c8bc8106d98705d68932500b58a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478097322 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478097327 +0100\n\nMerge #8674: tools for analyzing, updating and adding copyright headers in source files\n\n159597a [devtools] script support for managing source file copyright headers (isle2983)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae81b83d63f9e4b6c564a3e4c3960778fb90458",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bae81b83d63f9e4b6c564a3e4c3960778fb90458",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae81b83d63f9e4b6c564a3e4c3960778fb90458/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1107653d05a4992cd97bb9e12fd1e8200555f0ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1107653d05a4992cd97bb9e12fd1e8200555f0ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1107653d05a4992cd97bb9e12fd1e8200555f0ec"
      },
      {
        "sha": "159597a2b8967c8bc8106d98705d68932500b58a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/159597a2b8967c8bc8106d98705d68932500b58a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/159597a2b8967c8bc8106d98705d68932500b58a"
      }
    ],
    "stats": {
      "total": 738,
      "additions": 662,
      "deletions": 76
    },
    "files": [
      {
        "sha": "6c0047833f302db75420d78ce70b763b43e5638b",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 52,
        "deletions": 9,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae81b83d63f9e4b6c564a3e4c3960778fb90458/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae81b83d63f9e4b6c564a3e4c3960778fb90458/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=bae81b83d63f9e4b6c564a3e4c3960778fb90458",
        "patch": "@@ -24,21 +24,64 @@ the script should be called from the git root folder as follows.\n ```\n git diff -U0 HEAD~1.. | ./contrib/devtools/clang-format-diff.py -p1 -i -v\n ```\n+copyright\\_header.py\n+====================\n \n-fix-copyright-headers.py\n-========================\n+Provides utilities for managing copyright headers of `The Bitcoin Core\n+developers` in repository source files. It has three subcommands:\n \n-Every year newly updated files need to have its copyright headers updated to reflect the current year.\n-If you run this script from the root folder it will automatically update the year on the copyright header for all\n-source files if these have a git commit from the current year.\n+```\n+$ ./copyright_header.py report <base_directory> [verbose]\n+$ ./copyright_header.py update <base_directory>\n+$ ./copyright_header.py insert <file>\n+```\n+Running these subcommands without arguments displays a usage string.\n \n-For example a file changed in 2015 (with 2015 being the current year):\n+copyright\\_header.py report \\<base\\_directory\\> [verbose]\n+---------------------------------------------------------\n \n-```// Copyright (c) 2009-2013 The Bitcoin Core developers```\n+Produces a report of all copyright header notices found inside the source files\n+of a repository. Useful to quickly visualize the state of the headers.\n+Specifying `verbose` will list the full filenames of files of each category.\n \n-would be changed to:\n+copyright\\_header.py update \\<base\\_directory\\> [verbose]\n+---------------------------------------------------------\n+Updates all the copyright headers of `The Bitcoin Core developers` which were\n+changed in a year more recent than is listed. For example:\n+```\n+// Copyright (c) <firstYear>-<lastYear> The Bitcoin Core developers\n+```\n+will be updated to:\n+```\n+// Copyright (c) <firstYear>-<lastModifiedYear> The Bitcoin Core developers\n+```\n+where `<lastModifiedYear>` is obtained from the `git log` history.\n \n-```// Copyright (c) 2009-2015 The Bitcoin Core developers```\n+This subcommand also handles copyright headers that have only a single year. In\n+those cases:\n+```\n+// Copyright (c) <year> The Bitcoin Core developers\n+```\n+will be updated to:\n+```\n+// Copyright (c) <year>-<lastModifiedYear> The Bitcoin Core developers\n+```\n+where the update is appropriate.\n+\n+copyright\\_header.py insert \\<file\\>\n+------------------------------------\n+Inserts a copyright header for `The Bitcoin Core developers` at the top of the\n+file in either Python or C++ style as determined by the file extension. If the\n+file is a Python file and it has  `#!` starting the first line, the header is\n+inserted in the line below it.\n+\n+The copyright dates will be set to be `<year_introduced>-<current_year>` where\n+`<year_introduced>` is according to the `git log` history. If\n+`<year_introduced>` is equal to `<current_year>`, it will be set as a single\n+year rather than two hyphenated years.\n+\n+If the file already has a copyright for `The Bitcoin Core developers`, the\n+script will exit.\n \n gen-manpages.sh\n ==============="
      },
      {
        "sha": "9f35c378bf54fa6ceed30069bcfb7116d11f9b29",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "added",
        "additions": 610,
        "deletions": 0,
        "changes": 610,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae81b83d63f9e4b6c564a3e4c3960778fb90458/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae81b83d63f9e4b6c564a3e4c3960778fb90458/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=bae81b83d63f9e4b6c564a3e4c3960778fb90458",
        "patch": "@@ -0,0 +1,610 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import re\n+import fnmatch\n+import sys\n+import subprocess\n+import datetime\n+import os\n+\n+################################################################################\n+# file filtering\n+################################################################################\n+\n+EXCLUDE = [\n+    # libsecp256k1:\n+    'src/secp256k1/include/secp256k1.h',\n+    'src/secp256k1/include/secp256k1_ecdh.h',\n+    'src/secp256k1/include/secp256k1_recovery.h',\n+    'src/secp256k1/include/secp256k1_schnorr.h',\n+    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.c',\n+    'src/secp256k1/src/java/org_bitcoin_NativeSecp256k1.h',\n+    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.c',\n+    'src/secp256k1/src/java/org_bitcoin_Secp256k1Context.h',\n+    # auto generated:\n+    'src/univalue/lib/univalue_escapes.h',\n+    'src/qt/bitcoinstrings.cpp',\n+    'src/chainparamsseeds.h',\n+    # other external copyrights:\n+    'src/tinyformat.h',\n+    'src/leveldb/util/env_win.cc',\n+    'src/crypto/ctaes/bench.c',\n+    'qa/rpc-tests/test_framework/bignum.py',\n+    # python init:\n+    '*__init__.py',\n+]\n+EXCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in EXCLUDE]))\n+\n+INCLUDE = ['*.h', '*.cpp', '*.cc', '*.c', '*.py']\n+INCLUDE_COMPILED = re.compile('|'.join([fnmatch.translate(m) for m in INCLUDE]))\n+\n+def applies_to_file(filename):\n+    return ((EXCLUDE_COMPILED.match(filename) is None) and\n+            (INCLUDE_COMPILED.match(filename) is not None))\n+\n+################################################################################\n+# obtain list of files in repo according to INCLUDE and EXCLUDE\n+################################################################################\n+\n+GIT_LS_CMD = 'git ls-files'\n+\n+def call_git_ls():\n+    out = subprocess.check_output(GIT_LS_CMD.split(' '))\n+    return [f for f in out.decode(\"utf-8\").split('\\n') if f != '']\n+\n+def get_filenames_to_examine():\n+    filenames = call_git_ls()\n+    return sorted([filename for filename in filenames if\n+                   applies_to_file(filename)])\n+\n+################################################################################\n+# define and compile regexes for the patterns we are looking for\n+################################################################################\n+\n+\n+COPYRIGHT_WITH_C = 'Copyright \\(c\\)'\n+COPYRIGHT_WITHOUT_C = 'Copyright'\n+ANY_COPYRIGHT_STYLE = '(%s|%s)' % (COPYRIGHT_WITH_C, COPYRIGHT_WITHOUT_C)\n+\n+YEAR = \"20[0-9][0-9]\"\n+YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n+YEAR_LIST = '(%s)(, %s)+' % (YEAR, YEAR)\n+ANY_YEAR_STYLE = '(%s|%s)' % (YEAR_RANGE, YEAR_LIST)\n+ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE = (\"%s %s\" % (ANY_COPYRIGHT_STYLE,\n+                                                ANY_YEAR_STYLE))\n+\n+ANY_COPYRIGHT_COMPILED = re.compile(ANY_COPYRIGHT_STYLE_OR_YEAR_STYLE)\n+\n+def compile_copyright_regex(copyright_style, year_style, name):\n+    return re.compile('%s %s %s' % (copyright_style, year_style, name))\n+\n+EXPECTED_HOLDER_NAMES = [\n+    \"Satoshi Nakamoto\\n\",\n+    \"The Bitcoin Core developers\\n\",\n+    \"The Bitcoin Core developers \\n\",\n+    \"Bitcoin Core Developers\\n\",\n+    \"the Bitcoin Core developers\\n\",\n+    \"The Bitcoin developers\\n\",\n+    \"The LevelDB Authors\\. All rights reserved\\.\\n\",\n+    \"BitPay Inc\\.\\n\",\n+    \"BitPay, Inc\\.\\n\",\n+    \"University of Illinois at Urbana-Champaign\\.\\n\",\n+    \"MarcoFalke\\n\",\n+    \"Pieter Wuille\\n\",\n+    \"Pieter Wuille +\\*\\n\",\n+    \"Pieter Wuille, Gregory Maxwell +\\*\\n\",\n+    \"Pieter Wuille, Andrew Poelstra +\\*\\n\",\n+    \"Andrew Poelstra +\\*\\n\",\n+    \"Wladimir J. van der Laan\\n\",\n+    \"Jeff Garzik\\n\",\n+    \"Diederik Huys, Pieter Wuille +\\*\\n\",\n+    \"Thomas Daede, Cory Fields +\\*\\n\",\n+    \"Jan-Klaas Kollhof\\n\",\n+    \"Sam Rushing\\n\",\n+    \"ArtForz -- public domain half-a-node\\n\",\n+]\n+\n+DOMINANT_STYLE_COMPILED = {}\n+YEAR_LIST_STYLE_COMPILED = {}\n+WITHOUT_C_STYLE_COMPILED = {}\n+\n+for holder_name in EXPECTED_HOLDER_NAMES:\n+    DOMINANT_STYLE_COMPILED[holder_name] = (\n+        compile_copyright_regex(COPYRIGHT_WITH_C, YEAR_RANGE, holder_name))\n+    YEAR_LIST_STYLE_COMPILED[holder_name] = (\n+        compile_copyright_regex(COPYRIGHT_WITH_C, YEAR_LIST, holder_name))\n+    WITHOUT_C_STYLE_COMPILED[holder_name] = (\n+        compile_copyright_regex(COPYRIGHT_WITHOUT_C, ANY_YEAR_STYLE,\n+                                holder_name))\n+\n+################################################################################\n+# search file contents for copyright message of particular category\n+################################################################################\n+\n+def get_count_of_copyrights_of_any_style_any_holder(contents):\n+    return len(ANY_COPYRIGHT_COMPILED.findall(contents))\n+\n+def file_has_dominant_style_copyright_for_holder(contents, holder_name):\n+    match = DOMINANT_STYLE_COMPILED[holder_name].search(contents)\n+    return match is not None\n+\n+def file_has_year_list_style_copyright_for_holder(contents, holder_name):\n+    match = YEAR_LIST_STYLE_COMPILED[holder_name].search(contents)\n+    return match is not None\n+\n+def file_has_without_c_style_copyright_for_holder(contents, holder_name):\n+    match = WITHOUT_C_STYLE_COMPILED[holder_name].search(contents)\n+    return match is not None\n+\n+################################################################################\n+# get file info\n+################################################################################\n+\n+def read_file(filename):\n+    return open(os.path.abspath(filename), 'r').read()\n+\n+def gather_file_info(filename):\n+    info = {}\n+    info['filename'] = filename\n+    c = read_file(filename)\n+    info['contents'] = c\n+\n+    info['all_copyrights'] = get_count_of_copyrights_of_any_style_any_holder(c)\n+\n+    info['classified_copyrights'] = 0\n+    info['dominant_style'] = {}\n+    info['year_list_style'] = {}\n+    info['without_c_style'] = {}\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        has_dominant_style = (\n+            file_has_dominant_style_copyright_for_holder(c, holder_name))\n+        has_year_list_style = (\n+            file_has_year_list_style_copyright_for_holder(c, holder_name))\n+        has_without_c_style = (\n+            file_has_without_c_style_copyright_for_holder(c, holder_name))\n+        info['dominant_style'][holder_name] = has_dominant_style\n+        info['year_list_style'][holder_name] = has_year_list_style\n+        info['without_c_style'][holder_name] = has_without_c_style\n+        if has_dominant_style or has_year_list_style or has_without_c_style:\n+            info['classified_copyrights'] = info['classified_copyrights'] + 1\n+    return info\n+\n+################################################################################\n+# report execution\n+################################################################################\n+\n+SEPARATOR = '-'.join(['' for _ in range(80)])\n+\n+def print_filenames(filenames, verbose):\n+    if not verbose:\n+        return\n+    for filename in filenames:\n+        print(\"\\t%s\" % filename)\n+\n+def print_report(file_infos, verbose):\n+    print(SEPARATOR)\n+    examined = [i['filename'] for i in file_infos]\n+    print(\"%d files examined according to INCLUDE and EXCLUDE fnmatch rules\" %\n+          len(examined))\n+    print_filenames(examined, verbose)\n+\n+    print(SEPARATOR)\n+    print('')\n+    zero_copyrights = [i['filename'] for i in file_infos if\n+                       i['all_copyrights'] == 0]\n+    print(\"%4d with zero copyrights\" % len(zero_copyrights))\n+    print_filenames(zero_copyrights, verbose)\n+    one_copyright = [i['filename'] for i in file_infos if\n+                     i['all_copyrights'] == 1]\n+    print(\"%4d with one copyright\" % len(one_copyright))\n+    print_filenames(one_copyright, verbose)\n+    two_copyrights = [i['filename'] for i in file_infos if\n+                      i['all_copyrights'] == 2]\n+    print(\"%4d with two copyrights\" % len(two_copyrights))\n+    print_filenames(two_copyrights, verbose)\n+    three_copyrights = [i['filename'] for i in file_infos if\n+                        i['all_copyrights'] == 3]\n+    print(\"%4d with three copyrights\" % len(three_copyrights))\n+    print_filenames(three_copyrights, verbose)\n+    four_or_more_copyrights = [i['filename'] for i in file_infos if\n+                               i['all_copyrights'] >= 4]\n+    print(\"%4d with four or more copyrights\" % len(four_or_more_copyrights))\n+    print_filenames(four_or_more_copyrights, verbose)\n+    print('')\n+    print(SEPARATOR)\n+    print('Copyrights with dominant style:\\ne.g. \"Copyright (c)\" and '\n+          '\"<year>\" or \"<startYear>-<endYear>\":\\n')\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        dominant_style = [i['filename'] for i in file_infos if\n+                          i['dominant_style'][holder_name]]\n+        if len(dominant_style) > 0:\n+            print(\"%4d with '%s'\" % (len(dominant_style),\n+                                     holder_name.replace('\\n', '\\\\n')))\n+            print_filenames(dominant_style, verbose)\n+    print('')\n+    print(SEPARATOR)\n+    print('Copyrights with year list style:\\ne.g. \"Copyright (c)\" and '\n+          '\"<year1>, <year2>, ...\":\\n')\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        year_list_style = [i['filename'] for i in file_infos if\n+                           i['year_list_style'][holder_name]]\n+        if len(year_list_style) > 0:\n+            print(\"%4d with '%s'\" % (len(year_list_style),\n+                                     holder_name.replace('\\n', '\\\\n')))\n+            print_filenames(year_list_style, verbose)\n+    print('')\n+    print(SEPARATOR)\n+    print('Copyrights with no \"(c)\" style:\\ne.g. \"Copyright\" and \"<year>\" or '\n+          '\"<startYear>-<endYear>\":\\n')\n+    for holder_name in EXPECTED_HOLDER_NAMES:\n+        without_c_style = [i['filename'] for i in file_infos if\n+                           i['without_c_style'][holder_name]]\n+        if len(without_c_style) > 0:\n+            print(\"%4d with '%s'\" % (len(without_c_style),\n+                                     holder_name.replace('\\n', '\\\\n')))\n+            print_filenames(without_c_style, verbose)\n+\n+    print('')\n+    print(SEPARATOR)\n+\n+    unclassified_copyrights = [i['filename'] for i in file_infos if\n+                               i['classified_copyrights'] < i['all_copyrights']]\n+    print(\"%d with unexpected copyright holder names\" %\n+          len(unclassified_copyrights))\n+    print_filenames(unclassified_copyrights, verbose)\n+    print(SEPARATOR)\n+\n+def exec_report(base_directory, verbose):\n+    original_cwd = os.getcwd()\n+    os.chdir(base_directory)\n+    filenames = get_filenames_to_examine()\n+    file_infos = [gather_file_info(f) for f in filenames]\n+    print_report(file_infos, verbose)\n+    os.chdir(original_cwd)\n+\n+################################################################################\n+# report cmd\n+################################################################################\n+\n+REPORT_USAGE = \"\"\"\n+Produces a report of all copyright header notices found inside the source files\n+of a repository.\n+\n+Usage:\n+    $ ./copyright_header.py report <base_directory> [verbose]\n+\n+Arguments:\n+    <base_directory> - The base directory of a bitcoin source code repository.\n+    [verbose] - Includes a list of every file of each subcategory in the report.\n+\"\"\"\n+\n+def report_cmd(argv):\n+    if len(argv) == 2:\n+        sys.exit(REPORT_USAGE)\n+        \n+    base_directory = argv[2]\n+    if not os.path.exists(base_directory):\n+        sys.exit(\"*** bad <base_directory>: %s\" % base_directory)\n+\n+    if len(argv) == 3:\n+        verbose = False\n+    elif argv[3] == 'verbose':\n+        verbose = True\n+    else:\n+        sys.exit(\"*** unknown argument: %s\" % argv[2])\n+\n+    exec_report(base_directory, verbose)\n+\n+################################################################################\n+# query git for year of last change\n+################################################################################\n+\n+GIT_LOG_CMD = \"git log --pretty=format:%%ai %s\"\n+\n+def call_git_log(filename):\n+    out = subprocess.check_output((GIT_LOG_CMD % filename).split(' '))\n+    return out.decode(\"utf-8\").split('\\n')\n+\n+def get_git_change_years(filename):\n+    git_log_lines = call_git_log(filename)\n+    if len(git_log_lines) == 0:\n+        return [datetime.date.today().year]\n+    # timestamp is in ISO 8601 format. e.g. \"2016-09-05 14:25:32 -0600\"\n+    return [line.split(' ')[0].split('-')[0] for line in git_log_lines]\n+\n+def get_most_recent_git_change_year(filename):\n+    return max(get_git_change_years(filename))\n+\n+################################################################################\n+# read and write to file\n+################################################################################\n+\n+def read_file_lines(filename):\n+    f = open(os.path.abspath(filename), 'r')\n+    file_lines = f.readlines()\n+    f.close()\n+    return file_lines\n+\n+def write_file_lines(filename, file_lines):\n+    f = open(os.path.abspath(filename), 'w')\n+    f.write(''.join(file_lines))\n+    f.close()\n+\n+################################################################################\n+# update header years execution\n+################################################################################\n+\n+COPYRIGHT = 'Copyright \\(c\\)'\n+YEAR = \"20[0-9][0-9]\"\n+YEAR_RANGE = '(%s)(-%s)?' % (YEAR, YEAR)\n+HOLDER = 'The Bitcoin Core developers'\n+UPDATEABLE_LINE_COMPILED = re.compile(' '.join([COPYRIGHT, YEAR_RANGE, HOLDER]))\n+\n+def get_updatable_copyright_line(file_lines):\n+    index = 0\n+    for line in file_lines:\n+        if UPDATEABLE_LINE_COMPILED.search(line) is not None:\n+            return index, line\n+        index = index + 1\n+    return None, None\n+\n+def parse_year_range(year_range):\n+    year_split = year_range.split('-')\n+    start_year = year_split[0]\n+    if len(year_split) == 1:\n+        return start_year, start_year\n+    return start_year, year_split[1]\n+\n+def year_range_to_str(start_year, end_year):\n+    if start_year == end_year:\n+        return start_year\n+    return \"%s-%s\" % (start_year, end_year)\n+\n+def create_updated_copyright_line(line, last_git_change_year):\n+    copyright_splitter = 'Copyright (c) '\n+    copyright_split = line.split(copyright_splitter)\n+    # Preserve characters on line that are ahead of the start of the copyright\n+    # notice - they are part of the comment block and vary from file-to-file.\n+    before_copyright = copyright_split[0]\n+    after_copyright = copyright_split[1]\n+\n+    space_split = after_copyright.split(' ')\n+    year_range = space_split[0]\n+    start_year, end_year = parse_year_range(year_range)\n+    if end_year == last_git_change_year:\n+        return line\n+    return (before_copyright + copyright_splitter +\n+            year_range_to_str(start_year, last_git_change_year) + ' ' +\n+            ' '.join(space_split[1:]))\n+\n+def update_updatable_copyright(filename):\n+    file_lines = read_file_lines(filename)\n+    index, line = get_updatable_copyright_line(file_lines)\n+    if not line:\n+        print_file_action_message(filename, \"No updatable copyright.\")\n+        return\n+    last_git_change_year = get_most_recent_git_change_year(filename)\n+    new_line = create_updated_copyright_line(line, last_git_change_year)\n+    if line == new_line:\n+        print_file_action_message(filename, \"Copyright up-to-date.\")\n+        return\n+    file_lines[index] = new_line\n+    write_file_lines(filename, file_lines)\n+    print_file_action_message(filename,\n+                              \"Copyright updated! -> %s\" % last_git_change_year)\n+\n+def exec_update_header_year(base_directory):\n+    original_cwd = os.getcwd()\n+    os.chdir(base_directory)\n+    for filename in get_filenames_to_examine():\n+        update_updatable_copyright(filename)\n+    os.chdir(original_cwd)\n+\n+################################################################################\n+# update cmd\n+################################################################################\n+\n+UPDATE_USAGE = \"\"\"\n+Updates all the copyright headers of \"The Bitcoin Core developers\" which were\n+changed in a year more recent than is listed. For example:\n+\n+// Copyright (c) <firstYear>-<lastYear> The Bitcoin Core developers\n+\n+will be updated to:\n+\n+// Copyright (c) <firstYear>-<lastModifiedYear> The Bitcoin Core developers\n+\n+where <lastModifiedYear> is obtained from the 'git log' history.\n+\n+This subcommand also handles copyright headers that have only a single year. In those cases:\n+\n+// Copyright (c) <year> The Bitcoin Core developers\n+\n+will be updated to:\n+\n+// Copyright (c) <year>-<lastModifiedYear> The Bitcoin Core developers\n+\n+where the update is appropriate.\n+\n+Usage:\n+    $ ./copyright_header.py update <base_directory>\n+\n+Arguments:\n+    <base_directory> - The base directory of a bitcoin source code repository.\n+\"\"\"\n+\n+def print_file_action_message(filename, action):\n+    print(\"%-52s %s\" % (filename, action))\n+\n+def update_cmd(argv):\n+    if len(argv) != 3:\n+        sys.exit(UPDATE_USAGE)\n+    \n+    base_directory = argv[2]\n+    if not os.path.exists(base_directory):\n+        sys.exit(\"*** bad base_directory: %s\" % base_directory)\n+    exec_update_header_year(base_directory)\n+\n+################################################################################\n+# inserted copyright header format\n+################################################################################\n+\n+def get_header_lines(header, start_year, end_year):\n+    lines = header.split('\\n')[1:-1]\n+    lines[0] = lines[0] % year_range_to_str(start_year, end_year)\n+    return [line + '\\n' for line in lines]\n+\n+CPP_HEADER = '''\n+// Copyright (c) %s The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+\n+def get_cpp_header_lines_to_insert(start_year, end_year):\n+    return reversed(get_header_lines(CPP_HEADER, start_year, end_year))\n+\n+PYTHON_HEADER = '''\n+# Copyright (c) %s The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+\n+def get_python_header_lines_to_insert(start_year, end_year):\n+    return reversed(get_header_lines(PYTHON_HEADER, start_year, end_year))\n+\n+################################################################################\n+# query git for year of last change\n+################################################################################\n+\n+def get_git_change_year_range(filename):\n+    years = get_git_change_years(filename)\n+    return min(years), max(years)\n+\n+################################################################################\n+# check for existing core copyright\n+################################################################################\n+\n+def file_already_has_core_copyright(file_lines):\n+    index, _ = get_updatable_copyright_line(file_lines)\n+    return index != None\n+\n+################################################################################\n+# insert header execution\n+################################################################################\n+\n+def file_has_hashbang(file_lines):\n+    if len(file_lines) < 1:\n+        return False\n+    if len(file_lines[0]) <= 2:\n+        return False\n+    return file_lines[0][:2] == '#!'\n+\n+def insert_python_header(filename, file_lines, start_year, end_year):\n+    if file_has_hashbang(file_lines):\n+        insert_idx = 1 \n+    else:\n+        insert_idx = 0\n+    header_lines = get_python_header_lines_to_insert(start_year, end_year)\n+    for line in header_lines:\n+        file_lines.insert(insert_idx, line)\n+    write_file_lines(filename, file_lines)\n+\n+def insert_cpp_header(filename, file_lines, start_year, end_year):\n+    header_lines = get_cpp_header_lines_to_insert(start_year, end_year)\n+    for line in header_lines:\n+        file_lines.insert(0, line)\n+    write_file_lines(filename, file_lines)\n+\n+def exec_insert_header(filename, style):\n+    file_lines = read_file_lines(filename)\n+    if file_already_has_core_copyright(file_lines):\n+        sys.exit('*** %s already has a copyright by The Bitcoin Core developers'\n+                 % (filename))\n+    start_year, end_year = get_git_change_year_range(filename)\n+    if style == 'python':\n+        insert_python_header(filename, file_lines, start_year, end_year)\n+    else:\n+        insert_cpp_header(filename, file_lines, start_year, end_year)\n+\n+################################################################################\n+# insert cmd\n+################################################################################\n+\n+INSERT_USAGE = \"\"\"\n+Inserts a copyright header for \"The Bitcoin Core developers\" at the top of the\n+file in either Python or C++ style as determined by the file extension. If the\n+file is a Python file and it has a '#!' starting the first line, the header is\n+inserted in the line below it.\n+\n+The copyright dates will be set to be:\n+\n+\"<year_introduced>-<current_year>\"\n+\n+where <year_introduced> is according to the 'git log' history. If\n+<year_introduced> is equal to <current_year>, the date will be set to be:\n+\n+\"<current_year>\"\n+\n+If the file already has a copyright for \"The Bitcoin Core developers\", the\n+script will exit.\n+\n+Usage:\n+    $ ./copyright_header.py insert <file>\n+\n+Arguments:\n+    <file> - A source file in the bitcoin repository.\n+\"\"\"\n+\n+def insert_cmd(argv):\n+    if len(argv) != 3:\n+        sys.exit(INSERT_USAGE)\n+\n+    filename = argv[2]\n+    if not os.path.isfile(filename):\n+        sys.exit(\"*** bad filename: %s\" % filename)\n+    _, extension = os.path.splitext(filename)\n+    if extension not in ['.h', '.cpp', '.cc', '.c', '.py']:\n+        sys.exit(\"*** cannot insert for file extension %s\" % extension)\n+   \n+    if extension == '.py': \n+        style = 'python'\n+    else:\n+        style = 'cpp'\n+    exec_insert_header(filename, style)\n+         \n+################################################################################\n+# UI\n+################################################################################\n+\n+USAGE = \"\"\"\n+copyright_header.py - utilities for managing copyright headers of 'The Bitcoin\n+Core developers' in repository source files.\n+\n+Usage:\n+    $ ./copyright_header <subcommand>\n+\n+Subcommands:\n+    report\n+    update\n+    insert\n+\n+To see subcommand usage, run them without arguments.\n+\"\"\"\n+\n+SUBCOMMANDS = ['report', 'update', 'insert']\n+\n+if __name__ == \"__main__\":\n+    if len(sys.argv) == 1:\n+        sys.exit(USAGE)\n+    subcommand = sys.argv[1]\n+    if subcommand not in SUBCOMMANDS:\n+        sys.exit(USAGE)\n+    if subcommand == 'report':\n+        report_cmd(sys.argv)\n+    elif subcommand == 'update':\n+        update_cmd(sys.argv)\n+    elif subcommand == 'insert':\n+        insert_cmd(sys.argv)"
      },
      {
        "sha": "54836bd83f592964296ce8a8b6bce2281f069b4f",
        "filename": "contrib/devtools/fix-copyright-headers.py",
        "status": "removed",
        "additions": 0,
        "deletions": 67,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1107653d05a4992cd97bb9e12fd1e8200555f0ec/contrib/devtools/fix-copyright-headers.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1107653d05a4992cd97bb9e12fd1e8200555f0ec/contrib/devtools/fix-copyright-headers.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/fix-copyright-headers.py?ref=1107653d05a4992cd97bb9e12fd1e8200555f0ec",
        "patch": "@@ -1,67 +0,0 @@\n-#!/usr/bin/env python3\n-\"\"\"\n-Run this script to update all the copyright headers of files\n-that were changed this year.\n-\n-For example:\n-\n-// Copyright (c) 2009-2012 The Bitcoin Core developers\n-\n-it will change it to\n-\n-// Copyright (c) 2009-2015 The Bitcoin Core developers\n-\"\"\"\n-import subprocess\n-import time\n-import re\n-\n-CMD_GIT_LIST_FILES = ['git', 'ls-files']\n-CMD_GIT_DATE = ['git', 'log', '--format=%ad', '--date=short', '-1']\n-CMD_PERL_REGEX = ['perl', '-pi', '-e']\n-REGEX_TEMPLATE = 's/(20\\\\d\\\\d)(?:-20\\\\d\\\\d)? The Bitcoin/$1-%s The Bitcoin/'\n-\n-FOLDERS = [\"qa/\", \"src/\"]\n-EXTENSIONS = [\".cpp\",\".h\", \".py\"]\n-\n-\n-def get_git_date(file_path):\n-    d = subprocess.run(CMD_GIT_DATE + [file_path],\n-                       stdout=subprocess.PIPE,\n-                       check=True,\n-                       universal_newlines=True).stdout\n-    # yyyy-mm-dd\n-    return d.split('-')[0]\n-\n-\n-def skip_file(file_path):\n-    for ext in EXTENSIONS:\n-        if file_path.endswith(ext):\n-            return False\n-    else:\n-        return True\n-\n-if __name__ == \"__main__\":\n-    year = str(time.gmtime()[0])\n-    regex_current = re.compile(\"%s The Bitcoin\" % year)\n-    n = 1\n-    for folder in FOLDERS:\n-        for file_path in subprocess.run(\n-            CMD_GIT_LIST_FILES + [folder],\n-            stdout=subprocess.PIPE,\n-            check=True,\n-            universal_newlines=True\n-        ).stdout.split(\"\\n\"):\n-            if skip_file(file_path):\n-                # print(file_path, \"(skip)\")\n-                continue\n-            git_date = get_git_date(file_path)\n-            if not year == git_date:\n-                # print(file_path, year, \"(skip)\")\n-                continue\n-            if regex_current.search(open(file_path, \"r\").read()) is not None:\n-                # already up to date\n-                # print(file_path, year, \"(skip)\")\n-                continue\n-            print(n, file_path, \"(update to %s)\" % year)\n-            subprocess.run(CMD_PERL_REGEX + [REGEX_TEMPLATE % year, file_path], check=True)\n-            n = n + 1"
      }
    ]
  },
  {
    "sha": "a4fd8dff68369de497354574624b740f42175b1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNGZkOGRmZjY4MzY5ZGU0OTczNTQ1NzQ2MjRiNzQwZjQyMTc1YjFi",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T14:37:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T14:37:42Z"
      },
      "message": "Merge #8828: Move CWalletDB::ReorderTransactions to CWallet\n\n86029e7 Move CWalletDB::ReorderTransactions to CWallet (Patrick Strateman)",
      "tree": {
        "sha": "b90e439d4a4ecad37903425f005ae8c366388d59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b90e439d4a4ecad37903425f005ae8c366388d59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a4fd8dff68369de497354574624b740f42175b1b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGfo2AAoJEHSBCwEjRsmmFCUH/0cczUXLFoYS05o9E2kB9PNS\n5EguoKb0dy/hSgZjDsSnKP9uYPL9VjYCDm3zR42MKkNUPQQY8MCCWTRBsHSELP66\nJN9hyisKyVaws99nObhWozY4epcWMqaqSMeOHqCnsWrSEwyTA8Fm5KIpHkwjeliz\nK1mqZfbY2E2wONvHnMTt6FiyCFZGbQpFYYsMw3dG3mvj46AVeqVHyoo5yCR0rkwS\nWbWCWxRSOeWQc7sZtzrkaYju3Uo+szersfg0dq0gklwJND+ojiCY3AnT95KZ3f2K\nyWm0jkh2kpD48qv5kztRkD0Yo5+o+BjUmLbBlmKyYXeUDx6A2fvtQwT8jFF11ck=\n=PImP\n-----END PGP SIGNATURE-----",
        "payload": "tree b90e439d4a4ecad37903425f005ae8c366388d59\nparent bae81b83d63f9e4b6c564a3e4c3960778fb90458\nparent 86029e72c96436605f47153c1f09e151e1847c28\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478097442 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478097462 +0100\n\nMerge #8828: Move CWalletDB::ReorderTransactions to CWallet\n\n86029e7 Move CWalletDB::ReorderTransactions to CWallet (Patrick Strateman)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bae81b83d63f9e4b6c564a3e4c3960778fb90458",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae81b83d63f9e4b6c564a3e4c3960778fb90458",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bae81b83d63f9e4b6c564a3e4c3960778fb90458"
      },
      {
        "sha": "86029e72c96436605f47153c1f09e151e1847c28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86029e72c96436605f47153c1f09e151e1847c28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86029e72c96436605f47153c1f09e151e1847c28"
      }
    ],
    "stats": {
      "total": 154,
      "additions": 74,
      "deletions": 80
    },
    "files": [
      {
        "sha": "9e19138099eb6d6de79f0fa15730377f54c18873",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 1,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4fd8dff68369de497354574624b740f42175b1b/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4fd8dff68369de497354574624b740f42175b1b/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a4fd8dff68369de497354574624b740f42175b1b",
        "patch": "@@ -658,8 +658,79 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n DBErrors CWallet::ReorderTransactions()\n {\n+    LOCK(cs_wallet);\n     CWalletDB walletdb(strWalletFile);\n-    return walletdb.ReorderTransactions(this);\n+\n+    // Old wallets didn't have any defined order for transactions\n+    // Probably a bad idea to change the output of this\n+\n+    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n+    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n+    typedef multimap<int64_t, TxPair > TxItems;\n+    TxItems txByTime;\n+\n+    for (map<uint256, CWalletTx>::iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n+    {\n+        CWalletTx* wtx = &((*it).second);\n+        txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n+    }\n+    list<CAccountingEntry> acentries;\n+    walletdb.ListAccountCreditDebit(\"\", acentries);\n+    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n+    {\n+        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n+    }\n+\n+    nOrderPosNext = 0;\n+    std::vector<int64_t> nOrderPosOffsets;\n+    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n+    {\n+        CWalletTx *const pwtx = (*it).second.first;\n+        CAccountingEntry *const pacentry = (*it).second.second;\n+        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+\n+        if (nOrderPos == -1)\n+        {\n+            nOrderPos = nOrderPosNext++;\n+            nOrderPosOffsets.push_back(nOrderPos);\n+\n+            if (pwtx)\n+            {\n+                if (!walletdb.WriteTx(*pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+        else\n+        {\n+            int64_t nOrderPosOff = 0;\n+            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n+            {\n+                if (nOrderPos >= nOffsetStart)\n+                    ++nOrderPosOff;\n+            }\n+            nOrderPos += nOrderPosOff;\n+            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n+\n+            if (!nOrderPosOff)\n+                continue;\n+\n+            // Since we're changing the order, write it back\n+            if (pwtx)\n+            {\n+                if (!walletdb.WriteTx(*pwtx))\n+                    return DB_LOAD_FAIL;\n+            }\n+            else\n+                if (!walletdb.WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n+                    return DB_LOAD_FAIL;\n+        }\n+    }\n+    walletdb.WriteOrderPosNext(nOrderPosNext);\n+\n+    return DB_LOAD_OK;\n }\n \n int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)"
      },
      {
        "sha": "43fd6a20adc819b639a9a08a8487908c28d1adae",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 77,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4fd8dff68369de497354574624b740f42175b1b/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4fd8dff68369de497354574624b740f42175b1b/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=a4fd8dff68369de497354574624b740f42175b1b",
        "patch": "@@ -251,82 +251,6 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n     pcursor->close();\n }\n \n-DBErrors CWalletDB::ReorderTransactions(CWallet* pwallet)\n-{\n-    LOCK(pwallet->cs_wallet);\n-    // Old wallets didn't have any defined order for transactions\n-    // Probably a bad idea to change the output of this\n-\n-    // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n-    typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef multimap<int64_t, TxPair > TxItems;\n-    TxItems txByTime;\n-\n-    for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n-    {\n-        CWalletTx* wtx = &((*it).second);\n-        txByTime.insert(make_pair(wtx->nTimeReceived, TxPair(wtx, (CAccountingEntry*)0)));\n-    }\n-    list<CAccountingEntry> acentries;\n-    ListAccountCreditDebit(\"\", acentries);\n-    BOOST_FOREACH(CAccountingEntry& entry, acentries)\n-    {\n-        txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n-    }\n-\n-    int64_t& nOrderPosNext = pwallet->nOrderPosNext;\n-    nOrderPosNext = 0;\n-    std::vector<int64_t> nOrderPosOffsets;\n-    for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n-    {\n-        CWalletTx *const pwtx = (*it).second.first;\n-        CAccountingEntry *const pacentry = (*it).second.second;\n-        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n-\n-        if (nOrderPos == -1)\n-        {\n-            nOrderPos = nOrderPosNext++;\n-            nOrderPosOffsets.push_back(nOrderPos);\n-\n-            if (pwtx)\n-            {\n-                if (!WriteTx(*pwtx))\n-                    return DB_LOAD_FAIL;\n-            }\n-            else\n-                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-                    return DB_LOAD_FAIL;\n-        }\n-        else\n-        {\n-            int64_t nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n-            {\n-                if (nOrderPos >= nOffsetStart)\n-                    ++nOrderPosOff;\n-            }\n-            nOrderPos += nOrderPosOff;\n-            nOrderPosNext = std::max(nOrderPosNext, nOrderPos + 1);\n-\n-            if (!nOrderPosOff)\n-                continue;\n-\n-            // Since we're changing the order, write it back\n-            if (pwtx)\n-            {\n-                if (!WriteTx(*pwtx))\n-                    return DB_LOAD_FAIL;\n-            }\n-            else\n-                if (!WriteAccountingEntry(pacentry->nEntryNo, *pacentry))\n-                    return DB_LOAD_FAIL;\n-        }\n-    }\n-    WriteOrderPosNext(nOrderPosNext);\n-\n-    return DB_LOAD_OK;\n-}\n-\n class CWalletScanState {\n public:\n     unsigned int nKeys;\n@@ -711,7 +635,7 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         WriteVersion(CLIENT_VERSION);\n \n     if (wss.fAnyUnordered)\n-        result = ReorderTransactions(pwallet);\n+        result = pwallet->ReorderTransactions();\n \n     pwallet->laccentries.clear();\n     ListAccountCreditDebit(\"*\", pwallet->laccentries);"
      },
      {
        "sha": "a0525bd9a7ce8d99b29ff7b18950815e3ff89f6c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4fd8dff68369de497354574624b740f42175b1b/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4fd8dff68369de497354574624b740f42175b1b/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=a4fd8dff68369de497354574624b740f42175b1b",
        "patch": "@@ -153,6 +153,7 @@ class CWalletDB : public CDB\n \n     /// This writes directly to the database, and will not update the CWallet's cached accounting entries!\n     /// Use wallet.AddAccountingEntry instead, to write *and* update its caches.\n+    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n     bool WriteAccountingEntry_Backend(const CAccountingEntry& acentry);\n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n@@ -165,7 +166,6 @@ class CWalletDB : public CDB\n     CAmount GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n-    DBErrors ReorderTransactions(CWallet* pwallet);\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n@@ -180,7 +180,6 @@ class CWalletDB : public CDB\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);\n \n-    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n };\n \n void ThreadFlushWalletDB(const std::string& strFile);"
      }
    ]
  },
  {
    "sha": "eedc4618820ea4acc5a34a7761a3511ede95dc9e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZWRjNDYxODgyMGVhNGFjYzVhMzRhNzc2MWEzNTExZWRlOTVkYzll",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T17:16:32Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T17:19:43Z"
      },
      "message": "Merge `doc/unit-tests.md` into `src/test/README.md`\n\nRefer to the right file in the top-level README.md.\n\nHaving only one file with test documentation saves some confusion about\nwhere things are documented.",
      "tree": {
        "sha": "c495cc72e85986ce769d13e6e4da139172a12f29",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c495cc72e85986ce769d13e6e4da139172a12f29"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/eedc4618820ea4acc5a34a7761a3511ede95dc9e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eedc4618820ea4acc5a34a7761a3511ede95dc9e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/eedc4618820ea4acc5a34a7761a3511ede95dc9e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eedc4618820ea4acc5a34a7761a3511ede95dc9e/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "38a90dde4969f6a00ce1ceb17df7c2d8dd532605",
        "filename": "README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eedc4618820ea4acc5a34a7761a3511ede95dc9e/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eedc4618820ea4acc5a34a7761a3511ede95dc9e/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "patch": "@@ -49,9 +49,10 @@ lots of money.\n \n ### Automated Testing\n \n-Developers are strongly encouraged to write [unit tests](/doc/unit-tests.md) for new code, and to\n+Developers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run\n-(assuming they weren't disabled in configure) with: `make check`\n+(assuming they weren't disabled in configure) with: `make check`. Further details on running\n+and extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n \n There are also [regression and integration tests](/qa) of the RPC interface, written\n in Python, that are run automatically on the build server."
      },
      {
        "sha": "8b9c0ea2625f0a94a4c0812813c3d6517c3328f4",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eedc4618820ea4acc5a34a7761a3511ede95dc9e/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eedc4618820ea4acc5a34a7761a3511ede95dc9e/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "patch": "@@ -53,7 +53,6 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n-- [Unit Tests](unit-tests.md)\n - [Travis CI](travis-ci.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)"
      },
      {
        "sha": "afaece829c77d4832364231db459f25c23450e49",
        "filename": "doc/unit-tests.md",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a4fd8dff68369de497354574624b740f42175b1b/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a4fd8dff68369de497354574624b740f42175b1b/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=a4fd8dff68369de497354574624b740f42175b1b",
        "patch": "@@ -1,18 +0,0 @@\n-Compiling/running unit tests\n-------------------------------------\n-\n-Unit tests will be automatically compiled if dependencies were met in `./configure`\n-and tests weren't explicitly disabled.\n-\n-After configuring, they can be run with `make check`.\n-\n-To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n-\n-To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n-.cpp files in the `test/` directory or add new .cpp files that\n-implement new BOOST_AUTO_TEST_SUITE sections.\n-\n-To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n-\n-To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n-the `src/qt/test/test_main.cpp` file."
      },
      {
        "sha": "8f99804e100ddf4049dc11efae2ccdca5b8c1599",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 34,
        "deletions": 13,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/eedc4618820ea4acc5a34a7761a3511ede95dc9e/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/eedc4618820ea4acc5a34a7761a3511ede95dc9e/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "patch": "@@ -1,4 +1,36 @@\n-# Notes\n+### Compiling/running unit tests\n+\n+Unit tests will be automatically compiled if dependencies were met in `./configure`\n+and tests weren't explicitly disabled.\n+\n+After configuring, they can be run with `make check`.\n+\n+To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n+\n+To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+.cpp files in the `test/` directory or add new .cpp files that\n+implement new BOOST_AUTO_TEST_SUITE sections.\n+\n+To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n+\n+To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+the `src/qt/test/test_main.cpp` file.\n+\n+### Running individual tests\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run `test_bitcoin --help` for the full list.\n+\n+### Note on adding test cases\n+\n The sources in this directory are unit test cases.  Boost includes a\n unit testing framework, and since bitcoin already uses boost, it makes\n sense to simply use this framework rather than require developers to\n@@ -19,22 +51,11 @@ For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n [http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n \n-test_bitcoin has some built-in command-line arguments; for\n-example, to run just the getarg_tests verbosely:\n-\n-    test_bitcoin --log_level=all --run_test=getarg_tests\n-\n-... or to run just the doubledash test:\n-\n-    test_bitcoin --run_test=getarg_tests/doubledash\n-\n-Run `test_bitcoin --help` for the full list.\n-\n ### bitcoin-util-test.py\n \n The test directory also contains the bitcoin-util-test.py tool, which tests bitcoin utils (currently just bitcoin-tx). This test gets run automatically during the `make check` build process. It is also possible to run the test manually from the src directory:\n \n ```\n test/bitcoin-util-test.py --srcdir=[current directory]\n \n-```\n\\ No newline at end of file\n+```"
      }
    ]
  },
  {
    "sha": "32c0d6e1d2b360501370efef40468ca28cc2cd89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmMwZDZlMWQyYjM2MDUwMTM3MGVmZWY0MDQ2OGNhMjhjYzJjZDg5",
    "commit": {
      "author": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-10-24T11:49:25Z"
      },
      "committer": {
        "name": "jnewbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-02T18:16:57Z"
      },
      "message": "Add logging to bitcoin-util-test.py\n\n- Use the python standard logging library\n- Run all tests and report all failing test-cases (rather than stop after one test case fails)\n- If output is different from expected output, log a contextual diff.",
      "tree": {
        "sha": "42532dc1e93d85ecf97724d30bb6e104cf11c2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42532dc1e93d85ecf97724d30bb6e104cf11c2ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32c0d6e1d2b360501370efef40468ca28cc2cd89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c0d6e1d2b360501370efef40468ca28cc2cd89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32c0d6e1d2b360501370efef40468ca28cc2cd89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c0d6e1d2b360501370efef40468ca28cc2cd89/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 54,
      "deletions": 24
    },
    "files": [
      {
        "sha": "00d96eff19947bee78b4cbe44a723a387b05ec4e",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 41,
        "deletions": 22,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=32c0d6e1d2b360501370efef40468ca28cc2cd89",
        "patch": "@@ -7,6 +7,8 @@\n import json\n import sys\n import binascii\n+import difflib\n+import logging\n \n def parse_output(a, fmt):\n \tif fmt == 'json': # json: compare parsed data\n@@ -33,53 +35,70 @@ def bctest(testDir, testObj, exeext):\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n \t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n-\t\toutputData = open(testDir + \"/\" + outputFn).read()\n+\t\ttry:\n+\t\t\toutputData = open(testDir + \"/\" + outputFn).read()\n+\t\texcept:\n+\t\t\tlogging.error(\"Output file \" + outputFn + \" can not be opened\")\n+\t\t\traise\n \t\tif not outputData:\n-\t\t\tprint(\"Output data missing for \" + outputFn)\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error(\"Output data missing for \" + outputFn)\n+\t\t\traise Exception\n+\n \tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n \ttry:\n \t\touts = proc.communicate(input=inputData)\n \texcept OSError:\n-\t\tprint(\"OSError, Failed to execute \" + execprog)\n-\t\tsys.exit(1)\n+\t\tlogging.error(\"OSError, Failed to execute \" + execprog)\n+\t\traise\n \n \tif outputData:\n \t\ttry:\n \t\t\ta_parsed = parse_output(outs[0], outputType)\n \t\texcept Exception as e:\n-\t\t\tprint('Error parsing command output as %s: %s' % (outputType,e))\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error('Error parsing command output as %s: %s' % (outputType,e))\n+\t\t\traise\n \t\ttry:\n \t\t\tb_parsed = parse_output(outputData, outputType)\n \t\texcept Exception as e:\n-\t\t\tprint('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+\t\t\traise\n \t\tif a_parsed != b_parsed:\n-\t\t\tprint(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\traise Exception\n \t\tif outs[0] != outputData:\n-\t\t\tprint(\"Output formatting mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\tsys.exit(1)\n+\t\t\terror_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+\t\t\terror_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n+\t\t\t\t                                          outs[0].splitlines(True),\n+\t\t\t\t                                          fromfile=outputFn,\n+\t\t\t\t                                          tofile=\"returned\"))\n+\t\t\tlogging.error(error_message)\n+\t\t\traise Exception\n \n \twantRC = 0\n \tif \"return_code\" in testObj:\n \t\twantRC = testObj['return_code']\n \tif proc.returncode != wantRC:\n-\t\tprint(\"Return code mismatch for \" + outputFn)\n-\t\tsys.exit(1)\n+\t\tlogging.error(\"Return code mismatch for \" + outputFn)\n+\t\traise Exception\n \n-def bctester(testDir, input_basename, buildenv, verbose = False):\n+def bctester(testDir, input_basename, buildenv):\n \tinput_filename = testDir + \"/\" + input_basename\n \traw_data = open(input_filename).read()\n \tinput_data = json.loads(raw_data)\n \n+\tfailed_testcases = []\n+\n \tfor testObj in input_data:\n-\t\tif verbose and \"description\" in testObj:\n-\t\t\tprint (\"Testing: \" + testObj[\"description\"])\n-\t\tbctest(testDir, testObj, buildenv.exeext)\n-\t\tif verbose and \"description\" in testObj:\n-\t\t\tprint (\"PASS\")\n+\t\ttry:\n+\t\t\tbctest(testDir, testObj, buildenv.exeext)\n+\t\t\tlogging.info(\"PASSED: \" + testObj[\"description\"])\n+\t\texcept:\n+\t\t\tlogging.info(\"FAILED: \" + testObj[\"description\"])\n+\t\t\tfailed_testcases.append(testObj[\"description\"])\n \n-\tsys.exit(0)\n+\tif failed_testcases:\n+\t\tlogging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n+\t\tsys.exit(1)\n+\telse:\n+\t\tsys.exit(0)\n "
      },
      {
        "sha": "9afe91aca062403b0c2c6f4b257bed48071f66fa",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32c0d6e1d2b360501370efef40468ca28cc2cd89/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=32c0d6e1d2b360501370efef40468ca28cc2cd89",
        "patch": "@@ -4,9 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n import os\n+import sys\n import bctest\n import buildenv\n import argparse\n+import logging\n \n help_text=\"\"\"Test framework for bitcoin utils.\n \n@@ -19,14 +21,23 @@\n \n \n if __name__ == '__main__':\n-    verbose = False\n     try:\n         srcdir = os.environ[\"srcdir\"]\n+        verbose = False\n     except:\n         parser = argparse.ArgumentParser(description=help_text)\n         parser.add_argument('-s', '--srcdir')\n         parser.add_argument('-v', '--verbose', action='store_true')\n         args = parser.parse_args()\n         srcdir = args.srcdir\n         verbose = args.verbose\n-    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv, verbose = verbose)\n+\n+    if verbose:\n+        level = logging.DEBUG\n+    else:\n+        level = logging.ERROR\n+    formatter = '%(asctime)s - %(levelname)s - %(message)s'\n+    # Add the format/level to the logger\n+    logging.basicConfig(format = formatter, level=level)\n+\n+    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv)"
      }
    ]
  },
  {
    "sha": "f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOTFhZmU5YWFjYzRlY2UyZGY3NjMzOGU2ZWEyNzBiOWE2YTNiYzFh",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2016-11-02T18:31:19Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2016-11-02T18:31:19Z"
      },
      "message": "trivial: Remove variable unused after refactoring\n\nRemove a variable that is now unused after the recent refactoring\n(in 51f278329d43398428d60f5986f8d29a2041d28d) but has not been cleaned\nup so far.",
      "tree": {
        "sha": "402fba27acef9bbc9aa5cb4841cf967093b0bd12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/402fba27acef9bbc9aa5cb4841cf967093b0bd12"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a73dbe725c9c4a45d58f7d39cdd1ad695712011f",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a",
        "patch": "@@ -547,7 +547,6 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n-    std::vector<std::shared_ptr<const CTransaction>> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);"
      }
    ]
  },
  {
    "sha": "774db92d3936ca7f2ffe3f85b160c259274c1812",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NzRkYjkyZDM5MzZjYTdmMmZmZTNmODViMTYwYzI1OTI3NGMxODEy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T19:34:30Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T19:52:54Z"
      },
      "message": "Merge #9023: Add logging to bitcoin-util-test.py\n\n32c0d6e Add logging to bitcoin-util-test.py (jnewbery)",
      "tree": {
        "sha": "42532dc1e93d85ecf97724d30bb6e104cf11c2ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/42532dc1e93d85ecf97724d30bb6e104cf11c2ed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/774db92d3936ca7f2ffe3f85b160c259274c1812",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGkQWAAoJEHSBCwEjRsmmZ64H+gIxce4+4V2Hh/Ib5TMbRZpA\nGFVy+gURNPAQ+qOPnCPi0I1j8pjf5tCw7vxZWSYgPY+ujVsJr9E7QRPg0/2tKur2\nqpCsjw9Zu3mEBpWsh9qnfqTyL/IHS20Z3Vdc1wfL9tKL8Rb8QIMYpS5zIShHvU3Q\nPg91VUDWOpMO3bJ1M5CQgIYDMr/2fck+pMA4a9UXLb7pQUoJhPRh247V3bzFQ4re\nuTVqZG4OTUBFTpUmDZmGtVgfbg8ISv+8UYjEAm3IzcnNpY0N+QLB1I22vQ7hyzq5\nFSJHxlwmRjWz+EsJVnjWLsfDzw1YFjXDH8J8OPXpyIWFOZm6Xm4kj8JQ4mQtb7c=\n=1sM1\n-----END PGP SIGNATURE-----",
        "payload": "tree 42532dc1e93d85ecf97724d30bb6e104cf11c2ed\nparent a4fd8dff68369de497354574624b740f42175b1b\nparent 32c0d6e1d2b360501370efef40468ca28cc2cd89\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478115270 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478116374 +0100\n\nMerge #9023: Add logging to bitcoin-util-test.py\n\n32c0d6e Add logging to bitcoin-util-test.py (jnewbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/774db92d3936ca7f2ffe3f85b160c259274c1812",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/774db92d3936ca7f2ffe3f85b160c259274c1812",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/774db92d3936ca7f2ffe3f85b160c259274c1812/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a4fd8dff68369de497354574624b740f42175b1b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a4fd8dff68369de497354574624b740f42175b1b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a4fd8dff68369de497354574624b740f42175b1b"
      },
      {
        "sha": "32c0d6e1d2b360501370efef40468ca28cc2cd89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32c0d6e1d2b360501370efef40468ca28cc2cd89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32c0d6e1d2b360501370efef40468ca28cc2cd89"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 54,
      "deletions": 24
    },
    "files": [
      {
        "sha": "00d96eff19947bee78b4cbe44a723a387b05ec4e",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 41,
        "deletions": 22,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/774db92d3936ca7f2ffe3f85b160c259274c1812/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/774db92d3936ca7f2ffe3f85b160c259274c1812/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=774db92d3936ca7f2ffe3f85b160c259274c1812",
        "patch": "@@ -7,6 +7,8 @@\n import json\n import sys\n import binascii\n+import difflib\n+import logging\n \n def parse_output(a, fmt):\n \tif fmt == 'json': # json: compare parsed data\n@@ -33,53 +35,70 @@ def bctest(testDir, testObj, exeext):\n \tif \"output_cmp\" in testObj:\n \t\toutputFn = testObj['output_cmp']\n \t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n-\t\toutputData = open(testDir + \"/\" + outputFn).read()\n+\t\ttry:\n+\t\t\toutputData = open(testDir + \"/\" + outputFn).read()\n+\t\texcept:\n+\t\t\tlogging.error(\"Output file \" + outputFn + \" can not be opened\")\n+\t\t\traise\n \t\tif not outputData:\n-\t\t\tprint(\"Output data missing for \" + outputFn)\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error(\"Output data missing for \" + outputFn)\n+\t\t\traise Exception\n+\n \tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n \ttry:\n \t\touts = proc.communicate(input=inputData)\n \texcept OSError:\n-\t\tprint(\"OSError, Failed to execute \" + execprog)\n-\t\tsys.exit(1)\n+\t\tlogging.error(\"OSError, Failed to execute \" + execprog)\n+\t\traise\n \n \tif outputData:\n \t\ttry:\n \t\t\ta_parsed = parse_output(outs[0], outputType)\n \t\texcept Exception as e:\n-\t\t\tprint('Error parsing command output as %s: %s' % (outputType,e))\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error('Error parsing command output as %s: %s' % (outputType,e))\n+\t\t\traise\n \t\ttry:\n \t\t\tb_parsed = parse_output(outputData, outputType)\n \t\texcept Exception as e:\n-\t\t\tprint('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+\t\t\traise\n \t\tif a_parsed != b_parsed:\n-\t\t\tprint(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\tsys.exit(1)\n+\t\t\tlogging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+\t\t\traise Exception\n \t\tif outs[0] != outputData:\n-\t\t\tprint(\"Output formatting mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\tsys.exit(1)\n+\t\t\terror_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+\t\t\terror_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n+\t\t\t\t                                          outs[0].splitlines(True),\n+\t\t\t\t                                          fromfile=outputFn,\n+\t\t\t\t                                          tofile=\"returned\"))\n+\t\t\tlogging.error(error_message)\n+\t\t\traise Exception\n \n \twantRC = 0\n \tif \"return_code\" in testObj:\n \t\twantRC = testObj['return_code']\n \tif proc.returncode != wantRC:\n-\t\tprint(\"Return code mismatch for \" + outputFn)\n-\t\tsys.exit(1)\n+\t\tlogging.error(\"Return code mismatch for \" + outputFn)\n+\t\traise Exception\n \n-def bctester(testDir, input_basename, buildenv, verbose = False):\n+def bctester(testDir, input_basename, buildenv):\n \tinput_filename = testDir + \"/\" + input_basename\n \traw_data = open(input_filename).read()\n \tinput_data = json.loads(raw_data)\n \n+\tfailed_testcases = []\n+\n \tfor testObj in input_data:\n-\t\tif verbose and \"description\" in testObj:\n-\t\t\tprint (\"Testing: \" + testObj[\"description\"])\n-\t\tbctest(testDir, testObj, buildenv.exeext)\n-\t\tif verbose and \"description\" in testObj:\n-\t\t\tprint (\"PASS\")\n+\t\ttry:\n+\t\t\tbctest(testDir, testObj, buildenv.exeext)\n+\t\t\tlogging.info(\"PASSED: \" + testObj[\"description\"])\n+\t\texcept:\n+\t\t\tlogging.info(\"FAILED: \" + testObj[\"description\"])\n+\t\t\tfailed_testcases.append(testObj[\"description\"])\n \n-\tsys.exit(0)\n+\tif failed_testcases:\n+\t\tlogging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n+\t\tsys.exit(1)\n+\telse:\n+\t\tsys.exit(0)\n "
      },
      {
        "sha": "9afe91aca062403b0c2c6f4b257bed48071f66fa",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/774db92d3936ca7f2ffe3f85b160c259274c1812/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/774db92d3936ca7f2ffe3f85b160c259274c1812/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=774db92d3936ca7f2ffe3f85b160c259274c1812",
        "patch": "@@ -4,9 +4,11 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n import os\n+import sys\n import bctest\n import buildenv\n import argparse\n+import logging\n \n help_text=\"\"\"Test framework for bitcoin utils.\n \n@@ -19,14 +21,23 @@\n \n \n if __name__ == '__main__':\n-    verbose = False\n     try:\n         srcdir = os.environ[\"srcdir\"]\n+        verbose = False\n     except:\n         parser = argparse.ArgumentParser(description=help_text)\n         parser.add_argument('-s', '--srcdir')\n         parser.add_argument('-v', '--verbose', action='store_true')\n         args = parser.parse_args()\n         srcdir = args.srcdir\n         verbose = args.verbose\n-    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv, verbose = verbose)\n+\n+    if verbose:\n+        level = logging.DEBUG\n+    else:\n+        level = logging.ERROR\n+    formatter = '%(asctime)s - %(levelname)s - %(message)s'\n+    # Add the format/level to the logger\n+    logging.basicConfig(format = formatter, level=level)\n+\n+    bctest.bctester(srcdir + \"/test/data\", \"bitcoin-util-test.json\", buildenv)"
      }
    ]
  },
  {
    "sha": "d316cfeb6e2980abb23a6ff12527b2949b882205",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzE2Y2ZlYjZlMjk4MGFiYjIzYTZmZjEyNTI3YjI5NDliODgyMjA1",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T19:54:04Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T19:54:10Z"
      },
      "message": "Merge #9066: tests: Remove variable unused after refactoring\n\nf91afe9 trivial: Remove variable unused after refactoring (Daniel Kraft)",
      "tree": {
        "sha": "c6a7ca8768d6d624774484690cf9d530b47e9b20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c6a7ca8768d6d624774484690cf9d530b47e9b20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d316cfeb6e2980abb23a6ff12527b2949b882205",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGkRiAAoJEHSBCwEjRsmmcikH/2sbysnxhKr+ciCV1VNh7s1Q\nOIRIrSi8OeiEKb/x/OrdG+tES1mRFDAdGl54tIVhbY+M36rNeA9lwH+cxGFXa88r\n/lLLBOGEWLE4NPz0CKmm4GWXxsF1HGlEbH7wBF7Pm5PndmZiZAQLYgfssatBRLrc\nRkW7IRv3E7/dbcmEoAMdxLcOPwCSwRBzi/ceHlXPazd1Jl7RCtjP2C21bg/76O5F\n23H+h42e/jHPJ4SDViidoTubEVT/OsER3yXE2a5fSuEdklHehYVPP8QdicCoAeyY\naWJNsS+UhqIMafA1HufQhOVrnCiYELbL/jIDQRVKOYLoB5HkkqI7L80PpEnDXyA=\n=YJ92\n-----END PGP SIGNATURE-----",
        "payload": "tree c6a7ca8768d6d624774484690cf9d530b47e9b20\nparent 774db92d3936ca7f2ffe3f85b160c259274c1812\nparent f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478116444 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478116450 +0100\n\nMerge #9066: tests: Remove variable unused after refactoring\n\nf91afe9 trivial: Remove variable unused after refactoring (Daniel Kraft)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d316cfeb6e2980abb23a6ff12527b2949b882205",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d316cfeb6e2980abb23a6ff12527b2949b882205",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d316cfeb6e2980abb23a6ff12527b2949b882205/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "774db92d3936ca7f2ffe3f85b160c259274c1812",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/774db92d3936ca7f2ffe3f85b160c259274c1812",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/774db92d3936ca7f2ffe3f85b160c259274c1812"
      },
      {
        "sha": "f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f91afe9aacc4ece2df76338e6ea270b9a6a3bc1a"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 0,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a73dbe725c9c4a45d58f7d39cdd1ad695712011f",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d316cfeb6e2980abb23a6ff12527b2949b882205/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d316cfeb6e2980abb23a6ff12527b2949b882205/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=d316cfeb6e2980abb23a6ff12527b2949b882205",
        "patch": "@@ -547,7 +547,6 @@ BOOST_AUTO_TEST_CASE(MempoolSizeLimitTest)\n     pool.addUnchecked(tx7.GetHash(), entry.Fee(9000LL).FromTx(tx7, &pool));\n \n     std::vector<CTransaction> vtx;\n-    std::vector<std::shared_ptr<const CTransaction>> conflicts;\n     SetMockTime(42);\n     SetMockTime(42 + CTxMemPool::ROLLING_FEE_HALFLIFE);\n     BOOST_CHECK_EQUAL(pool.GetMinFee(1).GetFeePerK(), maxFeeRateRemoved.GetFeePerK() + 1000);"
      }
    ]
  },
  {
    "sha": "bc785d71855fbc8bfeb74189a049a7bb29127bb3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzc4NWQ3MTg1NWZiYzhiZmViNzQxODlhMDQ5YTdiYjI5MTI3YmIz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T20:03:50Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T20:04:20Z"
      },
      "message": "Merge #9042: [rpc] ParseHash: Fail when length is not 64\n\nfa32619 [rpc] ParseHash: Fail when length is not 64 (MarcoFalke)",
      "tree": {
        "sha": "cc362259ab067124a87c437f95f344b088c93edf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc362259ab067124a87c437f95f344b088c93edf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc785d71855fbc8bfeb74189a049a7bb29127bb3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGkbEAAoJEHSBCwEjRsmmCSUH/34O4z9aqyCw8IxFRJvBNus5\nd5OCb3Nq3eMcl2ePy3DaNhJkj5i7x6NIrH9+tTZBYCMhHkD3b2dZIH3GkYham55r\n7Sogb4hAd4yISzgH6w5sp+cH+dxznEKyEIzr9n5roWj+FTs5w5ODc6eGS7FAVnA8\nGdo7pBrlg1OrqZTzLuj7yKZ/sZ9XEYFsr/tRNBev3zm9WuFOjYASq7+p5/VvgO4k\n1//S/aBvUdu1/ZUToZ3fxJ26LZxUpaJMPGXle9dShXDXtwm2ZYjUfRky33iqUXv2\n8a6tfIkzfo+AMaFOQeQeMO6VNoJM+/NMC5iv382mrnDtYAXw+Micehe/xl9E1zw=\n=2c5J\n-----END PGP SIGNATURE-----",
        "payload": "tree cc362259ab067124a87c437f95f344b088c93edf\nparent d316cfeb6e2980abb23a6ff12527b2949b882205\nparent fa326193ad739d1f93da456b3fa73af0bbf9fdd1\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478117030 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478117060 +0100\n\nMerge #9042: [rpc] ParseHash: Fail when length is not 64\n\nfa32619 [rpc] ParseHash: Fail when length is not 64 (MarcoFalke)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc785d71855fbc8bfeb74189a049a7bb29127bb3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc785d71855fbc8bfeb74189a049a7bb29127bb3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc785d71855fbc8bfeb74189a049a7bb29127bb3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d316cfeb6e2980abb23a6ff12527b2949b882205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d316cfeb6e2980abb23a6ff12527b2949b882205",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d316cfeb6e2980abb23a6ff12527b2949b882205"
      },
      {
        "sha": "fa326193ad739d1f93da456b3fa73af0bbf9fdd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa326193ad739d1f93da456b3fa73af0bbf9fdd1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa326193ad739d1f93da456b3fa73af0bbf9fdd1"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "164e0f00e2edbe213dc2d9daa5e4877d4893a175",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc785d71855fbc8bfeb74189a049a7bb29127bb3/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc785d71855fbc8bfeb74189a049a7bb29127bb3/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=bc785d71855fbc8bfeb74189a049a7bb29127bb3",
        "patch": "@@ -147,6 +147,8 @@ uint256 ParseHashV(const UniValue& v, string strName)\n         strHex = v.get_str();\n     if (!IsHex(strHex)) // Note: IsHex(\"\") is false\n         throw JSONRPCError(RPC_INVALID_PARAMETER, strName+\" must be hexadecimal string (not '\"+strHex+\"')\");\n+    if (64 != strHex.length())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"%s must be of length %d (not %d)\", strName, 64, strHex.length()));\n     uint256 result;\n     result.SetHex(strHex);\n     return result;"
      }
    ]
  },
  {
    "sha": "c05db8348838422ec6bbfeef30faee36562af13d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMDVkYjgzNDg4Mzg0MjJlYzZiYmZlZWYzMGZhZWUzNjU2MmFmMTNk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T20:09:24Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T20:09:27Z"
      },
      "message": "Merge #9013: Trivial: Explicitly pass const CChainParams& to LoadBlockIndexDB()\n\nd0b01f3 Explicitly pass const CChainParams& to LoadBlockIndexDB() (Geoffrey Tsui)",
      "tree": {
        "sha": "fc6898fa79622feb759c78209ea9f591f7244ae3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc6898fa79622feb759c78209ea9f591f7244ae3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c05db8348838422ec6bbfeef30faee36562af13d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGkf3AAoJEHSBCwEjRsmmrTYIAKWDmDNVk1MCz/zBr5E00dt4\nENTULS1lbYqMMDUZdT8IbVZPdbQcryLtqIurygQ4s6sPrnFvUyRFNGEX3yrBlwKR\nZM6DbNLzZgn9bXhVTRQpldW3t/3uSIaIMIscJU2BU3DvVHyhaJ0ovGDBDlPfmNQH\ngYmGdPgh7KfeH0sYSOOCIxLRRJLaI/9f83tvrXsVGsNHLAKCZCun2Lo8q2ncmJ/U\nzx6eb0lh/WdU2hOC6Jlve+gH4jj6+8nJwIulPFcLEBFBVdMuFg8KABTB5d7hJqaG\nU4zvTLOKxc3rIZcFsrnx6MuEGSWXW4+FmR+ZlDk4yDj8eg0r1lOK7fH1BiZEO8Q=\n=VY6q\n-----END PGP SIGNATURE-----",
        "payload": "tree fc6898fa79622feb759c78209ea9f591f7244ae3\nparent bc785d71855fbc8bfeb74189a049a7bb29127bb3\nparent d0b01f3a859eacc51a28fc18d2ed7e361ec90833\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478117364 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478117367 +0100\n\nMerge #9013: Trivial: Explicitly pass const CChainParams& to LoadBlockIndexDB()\n\nd0b01f3 Explicitly pass const CChainParams& to LoadBlockIndexDB() (Geoffrey Tsui)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c05db8348838422ec6bbfeef30faee36562af13d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c05db8348838422ec6bbfeef30faee36562af13d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c05db8348838422ec6bbfeef30faee36562af13d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc785d71855fbc8bfeb74189a049a7bb29127bb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc785d71855fbc8bfeb74189a049a7bb29127bb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc785d71855fbc8bfeb74189a049a7bb29127bb3"
      },
      {
        "sha": "d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0b01f3a859eacc51a28fc18d2ed7e361ec90833",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0b01f3a859eacc51a28fc18d2ed7e361ec90833"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 5,
      "deletions": 6
    },
    "files": [
      {
        "sha": "29a242a790089db6cd538794b8c9f874a157ae45",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c05db8348838422ec6bbfeef30faee36562af13d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c05db8348838422ec6bbfeef30faee36562af13d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c05db8348838422ec6bbfeef30faee36562af13d",
        "patch": "@@ -1323,7 +1323,7 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n                         CleanupBlockRevFiles();\n                 }\n \n-                if (!LoadBlockIndex()) {\n+                if (!LoadBlockIndex(chainparams)) {\n                     strLoadError = _(\"Error loading block database\");\n                     break;\n                 }"
      },
      {
        "sha": "4cc886afb592986965b80c3a5f74c3692cf71714",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c05db8348838422ec6bbfeef30faee36562af13d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c05db8348838422ec6bbfeef30faee36562af13d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c05db8348838422ec6bbfeef30faee36562af13d",
        "patch": "@@ -3972,9 +3972,8 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     return pindexNew;\n }\n \n-bool static LoadBlockIndexDB()\n+bool static LoadBlockIndexDB(const CChainParams& chainparams)\n {\n-    const CChainParams& chainparams = Params();\n     if (!pblocktree->LoadBlockIndexGuts(InsertBlockIndex))\n         return false;\n \n@@ -4303,10 +4302,10 @@ void UnloadBlockIndex()\n     fHavePruned = false;\n }\n \n-bool LoadBlockIndex()\n+bool LoadBlockIndex(const CChainParams& chainparams)\n {\n     // Load block index from databases\n-    if (!fReindex && !LoadBlockIndexDB())\n+    if (!fReindex && !LoadBlockIndexDB(chainparams))\n         return false;\n     return true;\n }"
      },
      {
        "sha": "35060e34ab9cbb8ff973e88dd10aae78be676762",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c05db8348838422ec6bbfeef30faee36562af13d/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c05db8348838422ec6bbfeef30faee36562af13d/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=c05db8348838422ec6bbfeef30faee36562af13d",
        "patch": "@@ -237,7 +237,7 @@ bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskB\n /** Initialize a new block tree database + block data on disk */\n bool InitBlockIndex(const CChainParams& chainparams);\n /** Load the block tree and coins database from disk */\n-bool LoadBlockIndex();\n+bool LoadBlockIndex(const CChainParams& chainparams);\n /** Unload database information */\n void UnloadBlockIndex();\n /** Run an instance of the script checking thread */"
      }
    ]
  },
  {
    "sha": "6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTEzNDNmNzNiZDBmNjc0NGNmY2ZkYTFlM2UxYzg5OThmNjdlMmQ3",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T20:37:28Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-02T20:37:43Z"
      },
      "message": "Merge #8977: [Wallet] Refactor wallet/init interaction (Reaccept wtx, flush thread)\n\ncab1da7 [Wallet] Refactor wallet/init interaction (Reaccept wtx, flush thread) (Jonas Schnelli)",
      "tree": {
        "sha": "7cff5fd559ebebf2f2952a70b326b78014f4e72d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7cff5fd559ebebf2f2952a70b326b78014f4e72d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGk6XAAoJEHSBCwEjRsmma7YIALP4JCmOTZdThzKrEz7qmUll\nOX0BHR7vWtLYVynX1qFCOKD8mLSlUuA6wIByN4he/crw16rfdu1+fCLa06o/qmqm\nUSILKugWFrNDCSzg6z1rmWcynKdMEM2u45NaQdmB+KUg+PY/1DF1s5mPAnG6HoUw\nBS7KmLHZFcdRyoBh3K754zJ2StH+U/oGUuIBGuzkqIDSNaXoLSxM2w8Q7Gj0uw0Z\nlZE08Kv+GPDtpF8GYfRdlOH7FQIwBWhre8OvxwfodgJhlUTRQLKejfyKhFhsg2jn\nXpI5TWerL6PVt6fuEw1uOIkBVtPssKIdjCrhmp9CrAtGQy5sWB5qy55MVvz7rrY=\n=lebL\n-----END PGP SIGNATURE-----",
        "payload": "tree 7cff5fd559ebebf2f2952a70b326b78014f4e72d\nparent c05db8348838422ec6bbfeef30faee36562af13d\nparent cab1da745b2a36407bb9493343cc74213854419d\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478119048 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478119063 +0100\n\nMerge #8977: [Wallet] Refactor wallet/init interaction (Reaccept wtx, flush thread)\n\ncab1da7 [Wallet] Refactor wallet/init interaction (Reaccept wtx, flush thread) (Jonas Schnelli)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c05db8348838422ec6bbfeef30faee36562af13d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c05db8348838422ec6bbfeef30faee36562af13d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c05db8348838422ec6bbfeef30faee36562af13d"
      },
      {
        "sha": "cab1da745b2a36407bb9493343cc74213854419d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cab1da745b2a36407bb9493343cc74213854419d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cab1da745b2a36407bb9493343cc74213854419d"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 19,
      "deletions": 11
    },
    "files": [
      {
        "sha": "008bb6fae55969a175acf820b56686a91fbdbabd",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 11,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "patch": "@@ -1496,13 +1496,6 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n     }\n \n-#ifdef ENABLE_WALLET\n-    // Add wallet transactions that aren't already in a block to mempool\n-    // Do this here as mempool requires genesis block to be loaded\n-    if (pwalletMain)\n-        pwalletMain->ReacceptWalletTransactions();\n-#endif\n-\n     // ********************************************************* Step 11: start node\n \n     //// debug print\n@@ -1540,10 +1533,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     uiInterface.InitMessage(_(\"Done loading\"));\n \n #ifdef ENABLE_WALLET\n-    if (pwalletMain) {\n-        // Run a thread to flush wallet periodically\n-        threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));\n-    }\n+    if (pwalletMain)\n+        pwalletMain->postInitProcess(threadGroup);\n #endif\n \n     return !fRequestShutdown;"
      },
      {
        "sha": "c2bac6e330539bd087054f382eeaf2b38c458b6a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "patch": "@@ -3549,6 +3549,16 @@ bool CWallet::InitLoadWallet()\n     return true;\n }\n \n+void CWallet::postInitProcess(boost::thread_group& threadGroup)\n+{\n+    // Add wallet transactions that aren't already in a block to mempool\n+    // Do this here as mempool requires genesis block to be loaded\n+    ReacceptWalletTransactions();\n+\n+    // Run a thread to flush wallet periodically\n+    threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(this->strWalletFile)));\n+}\n+\n bool CWallet::ParameterInteraction()\n {\n     if (GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))"
      },
      {
        "sha": "d7d1f5513a15e682e11279178ec3f9c5f7e518e1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "patch": "@@ -27,6 +27,7 @@\n #include <vector>\n \n #include <boost/shared_ptr.hpp>\n+#include <boost/thread.hpp>\n \n extern CWallet* pwalletMain;\n \n@@ -912,6 +913,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static bool InitLoadWallet();\n \n+    /**\n+     * Wallet post-init setup\n+     * Gives the wallet a chance to register repetitive tasks and complete post-init tasks\n+     */\n+    void postInitProcess(boost::thread_group& threadGroup);\n+\n     /* Wallets parameter interaction */\n     static bool ParameterInteraction();\n "
      }
    ]
  },
  {
    "sha": "c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWJkZjlhNzVmOWZkZThjZDAxMWU0YWE5NGJlNGVkNDM0NzA3OGEz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-11-02T22:35:52Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-11-02T22:36:16Z"
      },
      "message": "Merge #9065: Merge `doc/unit-tests.md` into `src/test/README.md`\n\needc461 Merge `doc/unit-tests.md` into `src/test/README.md` (Wladimir J. van der Laan)",
      "tree": {
        "sha": "e4d16ab6fa9c3fdd5605734d9edb83c3ab9e0ca4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e4d16ab6fa9c3fdd5605734d9edb83c3ab9e0ca4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEcBAABCgAGBQJYGmphAAoJEC1/I3LlD+E3meUIAK2owgJvEwMqfoFA8EJRYbOt\nRkr+aVuiaykKL3D/KsITzkiI68q5E+IMiro3qtAQ8tMPZINO9N64cSlrzvXrPsYp\nu7FJW6zMMHRS0OzU2YndOP38725FWVOce+A1Etn37UJXQlJbH7p6HsbqlwBCkASN\nZlxlWexLsXfqO5Ixsy9BrFxaOnPjQaaCo45V6FOEQL+Drs90uRBcb8mw/Qi15jxQ\neyoJHQvXM6Wka0iUgsKQAh22VJYioNDNf7BNzJszh5Liyt2d5glKJQ+K7wOC0Q+9\n74oU6JpmP9qWoz06rbbxliH9HjYitckwJKiTDebXIiiVxWdaVapHv6wy9e/Vxdk=\n=a37V\n-----END PGP SIGNATURE-----",
        "payload": "tree e4d16ab6fa9c3fdd5605734d9edb83c3ab9e0ca4\nparent 6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7\nparent eedc4618820ea4acc5a34a7761a3511ede95dc9e\nauthor MarcoFalke <falke.marco@gmail.com> 1478126152 +0100\ncommitter MarcoFalke <falke.marco@gmail.com> 1478126176 +0100\n\nMerge #9065: Merge `doc/unit-tests.md` into `src/test/README.md`\n\needc461 Merge `doc/unit-tests.md` into `src/test/README.md` (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7"
      },
      {
        "sha": "eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/eedc4618820ea4acc5a34a7761a3511ede95dc9e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/eedc4618820ea4acc5a34a7761a3511ede95dc9e"
      }
    ],
    "stats": {
      "total": 71,
      "additions": 37,
      "deletions": 34
    },
    "files": [
      {
        "sha": "38a90dde4969f6a00ce1ceb17df7c2d8dd532605",
        "filename": "README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
        "patch": "@@ -49,9 +49,10 @@ lots of money.\n \n ### Automated Testing\n \n-Developers are strongly encouraged to write [unit tests](/doc/unit-tests.md) for new code, and to\n+Developers are strongly encouraged to write [unit tests](src/test/README.md) for new code, and to\n submit new unit tests for old code. Unit tests can be compiled and run\n-(assuming they weren't disabled in configure) with: `make check`\n+(assuming they weren't disabled in configure) with: `make check`. Further details on running\n+and extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n \n There are also [regression and integration tests](/qa) of the RPC interface, written\n in Python, that are run automatically on the build server."
      },
      {
        "sha": "8b9c0ea2625f0a94a4c0812813c3d6517c3328f4",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
        "patch": "@@ -53,7 +53,6 @@ The Bitcoin repo's [root README](/README.md) contains relevant information on th\n - [Source Code Documentation (External Link)](https://dev.visucore.com/bitcoin/doxygen/)\n - [Translation Process](translation_process.md)\n - [Translation Strings Policy](translation_strings_policy.md)\n-- [Unit Tests](unit-tests.md)\n - [Travis CI](travis-ci.md)\n - [Unauthenticated REST Interface](REST-interface.md)\n - [Shared Libraries](shared-libraries.md)"
      },
      {
        "sha": "afaece829c77d4832364231db459f25c23450e49",
        "filename": "doc/unit-tests.md",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/doc/unit-tests.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7/doc/unit-tests.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/unit-tests.md?ref=6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "patch": "@@ -1,18 +0,0 @@\n-Compiling/running unit tests\n-------------------------------------\n-\n-Unit tests will be automatically compiled if dependencies were met in `./configure`\n-and tests weren't explicitly disabled.\n-\n-After configuring, they can be run with `make check`.\n-\n-To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n-\n-To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n-.cpp files in the `test/` directory or add new .cpp files that\n-implement new BOOST_AUTO_TEST_SUITE sections.\n-\n-To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n-\n-To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n-the `src/qt/test/test_main.cpp` file."
      },
      {
        "sha": "8f99804e100ddf4049dc11efae2ccdca5b8c1599",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 34,
        "deletions": 13,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
        "patch": "@@ -1,4 +1,36 @@\n-# Notes\n+### Compiling/running unit tests\n+\n+Unit tests will be automatically compiled if dependencies were met in `./configure`\n+and tests weren't explicitly disabled.\n+\n+After configuring, they can be run with `make check`.\n+\n+To run the bitcoind tests manually, launch `src/test/test_bitcoin`.\n+\n+To add more bitcoind tests, add `BOOST_AUTO_TEST_CASE` functions to the existing\n+.cpp files in the `test/` directory or add new .cpp files that\n+implement new BOOST_AUTO_TEST_SUITE sections.\n+\n+To run the bitcoin-qt tests manually, launch `src/qt/test/test_bitcoin-qt`\n+\n+To add more bitcoin-qt tests, add them to the `src/qt/test/` directory and\n+the `src/qt/test/test_main.cpp` file.\n+\n+### Running individual tests\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run `test_bitcoin --help` for the full list.\n+\n+### Note on adding test cases\n+\n The sources in this directory are unit test cases.  Boost includes a\n unit testing framework, and since bitcoin already uses boost, it makes\n sense to simply use this framework rather than require developers to\n@@ -19,22 +51,11 @@ For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n [http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n \n-test_bitcoin has some built-in command-line arguments; for\n-example, to run just the getarg_tests verbosely:\n-\n-    test_bitcoin --log_level=all --run_test=getarg_tests\n-\n-... or to run just the doubledash test:\n-\n-    test_bitcoin --run_test=getarg_tests/doubledash\n-\n-Run `test_bitcoin --help` for the full list.\n-\n ### bitcoin-util-test.py\n \n The test directory also contains the bitcoin-util-test.py tool, which tests bitcoin utils (currently just bitcoin-tx). This test gets run automatically during the `make check` build process. It is also possible to run the test manually from the src directory:\n \n ```\n test/bitcoin-util-test.py --srcdir=[current directory]\n \n-```\n\\ No newline at end of file\n+```"
      }
    ]
  },
  {
    "sha": "2ca882ad41f170e705e71766d2b20ea08dbd6a7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2E4ODJhZDQxZjE3MGU3MDVlNzE3NjZkMmIyMGVhMDhkYmQ2YTdh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-03T00:29:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-03T00:29:16Z"
      },
      "message": "Declare wallet.h functions inline",
      "tree": {
        "sha": "a25be136d40d7a45203682c081d99b37426e1113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a25be136d40d7a45203682c081d99b37426e1113"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ca882ad41f170e705e71766d2b20ea08dbd6a7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca882ad41f170e705e71766d2b20ea08dbd6a7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca882ad41f170e705e71766d2b20ea08dbd6a7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca882ad41f170e705e71766d2b20ea08dbd6a7a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "cb48da4461af30857196fc25b6df660551a5b0ba",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ca882ad41f170e705e71766d2b20ea08dbd6a7a/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ca882ad41f170e705e71766d2b20ea08dbd6a7a/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=2ca882ad41f170e705e71766d2b20ea08dbd6a7a",
        "patch": "@@ -134,7 +134,7 @@ struct CRecipient\n typedef std::map<std::string, std::string> mapValue_t;\n \n \n-static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n+static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (!mapValue.count(\"n\"))\n     {\n@@ -145,7 +145,7 @@ static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n }\n \n \n-static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n+static inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (nOrderPos == -1)\n         return;"
      }
    ]
  },
  {
    "sha": "ed0cc50afed146c27f6d8129c683c225fb940093",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDBjYzUwYWZlZDE0NmMyN2Y2ZDgxMjljNjgzYzIyNWZiOTQwMDkz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-03T06:33:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-03T06:36:27Z"
      },
      "message": "Merge #9036: wallet: Change default confirm target from 2 to 6\n\n0fdf810 wallet: Change default confirm target from 2 to 6 (Wladimir J. van der Laan)",
      "tree": {
        "sha": "bd5efcaf6f89d894c6c7480dc34535b8368a998c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd5efcaf6f89d894c6c7480dc34535b8368a998c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed0cc50afed146c27f6d8129c683c225fb940093",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJYGtrrAAoJENuhpnN5oakxhbUQAJrCzBdjvhVo2yN4/6Z6o9Ed\nnBlTM60vK/ZyuGBL9006GUaRk4nOLq1/s5IVpLHLoDwPdoZSVd1WUVPK6L5aboU8\n8sNt3YUYXkAhnLXxp6Kbe0+vdAl5ndpfkpw0nDxwUlxqlll00cLo6vSWM496EtKw\nAn2JuC4iyXq7PlPQFy7ZKI2FoDJNZe5b+Bey0pe/sHA/XSYX5W9bbVBENUeqVMlY\n/jOF8Mj1HgDZ8ljwpKHuOfeUmqaJ1kO4YVHGrEH2168fBzbw+RHMlXKPBw48lpr3\ncCw9EhFI8hQjp1k/ltdTSvm4pQ/55PSO4qFF2D0C311nV0vAHUFNK4CaxXfrHs/m\nSU7ky1g8hXG/iHEk0gkTGDyheIh7V7LW2gxNmJJxLOoPSFMDLXiKuzKPRaatFXyj\ny6Pm5uHse0jdNsWMkHZgfDrQPDAlEU0+RansMvjRmprwYXwcpibuzd13umxYnKJc\nV6ZabON2yeylcg2xPDlZysghNUzNBEUms26xAoArmd+glSLwUmA6Aqb4ZGtjMESD\n6jcgFrBcXna71ZqlbnYPgGWJkS/lHjRB9NdP5WeifiOOJi5311pF4yiYRtqMh0TU\no4zFTyaudnU0M/6wq2Sb3ROSF1Zbltu6xIDWUfn1iBxmc07zmzSf2JzAUCuTnAqN\njUT6uSD6nUWP3E/wAZ2G\n=I3Cu\n-----END PGP SIGNATURE-----",
        "payload": "tree bd5efcaf6f89d894c6c7480dc34535b8368a998c\nparent c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3\nparent 0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1478154824 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1478154987 -0700\n\nMerge #9036: wallet: Change default confirm target from 2 to 6\n\n0fdf810 wallet: Change default confirm target from 2 to 6 (Wladimir J. van der Laan)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0cc50afed146c27f6d8129c683c225fb940093",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0cc50afed146c27f6d8129c683c225fb940093",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0cc50afed146c27f6d8129c683c225fb940093/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9bdf9a75f9fde8cd011e4aa94be4ed4347078a3"
      },
      {
        "sha": "0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0fdf810d267928b4c26a2e2cbb8c02b79e7b0ccb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8538e029e59584e1a08011f7abe0931a12a65844",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed0cc50afed146c27f6d8129c683c225fb940093/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed0cc50afed146c27f6d8129c683c225fb940093/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ed0cc50afed146c27f6d8129c683c225fb940093",
        "patch": "@@ -54,7 +54,7 @@ static const bool DEFAULT_SPEND_ZEROCONF_CHANGE = true;\n //! Default for -sendfreetransactions\n static const bool DEFAULT_SEND_FREE_TRANSACTIONS = false;\n //! -txconfirmtarget default\n-static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n+static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 6;\n //! -walletrbf default\n static const bool DEFAULT_WALLET_RBF = false;\n //! Largest (in bytes) free transaction we're willing to create"
      }
    ]
  },
  {
    "sha": "508404de98a8a5435f52916cef8f328e82651961",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDg0MDRkZTk4YThhNTQzNWY1MjkxNmNlZjhmMzI4ZTgyNjUxOTYx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-03T07:04:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-03T07:08:59Z"
      },
      "message": "Merge #9053: IBD using chainwork instead of height and not using header timestamps\n\ne141beb IsInitialBlockDownload no longer uses header-only timestamps. (Gregory Maxwell)\n2082b55 Remove GetTotalBlocksEstimate and checkpoint tests that test nothing. (Gregory Maxwell)\nfd46136 IBD check uses minimumchain work instead of checkpoints. (Gregory Maxwell)",
      "tree": {
        "sha": "d7756cd64d414858f51d77f0273f26bc4e2e4e30",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d7756cd64d414858f51d77f0273f26bc4e2e4e30"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/508404de98a8a5435f52916cef8f328e82651961",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABCgAGBQJYGuKLAAoJENuhpnN5oakxCVIQAPB0TIBcndjSnZy0pjuqJEym\nZjT+drV2lDDARAeXywwEVuI2WFf+PmkoHK3Wi39u8g4sHBPex2xzwmGbIPC3lM2z\nmYgMEoyWDcXGCOpXwfkSrnX33vkVEFGj1YnD7ZToXwz6APJ0AhFJHnuAQ6HLKPPQ\nOCJ6iMDwEunf6gyYV3YzITTkdtGYpCM9+vyqPu40CLzrrDHjXMuH8DXaQ5ekgzNO\nglkqgugEUQV3gZqNuF2+SkKXWEM6ZUbEj8U1WQV3lvzLh5CTGGcI9LyZsJ79yutP\nZP26eUk174c9o51oBPlRsXt5g30pt4aqyFHj0zK7INn5dwaqmT3PpKCqp8TEhs/L\ni9NKX+mDfXue9/mAkZb9/j5UnhQw3XUg0YiWqDPsYF5NPXsOEvD7LP31VKe+WGwl\nEz19z/UCERpXkTvFCz68iWeqj+Kbx5fKygFKqvki9H+mI2CreBCBrdNeCMSGK2Es\nHv/8S57UCzqek76eAH68AO1avS7AoSqaV0+jIEW5lwBSpbAS6gS1Qq529dO0wTU+\nSwVw8vbgIGQRmvBbBpQvi1Hvg43eZzmmb7mpChO1irZ4q50LlXm82kdJ9jvIraDO\n9OuBWsYew0ZzMjCv3h2TZRzaPOu0lFgA2h3iGoBwmsin5h8yfs02rjm0HgsTNn19\nuu8kWMjr+uR1D8FAaiZw\n=OCSr\n-----END PGP SIGNATURE-----",
        "payload": "tree d7756cd64d414858f51d77f0273f26bc4e2e4e30\nparent ed0cc50afed146c27f6d8129c683c225fb940093\nparent e141beb6a9816b7e1e680fb0a8bae16d42a3e557\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1478156660 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1478156939 -0700\n\nMerge #9053: IBD using chainwork instead of height and not using header timestamps\n\ne141beb IsInitialBlockDownload no longer uses header-only timestamps. (Gregory Maxwell)\n2082b55 Remove GetTotalBlocksEstimate and checkpoint tests that test nothing. (Gregory Maxwell)\nfd46136 IBD check uses minimumchain work instead of checkpoints. (Gregory Maxwell)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508404de98a8a5435f52916cef8f328e82651961",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/508404de98a8a5435f52916cef8f328e82651961",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508404de98a8a5435f52916cef8f328e82651961/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed0cc50afed146c27f6d8129c683c225fb940093",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed0cc50afed146c27f6d8129c683c225fb940093",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed0cc50afed146c27f6d8129c683c225fb940093"
      },
      {
        "sha": "e141beb6a9816b7e1e680fb0a8bae16d42a3e557",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e141beb6a9816b7e1e680fb0a8bae16d42a3e557",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e141beb6a9816b7e1e680fb0a8bae16d42a3e557"
      }
    ],
    "stats": {
      "total": 68,
      "additions": 20,
      "deletions": 48
    },
    "files": [
      {
        "sha": "85cf160f47a278fb3800ecba1314a7798e671941",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508404de98a8a5435f52916cef8f328e82651961/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508404de98a8a5435f52916cef8f328e82651961/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=508404de98a8a5435f52916cef8f328e82651961",
        "patch": "@@ -12,6 +12,7 @@ Before every minor and major release:\n * Update [bips.md](bips.md) to account for changes since the last release.\n * Update version in sources (see below)\n * Write release notes (see below)\n+* Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n \n Before every major release:\n "
      },
      {
        "sha": "4e4cca14caf034fee4ed24b1a5e68b67e6ad308b",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508404de98a8a5435f52916cef8f328e82651961/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508404de98a8a5435f52916cef8f328e82651961/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=508404de98a8a5435f52916cef8f328e82651961",
        "patch": "@@ -50,7 +50,6 @@ BITCOIN_TESTS =\\\n   test/bip32_tests.cpp \\\n   test/blockencodings_tests.cpp \\\n   test/bloom_tests.cpp \\\n-  test/Checkpoints_tests.cpp \\\n   test/coins_tests.cpp \\\n   test/compress_tests.cpp \\\n   test/crypto_tests.cpp \\"
      },
      {
        "sha": "a57ab632e4cfe4075c18e7404e8463b8937ccdd0",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508404de98a8a5435f52916cef8f328e82651961/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508404de98a8a5435f52916cef8f328e82651961/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=508404de98a8a5435f52916cef8f328e82651961",
        "patch": "@@ -96,6 +96,9 @@ class CMainParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1479168000; // November 15th, 2016.\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1510704000; // November 15th, 2017.\n \n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000002cb971dd56d1c583c20f90\");\n+\n         /**\n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n@@ -191,6 +194,9 @@ class CTestNetParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 1462060800; // May 1st 2016\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 1493596800; // May 1st 2017\n \n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x0000000000000000000000000000000000000000000000198b4def2baa9338d6\");\n+\n         pchMessageStart[0] = 0x0b;\n         pchMessageStart[1] = 0x11;\n         pchMessageStart[2] = 0x09;\n@@ -224,6 +230,7 @@ class CTestNetParams : public CChainParams {\n         fRequireStandard = false;\n         fMineBlocksOnDemand = false;\n \n+\n         checkpointData = (CCheckpointData) {\n             boost::assign::map_list_of\n             ( 546, uint256S(\"000000002a936ca763904c3c35fce2f3556c559c0214345d31b1bcebf76acb70\")),\n@@ -265,6 +272,9 @@ class CRegTestParams : public CChainParams {\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nStartTime = 0;\n         consensus.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout = 999999999999ULL;\n \n+        // The best chain should have at least this much work.\n+        consensus.nMinimumChainWork = uint256S(\"0x00\");\n+\n         pchMessageStart[0] = 0xfa;\n         pchMessageStart[1] = 0xbf;\n         pchMessageStart[2] = 0xb5;"
      },
      {
        "sha": "d22c188c16e00bd5579301b4a1807bf3a74502b5",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508404de98a8a5435f52916cef8f328e82651961/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508404de98a8a5435f52916cef8f328e82651961/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=508404de98a8a5435f52916cef8f328e82651961",
        "patch": "@@ -55,16 +55,6 @@ namespace Checkpoints {\n         return fWorkBefore / (fWorkBefore + fWorkAfter);\n     }\n \n-    int GetTotalBlocksEstimate(const CCheckpointData& data)\n-    {\n-        const MapCheckpoints& checkpoints = data.mapCheckpoints;\n-\n-        if (checkpoints.empty())\n-            return 0;\n-\n-        return checkpoints.rbegin()->first;\n-    }\n-\n     CBlockIndex* GetLastCheckpoint(const CCheckpointData& data)\n     {\n         const MapCheckpoints& checkpoints = data.mapCheckpoints;"
      },
      {
        "sha": "04346f35ffa7c4c261cba174300e3f594d303a27",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508404de98a8a5435f52916cef8f328e82651961/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508404de98a8a5435f52916cef8f328e82651961/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=508404de98a8a5435f52916cef8f328e82651961",
        "patch": "@@ -19,9 +19,6 @@ struct CCheckpointData;\n namespace Checkpoints\n {\n \n-//! Return conservative estimate of total number of blocks, 0 if unknown\n-int GetTotalBlocksEstimate(const CCheckpointData& data);\n-\n //! Returns last CBlockIndex* in mapBlockIndex that is a checkpoint\n CBlockIndex* GetLastCheckpoint(const CCheckpointData& data);\n "
      },
      {
        "sha": "20efc68ade8ec96c3d2e329b84a118e2d57bf457",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508404de98a8a5435f52916cef8f328e82651961/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508404de98a8a5435f52916cef8f328e82651961/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=508404de98a8a5435f52916cef8f328e82651961",
        "patch": "@@ -61,6 +61,7 @@ struct Params {\n     int64_t nPowTargetSpacing;\n     int64_t nPowTargetTimespan;\n     int64_t DifficultyAdjustmentInterval() const { return nPowTargetTimespan / nPowTargetSpacing; }\n+    uint256 nMinimumChainWork;\n };\n } // namespace Consensus\n "
      },
      {
        "sha": "44031e69e73ebff16a12b74944a44bcb2a191aeb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/508404de98a8a5435f52916cef8f328e82651961/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/508404de98a8a5435f52916cef8f328e82651961/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=508404de98a8a5435f52916cef8f328e82651961",
        "patch": "@@ -1746,13 +1746,14 @@ bool IsInitialBlockDownload()\n         return false;\n     if (fImporting || fReindex)\n         return true;\n-    if (fCheckpointsEnabled && chainActive.Height() < Checkpoints::GetTotalBlocksEstimate(chainParams.Checkpoints()))\n+    if (chainActive.Tip() == NULL)\n         return true;\n-    bool state = (chainActive.Height() < pindexBestHeader->nHeight - 24 * 6 ||\n-            std::max(chainActive.Tip()->GetBlockTime(), pindexBestHeader->GetBlockTime()) < GetTime() - nMaxTipAge);\n-    if (!state)\n-        latchToFalse.store(true, std::memory_order_relaxed);\n-    return state;\n+    if (chainActive.Tip()->nChainWork < UintToArith256(chainParams.GetConsensus().nMinimumChainWork))\n+        return true;\n+    if (chainActive.Tip()->GetBlockTime() < (GetTime() - nMaxTipAge))\n+        return true;\n+    latchToFalse.store(true, std::memory_order_relaxed);\n+    return false;\n }\n \n bool fLargeWorkForkFound = false;\n@@ -1780,7 +1781,7 @@ void CheckForkWarningConditions()\n {\n     AssertLockHeld(cs_main);\n     // Before we get past initial download, we cannot reliably alert about forks\n-    // (we assume we don't get stuck on a fork before the last checkpoint)\n+    // (we assume we don't get stuck on a fork before finishing our initial sync)\n     if (IsInitialBlockDownload())\n         return;\n "
      },
      {
        "sha": "1b7d368e13ec0d02dd98621ca7206dc774534c8e",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed0cc50afed146c27f6d8129c683c225fb940093/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed0cc50afed146c27f6d8129c683c225fb940093/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=ed0cc50afed146c27f6d8129c683c225fb940093",
        "patch": "@@ -1,27 +0,0 @@\n-// Copyright (c) 2011-2015 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// Unit tests for block-chain checkpoints\n-//\n-\n-#include \"checkpoints.h\"\n-\n-#include \"uint256.h\"\n-#include \"test/test_bitcoin.h\"\n-#include \"chainparams.h\"\n-\n-#include <boost/test/unit_test.hpp>\n-\n-using namespace std;\n-\n-BOOST_FIXTURE_TEST_SUITE(Checkpoints_tests, BasicTestingSetup)\n-\n-BOOST_AUTO_TEST_CASE(sanity)\n-{\n-    const CCheckpointData& checkpoints = Params(CBaseChainParams::MAIN).Checkpoints();\n-    BOOST_CHECK(Checkpoints::GetTotalBlocksEstimate(checkpoints) >= 134444);\n-}\n-\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "d1871da7fe6389ef4dbcd93457c39258e6f48180",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTg3MWRhN2ZlNjM4OWVmNGRiY2Q5MzQ1N2MzOTI1OGU2ZjQ4MTgw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T09:19:59Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T09:22:11Z"
      },
      "message": "Merge #9071: Declare wallet.h functions inline\n\n2ca882a Declare wallet.h functions inline (Pieter Wuille)",
      "tree": {
        "sha": "23382a9a88f6eda69865da418e876659342b9aa9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23382a9a88f6eda69865da418e876659342b9aa9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1871da7fe6389ef4dbcd93457c39258e6f48180",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGwHDAAoJEHSBCwEjRsmm2WAH/2ZheDqjVDXIQfg86koCEr+j\nRv4BlUlAv0Yb5qGvMnZpEZWv5bYS4RUgJ3pRh3dQhdn0DEbweuyTLp8ofJBrFOYw\nxe/MSTbbsAdEPWyz3ket3jE3+Y4CMebaTa18IXJ+iL9BgpqMBirDq5OXjHdvJMHl\nop94HiXIdTNpNMcn4BnvOokWsUHmDTh+aT0qP9wm73qLDviHpJOGoFPIUuUhF5nb\nYsKXUAojo5lwuXSfU16A13x9wRU41CmgTE9wL9Jde4/ltrSSVYplURXQEQ0uLn6S\nEckq2Uz9G4zSpHuYfLS13+ON4PUaB/Mb+07pQT3pMB6+CRTYx7XbKjgykx0bps4=\n=DiVu\n-----END PGP SIGNATURE-----",
        "payload": "tree 23382a9a88f6eda69865da418e876659342b9aa9\nparent 508404de98a8a5435f52916cef8f328e82651961\nparent 2ca882ad41f170e705e71766d2b20ea08dbd6a7a\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478164799 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478164931 +0100\n\nMerge #9071: Declare wallet.h functions inline\n\n2ca882a Declare wallet.h functions inline (Pieter Wuille)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1871da7fe6389ef4dbcd93457c39258e6f48180",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1871da7fe6389ef4dbcd93457c39258e6f48180",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1871da7fe6389ef4dbcd93457c39258e6f48180/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "508404de98a8a5435f52916cef8f328e82651961",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/508404de98a8a5435f52916cef8f328e82651961",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/508404de98a8a5435f52916cef8f328e82651961"
      },
      {
        "sha": "2ca882ad41f170e705e71766d2b20ea08dbd6a7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ca882ad41f170e705e71766d2b20ea08dbd6a7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ca882ad41f170e705e71766d2b20ea08dbd6a7a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "57b17d87ad1a0ae50c46bfda1a5c9b93995268a1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1871da7fe6389ef4dbcd93457c39258e6f48180/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1871da7fe6389ef4dbcd93457c39258e6f48180/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d1871da7fe6389ef4dbcd93457c39258e6f48180",
        "patch": "@@ -134,7 +134,7 @@ struct CRecipient\n typedef std::map<std::string, std::string> mapValue_t;\n \n \n-static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n+static inline void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (!mapValue.count(\"n\"))\n     {\n@@ -145,7 +145,7 @@ static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n }\n \n \n-static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n+static inline void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (nOrderPos == -1)\n         return;"
      }
    ]
  },
  {
    "sha": "fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2Y2MWI4MGZhMmNlNjBlZTFhODA2ZGJmNGQ0MjQwYWE2ODJiODc5",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T09:45:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T09:45:18Z"
      },
      "message": "Merge #9050: net: make a few values immutable, and use deterministic randomness for the localnonce\n\n59ac5c5 net: Use deterministic randomness for CNode's nonce, and make it const (Cory Fields)\naff6584 net: constify a few CNode vars to indicate that they're threadsafe (Cory Fields)",
      "tree": {
        "sha": "4bafb060d1cfa3868a785ead2b574496e0ee2638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4bafb060d1cfa3868a785ead2b574496e0ee2638"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYGwcuAAoJEHSBCwEjRsmmAOkIAIJIO0J0VY+bBq4b7b3dwgAP\nfbIMNyWLLC9pNHjnJ/DaymXrqtB/su8WfG7C5B/m0R3Nf/luXLdMa4W9AUKFu5Sc\n7VW20V5PVFhAp8EReMDwYkcivPZAanTU46biIS0eiabUJFrSO+bqWaIruyJEkOZh\neVPUDKpR+wwmpaJ8HiTOpVLEP2z/5SA9FTTJ0PQD9zWKOgUbXyyuRnNa8+Z0dFT8\nPWtV7oKDgGsMo6oRPwhGM+NZS3eUsdqLtXM+YMEE2W3yLyYKZaR9dnkT8AnFTsNB\nPiw3UEs/sPK1Eu9QA+6OBKqghI+vcBlnJ3dzEj1DfM+WKG8MfUIF/4WMy/w6N8w=\n=N0if\n-----END PGP SIGNATURE-----",
        "payload": "tree 4bafb060d1cfa3868a785ead2b574496e0ee2638\nparent d1871da7fe6389ef4dbcd93457c39258e6f48180\nparent 59ac5c5b72fef6a70fe621537faf27df1076b524\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478166311 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478166318 +0100\n\nMerge #9050: net: make a few values immutable, and use deterministic randomness for the localnonce\n\n59ac5c5 net: Use deterministic randomness for CNode's nonce, and make it const (Cory Fields)\naff6584 net: constify a few CNode vars to indicate that they're threadsafe (Cory Fields)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1871da7fe6389ef4dbcd93457c39258e6f48180",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1871da7fe6389ef4dbcd93457c39258e6f48180",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1871da7fe6389ef4dbcd93457c39258e6f48180"
      },
      {
        "sha": "59ac5c5b72fef6a70fe621537faf27df1076b524",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59ac5c5b72fef6a70fe621537faf27df1076b524",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59ac5c5b72fef6a70fe621537faf27df1076b524"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 33,
      "deletions": 23
    },
    "files": [
      {
        "sha": "18d25cbcd1128bb12aacf85f647c4849c90e1c64",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 11,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "patch": "@@ -64,6 +64,7 @@\n const static std::string NET_MESSAGE_COMMAND_OTHER = \"*other*\";\n \n static const uint64_t RANDOMIZER_ID_NETGROUP = 0x6c0edd8036ef4036ULL; // SHA256(\"netgroup\")[0:8]\n+static const uint64_t RANDOMIZER_ID_LOCALHOSTNONCE = 0xd93e69e2bbfa5735ULL; // SHA256(\"localhostnonce\")[0:8]\n //\n // Global state variables\n //\n@@ -389,7 +390,10 @@ CNode* CConnman::ConnectNode(CAddress addrConnect, const char *pszDest, bool fCo\n         addrman.Attempt(addrConnect, fCountFailure);\n \n         // Add node\n-        CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), pszDest ? pszDest : \"\", false);\n+        NodeId id = GetNewNodeId();\n+        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+        CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addrConnect, CalculateKeyedNetGroup(addrConnect), nonce, pszDest ? pszDest : \"\", false);\n+\n         GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n         pnode->AddRef();\n \n@@ -1024,7 +1028,10 @@ void CConnman::AcceptConnection(const ListenSocket& hListenSocket) {\n         }\n     }\n \n-    CNode* pnode = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), \"\", true);\n+    NodeId id = GetNewNodeId();\n+    uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+\n+    CNode* pnode = new CNode(id, nLocalServices, GetBestHeight(), hSocket, addr, CalculateKeyedNetGroup(addr), nonce, \"\", true);\n     GetNodeSignals().InitializeNode(pnode->GetId(), pnode);\n     pnode->AddRef();\n     pnode->fWhitelisted = whitelisted;\n@@ -2118,7 +2125,11 @@ bool CConnman::Start(boost::thread_group& threadGroup, CScheduler& scheduler, st\n     if (pnodeLocalHost == NULL) {\n         CNetAddr local;\n         LookupHost(\"127.0.0.1\", local, false);\n-        pnodeLocalHost = new CNode(GetNewNodeId(), nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices), 0);\n+\n+        NodeId id = GetNewNodeId();\n+        uint64_t nonce = GetDeterministicRandomizer(RANDOMIZER_ID_LOCALHOSTNONCE).Write(id).Finalize();\n+\n+        pnodeLocalHost = new CNode(id, nLocalServices, GetBestHeight(), INVALID_SOCKET, CAddress(CService(local, 0), nLocalServices), 0, nonce);\n         GetNodeSignals().InitializeNode(pnodeLocalHost->GetId(), pnodeLocalHost);\n     }\n \n@@ -2509,12 +2520,17 @@ void CNode::Fuzz(int nChance)\n unsigned int CConnman::GetReceiveFloodSize() const { return nReceiveFloodSize; }\n unsigned int CConnman::GetSendBufferSize() const{ return nSendBufferMaxSize; }\n \n-CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, const std::string& addrNameIn, bool fInboundIn) :\n+CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress& addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n     addr(addrIn),\n+    fInbound(fInboundIn),\n+    id(idIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n     addrKnown(5000, 0.001),\n-    filterInventoryKnown(50000, 0.000001)\n+    filterInventoryKnown(50000, 0.000001),\n+    nLocalHostNonce(nLocalHostNonceIn),\n+    nLocalServices(nLocalServicesIn),\n+    nMyStartingHeight(nMyStartingHeightIn)\n {\n     nServices = NODE_NONE;\n     nServicesExpected = NODE_NONE;\n@@ -2533,7 +2549,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     fOneShot = false;\n     fClient = false; // set by version message\n     fFeeler = false;\n-    fInbound = fInboundIn;\n     fNetworkNode = false;\n     fSuccessfullyConnected = false;\n     fDisconnect = false;\n@@ -2562,12 +2577,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     minFeeFilter = 0;\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n-    id = idIn;\n     nOptimisticBytesWritten = 0;\n-    nLocalServices = nLocalServicesIn;\n-\n-    GetRandBytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n-    nMyStartingHeight = nMyStartingHeightIn;\n \n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;"
      },
      {
        "sha": "bfce516237df86bb12ecc02b37d7afc2a101932f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "patch": "@@ -589,7 +589,7 @@ class CNode\n     bool fFeeler; // If true this node is being used as a short lived feeler.\n     bool fOneShot;\n     bool fClient;\n-    bool fInbound;\n+    const bool fInbound;\n     bool fNetworkNode;\n     bool fSuccessfullyConnected;\n     bool fDisconnect;\n@@ -603,7 +603,7 @@ class CNode\n     CCriticalSection cs_filter;\n     CBloomFilter* pfilter;\n     int nRefCount;\n-    NodeId id;\n+    const NodeId id;\n \n     const uint64_t nKeyedNetGroup;\n protected:\n@@ -669,18 +669,18 @@ class CNode\n     CAmount lastSentFeeFilter;\n     int64_t nextSendTimeFeeFilter;\n \n-    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n+    CNode(NodeId id, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn, SOCKET hSocketIn, const CAddress &addrIn, uint64_t nKeyedNetGroupIn, uint64_t nLocalHostNonceIn, const std::string &addrNameIn = \"\", bool fInboundIn = false);\n     ~CNode();\n \n private:\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n \n-    uint64_t nLocalHostNonce;\n+    const uint64_t nLocalHostNonce;\n     // Services offered to this peer\n-    ServiceFlags nLocalServices;\n-    int nMyStartingHeight;\n+    const ServiceFlags nLocalServices;\n+    const int nMyStartingHeight;\n public:\n \n     NodeId GetId() const {"
      },
      {
        "sha": "4aa716681579018e66c3a01e3f2e636082bec690",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "patch": "@@ -48,7 +48,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n {\n     connman->ClearBanned();\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 0, 0, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n@@ -57,7 +57,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n     CAddress addr2(ip(0xa0b0c002), NODE_NONE);\n-    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, \"\", true);\n+    CNode dummyNode2(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr2, 1, 1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode2.GetId(), &dummyNode2);\n     dummyNode2.nVersion = 1;\n     Misbehaving(dummyNode2.GetId(), 50);\n@@ -74,7 +74,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     connman->ClearBanned();\n     mapArgs[\"-banscore\"] = \"111\"; // because 11 is my favorite number\n     CAddress addr1(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, \"\", true);\n+    CNode dummyNode1(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr1, 3, 1, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode1.GetId(), &dummyNode1);\n     dummyNode1.nVersion = 1;\n     Misbehaving(dummyNode1.GetId(), 100);\n@@ -96,7 +96,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001), NODE_NONE);\n-    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, \"\", true);\n+    CNode dummyNode(id++, NODE_NETWORK, 0, INVALID_SOCKET, addr, 4, 4, \"\", true);\n     GetNodeSignals().InitializeNode(dummyNode.GetId(), &dummyNode);\n     dummyNode.nVersion = 1;\n "
      },
      {
        "sha": "e0460109d5c23d6059358bc3b36f79362e9c3307",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "patch": "@@ -164,12 +164,12 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n     bool fInboundIn = false;\n \n     // Test that fFeeler is false by default.\n-    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, pszDest, fInboundIn);\n+    CNode* pnode1 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 0, 0, pszDest, fInboundIn);\n     BOOST_CHECK(pnode1->fInbound == false);\n     BOOST_CHECK(pnode1->fFeeler == false);\n \n     fInboundIn = true;\n-    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, pszDest, fInboundIn);\n+    CNode* pnode2 = new CNode(id++, NODE_NETWORK, height, hSocket, addr, 1, 1, pszDest, fInboundIn);\n     BOOST_CHECK(pnode2->fInbound == true);\n     BOOST_CHECK(pnode2->fFeeler == false);\n }"
      }
    ]
  },
  {
    "sha": "2b175d4b018be432e333bf8a343b85c5f284264f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjE3NWQ0YjAxOGJlNDMyZTMzM2JmOGEzNDNiODVjNWYyODQyNjRm",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-02T22:56:32Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2016-11-03T14:50:20Z"
      },
      "message": "Clean up bctest.py and bitcoin-util-test.py\n\n- remove newlines\n- change tabs for spaces, to align with convention in other py files\n- add comments\n- add 'Bitcoin Core Developers' copyright notice",
      "tree": {
        "sha": "a1a021d94cb8efebc6b6d4435467f8d6656d0ee1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a1a021d94cb8efebc6b6d4435467f8d6656d0ee1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b175d4b018be432e333bf8a343b85c5f284264f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b175d4b018be432e333bf8a343b85c5f284264f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b175d4b018be432e333bf8a343b85c5f284264f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b175d4b018be432e333bf8a343b85c5f284264f/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a1343f73bd0f6744cfcfda1e3e1c8998f67e2d7"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 101,
      "deletions": 81
    },
    "files": [
      {
        "sha": "47cff98bca2edc15667e2a7ff97dae967af412d1",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 96,
        "deletions": 79,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=2b175d4b018be432e333bf8a343b85c5f284264f",
        "patch": "@@ -1,4 +1,5 @@\n # Copyright 2014 BitPay, Inc.\n+# Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n@@ -11,94 +12,110 @@\n import logging\n \n def parse_output(a, fmt):\n-\tif fmt == 'json': # json: compare parsed data\n-\t\treturn json.loads(a)\n-\telif fmt == 'hex': # hex: parse and compare binary data\n-\t\treturn binascii.a2b_hex(a.strip())\n-\telse:\n-\t\traise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n+    \"\"\"Parse the output according to specified format.\n+\n+    Raise an error if the output can't be parsed.\"\"\"\n+    if fmt == 'json': # json: compare parsed data\n+        return json.loads(a)\n+    elif fmt == 'hex': # hex: parse and compare binary data\n+        return binascii.a2b_hex(a.strip())\n+    else:\n+        raise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n \n def bctest(testDir, testObj, exeext):\n+    \"\"\"Runs a single test, comparing output and RC to expected output and RC.\n \n-\texecprog = testObj['exec'] + exeext\n-\texecargs = testObj['args']\n-\texecrun = [execprog] + execargs\n-\tstdinCfg = None\n-\tinputData = None\n-\tif \"input\" in testObj:\n-\t\tfilename = testDir + \"/\" + testObj['input']\n-\t\tinputData = open(filename).read()\n-\t\tstdinCfg = subprocess.PIPE\n+    Raises an error if input can't be read, executable fails, or output/RC\n+    are not as expected. Error is caught by bctester() and reported.\n+    \"\"\"\n+    # Get the exec names and arguments\n+    execprog = testObj['exec'] + exeext\n+    execargs = testObj['args']\n+    execrun = [execprog] + execargs\n \n-\toutputFn = None\n-\toutputData = None\n-\tif \"output_cmp\" in testObj:\n-\t\toutputFn = testObj['output_cmp']\n-\t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n-\t\ttry:\n-\t\t\toutputData = open(testDir + \"/\" + outputFn).read()\n-\t\texcept:\n-\t\t\tlogging.error(\"Output file \" + outputFn + \" can not be opened\")\n-\t\t\traise\n-\t\tif not outputData:\n-\t\t\tlogging.error(\"Output data missing for \" + outputFn)\n-\t\t\traise Exception\n+    # Read the input data (if there is any)\n+    stdinCfg = None\n+    inputData = None\n+    if \"input\" in testObj:\n+        filename = testDir + \"/\" + testObj['input']\n+        inputData = open(filename).read()\n+        stdinCfg = subprocess.PIPE\n \n-\tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n-\ttry:\n-\t\touts = proc.communicate(input=inputData)\n-\texcept OSError:\n-\t\tlogging.error(\"OSError, Failed to execute \" + execprog)\n-\t\traise\n+    # Read the expected output data (if there is any)\n+    outputFn = None\n+    outputData = None\n+    if \"output_cmp\" in testObj:\n+        outputFn = testObj['output_cmp']\n+        outputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n+        try:\n+            outputData = open(testDir + \"/\" + outputFn).read()\n+        except:\n+            logging.error(\"Output file \" + outputFn + \" can not be opened\")\n+            raise\n+        if not outputData:\n+            logging.error(\"Output data missing for \" + outputFn)\n+            raise Exception\n \n-\tif outputData:\n-\t\ttry:\n-\t\t\ta_parsed = parse_output(outs[0], outputType)\n-\t\texcept Exception as e:\n-\t\t\tlogging.error('Error parsing command output as %s: %s' % (outputType,e))\n-\t\t\traise\n-\t\ttry:\n-\t\t\tb_parsed = parse_output(outputData, outputType)\n-\t\texcept Exception as e:\n-\t\t\tlogging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n-\t\t\traise\n-\t\tif a_parsed != b_parsed:\n-\t\t\tlogging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\traise Exception\n-\t\tif outs[0] != outputData:\n-\t\t\terror_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n-\t\t\terror_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n-\t\t\t\t                                          outs[0].splitlines(True),\n-\t\t\t\t                                          fromfile=outputFn,\n-\t\t\t\t                                          tofile=\"returned\"))\n-\t\t\tlogging.error(error_message)\n-\t\t\traise Exception\n+    # Run the test\n+    proc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n+    try:\n+        outs = proc.communicate(input=inputData)\n+    except OSError:\n+        logging.error(\"OSError, Failed to execute \" + execprog)\n+        raise\n \n-\twantRC = 0\n-\tif \"return_code\" in testObj:\n-\t\twantRC = testObj['return_code']\n-\tif proc.returncode != wantRC:\n-\t\tlogging.error(\"Return code mismatch for \" + outputFn)\n-\t\traise Exception\n+    if outputData:\n+        # Parse command output and expected output\n+        try:\n+            a_parsed = parse_output(outs[0], outputType)\n+        except Exception as e:\n+            logging.error('Error parsing command output as %s: %s' % (outputType,e))\n+            raise\n+        try:\n+            b_parsed = parse_output(outputData, outputType)\n+        except Exception as e:\n+            logging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+            raise\n+        # Compare data\n+        if a_parsed != b_parsed:\n+            logging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+            raise Exception\n+        # Compare formatting\n+        if outs[0] != outputData:\n+            error_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+            error_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n+                                                          outs[0].splitlines(True),\n+                                                          fromfile=outputFn,\n+                                                          tofile=\"returned\"))\n+            logging.error(error_message)\n+            raise Exception\n \n-def bctester(testDir, input_basename, buildenv):\n-\tinput_filename = testDir + \"/\" + input_basename\n-\traw_data = open(input_filename).read()\n-\tinput_data = json.loads(raw_data)\n+    # Compare the return code to the expected return code\n+    wantRC = 0\n+    if \"return_code\" in testObj:\n+        wantRC = testObj['return_code']\n+    if proc.returncode != wantRC:\n+        logging.error(\"Return code mismatch for \" + outputFn)\n+        raise Exception\n \n-\tfailed_testcases = []\n+def bctester(testDir, input_basename, buildenv):\n+    \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\"\n+    input_filename = testDir + \"/\" + input_basename\n+    raw_data = open(input_filename).read()\n+    input_data = json.loads(raw_data)\n \n-\tfor testObj in input_data:\n-\t\ttry:\n-\t\t\tbctest(testDir, testObj, buildenv.exeext)\n-\t\t\tlogging.info(\"PASSED: \" + testObj[\"description\"])\n-\t\texcept:\n-\t\t\tlogging.info(\"FAILED: \" + testObj[\"description\"])\n-\t\t\tfailed_testcases.append(testObj[\"description\"])\n+    failed_testcases = []\n \n-\tif failed_testcases:\n-\t\tlogging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n-\t\tsys.exit(1)\n-\telse:\n-\t\tsys.exit(0)\n+    for testObj in input_data:\n+        try:\n+            bctest(testDir, testObj, buildenv.exeext)\n+            logging.info(\"PASSED: \" + testObj[\"description\"])\n+        except:\n+            logging.info(\"FAILED: \" + testObj[\"description\"])\n+            failed_testcases.append(testObj[\"description\"])\n \n+    if failed_testcases:\n+        logging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n+        sys.exit(1)\n+    else:\n+        sys.exit(0)"
      },
      {
        "sha": "eeb05c0b889a3d49ad6a7ffe8d3155981b933d0f",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b175d4b018be432e333bf8a343b85c5f284264f/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=2b175d4b018be432e333bf8a343b85c5f284264f",
        "patch": "@@ -1,5 +1,6 @@\n #!/usr/bin/env python\n # Copyright 2014 BitPay, Inc.\n+# Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n@@ -16,11 +17,13 @@\n \n Can also be run manually from the src directory by specifiying the source directory:\n \n-test/bitcoin-util-test.py --src=[srcdir]\n+test/bitcoin-util-test.py --srcdir='srcdir' [--verbose]\n \"\"\"\n \n-\n if __name__ == '__main__':\n+    # Try to get the source directory from the environment variables. This will\n+    # be set for `make check` automated runs. If environment variable is not set,\n+    # then get the source directory from command line args.\n     try:\n         srcdir = os.environ[\"srcdir\"]\n         verbose = False"
      }
    ]
  },
  {
    "sha": "3665483be7be177dfa6cb608818e04f68f173c53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjY1NDgzYmU3YmUxNzdkZmE2Y2I2MDg4MThlMDRmNjhmMTczYzUz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T14:45:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T15:31:32Z"
      },
      "message": "Merge #8969: Decouple peer-processing-logic from block-connection-logic (#2)\n\nf5b960b Move nTimeBestReceived updating into net processing code (Matt Corallo)\nd8670fb Move all calls to CheckBlockIndex out of net-processing logic (Matt Corallo)\nd6ea737 Remove network state wipe from UnloadBlockIndex. (Matt Corallo)\nfc0c24f Move MarkBlockAsReceived out of ProcessNewMessage (Matt Corallo)\n65f35eb Move FlushStateToDisk call out of ProcessMessages::TX into ATMP (Matt Corallo)",
      "tree": {
        "sha": "a6e4620138cb6e6cb1125016374f9efbf4b06c70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a6e4620138cb6e6cb1125016374f9efbf4b06c70"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3665483be7be177dfa6cb608818e04f68f173c53",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYG1hUAAoJEHSBCwEjRsmmh4kIALccPpc/XNWwRkZYcs9imvnU\nKDY3ju1HNAb89hahfgI0URpeiRkcXwrXH2xiHcPn7Rk8eGr1JqarEXXYWqZy1jIP\nL2D593RtkBkRuDHqr8MmJFpNJIEC/9KggxJaychs5F7bWSEIFv4+sMjFy6SQVSkl\niosC2uG/JU8RDiL0MWkTrin3w2CTkNjpEv9hrIxelpd82ivF+nyBOpgqsVXiNXkT\nKBMn/uXxZAiEoXNcPBjShgA6ACTAnhHwc2uu8DR2actmTwyJfqnoSaX77V9quVDF\nw/O/j4sHlDUS8WBe9LZR+bOFwv5vTQvG+ofTmsHjg0buJxIRUGNLZStwaRDYXg0=\n=TQaF\n-----END PGP SIGNATURE-----",
        "payload": "tree a6e4620138cb6e6cb1125016374f9efbf4b06c70\nparent fcf61b80fa2ce60ee1a806dbf4d4240aa682b879\nparent f5b960be4e9a9ab669e1436194fa904ccba58900\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478184311 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478187092 +0100\n\nMerge #8969: Decouple peer-processing-logic from block-connection-logic (#2)\n\nf5b960b Move nTimeBestReceived updating into net processing code (Matt Corallo)\nd8670fb Move all calls to CheckBlockIndex out of net-processing logic (Matt Corallo)\nd6ea737 Remove network state wipe from UnloadBlockIndex. (Matt Corallo)\nfc0c24f Move MarkBlockAsReceived out of ProcessNewMessage (Matt Corallo)\n65f35eb Move FlushStateToDisk call out of ProcessMessages::TX into ATMP (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3665483be7be177dfa6cb608818e04f68f173c53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3665483be7be177dfa6cb608818e04f68f173c53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3665483be7be177dfa6cb608818e04f68f173c53/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879"
      },
      {
        "sha": "f5b960be4e9a9ab669e1436194fa904ccba58900",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5b960be4e9a9ab669e1436194fa904ccba58900",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5b960be4e9a9ab669e1436194fa904ccba58900"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 49,
      "deletions": 29
    },
    "files": [
      {
        "sha": "31e3efb459d6c267fe3feeaa2787a016e19f6a06",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3665483be7be177dfa6cb608818e04f68f173c53/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3665483be7be177dfa6cb608818e04f68f173c53/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3665483be7be177dfa6cb608818e04f68f173c53",
        "patch": "@@ -1103,6 +1103,10 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n         return false;\n #endif\n     // ********************************************************* Step 6: network initialization\n+    // Note that we absolutely cannot open any actual connections\n+    // until the very end (\"start node\") as the UTXO/block state\n+    // is not yet setup and may end up being set up twice if we\n+    // need to reindex later.\n \n     assert(!g_connman);\n     g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));"
      },
      {
        "sha": "3f706b1503aa20ea6de5d817c6d8340afd7f6fa6",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 28,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3665483be7be177dfa6cb608818e04f68f173c53/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3665483be7be177dfa6cb608818e04f68f173c53/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=3665483be7be177dfa6cb608818e04f68f173c53",
        "patch": "@@ -63,7 +63,7 @@ CCriticalSection cs_main;\n BlockMap mapBlockIndex;\n CChain chainActive;\n CBlockIndex *pindexBestHeader = NULL;\n-int64_t nTimeBestReceived = 0;\n+int64_t nTimeBestReceived = 0; // Used only to inform the wallet of when we last received a block\n CWaitableCriticalSection csBestBlock;\n CConditionVariable cvBlockChange;\n int nScriptCheckThreads = 0;\n@@ -691,6 +691,16 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n CCoinsViewCache *pcoinsTip = NULL;\n CBlockTreeDB *pblocktree = NULL;\n \n+enum FlushStateMode {\n+    FLUSH_STATE_NONE,\n+    FLUSH_STATE_IF_NEEDED,\n+    FLUSH_STATE_PERIODIC,\n+    FLUSH_STATE_ALWAYS\n+};\n+\n+// See definition for documentation\n+bool static FlushStateToDisk(CValidationState &state, FlushStateMode mode);\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // mapOrphanTransactions\n@@ -1581,6 +1591,9 @@ bool AcceptToMemoryPoolWithTime(CTxMemPool& pool, CValidationState &state, const\n         BOOST_FOREACH(const uint256& hashTx, vHashTxToUncache)\n             pcoinsTip->Uncache(hashTx);\n     }\n+    // After we've (potentially) uncached entries, ensure our coins cache is still within its size limits\n+    CValidationState stateDummy;\n+    FlushStateToDisk(stateDummy, FLUSH_STATE_PERIODIC);\n     return res;\n }\n \n@@ -2565,13 +2578,6 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     return true;\n }\n \n-enum FlushStateMode {\n-    FLUSH_STATE_NONE,\n-    FLUSH_STATE_IF_NEEDED,\n-    FLUSH_STATE_PERIODIC,\n-    FLUSH_STATE_ALWAYS\n-};\n-\n /**\n  * Update the on-disk chain state.\n  * The caches and indexes are flushed depending on the mode we're called with\n@@ -2691,7 +2697,6 @@ void static UpdateTip(CBlockIndex *pindexNew, const CChainParams& chainParams) {\n     chainActive.SetTip(pindexNew);\n \n     // New best block\n-    nTimeBestReceived = GetTime();\n     mempool.AddTransactionsUpdated(1);\n \n     cvBlockChange.notify_all();\n@@ -3676,6 +3681,8 @@ static bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state\n     if (ppindex)\n         *ppindex = pindex;\n \n+    CheckBlockIndex(chainparams.GetConsensus());\n+\n     return true;\n }\n \n@@ -3703,6 +3710,11 @@ static bool AcceptBlock(const CBlock& block, CValidationState& state, const CCha\n     // not process unrequested blocks.\n     bool fTooFarAhead = (pindex->nHeight > int(chainActive.Height() + MIN_BLOCKS_TO_KEEP));\n \n+    // TODO: Decouple this function from the block download logic by removing fRequested\n+    // This requires some new chain datastructure to efficiently look up if a\n+    // block is in a chain leading to a candidate for best tip, despite not\n+    // being such a candidate itself.\n+\n     // TODO: deal better with return value and error conditions for duplicate\n     // and unrequested blocks.\n     if (fAlreadyHave) return true;\n@@ -3751,13 +3763,11 @@ bool ProcessNewBlock(CValidationState& state, const CChainParams& chainparams, C\n {\n     {\n         LOCK(cs_main);\n-        bool fRequested = MarkBlockAsReceived(pblock->GetHash());\n-        fRequested |= fForceProcessing;\n \n         // Store to disk\n         CBlockIndex *pindex = NULL;\n         bool fNewBlock = false;\n-        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fRequested, dbp, &fNewBlock);\n+        bool ret = AcceptBlock(*pblock, state, chainparams, &pindex, fForceProcessing, dbp, &fNewBlock);\n         if (pindex && pfrom) {\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n             if (fNewBlock) pfrom->nLastBlockTime = GetTime();\n@@ -4269,6 +4279,9 @@ bool RewindBlockIndex(const CChainParams& params)\n     return true;\n }\n \n+// May NOT be used after any connections are up as much\n+// of the peer-processing logic assumes a consistent\n+// block index state\n void UnloadBlockIndex()\n {\n     LOCK(cs_main);\n@@ -4279,18 +4292,12 @@ void UnloadBlockIndex()\n     mempool.clear();\n     mapOrphanTransactions.clear();\n     mapOrphanTransactionsByPrev.clear();\n-    nSyncStarted = 0;\n     mapBlocksUnlinked.clear();\n     vinfoBlockFile.clear();\n     nLastBlockFile = 0;\n     nBlockSequenceId = 1;\n-    mapBlockSource.clear();\n-    mapBlocksInFlight.clear();\n-    nPreferredDownload = 0;\n     setDirtyBlockIndex.clear();\n     setDirtyFileInfo.clear();\n-    mapNodeState.clear();\n-    recentRejects.reset(NULL);\n     versionbitscache.Clear();\n     for (int b = 0; b < VERSIONBITS_NUM_BITS; b++) {\n         warningcache[b].clear();\n@@ -4315,9 +4322,6 @@ bool InitBlockIndex(const CChainParams& chainparams)\n {\n     LOCK(cs_main);\n \n-    // Initialize global variables that cannot be constructed at startup.\n-    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n-\n     // Check whether we're already initialized\n     if (chainActive.Genesis() != NULL)\n         return true;\n@@ -4706,6 +4710,11 @@ std::string GetWarnings(const std::string& strFor)\n // blockchain -> download logic notification\n //\n \n+PeerLogicValidation::PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {\n+    // Initialize global variables that cannot be constructed at startup.\n+    recentRejects.reset(new CRollingBloomFilter(120000, 0.000001));\n+}\n+\n void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload) {\n     const int nNewHeight = pindexNew->nHeight;\n     connman->SetBestHeight(nNewHeight);\n@@ -4732,6 +4741,8 @@ void PeerLogicValidation::UpdatedBlockTip(const CBlockIndex *pindexNew, const CB\n             }\n         });\n     }\n+\n+    nTimeBestReceived = GetTime();\n }\n \n void PeerLogicValidation::BlockChecked(const CBlock& block, const CValidationState& state) {\n@@ -5690,7 +5701,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n         }\n-        FlushStateToDisk(state, FLUSH_STATE_PERIODIC);\n     }\n \n \n@@ -5826,8 +5836,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 return ProcessMessage(pfrom, NetMsgType::HEADERS, vHeadersMsg, nTimeReceived, chainparams, connman);\n             }\n         }\n-\n-        CheckBlockIndex(chainparams.GetConsensus());\n     }\n \n     else if (strCommand == NetMsgType::BLOCKTXN && !fImporting && !fReindex) // Ignore blocks received while importing\n@@ -5859,12 +5867,16 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 std::vector<CInv> invs;\n                 invs.push_back(CInv(MSG_BLOCK | GetFetchFlags(pfrom, chainActive.Tip(), chainparams.GetConsensus()), resp.blockhash));\n                 pfrom->PushMessage(NetMsgType::GETDATA, invs);\n-            } else\n+            } else {\n+                MarkBlockAsReceived(resp.blockhash); // it is now an empty pointer\n                 fBlockRead = true;\n+            }\n         } // Don't hold cs_main when we call into ProcessNewBlock\n         if (fBlockRead) {\n             CValidationState state;\n-            ProcessNewBlock(state, chainparams, pfrom, &block, false, NULL);\n+            // Since we requested this block (it was in mapBlocksInFlight), force it to be processed,\n+            // even if it would not be a candidate for new tip (missing previous block, chain not long enough, etc)\n+            ProcessNewBlock(state, chainparams, pfrom, &block, true, NULL);\n             int nDoS;\n             if (state.IsInvalid(nDoS)) {\n                 assert (state.GetRejectCode() < REJECT_INTERNAL); // Blocks are never rejected with internal reject codes\n@@ -6020,8 +6032,6 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 }\n             }\n         }\n-\n-        CheckBlockIndex(chainparams.GetConsensus());\n         }\n \n         NotifyHeaderTip();\n@@ -6040,6 +6050,12 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n         // Such an unrequested block may still be processed, subject to the\n         // conditions in AcceptBlock().\n         bool forceProcessing = pfrom->fWhitelisted && !IsInitialBlockDownload();\n+        {\n+            LOCK(cs_main);\n+            // Also always process if we requested the block explicitly, as we may\n+            // need it even though it is not a candidate for a new best tip.\n+            forceProcessing |= MarkBlockAsReceived(block.GetHash());\n+        }\n         ProcessNewBlock(state, chainparams, pfrom, &block, forceProcessing, NULL);\n         int nDoS;\n         if (state.IsInvalid(nDoS)) {"
      },
      {
        "sha": "e80314a64b9fd28ec7cdada14a9c4379981c665d",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3665483be7be177dfa6cb608818e04f68f173c53/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3665483be7be177dfa6cb608818e04f68f173c53/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=3665483be7be177dfa6cb608818e04f68f173c53",
        "patch": "@@ -552,7 +552,7 @@ class PeerLogicValidation : public CValidationInterface {\n     CConnman* connman;\n \n public:\n-    PeerLogicValidation(CConnman* connmanIn) : connman(connmanIn) {}\n+    PeerLogicValidation(CConnman* connmanIn);\n \n     virtual void UpdatedBlockTip(const CBlockIndex *pindexNew, const CBlockIndex *pindexFork, bool fInitialDownload);\n     virtual void BlockChecked(const CBlock& block, const CValidationState& state);"
      }
    ]
  },
  {
    "sha": "8f329f991bc81ddcfb4f51574e2003edde14e996",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjMyOWY5OTFiYzgxZGRjZmI0ZjUxNTc0ZTIwMDNlZGRlMTRlOTk2",
    "commit": {
      "author": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-11-03T13:56:26Z"
      },
      "committer": {
        "name": "instagibbs",
        "email": "gsanders87@gmail.com",
        "date": "2016-11-03T16:09:38Z"
      },
      "message": "Add common failure cases for rpc server connection failure",
      "tree": {
        "sha": "a07a1be2baf1999a0114e0368be195c9efe15bf6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a07a1be2baf1999a0114e0368be195c9efe15bf6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f329f991bc81ddcfb4f51574e2003edde14e996",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f329f991bc81ddcfb4f51574e2003edde14e996",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f329f991bc81ddcfb4f51574e2003edde14e996",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f329f991bc81ddcfb4f51574e2003edde14e996/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcf61b80fa2ce60ee1a806dbf4d4240aa682b879"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a2f380e67b13c19e217ce8bdc7073cee8b732b2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f329f991bc81ddcfb4f51574e2003edde14e996/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f329f991bc81ddcfb4f51574e2003edde14e996/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=8f329f991bc81ddcfb4f51574e2003edde14e996",
        "patch": "@@ -240,7 +240,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     event_base_free(base);\n \n     if (response.status == 0)\n-        throw CConnectionFailed(strprintf(\"couldn't connect to server (%d %s)\", response.error, http_errorstring(response.error)));\n+        throw CConnectionFailed(strprintf(\"couldn't connect to server\\n(make sure server is running and you are connecting to the correct RPC port: %d %s)\", response.error, http_errorstring(response.error)));\n     else if (response.status == HTTP_UNAUTHORIZED)\n         throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n     else if (response.status >= 400 && response.status != HTTP_BAD_REQUEST && response.status != HTTP_NOT_FOUND && response.status != HTTP_INTERNAL_SERVER_ERROR)"
      }
    ]
  },
  {
    "sha": "82077ef6e49a08b3772d5c82f6e0cfe390e11966",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MjA3N2VmNmU0OWEwOGIzNzcyZDVjODJmNmUwY2ZlMzkwZTExOTY2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T18:18:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-03T18:20:01Z"
      },
      "message": "Merge #9073: Trivial: Add common failure cases for rpc server connection failure\n\n8f329f9 Add common failure cases for rpc server connection failure (instagibbs)",
      "tree": {
        "sha": "a5567b3cc550d05c5bd45d8c6dc6258bff7ca9ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5567b3cc550d05c5bd45d8c6dc6258bff7ca9ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82077ef6e49a08b3772d5c82f6e0cfe390e11966",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYG3/RAAoJEHSBCwEjRsmmZ0oH/0zC6GELv7O3n74IvE7Oogk2\nwUcK2FQiqHhvn4BGLDk00U+WzNl4GfkJsIf2UrVh4ztVbJMFFUyy51kyGpty4TSg\nOlVxJ2sAnHLyzNRc4SjFvNmBRElB7O9pjGBnTMYbSv2TcrJwZWqKghwZZH+k+TjX\nCidDErUFXpMERxu0uoiDqW/GoYEWNYjMbQ6I3KXT/bKwni+zEk3mmtbW+6+43Iv1\n3uzHIaam18KbRqyXiofsKoY+AUHYCmgtJ6Eu0Rw1rJeJs9y0KjlzYvgWglolAEHe\n+vxsf8ZhNp2tzPVcf8vrofCRjQ9ALqG758W03jdW8luSVd/b6ZTr+bD0k6u+UC0=\n=21/m\n-----END PGP SIGNATURE-----",
        "payload": "tree a5567b3cc550d05c5bd45d8c6dc6258bff7ca9ee\nparent 3665483be7be177dfa6cb608818e04f68f173c53\nparent 8f329f991bc81ddcfb4f51574e2003edde14e996\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478197102 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478197201 +0100\n\nMerge #9073: Trivial: Add common failure cases for rpc server connection failure\n\n8f329f9 Add common failure cases for rpc server connection failure (instagibbs)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82077ef6e49a08b3772d5c82f6e0cfe390e11966",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82077ef6e49a08b3772d5c82f6e0cfe390e11966",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82077ef6e49a08b3772d5c82f6e0cfe390e11966/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3665483be7be177dfa6cb608818e04f68f173c53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3665483be7be177dfa6cb608818e04f68f173c53",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3665483be7be177dfa6cb608818e04f68f173c53"
      },
      {
        "sha": "8f329f991bc81ddcfb4f51574e2003edde14e996",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f329f991bc81ddcfb4f51574e2003edde14e996",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f329f991bc81ddcfb4f51574e2003edde14e996"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8a2f380e67b13c19e217ce8bdc7073cee8b732b2",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82077ef6e49a08b3772d5c82f6e0cfe390e11966/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82077ef6e49a08b3772d5c82f6e0cfe390e11966/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=82077ef6e49a08b3772d5c82f6e0cfe390e11966",
        "patch": "@@ -240,7 +240,7 @@ UniValue CallRPC(const string& strMethod, const UniValue& params)\n     event_base_free(base);\n \n     if (response.status == 0)\n-        throw CConnectionFailed(strprintf(\"couldn't connect to server (%d %s)\", response.error, http_errorstring(response.error)));\n+        throw CConnectionFailed(strprintf(\"couldn't connect to server\\n(make sure server is running and you are connecting to the correct RPC port: %d %s)\", response.error, http_errorstring(response.error)));\n     else if (response.status == HTTP_UNAUTHORIZED)\n         throw runtime_error(\"incorrect rpcuser or rpcpassword (authorization failed)\");\n     else if (response.status >= 400 && response.status != HTTP_BAD_REQUEST && response.status != HTTP_NOT_FOUND && response.status != HTTP_INTERNAL_SERVER_ERROR)"
      }
    ]
  },
  {
    "sha": "ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZDY0YmNlYzJkZGUxZjQyNTVmM2JkNWIwYzJmMDFlNGRmZTI2MGQz",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-04T06:55:11Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-11-04T07:31:23Z"
      },
      "message": "Merge #9069: Clean up bctest.py and bitcoin-util-test.py\n\n2b175d4 Clean up bctest.py and bitcoin-util-test.py (John Newbery)",
      "tree": {
        "sha": "b233cb996c397c15aa656eead10d676142bc957e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b233cb996c397c15aa656eead10d676142bc957e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQEcBAABCgAGBQJYHDlLAAoJEHSBCwEjRsmmh4wIAKwkrLelDj6El20m3HAfFyRN\nLX1mEJnWaAP30cTWcNoCGhNh+CssoetShk76KMamRoOTXevLp17Eolup+ClMWLFv\noLOHMWba/uMsY1bmcPeiZHRLCr5r80pKlYjELAzOi1KmjWyFHzO0wnyQH2l05Dwo\nr8E5LIEpZWyUglQHCz9ZJdVReih0h3QAnM+lMDf3QIuFNqjtPw1tbyrU8amWW6pC\nXf7x+OiGTIzisUxGrjZJVUuwILMXK+Xv+UC/e8KzAJvaK5qsnVdGTt0vcbVJRXos\n13eZZY0fNY/yOFhrUzU53griPlCc0zakiv6LFE41gWvdxfhMau9SsEA9EOrJlEc=\n=1Ei7\n-----END PGP SIGNATURE-----",
        "payload": "tree b233cb996c397c15aa656eead10d676142bc957e\nparent 82077ef6e49a08b3772d5c82f6e0cfe390e11966\nparent 2b175d4b018be432e333bf8a343b85c5f284264f\nauthor Wladimir J. van der Laan <laanwj@gmail.com> 1478242511 +0100\ncommitter Wladimir J. van der Laan <laanwj@gmail.com> 1478244683 +0100\n\nMerge #9069: Clean up bctest.py and bitcoin-util-test.py\n\n2b175d4 Clean up bctest.py and bitcoin-util-test.py (John Newbery)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82077ef6e49a08b3772d5c82f6e0cfe390e11966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82077ef6e49a08b3772d5c82f6e0cfe390e11966",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82077ef6e49a08b3772d5c82f6e0cfe390e11966"
      },
      {
        "sha": "2b175d4b018be432e333bf8a343b85c5f284264f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b175d4b018be432e333bf8a343b85c5f284264f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b175d4b018be432e333bf8a343b85c5f284264f"
      }
    ],
    "stats": {
      "total": 182,
      "additions": 101,
      "deletions": 81
    },
    "files": [
      {
        "sha": "47cff98bca2edc15667e2a7ff97dae967af412d1",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 96,
        "deletions": 79,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "patch": "@@ -1,4 +1,5 @@\n # Copyright 2014 BitPay, Inc.\n+# Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n@@ -11,94 +12,110 @@\n import logging\n \n def parse_output(a, fmt):\n-\tif fmt == 'json': # json: compare parsed data\n-\t\treturn json.loads(a)\n-\telif fmt == 'hex': # hex: parse and compare binary data\n-\t\treturn binascii.a2b_hex(a.strip())\n-\telse:\n-\t\traise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n+    \"\"\"Parse the output according to specified format.\n+\n+    Raise an error if the output can't be parsed.\"\"\"\n+    if fmt == 'json': # json: compare parsed data\n+        return json.loads(a)\n+    elif fmt == 'hex': # hex: parse and compare binary data\n+        return binascii.a2b_hex(a.strip())\n+    else:\n+        raise NotImplementedError(\"Don't know how to compare %s\" % fmt)\n \n def bctest(testDir, testObj, exeext):\n+    \"\"\"Runs a single test, comparing output and RC to expected output and RC.\n \n-\texecprog = testObj['exec'] + exeext\n-\texecargs = testObj['args']\n-\texecrun = [execprog] + execargs\n-\tstdinCfg = None\n-\tinputData = None\n-\tif \"input\" in testObj:\n-\t\tfilename = testDir + \"/\" + testObj['input']\n-\t\tinputData = open(filename).read()\n-\t\tstdinCfg = subprocess.PIPE\n+    Raises an error if input can't be read, executable fails, or output/RC\n+    are not as expected. Error is caught by bctester() and reported.\n+    \"\"\"\n+    # Get the exec names and arguments\n+    execprog = testObj['exec'] + exeext\n+    execargs = testObj['args']\n+    execrun = [execprog] + execargs\n \n-\toutputFn = None\n-\toutputData = None\n-\tif \"output_cmp\" in testObj:\n-\t\toutputFn = testObj['output_cmp']\n-\t\toutputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n-\t\ttry:\n-\t\t\toutputData = open(testDir + \"/\" + outputFn).read()\n-\t\texcept:\n-\t\t\tlogging.error(\"Output file \" + outputFn + \" can not be opened\")\n-\t\t\traise\n-\t\tif not outputData:\n-\t\t\tlogging.error(\"Output data missing for \" + outputFn)\n-\t\t\traise Exception\n+    # Read the input data (if there is any)\n+    stdinCfg = None\n+    inputData = None\n+    if \"input\" in testObj:\n+        filename = testDir + \"/\" + testObj['input']\n+        inputData = open(filename).read()\n+        stdinCfg = subprocess.PIPE\n \n-\tproc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n-\ttry:\n-\t\touts = proc.communicate(input=inputData)\n-\texcept OSError:\n-\t\tlogging.error(\"OSError, Failed to execute \" + execprog)\n-\t\traise\n+    # Read the expected output data (if there is any)\n+    outputFn = None\n+    outputData = None\n+    if \"output_cmp\" in testObj:\n+        outputFn = testObj['output_cmp']\n+        outputType = os.path.splitext(outputFn)[1][1:] # output type from file extension (determines how to compare)\n+        try:\n+            outputData = open(testDir + \"/\" + outputFn).read()\n+        except:\n+            logging.error(\"Output file \" + outputFn + \" can not be opened\")\n+            raise\n+        if not outputData:\n+            logging.error(\"Output data missing for \" + outputFn)\n+            raise Exception\n \n-\tif outputData:\n-\t\ttry:\n-\t\t\ta_parsed = parse_output(outs[0], outputType)\n-\t\texcept Exception as e:\n-\t\t\tlogging.error('Error parsing command output as %s: %s' % (outputType,e))\n-\t\t\traise\n-\t\ttry:\n-\t\t\tb_parsed = parse_output(outputData, outputType)\n-\t\texcept Exception as e:\n-\t\t\tlogging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n-\t\t\traise\n-\t\tif a_parsed != b_parsed:\n-\t\t\tlogging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n-\t\t\traise Exception\n-\t\tif outs[0] != outputData:\n-\t\t\terror_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n-\t\t\terror_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n-\t\t\t\t                                          outs[0].splitlines(True),\n-\t\t\t\t                                          fromfile=outputFn,\n-\t\t\t\t                                          tofile=\"returned\"))\n-\t\t\tlogging.error(error_message)\n-\t\t\traise Exception\n+    # Run the test\n+    proc = subprocess.Popen(execrun, stdin=stdinCfg, stdout=subprocess.PIPE, stderr=subprocess.PIPE,universal_newlines=True)\n+    try:\n+        outs = proc.communicate(input=inputData)\n+    except OSError:\n+        logging.error(\"OSError, Failed to execute \" + execprog)\n+        raise\n \n-\twantRC = 0\n-\tif \"return_code\" in testObj:\n-\t\twantRC = testObj['return_code']\n-\tif proc.returncode != wantRC:\n-\t\tlogging.error(\"Return code mismatch for \" + outputFn)\n-\t\traise Exception\n+    if outputData:\n+        # Parse command output and expected output\n+        try:\n+            a_parsed = parse_output(outs[0], outputType)\n+        except Exception as e:\n+            logging.error('Error parsing command output as %s: %s' % (outputType,e))\n+            raise\n+        try:\n+            b_parsed = parse_output(outputData, outputType)\n+        except Exception as e:\n+            logging.error('Error parsing expected output %s as %s: %s' % (outputFn,outputType,e))\n+            raise\n+        # Compare data\n+        if a_parsed != b_parsed:\n+            logging.error(\"Output data mismatch for \" + outputFn + \" (format \" + outputType + \")\")\n+            raise Exception\n+        # Compare formatting\n+        if outs[0] != outputData:\n+            error_message = \"Output formatting mismatch for \" + outputFn + \":\\n\"\n+            error_message += \"\".join(difflib.context_diff(outputData.splitlines(True),\n+                                                          outs[0].splitlines(True),\n+                                                          fromfile=outputFn,\n+                                                          tofile=\"returned\"))\n+            logging.error(error_message)\n+            raise Exception\n \n-def bctester(testDir, input_basename, buildenv):\n-\tinput_filename = testDir + \"/\" + input_basename\n-\traw_data = open(input_filename).read()\n-\tinput_data = json.loads(raw_data)\n+    # Compare the return code to the expected return code\n+    wantRC = 0\n+    if \"return_code\" in testObj:\n+        wantRC = testObj['return_code']\n+    if proc.returncode != wantRC:\n+        logging.error(\"Return code mismatch for \" + outputFn)\n+        raise Exception\n \n-\tfailed_testcases = []\n+def bctester(testDir, input_basename, buildenv):\n+    \"\"\" Loads and parses the input file, runs all tests and reports results\"\"\"\n+    input_filename = testDir + \"/\" + input_basename\n+    raw_data = open(input_filename).read()\n+    input_data = json.loads(raw_data)\n \n-\tfor testObj in input_data:\n-\t\ttry:\n-\t\t\tbctest(testDir, testObj, buildenv.exeext)\n-\t\t\tlogging.info(\"PASSED: \" + testObj[\"description\"])\n-\t\texcept:\n-\t\t\tlogging.info(\"FAILED: \" + testObj[\"description\"])\n-\t\t\tfailed_testcases.append(testObj[\"description\"])\n+    failed_testcases = []\n \n-\tif failed_testcases:\n-\t\tlogging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n-\t\tsys.exit(1)\n-\telse:\n-\t\tsys.exit(0)\n+    for testObj in input_data:\n+        try:\n+            bctest(testDir, testObj, buildenv.exeext)\n+            logging.info(\"PASSED: \" + testObj[\"description\"])\n+        except:\n+            logging.info(\"FAILED: \" + testObj[\"description\"])\n+            failed_testcases.append(testObj[\"description\"])\n \n+    if failed_testcases:\n+        logging.error(\"FAILED TESTCASES: [\" + \", \".join(failed_testcases) + \"]\")\n+        sys.exit(1)\n+    else:\n+        sys.exit(0)"
      },
      {
        "sha": "eeb05c0b889a3d49ad6a7ffe8d3155981b933d0f",
        "filename": "src/test/bitcoin-util-test.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3/src/test/bitcoin-util-test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3/src/test/bitcoin-util-test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bitcoin-util-test.py?ref=ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "patch": "@@ -1,5 +1,6 @@\n #!/usr/bin/env python\n # Copyright 2014 BitPay, Inc.\n+# Copyright 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n@@ -16,11 +17,13 @@\n \n Can also be run manually from the src directory by specifiying the source directory:\n \n-test/bitcoin-util-test.py --src=[srcdir]\n+test/bitcoin-util-test.py --srcdir='srcdir' [--verbose]\n \"\"\"\n \n-\n if __name__ == '__main__':\n+    # Try to get the source directory from the environment variables. This will\n+    # be set for `make check` automated runs. If environment variable is not set,\n+    # then get the source directory from command line args.\n     try:\n         srcdir = os.environ[\"srcdir\"]\n         verbose = False"
      }
    ]
  },
  {
    "sha": "190fd321ad772dd2e9d11ec2395a807bc72de5a7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTBmZDMyMWFkNzcyZGQyZTlkMTFlYzIzOTVhODA3YmM3MmRlNWE3",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-04T14:50:43Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2016-11-04T14:50:43Z"
      },
      "message": "Remove unused CTxOut::GetHash()",
      "tree": {
        "sha": "6cdba6b78de5e50337a786b64f29be75bfd6d3a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cdba6b78de5e50337a786b64f29be75bfd6d3a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/190fd321ad772dd2e9d11ec2395a807bc72de5a7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190fd321ad772dd2e9d11ec2395a807bc72de5a7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/190fd321ad772dd2e9d11ec2395a807bc72de5a7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190fd321ad772dd2e9d11ec2395a807bc72de5a7/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7acdac17f2d6d150f4959e9cea22fba6d51ef4cb",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190fd321ad772dd2e9d11ec2395a807bc72de5a7/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190fd321ad772dd2e9d11ec2395a807bc72de5a7/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=190fd321ad772dd2e9d11ec2395a807bc72de5a7",
        "patch": "@@ -49,11 +49,6 @@ CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n     scriptPubKey = scriptPubKeyIn;\n }\n \n-uint256 CTxOut::GetHash() const\n-{\n-    return SerializeHash(*this);\n-}\n-\n std::string CTxOut::ToString() const\n {\n     return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, HexStr(scriptPubKey).substr(0, 30));"
      },
      {
        "sha": "1afeb8703903c265aa6e31d92addb9456bb9cae2",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/190fd321ad772dd2e9d11ec2395a807bc72de5a7/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/190fd321ad772dd2e9d11ec2395a807bc72de5a7/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=190fd321ad772dd2e9d11ec2395a807bc72de5a7",
        "patch": "@@ -160,8 +160,6 @@ class CTxOut\n         return (nValue == -1);\n     }\n \n-    uint256 GetHash() const;\n-\n     CAmount GetDustThreshold(const CFeeRate &minRelayTxFee) const\n     {\n         // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,"
      }
    ]
  },
  {
    "sha": "05009935f9ac070197113954d680bc2c9150b9b3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTAwOTkzNWY5YWMwNzAxOTcxMTM5NTRkNjgwYmMyYzkxNTBiOWIz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-04T18:40:46Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-11-04T18:46:19Z"
      },
      "message": "Merge #9085: Remove unused CTxOut::GetHash()\n\n190fd32 Remove unused CTxOut::GetHash() (Matt Corallo)",
      "tree": {
        "sha": "6cdba6b78de5e50337a786b64f29be75bfd6d3a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6cdba6b78de5e50337a786b64f29be75bfd6d3a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05009935f9ac070197113954d680bc2c9150b9b3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIcBAABCgAGBQJYHNd8AAoJENuhpnN5oakx1DwP/02iXLEdNcMTlrrVviG/z0k9\ni7ssWt6Nwzk24LkNWjtXlscIpXDq241kCeXzEwEeRa3jpGvYvPXz0KNl9ApX+gsL\nytaeyQRZLgPZ5hwjrUoUuM+i/QgYUMYllQsMN9h7rwBdZZ879Y8+qzaXGm+JuGs5\nrdsHfNCS4u0xTruRrWE0IOlv7jDYyu17pte8PC0BJ4+UuvgHJPJaHn1BfQfAOJ09\nyhjDyGJA2J1adgPXQUW/yZiMwh1iE4pDa8SgmGwyJZxqYhMuR8NfiukUtQhhLtai\nzoDqj+L4GM/HiVZbSlByo8hP5qRtGOpQeZZJtpNbL/lDiwkYLzywKnmZVZS8GCdf\nqrl2A/XJGXPJhV9+T/D1Vj6WYTHz5vrgQyRfUyPTcOjRmszJFWwVJ1YFZ8ifOFMC\n8utWRCiHo5GwrYPMVN3Q6zsUNFzD0cNY1MfJntEc6uXc9N/oCEuHx7VLTTmChPHU\nqL0+ogNFALeQZwD2xjLD+QtIT9id13+IUiUUsozZfJZlwsoi52/ul866Pl2+sFeu\nBJZdzzhh2pXFFJk1xibF203jvvcm71zTmskf2Gfs6j0pknmTC4tGTiufqTpV7KRQ\ncu8DakKA6VS5+MkzEzMqJLnjQhHjiJPOgE7eZ0Q7+VYm0NYf0k+ZHUxI2r7jvywD\nx46d+hQrIzF6BlPdlaKQ\n=M0a+\n-----END PGP SIGNATURE-----",
        "payload": "tree 6cdba6b78de5e50337a786b64f29be75bfd6d3a3\nparent ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3\nparent 190fd321ad772dd2e9d11ec2395a807bc72de5a7\nauthor Pieter Wuille <pieter.wuille@gmail.com> 1478284846 -0700\ncommitter Pieter Wuille <pieter.wuille@gmail.com> 1478285179 -0700\n\nMerge #9085: Remove unused CTxOut::GetHash()\n\n190fd32 Remove unused CTxOut::GetHash() (Matt Corallo)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05009935f9ac070197113954d680bc2c9150b9b3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05009935f9ac070197113954d680bc2c9150b9b3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05009935f9ac070197113954d680bc2c9150b9b3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ed64bcec2dde1f4255f3bd5b0c2f01e4dfe260d3"
      },
      {
        "sha": "190fd321ad772dd2e9d11ec2395a807bc72de5a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/190fd321ad772dd2e9d11ec2395a807bc72de5a7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/190fd321ad772dd2e9d11ec2395a807bc72de5a7"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 0,
      "deletions": 7
    },
    "files": [
      {
        "sha": "7acdac17f2d6d150f4959e9cea22fba6d51ef4cb",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05009935f9ac070197113954d680bc2c9150b9b3/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05009935f9ac070197113954d680bc2c9150b9b3/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=05009935f9ac070197113954d680bc2c9150b9b3",
        "patch": "@@ -49,11 +49,6 @@ CTxOut::CTxOut(const CAmount& nValueIn, CScript scriptPubKeyIn)\n     scriptPubKey = scriptPubKeyIn;\n }\n \n-uint256 CTxOut::GetHash() const\n-{\n-    return SerializeHash(*this);\n-}\n-\n std::string CTxOut::ToString() const\n {\n     return strprintf(\"CTxOut(nValue=%d.%08d, scriptPubKey=%s)\", nValue / COIN, nValue % COIN, HexStr(scriptPubKey).substr(0, 30));"
      },
      {
        "sha": "1afeb8703903c265aa6e31d92addb9456bb9cae2",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05009935f9ac070197113954d680bc2c9150b9b3/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05009935f9ac070197113954d680bc2c9150b9b3/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=05009935f9ac070197113954d680bc2c9150b9b3",
        "patch": "@@ -160,8 +160,6 @@ class CTxOut\n         return (nValue == -1);\n     }\n \n-    uint256 GetHash() const;\n-\n     CAmount GetDustThreshold(const CFeeRate &minRelayTxFee) const\n     {\n         // \"Dust\" is defined in terms of CTransaction::minRelayTxFee,"
      }
    ]
  }
]