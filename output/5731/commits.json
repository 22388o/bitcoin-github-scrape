[
  {
    "sha": "86731603d48de65960a7f2cd4da60e7ae1760813",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjczMTYwM2Q0OGRlNjU5NjBhN2YyY2Q0ZGE2MGU3YWUxNzYwODEz",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-12-13T03:15:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:44Z"
      },
      "message": "Remove bootstrap.md\n\nSee #5455",
      "tree": {
        "sha": "031702544fcd251375f990001105e6d8f0517805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/031702544fcd251375f990001105e6d8f0517805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/86731603d48de65960a7f2cd4da60e7ae1760813",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6af674ecdc99db2eb741b8dc79e44bd0202e3855"
      }
    ],
    "stats": {
      "total": 58,
      "additions": 1,
      "deletions": 57
    },
    "files": [
      {
        "sha": "0ade8f99238abb37a616b51a4fcfc2eb23ffc8d3",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -3,7 +3,7 @@ Bitcoin Core 0.10.99\n \n Setup\n ---------------------\n-[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more. Thankfully you only have to do this once. If you would like the process to go faster you can [download the blockchain directly](bootstrap.md).\n+[Bitcoin Core](http://bitcoin.org/en/download) is the original Bitcoin client and it builds the backbone of the network. However, it downloads and stores the entire history of Bitcoin transactions (which is currently several GBs); depending on the speed of your computer and network connection, the synchronization process can take anywhere from a few hours to a day or more.\n \n Running\n ---------------------"
      },
      {
        "sha": "b84fd24b11d9270a5c3b23dfdb2b2e77ede2ecbd",
        "filename": "doc/bootstrap.md",
        "status": "removed",
        "additions": 0,
        "deletions": 56,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6af674ecdc99db2eb741b8dc79e44bd0202e3855/doc/bootstrap.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bootstrap.md?ref=6af674ecdc99db2eb741b8dc79e44bd0202e3855",
        "patch": "@@ -1,56 +0,0 @@\n-### Bootstrap the Blockchain Synchronization\n-\n-Normally the Bitcoin client will download the transaction and network information, called the blockchain, from the network by syncing with the other clients. This process can take quite some time as the [Bitcoin blockchain](https://blockchain.info/charts/blocks-size) is growing bigger and bigger for each day. Luckily there is a safe and fast way to speed up this process. We'll show you how to bootstrap your blockchain to bring your client up to speed in just a few simple steps.\n-\n-### Requirements\n-\n-- A fresh install of the Bitcoin client software.\n-\n-### Download the blockchain via BitTorrent\n-\n-Jeff Garzik, Bitcoin Core developer, offers an [torrent file](https://bitcointalk.org/index.php?topic=145386.0) for bootstrapping purposes that is updated often. BitTorrent is a protocol that speeds up the downloading of large files by using the other clients in the network. Examples of free and safe open source clients are [Deluge](http://deluge-torrent.org/) or [qBittorrent](http://www.qbittorrent.org/). A guide to installing and configuring the torrent clients can be found [here](http://dev.deluge-torrent.org/wiki/UserGuide) for Deluge and [here](http://qbforums.shiki.hu/) for qBittorrent. A further in-depth tutorial on BitTorrent can be found [here](http://www.howtogeek.com/howto/31846/bittorrent-for-beginners-how-get-started-downloading-torrents/).\n-\n-With the client installed we'll proceed to download the blockchain torrent file. Use the following magnet link:\n-\n-\tmagnet:?xt=urn:btih:2d4e6c1f96c5d5fb260dff92aea4e600227f1aea&dn=bootstrap.dat&tr=udp://tracker.openbittorrent.com:80&tr=udp://tracker.publicbt.com:80&tr=udp://tracker.ccc.de:80&tr=udp://tracker.istole.it:80\n-\t\n- or go to [Jeff Garzik's topic](https://bitcointalk.org/index.php?topic=145386.0) for a signed magnet link. Alternatively you can use the [.torrent file](http://sourceforge.net/projects/bitcoin/files/Bitcoin/blockchain/bootstrap.dat.torrent/download) found on SourceForge.\n-     \n-![Fig1](img/bootstrap1.png)\n-\n-The download page should look like this, with a countdown to the download. If it does not work click the direct download link.\n-\n-The torrent client installed will recognize the download of the torrent file. Save the bootstrap.dat file to the folder you use for downloads. The image below shows the torrent download in qBittorrent, with current speed and ETA highlighted.\n-\n-![Fig2](img/bootstrap2.png)\n-\n-### Importing the blockchain\n-Exit the Bitcoin client software if you have it running. Be sure not to have an actively used wallet in use. We are going to copy the download of the blockchain to the Bitcoin client data directory. You should run the client software at least once so it can generate the data directory. Copy the downloaded bootstrap.dat file into the Bitcoin data folder.\n-\n-**For Windows users:**\n-Open explorer, and type into the address bar:\n-\n-\t%APPDATA%\\Bitcoin\n-    \n-This will open up the data folder. It should look like the image below. Copy over the bootstrap.dat from your download folder to this directory.\n-![Fig4](img/bootstrap4.png)\n-\n-**For OSX users:**\n-Open Finder by pressing Press [shift] + [cmd] + [g] and enter:\n-\n-\t~/Library/Application Support/Bitcoin/\n-    \n-**For Linux users:**\n-The directory is hidden in your User folder. Go to:\n-\n-\t~/.bitcoin/\n-    \n-### Importing the blockchain\n-Now start the Bitcoin client software. It should show \"Importing blocks from disk\" like the image below. \n-![Fig5](img/bootstrap5.png)\n-\n-Wait until the import finishes. The client will download the last days not covered by the import. Congratulations you have successfully imported the blockchain!\n-\n-### Is this safe?\n-\n-Yes, the above method is safe. The download contains only raw blockchain data and the client verifies this on import. Do not download the blockchain from unofficial sources, especially if they provide `*.rev` and `*.sst` files. These files are not verified and can contain malicious edits."
      }
    ]
  },
  {
    "sha": "d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmJlZDE1MTRjMmU3MmVhMjAwNjk0MmMyM2MzMWUzZjUxOGQ0YTc3",
    "commit": {
      "author": {
        "name": "Manuel Araoz",
        "email": "manuelaraoz@gmail.com",
        "date": "2014-12-16T19:26:07Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:44Z"
      },
      "message": "remove sig_canonical.json and sig_noncanonical.json",
      "tree": {
        "sha": "ab200837bc2e5b46908e62462d5fcf126392cd91",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab200837bc2e5b46908e62462d5fcf126392cd91"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77/comments",
    "author": {
      "login": "maraoz",
      "id": 287189,
      "node_id": "MDQ6VXNlcjI4NzE4OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/287189?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/maraoz",
      "html_url": "https://github.com/maraoz",
      "followers_url": "https://api.github.com/users/maraoz/followers",
      "following_url": "https://api.github.com/users/maraoz/following{/other_user}",
      "gists_url": "https://api.github.com/users/maraoz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/maraoz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/maraoz/subscriptions",
      "organizations_url": "https://api.github.com/users/maraoz/orgs",
      "repos_url": "https://api.github.com/users/maraoz/repos",
      "events_url": "https://api.github.com/users/maraoz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/maraoz/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "86731603d48de65960a7f2cd4da60e7ae1760813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/86731603d48de65960a7f2cd4da60e7ae1760813",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/86731603d48de65960a7f2cd4da60e7ae1760813"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 0,
      "deletions": 31
    },
    "files": [
      {
        "sha": "90494439fa552dd167c709e669f0c858f5deb2c4",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6bed1514c2e72ea2006942c23c31e3f518d4a77/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6bed1514c2e72ea2006942c23c31e3f518d4a77/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "patch": "@@ -20,8 +20,6 @@ EXTRA_DIST += \\\n JSON_TEST_FILES = \\\n   test/data/script_valid.json \\\n   test/data/base58_keys_valid.json \\\n-  test/data/sig_canonical.json \\\n-  test/data/sig_noncanonical.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n   test/data/script_invalid.json \\"
      },
      {
        "sha": "e43a08629a1ae2b51feba692b244b8a301649208",
        "filename": "src/test/data/sig_canonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_canonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_canonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_canonical.json?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -1,7 +0,0 @@\n-[\n-    \"300602010002010001\",\n-    \"3008020200ff020200ff01\",\n-    \"304402203932c892e2e550f3af8ee4ce9c215a87f9bb831dcac87b2838e2c2eaa891df0c022030b61dd36543125d56b9f9f3a1f9353189e5af33cdda8d77a5209aec03978fa001\",\n-    \"30450220076045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\",\n-    \"3046022100876045be6f9eca28ff1ec606b833d0b87e70b2a630f5e3a496b110967a40f90a0221008fffd599910eefe00bc803c688c2eca1d2ba7f6b180620eaa03488e6585db6ba01\"\n-]"
      },
      {
        "sha": "d9a6c1cdd872ec1d64ac429577b6b210f67b17b8",
        "filename": "src/test/data/sig_noncanonical.json",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_noncanonical.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/86731603d48de65960a7f2cd4da60e7ae1760813/src/test/data/sig_noncanonical.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/sig_noncanonical.json?ref=86731603d48de65960a7f2cd4da60e7ae1760813",
        "patch": "@@ -1,22 +0,0 @@\n-[\n-    \"non-hex strings are ignored\",\n-\n-    \"too short:\",    \"30050201FF020001\",\n-    \"too long:\",     \"30470221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105022200002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"hashtype:\",     \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed11\",\n-    \"type:\",         \"314402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"total length:\", \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len oob:\",    \"301F01205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb101\",\n-    \"R+S:\",          \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed0001\",\n-\n-    \"R type:\",       \"304401205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R len = 0:\",    \"3024020002202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R<0:\",          \"304402208990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"R padded:\",     \"30450221005990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610502202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-\n-\n-    \"S type:\",       \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba610501202d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S len = 0:\",    \"302402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba6105020001\",\n-    \"S<0:\",          \"304402205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050220fd5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\",\n-    \"S padded:\",     \"304502205990e0584b2b238e1dfaad8d6ed69ecc1a4a13ac85fc0b31d0df395eb1ba61050221002d5876262c288beb511d061691bf26777344b702b00f8fe28621fe4e566695ed01\"\n-]"
      }
    ]
  },
  {
    "sha": "bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmMyOWRjZGM1YzJhNzVhODJkNmY1MDM0YzU0N2E4ZjRhYzk0Mzc5",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2014-12-26T10:03:44Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:36:45Z"
      },
      "message": "Improve gitian build guide\n\nPoint to the Debian 7.7 installer\nFix wording now that we only use a single image\nRemove bitcoin checkout steps, they are covered in release-process",
      "tree": {
        "sha": "005ee4229998bdc9d21a9b001ab63e17ab1d629a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/005ee4229998bdc9d21a9b001ab63e17ab1d629a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6bed1514c2e72ea2006942c23c31e3f518d4a77",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6bed1514c2e72ea2006942c23c31e3f518d4a77"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 15,
      "deletions": 18
    },
    "files": [
      {
        "sha": "efa5ef17dc155f7795033cca98644a6dcc93f4fb",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 15,
        "deletions": 18,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "patch": "@@ -24,7 +24,7 @@ Table of Contents\n - [Connecting to the VM](#connecting-to-the-vm)\n - [Setting up Debian for gitian building](#setting-up-debian-for-gitian-building)\n - [Installing gitian](#installing-gitian)\n-- [Setting up gitian images](#setting-up-gitian-images)\n+- [Setting up the gitian image](#setting-up-the-gitian-image)\n - [Getting and building the inputs](#getting-and-building-the-inputs)\n - [Building Bitcoin](#building-bitcoin)\n - [Building an alternative repository](#building-an-alternative-repository)\n@@ -74,11 +74,11 @@ In the VirtualBox GUI click \"Create\" and choose the following parameters in the\n - Disk size: at least 40GB; as low as 20GB *may* be possible, but better to err on the safe side \n - Push the `Create` button\n \n-Get the [Debian 7.4 net installer](http://ftp.at.debian.org/debian-jigdo/current/amd64/iso-cd/debian-7.4.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n+Get the [Debian 7.7 net installer](http://cdimage.debian.org/debian-cd/7.7.0/amd64/iso-cd/debian-7.7.0-amd64-netinst.iso) (a more recent minor version should also work, see also [Debian Network installation](https://www.debian.org/CD/netinst/)).\n This DVD image can be validated using a SHA256 hashing tool, for example on\n Unixy OSes by entering the following in a terminal:\n \n-    echo \"b712a141bc60269db217d3b3e456179bd6b181645f90e4aac9c42ed63de492e9  debian-7.4.0-amd64-netinst.iso\" | sha256sum -c\n+    echo \"d440e85b4121f94608748139f25dbce1ad36771348b002fe07d4d44b9d9e623f  debian-7.7.0-amd64-netinst.iso\" | sha256sum -c\n     # (must return OK)\n \n After creating the VM, we need to configure it. \n@@ -109,7 +109,7 @@ Then start the VM. On the first launch you will be asked for a CD or DVD image.\n Installing Debian\n ------------------\n \n-In this section it will be explained how to install Debian on the newly created VM.\n+This section will explain how to install Debian on the newly created VM.\n \n - Choose the non-graphical installer.  We do not need the graphical environment, it will only increase installation time and disk usage.\n \n@@ -277,24 +277,21 @@ cd ..\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n-Clone the git repositories for bitcoin and gitian and then checkout the bitcoin version that you want to build.\n+Clone the git repositories for bitcoin and gitian.\n \n ```bash\n git clone https://github.com/devrandom/gitian-builder.git\n git clone https://github.com/bitcoin/bitcoin\n-cd bitcoin\n-git checkout v${VERSION}\n-cd ..\n ```\n \n-Setting up gitian images\n+Setting up the gitian image\n -------------------------\n \n-Gitian needs virtual images of the operating system to build in.\n-Currently this is Ubuntu Precise for x86_64.\n-These images will be copied and used every time that a build is started to\n+Gitian needs a virtual image of the operating system to build in.\n+Currently this is Ubuntu Precise x86_64.\n+This image will be copied and used every time that a build is started to\n make sure that the build is deterministic.\n-Creating the images will take a while, but only has to be done once.\n+Creating the image will take a while, but only has to be done once.\n \n Execute the following as user `debian`:\n \n@@ -303,7 +300,7 @@ cd gitian-builder\n bin/make-base-vm --lxc --arch amd64 --suite precise\n ```\n \n-There will be a lot of warnings printed during build of the images. These can be ignored.\n+There will be a lot of warnings printed during build of the image. These can be ignored.\n \n **Note**: When sudo asks for a password, enter the password for the user *debian* not for *root*.\n \n@@ -322,7 +319,7 @@ To build Bitcoin (for Linux, OSX and Windows) just follow the steps under 'perfo\n gitian builds' in [doc/release-process.md](release-process.md) in the bitcoin repository.\n \n This may take a long time as it also builds the dependencies needed for each descriptor.\n-These dependencies will be cached after a successful build to avoid rebuilding them when possible.\n+These dependencies will be cached after a successful build to avoid rebuilding them where possible.\n \n At any time you can check the package installation and build progress with\n \n@@ -382,9 +379,9 @@ When you execute `gsign` you will get an error from GPG, which can be ignored. C\n in `gitian.sigs` to your signing machine and do\n \n ```bash\n-    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-build.assert\n-    gpg --detach-sign ${VERSION}-osx/${SIGNER}/bitcoin-build.assert\n+    gpg --detach-sign ${VERSION}-linux/${SIGNER}/bitcoin-linux-build.assert\n+    gpg --detach-sign ${VERSION}-win/${SIGNER}/bitcoin-win-build.assert\n+    gpg --detach-sign ${VERSION}-osx-unsigned/${SIGNER}/bitcoin-osx-build.assert\n ```\n \n This will create the `.sig` files that can be committed together with the `.assert` files to assert your"
      }
    ]
  },
  {
    "sha": "91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MWE5ZmUwOTRiM2YwMDkxZjQwY2NkYjE5NTgxYjkwZTg2ODg4ZmYw",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-05T20:44:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:37:01Z"
      },
      "message": "Fix typo - sentence starts with capital letter",
      "tree": {
        "sha": "52835914858b2adfeb5bc4eb270546eb487a2f10",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52835914858b2adfeb5bc4eb270546eb487a2f10"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfc29dcdc5c2a75a82d6f5034c547a8f4ac94379"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "24a4d7c22cc84e52ac9c2becd1aa2af2616cb3cd",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/91a9fe094b3f0091f40ccdb19581b90e86888ff0/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/91a9fe094b3f0091f40ccdb19581b90e86888ff0/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "patch": "@@ -82,7 +82,7 @@ Value getnewaddress(const Array& params, bool fHelp)\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n-            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. if not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"bitcoinaddress\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\""
      }
    ]
  },
  {
    "sha": "3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODAwMTM1YWQzODJhMGE5ODBlYjIwYmFkOGJhY2JiZjIwNmY4Y2Vh",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-07T17:11:59Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:37:01Z"
      },
      "message": "Fix typo",
      "tree": {
        "sha": "3fbe3a6263b9f99e7d60a35c86ea112fbb8135f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3fbe3a6263b9f99e7d60a35c86ea112fbb8135f7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3800135ad382a0a980eb20bad8bacbbf206f8cea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91a9fe094b3f0091f40ccdb19581b90e86888ff0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91a9fe094b3f0091f40ccdb19581b90e86888ff0"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "5f60dff06c86daa574ab846310a26546f6b8ded5",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3800135ad382a0a980eb20bad8bacbbf206f8cea/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3800135ad382a0a980eb20bad8bacbbf206f8cea/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "patch": "@@ -159,7 +159,7 @@ tar -xzvf db-4.8.30.NC.tar.gz\n \n # Build the library and install to our prefix\n cd db-4.8.30.NC/build_unix/\n-#  Note: Do a static build so that it can be embedded into the exectuable, instead of having to find a .so at runtime\n+#  Note: Do a static build so that it can be embedded into the executable, instead of having to find a .so at runtime\n ../dist/configure --enable-cxx --disable-shared --with-pic --prefix=$BDB_PREFIX\n make install\n "
      }
    ]
  },
  {
    "sha": "5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjYyZmRlMGVjZDE5ZjFmZWJiZmNkNDg4ZjJiZTQxYzVkZmZkMDQ3",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2015-01-08T10:44:25Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Remove whitespaces before double colon in errors and logs",
      "tree": {
        "sha": "413401ca7111906838b0f5f5d0c0604bcce52d19",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/413401ca7111906838b0f5f5d0c0604bcce52d19"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3800135ad382a0a980eb20bad8bacbbf206f8cea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3800135ad382a0a980eb20bad8bacbbf206f8cea"
      }
    ],
    "stats": {
      "total": 434,
      "additions": 217,
      "deletions": 217
    },
    "files": [
      {
        "sha": "323939913b7389b1ec823ec14940c9c6f9d3a5a0",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -149,7 +149,7 @@ bool CAlert::CheckSignature() const\n {\n     CPubKey key(Params().AlertKey());\n     if (!key.Verify(Hash(vchMsg.begin(), vchMsg.end()), vchSig))\n-        return error(\"CAlert::CheckSignature() : verify signature failed\");\n+        return error(\"CAlert::CheckSignature(): verify signature failed\");\n \n     // Now unserialize the data\n     CDataStream sMsg(vchMsg, SER_NETWORK, PROTOCOL_VERSION);"
      },
      {
        "sha": "a7f885135bae643aeeb6c4147b9712dd11b1948c",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -43,7 +43,7 @@ void CDBEnv::EnvShutdown()\n     fDbEnvInit = false;\n     int ret = dbenv.close(0);\n     if (ret != 0)\n-        LogPrintf(\"CDBEnv::EnvShutdown : Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        LogPrintf(\"CDBEnv::EnvShutdown: Error %d shutting down database environment: %s\\n\", ret, DbEnv::strerror(ret));\n     if (!fMockDb)\n         DbEnv(0).remove(path.string().c_str(), 0);\n }\n@@ -75,7 +75,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n     boost::filesystem::path pathLogDir = path / \"database\";\n     TryCreateDirectory(pathLogDir);\n     boost::filesystem::path pathErrorFile = path / \"db.log\";\n-    LogPrintf(\"CDBEnv::Open : LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n+    LogPrintf(\"CDBEnv::Open: LogDir=%s ErrorFile=%s\\n\", pathLogDir.string(), pathErrorFile.string());\n \n     unsigned int nEnvFlags = 0;\n     if (GetBoolArg(\"-privdb\", true))\n@@ -102,7 +102,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n                              nEnvFlags,\n                          S_IRUSR | S_IWUSR);\n     if (ret != 0)\n-        return error(\"CDBEnv::Open : Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n+        return error(\"CDBEnv::Open: Error %d opening database environment: %s\\n\", ret, DbEnv::strerror(ret));\n \n     fDbEnvInit = true;\n     fMockDb = false;\n@@ -112,7 +112,7 @@ bool CDBEnv::Open(const boost::filesystem::path& pathIn)\n void CDBEnv::MakeMock()\n {\n     if (fDbEnvInit)\n-        throw runtime_error(\"CDBEnv::MakeMock : Already initialized\");\n+        throw runtime_error(\"CDBEnv::MakeMock: Already initialized\");\n \n     boost::this_thread::interruption_point();\n \n@@ -135,7 +135,7 @@ void CDBEnv::MakeMock()\n                              DB_PRIVATE,\n                          S_IRUSR | S_IWUSR);\n     if (ret > 0)\n-        throw runtime_error(strprintf(\"CDBEnv::MakeMock : Error %d opening database environment.\", ret));\n+        throw runtime_error(strprintf(\"CDBEnv::MakeMock: Error %d opening database environment.\", ret));\n \n     fDbEnvInit = true;\n     fMockDb = true;\n@@ -172,14 +172,14 @@ bool CDBEnv::Salvage(std::string strFile, bool fAggressive, std::vector<CDBEnv::\n     Db db(&dbenv, 0);\n     int result = db.verify(strFile.c_str(), NULL, &strDump, flags);\n     if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage found errors, all data may not be recoverable.\\n\");\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n         if (!fAggressive) {\n-            LogPrintf(\"CDBEnv::Salvage : Rerun with aggressive mode to ignore errors and continue.\\n\");\n+            LogPrintf(\"CDBEnv::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n             return false;\n         }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"CDBEnv::Salvage : Database salvage failed with result %d.\\n\", result);\n+        LogPrintf(\"CDBEnv::Salvage: Database salvage failed with result %d.\\n\", result);\n         return false;\n     }\n \n@@ -233,7 +233,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n     {\n         LOCK(bitdb.cs_db);\n         if (!bitdb.Open(GetDataDir()))\n-            throw runtime_error(\"CDB : Failed to open database environment.\");\n+            throw runtime_error(\"CDB: Failed to open database environment.\");\n \n         strFile = strFilename;\n         ++bitdb.mapFileUseCount[strFile];\n@@ -246,7 +246,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 DbMpoolFile* mpf = pdb->get_mpf();\n                 ret = mpf->set_flags(DB_MPOOL_NOFILE, 1);\n                 if (ret != 0)\n-                    throw runtime_error(strprintf(\"CDB : Failed to configure for no temp file backing for database %s\", strFile));\n+                    throw runtime_error(strprintf(\"CDB: Failed to configure for no temp file backing for database %s\", strFile));\n             }\n \n             ret = pdb->open(NULL,                               // Txn pointer\n@@ -261,7 +261,7 @@ CDB::CDB(const std::string& strFilename, const char* pszMode, bool fFlushOnClose\n                 pdb = NULL;\n                 --bitdb.mapFileUseCount[strFile];\n                 strFile = \"\";\n-                throw runtime_error(strprintf(\"CDB : Error %d, can't open database %s\", ret, strFile));\n+                throw runtime_error(strprintf(\"CDB: Error %d, can't open database %s\", ret, strFile));\n             }\n \n             if (fCreate && !Exists(string(\"version\"))) {\n@@ -342,7 +342,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 bitdb.mapFileUseCount.erase(strFile);\n \n                 bool fSuccess = true;\n-                LogPrintf(\"CDB::Rewrite : Rewriting %s...\\n\", strFile);\n+                LogPrintf(\"CDB::Rewrite: Rewriting %s...\\n\", strFile);\n                 string strFileRes = strFile + \".rewrite\";\n                 { // surround usage of db with extra {}\n                     CDB db(strFile.c_str(), \"r\");\n@@ -355,7 +355,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                                             DB_CREATE,          // Flags\n                                             0);\n                     if (ret > 0) {\n-                        LogPrintf(\"CDB::Rewrite : Can't create database file %s\\n\", strFileRes);\n+                        LogPrintf(\"CDB::Rewrite: Can't create database file %s\\n\", strFileRes);\n                         fSuccess = false;\n                     }\n \n@@ -404,7 +404,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                         fSuccess = false;\n                 }\n                 if (!fSuccess)\n-                    LogPrintf(\"CDB::Rewrite : Failed to rewrite database file %s\\n\", strFileRes);\n+                    LogPrintf(\"CDB::Rewrite: Failed to rewrite database file %s\\n\", strFileRes);\n                 return fSuccess;\n             }\n         }\n@@ -418,7 +418,7 @@ void CDBEnv::Flush(bool fShutdown)\n {\n     int64_t nStart = GetTimeMillis();\n     // Flush log data to the actual data file on all files that are not in use\n-    LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n+    LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\");\n     if (!fDbEnvInit)\n         return;\n     {\n@@ -427,21 +427,21 @@ void CDBEnv::Flush(bool fShutdown)\n         while (mi != mapFileUseCount.end()) {\n             string strFile = (*mi).first;\n             int nRefCount = (*mi).second;\n-            LogPrint(\"db\", \"CDBEnv::Flush : Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n+            LogPrint(\"db\", \"CDBEnv::Flush: Flushing %s (refcount = %d)...\\n\", strFile, nRefCount);\n             if (nRefCount == 0) {\n                 // Move log data to the dat file\n                 CloseDb(strFile);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s checkpoint\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s checkpoint\\n\", strFile);\n                 dbenv.txn_checkpoint(0, 0, 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s detach\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s detach\\n\", strFile);\n                 if (!fMockDb)\n                     dbenv.lsn_reset(strFile.c_str(), 0);\n-                LogPrint(\"db\", \"CDBEnv::Flush : %s closed\\n\", strFile);\n+                LogPrint(\"db\", \"CDBEnv::Flush: %s closed\\n\", strFile);\n                 mapFileUseCount.erase(mi++);\n             } else\n                 mi++;\n         }\n-        LogPrint(\"db\", \"CDBEnv::Flush : Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n+        LogPrint(\"db\", \"CDBEnv::Flush: Flush(%s)%s took %15dms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" database not started\", GetTimeMillis() - nStart);\n         if (fShutdown) {\n             char** listp;\n             if (mapFileUseCount.empty()) {"
      },
      {
        "sha": "c2af23139cd4170d3be8cd3effa5d2299fa0e23f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -977,7 +977,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n             } catch (const boost::filesystem::filesystem_error& e) {\n                 // Note: hardlink creation failing is not a disaster, it just means\n                 // blocks will get re-downloaded from peers.\n-                LogPrintf(\"Error hardlinking blk%04u.dat : %s\\n\", i, e.what());\n+                LogPrintf(\"Error hardlinking blk%04u.dat: %s\\n\", i, e.what());\n                 break;\n             }\n         }"
      },
      {
        "sha": "22cd08f30c8cfdd9628a4481f4c0ae5bc3a6911b",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -36,7 +36,7 @@ bool CBasicKeyStore::AddKeyPubKey(const CKey& key, const CPubKey &pubkey)\n bool CBasicKeyStore::AddCScript(const CScript& redeemScript)\n {\n     if (redeemScript.size() > MAX_SCRIPT_ELEMENT_SIZE)\n-        return error(\"CBasicKeyStore::AddCScript() : redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n+        return error(\"CBasicKeyStore::AddCScript(): redeemScripts > %i bytes are invalid\", MAX_SCRIPT_ELEMENT_SIZE);\n \n     LOCK(cs_KeyStore);\n     mapScripts[CScriptID(redeemScript)] = redeemScript;"
      },
      {
        "sha": "629e0dcbc0183077fe5fdf81758b21ad8102fa61",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 95,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -820,29 +820,29 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n {\n     // Basic checks that don't depend on any context\n     if (tx.vin.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vin empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vin empty\"),\n                          REJECT_INVALID, \"bad-txns-vin-empty\");\n     if (tx.vout.empty())\n-        return state.DoS(10, error(\"CheckTransaction() : vout empty\"),\n+        return state.DoS(10, error(\"CheckTransaction(): vout empty\"),\n                          REJECT_INVALID, \"bad-txns-vout-empty\");\n     // Size limits\n     if (::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckTransaction() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckTransaction(): size limits failed\"),\n                          REJECT_INVALID, \"bad-txns-oversize\");\n \n     // Check for negative or overflow output values\n     CAmount nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue negative\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue negative\"),\n                              REJECT_INVALID, \"bad-txns-vout-negative\");\n         if (txout.nValue > MAX_MONEY)\n-            return state.DoS(100, error(\"CheckTransaction() : txout.nValue too high\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout.nValue too high\"),\n                              REJECT_INVALID, \"bad-txns-vout-toolarge\");\n         nValueOut += txout.nValue;\n         if (!MoneyRange(nValueOut))\n-            return state.DoS(100, error(\"CheckTransaction() : txout total out of range\"),\n+            return state.DoS(100, error(\"CheckTransaction(): txout total out of range\"),\n                              REJECT_INVALID, \"bad-txns-txouttotal-toolarge\");\n     }\n \n@@ -851,22 +851,22 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n     {\n         if (vInOutPoints.count(txin.prevout))\n-            return state.DoS(100, error(\"CheckTransaction() : duplicate inputs\"),\n+            return state.DoS(100, error(\"CheckTransaction(): duplicate inputs\"),\n                              REJECT_INVALID, \"bad-txns-inputs-duplicate\");\n         vInOutPoints.insert(txin.prevout);\n     }\n \n     if (tx.IsCoinBase())\n     {\n         if (tx.vin[0].scriptSig.size() < 2 || tx.vin[0].scriptSig.size() > 100)\n-            return state.DoS(100, error(\"CheckTransaction() : coinbase script size\"),\n+            return state.DoS(100, error(\"CheckTransaction(): coinbase script size\"),\n                              REJECT_INVALID, \"bad-cb-length\");\n     }\n     else\n     {\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             if (txin.prevout.IsNull())\n-                return state.DoS(10, error(\"CheckTransaction() : prevout is null\"),\n+                return state.DoS(10, error(\"CheckTransaction(): prevout is null\"),\n                                  REJECT_INVALID, \"bad-txns-prevout-null\");\n     }\n \n@@ -922,7 +922,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     string reason;\n     if (Params().RequireStandard() && !IsStandardTx(tx, reason))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : nonstandard transaction: %s\", reason),\n+                         error(\"AcceptToMemoryPool: nonstandard transaction: %s\", reason),\n                          REJECT_NONSTANDARD, reason);\n \n     // Only accept nLockTime-using transactions that can be mined in the next\n@@ -942,7 +942,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     // timestamp applications where it matters.\n     if (!IsFinalTx(tx, chainActive.Height() + 1))\n         return state.DoS(0,\n-                         error(\"AcceptToMemoryPool : non-final\"),\n+                         error(\"AcceptToMemoryPool: non-final\"),\n                          REJECT_NONSTANDARD, \"non-final\");\n \n     // is it already in the memory pool?\n@@ -991,7 +991,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // are the actual inputs available?\n         if (!view.HaveInputs(tx))\n-            return state.Invalid(error(\"AcceptToMemoryPool : inputs already spent\"),\n+            return state.Invalid(error(\"AcceptToMemoryPool: inputs already spent\"),\n                                  REJECT_DUPLICATE, \"bad-txns-inputs-spent\");\n \n         // Bring the best block into scope\n@@ -1016,7 +1016,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         nSigOps += GetP2SHSigOpCount(tx, view);\n         if (nSigOps > MAX_STANDARD_TX_SIGOPS)\n             return state.DoS(0,\n-                             error(\"AcceptToMemoryPool : too many sigops %s, %d > %d\",\n+                             error(\"AcceptToMemoryPool: too many sigops %s, %d > %d\",\n                                    hash.ToString(), nSigOps, MAX_STANDARD_TX_SIGOPS),\n                              REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\");\n \n@@ -1030,7 +1030,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // Don't accept it if it can't get into a block\n         CAmount txMinFee = GetMinRelayFee(tx, nSize, true);\n         if (fLimitFree && nFees < txMinFee)\n-            return state.DoS(0, error(\"AcceptToMemoryPool : not enough fees %s, %d < %d\",\n+            return state.DoS(0, error(\"AcceptToMemoryPool: not enough fees %s, %d < %d\",\n                                       hash.ToString(), nFees, txMinFee),\n                              REJECT_INSUFFICIENTFEE, \"insufficient fee\");\n \n@@ -1057,7 +1057,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             // -limitfreerelay unit is thousand-bytes-per-minute\n             // At default rate it would take over a month to fill 1GB\n             if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n-                return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n+                return state.DoS(0, error(\"AcceptToMemoryPool: free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"rate limited free transaction\");\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n             dFreeCount += nSize;\n@@ -1123,11 +1123,11 @@ bool GetTransaction(const uint256 &hash, CTransaction &txOut, uint256 &hashBlock\n                     fseek(file.Get(), postx.nTxOffset, SEEK_CUR);\n                     file >> txOut;\n                 } catch (const std::exception& e) {\n-                    return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                    return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n                 }\n                 hashBlock = header.GetHash();\n                 if (txOut.GetHash() != hash)\n-                    return error(\"%s : txid mismatch\", __func__);\n+                    return error(\"%s: txid mismatch\", __func__);\n                 return true;\n             }\n         }\n@@ -1176,7 +1176,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Open history file to append\n     CAutoFile fileout(OpenBlockFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"WriteBlockToDisk : OpenBlockFile failed\");\n+        return error(\"WriteBlockToDisk: OpenBlockFile failed\");\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(block);\n@@ -1185,7 +1185,7 @@ bool WriteBlockToDisk(CBlock& block, CDiskBlockPos& pos)\n     // Write block\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"WriteBlockToDisk : ftell failed\");\n+        return error(\"WriteBlockToDisk: ftell failed\");\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << block;\n \n@@ -1199,19 +1199,19 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos)\n     // Open history file to read\n     CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk : OpenBlockFile failed\");\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed\");\n \n     // Read block\n     try {\n         filein >> block;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Check the header\n     if (!CheckProofOfWork(block.GetHash(), block.nBits))\n-        return error(\"ReadBlockFromDisk : Errors in block header\");\n+        return error(\"ReadBlockFromDisk: Errors in block header\");\n \n     return true;\n }\n@@ -1221,7 +1221,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex)\n     if (!ReadBlockFromDisk(block, pindex->GetBlockPos()))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*) : GetHash() doesn't match index\");\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index\");\n     return true;\n }\n \n@@ -1423,7 +1423,7 @@ void UpdateCoins(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n bool CScriptCheck::operator()() {\n     const CScript &scriptSig = ptxTo->vin[nIn].scriptSig;\n     if (!VerifyScript(scriptSig, scriptPubKey, nFlags, CachingSignatureChecker(*ptxTo, nIn, cacheStore), &error)) {\n-        return ::error(\"CScriptCheck() : %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n+        return ::error(\"CScriptCheck(): %s:%d VerifySignature failed: %s\", ptxTo->GetHash().ToString(), nIn, ScriptErrorString(error));\n     }\n     return true;\n }\n@@ -1438,7 +1438,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         // This doesn't trigger the DoS code on purpose; if it did, it would make it easier\n         // for an attacker to attempt to split the network.\n         if (!inputs.HaveInputs(tx))\n-            return state.Invalid(error(\"CheckInputs() : %s inputs unavailable\", tx.GetHash().ToString()));\n+            return state.Invalid(error(\"CheckInputs(): %s inputs unavailable\", tx.GetHash().ToString()));\n \n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n@@ -1456,31 +1456,31 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n             if (coins->IsCoinBase()) {\n                 if (nSpendHeight - coins->nHeight < COINBASE_MATURITY)\n                     return state.Invalid(\n-                        error(\"CheckInputs() : tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n+                        error(\"CheckInputs(): tried to spend coinbase at depth %d\", nSpendHeight - coins->nHeight),\n                         REJECT_INVALID, \"bad-txns-premature-spend-of-coinbase\");\n             }\n \n             // Check for negative or overflow input values\n             nValueIn += coins->vout[prevout.n].nValue;\n             if (!MoneyRange(coins->vout[prevout.n].nValue) || !MoneyRange(nValueIn))\n-                return state.DoS(100, error(\"CheckInputs() : txin values out of range\"),\n+                return state.DoS(100, error(\"CheckInputs(): txin values out of range\"),\n                                  REJECT_INVALID, \"bad-txns-inputvalues-outofrange\");\n \n         }\n \n         if (nValueIn < tx.GetValueOut())\n-            return state.DoS(100, error(\"CheckInputs() : %s value in (%s) < value out (%s)\",\n+            return state.DoS(100, error(\"CheckInputs(): %s value in (%s) < value out (%s)\",\n                                         tx.GetHash().ToString(), FormatMoney(nValueIn), FormatMoney(tx.GetValueOut())),\n                              REJECT_INVALID, \"bad-txns-in-belowout\");\n \n         // Tally transaction fees\n         CAmount nTxFee = nValueIn - tx.GetValueOut();\n         if (nTxFee < 0)\n-            return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString()),\n+            return state.DoS(100, error(\"CheckInputs(): %s nTxFee < 0\", tx.GetHash().ToString()),\n                              REJECT_INVALID, \"bad-txns-fee-negative\");\n         nFees += nTxFee;\n         if (!MoneyRange(nFees))\n-            return state.DoS(100, error(\"CheckInputs() : nFees out of range\"),\n+            return state.DoS(100, error(\"CheckInputs(): nFees out of range\"),\n                              REJECT_INVALID, \"bad-txns-fee-outofrange\");\n \n         // The first loop above does all the inexpensive checks.\n@@ -1537,7 +1537,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Open history file to append\n     CAutoFile fileout(OpenUndoFile(pos), SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : OpenUndoFile failed\", __func__);\n+        return error(\"%s: OpenUndoFile failed\", __func__);\n \n     // Write index header\n     unsigned int nSize = fileout.GetSerializeSize(blockundo);\n@@ -1546,7 +1546,7 @@ bool UndoWriteToDisk(const CBlockUndo& blockundo, CDiskBlockPos& pos, const uint\n     // Write undo data\n     long fileOutPos = ftell(fileout.Get());\n     if (fileOutPos < 0)\n-        return error(\"%s : ftell failed\", __func__);\n+        return error(\"%s: ftell failed\", __func__);\n     pos.nPos = (unsigned int)fileOutPos;\n     fileout << blockundo;\n \n@@ -1564,7 +1564,7 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n     // Open history file to read\n     CAutoFile filein(OpenUndoFile(pos, true), SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : OpenBlockFile failed\", __func__);\n+        return error(\"%s: OpenBlockFile failed\", __func__);\n \n     // Read block\n     uint256 hashChecksum;\n@@ -1573,15 +1573,15 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CDiskBlockPos& pos, const uin\n         filein >> hashChecksum;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     // Verify checksum\n     CHashWriter hasher(SER_GETHASH, PROTOCOL_VERSION);\n     hasher << hashBlock;\n     hasher << blockundo;\n     if (hashChecksum != hasher.GetHash())\n-        return error(\"%s : Checksum mismatch\", __func__);\n+        return error(\"%s: Checksum mismatch\", __func__);\n \n     return true;\n }\n@@ -1600,12 +1600,12 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n     CBlockUndo blockUndo;\n     CDiskBlockPos pos = pindex->GetUndoPos();\n     if (pos.IsNull())\n-        return error(\"DisconnectBlock() : no undo data available\");\n+        return error(\"DisconnectBlock(): no undo data available\");\n     if (!UndoReadFromDisk(blockUndo, pos, pindex->pprev->GetBlockHash()))\n-        return error(\"DisconnectBlock() : failure reading undo data\");\n+        return error(\"DisconnectBlock(): failure reading undo data\");\n \n     if (blockUndo.vtxundo.size() + 1 != block.vtx.size())\n-        return error(\"DisconnectBlock() : block and undo data inconsistent\");\n+        return error(\"DisconnectBlock(): block and undo data inconsistent\");\n \n     // undo transactions in reverse order\n     for (int i = block.vtx.size() - 1; i >= 0; i--) {\n@@ -1628,7 +1628,7 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (outsBlock.nVersion < 0)\n             outs->nVersion = outsBlock.nVersion;\n         if (*outs != outsBlock)\n-            fClean = fClean && error(\"DisconnectBlock() : added transaction mismatch? database corrupted\");\n+            fClean = fClean && error(\"DisconnectBlock(): added transaction mismatch? database corrupted\");\n \n         // remove outputs\n         outs->Clear();\n@@ -1638,25 +1638,25 @@ bool DisconnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex\n         if (i > 0) { // not coinbases\n             const CTxUndo &txundo = blockUndo.vtxundo[i-1];\n             if (txundo.vprevout.size() != tx.vin.size())\n-                return error(\"DisconnectBlock() : transaction and undo data inconsistent\");\n+                return error(\"DisconnectBlock(): transaction and undo data inconsistent\");\n             for (unsigned int j = tx.vin.size(); j-- > 0;) {\n                 const COutPoint &out = tx.vin[j].prevout;\n                 const CTxInUndo &undo = txundo.vprevout[j];\n                 CCoinsModifier coins = view.ModifyCoins(out.hash);\n                 if (undo.nHeight != 0) {\n                     // undo data contains height: this is the last output of the prevout tx being spent\n                     if (!coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing transaction\");\n                     coins->Clear();\n                     coins->fCoinBase = undo.fCoinBase;\n                     coins->nHeight = undo.nHeight;\n                     coins->nVersion = undo.nVersion;\n                 } else {\n                     if (coins->IsPruned())\n-                        fClean = fClean && error(\"DisconnectBlock() : undo data adding output to missing transaction\");\n+                        fClean = fClean && error(\"DisconnectBlock(): undo data adding output to missing transaction\");\n                 }\n                 if (coins->IsAvailable(out.n))\n-                    fClean = fClean && error(\"DisconnectBlock() : undo data overwriting existing output\");\n+                    fClean = fClean && error(\"DisconnectBlock(): undo data overwriting existing output\");\n                 if (coins->vout.size() < out.n+1)\n                     coins->vout.resize(out.n+1);\n                 coins->vout[out.n] = undo.txout;\n@@ -1753,7 +1753,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         BOOST_FOREACH(const CTransaction& tx, block.vtx) {\n             const CCoins* coins = view.AccessCoins(tx.GetHash());\n             if (coins && !coins->IsPruned())\n-                return state.DoS(100, error(\"ConnectBlock() : tried to overwrite transaction\"),\n+                return state.DoS(100, error(\"ConnectBlock(): tried to overwrite transaction\"),\n                                  REJECT_INVALID, \"bad-txns-BIP30\");\n         }\n     }\n@@ -1783,13 +1783,13 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nInputs += tx.vin.size();\n         nSigOps += GetLegacySigOpCount(tx);\n         if (nSigOps > MAX_BLOCK_SIGOPS)\n-            return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+            return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                              REJECT_INVALID, \"bad-blk-sigops\");\n \n         if (!tx.IsCoinBase())\n         {\n             if (!view.HaveInputs(tx))\n-                return state.DoS(100, error(\"ConnectBlock() : inputs missing/spent\"),\n+                return state.DoS(100, error(\"ConnectBlock(): inputs missing/spent\"),\n                                  REJECT_INVALID, \"bad-txns-inputs-missingorspent\");\n \n             if (fStrictPayToScriptHash)\n@@ -1799,7 +1799,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n                 // an incredibly-expensive-to-validate block.\n                 nSigOps += GetP2SHSigOpCount(tx, view);\n                 if (nSigOps > MAX_BLOCK_SIGOPS)\n-                    return state.DoS(100, error(\"ConnectBlock() : too many sigops\"),\n+                    return state.DoS(100, error(\"ConnectBlock(): too many sigops\"),\n                                      REJECT_INVALID, \"bad-blk-sigops\");\n             }\n \n@@ -1825,7 +1825,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n     if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return state.DoS(100,\n-                         error(\"ConnectBlock() : coinbase pays too much (actual=%d vs limit=%d)\",\n+                         error(\"ConnectBlock(): coinbase pays too much (actual=%d vs limit=%d)\",\n                                block.vtx[0].GetValueOut(), GetBlockValue(pindex->nHeight, nFees)),\n                                REJECT_INVALID, \"bad-cb-amount\");\n \n@@ -1843,7 +1843,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         if (pindex->GetUndoPos().IsNull()) {\n             CDiskBlockPos pos;\n             if (!FindUndoPos(state, pindex->nFile, pos, ::GetSerializeSize(blockundo, SER_DISK, CLIENT_VERSION) + 40))\n-                return error(\"ConnectBlock() : FindUndoPos failed\");\n+                return error(\"ConnectBlock(): FindUndoPos failed\");\n             if (!UndoWriteToDisk(blockundo, pos, pindex->pprev->GetBlockHash()))\n                 return state.Abort(\"Failed to write undo data\");\n \n@@ -1995,7 +1995,7 @@ bool static DisconnectTip(CValidationState &state) {\n     {\n         CCoinsViewCache view(pcoinsTip);\n         if (!DisconnectBlock(block, state, pindexDelete, view))\n-            return error(\"DisconnectTip() : DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n+            return error(\"DisconnectTip(): DisconnectBlock %s failed\", pindexDelete->GetBlockHash().ToString());\n         assert(view.Flush());\n     }\n     LogPrint(\"bench\", \"- Disconnect block: %.2fms\\n\", (GetTimeMicros() - nStart) * 0.001);\n@@ -2055,7 +2055,7 @@ bool static ConnectTip(CValidationState &state, CBlockIndex *pindexNew, CBlock *\n         if (!rv) {\n             if (state.IsInvalid())\n                 InvalidBlockFound(pindexNew, state);\n-            return error(\"ConnectTip() : ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n+            return error(\"ConnectTip(): ConnectBlock %s failed\", pindexNew->GetBlockHash().ToString());\n         }\n         mapBlockSource.erase(inv.hash);\n         nTime3 = GetTimeMicros(); nTimeConnectTotal += nTime3 - nTime2;\n@@ -2492,12 +2492,12 @@ bool CheckBlockHeader(const CBlockHeader& block, CValidationState& state, bool f\n {\n     // Check proof of work matches claimed amount\n     if (fCheckPOW && !CheckProofOfWork(block.GetHash(), block.nBits))\n-        return state.DoS(50, error(\"CheckBlockHeader() : proof of work failed\"),\n+        return state.DoS(50, error(\"CheckBlockHeader(): proof of work failed\"),\n                          REJECT_INVALID, \"high-hash\");\n \n     // Check timestamp\n     if (block.GetBlockTime() > GetAdjustedTime() + 2 * 60 * 60)\n-        return state.Invalid(error(\"CheckBlockHeader() : block timestamp too far in the future\"),\n+        return state.Invalid(error(\"CheckBlockHeader(): block timestamp too far in the future\"),\n                              REJECT_INVALID, \"time-too-new\");\n \n     return true;\n@@ -2517,14 +2517,14 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n         bool mutated;\n         uint256 hashMerkleRoot2 = block.BuildMerkleTree(&mutated);\n         if (block.hashMerkleRoot != hashMerkleRoot2)\n-            return state.DoS(100, error(\"CheckBlock() : hashMerkleRoot mismatch\"),\n+            return state.DoS(100, error(\"CheckBlock(): hashMerkleRoot mismatch\"),\n                              REJECT_INVALID, \"bad-txnmrklroot\", true);\n \n         // Check for merkle tree malleability (CVE-2012-2459): repeating sequences\n         // of transactions in a block without affecting the merkle root of a block,\n         // while still invalidating it.\n         if (mutated)\n-            return state.DoS(100, error(\"CheckBlock() : duplicate transaction\"),\n+            return state.DoS(100, error(\"CheckBlock(): duplicate transaction\"),\n                              REJECT_INVALID, \"bad-txns-duplicate\", true);\n     }\n \n@@ -2534,30 +2534,30 @@ bool CheckBlock(const CBlock& block, CValidationState& state, bool fCheckPOW, bo\n \n     // Size limits\n     if (block.vtx.empty() || block.vtx.size() > MAX_BLOCK_SIZE || ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION) > MAX_BLOCK_SIZE)\n-        return state.DoS(100, error(\"CheckBlock() : size limits failed\"),\n+        return state.DoS(100, error(\"CheckBlock(): size limits failed\"),\n                          REJECT_INVALID, \"bad-blk-length\");\n \n     // First transaction must be coinbase, the rest must not be\n     if (block.vtx.empty() || !block.vtx[0].IsCoinBase())\n-        return state.DoS(100, error(\"CheckBlock() : first tx is not coinbase\"),\n+        return state.DoS(100, error(\"CheckBlock(): first tx is not coinbase\"),\n                          REJECT_INVALID, \"bad-cb-missing\");\n     for (unsigned int i = 1; i < block.vtx.size(); i++)\n         if (block.vtx[i].IsCoinBase())\n-            return state.DoS(100, error(\"CheckBlock() : more than one coinbase\"),\n+            return state.DoS(100, error(\"CheckBlock(): more than one coinbase\"),\n                              REJECT_INVALID, \"bad-cb-multiple\");\n \n     // Check transactions\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!CheckTransaction(tx, state))\n-            return error(\"CheckBlock() : CheckTransaction failed\");\n+            return error(\"CheckBlock(): CheckTransaction failed\");\n \n     unsigned int nSigOps = 0;\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n     {\n         nSigOps += GetLegacySigOpCount(tx);\n     }\n     if (nSigOps > MAX_BLOCK_SIGOPS)\n-        return state.DoS(100, error(\"CheckBlock() : out-of-bounds SigOpCount\"),\n+        return state.DoS(100, error(\"CheckBlock(): out-of-bounds SigOpCount\"),\n                          REJECT_INVALID, \"bad-blk-sigops\", true);\n \n     return true;\n@@ -2576,28 +2576,28 @@ bool ContextualCheckBlockHeader(const CBlockHeader& block, CValidationState& sta\n     // Check proof of work\n     if ((!Params().SkipProofOfWorkCheck()) &&\n        (block.nBits != GetNextWorkRequired(pindexPrev, &block)))\n-        return state.DoS(100, error(\"%s : incorrect proof of work\", __func__),\n+        return state.DoS(100, error(\"%s: incorrect proof of work\", __func__),\n                          REJECT_INVALID, \"bad-diffbits\");\n \n     // Check timestamp against prev\n     if (block.GetBlockTime() <= pindexPrev->GetMedianTimePast())\n-        return state.Invalid(error(\"%s : block's timestamp is too early\", __func__),\n+        return state.Invalid(error(\"%s: block's timestamp is too early\", __func__),\n                              REJECT_INVALID, \"time-too-old\");\n \n     // Check that the block chain matches the known block chain up to a checkpoint\n     if (!Checkpoints::CheckBlock(nHeight, hash))\n-        return state.DoS(100, error(\"%s : rejected by checkpoint lock-in at %d\", __func__, nHeight),\n+        return state.DoS(100, error(\"%s: rejected by checkpoint lock-in at %d\", __func__, nHeight),\n                          REJECT_CHECKPOINT, \"checkpoint mismatch\");\n \n     // Don't accept any forks from the main chain prior to last checkpoint\n     CBlockIndex* pcheckpoint = Checkpoints::GetLastCheckpoint();\n     if (pcheckpoint && nHeight < pcheckpoint->nHeight)\n-        return state.DoS(100, error(\"%s : forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n+        return state.DoS(100, error(\"%s: forked chain older than last checkpoint (height %d)\", __func__, nHeight));\n \n     // Reject block.nVersion=1 blocks when 95% (75% on testnet) of the network has upgraded:\n     if (block.nVersion < 2 && IsSuperMajority(2, pindexPrev, Params().RejectBlockOutdatedMajority()))\n     {\n-        return state.Invalid(error(\"%s : rejected nVersion=1 block\", __func__),\n+        return state.Invalid(error(\"%s: rejected nVersion=1 block\", __func__),\n                              REJECT_OBSOLETE, \"bad-version\");\n     }\n \n@@ -2611,7 +2611,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     // Check that all transactions are finalized\n     BOOST_FOREACH(const CTransaction& tx, block.vtx)\n         if (!IsFinalTx(tx, nHeight, block.GetBlockTime())) {\n-            return state.DoS(10, error(\"%s : contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n+            return state.DoS(10, error(\"%s: contains a non-final transaction\", __func__), REJECT_INVALID, \"bad-txns-nonfinal\");\n         }\n \n     // Enforce block.nVersion=2 rule that the coinbase starts with serialized block height\n@@ -2621,7 +2621,7 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n         CScript expect = CScript() << nHeight;\n         if (block.vtx[0].vin[0].scriptSig.size() < expect.size() ||\n             !std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) {\n-            return state.DoS(100, error(\"%s : block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n+            return state.DoS(100, error(\"%s: block height mismatch in coinbase\", __func__), REJECT_INVALID, \"bad-cb-height\");\n         }\n     }\n \n@@ -2641,7 +2641,7 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n         if (ppindex)\n             *ppindex = pindex;\n         if (pindex->nStatus & BLOCK_FAILED_MASK)\n-            return state.Invalid(error(\"%s : block is marked invalid\", __func__), 0, \"duplicate\");\n+            return state.Invalid(error(\"%s: block is marked invalid\", __func__), 0, \"duplicate\");\n         return true;\n     }\n \n@@ -2653,10 +2653,10 @@ bool AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, CBloc\n     if (hash != Params().HashGenesisBlock()) {\n         BlockMap::iterator mi = mapBlockIndex.find(block.hashPrevBlock);\n         if (mi == mapBlockIndex.end())\n-            return state.DoS(10, error(\"%s : prev block not found\", __func__), 0, \"bad-prevblk\");\n+            return state.DoS(10, error(\"%s: prev block not found\", __func__), 0, \"bad-prevblk\");\n         pindexPrev = (*mi).second;\n         if (pindexPrev->nStatus & BLOCK_FAILED_MASK)\n-            return state.DoS(100, error(\"%s : prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n+            return state.DoS(100, error(\"%s: prev block invalid\", __func__), REJECT_INVALID, \"bad-prevblk\");\n     }\n \n     if (!ContextualCheckBlockHeader(block, state, pindexPrev))\n@@ -2682,7 +2682,7 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n \n     if (pindex->nStatus & BLOCK_HAVE_DATA) {\n         // TODO: deal better with duplicate blocks.\n-        // return state.DoS(20, error(\"AcceptBlock() : already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n+        // return state.DoS(20, error(\"AcceptBlock(): already have block %d %s\", pindex->nHeight, pindex->GetBlockHash().ToString()), REJECT_DUPLICATE, \"duplicate\");\n         return true;\n     }\n \n@@ -2703,12 +2703,12 @@ bool AcceptBlock(CBlock& block, CValidationState& state, CBlockIndex** ppindex,\n         if (dbp != NULL)\n             blockPos = *dbp;\n         if (!FindBlockPos(state, blockPos, nBlockSize+8, nHeight, block.GetBlockTime(), dbp != NULL))\n-            return error(\"AcceptBlock() : FindBlockPos failed\");\n+            return error(\"AcceptBlock(): FindBlockPos failed\");\n         if (dbp == NULL)\n             if (!WriteBlockToDisk(block, blockPos))\n                 return state.Abort(\"Failed to write block\");\n         if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-            return error(\"AcceptBlock() : ReceivedBlockTransactions failed\");\n+            return error(\"AcceptBlock(): ReceivedBlockTransactions failed\");\n     } catch (const std::runtime_error& e) {\n         return state.Abort(std::string(\"System error: \") + e.what());\n     }\n@@ -2739,7 +2739,7 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n         LOCK(cs_main);\n         MarkBlockAsReceived(pblock->GetHash());\n         if (!checked) {\n-            return error(\"%s : CheckBlock FAILED\", __func__);\n+            return error(\"%s: CheckBlock FAILED\", __func__);\n         }\n \n         // Store to disk\n@@ -2749,11 +2749,11 @@ bool ProcessNewBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDis\n             mapBlockSource[pindex->GetBlockHash()] = pfrom->GetId();\n         }\n         if (!ret)\n-            return error(\"%s : AcceptBlock FAILED\", __func__);\n+            return error(\"%s: AcceptBlock FAILED\", __func__);\n     }\n \n     if (!ActivateBestChain(state, pblock))\n-        return error(\"%s : ActivateBestChain failed\", __func__);\n+        return error(\"%s: ActivateBestChain failed\", __func__);\n \n     return true;\n }\n@@ -2859,7 +2859,7 @@ CBlockIndex * InsertBlockIndex(uint256 hash)\n     // Create new\n     CBlockIndex* pindexNew = new CBlockIndex();\n     if (!pindexNew)\n-        throw runtime_error(\"LoadBlockIndex() : new CBlockIndex failed\");\n+        throw runtime_error(\"LoadBlockIndex(): new CBlockIndex failed\");\n     mi = mapBlockIndex.insert(make_pair(hash, pindexNew)).first;\n     pindexNew->phashBlock = &((*mi).first);\n \n@@ -3005,24 +3005,24 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n         CBlock block;\n         // check level 0: read from disk\n         if (!ReadBlockFromDisk(block, pindex))\n-            return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 1: verify block validity\n         if (nCheckLevel >= 1 && !CheckBlock(block, state))\n-            return error(\"VerifyDB() : *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+            return error(\"VerifyDB(): *** found bad block at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         // check level 2: verify undo validity\n         if (nCheckLevel >= 2 && pindex) {\n             CBlockUndo undo;\n             CDiskBlockPos pos = pindex->GetUndoPos();\n             if (!pos.IsNull()) {\n                 if (!UndoReadFromDisk(undo, pos, pindex->pprev->GetBlockHash()))\n-                    return error(\"VerifyDB() : *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                    return error(\"VerifyDB(): *** found bad undo data at %d, hash=%s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             }\n         }\n         // check level 3: check for inconsistencies during memory-only disconnect of tip blocks\n         if (nCheckLevel >= 3 && pindex == pindexState && (coins.GetCacheSize() + pcoinsTip->GetCacheSize()) <= nCoinCacheSize) {\n             bool fClean = true;\n             if (!DisconnectBlock(block, state, pindex, coins, &fClean))\n-                return error(\"VerifyDB() : *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** irrecoverable inconsistency in block data at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             pindexState = pindex->pprev;\n             if (!fClean) {\n                 nGoodTransactions = 0;\n@@ -3034,7 +3034,7 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             return true;\n     }\n     if (pindexFailure)\n-        return error(\"VerifyDB() : *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n+        return error(\"VerifyDB(): *** coin database inconsistencies found (last %i blocks, %i good transactions before that)\\n\", chainActive.Height() - pindexFailure->nHeight + 1, nGoodTransactions);\n \n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n@@ -3045,9 +3045,9 @@ bool CVerifyDB::VerifyDB(CCoinsView *coinsview, int nCheckLevel, int nCheckDepth\n             pindex = chainActive.Next(pindex);\n             CBlock block;\n             if (!ReadBlockFromDisk(block, pindex))\n-                return error(\"VerifyDB() : *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** ReadBlockFromDisk failed at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n             if (!ConnectBlock(block, state, pindex, coins))\n-                return error(\"VerifyDB() : *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n+                return error(\"VerifyDB(): *** found unconnectable block at %d, hash=%s\", pindex->nHeight, pindex->GetBlockHash().ToString());\n         }\n     }\n \n@@ -3093,18 +3093,18 @@ bool InitBlockIndex() {\n             CDiskBlockPos blockPos;\n             CValidationState state;\n             if (!FindBlockPos(state, blockPos, nBlockSize+8, 0, block.GetBlockTime()))\n-                return error(\"LoadBlockIndex() : FindBlockPos failed\");\n+                return error(\"LoadBlockIndex(): FindBlockPos failed\");\n             if (!WriteBlockToDisk(block, blockPos))\n-                return error(\"LoadBlockIndex() : writing genesis block to disk failed\");\n+                return error(\"LoadBlockIndex(): writing genesis block to disk failed\");\n             CBlockIndex *pindex = AddToBlockIndex(block);\n             if (!ReceivedBlockTransactions(block, state, pindex, blockPos))\n-                return error(\"LoadBlockIndex() : genesis block not accepted\");\n+                return error(\"LoadBlockIndex(): genesis block not accepted\");\n             if (!ActivateBestChain(state, &block))\n-                return error(\"LoadBlockIndex() : genesis block cannot be activated\");\n+                return error(\"LoadBlockIndex(): genesis block cannot be activated\");\n             // Force a chainstate write so that when we VerifyDB in a moment, it doesn't check stale data\n             return FlushStateToDisk(state, FLUSH_STATE_ALWAYS);\n         } catch (const std::runtime_error& e) {\n-            return error(\"LoadBlockIndex() : failed to initialize block database: %s\", e.what());\n+            return error(\"LoadBlockIndex(): failed to initialize block database: %s\", e.what());\n         }\n     }\n \n@@ -3204,7 +3204,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                     }\n                 }\n             } catch (const std::exception& e) {\n-                LogPrintf(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+                LogPrintf(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n             }\n         }\n     } catch (const std::runtime_error& e) {\n@@ -3268,7 +3268,7 @@ string GetWarnings(string strFor)\n         return strStatusBar;\n     else if (strFor == \"rpc\")\n         return strRPC;\n-    assert(!\"GetWarnings() : invalid parameter\");\n+    assert(!\"GetWarnings(): invalid parameter\");\n     return \"error\";\n }\n \n@@ -3835,7 +3835,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             vWorkQueue.push_back(inv.hash);\n             vEraseQueue.push_back(inv.hash);\n \n-            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s : accepted %s (poolsz %u)\\n\",\n+            LogPrint(\"mempool\", \"AcceptToMemoryPool: peer=%d %s: accepted %s (poolsz %u)\\n\",\n                 pfrom->id, pfrom->cleanSubVer,\n                 tx.GetHash().ToString(),\n                 mempool.mapTx.size());\n@@ -4297,7 +4297,7 @@ bool ProcessMessages(CNode* pfrom)\n         memcpy(&nChecksum, &hash, sizeof(nChecksum));\n         if (nChecksum != hdr.nChecksum)\n         {\n-            LogPrintf(\"ProcessMessages(%s, %u bytes) : CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n+            LogPrintf(\"ProcessMessages(%s, %u bytes): CHECKSUM ERROR nChecksum=%08x hdr.nChecksum=%08x\\n\",\n                strCommand, nMessageSize, nChecksum, hdr.nChecksum);\n             continue;\n         }\n@@ -4315,12 +4315,12 @@ bool ProcessMessages(CNode* pfrom)\n             if (strstr(e.what(), \"end of data\"))\n             {\n                 // Allow exceptions from under-length message on vRecv\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught, normally caused by a message being shorter than its stated length\\n\", strCommand, nMessageSize, e.what());\n             }\n             else if (strstr(e.what(), \"size too large\"))\n             {\n                 // Allow exceptions from over-long size\n-                LogPrintf(\"ProcessMessages(%s, %u bytes) : Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n+                LogPrintf(\"ProcessMessages(%s, %u bytes): Exception '%s' caught\\n\", strCommand, nMessageSize, e.what());\n             }\n             else\n             {"
      },
      {
        "sha": "e359654d7ba26004c0c09fc44e52fab19b4ad3ce",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -332,7 +332,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         CValidationState state;\n         if (!TestBlockValidity(state, *pblock, pindexPrev, false, false))\n-            throw std::runtime_error(\"CreateNewBlock() : TestBlockValidity failed\");\n+            throw std::runtime_error(\"CreateNewBlock(): TestBlockValidity failed\");\n     }\n \n     return pblocktemplate.release();\n@@ -415,7 +415,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     {\n         LOCK(cs_main);\n         if (pblock->hashPrevBlock != chainActive.Tip()->GetBlockHash())\n-            return error(\"BitcoinMiner : generated block is stale\");\n+            return error(\"BitcoinMiner: generated block is stale\");\n     }\n \n     // Remove key from key pool\n@@ -430,7 +430,7 @@ static bool ProcessBlockFound(CBlock* pblock, CWallet& wallet, CReserveKey& rese\n     // Process this block the same as if we had received it from another node\n     CValidationState state;\n     if (!ProcessNewBlock(state, NULL, pblock))\n-        return error(\"BitcoinMiner : ProcessNewBlock, block not accepted\");\n+        return error(\"BitcoinMiner: ProcessNewBlock, block not accepted\");\n \n     return true;\n }"
      },
      {
        "sha": "e4ab9d706d86e77308ec515a2c772d33451b733e",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -1020,7 +1020,7 @@ void ThreadMapPort()\n         catch (const boost::thread_interrupted&)\n         {\n             r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-            LogPrintf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n+            LogPrintf(\"UPNP_DeletePortMapping() returned: %d\\n\", r);\n             freeUPNPDevlist(devlist); devlist = 0;\n             FreeUPNPUrls(&urls);\n             throw;\n@@ -1797,21 +1797,21 @@ bool CAddrDB::Write(const CAddrMan& addr)\n     FILE *file = fopen(pathTmp.string().c_str(), \"wb\");\n     CAutoFile fileout(file, SER_DISK, CLIENT_VERSION);\n     if (fileout.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathTmp.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathTmp.string());\n \n     // Write and commit header, data\n     try {\n         fileout << ssPeers;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Serialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Serialize or I/O error - %s\", __func__, e.what());\n     }\n     FileCommit(fileout.Get());\n     fileout.fclose();\n \n     // replace existing peers.dat, if any, with new peers.dat.XXXX\n     if (!RenameOver(pathTmp, pathAddr))\n-        return error(\"%s : Rename-into-place failed\", __func__);\n+        return error(\"%s: Rename-into-place failed\", __func__);\n \n     return true;\n }\n@@ -1822,7 +1822,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     FILE *file = fopen(pathAddr.string().c_str(), \"rb\");\n     CAutoFile filein(file, SER_DISK, CLIENT_VERSION);\n     if (filein.IsNull())\n-        return error(\"%s : Failed to open file %s\", __func__, pathAddr.string());\n+        return error(\"%s: Failed to open file %s\", __func__, pathAddr.string());\n \n     // use file size to size memory buffer\n     int fileSize = boost::filesystem::file_size(pathAddr);\n@@ -1840,7 +1840,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n         filein >> hashIn;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n     filein.fclose();\n \n@@ -1849,7 +1849,7 @@ bool CAddrDB::Read(CAddrMan& addr)\n     // verify stored checksum matches input data\n     uint256 hashTmp = Hash(ssPeers.begin(), ssPeers.end());\n     if (hashIn != hashTmp)\n-        return error(\"%s : Checksum mismatch, data corrupted\", __func__);\n+        return error(\"%s: Checksum mismatch, data corrupted\", __func__);\n \n     unsigned char pchMsgTmp[4];\n     try {\n@@ -1858,13 +1858,13 @@ bool CAddrDB::Read(CAddrMan& addr)\n \n         // ... verify the network matches ours\n         if (memcmp(pchMsgTmp, Params().MessageStart(), sizeof(pchMsgTmp)))\n-            return error(\"%s : Invalid network magic number\", __func__);\n+            return error(\"%s: Invalid network magic number\", __func__);\n \n         // de-serialize address data into one CAddrMan object\n         ssPeers >> addr;\n     }\n     catch (const std::exception& e) {\n-        return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+        return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n     }\n \n     return true;"
      },
      {
        "sha": "e49f0d104c26600c78ef5f392925c6c8f9c63280",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -89,11 +89,11 @@ bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n \n     // Check range\n     if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n-        return error(\"CheckProofOfWork() : nBits below minimum work\");\n+        return error(\"CheckProofOfWork(): nBits below minimum work\");\n \n     // Check proof of work matches claimed amount\n     if (UintToArith256(hash) > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+        return error(\"CheckProofOfWork(): hash doesn't match nBits\");\n \n     return true;\n }"
      },
      {
        "sha": "606dbea79857d2f4cc79b0136ad46486f3c187d9",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -94,7 +94,7 @@ CAmount CTransaction::GetValueOut() const\n     {\n         nValueOut += it->nValue;\n         if (!MoneyRange(it->nValue) || !MoneyRange(nValueOut))\n-            throw std::runtime_error(\"CTransaction::GetValueOut() : value out of range\");\n+            throw std::runtime_error(\"CTransaction::GetValueOut(): value out of range\");\n     }\n     return nValueOut;\n }"
      },
      {
        "sha": "74ac706d60c6f14fc060e047068ee716128cb09b",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -66,7 +66,7 @@ bool CMessageHeader::IsValid() const\n     // Message size\n     if (nMessageSize > MAX_SIZE)\n     {\n-        LogPrintf(\"CMessageHeader::IsValid() : (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n+        LogPrintf(\"CMessageHeader::IsValid(): (%s, %u bytes) nMessageSize > MAX_SIZE\\n\", GetCommand(), nMessageSize);\n         return false;\n     }\n \n@@ -117,7 +117,7 @@ CInv::CInv(const std::string& strType, const uint256& hashIn)\n         }\n     }\n     if (i == ARRAYLEN(ppszTypeName))\n-        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256) : unknown type '%s'\", strType));\n+        throw std::out_of_range(strprintf(\"CInv::CInv(string, uint256): unknown type '%s'\", strType));\n     hash = hashIn;\n }\n \n@@ -134,7 +134,7 @@ bool CInv::IsKnownType() const\n const char* CInv::GetCommand() const\n {\n     if (!IsKnownType())\n-        throw std::out_of_range(strprintf(\"CInv::GetCommand() : type=%d unknown type\", type));\n+        throw std::out_of_range(strprintf(\"CInv::GetCommand(): type=%d unknown type\", type));\n     return ppszTypeName[type];\n }\n "
      },
      {
        "sha": "162ecdba4ef4c84d4288e504db4e337664eb6282",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -114,7 +114,7 @@ class AddressTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_NEW, but entry is already in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_NEW, but entry is already in model\";\n                 break;\n             }\n             parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex);\n@@ -124,7 +124,7 @@ class AddressTablePriv\n         case CT_UPDATED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_UPDATED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_UPDATED, but entry is not in model\";\n                 break;\n             }\n             lower->type = newEntryType;\n@@ -134,7 +134,7 @@ class AddressTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"AddressTablePriv::updateEntry : Warning: Got CT_DELETED, but entry is not in model\";\n+                qWarning() << \"AddressTablePriv::updateEntry: Warning: Got CT_DELETED, but entry is not in model\";\n                 break;\n             }\n             parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);"
      },
      {
        "sha": "03d94f2e13f127dcb875d733eef691506df7a5a1",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -212,14 +212,14 @@ static void ShowProgress(ClientModel *clientmodel, const std::string &title, int\n \n static void NotifyNumConnectionsChanged(ClientModel *clientmodel, int newNumConnections)\n {\n-    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged : \" + QString::number(newNumConnections);\n+    // Too noisy: qDebug() << \"NotifyNumConnectionsChanged: \" + QString::number(newNumConnections);\n     QMetaObject::invokeMethod(clientmodel, \"updateNumConnections\", Qt::QueuedConnection,\n                               Q_ARG(int, newNumConnections));\n }\n \n static void NotifyAlertChanged(ClientModel *clientmodel, const uint256 &hash, ChangeType status)\n {\n-    qDebug() << \"NotifyAlertChanged : \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAlertChanged: \" + QString::fromStdString(hash.GetHex()) + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(clientmodel, \"updateAlert\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(hash.GetHex())),\n                               Q_ARG(int, status));"
      },
      {
        "sha": "4c1e898020dcdfe8034396ae6fb19f5180ac8ecc",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -32,18 +32,18 @@ bool PaymentRequestPlus::parse(const QByteArray& data)\n {\n     bool parseOK = paymentRequest.ParseFromArray(data.data(), data.size());\n     if (!parseOK) {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment request\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment request\";\n         return false;\n     }\n     if (paymentRequest.payment_details_version() > 1) {\n-        qWarning() << \"PaymentRequestPlus::parse : Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n+        qWarning() << \"PaymentRequestPlus::parse: Received up-version payment details, version=\" << paymentRequest.payment_details_version();\n         return false;\n     }\n \n     parseOK = details.ParseFromString(paymentRequest.serialized_payment_details());\n     if (!parseOK)\n     {\n-        qWarning() << \"PaymentRequestPlus::parse : Error parsing payment details\";\n+        qWarning() << \"PaymentRequestPlus::parse: Error parsing payment details\";\n         paymentRequest.Clear();\n         return false;\n     }\n@@ -83,17 +83,17 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         digestAlgorithm = EVP_sha1();\n     }\n     else if (paymentRequest.pki_type() == \"none\") {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: pki_type == none\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: pki_type == none\";\n         return false;\n     }\n     else {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: unknown pki_type \" << QString::fromStdString(paymentRequest.pki_type());\n         return false;\n     }\n \n     payments::X509Certificates certChain;\n     if (!certChain.ParseFromString(paymentRequest.pki_data())) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error parsing pki_data\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error parsing pki_data\";\n         return false;\n     }\n \n@@ -103,12 +103,12 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n         QByteArray certData(certChain.certificate(i).data(), certChain.certificate(i).size());\n         QSslCertificate qCert(certData, QSsl::Der);\n         if (currentTime < qCert.effectiveDate() || currentTime > qCert.expiryDate()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate expired or not yet active: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate expired or not yet active: \" << qCert;\n             return false;\n         }\n #if QT_VERSION >= 0x050000\n         if (qCert.isBlacklisted()) {\n-            qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: certificate blacklisted: \" << qCert;\n+            qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: certificate blacklisted: \" << qCert;\n             return false;\n         }\n #endif\n@@ -118,7 +118,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n             certs.push_back(cert);\n     }\n     if (certs.empty()) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: empty certificate chain\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: empty certificate chain\";\n         return false;\n     }\n \n@@ -134,7 +134,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     // load the signing cert into it and verify.\n     X509_STORE_CTX *store_ctx = X509_STORE_CTX_new();\n     if (!store_ctx) {\n-        qWarning() << \"PaymentRequestPlus::getMerchant : Payment request: error creating X509_STORE_CTX\";\n+        qWarning() << \"PaymentRequestPlus::getMerchant: Payment request: error creating X509_STORE_CTX\";\n         return false;\n     }\n \n@@ -191,7 +191,7 @@ bool PaymentRequestPlus::getMerchant(X509_STORE* certStore, QString& merchant) c\n     }\n     catch (const SSLVerifyError& err) {\n         fResult = false;\n-        qWarning() << \"PaymentRequestPlus::getMerchant : SSL error: \" << err.what();\n+        qWarning() << \"PaymentRequestPlus::getMerchant: SSL error: \" << err.what();\n     }\n \n     if (website)"
      },
      {
        "sha": "a00916bf7f96b1668e6db5604b650e07302a9c5a",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -97,7 +97,7 @@ static QList<QString> savedPaymentRequests;\n \n static void ReportInvalidCertificate(const QSslCertificate& cert)\n {\n-    qDebug() << \"ReportInvalidCertificate : Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n+    qDebug() << \"ReportInvalidCertificate: Payment server found an invalid certificate: \" << cert.subjectInfo(QSslCertificate::CommonName);\n }\n \n //\n@@ -171,7 +171,7 @@ void PaymentServer::LoadRootCAs(X509_STORE* _store)\n             continue;\n         }\n     }\n-    qWarning() << \"PaymentServer::LoadRootCAs : Loaded \" << nRootCerts << \" root certificates\";\n+    qWarning() << \"PaymentServer::LoadRootCAs: Loaded \" << nRootCerts << \" root certificates\";\n \n     // Project for another day:\n     // Fetch certificate revocation lists, and add them to certStore.\n@@ -244,7 +244,7 @@ void PaymentServer::ipcParseCommandLine(int argc, char* argv[])\n         {\n             // Printing to debug.log is about the best we can do here, the\n             // GUI hasn't started yet so we can't pop up a message box.\n-            qWarning() << \"PaymentServer::ipcSendCommandLine : Payment request file does not exist: \" << arg;\n+            qWarning() << \"PaymentServer::ipcSendCommandLine: Payment request file does not exist: \" << arg;\n         }\n     }\n }\n@@ -368,10 +368,10 @@ void PaymentServer::initNetManager()\n     if (optionsModel->getProxySettings(proxy)) {\n         netManager->setProxy(proxy);\n \n-        qDebug() << \"PaymentServer::initNetManager : Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n+        qDebug() << \"PaymentServer::initNetManager: Using SOCKS5 proxy\" << proxy.hostName() << \":\" << proxy.port();\n     }\n     else\n-        qDebug() << \"PaymentServer::initNetManager : No active proxy server found.\";\n+        qDebug() << \"PaymentServer::initNetManager: No active proxy server found.\";\n \n     connect(netManager, SIGNAL(finished(QNetworkReply*)),\n             this, SLOT(netRequestFinished(QNetworkReply*)));\n@@ -415,12 +415,12 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n             if (fetchUrl.isValid())\n             {\n-                qDebug() << \"PaymentServer::handleURIOrFile : fetchRequest(\" << fetchUrl << \")\";\n+                qDebug() << \"PaymentServer::handleURIOrFile: fetchRequest(\" << fetchUrl << \")\";\n                 fetchRequest(fetchUrl);\n             }\n             else\n             {\n-                qWarning() << \"PaymentServer::handleURIOrFile : Invalid URL: \" << fetchUrl;\n+                qWarning() << \"PaymentServer::handleURIOrFile: Invalid URL: \" << fetchUrl;\n                 emit message(tr(\"URI handling\"),\n                     tr(\"Payment request fetch URL is invalid: %1\").arg(fetchUrl.toString()),\n                     CClientUIInterface::ICON_WARNING);\n@@ -585,10 +585,10 @@ bool PaymentServer::processPaymentRequest(PaymentRequestPlus& request, SendCoins\n     recipient.address = addresses.join(\"<br />\");\n \n     if (!recipient.authenticatedMerchant.isEmpty()) {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Secure payment request from \" << recipient.authenticatedMerchant;\n+        qDebug() << \"PaymentServer::processPaymentRequest: Secure payment request from \" << recipient.authenticatedMerchant;\n     }\n     else {\n-        qDebug() << \"PaymentServer::processPaymentRequest : Insecure payment request to \" << addresses.join(\", \");\n+        qDebug() << \"PaymentServer::processPaymentRequest: Insecure payment request to \" << addresses.join(\", \");\n     }\n \n     return true;\n@@ -643,7 +643,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n         else {\n             // This should never happen, because sending coins should have\n             // just unlocked the wallet and refilled the keypool.\n-            qWarning() << \"PaymentServer::fetchPaymentACK : Error getting refund key, refund_to not set\";\n+            qWarning() << \"PaymentServer::fetchPaymentACK: Error getting refund key, refund_to not set\";\n         }\n     }\n \n@@ -655,7 +655,7 @@ void PaymentServer::fetchPaymentACK(CWallet* wallet, SendCoinsRecipient recipien\n     }\n     else {\n         // This should never happen, either.\n-        qWarning() << \"PaymentServer::fetchPaymentACK : Error serializing payment message\";\n+        qWarning() << \"PaymentServer::fetchPaymentACK: Error serializing payment message\";\n     }\n }\n \n@@ -694,7 +694,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n         SendCoinsRecipient recipient;\n         if (!request.parse(data))\n         {\n-            qWarning() << \"PaymentServer::netRequestFinished : Error parsing payment request\";\n+            qWarning() << \"PaymentServer::netRequestFinished: Error parsing payment request\";\n             emit message(tr(\"Payment request error\"),\n                 tr(\"Payment request cannot be parsed!\"),\n                 CClientUIInterface::MSG_ERROR);\n@@ -712,7 +712,7 @@ void PaymentServer::netRequestFinished(QNetworkReply* reply)\n             QString msg = tr(\"Bad response from server %1\")\n                 .arg(reply->request().url().toString());\n \n-            qWarning() << \"PaymentServer::netRequestFinished : \" << msg;\n+            qWarning() << \"PaymentServer::netRequestFinished: \" << msg;\n             emit message(tr(\"Payment request error\"), msg, CClientUIInterface::MSG_ERROR);\n         }\n         else\n@@ -728,7 +728,7 @@ void PaymentServer::reportSslErrors(QNetworkReply* reply, const QList<QSslError>\n \n     QString errString;\n     foreach (const QSslError& err, errs) {\n-        qWarning() << \"PaymentServer::reportSslErrors : \" << err;\n+        qWarning() << \"PaymentServer::reportSslErrors: \" << err;\n         errString += err.errorString() + \"\\n\";\n     }\n     emit message(tr(\"Network request error\"), errString, CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "df1afbfaaae31266db335a94423581896697a65c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -94,7 +94,7 @@ class TransactionTablePriv\n      */\n     void updateWallet(const uint256 &hash, int status, bool showTransaction)\n     {\n-        qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n+        qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n         // Find bounds of this transaction in model\n         QList<TransactionRecord>::iterator lower = qLowerBound(\n@@ -122,7 +122,7 @@ class TransactionTablePriv\n         case CT_NEW:\n             if(inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is already in model\";\n                 break;\n             }\n             if(showTransaction)\n@@ -132,7 +132,7 @@ class TransactionTablePriv\n                 std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n                 if(mi == wallet->mapWallet.end())\n                 {\n-                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n+                    qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n                 // Added -- insert at the right position\n@@ -154,7 +154,7 @@ class TransactionTablePriv\n         case CT_DELETED:\n             if(!inModel)\n             {\n-                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n+                qWarning() << \"TransactionTablePriv::updateWallet: Warning: Got CT_DELETED, but transaction is not in model\";\n                 break;\n             }\n             // Removed -- remove entire transaction from table\n@@ -664,7 +664,7 @@ struct TransactionNotification\n     void invoke(QObject *ttm)\n     {\n         QString strHash = QString::fromStdString(hash.GetHex());\n-        qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n+        qDebug() << \"NotifyTransactionChanged: \" + strHash + \" status= \" + QString::number(status);\n         QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n                                   Q_ARG(QString, strHash),\n                                   Q_ARG(int, status),"
      },
      {
        "sha": "4a7abf999cb04806f7f244239cb15996e14fc18f",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -452,7 +452,7 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n     QString strLabel = QString::fromStdString(label);\n     QString strPurpose = QString::fromStdString(purpose);\n \n-    qDebug() << \"NotifyAddressBookChanged : \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n+    qDebug() << \"NotifyAddressBookChanged: \" + strAddress + \" \" + strLabel + \" isMine=\" + QString::number(isMine) + \" purpose=\" + strPurpose + \" status=\" + QString::number(status);\n     QMetaObject::invokeMethod(walletmodel, \"updateAddressBook\", Qt::QueuedConnection,\n                               Q_ARG(QString, strAddress),\n                               Q_ARG(QString, strLabel),"
      },
      {
        "sha": "28371771a9efbe7951f156b0b0bd789cdfe11288",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -319,7 +319,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     if (pwalletMain->IsLocked())\n     {\n         strError = \"Error: Wallet locked, unable to create transaction!\";\n-        LogPrintf(\"SendMoney() : %s\", strError);\n+        LogPrintf(\"SendMoney(): %s\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n \n@@ -333,7 +333,7 @@ void SendMoney(const CTxDestination &address, CAmount nValue, CWalletTx& wtxNew)\n     {\n         if (nValue + nFeeRequired > pwalletMain->GetBalance())\n             strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s because of its amount, complexity, or use of recently received funds!\", FormatMoney(nFeeRequired));\n-        LogPrintf(\"SendMoney() : %s\\n\", strError);\n+        LogPrintf(\"SendMoney(): %s\\n\", strError);\n         throw JSONRPCError(RPC_WALLET_ERROR, strError);\n     }\n     if (!pwalletMain->CommitTransaction(wtxNew, reservekey))"
      },
      {
        "sha": "0cee1a0116df6a7a7117948c864eabb56d4f6bd6",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -60,7 +60,7 @@ bool CastToBool(const valtype& vch)\n static inline void popstack(vector<valtype>& stack)\n {\n     if (stack.empty())\n-        throw runtime_error(\"popstack() : stack empty\");\n+        throw runtime_error(\"popstack(): stack empty\");\n     stack.pop_back();\n }\n "
      },
      {
        "sha": "8b36aa2f5061fcbb204d73737bbf1c734aacb9ec",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -391,7 +391,7 @@ class CScript : public std::vector<unsigned char>\n     CScript& operator<<(opcodetype opcode)\n     {\n         if (opcode < 0 || opcode > 0xff)\n-            throw std::runtime_error(\"CScript::operator<<() : invalid opcode\");\n+            throw std::runtime_error(\"CScript::operator<<(): invalid opcode\");\n         insert(end(), (unsigned char)opcode);\n         return *this;\n     }"
      },
      {
        "sha": "a62760a7938dec3f0111cc5f600345e8c48b14c0",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -249,7 +249,7 @@ uint64_t ReadCompactSize(Stream& is)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n     if (nSizeRet > (uint64_t)MAX_SIZE)\n-        throw std::ios_base::failure(\"ReadCompactSize() : size too large\");\n+        throw std::ios_base::failure(\"ReadCompactSize(): size too large\");\n     return nSizeRet;\n }\n "
      },
      {
        "sha": "bd8568b1af35093c4db4b85b2ddcfff2431a019c",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -224,7 +224,7 @@ class CDataStream\n         {\n             if (nReadPosNext > vch.size())\n             {\n-                throw std::ios_base::failure(\"CDataStream::read() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::read(): end of data\");\n             }\n             memcpy(pch, &vch[nReadPos], nSize);\n             nReadPos = 0;\n@@ -244,7 +244,7 @@ class CDataStream\n         if (nReadPosNext >= vch.size())\n         {\n             if (nReadPosNext > vch.size())\n-                throw std::ios_base::failure(\"CDataStream::ignore() : end of data\");\n+                throw std::ios_base::failure(\"CDataStream::ignore(): end of data\");\n             nReadPos = 0;\n             vch.clear();\n             return (*this);\n@@ -374,18 +374,18 @@ class CAutoFile\n     CAutoFile& read(char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::read : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::read: file handle is NULL\");\n         if (fread(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read : end of file\" : \"CAutoFile::read : fread failed\");\n+            throw std::ios_base::failure(feof(file) ? \"CAutoFile::read: end of file\" : \"CAutoFile::read: fread failed\");\n         return (*this);\n     }\n \n     CAutoFile& write(const char* pch, size_t nSize)\n     {\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::write : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::write: file handle is NULL\");\n         if (fwrite(pch, 1, nSize, file) != nSize)\n-            throw std::ios_base::failure(\"CAutoFile::write : write failed\");\n+            throw std::ios_base::failure(\"CAutoFile::write: write failed\");\n         return (*this);\n     }\n \n@@ -401,7 +401,7 @@ class CAutoFile\n     {\n         // Serialize to this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator<< : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator<<: file handle is NULL\");\n         ::Serialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -411,7 +411,7 @@ class CAutoFile\n     {\n         // Unserialize from this stream\n         if (!file)\n-            throw std::ios_base::failure(\"CAutoFile::operator>> : file handle is NULL\");\n+            throw std::ios_base::failure(\"CAutoFile::operator>>: file handle is NULL\");\n         ::Unserialize(*this, obj, nType, nVersion);\n         return (*this);\n     }\n@@ -452,7 +452,7 @@ class CBufferedFile\n             return false;\n         size_t read = fread((void*)&vchBuf[pos], 1, readNow, src);\n         if (read == 0) {\n-            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill : end of file\" : \"CBufferedFile::Fill : fread failed\");\n+            throw std::ios_base::failure(feof(src) ? \"CBufferedFile::Fill: end of file\" : \"CBufferedFile::Fill: fread failed\");\n         } else {\n             nSrcPos += read;\n             return true;"
      },
      {
        "sha": "e7aeee9db606c870315542a50dca96b9eb7e2ff7",
        "filename": "src/test/bignum.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -37,14 +37,14 @@ class CBigNum : public BIGNUM\n         if (!BN_copy(this, &b))\n         {\n             BN_clear_free(this);\n-            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&) : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::CBigNum(const CBigNum&): BN_copy failed\");\n         }\n     }\n \n     CBigNum& operator=(const CBigNum& b)\n     {\n         if (!BN_copy(this, &b))\n-            throw bignum_error(\"CBigNum::operator= : BN_copy failed\");\n+            throw bignum_error(\"CBigNum::operator=: BN_copy failed\");\n         return (*this);\n     }\n \n@@ -151,15 +151,15 @@ inline const CBigNum operator+(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_add(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator+ : BN_add failed\");\n+        throw bignum_error(\"CBigNum::operator+: BN_add failed\");\n     return r;\n }\n \n inline const CBigNum operator-(const CBigNum& a, const CBigNum& b)\n {\n     CBigNum r;\n     if (!BN_sub(&r, &a, &b))\n-        throw bignum_error(\"CBigNum::operator- : BN_sub failed\");\n+        throw bignum_error(\"CBigNum::operator-: BN_sub failed\");\n     return r;\n }\n "
      },
      {
        "sha": "ea41dbcde23435912f8b6ac0a7e09a3df8717d05",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -27,7 +27,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n     static const uint256 one(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n     if (nIn >= txTo.vin.size())\n     {\n-        printf(\"ERROR: SignatureHash() : nIn=%d out of range\\n\", nIn);\n+        printf(\"ERROR: SignatureHash(): nIn=%d out of range\\n\", nIn);\n         return one;\n     }\n     CMutableTransaction txTmp(txTo);\n@@ -58,7 +58,7 @@ uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un\n         unsigned int nOut = nIn;\n         if (nOut >= txTmp.vout.size())\n         {\n-            printf(\"ERROR: SignatureHash() : nOut=%d out of range\\n\", nOut);\n+            printf(\"ERROR: SignatureHash(): nOut=%d out of range\\n\", nOut);\n             return one;\n         }\n         txTmp.vout.resize(nOut+1);"
      },
      {
        "sha": "da271bd5d1a11c95a16d7139a0241ff738b78dba",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -141,7 +141,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) const {\n             }\n             pcursor->Next();\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n     stats.nHeight = mapBlockIndex.find(GetBestBlock())->second->nHeight;\n@@ -223,14 +223,14 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nTx            = diskindex.nTx;\n \n                 if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n-                    return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n+                    return error(\"LoadBlockIndex(): CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {\n                 break; // if shutdown requested or finished loading block index\n             }\n         } catch (const std::exception& e) {\n-            return error(\"%s : Deserialize or I/O error - %s\", __func__, e.what());\n+            return error(\"%s: Deserialize or I/O error - %s\", __func__, e.what());\n         }\n     }\n "
      },
      {
        "sha": "6e0f7e9c5a6bd5a2afedba96c1dd7e1b2d1c3305",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -192,7 +192,7 @@ class CMinerPolicyEstimator\n             // Neither or both fee and priority sufficient to get confirmed:\n             // don't know why they got confirmed.\n         }\n-        LogPrint(\"estimatefee\", \"Seen TX confirm: %s : %s fee/%g priority, took %d blocks\\n\",\n+        LogPrint(\"estimatefee\", \"Seen TX confirm: %s: %s fee/%g priority, took %d blocks\\n\",\n                  assignedTo, feeRate.ToString(), dPriority, nBlocksAgo);\n     }\n \n@@ -658,7 +658,7 @@ CTxMemPool::WriteFeeEstimates(CAutoFile& fileout) const\n         minerPolicyEstimator->Write(fileout);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::WriteFeeEstimates() : unable to write policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::WriteFeeEstimates(): unable to write policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;\n@@ -671,13 +671,13 @@ CTxMemPool::ReadFeeEstimates(CAutoFile& filein)\n         int nVersionRequired, nVersionThatWrote;\n         filein >> nVersionRequired >> nVersionThatWrote;\n         if (nVersionRequired > CLIENT_VERSION)\n-            return error(\"CTxMemPool::ReadFeeEstimates() : up-version (%d) fee estimate file\", nVersionRequired);\n+            return error(\"CTxMemPool::ReadFeeEstimates(): up-version (%d) fee estimate file\", nVersionRequired);\n \n         LOCK(cs);\n         minerPolicyEstimator->Read(filein, minRelayFee);\n     }\n     catch (const std::exception&) {\n-        LogPrintf(\"CTxMemPool::ReadFeeEstimates() : unable to read policy estimator data (non-fatal)\");\n+        LogPrintf(\"CTxMemPool::ReadFeeEstimates(): unable to read policy estimator data (non-fatal)\");\n         return false;\n     }\n     return true;"
      },
      {
        "sha": "d66a4465c53f494d15dbae26f39dad8a53a77abb",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -88,7 +88,7 @@ CPubKey CWallet::GenerateNewKey()\n         nTimeFirstKey = nCreationTime;\n \n     if (!AddKeyPubKey(secret, pubkey))\n-        throw std::runtime_error(\"CWallet::GenerateNewKey() : AddKey failed\");\n+        throw std::runtime_error(\"CWallet::GenerateNewKey(): AddKey failed\");\n     return pubkey;\n }\n \n@@ -619,7 +619,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet, CWalletD\n                     wtx.nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n                 }\n                 else\n-                    LogPrintf(\"AddToWallet() : found %s in block %s not in index\\n\",\n+                    LogPrintf(\"AddToWallet(): found %s in block %s not in index\\n\",\n                              wtxIn.GetHash().ToString(),\n                              wtxIn.hashBlock.ToString());\n             }\n@@ -1616,7 +1616,7 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n         if (!wtxNew.AcceptToMemoryPool(false))\n         {\n             // This must not fail. The transaction has already been signed and recorded.\n-            LogPrintf(\"CommitTransaction() : Error: Transaction not valid\");\n+            LogPrintf(\"CommitTransaction(): Error: Transaction not valid\");\n             return false;\n         }\n         wtxNew.RelayWalletTransaction();\n@@ -1809,7 +1809,7 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n-                throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n+                throw runtime_error(\"TopUpKeyPool(): writing generated key failed\");\n             setKeyPool.insert(nEnd);\n             LogPrintf(\"keypool added key %d, size=%u\\n\", nEnd, setKeyPool.size());\n         }\n@@ -1836,9 +1836,9 @@ void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n         nIndex = *(setKeyPool.begin());\n         setKeyPool.erase(setKeyPool.begin());\n         if (!walletdb.ReadPool(nIndex, keypool))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : read failed\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): read failed\");\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n-            throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n+            throw runtime_error(\"ReserveKeyFromKeyPool(): unknown key in key pool\");\n         assert(keypool.vchPubKey.IsValid());\n         LogPrintf(\"keypool reserve %d\\n\", nIndex);\n     }\n@@ -2086,11 +2086,11 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : read failed\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): read failed\");\n         assert(keypool.vchPubKey.IsValid());\n         CKeyID keyID = keypool.vchPubKey.GetID();\n         if (!HaveKey(keyID))\n-            throw runtime_error(\"GetAllReserveKeyHashes() : unknown key in key pool\");\n+            throw runtime_error(\"GetAllReserveKeyHashes(): unknown key in key pool\");\n         setAddress.insert(keyID);\n     }\n }\n@@ -2303,7 +2303,7 @@ int CMerkleTx::SetMerkleBranch(const CBlock& block)\n     {\n         vMerkleBranch.clear();\n         nIndex = -1;\n-        LogPrintf(\"ERROR: SetMerkleBranch() : couldn't find tx in block\\n\");\n+        LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n         return 0;\n     }\n "
      },
      {
        "sha": "aaff00b71660ff10e5257ac39dd6deb2d410e685",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -320,14 +320,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetCredit(const CTxOut& txout, const isminefilter& filter) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         return ((IsMine(txout) & filter) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n     CAmount GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n-            throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+            throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         return (IsChange(txout) ? txout.nValue : 0);\n     }\n     bool IsMine(const CTransaction& tx) const\n@@ -349,7 +349,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nDebit += GetDebit(txin, filter);\n             if (!MoneyRange(nDebit))\n-                throw std::runtime_error(\"CWallet::GetDebit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetDebit(): value out of range\");\n         }\n         return nDebit;\n     }\n@@ -360,7 +360,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nCredit += GetCredit(txout, filter);\n             if (!MoneyRange(nCredit))\n-                throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetCredit(): value out of range\");\n         }\n         return nCredit;\n     }\n@@ -371,7 +371,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n         {\n             nChange += GetChange(txout);\n             if (!MoneyRange(nChange))\n-                throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n+                throw std::runtime_error(\"CWallet::GetChange(): value out of range\");\n         }\n         return nChange;\n     }\n@@ -804,7 +804,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_SPENDABLE);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n \n@@ -847,7 +847,7 @@ class CWalletTx : public CMerkleTx\n                 const CTxOut &txout = vout[i];\n                 nCredit += pwallet->GetCredit(txout, ISMINE_WATCH_ONLY);\n                 if (!MoneyRange(nCredit))\n-                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit() : value out of range\");\n+                    throw std::runtime_error(\"CWalletTx::GetAvailableCredit(): value out of range\");\n             }\n         }\n "
      },
      {
        "sha": "b2daf036ff7308f6cc3df1282e2d08b58c35bcbf",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5262fde0ecd19f1febbfcd488f2be41c5dffd047/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "patch": "@@ -210,7 +210,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n \n     Dbc* pcursor = GetCursor();\n     if (!pcursor)\n-        throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : cannot create DB cursor\");\n+        throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): cannot create DB cursor\");\n     unsigned int fFlags = DB_SET_RANGE;\n     while (true)\n     {\n@@ -226,7 +226,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         else if (ret != 0)\n         {\n             pcursor->close();\n-            throw runtime_error(\"CWalletDB::ListAccountCreditDebit() : error scanning DB\");\n+            throw runtime_error(\"CWalletDB::ListAccountCreditDebit(): error scanning DB\");\n         }\n \n         // Unserialize"
      }
    ]
  },
  {
    "sha": "bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDJiNzNiYjliNDE2MTM5YTBmYmFmNmViMjEzMTM1NmE1OTE4NGE2",
    "commit": {
      "author": {
        "name": "Vitalii Demianets",
        "email": "vitalii@orsoc.se",
        "date": "2015-01-14T09:25:06Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "TRIVIAL: fix misleading comment",
      "tree": {
        "sha": "a094a676ee3745736451ee17dcbef22b54e41f49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a094a676ee3745736451ee17dcbef22b54e41f49"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/comments",
    "author": {
      "login": "dvitas",
      "id": 5735415,
      "node_id": "MDQ6VXNlcjU3MzU0MTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5735415?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dvitas",
      "html_url": "https://github.com/dvitas",
      "followers_url": "https://api.github.com/users/dvitas/followers",
      "following_url": "https://api.github.com/users/dvitas/following{/other_user}",
      "gists_url": "https://api.github.com/users/dvitas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dvitas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dvitas/subscriptions",
      "organizations_url": "https://api.github.com/users/dvitas/orgs",
      "repos_url": "https://api.github.com/users/dvitas/repos",
      "events_url": "https://api.github.com/users/dvitas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dvitas/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5262fde0ecd19f1febbfcd488f2be41c5dffd047",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5262fde0ecd19f1febbfcd488f2be41c5dffd047"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "f43d8c58b63b4552cdc3e653e70363b4c3bd881b",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd2b73bb9b416139a0fbaf6eb2131356a59184a6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "patch": "@@ -744,7 +744,7 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n         // non-standard. Note that this EvalScript() call will\n         // be quick, because if there are any operations\n         // beside \"push data\" in the scriptSig\n-        // IsStandard() will have already returned false\n+        // IsStandardTx() will have already returned false\n         // and this method isn't called.\n         vector<vector<unsigned char> > stack;\n         if (!EvalScript(stack, tx.vin[i].scriptSig, SCRIPT_VERIFY_NONE, BaseSignatureChecker()))"
      }
    ]
  },
  {
    "sha": "5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTgwOWVmMGYwMDliYjZjNDEyYjViZjVmODQ2ZmVlY2ZiMTMzZDcw",
    "commit": {
      "author": {
        "name": "Michael Ford",
        "email": "fanquake@gmail.com",
        "date": "2015-01-18T07:24:09Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "depends: fix typos",
      "tree": {
        "sha": "a3ab195bad8130188cc989825c83b33b381edc01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a3ab195bad8130188cc989825c83b33b381edc01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd2b73bb9b416139a0fbaf6eb2131356a59184a6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd2b73bb9b416139a0fbaf6eb2131356a59184a6"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "55e7222697f146e39ae4479bb2f6266463affa99",
        "filename": "depends/README",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README?ref=5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "patch": "@@ -7,7 +7,7 @@ There are several features that make it different from most similar systems:\n \n In theory, binaries for any target OS/architecture can be created, from a\n builder running any OS/architecture. In practice, build-side tools must be\n-specified when the defaults don't fit, and packages must be ammended to work\n+specified when the defaults don't fit, and packages must be amended to work\n on new hosts. For now, a build architecture of x86_64 is assumed, either on\n Linux or OSX.\n "
      },
      {
        "sha": "b407737f7f4815fdfddca21a15824a2b964218ff",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a809ef0f009bb6c412b5bf5f846feecfb133d70/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "patch": "@@ -205,7 +205,7 @@ endef\n # These functions create the build targets for each package. They must be\n # broken down into small steps so that each part is done for all packages\n # before moving on to the next step. Otherwise, a package's info\n-# (build-id for example) would only be avilable to another package if it\n+# (build-id for example) would only be available to another package if it\n # happened to be computed already.\n \n #set the type for host/build packages."
      }
    ]
  },
  {
    "sha": "faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWYwYWY0OWY1N2YzYjZmNzE2MWVjZDVkZGM4MGYyYTYyOWVmYzY4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-01-19T19:16:49Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Suggest --disable-wallet when libdb_cxx headers are missing",
      "tree": {
        "sha": "ad13d6080f166f9aa5b5d2b05f657cb10be27030",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad13d6080f166f9aa5b5d2b05f657cb10be27030"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a809ef0f009bb6c412b5bf5f846feecfb133d70",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5a809ef0f009bb6c412b5bf5f846feecfb133d70"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "0bf558d25b5e904fe40340bb29115baaf32da190",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "patch": "@@ -38,7 +38,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   done\n   if test \"x$bdbpath\" = \"xX\"; then\n     AC_MSG_RESULT([no])\n-    AC_MSG_ERROR(libdb_cxx headers missing)\n+    AC_MSG_ERROR([libdb_cxx headers missing, Bitcoin Core requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n   elif test \"x$bdb48path\" = \"xX\"; then\n     BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n     AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],["
      }
    ]
  },
  {
    "sha": "34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNGM2MTgxM2E0MDFiZThmNjVlYmFkY2M2ZmUyYjgyYzFhODNiMjhi",
    "commit": {
      "author": {
        "name": "Matt Bogosian",
        "email": "mtb19@columbia.edu",
        "date": "2015-01-23T03:54:20Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Fix README link from util.sh -> util.py.",
      "tree": {
        "sha": "9822cd5f82cb240f6a82a3a18420caa8d2e4d831",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9822cd5f82cb240f6a82a3a18420caa8d2e4d831"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/comments",
    "author": {
      "login": "posita",
      "id": 222581,
      "node_id": "MDQ6VXNlcjIyMjU4MQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/222581?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/posita",
      "html_url": "https://github.com/posita",
      "followers_url": "https://api.github.com/users/posita/followers",
      "following_url": "https://api.github.com/users/posita/following{/other_user}",
      "gists_url": "https://api.github.com/users/posita/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/posita/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/posita/subscriptions",
      "organizations_url": "https://api.github.com/users/posita/orgs",
      "repos_url": "https://api.github.com/users/posita/repos",
      "events_url": "https://api.github.com/users/posita/events{/privacy}",
      "received_events_url": "https://api.github.com/users/posita/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faf0af49f57f3b6f7161ecd5ddc80f2a629efc68"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "02170d13ec31b3decb0cdcac82a593d04e3bfd78",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/34c61813a401be8f65ebadcc6fe2b82c1a83b28b/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "patch": "@@ -12,7 +12,7 @@ Base class for new regression tests.\n ### [listtransactions.py](listtransactions.py)\n Tests for the listtransactions RPC call.\n \n-### [util.py](util.sh)\n+### [util.py](util.py)\n Generally useful functions.\n \n Bash-based tests, to be ported to Python:"
      }
    ]
  },
  {
    "sha": "1fa89a54e8c207564ea7acd262e6389174feaed9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmE4OWE1NGU4YzIwNzU2NGVhN2FjZDI2MmU2Mzg5MTc0ZmVhZWQ5",
    "commit": {
      "author": {
        "name": "UdjinM6",
        "email": "UdjinM6@users.noreply.github.com",
        "date": "2015-01-24T03:30:06Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "fix _code_ snippet in gitian-building.md\n\nTrivial typo-like fix",
      "tree": {
        "sha": "29caf85c0d4870386ac97b06efa755aadfec8f46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29caf85c0d4870386ac97b06efa755aadfec8f46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa89a54e8c207564ea7acd262e6389174feaed9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9/comments",
    "author": {
      "login": "UdjinM6",
      "id": 1935069,
      "node_id": "MDQ6VXNlcjE5MzUwNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1935069?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/UdjinM6",
      "html_url": "https://github.com/UdjinM6",
      "followers_url": "https://api.github.com/users/UdjinM6/followers",
      "following_url": "https://api.github.com/users/UdjinM6/following{/other_user}",
      "gists_url": "https://api.github.com/users/UdjinM6/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/UdjinM6/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/UdjinM6/subscriptions",
      "organizations_url": "https://api.github.com/users/UdjinM6/orgs",
      "repos_url": "https://api.github.com/users/UdjinM6/repos",
      "events_url": "https://api.github.com/users/UdjinM6/events{/privacy}",
      "received_events_url": "https://api.github.com/users/UdjinM6/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/34c61813a401be8f65ebadcc6fe2b82c1a83b28b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/34c61813a401be8f65ebadcc6fe2b82c1a83b28b"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "25d3b8390c5049fc322bd1538a881e29f83b5517",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fa89a54e8c207564ea7acd262e6389174feaed9/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fa89a54e8c207564ea7acd262e6389174feaed9/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=1fa89a54e8c207564ea7acd262e6389174feaed9",
        "patch": "@@ -326,6 +326,7 @@ At any time you can check the package installation and build progress with\n ```bash\n tail -f var/install.log\n tail -f var/build.log\n+```\n \n Output from `gbuild` will look something like\n "
      }
    ]
  },
  {
    "sha": "ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZTkzMjAyNWMxYTMxODk0M2E2YjEwMWJlOWZlN2E0YTJlMTA2NDhj",
    "commit": {
      "author": {
        "name": "bikinibabe",
        "email": "amberwelch@unomaha.edu",
        "date": "2015-01-31T20:07:55Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-01-31T22:38:28Z"
      },
      "message": "Changed pronouns for correctness and inclusivity",
      "tree": {
        "sha": "cca272581d2cb6b9bf39283f3e4ab26da032a4fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cca272581d2cb6b9bf39283f3e4ab26da032a4fc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ee932025c1a318943a6b101be9fe7a4a2e10648c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ee932025c1a318943a6b101be9fe7a4a2e10648c/comments",
    "author": {
      "login": "bikinibabe",
      "id": 10789532,
      "node_id": "MDQ6VXNlcjEwNzg5NTMy",
      "avatar_url": "https://avatars.githubusercontent.com/u/10789532?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bikinibabe",
      "html_url": "https://github.com/bikinibabe",
      "followers_url": "https://api.github.com/users/bikinibabe/followers",
      "following_url": "https://api.github.com/users/bikinibabe/following{/other_user}",
      "gists_url": "https://api.github.com/users/bikinibabe/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bikinibabe/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bikinibabe/subscriptions",
      "organizations_url": "https://api.github.com/users/bikinibabe/orgs",
      "repos_url": "https://api.github.com/users/bikinibabe/repos",
      "events_url": "https://api.github.com/users/bikinibabe/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bikinibabe/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fa89a54e8c207564ea7acd262e6389174feaed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fa89a54e8c207564ea7acd262e6389174feaed9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fa89a54e8c207564ea7acd262e6389174feaed9"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0984f689a8314e4b15c849f8bd8282793bbc0b02",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -196,7 +196,7 @@ Hardening enables the following features:\n * Position Independent Executable\n     Build position independent code to take advantage of Address Space Layout Randomization\n     offered by some kernels. An attacker who is able to cause execution of code at an arbitrary\n-    memory location is thwarted if he doesn't know where anything useful is located.\n+    memory location is thwarted if he or she doesn't know where anything useful is located.\n     The stack and heap are randomly located by default but this allows the code section to be\n     randomly located as well.\n "
      },
      {
        "sha": "3e63493dc6eb4bbbf8f484af65e6ae5067b5de9d",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -61,7 +61,7 @@ def run_test (self):\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)\n \n-        # Have node0 mine a block, thus he will collect his own fee. \n+        # Have node0 mine a block, thus they will collect their own fee. \n         self.nodes[0].setgenerate(True, 1)\n         self.sync_all()\n "
      },
      {
        "sha": "7ca825c16fcca1fcf6de283280f8897055520b45",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ee932025c1a318943a6b101be9fe7a4a2e10648c/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ee932025c1a318943a6b101be9fe7a4a2e10648c/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=ee932025c1a318943a6b101be9fe7a4a2e10648c",
        "patch": "@@ -81,7 +81,7 @@ class CCheckQueue\n                     fAllOk &= fOk;\n                     nTodo -= nNow;\n                     if (nTodo == 0 && !fMaster)\n-                        // We processed the last element; inform the master he can exit and return the result\n+                        // We processed the last element; inform the master he or she can exit and return the result\n                         condMaster.notify_one();\n                 } else {\n                     // first iteration"
      }
    ]
  }
]