[
  {
    "sha": "8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZjBiNjRmYjUxM2U4YzZjZGQxZjExNTg1NjEwMGE0ZWY1YWZlMjNl",
    "commit": {
      "author": {
        "name": "Bezdrighin",
        "email": "mbbezdri@3c22fbe8ae1b.ant.amazon.com",
        "date": "2021-01-03T00:45:25Z"
      },
      "committer": {
        "name": "Bezdrighin",
        "email": "mbbezdri@3c22fbe8ae1b.ant.amazon.com",
        "date": "2021-01-24T01:44:53Z"
      },
      "message": "Better error messages for invalid addresses\n\nThis commit addresses #20809.\n\nWe add an additional 'error' property in the result of 'validateaddress' in case the address is not valid that gives a short description of why the address in invalid. We also change the error message returned by 'getaddressinfo' in case the address is invalid.",
      "tree": {
        "sha": "25b5ca06023a3b6b633515962a952ebc94c538a0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25b5ca06023a3b6b633515962a952ebc94c538a0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "32b191fb66e644c690c94cbfdae6ddbc754769d7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32b191fb66e644c690c94cbfdae6ddbc754769d7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/32b191fb66e644c690c94cbfdae6ddbc754769d7"
      }
    ],
    "stats": {
      "total": 155,
      "additions": 141,
      "deletions": 14
    },
    "files": [
      {
        "sha": "e27673fd167a4b3f347fde62a447899b570edcdf",
        "filename": "src/key_io.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 5,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/key_io.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/key_io.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.cpp?ref=8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
        "patch": "@@ -12,6 +12,9 @@\n #include <assert.h>\n #include <string.h>\n \n+/// Maximum witness length for Bech32 addresses.\n+static constexpr std::size_t BECH32_WITNESS_PROG_MAX_LEN = 40;\n+\n namespace {\n class DestinationEncoder\n {\n@@ -65,10 +68,11 @@ class DestinationEncoder\n     std::string operator()(const CNoDestination& no) const { return {}; }\n };\n \n-CTxDestination DecodeDestination(const std::string& str, const CChainParams& params)\n+CTxDestination DecodeDestination(const std::string& str, const CChainParams& params, std::string& error_str)\n {\n     std::vector<unsigned char> data;\n     uint160 hash;\n+    error_str = \"\";\n     if (DecodeBase58Check(str, data, 21)) {\n         // base58-encoded Bitcoin addresses.\n         // Public-key-hash-addresses have version 0 (or 111 testnet).\n@@ -85,10 +89,21 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n             std::copy(data.begin() + script_prefix.size(), data.end(), hash.begin());\n             return ScriptHash(hash);\n         }\n+\n+        // Set potential error message.\n+        // This message may be changed if the address can also be interpreted as a Bech32 address.\n+        error_str = \"Invalid prefix for Base58-encoded address\";\n     }\n     data.clear();\n     auto bech = bech32::Decode(str);\n-    if (bech.second.size() > 0 && bech.first == params.Bech32HRP()) {\n+    if (bech.second.size() > 0) {\n+        error_str = \"\";\n+\n+        if (bech.first != params.Bech32HRP()) {\n+            error_str = \"Invalid prefix for Bech32 address\";\n+            return CNoDestination();\n+        }\n+\n         // Bech32 decoding\n         int version = bech.second[0]; // The first 5 bit symbol is the witness version (0-16)\n         // The rest of the symbols are converted witness program bytes.\n@@ -109,18 +124,32 @@ CTxDestination DecodeDestination(const std::string& str, const CChainParams& par\n                         return scriptid;\n                     }\n                 }\n+\n+                error_str = \"Invalid Bech32 v0 address data size\";\n+                return CNoDestination();\n+            }\n+\n+            if (version > 16) {\n+                error_str = \"Invalid Bech32 address witness version\";\n                 return CNoDestination();\n             }\n-            if (version > 16 || data.size() < 2 || data.size() > 40) {\n+\n+            if (data.size() < 2 || data.size() > BECH32_WITNESS_PROG_MAX_LEN) {\n+                error_str = \"Invalid Bech32 address data size\";\n                 return CNoDestination();\n             }\n+\n             WitnessUnknown unk;\n             unk.version = version;\n             std::copy(data.begin(), data.end(), unk.program);\n             unk.length = data.size();\n             return unk;\n         }\n     }\n+\n+    // Set error message if address can't be interpreted as Base58 or Bech32.\n+    if (error_str.empty()) error_str = \"Invalid address format\";\n+\n     return CNoDestination();\n }\n } // namespace\n@@ -208,14 +237,21 @@ std::string EncodeDestination(const CTxDestination& dest)\n     return std::visit(DestinationEncoder(Params()), dest);\n }\n \n+CTxDestination DecodeDestination(const std::string& str, std::string& error_msg)\n+{\n+    return DecodeDestination(str, Params(), error_msg);\n+}\n+\n CTxDestination DecodeDestination(const std::string& str)\n {\n-    return DecodeDestination(str, Params());\n+    std::string error_msg;\n+    return DecodeDestination(str, error_msg);\n }\n \n bool IsValidDestinationString(const std::string& str, const CChainParams& params)\n {\n-    return IsValidDestination(DecodeDestination(str, params));\n+    std::string error_msg;\n+    return IsValidDestination(DecodeDestination(str, params, error_msg));\n }\n \n bool IsValidDestinationString(const std::string& str)"
      },
      {
        "sha": "bd81f7847eba921fe7e86dace005228d04859be7",
        "filename": "src/key_io.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/key_io.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/key_io.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key_io.h?ref=8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
        "patch": "@@ -23,6 +23,7 @@ std::string EncodeExtPubKey(const CExtPubKey& extpubkey);\n \n std::string EncodeDestination(const CTxDestination& dest);\n CTxDestination DecodeDestination(const std::string& str);\n+CTxDestination DecodeDestination(const std::string& str, std::string& error_msg);\n bool IsValidDestinationString(const std::string& str);\n bool IsValidDestinationString(const std::string& str, const CChainParams& params);\n "
      },
      {
        "sha": "215e48ca267f973dc9fa9aec6b85807799f20846",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
        "patch": "@@ -39,13 +39,14 @@ static RPCHelpMan validateaddress()\n                 RPCResult{\n                     RPCResult::Type::OBJ, \"\", \"\",\n                     {\n-                        {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not. If not, this is the only property returned.\"},\n+                        {RPCResult::Type::BOOL, \"isvalid\", \"If the address is valid or not\"},\n                         {RPCResult::Type::STR, \"address\", \"The bitcoin address validated\"},\n                         {RPCResult::Type::STR_HEX, \"scriptPubKey\", \"The hex-encoded scriptPubKey generated by the address\"},\n                         {RPCResult::Type::BOOL, \"isscript\", \"If the key is a script\"},\n                         {RPCResult::Type::BOOL, \"iswitness\", \"If the address is a witness address\"},\n                         {RPCResult::Type::NUM, \"witness_version\", /* optional */ true, \"The version number of the witness program\"},\n                         {RPCResult::Type::STR_HEX, \"witness_program\", /* optional */ true, \"The hex value of the witness program\"},\n+                        {RPCResult::Type::STR, \"error\", /* optional */ true, \"Error message, if any\"},\n                     }\n                 },\n                 RPCExamples{\n@@ -54,13 +55,14 @@ static RPCHelpMan validateaddress()\n                 },\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n {\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-    bool isValid = IsValidDestination(dest);\n+    std::string error_msg;\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg);\n+    const bool isValid = IsValidDestination(dest);\n+    CHECK_NONFATAL(isValid == error_msg.empty());\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"isvalid\", isValid);\n-    if (isValid)\n-    {\n+    if (isValid) {\n         std::string currentAddress = EncodeDestination(dest);\n         ret.pushKV(\"address\", currentAddress);\n \n@@ -69,7 +71,10 @@ static RPCHelpMan validateaddress()\n \n         UniValue detail = DescribeAddress(dest);\n         ret.pushKVs(detail);\n+    } else {\n+        ret.pushKV(\"error\", error_msg);\n     }\n+\n     return ret;\n },\n     };"
      },
      {
        "sha": "b865130642222eaeb8c2511929b68218d5d0e254",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
        "patch": "@@ -3820,13 +3820,19 @@ RPCHelpMan getaddressinfo()\n \n     LOCK(pwallet->cs_wallet);\n \n-    UniValue ret(UniValue::VOBJ);\n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+    std::string error_msg;\n+    CTxDestination dest = DecodeDestination(request.params[0].get_str(), error_msg);\n+\n     // Make sure the destination is valid\n     if (!IsValidDestination(dest)) {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid address\");\n+        // Set generic error message in case 'DecodeDestination' didn't set it\n+        if (error_msg.empty()) error_msg = \"Invalid address\";\n+\n+        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error_msg);\n     }\n \n+    UniValue ret(UniValue::VOBJ);\n+\n     std::string currentAddress = EncodeDestination(dest);\n     ret.pushKV(\"address\", currentAddress);\n "
      },
      {
        "sha": "469d6bdb05e221ee8f27ed6ebf6811a7448563a3",
        "filename": "test/functional/rpc_invalid_address_message.py",
        "status": "added",
        "additions": 78,
        "deletions": 0,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/test/functional/rpc_invalid_address_message.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/test/functional/rpc_invalid_address_message.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_invalid_address_message.py?ref=8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
        "patch": "@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2020 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test error messages for 'getaddressinfo' and 'validateaddress' RPC commands.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+)\n+\n+BECH32_VALID = 'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv'\n+BECH32_INVALID_SIZE = 'bcrt1sqqpl9r5c'\n+BECH32_INVALID_PREFIX = 'bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kv8f3t4'\n+\n+BASE58_VALID = 'mipcBbFg9gMiCh81Kj8tqqdgoZub1ZJRfn'\n+BASE58_INVALID_PREFIX = '17VZNX1SN5NtKa8UQFxwQbFeFc3iqRYhem'\n+\n+INVALID_ADDRESS = 'asfah14i8fajz0123f'\n+\n+class InvalidAddressErrorMessageTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_validateaddress(self):\n+        node = self.nodes[0]\n+\n+        # Bech32\n+        info = node.validateaddress(BECH32_INVALID_SIZE)\n+        assert not info['isvalid']\n+        assert_equal(info['error'], 'Invalid Bech32 address data size')\n+\n+        info = node.validateaddress(BECH32_INVALID_PREFIX)\n+        assert not info['isvalid']\n+        assert_equal(info['error'], 'Invalid prefix for Bech32 address')\n+\n+        info = node.validateaddress(BECH32_VALID)\n+        assert info['isvalid']\n+        assert 'error' not in info\n+\n+        # Base58\n+        info = node.validateaddress(BASE58_INVALID_PREFIX)\n+        assert not info['isvalid']\n+        assert_equal(info['error'], 'Invalid prefix for Base58-encoded address')\n+\n+        info = node.validateaddress(BASE58_VALID)\n+        assert info['isvalid']\n+        assert 'error' not in info\n+\n+        # Invalid address format\n+        info = node.validateaddress(INVALID_ADDRESS)\n+        assert not info['isvalid']\n+        assert_equal(info['error'], 'Invalid address format')\n+\n+    def test_getaddressinfo(self):\n+        node = self.nodes[0]\n+\n+        assert_raises_rpc_error(-5, \"Invalid Bech32 address data size\", node.getaddressinfo, BECH32_INVALID_SIZE)\n+\n+        assert_raises_rpc_error(-5, \"Invalid prefix for Bech32 address\", node.getaddressinfo, BECH32_INVALID_PREFIX)\n+\n+        assert_raises_rpc_error(-5, \"Invalid prefix for Base58-encoded address\", node.getaddressinfo, BASE58_INVALID_PREFIX)\n+\n+        assert_raises_rpc_error(-5, \"Invalid address format\", node.getaddressinfo, INVALID_ADDRESS)\n+\n+    def run_test(self):\n+        self.test_validateaddress()\n+        self.test_getaddressinfo()\n+\n+\n+if __name__ == '__main__':\n+    InvalidAddressErrorMessageTest().main()"
      },
      {
        "sha": "898d4bfe1705b65c8097d36aff31a37dce808098",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
        "patch": "@@ -134,6 +134,7 @@\n     'wallet_keypool_topup.py --descriptors',\n     'feature_fee_estimation.py',\n     'interface_zmq.py',\n+    'rpc_invalid_address_message.py',\n     'interface_bitcoin_cli.py',\n     'mempool_resurrect.py',\n     'wallet_txn_doublespend.py --mineblock',"
      },
      {
        "sha": "4a589f03933f0fd12b09900f9b146a4519850922",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8f0b64fb513e8c6cdd1f115856100a4ef5afe23e/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=8f0b64fb513e8c6cdd1f115856100a4ef5afe23e",
        "patch": "@@ -586,7 +586,7 @@ def run_test(self):\n         assert_equal(total_txs, len(self.nodes[0].listtransactions(\"*\", 99999)))\n \n         # Test getaddressinfo on external address. Note that these addresses are taken from disablewallet.py\n-        assert_raises_rpc_error(-5, \"Invalid address\", self.nodes[0].getaddressinfo, \"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy\")\n+        assert_raises_rpc_error(-5, \"Invalid prefix for Base58-encoded address\", self.nodes[0].getaddressinfo, \"3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy\")\n         address_info = self.nodes[0].getaddressinfo(\"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n         assert_equal(address_info['address'], \"mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ\")\n         assert_equal(address_info[\"scriptPubKey\"], \"76a9144e3854046c7bd1594ac904e4793b6a45b36dea0988ac\")"
      }
    ]
  }
]