[
  {
    "sha": "fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQ4ODljYmYwYjZjNDZkYTJlMTEwYjczY2JlYTU1ZTRmZjc5NTFl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-11T14:23:26Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-11T16:38:36Z"
      },
      "message": "wallet: Make RPC help compile-time static",
      "tree": {
        "sha": "d34d78a7431636291c09f8d9806adce172f6f531",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d34d78a7431636291c09f8d9806adce172f6f531"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjOGAwAiunhfowcpm1C49PFa3LRx5bKlIR23axhe51nX4LmHwNfBtRc3ddsBQrZ\nMaeQvSypOVKaj69/8ipI1SkqWGYxXL4lQM8j82TIToSi90czyNMnv+qWip956gY+\nsGuOKFZfdfwiWBzH6nClyaZkAYUOQymNtfJkfMYKaVcD8jfbokA6h1I1DZn0u5kZ\nJ4YfBtvNJMlaEkY18TlRfx5Q4rMhT1UZQk2yvNFNisW6EGpb6EyxmJzJyKLkcOXd\nuN+z0kl6kXyJIqiOUPSUW+ktgd72Lm2LACWXMmArG4d/eG07n/l8ZFBqoqvIrOov\nrwA1ZLZWrRsOca+8K4TBod7MFxqN6EF2ERzUWwhAKx81KEIL78YrwF1VTsF4gCZ/\npfekWR0tMpGe0hIIqO9UfWMca65A8KBphAf4KY5NNk2eyYzJQjj0PbQY8lbhafyK\nnEhjs35blJvaCRtJyJiReo2Q1TeQObmBUmqvYqgi1aJS03d1r0VEHJOwZI1f5B15\nIWwhkOwd\n=+PnM\n-----END PGP SIGNATURE-----",
        "payload": "tree d34d78a7431636291c09f8d9806adce172f6f531\nparent 7a24cca82906e4ee1e082c8f4563fb873170532c\nauthor MarcoFalke <falke.marco@gmail.com> 1591885406 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1591893516 -0400\n\nwallet: Make RPC help compile-time static\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad889cbf0b6c46da2e110b73cbea55e4ff7951e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7a24cca82906e4ee1e082c8f4563fb873170532c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a24cca82906e4ee1e082c8f4563fb873170532c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a24cca82906e4ee1e082c8f4563fb873170532c"
      }
    ],
    "stats": {
      "total": 430,
      "additions": 218,
      "deletions": 212
    },
    "files": [
      {
        "sha": "d9fe741a6e879c2ebe1611cb1af8e50236300a9f",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 45,
        "changes": 89,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad889cbf0b6c46da2e110b73cbea55e4ff7951e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad889cbf0b6c46da2e110b73cbea55e4ff7951e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
        "patch": "@@ -92,10 +92,6 @@ static void RescanWallet(CWallet& wallet, const WalletRescanReserver& reserver,\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"importprivkey\",\n                 \"\\nAdds a private key (as returned by dumpprivkey) to your wallet. Requires a new wallet backup.\\n\"\n                 \"Hint: use importmulti to import more than one private key.\\n\"\n@@ -122,6 +118,10 @@ UniValue importprivkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n     }\n@@ -193,10 +193,6 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n UniValue abortrescan(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"abortrescan\",\n                 \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n@@ -212,17 +208,17 @@ UniValue abortrescan(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     if (!pwallet->IsScanning() || pwallet->IsAbortingRescan()) return false;\n     pwallet->AbortRescan();\n     return true;\n }\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"importaddress\",\n                 \"\\nAdds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n             \"\\nNote: This call can take over an hour to complete if rescan is true, during that time, other rpc calls\\n\"\n@@ -249,6 +245,10 @@ UniValue importaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     std::string strLabel;\n@@ -319,10 +319,6 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"importprunedfunds\",\n                 \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\",\n                 {\n@@ -333,6 +329,10 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     CMutableTransaction tx;\n     if (!DecodeHexTx(tx, request.params[0].get_str()))\n         throw JSONRPCError(RPC_DESERIALIZATION_ERROR, \"TX decode failed\");\n@@ -375,10 +375,6 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"removeprunedfunds\",\n                 \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\",\n                 {\n@@ -392,6 +388,10 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n@@ -412,10 +412,6 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"importpubkey\",\n                 \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend. Requires a new wallet backup.\\n\"\n                 \"Hint: use importmulti to import more than one public key.\\n\"\n@@ -438,6 +434,10 @@ UniValue importpubkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n     std::string strLabel;\n@@ -497,10 +497,6 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"importwallet\",\n                 \"\\nImports keys from a wallet dump file (see dumpwallet). Requires a new wallet backup to include imported keys.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n@@ -518,6 +514,10 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     EnsureLegacyScriptPubKeyMan(*wallet, true);\n \n     if (pwallet->chain().havePruned()) {\n@@ -653,10 +653,6 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"dumpprivkey\",\n                 \"\\nReveals the private key corresponding to 'address'.\\n\"\n                 \"Then the importprivkey can be used with this output\\n\",\n@@ -673,6 +669,10 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*wallet);\n \n     LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n@@ -698,9 +698,6 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n             RPCHelpMan{\"dumpwallet\",\n                 \"\\nDumps all wallet keys in a human-readable format to a server-side file. This does not allow overwriting existing files.\\n\"\n                 \"Imported scripts are included in the dumpfile, but corresponding BIP173 addresses, etc. may not be added automatically by importwallet.\\n\"\n@@ -721,6 +718,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n     CWallet& wallet = *pwallet;\n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(wallet);\n \n@@ -1241,10 +1241,6 @@ static int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n \n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"importmulti\",\n                 \"\\nImport addresses/scripts (with private or public keys, redeem script (P2SH)), optionally rescanning the blockchain from the earliest creation time of the imported scripts. Requires a new wallet backup.\\n\"\n                 \"If an address/script is imported without all of the private keys required to spend from that address, it will be watchonly. The 'watchonly' option must be set to true in this case or a warning will be returned.\\n\"\n@@ -1320,6 +1316,9 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                 },\n             }.Check(mainRequest);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(mainRequest);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n \n     RPCTypeCheck(mainRequest.params, {UniValue::VARR, UniValue::VOBJ});\n \n@@ -1565,12 +1564,8 @@ static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue&\n     return result;\n }\n \n-UniValue importdescriptors(const JSONRPCRequest& main_request) {\n-    // Acquire the wallet\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n+UniValue importdescriptors(const JSONRPCRequest& main_request)\n+{\n             RPCHelpMan{\"importdescriptors\",\n                 \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n             \"\\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\\n\"\n@@ -1622,6 +1617,10 @@ UniValue importdescriptors(const JSONRPCRequest& main_request) {\n                 },\n             }.Check(main_request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     //  Make sure wallet is a descriptor wallet\n     if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"importdescriptors is not available for non-descriptor wallets\");"
      },
      {
        "sha": "a4120c45e023cb85316e4e8a3c59d27c0cea84f1",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 167,
        "deletions": 167,
        "changes": 334,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad889cbf0b6c46da2e110b73cbea55e4ff7951e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad889cbf0b6c46da2e110b73cbea55e4ff7951e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
        "patch": "@@ -194,10 +194,6 @@ static std::string LabelFromValue(const UniValue& value)\n \n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getnewaddress\",\n                 \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n                 \"If 'label' is specified, it is added to the address book \\n\"\n@@ -215,6 +211,10 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses()) {\n@@ -244,10 +244,6 @@ static UniValue getnewaddress(const JSONRPCRequest& request)\n \n static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getrawchangeaddress\",\n                 \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n                 \"This is for use with raw transactions, NOT normal use.\\n\",\n@@ -263,6 +259,10 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->CanGetAddresses(true)) {\n@@ -287,10 +287,6 @@ static UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n static UniValue setlabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"setlabel\",\n                 \"\\nSets the label associated with the given address.\\n\",\n                 {\n@@ -304,6 +300,10 @@ static UniValue setlabel(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     CTxDestination dest = DecodeDestination(request.params[0].get_str());\n@@ -356,10 +356,6 @@ static CTransactionRef SendMoney(CWallet* const pwallet, const CTxDestination& a\n \n static UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"sendtoaddress\",\n                 \"\\nSend an amount to a given address.\" +\n         HELP_REQUIRING_PASSPHRASE,\n@@ -393,6 +389,10 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -448,10 +448,6 @@ static UniValue sendtoaddress(const JSONRPCRequest& request)\n \n static UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"listaddressgroupings\",\n                 \"\\nLists groups of addresses which have had their common ownership\\n\"\n                 \"made public by common use as inputs or as the resulting change\\n\"\n@@ -477,6 +473,10 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -507,10 +507,6 @@ static UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n static UniValue signmessage(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"signmessage\",\n                 \"\\nSign a message with the private key of an address\" +\n         HELP_REQUIRING_PASSPHRASE,\n@@ -533,6 +529,10 @@ static UniValue signmessage(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     EnsureWalletIsUnlocked(pwallet);\n@@ -609,10 +609,6 @@ static CAmount GetReceived(const CWallet& wallet, const UniValue& params, bool b\n \n static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getreceivedbyaddress\",\n                 \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\",\n                 {\n@@ -634,6 +630,10 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -646,10 +646,6 @@ static UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getreceivedbylabel\",\n                 \"\\nReturns the total amount received by addresses with <label> in transactions with at least [minconf] confirmations.\\n\",\n                 {\n@@ -671,6 +667,10 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -683,10 +683,6 @@ static UniValue getreceivedbylabel(const JSONRPCRequest& request)\n \n static UniValue getbalance(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getbalance\",\n                 \"\\nReturns the total available balance.\\n\"\n                 \"The available balance is what the wallet considers currently spendable, and is\\n\"\n@@ -710,6 +706,10 @@ static UniValue getbalance(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -737,17 +737,17 @@ static UniValue getbalance(const JSONRPCRequest& request)\n \n static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getunconfirmedbalance\",\n                 \"DEPRECATED\\nIdentical to getbalances().mine.untrusted_pending\\n\",\n                 {},\n                 RPCResult{RPCResult::Type::NUM, \"\", \"The balance\"},\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -760,10 +760,6 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n static UniValue sendmany(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n     RPCHelpMan{\"sendmany\",\n                 \"\\nSend multiple times. Amounts are double-precision floating point numbers.\" +\n         HELP_REQUIRING_PASSPHRASE,\n@@ -807,6 +803,10 @@ static UniValue sendmany(const JSONRPCRequest& request)\n                 },\n     }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -891,10 +891,6 @@ static UniValue sendmany(const JSONRPCRequest& request)\n \n static UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"addmultisigaddress\",\n                 \"\\nAdd an nrequired-to-sign multisignature address to the wallet. Requires a new wallet backup.\\n\"\n                 \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n@@ -927,6 +923,10 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet);\n \n     LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n@@ -1130,10 +1130,6 @@ static UniValue ListReceived(const CWallet* const pwallet, const UniValue& param\n \n static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"listreceivedbyaddress\",\n                 \"\\nList balances by receiving address.\\n\",\n                 {\n@@ -1167,6 +1163,10 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -1178,10 +1178,6 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"listreceivedbylabel\",\n                 \"\\nList received transactions by label.\\n\",\n                 {\n@@ -1208,6 +1204,10 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -1336,10 +1336,6 @@ static const std::vector<RPCResult> TransactionDescriptionString()\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"listtransactions\",\n                 \"\\nIf a label name is provided, this will return only incoming transactions paying to addresses with the specified label.\\n\"\n                 \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions.\\n\",\n@@ -1387,6 +1383,10 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -1446,9 +1446,6 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n-    if (!pwallet) return NullUniValue;\n-\n             RPCHelpMan{\"listsinceblock\",\n                 \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted.\\n\"\n                 \"If \\\"blockhash\\\" is no longer a part of the main chain, transactions from the fork point onward are included.\\n\"\n@@ -1502,6 +1499,9 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!pwallet) return NullUniValue;\n+\n     const CWallet& wallet = *pwallet;\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n@@ -1584,10 +1584,6 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n \n static UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"gettransaction\",\n                 \"\\nGet detailed information about in-wallet transaction <txid>\\n\",\n                 {\n@@ -1642,6 +1638,10 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -1694,10 +1694,6 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n \n static UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"abandontransaction\",\n                 \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n                 \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n@@ -1714,6 +1710,10 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -1735,10 +1735,6 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n \n static UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"backupwallet\",\n                 \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\",\n                 {\n@@ -1751,6 +1747,10 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -1768,10 +1768,6 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n \n static UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"keypoolrefill\",\n                 \"\\nFills the keypool.\"+\n         HELP_REQUIRING_PASSPHRASE,\n@@ -1785,6 +1781,10 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     if (pwallet->IsLegacy() && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n@@ -1812,10 +1812,6 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n \n static UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"walletpassphrase\",\n                 \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n                 \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n@@ -1837,6 +1833,10 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     int64_t nSleepTime;\n     int64_t relock_time;\n     // Prevent concurrent calls to walletpassphrase with the same wallet.\n@@ -1906,10 +1906,6 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n \n static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"walletpassphrasechange\",\n                 \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\",\n                 {\n@@ -1923,6 +1919,10 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->IsCrypted()) {\n@@ -1953,10 +1953,6 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n static UniValue walletlock(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"walletlock\",\n                 \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n                 \"After calling this method, you will need to call walletpassphrase again\\n\"\n@@ -1975,6 +1971,10 @@ static UniValue walletlock(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     if (!pwallet->IsCrypted()) {\n@@ -1990,10 +1990,6 @@ static UniValue walletlock(const JSONRPCRequest& request)\n \n static UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"encryptwallet\",\n                 \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n                 \"After this, any calls that interact with private keys such as sending or signing \\n\"\n@@ -2018,6 +2014,10 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n@@ -2047,10 +2047,6 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n \n static UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"lockunspent\",\n                 \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n                 \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n@@ -2089,6 +2085,10 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -2170,10 +2170,6 @@ static UniValue lockunspent(const JSONRPCRequest& request)\n \n static UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"listlockunspent\",\n                 \"\\nReturns list of temporarily unspendable outputs.\\n\"\n                 \"See the lockunspent call to lock and unlock transactions for spending.\\n\",\n@@ -2202,6 +2198,10 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     std::vector<COutPoint> vOutpts;\n@@ -2222,10 +2222,6 @@ static UniValue listlockunspent(const JSONRPCRequest& request)\n \n static UniValue settxfee(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"settxfee\",\n                 \"\\nSet the transaction fee per kB for this wallet. Overrides the global -paytxfee command line parameter.\\n\"\n                 \"Can be deactivated by passing 0 as the fee. In that case automatic fee selection will be used by default.\\n\",\n@@ -2241,6 +2237,10 @@ static UniValue settxfee(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     CAmount nAmount = AmountFromValue(request.params[0]);\n@@ -2262,10 +2262,6 @@ static UniValue settxfee(const JSONRPCRequest& request)\n \n static UniValue getbalances(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n-    if (!rpc_wallet) return NullUniValue;\n-    CWallet& wallet = *rpc_wallet;\n-\n     RPCHelpMan{\n         \"getbalances\",\n         \"Returns an object with all balances in \" + CURRENCY_UNIT + \".\\n\",\n@@ -2293,6 +2289,10 @@ static UniValue getbalances(const JSONRPCRequest& request)\n             HelpExampleRpc(\"getbalances\", \"\")},\n     }.Check(request);\n \n+    std::shared_ptr<CWallet> const rpc_wallet = GetWalletForJSONRPCRequest(request);\n+    if (!rpc_wallet) return NullUniValue;\n+    CWallet& wallet = *rpc_wallet;\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     wallet.BlockUntilSyncedToCurrentChain();\n@@ -2327,10 +2327,6 @@ static UniValue getbalances(const JSONRPCRequest& request)\n \n static UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n     RPCHelpMan{\"getwalletinfo\",\n                 \"Returns an object containing various wallet state info.\\n\",\n                 {},\n@@ -2366,6 +2362,10 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                 },\n     }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n     pwallet->BlockUntilSyncedToCurrentChain();\n@@ -2529,10 +2529,6 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n static UniValue setwalletflag(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             std::string flags = \"\";\n             for (auto& it : WALLET_FLAG_MAP)\n                 if (it.second & MUTABLE_WALLET_FLAGS)\n@@ -2557,6 +2553,10 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     std::string flag_str = request.params[0].get_str();\n     bool value = request.params[1].isNull() || request.params[1].get_bool();\n \n@@ -2709,10 +2709,6 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n \n static UniValue listunspent(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n     RPCHelpMan{\n                 \"listunspent\",\n                 \"\\nReturns array of unspent transaction outputs\\n\"\n@@ -2770,6 +2766,10 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     int nMinDepth = 1;\n     if (!request.params[0].isNull()) {\n         RPCTypeCheckArgument(request.params[0], UniValue::VNUM);\n@@ -3039,10 +3039,6 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n \n static UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n     RPCHelpMan{\"fundrawtransaction\",\n                 \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                 \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n@@ -3112,6 +3108,10 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                                 },\n     }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValueType(), UniValue::VBOOL});\n \n     // parse hex string from parameter\n@@ -3136,10 +3136,6 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"signrawtransactionwithwallet\",\n                 \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n                 \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n@@ -3193,6 +3189,10 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VARR, UniValue::VSTR}, true);\n \n     CMutableTransaction mtx;\n@@ -3227,10 +3227,6 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n static UniValue bumpfee(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"bumpfee\",\n                 \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n                 \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n@@ -3282,6 +3278,10 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VOBJ});\n     uint256 hash(ParseHashV(request.params[0], \"txid\"));\n \n@@ -3396,10 +3396,6 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n UniValue rescanblockchain(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"rescanblockchain\",\n                 \"\\nRescan the local blockchain for wallet related transactions.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n@@ -3420,6 +3416,10 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     WalletRescanReserver reserver(*pwallet);\n     if (!reserver.reserve()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n@@ -3592,10 +3592,6 @@ static UniValue AddressBookDataToJSON(const CAddressBookData& data, const bool v\n \n UniValue getaddressinfo(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getaddressinfo\",\n                 \"\\nReturn information about the given bitcoin address.\\n\"\n                 \"Some of the information will only be present if the address is in the active wallet.\\n\",\n@@ -3656,6 +3652,10 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     UniValue ret(UniValue::VOBJ);\n@@ -3732,10 +3732,6 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"getaddressesbylabel\",\n                 \"\\nReturns the list of addresses assigned the specified label.\\n\",\n                 {\n@@ -3756,6 +3752,10 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     std::string label = LabelFromValue(request.params[0]);\n@@ -3789,10 +3789,6 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n \n static UniValue listlabels(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"listlabels\",\n                 \"\\nReturns the list of all labels, or labels that are assigned to addresses with a specific purpose.\\n\",\n                 {\n@@ -3816,6 +3812,10 @@ static UniValue listlabels(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     LOCK(pwallet->cs_wallet);\n \n     std::string purpose;\n@@ -3842,10 +3842,6 @@ static UniValue listlabels(const JSONRPCRequest& request)\n \n UniValue sethdseed(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"sethdseed\",\n                 \"\\nSet or generate a new HD wallet seed. Non-HD wallets will not be upgraded to being a HD wallet. Wallets that are already\\n\"\n                 \"HD will have a new HD seed set so that new keys added to the keypool will be derived from this new seed.\\n\"\n@@ -3868,6 +3864,10 @@ UniValue sethdseed(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*pwallet, true);\n \n     if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n@@ -3912,10 +3912,6 @@ UniValue sethdseed(const JSONRPCRequest& request)\n \n UniValue walletprocesspsbt(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    const CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"walletprocesspsbt\",\n                 \"\\nUpdate a PSBT with input information from our wallet and then sign inputs\\n\"\n                 \"that we can sign for.\" +\n@@ -3944,6 +3940,10 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    const CWallet* const pwallet = wallet.get();\n+\n     RPCTypeCheck(request.params, {UniValue::VSTR, UniValue::VBOOL, UniValue::VSTR});\n \n     // Unserialize the transaction\n@@ -3976,10 +3976,6 @@ UniValue walletprocesspsbt(const JSONRPCRequest& request)\n \n UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n             RPCHelpMan{\"walletcreatefundedpsbt\",\n                 \"\\nCreates and funds a transaction in the Partially Signed Transaction format. Inputs will be added if supplied inputs are not enough\\n\"\n                 \"Implements the Creator and Updater roles.\\n\",\n@@ -4054,6 +4050,10 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                                 },\n                             }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     RPCTypeCheck(request.params, {\n         UniValue::VARR,\n         UniValueType(), // ARR or OBJ, checked later\n@@ -4098,10 +4098,6 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n \n static UniValue upgradewallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    if (!wallet) return NullUniValue;\n-    CWallet* const pwallet = wallet.get();\n-\n     RPCHelpMan{\"upgradewallet\",\n         \"\\nUpgrade the wallet. Upgrades to the latest version if no version number is specified\\n\"\n         \"New keys may be generated and a new wallet backup will need to be made.\",\n@@ -4115,6 +4111,10 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n         }\n     }.Check(request);\n \n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n+    if (!wallet) return NullUniValue;\n+    CWallet* const pwallet = wallet.get();\n+\n     RPCTypeCheck(request.params, {UniValue::VNUM}, true);\n \n     EnsureWalletIsUnlocked(pwallet);"
      },
      {
        "sha": "9b981b864eeb2836d5888495b16512159b8c6a55",
        "filename": "test/functional/rpc_help.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad889cbf0b6c46da2e110b73cbea55e4ff7951e/test/functional/rpc_help.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad889cbf0b6c46da2e110b73cbea55e4ff7951e/test/functional/rpc_help.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_help.py?ref=fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
        "patch": "@@ -18,6 +18,8 @@ def set_test_params(self):\n     def run_test(self):\n         self.test_categories()\n         self.dump_help()\n+        if self.is_wallet_compiled():\n+            self.wallet_help()\n \n     def test_categories(self):\n         node = self.nodes[0]\n@@ -53,6 +55,11 @@ def dump_help(self):\n                 # Make sure the node can generate the help at runtime without crashing\n                 f.write(self.nodes[0].help(call))\n \n+    def wallet_help(self):\n+        assert 'getnewaddress ( \"label\" \"address_type\" )' in self.nodes[0].help('getnewaddress')\n+        self.restart_node(0, extra_args=['-nowallet=1'])\n+        assert 'getnewaddress ( \"label\" \"address_type\" )' in self.nodes[0].help('getnewaddress')\n+\n \n if __name__ == '__main__':\n     HelpRpcTest().main()"
      }
    ]
  },
  {
    "sha": "fadf6bd04f002d05aaff8eba74015e25a41966bc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRmNmJkMDRmMDAyZDA1YWFmZjhlYmE3NDAxNWUyNWE0MTk2NmJj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-11T14:35:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-06-11T16:39:22Z"
      },
      "message": "refactor: Remove unused request.fHelp",
      "tree": {
        "sha": "3cda0d6081bbbe2f4be5b230572ea1e2766e3b32",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3cda0d6081bbbe2f4be5b230572ea1e2766e3b32"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadf6bd04f002d05aaff8eba74015e25a41966bc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUidVAv/elWrhBIt+v/QJCXpaWjY9bl8CsOnw5K444y2VV58AtzKUXqaGVI5OM42\nW152E0oIhMHScnvJHDHR0e1S1Z7qArqEa4EeUD+C5HtULj+PlG2yR/EXn4uAjJnS\ncuJqZ6kUY1h3iagreCAYHlBe+rSgjaUxhNyj9+D9YvZTDara/gjXlMnvBdjbLZ+p\nk7ncIHNszTF+XVzjo1spRfmv4CbgZnYiTq80wMtfAGCp0WRJRP5LSpv19KtYcQ0A\n2d3QyYgE93qldv5CEF7YO7wQVgqLuRW4/PFNE15YNpbzNLMZ4FoAX9FmBqWPgGuW\nLZNPsy74o7E5adooNS92iYJxyn5vMnQr83zZRg0hrA1vljR80lKFLT67lWzgtW+d\nPbXnViJCKizv/tuNFJMpbhoBoM+ItbV1XkFiD2xmLYqBZBDBAX8wJgmE9+SFrDFk\n621kXPELXAbIlYTYtTlFVieEtuRMJYD7V/mFLEhU2ntlstP99KCKYM4Oer+N8O1n\nT6NztMlO\n=UnNu\n-----END PGP SIGNATURE-----",
        "payload": "tree 3cda0d6081bbbe2f4be5b230572ea1e2766e3b32\nparent fad889cbf0b6c46da2e110b73cbea55e4ff7951e\nauthor MarcoFalke <falke.marco@gmail.com> 1591886113 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1591893562 -0400\n\nrefactor: Remove unused request.fHelp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadf6bd04f002d05aaff8eba74015e25a41966bc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadf6bd04f002d05aaff8eba74015e25a41966bc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadf6bd04f002d05aaff8eba74015e25a41966bc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad889cbf0b6c46da2e110b73cbea55e4ff7951e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad889cbf0b6c46da2e110b73cbea55e4ff7951e"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0907f2aabd635b3d60ab2dcf21cfb6d8ea49090c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadf6bd04f002d05aaff8eba74015e25a41966bc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadf6bd04f002d05aaff8eba74015e25a41966bc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fadf6bd04f002d05aaff8eba74015e25a41966bc",
        "patch": "@@ -93,6 +93,7 @@ bool GetWalletNameFromJSONRPCRequest(const JSONRPCRequest& request, std::string&\n \n std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n {\n+    CHECK_NONFATAL(!request.fHelp);\n     std::string wallet_name;\n     if (GetWalletNameFromJSONRPCRequest(request, wallet_name)) {\n         std::shared_ptr<CWallet> pwallet = GetWallet(wallet_name);\n@@ -101,12 +102,10 @@ std::shared_ptr<CWallet> GetWalletForJSONRPCRequest(const JSONRPCRequest& reques\n     }\n \n     std::vector<std::shared_ptr<CWallet>> wallets = GetWallets();\n-    if (wallets.size() == 1 || (request.fHelp && wallets.size() > 0)) {\n+    if (wallets.size() == 1) {\n         return wallets[0];\n     }\n \n-    if (request.fHelp) return nullptr;\n-\n     if (!HasWallets()) {\n         throw JSONRPCError(\n             RPC_METHOD_NOT_FOUND, \"Method not found (wallet method is disabled because no wallet is loaded)\");"
      }
    ]
  }
]