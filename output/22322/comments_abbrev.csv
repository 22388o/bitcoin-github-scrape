jonatack,2021-06-23 11:00:44,"Concept ACK, good idea.",https://github.com/bitcoin/bitcoin/pull/22322#issuecomment-866740351,866740351,
MarcoFalke,2021-06-24 10:05:01,Addressed feedback,https://github.com/bitcoin/bitcoin/pull/22322#issuecomment-867511027,867511027,
jonatack,2021-06-24 13:42:55,"Thanks for updating.\n\nTested ACK fa57878340e6e9e34b01e26091d9d57f1c26f771",https://github.com/bitcoin/bitcoin/pull/22322#issuecomment-867647317,867647317,
practicalswift,2021-06-25 06:14:49,cr ACK fa485d06ec10acd9a791f8d29689e1e82591fb70,https://github.com/bitcoin/bitcoin/pull/22322#issuecomment-868252392,868252392,
jonatack,2021-06-23 13:21:01,"proposed docs if you like\n```diff\n-        BanMan ban_man{banlist_file, nullptr, offset};\n+        BanMan ban_man{banlist_file, /* client_interface */ nullptr, /* default_ban_time */ offset};\n         while (--limit_max_ops >= 0 && fuzzed_data_provider.ConsumeBool()) {\n             CallOneOf(\n                 fuzzed_data_provider,\n@@ -100,15 +100,15 @@ FUZZ_TARGET_INIT(banman, initia",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657092084,657092084,src/test/fuzz/banman.cpp
vasild,2021-06-23 15:41:42,"Unrelated to this PR, why is this called ""offset""? It is actually ""ban_time"" - number of seconds to keep the ban entry after the misbehavior occurred.\n\n~~There is some ""offset"" involved in `BanMan::Ban()`, but that is completely internal to `BanMan`.~~",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657233544,657233544,src/test/fuzz/banman.cpp
vasild,2021-06-23 15:49:44,"The dumped data may end up containing more entries than `banmap` and `banmap_read` because `SweepBanned()` may leave them when called from `DumpBanlist()` but when called from `GetBanned()` after `SetMockTime()` it may remove ""expired"" entries.\n\nIt is ok since both `banmap` and `banmap_read` will contain the same, but if somebody ends up debugging this and looking at the file, then it may be c",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657241603,657241603,src/test/fuzz/banman.cpp
vasild,2021-06-23 15:57:17,"This may brick if `banmap_t` is changed from `std::map` to `std::unordered_map`. It should be changed because the latter is faster and we don't need an order into this container.\n\nMaybe add something like `static_assert(std::is_base_of<std::map, banmap_t>::value)` to ensure this gets adjusted if `banmap_t` is changed in the future?\n\nOr a slower, but more robust variant: for each entry in `",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657248949,657248949,src/test/fuzz/banman.cpp
MarcoFalke,2021-06-23 16:42:15,This was done on purpose to check `SweepBanned` is called on read,https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657283978,657283978,src/test/fuzz/banman.cpp
vasild,2021-06-24 07:28:20,"The 3rd argument `offset` is only used by `BanMan::Ban()` which we never call on `ban_man_read`. So this can be \n```suggestion\n            BanMan ban_man_read{banlist_file, nullptr, 0};\n```\nand then the `offset` variable is not necessary.",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657694907,657694907,src/test/fuzz/banman.cpp
vasild,2021-06-24 07:53:41,"Hmm, then maybe add one entry that will certainly expire? This will also make the intention more explicit:\n\n```diff\ndiff --git i/src/test/fuzz/banman.cpp w/src/test/fuzz/banman.cpp\nindex 6aa95b484f..b3b10da084 100644\n--- i/src/test/fuzz/banman.cpp\n+++ w/src/test/fuzz/banman.cpp\n@@ -93,16 +93,23 @@ FUZZ_TARGET_INIT(banman, initialize_banman)\n                 },\n                 [&",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657712467,657712467,src/test/fuzz/banman.cpp
vasild,2021-06-24 08:03:22,"```diff\n             assert(banmap.size() == banmap_read.size());\n-            auto it1{banmap.begin()};\n-            auto it2{banmap_read.begin()};\n-            for (; it1 != banmap.end(); ++it1, ++it2) {\n-                assert(it1->first == it2->first);\n-                assert(it1->second.ToJson().write() == it2->second.ToJson().write());\n+            for (const auto& [subnet, ban",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657719745,657719745,src/test/fuzz/banman.cpp
vasild,2021-06-24 08:18:55,"Or even better:\n```diff\ndiff --git i/src/test/fuzz/banman.cpp w/src/test/fuzz/banman.cpp\nindex 6aa95b484f..15ccd9df3c 100644\n--- i/src/test/fuzz/banman.cpp\n+++ w/src/test/fuzz/banman.cpp\n@@ -29,12 +29,18 @@ int64_t ConsumeBanTimeOffset(FuzzedDataProvider& fuzzed_data_provider) noexcept\n \n void initialize_banman()\n {\n     static const auto testing_setup = MakeNoLogFileContext<>(",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657731261,657731261,src/test/fuzz/banman.cpp
MarcoFalke,2021-06-24 10:04:01,"Thanks, added comments",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657810116,657810116,src/test/fuzz/banman.cpp
MarcoFalke,2021-06-24 10:04:17,Removed `offset`,https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657810294,657810294,src/test/fuzz/banman.cpp
MarcoFalke,2021-06-24 10:04:40,Made it a compile failure to change the type without touching this file,https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657810548,657810548,src/test/fuzz/banman.cpp
MarcoFalke,2021-06-24 10:04:49,"Thanks, done",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657810658,657810658,src/test/fuzz/banman.cpp
vasild,2021-06-24 10:32:53,This is now addressed in another way. Just out of curiosity - why not the `assert(banmap_read == banmap);` variant? It is shorter and works for both `map` and `unordered_map`.,https://github.com/bitcoin/bitcoin/pull/22322#discussion_r657828550,657828550,src/test/fuzz/banman.cpp
hebasto,2021-08-06 13:48:56,"Errors in CI job (https://cirrus-ci.com/task/6055643191705600?logs=ci#L2769):\n```\nfuzz: test/fuzz/banman.cpp:112: void banman_fuzz_target(FuzzBufferType): Assertion `banmap == banmap_read' failed.\n```",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r684250327,684250327,src/test/fuzz/banman.cpp
vasild,2021-08-06 14:28:20,"Is there a way to retrieve `./crash-0671aac15e619e99522e2119487eaa9cc97e5a34` from the CI machine or make the fuzzer print it in base64?\n\nLatest `master` (d67330d11245b11fbdd5e2dd5343ee451186931e) has been changed to:\n\nhttps://github.com/bitcoin/bitcoin/blob/d67330d11245b11fbdd5e2dd5343ee451186931e/src/test/fuzz/banman.cpp#L111-L113",https://github.com/bitcoin/bitcoin/pull/22322#discussion_r684279440,684279440,src/test/fuzz/banman.cpp
