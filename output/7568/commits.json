[
  {
    "sha": "580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODBhYWEzNmEwZjQyNGI4ZDdhZjE3ZWQ2YmMyYzZlNDhmZWJkODQy",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2016-02-20T18:17:14Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2016-02-23T01:31:21Z"
      },
      "message": "Corrections to bad-chain alert triggering\n\nThree corrections are made to the bad-chain alert triggering mechanism:\nthe sample interval is reduced to 130 minutes (from 240 minutes),\noversampling is eliminated, and the test is changed to make correct use\nof the poisson CDF.\n\nA sample interval of 130 minutes is chosen as the smallest interval\ncapable of detecting a too-few-blocks event with a false positive rate\nof once in 50 years.\n\nIt is critical that a sample be taken only every 130 minutes, otherwise\nthe test will catch events that span sample intervals, which it is\ndesigned to miss.  Oversampling is eliminated by changing the\nPartitionCheck funtion to return the interval at which it must be run,\nand scheduling it at that interval.\n\nA much smaller bias in the other direction is also eliminated.  The\npoisson PDF was being used to check the likelihood of a specific\nobservation, a method which is incorrectly sensitive to the size of the\nsample inteval.  This is corrected by using the poisson CDF and doing a\nseparate statistical check for the high and low cases.\n\nThe effect of the third correction is small because, in practice, the\ntargeted PDF levels accounted for almost all of the probability mass\nin the neighborhood of the test.",
      "tree": {
        "sha": "ed0b4b9b3bbb77d2ca66566054b2d755fa10680e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed0b4b9b3bbb77d2ca66566054b2d755fa10680e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b6e00af8193f46fa02af13c2e9852a6bd7461d00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b6e00af8193f46fa02af13c2e9852a6bd7461d00",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b6e00af8193f46fa02af13c2e9852a6bd7461d00"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 38,
      "deletions": 26
    },
    "files": [
      {
        "sha": "24a41979c1b5744efe1a9a60a6eaa1471fc5d9d1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
        "patch": "@@ -1672,7 +1672,8 @@ bool AppInit2(boost::thread_group& threadGroup, CScheduler& scheduler)\n     int64_t nPowTargetSpacing = Params().GetConsensus().nPowTargetSpacing;\n     CScheduler::Function f = boost::bind(&PartitionCheck, &IsInitialBlockDownload,\n                                          boost::ref(cs_main), boost::cref(pindexBestHeader), nPowTargetSpacing);\n-    scheduler.scheduleEvery(f, nPowTargetSpacing);\n+    CBlockIndex *pdummy = NULL;\n+    scheduler.scheduleEvery(f, PartitionCheck(&IsInitialBlockDownload, boost::ref(cs_main), boost::cref(pdummy), nPowTargetSpacing));\n \n     // Generate coins in the background\n     GenerateBitcoins(GetBoolArg(\"-gen\", DEFAULT_GENERATE), GetArg(\"-genproclimit\", DEFAULT_GENERATE_THREADS), chainparams);"
      },
      {
        "sha": "56f533cd4cfef8ccf93e71ec6399021e12960108",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 22,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
        "patch": "@@ -2022,19 +2022,31 @@ void ThreadScriptCheck() {\n // Called periodically asynchronously; alerts if it smells like\n // we're being fed a bad chain (blocks being generated much\n // too slowly or too quickly).\n+// Always returns the constant interval at which it should be scheduled.\n //\n-void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader,\n+int PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader,\n                     int64_t nPowTargetSpacing)\n {\n-    if (bestHeader == NULL || initialDownloadCheck()) return;\n+    // Aim for one false-positive about every fifty years of normal running:\n+    // The sample interval SPAN_SECONDS is chosen as the smallest multiple of target spacing expected\n+    // to trigger a too-few-blocks alert only once in fifty years (this will be when 0 blocks are seen):\n+    // blocks  cdf(blocks, 0)  alertThreshold\n+    //   11    1.67017e-5      4.18569e-6\n+    //   12    6.14421e-6      4.56621e-6\n+    //   13    2.26033e-6      4.94673e-6 <--- min such that (cdf < threshold)\n+    //   14    8.31529e-7      5.32725e-6\n+    //   15    3.05902e-7      5.70776e-6\n+    //TODO find BLOCKS_EXPECTED dynamically, for correct timing of non-10-minute intervals\n+    const int FIFTY_YEARS = 50*365*24*60*60;\n+    const int BLOCKS_EXPECTED = 13;\n+    const int SPAN_SECONDS = BLOCKS_EXPECTED * nPowTargetSpacing;\n+    double alertThreshold = 1.0 / (FIFTY_YEARS / SPAN_SECONDS);\n+\n+    if (bestHeader == NULL || initialDownloadCheck()) return SPAN_SECONDS;\n \n     static int64_t lastAlertTime = 0;\n     int64_t now = GetAdjustedTime();\n-    if (lastAlertTime > now-60*60*24) return; // Alert at most once per day\n-\n-    const int SPAN_HOURS=4;\n-    const int SPAN_SECONDS=SPAN_HOURS*60*60;\n-    int BLOCKS_EXPECTED = SPAN_SECONDS / nPowTargetSpacing;\n+    if (lastAlertTime > now-60*60*24) return SPAN_SECONDS; // Alert at most once per day\n \n     boost::math::poisson_distribution<double> poisson(BLOCKS_EXPECTED);\n \n@@ -2047,37 +2059,36 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n     while (i->GetBlockTime() >= startTime) {\n         ++nBlocks;\n         i = i->pprev;\n-        if (i == NULL) return; // Ran out of chain, we must not be fully sync'ed\n+        if (i == NULL) return SPAN_SECONDS; // Ran out of chain, we must not be fully sync'ed\n     }\n \n-    // How likely is it to find that many by chance?\n-    double p = boost::math::pdf(poisson, nBlocks);\n+    // How likely is it to find at least that many by chance?\n+    double pHigh = 1.0 - boost::math::cdf(poisson, std::max(0, nBlocks - 1));\n+    // How likely is it to find at most that few by chance?\n+    double pLow = boost::math::cdf(poisson, nBlocks);\n \n-    LogPrint(\"partitioncheck\", \"%s: Found %d blocks in the last %d hours\\n\", __func__, nBlocks, SPAN_HOURS);\n-    LogPrint(\"partitioncheck\", \"%s: likelihood: %g\\n\", __func__, p);\n-\n-    // Aim for one false-positive about every fifty years of normal running:\n-    const int FIFTY_YEARS = 50*365*24*60*60;\n-    double alertThreshold = 1.0 / (FIFTY_YEARS / SPAN_SECONDS);\n+    LogPrint(\"partitioncheck\", \"%s: Found %d blocks in the last %d seconds\\n\", __func__, nBlocks, SPAN_SECONDS);\n+    LogPrint(\"partitioncheck\", \"%s: likelihood that many: %g, that few: %g\\n\", __func__, pHigh, pLow);\n \n-    if (p <= alertThreshold && nBlocks < BLOCKS_EXPECTED)\n+    if (pLow <= alertThreshold)\n     {\n         // Many fewer blocks than expected: alert!\n-        strWarning = strprintf(_(\"WARNING: check your network connection, %d blocks received in the last %d hours (%d expected)\"),\n-                               nBlocks, SPAN_HOURS, BLOCKS_EXPECTED);\n+        strWarning = strprintf(_(\"WARNING: check your network connection, %d blocks received in the last %d seconds (%d expected)\"),\n+                               nBlocks, SPAN_SECONDS, BLOCKS_EXPECTED);\n     }\n-    else if (p <= alertThreshold && nBlocks > BLOCKS_EXPECTED)\n+    else if (pHigh <= alertThreshold)\n     {\n         // Many more blocks than expected: alert!\n-        strWarning = strprintf(_(\"WARNING: abnormally high number of blocks generated, %d blocks received in the last %d hours (%d expected)\"),\n-                               nBlocks, SPAN_HOURS, BLOCKS_EXPECTED);\n+        strWarning = strprintf(_(\"WARNING: abnormally high number of blocks generated, %d blocks received in the last %d seconds (%d expected)\"),\n+                               nBlocks, SPAN_SECONDS, BLOCKS_EXPECTED);\n     }\n     if (!strWarning.empty())\n     {\n         strMiscWarning = strWarning;\n         CAlert::Notify(strWarning, true);\n         lastAlertTime = now;\n     }\n+    return SPAN_SECONDS;\n }\n \n static int64_t nTimeCheck = 0;"
      },
      {
        "sha": "8c47aafc0e8086112b8c65e69f1c85baa3b6af15",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
        "patch": "@@ -232,7 +232,7 @@ bool SendMessages(CNode* pto);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n /** Try to detect Partition (network isolation) attacks against us */\n-void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader, int64_t nPowTargetSpacing);\n+int PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const CBlockIndex *const &bestHeader, int64_t nPowTargetSpacing);\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core."
      },
      {
        "sha": "cee628f7f2510ad1ea74af1d1d022400f53951d5",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/580aaa36a0f424b8d7af17ed6bc2c6e48febd842/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=580aaa36a0f424b8d7af17ed6bc2c6e48febd842",
        "patch": "@@ -239,10 +239,10 @@ BOOST_AUTO_TEST_CASE(PartitionAlert)\n     PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);\n     BOOST_CHECK(strMiscWarning.empty());\n \n-    // Test 4: get 2.5 times as many blocks as expected:\n+    // Test 4: get 3 times as many blocks as expected:\n     now += 60*60*24; // Pretend it is a day later\n     SetMockTime(now);\n-    int64_t quickSpacing = nPowTargetSpacing*2/5;\n+    int64_t quickSpacing = nPowTargetSpacing/3;\n     for (int i = 0; i < 100; i++) // Tweak chain timestamps:\n         indexDummy[i].nTime = now - (100-i)*quickSpacing;\n     PartitionCheck(falseFunc, csDummy, &indexDummy[99], nPowTargetSpacing);"
      }
    ]
  }
]