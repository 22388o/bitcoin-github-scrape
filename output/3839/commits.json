[
  {
    "sha": "df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZjg1MmQyYmNjNjU3M2EzZmNiM2U1OWY4MmY3ZWE0ZGZhMTEyOTBl",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-10T15:46:53Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-23T21:10:24Z"
      },
      "message": "Refactor proof of work related functions out of main",
      "tree": {
        "sha": "f8651a97cf4617ce0a867f964f5c70b0f2bf8090",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8651a97cf4617ce0a867f964f5c70b0f2bf8090"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36db6633c314b0f41aeee856f74a8d5d59334dbb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36db6633c314b0f41aeee856f74a8d5d59334dbb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36db6633c314b0f41aeee856f74a8d5d59334dbb"
      }
    ],
    "stats": {
      "total": 279,
      "additions": 155,
      "deletions": 124
    },
    "files": [
      {
        "sha": "7e7fa0c3caec3ac27ecf267140d30bc20a708f58",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -71,6 +71,7 @@ BITCOIN_CORE_H = \\\n   netbase.h \\\n   net.h \\\n   noui.h \\\n+  pow.h \\\n   protocol.h \\\n   rpcclient.h \\\n   rpcprotocol.h \\\n@@ -121,6 +122,7 @@ libbitcoin_server_a_SOURCES = \\\n   miner.cpp \\\n   net.cpp \\\n   noui.cpp \\\n+  pow.cpp \\\n   rpcblockchain.cpp \\\n   rpcmining.cpp \\\n   rpcmisc.cpp \\"
      },
      {
        "sha": "ea47601081bddca82508a9871e4c88de926cf32c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 112,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -12,6 +12,7 @@\n #include \"checkqueue.h\"\n #include \"init.h\"\n #include \"net.h\"\n+#include \"pow.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n@@ -1194,118 +1195,6 @@ int64_t GetBlockValue(int nHeight, int64_t nFees)\n     return nSubsidy + nFees;\n }\n \n-static const int64_t nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-static const int64_t nTargetSpacing = 10 * 60;\n-static const int64_t nInterval = nTargetTimespan / nTargetSpacing;\n-\n-//\n-// minimum amount of work that could possibly be required nTime after\n-// minimum work required was nBase\n-//\n-unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n-{\n-    const uint256 &bnLimit = Params().ProofOfWorkLimit();\n-    // Testnet has min-difficulty blocks\n-    // after nTargetSpacing*2 time between blocks:\n-    if (Params().AllowMinDifficultyBlocks() && nTime > nTargetSpacing*2)\n-        return bnLimit.GetCompact();\n-\n-    uint256 bnResult;\n-    bnResult.SetCompact(nBase);\n-    while (nTime > 0 && bnResult < bnLimit)\n-    {\n-        // Maximum 400% adjustment...\n-        bnResult *= 4;\n-        // ... in best-case exactly 4-times-normal target time\n-        nTime -= nTargetTimespan*4;\n-    }\n-    if (bnResult > bnLimit)\n-        bnResult = bnLimit;\n-    return bnResult.GetCompact();\n-}\n-\n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n-{\n-    unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n-\n-    // Genesis block\n-    if (pindexLast == NULL)\n-        return nProofOfWorkLimit;\n-\n-    // Only change once per interval\n-    if ((pindexLast->nHeight+1) % nInterval != 0)\n-    {\n-        if (Params().AllowMinDifficultyBlocks())\n-        {\n-            // Special difficulty rule for testnet:\n-            // If the new block's timestamp is more than 2* 10 minutes\n-            // then allow mining of a min-difficulty block.\n-            if (pblock->nTime > pindexLast->nTime + nTargetSpacing*2)\n-                return nProofOfWorkLimit;\n-            else\n-            {\n-                // Return the last non-special-min-difficulty-rules-block\n-                const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % nInterval != 0 && pindex->nBits == nProofOfWorkLimit)\n-                    pindex = pindex->pprev;\n-                return pindex->nBits;\n-            }\n-        }\n-        return pindexLast->nBits;\n-    }\n-\n-    // Go back by what we want to be 14 days worth of blocks\n-    const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < nInterval-1; i++)\n-        pindexFirst = pindexFirst->pprev;\n-    assert(pindexFirst);\n-\n-    // Limit adjustment step\n-    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n-    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n-    if (nActualTimespan < nTargetTimespan/4)\n-        nActualTimespan = nTargetTimespan/4;\n-    if (nActualTimespan > nTargetTimespan*4)\n-        nActualTimespan = nTargetTimespan*4;\n-\n-    // Retarget\n-    uint256 bnNew;\n-    uint256 bnOld;\n-    bnNew.SetCompact(pindexLast->nBits);\n-    bnOld = bnNew;\n-    bnNew *= nActualTimespan;\n-    bnNew /= nTargetTimespan;\n-\n-    if (bnNew > Params().ProofOfWorkLimit())\n-        bnNew = Params().ProofOfWorkLimit();\n-\n-    /// debug print\n-    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"nTargetTimespan = %d    nActualTimespan = %d\\n\", nTargetTimespan, nActualTimespan);\n-    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n-    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n-\n-    return bnNew.GetCompact();\n-}\n-\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n-{\n-    bool fNegative;\n-    bool fOverflow;\n-    uint256 bnTarget;\n-    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n-\n-    // Check range\n-    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n-        return error(\"CheckProofOfWork() : nBits below minimum work\");\n-\n-    // Check proof of work matches claimed amount\n-    if (hash > bnTarget)\n-        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n-\n-    return true;\n-}\n-\n bool IsInitialBlockDownload()\n {\n     LOCK(cs_main);"
      },
      {
        "sha": "9858bcfd69cfc29b7e3bcde1dd81deb7bd52801b",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -146,10 +146,6 @@ bool ProcessMessages(CNode* pfrom);\n bool SendMessages(CNode* pto, bool fSendTrickle);\n /** Run an instance of the script checking thread */\n void ThreadScriptCheck();\n-/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n-bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n-/** Calculate the minimum amount of work a received block needs, without knowing its direct parent */\n-unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime);\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n /** Format a string that describes several potential problems detected by the core */\n@@ -159,7 +155,6 @@ bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, b\n /** Find the best known block, and make it the tip of the block chain */\n bool ActivateBestChain(CValidationState &state);\n int64_t GetBlockValue(int nHeight, int64_t nFees);\n-unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n \n void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev);\n \n@@ -812,11 +807,6 @@ class CBlockIndex\n         return (~bnTarget / (bnTarget + 1)) + 1;\n     }\n \n-    bool CheckIndex() const\n-    {\n-        return CheckProofOfWork(GetBlockHash(), nBits);\n-    }\n-\n     enum { nMedianTimeSpan=11 };\n \n     int64_t GetMedianTimePast() const"
      },
      {
        "sha": "2a4f8cfa52119cdc159b8a6baef814a0c7c626a3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -9,6 +9,7 @@\n #include \"hash.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"pow.h\"\n #ifdef ENABLE_WALLET\n #include \"wallet.h\"\n #endif"
      },
      {
        "sha": "274a5d6f98a10560ec682e72e03489beaa67ccc6",
        "filename": "src/pow.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"pow.h\"\n+\n+#include \"chainparams.h\"\n+#include \"core.h\"\n+#include \"main.h\"\n+#include \"uint256.h\"\n+\n+static const int64_t nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+static const int64_t nTargetSpacing = 10 * 60;\n+static const int64_t nInterval = nTargetTimespan / nTargetSpacing;\n+\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n+{\n+    unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n+\n+    // Genesis block\n+    if (pindexLast == NULL)\n+        return nProofOfWorkLimit;\n+\n+    // Only change once per interval\n+    if ((pindexLast->nHeight+1) % nInterval != 0)\n+    {\n+        if (Params().AllowMinDifficultyBlocks())\n+        {\n+            // Special difficulty rule for testnet:\n+            // If the new block's timestamp is more than 2* 10 minutes\n+            // then allow mining of a min-difficulty block.\n+            if (pblock->nTime > pindexLast->nTime + nTargetSpacing*2)\n+                return nProofOfWorkLimit;\n+            else\n+            {\n+                // Return the last non-special-min-difficulty-rules-block\n+                const CBlockIndex* pindex = pindexLast;\n+                while (pindex->pprev && pindex->nHeight % nInterval != 0 && pindex->nBits == nProofOfWorkLimit)\n+                    pindex = pindex->pprev;\n+                return pindex->nBits;\n+            }\n+        }\n+        return pindexLast->nBits;\n+    }\n+\n+    // Go back by what we want to be 14 days worth of blocks\n+    const CBlockIndex* pindexFirst = pindexLast;\n+    for (int i = 0; pindexFirst && i < nInterval-1; i++)\n+        pindexFirst = pindexFirst->pprev;\n+    assert(pindexFirst);\n+\n+    // Limit adjustment step\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n+    if (nActualTimespan < nTargetTimespan/4)\n+        nActualTimespan = nTargetTimespan/4;\n+    if (nActualTimespan > nTargetTimespan*4)\n+        nActualTimespan = nTargetTimespan*4;\n+\n+    // Retarget\n+    uint256 bnNew;\n+    uint256 bnOld;\n+    bnNew.SetCompact(pindexLast->nBits);\n+    bnOld = bnNew;\n+    bnNew *= nActualTimespan;\n+    bnNew /= nTargetTimespan;\n+\n+    if (bnNew > Params().ProofOfWorkLimit())\n+        bnNew = Params().ProofOfWorkLimit();\n+\n+    /// debug print\n+    LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n+    LogPrintf(\"nTargetTimespan = %d    nActualTimespan = %d\\n\", nTargetTimespan, nActualTimespan);\n+    LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n+    LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n+\n+    return bnNew.GetCompact();\n+}\n+\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits)\n+{\n+    bool fNegative;\n+    bool fOverflow;\n+    uint256 bnTarget;\n+    bnTarget.SetCompact(nBits, &fNegative, &fOverflow);\n+\n+    // Check range\n+    if (fNegative || bnTarget == 0 || fOverflow || bnTarget > Params().ProofOfWorkLimit())\n+        return error(\"CheckProofOfWork() : nBits below minimum work\");\n+\n+    // Check proof of work matches claimed amount\n+    if (hash > bnTarget)\n+        return error(\"CheckProofOfWork() : hash doesn't match nBits\");\n+\n+    return true;\n+}\n+\n+//\n+// minimum amount of work that could possibly be required nTime after\n+// minimum work required was nBase\n+//\n+unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n+{\n+    const uint256 &bnLimit = Params().ProofOfWorkLimit();\n+    // Testnet has min-difficulty blocks\n+    // after nTargetSpacing*2 time between blocks:\n+    if (Params().AllowMinDifficultyBlocks() && nTime > nTargetSpacing*2)\n+        return bnLimit.GetCompact();\n+\n+    uint256 bnResult;\n+    bnResult.SetCompact(nBase);\n+    while (nTime > 0 && bnResult < bnLimit)\n+    {\n+        // Maximum 400% adjustment...\n+        bnResult *= 4;\n+        // ... in best-case exactly 4-times-normal target time\n+        nTime -= nTargetTimespan*4;\n+    }\n+    if (bnResult > bnLimit)\n+        bnResult = bnLimit;\n+    return bnResult.GetCompact();\n+}"
      },
      {
        "sha": "0ce5b48766a8d5018fb4b968398332f6d4301f0a",
        "filename": "src/pow.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/pow.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/pow.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.h?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -0,0 +1,23 @@\n+\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2014 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_POW_H\n+#define BITCOIN_POW_H\n+\n+#include <stdint.h>\n+\n+class CBlockIndex;\n+class CBlockHeader;\n+class uint256;\n+\n+unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n+\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n+bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n+/** Calculate the minimum amount of work a received block needs, without knowing its direct parent */\n+unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime);\n+\n+#endif"
      },
      {
        "sha": "f60070eb5bd20af0cc58235cec29db26807b8b91",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -9,6 +9,7 @@\n #include \"net.h\"\n #include \"main.h\"\n #include \"miner.h\"\n+#include \"pow.h\"\n #ifdef ENABLE_WALLET\n #include \"db.h\"\n #include \"wallet.h\""
      },
      {
        "sha": "d512053051a10d3cf43c6e9a5b16955023c6dda4",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -11,6 +11,7 @@\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"net.h\"\n+#include \"pow.h\"\n #include \"script.h\"\n #include \"serialize.h\"\n "
      },
      {
        "sha": "92137f71ff19568306739afd31e7408c47ec02d6",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "patch": "@@ -6,6 +6,7 @@\n #include \"txdb.h\"\n \n #include \"core.h\"\n+#include \"pow.h\"\n #include \"uint256.h\"\n \n #include <stdint.h>\n@@ -212,8 +213,8 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n                 pindexNew->nStatus        = diskindex.nStatus;\n                 pindexNew->nTx            = diskindex.nTx;\n \n-                if (!pindexNew->CheckIndex())\n-                    return error(\"LoadBlockIndex() : CheckIndex failed: %s\", pindexNew->ToString());\n+                if (!CheckProofOfWork(pindexNew->GetBlockHash(), pindexNew->nBits))\n+                    return error(\"LoadBlockIndex() : CheckProofOfWork failed: %s\", pindexNew->ToString());\n \n                 pcursor->Next();\n             } else {"
      }
    ]
  },
  {
    "sha": "fd704c7b2c5ab8b24b1829f000b829d7156b8b3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZDcwNGM3YjJjNWFiOGIyNGIxODI5ZjAwMGI4MjlkNzE1NmI4YjNj",
    "commit": {
      "author": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-03-22T17:29:34Z"
      },
      "committer": {
        "name": "jtimon",
        "email": "jtimon@monetize.io",
        "date": "2014-06-23T21:10:24Z"
      },
      "message": "move pow constants to chainparams",
      "tree": {
        "sha": "d5da5ec14cdcdd195464e4482e08dadce7cf91df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5da5ec14cdcdd195464e4482e08dadce7cf91df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c/comments",
    "author": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jtimon",
      "id": 1008458,
      "node_id": "MDQ6VXNlcjEwMDg0NTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1008458?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jtimon",
      "html_url": "https://github.com/jtimon",
      "followers_url": "https://api.github.com/users/jtimon/followers",
      "following_url": "https://api.github.com/users/jtimon/following{/other_user}",
      "gists_url": "https://api.github.com/users/jtimon/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jtimon/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jtimon/subscriptions",
      "organizations_url": "https://api.github.com/users/jtimon/orgs",
      "repos_url": "https://api.github.com/users/jtimon/repos",
      "events_url": "https://api.github.com/users/jtimon/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jtimon/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/df852d2bcc6573a3fcb3e59f82f7ea4dfa11290e"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 25,
      "deletions": 17
    },
    "files": [
      {
        "sha": "eb56af750e1e14bf7d780f75d47c9f2d0859150e",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=fd704c7b2c5ab8b24b1829f000b829d7156b8b3c",
        "patch": "@@ -117,6 +117,8 @@ class CMainParams : public CChainParams {\n         nRejectBlockOutdatedMajority = 950;\n         nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 0;\n+        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        nTargetSpacing = 10 * 60;\n \n         // Build the genesis block. Note that the output of the genesis coinbase cannot\n         // be spent as it did not originally exist in the database.\n@@ -204,6 +206,9 @@ class CTestNetParams : public CMainParams {\n         nEnforceBlockUpgradeMajority = 51;\n         nRejectBlockOutdatedMajority = 75;\n         nToCheckBlockUpgradeMajority = 100;\n+        nMinerThreads = 0;\n+        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        nTargetSpacing = 10 * 60;\n         strDataDir = \"testnet3\";\n \n         // Modify the testnet genesis block so the timestamp is valid for a later start.\n@@ -251,6 +256,8 @@ class CRegTestParams : public CTestNetParams {\n         nRejectBlockOutdatedMajority = 950;\n         nToCheckBlockUpgradeMajority = 1000;\n         nMinerThreads = 1;\n+        nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+        nTargetSpacing = 10 * 60;\n         bnProofOfWorkLimit = ~uint256(0) >> 1;\n         genesis.nTime = 1296688602;\n         genesis.nBits = 0x207fffff;"
      },
      {
        "sha": "e9774bbfa2f2fc4fbe575a732e26d4d3807c6c56",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=fd704c7b2c5ab8b24b1829f000b829d7156b8b3c",
        "patch": "@@ -70,6 +70,9 @@ class CChainParams\n     bool AllowMinDifficultyBlocks() const { return fAllowMinDifficultyBlocks; }\n     /* Make standard checks */\n     bool RequireStandard() const { return fRequireStandard; }\n+    int64_t TargetTimespan() const { return nTargetTimespan; }\n+    int64_t TargetSpacing() const { return nTargetSpacing; }\n+    int64_t Interval() const { return nTargetTimespan / nTargetSpacing; }\n     const std::string& DataDir() const { return strDataDir; }\n     /* Make miner stop after a block is found. In RPC, don't return\n      * until nGenProcLimit blocks are generated */\n@@ -95,6 +98,8 @@ class CChainParams\n     int nEnforceBlockUpgradeMajority;\n     int nRejectBlockOutdatedMajority;\n     int nToCheckBlockUpgradeMajority;\n+    int64_t nTargetTimespan;\n+    int64_t nTargetSpacing;\n     std::string strDataDir;\n     int nMinerThreads;\n     std::vector<CDNSSeedData> vSeeds;"
      },
      {
        "sha": "952250decdab7ce9c48e968baeee522cc2f718d7",
        "filename": "src/pow.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c/src/pow.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fd704c7b2c5ab8b24b1829f000b829d7156b8b3c/src/pow.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pow.cpp?ref=fd704c7b2c5ab8b24b1829f000b829d7156b8b3c",
        "patch": "@@ -10,10 +10,6 @@\n #include \"main.h\"\n #include \"uint256.h\"\n \n-static const int64_t nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-static const int64_t nTargetSpacing = 10 * 60;\n-static const int64_t nInterval = nTargetTimespan / nTargetSpacing;\n-\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock)\n {\n     unsigned int nProofOfWorkLimit = Params().ProofOfWorkLimit().GetCompact();\n@@ -23,20 +19,20 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n         return nProofOfWorkLimit;\n \n     // Only change once per interval\n-    if ((pindexLast->nHeight+1) % nInterval != 0)\n+    if ((pindexLast->nHeight+1) % Params().Interval() != 0)\n     {\n         if (Params().AllowMinDifficultyBlocks())\n         {\n             // Special difficulty rule for testnet:\n             // If the new block's timestamp is more than 2* 10 minutes\n             // then allow mining of a min-difficulty block.\n-            if (pblock->nTime > pindexLast->nTime + nTargetSpacing*2)\n+            if (pblock->nTime > pindexLast->nTime + Params().TargetSpacing()*2)\n                 return nProofOfWorkLimit;\n             else\n             {\n                 // Return the last non-special-min-difficulty-rules-block\n                 const CBlockIndex* pindex = pindexLast;\n-                while (pindex->pprev && pindex->nHeight % nInterval != 0 && pindex->nBits == nProofOfWorkLimit)\n+                while (pindex->pprev && pindex->nHeight % Params().Interval() != 0 && pindex->nBits == nProofOfWorkLimit)\n                     pindex = pindex->pprev;\n                 return pindex->nBits;\n             }\n@@ -46,32 +42,32 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     // Go back by what we want to be 14 days worth of blocks\n     const CBlockIndex* pindexFirst = pindexLast;\n-    for (int i = 0; pindexFirst && i < nInterval-1; i++)\n+    for (int i = 0; pindexFirst && i < Params().Interval()-1; i++)\n         pindexFirst = pindexFirst->pprev;\n     assert(pindexFirst);\n \n     // Limit adjustment step\n     int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n     LogPrintf(\"  nActualTimespan = %d  before bounds\\n\", nActualTimespan);\n-    if (nActualTimespan < nTargetTimespan/4)\n-        nActualTimespan = nTargetTimespan/4;\n-    if (nActualTimespan > nTargetTimespan*4)\n-        nActualTimespan = nTargetTimespan*4;\n+    if (nActualTimespan < Params().TargetTimespan()/4)\n+        nActualTimespan = Params().TargetTimespan()/4;\n+    if (nActualTimespan > Params().TargetTimespan()*4)\n+        nActualTimespan = Params().TargetTimespan()*4;\n \n     // Retarget\n     uint256 bnNew;\n     uint256 bnOld;\n     bnNew.SetCompact(pindexLast->nBits);\n     bnOld = bnNew;\n     bnNew *= nActualTimespan;\n-    bnNew /= nTargetTimespan;\n+    bnNew /= Params().TargetTimespan();\n \n     if (bnNew > Params().ProofOfWorkLimit())\n         bnNew = Params().ProofOfWorkLimit();\n \n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"nTargetTimespan = %d    nActualTimespan = %d\\n\", nTargetTimespan, nActualTimespan);\n+    LogPrintf(\"Params().TargetTimespan() = %d    nActualTimespan = %d\\n\", Params().TargetTimespan(), nActualTimespan);\n     LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, bnOld.ToString());\n     LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.ToString());\n \n@@ -104,8 +100,8 @@ unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n {\n     const uint256 &bnLimit = Params().ProofOfWorkLimit();\n     // Testnet has min-difficulty blocks\n-    // after nTargetSpacing*2 time between blocks:\n-    if (Params().AllowMinDifficultyBlocks() && nTime > nTargetSpacing*2)\n+    // after Params().TargetSpacing()*2 time between blocks:\n+    if (Params().AllowMinDifficultyBlocks() && nTime > Params().TargetSpacing()*2)\n         return bnLimit.GetCompact();\n \n     uint256 bnResult;\n@@ -115,7 +111,7 @@ unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n         // Maximum 400% adjustment...\n         bnResult *= 4;\n         // ... in best-case exactly 4-times-normal target time\n-        nTime -= nTargetTimespan*4;\n+        nTime -= Params().TargetTimespan()*4;\n     }\n     if (bnResult > bnLimit)\n         bnResult = bnLimit;"
      }
    ]
  }
]